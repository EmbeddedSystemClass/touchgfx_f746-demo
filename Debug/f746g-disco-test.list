
f746g-disco-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023508  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000032bc  080236d8  080236d8  000336d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00014d7c  08026994  08026994  00036994  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000146b8  0803b710  0803b710  0004b710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 000000a8  0804fdc8  0804fdc8  0005fdc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  0804fe70  0804fe70  00060110  2**0
                  CONTENTS
  7 .ARM          00000008  0804fe70  0804fe70  0005fe70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  0804fe78  0804fe78  00060110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000010  0804fe78  0804fe78  0005fe78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  0804fe88  0804fe88  0005fe88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         00000110  20000000  0804fe90  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000a8b8  20000110  0804ffa0  00060110  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  2000a9c8  0804ffa0  0006a9c8  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  00060110  2**0
                  CONTENTS, READONLY
 15 .debug_info   000b9ec5  00000000  00000000  00060140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0001bde5  00000000  00000000  0011a005  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000071f8  00000000  00000000  00135df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00006a80  00000000  00000000  0013cfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00044369  00000000  00000000  00143a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   0007c01f  00000000  00000000  00187dd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00146239  00000000  00000000  00203df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .comment      000000d2  00000000  00000000  0034a029  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0001f67c  00000000  00000000  0034a0fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000110 	.word	0x20000110
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080236c0 	.word	0x080236c0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000114 	.word	0x20000114
 800020c:	080236c0 	.word	0x080236c0

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96e 	b.w	80005a4 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468c      	mov	ip, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	f040 8083 	bne.w	80003f6 <__udivmoddi4+0x116>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d947      	bls.n	8000386 <__udivmoddi4+0xa6>
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	b142      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fc:	f1c2 0020 	rsb	r0, r2, #32
 8000300:	fa24 f000 	lsr.w	r0, r4, r0
 8000304:	4091      	lsls	r1, r2
 8000306:	4097      	lsls	r7, r2
 8000308:	ea40 0c01 	orr.w	ip, r0, r1
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbbc f6f8 	udiv	r6, ip, r8
 8000318:	fa1f fe87 	uxth.w	lr, r7
 800031c:	fb08 c116 	mls	r1, r8, r6, ip
 8000320:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000324:	fb06 f10e 	mul.w	r1, r6, lr
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000332:	f080 8119 	bcs.w	8000568 <__udivmoddi4+0x288>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8116 	bls.w	8000568 <__udivmoddi4+0x288>
 800033c:	3e02      	subs	r6, #2
 800033e:	443b      	add	r3, r7
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0f8 	udiv	r0, r3, r8
 8000348:	fb08 3310 	mls	r3, r8, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fe0e 	mul.w	lr, r0, lr
 8000354:	45a6      	cmp	lr, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	193c      	adds	r4, r7, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8105 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f240 8102 	bls.w	800056c <__udivmoddi4+0x28c>
 8000368:	3802      	subs	r0, #2
 800036a:	443c      	add	r4, r7
 800036c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000370:	eba4 040e 	sub.w	r4, r4, lr
 8000374:	2600      	movs	r6, #0
 8000376:	b11d      	cbz	r5, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c5 4300 	strd	r4, r3, [r5]
 8000380:	4631      	mov	r1, r6
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	b902      	cbnz	r2, 800038a <__udivmoddi4+0xaa>
 8000388:	deff      	udf	#255	; 0xff
 800038a:	fab2 f282 	clz	r2, r2
 800038e:	2a00      	cmp	r2, #0
 8000390:	d150      	bne.n	8000434 <__udivmoddi4+0x154>
 8000392:	1bcb      	subs	r3, r1, r7
 8000394:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000398:	fa1f f887 	uxth.w	r8, r7
 800039c:	2601      	movs	r6, #1
 800039e:	fbb3 fcfe 	udiv	ip, r3, lr
 80003a2:	0c21      	lsrs	r1, r4, #16
 80003a4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003a8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ac:	fb08 f30c 	mul.w	r3, r8, ip
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80003b4:	1879      	adds	r1, r7, r1
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0xe2>
 80003bc:	428b      	cmp	r3, r1
 80003be:	f200 80e9 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1ac9      	subs	r1, r1, r3
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003d0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x10c>
 80003dc:	193c      	adds	r4, r7, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x10a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80d9 	bhi.w	800059c <__udivmoddi4+0x2bc>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e7bf      	b.n	8000376 <__udivmoddi4+0x96>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d909      	bls.n	800040e <__udivmoddi4+0x12e>
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	f000 80b1 	beq.w	8000562 <__udivmoddi4+0x282>
 8000400:	2600      	movs	r6, #0
 8000402:	e9c5 0100 	strd	r0, r1, [r5]
 8000406:	4630      	mov	r0, r6
 8000408:	4631      	mov	r1, r6
 800040a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800040e:	fab3 f683 	clz	r6, r3
 8000412:	2e00      	cmp	r6, #0
 8000414:	d14a      	bne.n	80004ac <__udivmoddi4+0x1cc>
 8000416:	428b      	cmp	r3, r1
 8000418:	d302      	bcc.n	8000420 <__udivmoddi4+0x140>
 800041a:	4282      	cmp	r2, r0
 800041c:	f200 80b8 	bhi.w	8000590 <__udivmoddi4+0x2b0>
 8000420:	1a84      	subs	r4, r0, r2
 8000422:	eb61 0103 	sbc.w	r1, r1, r3
 8000426:	2001      	movs	r0, #1
 8000428:	468c      	mov	ip, r1
 800042a:	2d00      	cmp	r5, #0
 800042c:	d0a8      	beq.n	8000380 <__udivmoddi4+0xa0>
 800042e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0xa0>
 8000434:	f1c2 0320 	rsb	r3, r2, #32
 8000438:	fa20 f603 	lsr.w	r6, r0, r3
 800043c:	4097      	lsls	r7, r2
 800043e:	fa01 f002 	lsl.w	r0, r1, r2
 8000442:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000446:	40d9      	lsrs	r1, r3
 8000448:	4330      	orrs	r0, r6
 800044a:	0c03      	lsrs	r3, r0, #16
 800044c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000450:	fa1f f887 	uxth.w	r8, r7
 8000454:	fb0e 1116 	mls	r1, lr, r6, r1
 8000458:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800045c:	fb06 f108 	mul.w	r1, r6, r8
 8000460:	4299      	cmp	r1, r3
 8000462:	fa04 f402 	lsl.w	r4, r4, r2
 8000466:	d909      	bls.n	800047c <__udivmoddi4+0x19c>
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	f106 3cff 	add.w	ip, r6, #4294967295
 800046e:	f080 808d 	bcs.w	800058c <__udivmoddi4+0x2ac>
 8000472:	4299      	cmp	r1, r3
 8000474:	f240 808a 	bls.w	800058c <__udivmoddi4+0x2ac>
 8000478:	3e02      	subs	r6, #2
 800047a:	443b      	add	r3, r7
 800047c:	1a5b      	subs	r3, r3, r1
 800047e:	b281      	uxth	r1, r0
 8000480:	fbb3 f0fe 	udiv	r0, r3, lr
 8000484:	fb0e 3310 	mls	r3, lr, r0, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb00 f308 	mul.w	r3, r0, r8
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0x1c4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f100 3cff 	add.w	ip, r0, #4294967295
 800049a:	d273      	bcs.n	8000584 <__udivmoddi4+0x2a4>
 800049c:	428b      	cmp	r3, r1
 800049e:	d971      	bls.n	8000584 <__udivmoddi4+0x2a4>
 80004a0:	3802      	subs	r0, #2
 80004a2:	4439      	add	r1, r7
 80004a4:	1acb      	subs	r3, r1, r3
 80004a6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004aa:	e778      	b.n	800039e <__udivmoddi4+0xbe>
 80004ac:	f1c6 0c20 	rsb	ip, r6, #32
 80004b0:	fa03 f406 	lsl.w	r4, r3, r6
 80004b4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004b8:	431c      	orrs	r4, r3
 80004ba:	fa20 f70c 	lsr.w	r7, r0, ip
 80004be:	fa01 f306 	lsl.w	r3, r1, r6
 80004c2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004c6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ca:	431f      	orrs	r7, r3
 80004cc:	0c3b      	lsrs	r3, r7, #16
 80004ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80004d2:	fa1f f884 	uxth.w	r8, r4
 80004d6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004da:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004de:	fb09 fa08 	mul.w	sl, r9, r8
 80004e2:	458a      	cmp	sl, r1
 80004e4:	fa02 f206 	lsl.w	r2, r2, r6
 80004e8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x220>
 80004ee:	1861      	adds	r1, r4, r1
 80004f0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004f4:	d248      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 80004f6:	458a      	cmp	sl, r1
 80004f8:	d946      	bls.n	8000588 <__udivmoddi4+0x2a8>
 80004fa:	f1a9 0902 	sub.w	r9, r9, #2
 80004fe:	4421      	add	r1, r4
 8000500:	eba1 010a 	sub.w	r1, r1, sl
 8000504:	b2bf      	uxth	r7, r7
 8000506:	fbb1 f0fe 	udiv	r0, r1, lr
 800050a:	fb0e 1110 	mls	r1, lr, r0, r1
 800050e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000512:	fb00 f808 	mul.w	r8, r0, r8
 8000516:	45b8      	cmp	r8, r7
 8000518:	d907      	bls.n	800052a <__udivmoddi4+0x24a>
 800051a:	19e7      	adds	r7, r4, r7
 800051c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000520:	d22e      	bcs.n	8000580 <__udivmoddi4+0x2a0>
 8000522:	45b8      	cmp	r8, r7
 8000524:	d92c      	bls.n	8000580 <__udivmoddi4+0x2a0>
 8000526:	3802      	subs	r0, #2
 8000528:	4427      	add	r7, r4
 800052a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800052e:	eba7 0708 	sub.w	r7, r7, r8
 8000532:	fba0 8902 	umull	r8, r9, r0, r2
 8000536:	454f      	cmp	r7, r9
 8000538:	46c6      	mov	lr, r8
 800053a:	4649      	mov	r1, r9
 800053c:	d31a      	bcc.n	8000574 <__udivmoddi4+0x294>
 800053e:	d017      	beq.n	8000570 <__udivmoddi4+0x290>
 8000540:	b15d      	cbz	r5, 800055a <__udivmoddi4+0x27a>
 8000542:	ebb3 020e 	subs.w	r2, r3, lr
 8000546:	eb67 0701 	sbc.w	r7, r7, r1
 800054a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800054e:	40f2      	lsrs	r2, r6
 8000550:	ea4c 0202 	orr.w	r2, ip, r2
 8000554:	40f7      	lsrs	r7, r6
 8000556:	e9c5 2700 	strd	r2, r7, [r5]
 800055a:	2600      	movs	r6, #0
 800055c:	4631      	mov	r1, r6
 800055e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e70b      	b.n	8000380 <__udivmoddi4+0xa0>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0x60>
 800056c:	4618      	mov	r0, r3
 800056e:	e6fd      	b.n	800036c <__udivmoddi4+0x8c>
 8000570:	4543      	cmp	r3, r8
 8000572:	d2e5      	bcs.n	8000540 <__udivmoddi4+0x260>
 8000574:	ebb8 0e02 	subs.w	lr, r8, r2
 8000578:	eb69 0104 	sbc.w	r1, r9, r4
 800057c:	3801      	subs	r0, #1
 800057e:	e7df      	b.n	8000540 <__udivmoddi4+0x260>
 8000580:	4608      	mov	r0, r1
 8000582:	e7d2      	b.n	800052a <__udivmoddi4+0x24a>
 8000584:	4660      	mov	r0, ip
 8000586:	e78d      	b.n	80004a4 <__udivmoddi4+0x1c4>
 8000588:	4681      	mov	r9, r0
 800058a:	e7b9      	b.n	8000500 <__udivmoddi4+0x220>
 800058c:	4666      	mov	r6, ip
 800058e:	e775      	b.n	800047c <__udivmoddi4+0x19c>
 8000590:	4630      	mov	r0, r6
 8000592:	e74a      	b.n	800042a <__udivmoddi4+0x14a>
 8000594:	f1ac 0c02 	sub.w	ip, ip, #2
 8000598:	4439      	add	r1, r7
 800059a:	e713      	b.n	80003c4 <__udivmoddi4+0xe4>
 800059c:	3802      	subs	r0, #2
 800059e:	443c      	add	r4, r7
 80005a0:	e724      	b.n	80003ec <__udivmoddi4+0x10c>
 80005a2:	bf00      	nop

080005a4 <__aeabi_idiv0>:
 80005a4:	4770      	bx	lr
 80005a6:	bf00      	nop

080005a8 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80005b2:	20c8      	movs	r0, #200	; 0xc8
 80005b4:	f013 fe2e 	bl	8014214 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005b8:	f000 fa7a 	bl	8000ab0 <ft5336_I2C_InitializeIfRequired>
}
 80005bc:	bf00      	nop
 80005be:	3708      	adds	r7, #8
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}

080005c4 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4603      	mov	r3, r0
 80005cc:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80005ce:	bf00      	nop
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b084      	sub	sp, #16
 80005de:	af00      	add	r7, sp, #0
 80005e0:	4603      	mov	r3, r0
 80005e2:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80005ec:	2300      	movs	r3, #0
 80005ee:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005f0:	f000 fa5e 	bl	8000ab0 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005f4:	2300      	movs	r3, #0
 80005f6:	73fb      	strb	r3, [r7, #15]
 80005f8:	e010      	b.n	800061c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80005fa:	88fb      	ldrh	r3, [r7, #6]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	21a8      	movs	r1, #168	; 0xa8
 8000600:	4618      	mov	r0, r3
 8000602:	f013 fde9 	bl	80141d8 <TS_IO_Read>
 8000606:	4603      	mov	r3, r0
 8000608:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800060a:	7b7b      	ldrb	r3, [r7, #13]
 800060c:	b2db      	uxtb	r3, r3
 800060e:	2b51      	cmp	r3, #81	; 0x51
 8000610:	d101      	bne.n	8000616 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000612:	2301      	movs	r3, #1
 8000614:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000616:	7bfb      	ldrb	r3, [r7, #15]
 8000618:	3301      	adds	r3, #1
 800061a:	73fb      	strb	r3, [r7, #15]
 800061c:	7bfb      	ldrb	r3, [r7, #15]
 800061e:	2b02      	cmp	r3, #2
 8000620:	d802      	bhi.n	8000628 <ft5336_ReadID+0x4e>
 8000622:	7bbb      	ldrb	r3, [r7, #14]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d0e8      	beq.n	80005fa <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000628:	7b7b      	ldrb	r3, [r7, #13]
 800062a:	b2db      	uxtb	r3, r3
 800062c:	b29b      	uxth	r3, r3
}
 800062e:	4618      	mov	r0, r3
 8000630:	3710      	adds	r7, #16
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	b082      	sub	sp, #8
 800063a:	af00      	add	r7, sp, #0
 800063c:	4603      	mov	r3, r0
 800063e:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000640:	88fb      	ldrh	r3, [r7, #6]
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fa44 	bl	8000ad0 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 f932 	bl	80008b4 <ft5336_TS_DisableIT>
}
 8000650:	bf00      	nop
 8000652:	3708      	adds	r7, #8
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}

08000658 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000662:	2300      	movs	r3, #0
 8000664:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8000666:	88fb      	ldrh	r3, [r7, #6]
 8000668:	b2db      	uxtb	r3, r3
 800066a:	2102      	movs	r1, #2
 800066c:	4618      	mov	r0, r3
 800066e:	f013 fdb3 	bl	80141d8 <TS_IO_Read>
 8000672:	4603      	mov	r3, r0
 8000674:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	b2db      	uxtb	r3, r3
 800067a:	f003 030f 	and.w	r3, r3, #15
 800067e:	b2db      	uxtb	r3, r3
 8000680:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000682:	7bfb      	ldrb	r3, [r7, #15]
 8000684:	b2db      	uxtb	r3, r3
 8000686:	2b05      	cmp	r3, #5
 8000688:	d901      	bls.n	800068e <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 800068e:	7bfb      	ldrb	r3, [r7, #15]
 8000690:	b2da      	uxtb	r2, r3
 8000692:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <ft5336_TS_DetectTouch+0x50>)
 8000694:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000696:	4b04      	ldr	r3, [pc, #16]	; (80006a8 <ft5336_TS_DetectTouch+0x50>)
 8000698:	2200      	movs	r2, #0
 800069a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 800069c:	7bfb      	ldrb	r3, [r7, #15]
 800069e:	b2db      	uxtb	r3, r3
}
 80006a0:	4618      	mov	r0, r3
 80006a2:	3710      	adds	r7, #16
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	2000012c 	.word	0x2000012c

080006ac <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
 80006b8:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80006be:	2300      	movs	r3, #0
 80006c0:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80006ce:	4b6d      	ldr	r3, [pc, #436]	; (8000884 <ft5336_TS_GetXY+0x1d8>)
 80006d0:	789a      	ldrb	r2, [r3, #2]
 80006d2:	4b6c      	ldr	r3, [pc, #432]	; (8000884 <ft5336_TS_GetXY+0x1d8>)
 80006d4:	785b      	ldrb	r3, [r3, #1]
 80006d6:	429a      	cmp	r2, r3
 80006d8:	f080 80cf 	bcs.w	800087a <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80006dc:	4b69      	ldr	r3, [pc, #420]	; (8000884 <ft5336_TS_GetXY+0x1d8>)
 80006de:	789b      	ldrb	r3, [r3, #2]
 80006e0:	2b09      	cmp	r3, #9
 80006e2:	d871      	bhi.n	80007c8 <ft5336_TS_GetXY+0x11c>
 80006e4:	a201      	add	r2, pc, #4	; (adr r2, 80006ec <ft5336_TS_GetXY+0x40>)
 80006e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ea:	bf00      	nop
 80006ec:	08000715 	.word	0x08000715
 80006f0:	08000727 	.word	0x08000727
 80006f4:	08000739 	.word	0x08000739
 80006f8:	0800074b 	.word	0x0800074b
 80006fc:	0800075d 	.word	0x0800075d
 8000700:	0800076f 	.word	0x0800076f
 8000704:	08000781 	.word	0x08000781
 8000708:	08000793 	.word	0x08000793
 800070c:	080007a5 	.word	0x080007a5
 8000710:	080007b7 	.word	0x080007b7
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000714:	2304      	movs	r3, #4
 8000716:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000718:	2303      	movs	r3, #3
 800071a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800071c:	2306      	movs	r3, #6
 800071e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000720:	2305      	movs	r3, #5
 8000722:	753b      	strb	r3, [r7, #20]
      break;
 8000724:	e051      	b.n	80007ca <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000726:	230a      	movs	r3, #10
 8000728:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800072a:	2309      	movs	r3, #9
 800072c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800072e:	230c      	movs	r3, #12
 8000730:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8000732:	230b      	movs	r3, #11
 8000734:	753b      	strb	r3, [r7, #20]
      break;
 8000736:	e048      	b.n	80007ca <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000738:	2310      	movs	r3, #16
 800073a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 800073c:	230f      	movs	r3, #15
 800073e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000740:	2312      	movs	r3, #18
 8000742:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8000744:	2311      	movs	r3, #17
 8000746:	753b      	strb	r3, [r7, #20]
      break;
 8000748:	e03f      	b.n	80007ca <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 800074a:	2316      	movs	r3, #22
 800074c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 800074e:	2315      	movs	r3, #21
 8000750:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8000752:	2318      	movs	r3, #24
 8000754:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8000756:	2317      	movs	r3, #23
 8000758:	753b      	strb	r3, [r7, #20]
      break;
 800075a:	e036      	b.n	80007ca <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 800075c:	231c      	movs	r3, #28
 800075e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000760:	231b      	movs	r3, #27
 8000762:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8000764:	231e      	movs	r3, #30
 8000766:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000768:	231d      	movs	r3, #29
 800076a:	753b      	strb	r3, [r7, #20]
      break;
 800076c:	e02d      	b.n	80007ca <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 800076e:	2322      	movs	r3, #34	; 0x22
 8000770:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8000772:	2321      	movs	r3, #33	; 0x21
 8000774:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8000776:	2324      	movs	r3, #36	; 0x24
 8000778:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 800077a:	2323      	movs	r3, #35	; 0x23
 800077c:	753b      	strb	r3, [r7, #20]
      break;
 800077e:	e024      	b.n	80007ca <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000780:	2328      	movs	r3, #40	; 0x28
 8000782:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000784:	2327      	movs	r3, #39	; 0x27
 8000786:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000788:	232a      	movs	r3, #42	; 0x2a
 800078a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 800078c:	2329      	movs	r3, #41	; 0x29
 800078e:	753b      	strb	r3, [r7, #20]
      break;
 8000790:	e01b      	b.n	80007ca <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000792:	232e      	movs	r3, #46	; 0x2e
 8000794:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8000796:	232d      	movs	r3, #45	; 0x2d
 8000798:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800079a:	2330      	movs	r3, #48	; 0x30
 800079c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800079e:	232f      	movs	r3, #47	; 0x2f
 80007a0:	753b      	strb	r3, [r7, #20]
      break;
 80007a2:	e012      	b.n	80007ca <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80007a4:	2334      	movs	r3, #52	; 0x34
 80007a6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80007a8:	2333      	movs	r3, #51	; 0x33
 80007aa:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80007ac:	2336      	movs	r3, #54	; 0x36
 80007ae:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80007b0:	2335      	movs	r3, #53	; 0x35
 80007b2:	753b      	strb	r3, [r7, #20]
      break;
 80007b4:	e009      	b.n	80007ca <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80007b6:	233a      	movs	r3, #58	; 0x3a
 80007b8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80007ba:	2339      	movs	r3, #57	; 0x39
 80007bc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80007be:	233c      	movs	r3, #60	; 0x3c
 80007c0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80007c2:	233b      	movs	r3, #59	; 0x3b
 80007c4:	753b      	strb	r3, [r7, #20]
      break;
 80007c6:	e000      	b.n	80007ca <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80007c8:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80007ca:	89fb      	ldrh	r3, [r7, #14]
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	7dfa      	ldrb	r2, [r7, #23]
 80007d0:	4611      	mov	r1, r2
 80007d2:	4618      	mov	r0, r3
 80007d4:	f013 fd00 	bl	80141d8 <TS_IO_Read>
 80007d8:	4603      	mov	r3, r0
 80007da:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007dc:	7cfb      	ldrb	r3, [r7, #19]
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	b29a      	uxth	r2, r3
 80007e2:	4b29      	ldr	r3, [pc, #164]	; (8000888 <ft5336_TS_GetXY+0x1dc>)
 80007e4:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80007e6:	89fb      	ldrh	r3, [r7, #14]
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	7dba      	ldrb	r2, [r7, #22]
 80007ec:	4611      	mov	r1, r2
 80007ee:	4618      	mov	r0, r3
 80007f0:	f013 fcf2 	bl	80141d8 <TS_IO_Read>
 80007f4:	4603      	mov	r3, r0
 80007f6:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80007f8:	7cfb      	ldrb	r3, [r7, #19]
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	021b      	lsls	r3, r3, #8
 80007fe:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000802:	b21a      	sxth	r2, r3
 8000804:	4b20      	ldr	r3, [pc, #128]	; (8000888 <ft5336_TS_GetXY+0x1dc>)
 8000806:	881b      	ldrh	r3, [r3, #0]
 8000808:	b21b      	sxth	r3, r3
 800080a:	4313      	orrs	r3, r2
 800080c:	b21b      	sxth	r3, r3
 800080e:	b29a      	uxth	r2, r3
 8000810:	4b1d      	ldr	r3, [pc, #116]	; (8000888 <ft5336_TS_GetXY+0x1dc>)
 8000812:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000814:	4b1c      	ldr	r3, [pc, #112]	; (8000888 <ft5336_TS_GetXY+0x1dc>)
 8000816:	881a      	ldrh	r2, [r3, #0]
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800081c:	89fb      	ldrh	r3, [r7, #14]
 800081e:	b2db      	uxtb	r3, r3
 8000820:	7d7a      	ldrb	r2, [r7, #21]
 8000822:	4611      	mov	r1, r2
 8000824:	4618      	mov	r0, r3
 8000826:	f013 fcd7 	bl	80141d8 <TS_IO_Read>
 800082a:	4603      	mov	r3, r0
 800082c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800082e:	7cfb      	ldrb	r3, [r7, #19]
 8000830:	b2db      	uxtb	r3, r3
 8000832:	b29a      	uxth	r2, r3
 8000834:	4b14      	ldr	r3, [pc, #80]	; (8000888 <ft5336_TS_GetXY+0x1dc>)
 8000836:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000838:	89fb      	ldrh	r3, [r7, #14]
 800083a:	b2db      	uxtb	r3, r3
 800083c:	7d3a      	ldrb	r2, [r7, #20]
 800083e:	4611      	mov	r1, r2
 8000840:	4618      	mov	r0, r3
 8000842:	f013 fcc9 	bl	80141d8 <TS_IO_Read>
 8000846:	4603      	mov	r3, r0
 8000848:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800084a:	7cfb      	ldrb	r3, [r7, #19]
 800084c:	b2db      	uxtb	r3, r3
 800084e:	021b      	lsls	r3, r3, #8
 8000850:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000854:	b21a      	sxth	r2, r3
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <ft5336_TS_GetXY+0x1dc>)
 8000858:	881b      	ldrh	r3, [r3, #0]
 800085a:	b21b      	sxth	r3, r3
 800085c:	4313      	orrs	r3, r2
 800085e:	b21b      	sxth	r3, r3
 8000860:	b29a      	uxth	r2, r3
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <ft5336_TS_GetXY+0x1dc>)
 8000864:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8000866:	4b08      	ldr	r3, [pc, #32]	; (8000888 <ft5336_TS_GetXY+0x1dc>)
 8000868:	881a      	ldrh	r2, [r3, #0]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 800086e:	4b05      	ldr	r3, [pc, #20]	; (8000884 <ft5336_TS_GetXY+0x1d8>)
 8000870:	789b      	ldrb	r3, [r3, #2]
 8000872:	3301      	adds	r3, #1
 8000874:	b2da      	uxtb	r2, r3
 8000876:	4b03      	ldr	r3, [pc, #12]	; (8000884 <ft5336_TS_GetXY+0x1d8>)
 8000878:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800087a:	bf00      	nop
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	2000012c 	.word	0x2000012c
 8000888:	20000130 	.word	0x20000130

0800088c <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0
 8000892:	4603      	mov	r3, r0
 8000894:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8000896:	2300      	movs	r3, #0
 8000898:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800089a:	2301      	movs	r3, #1
 800089c:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800089e:	88fb      	ldrh	r3, [r7, #6]
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	7bfa      	ldrb	r2, [r7, #15]
 80008a4:	21a4      	movs	r1, #164	; 0xa4
 80008a6:	4618      	mov	r0, r3
 80008a8:	f013 fc7c 	bl	80141a4 <TS_IO_Write>
}
 80008ac:	bf00      	nop
 80008ae:	3710      	adds	r7, #16
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}

080008b4 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80008be:	2300      	movs	r3, #0
 80008c0:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008c2:	2300      	movs	r3, #0
 80008c4:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008c6:	88fb      	ldrh	r3, [r7, #6]
 80008c8:	b2db      	uxtb	r3, r3
 80008ca:	7bfa      	ldrb	r2, [r7, #15]
 80008cc:	21a4      	movs	r1, #164	; 0xa4
 80008ce:	4618      	mov	r0, r3
 80008d0:	f013 fc68 	bl	80141a4 <TS_IO_Write>
}
 80008d4:	bf00      	nop
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80008e6:	2300      	movs	r3, #0
}
 80008e8:	4618      	mov	r0, r3
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80008f4:	b480      	push	{r7}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	4603      	mov	r3, r0
 80008fc:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr

0800090a <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 800090a:	b580      	push	{r7, lr}
 800090c:	b084      	sub	sp, #16
 800090e:	af00      	add	r7, sp, #0
 8000910:	4603      	mov	r3, r0
 8000912:	6039      	str	r1, [r7, #0]
 8000914:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 8000916:	2300      	movs	r3, #0
 8000918:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 800091a:	88fb      	ldrh	r3, [r7, #6]
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2101      	movs	r1, #1
 8000920:	4618      	mov	r0, r3
 8000922:	f013 fc59 	bl	80141d8 <TS_IO_Read>
 8000926:	4603      	mov	r3, r0
 8000928:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	b2db      	uxtb	r3, r3
 800092e:	461a      	mov	r2, r3
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	601a      	str	r2, [r3, #0]
}
 8000934:	bf00      	nop
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}

0800093c <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	60b9      	str	r1, [r7, #8]
 8000944:	607a      	str	r2, [r7, #4]
 8000946:	603b      	str	r3, [r7, #0]
 8000948:	4603      	mov	r3, r0
 800094a:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800094c:	2300      	movs	r3, #0
 800094e:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8000950:	2300      	movs	r3, #0
 8000952:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 800095c:	4b4d      	ldr	r3, [pc, #308]	; (8000a94 <ft5336_TS_GetTouchInfo+0x158>)
 800095e:	785b      	ldrb	r3, [r3, #1]
 8000960:	461a      	mov	r2, r3
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	4293      	cmp	r3, r2
 8000966:	f080 8090 	bcs.w	8000a8a <ft5336_TS_GetTouchInfo+0x14e>
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	2b09      	cmp	r3, #9
 800096e:	d85d      	bhi.n	8000a2c <ft5336_TS_GetTouchInfo+0xf0>
 8000970:	a201      	add	r2, pc, #4	; (adr r2, 8000978 <ft5336_TS_GetTouchInfo+0x3c>)
 8000972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000976:	bf00      	nop
 8000978:	080009a1 	.word	0x080009a1
 800097c:	080009af 	.word	0x080009af
 8000980:	080009bd 	.word	0x080009bd
 8000984:	080009cb 	.word	0x080009cb
 8000988:	080009d9 	.word	0x080009d9
 800098c:	080009e7 	.word	0x080009e7
 8000990:	080009f5 	.word	0x080009f5
 8000994:	08000a03 	.word	0x08000a03
 8000998:	08000a11 	.word	0x08000a11
 800099c:	08000a1f 	.word	0x08000a1f
  {
    switch(touchIdx)
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80009a0:	2303      	movs	r3, #3
 80009a2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80009a4:	2307      	movs	r3, #7
 80009a6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80009a8:	2308      	movs	r3, #8
 80009aa:	757b      	strb	r3, [r7, #21]
      break;
 80009ac:	e03f      	b.n	8000a2e <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80009ae:	2309      	movs	r3, #9
 80009b0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80009b2:	230d      	movs	r3, #13
 80009b4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80009b6:	230e      	movs	r3, #14
 80009b8:	757b      	strb	r3, [r7, #21]
      break;
 80009ba:	e038      	b.n	8000a2e <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 80009bc:	230f      	movs	r3, #15
 80009be:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 80009c0:	2313      	movs	r3, #19
 80009c2:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 80009c4:	2314      	movs	r3, #20
 80009c6:	757b      	strb	r3, [r7, #21]
      break;
 80009c8:	e031      	b.n	8000a2e <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 80009ca:	2315      	movs	r3, #21
 80009cc:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80009ce:	2319      	movs	r3, #25
 80009d0:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 80009d2:	231a      	movs	r3, #26
 80009d4:	757b      	strb	r3, [r7, #21]
      break;
 80009d6:	e02a      	b.n	8000a2e <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 80009d8:	231b      	movs	r3, #27
 80009da:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80009dc:	231f      	movs	r3, #31
 80009de:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80009e0:	2320      	movs	r3, #32
 80009e2:	757b      	strb	r3, [r7, #21]
      break;
 80009e4:	e023      	b.n	8000a2e <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 80009e6:	2321      	movs	r3, #33	; 0x21
 80009e8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80009ea:	2325      	movs	r3, #37	; 0x25
 80009ec:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 80009ee:	2326      	movs	r3, #38	; 0x26
 80009f0:	757b      	strb	r3, [r7, #21]
      break;
 80009f2:	e01c      	b.n	8000a2e <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 80009f4:	2327      	movs	r3, #39	; 0x27
 80009f6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 80009f8:	232b      	movs	r3, #43	; 0x2b
 80009fa:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 80009fc:	232c      	movs	r3, #44	; 0x2c
 80009fe:	757b      	strb	r3, [r7, #21]
      break;
 8000a00:	e015      	b.n	8000a2e <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000a02:	232d      	movs	r3, #45	; 0x2d
 8000a04:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8000a06:	2331      	movs	r3, #49	; 0x31
 8000a08:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8000a0a:	2332      	movs	r3, #50	; 0x32
 8000a0c:	757b      	strb	r3, [r7, #21]
      break;
 8000a0e:	e00e      	b.n	8000a2e <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8000a10:	2333      	movs	r3, #51	; 0x33
 8000a12:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8000a14:	2337      	movs	r3, #55	; 0x37
 8000a16:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8000a18:	2338      	movs	r3, #56	; 0x38
 8000a1a:	757b      	strb	r3, [r7, #21]
      break;
 8000a1c:	e007      	b.n	8000a2e <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8000a1e:	2339      	movs	r3, #57	; 0x39
 8000a20:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8000a22:	233d      	movs	r3, #61	; 0x3d
 8000a24:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8000a26:	233e      	movs	r3, #62	; 0x3e
 8000a28:	757b      	strb	r3, [r7, #21]
      break;
 8000a2a:	e000      	b.n	8000a2e <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8000a2c:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000a2e:	89fb      	ldrh	r3, [r7, #14]
 8000a30:	b2db      	uxtb	r3, r3
 8000a32:	7dfa      	ldrb	r2, [r7, #23]
 8000a34:	4611      	mov	r1, r2
 8000a36:	4618      	mov	r0, r3
 8000a38:	f013 fbce 	bl	80141d8 <TS_IO_Read>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000a40:	7d3b      	ldrb	r3, [r7, #20]
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	119b      	asrs	r3, r3, #6
 8000a46:	f003 0203 	and.w	r2, r3, #3
 8000a4a:	6a3b      	ldr	r3, [r7, #32]
 8000a4c:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000a4e:	89fb      	ldrh	r3, [r7, #14]
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	7dba      	ldrb	r2, [r7, #22]
 8000a54:	4611      	mov	r1, r2
 8000a56:	4618      	mov	r0, r3
 8000a58:	f013 fbbe 	bl	80141d8 <TS_IO_Read>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8000a60:	7d3b      	ldrb	r3, [r7, #20]
 8000a62:	b2db      	uxtb	r3, r3
 8000a64:	461a      	mov	r2, r3
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8000a6a:	89fb      	ldrh	r3, [r7, #14]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	7d7a      	ldrb	r2, [r7, #21]
 8000a70:	4611      	mov	r1, r2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f013 fbb0 	bl	80141d8 <TS_IO_Read>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000a7c:	7d3b      	ldrb	r3, [r7, #20]
 8000a7e:	b2db      	uxtb	r3, r3
 8000a80:	111b      	asrs	r3, r3, #4
 8000a82:	f003 0204 	and.w	r2, r3, #4
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000a8a:	bf00      	nop
 8000a8c:	3718      	adds	r7, #24
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	2000012c 	.word	0x2000012c

08000a98 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000a9c:	4b03      	ldr	r3, [pc, #12]	; (8000aac <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop
 8000aac:	2000012c 	.word	0x2000012c

08000ab0 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000ab4:	f7ff fff0 	bl	8000a98 <ft5336_Get_I2C_InitializedStatus>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d104      	bne.n	8000ac8 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000abe:	f013 fb67 	bl	8014190 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000ac2:	4b02      	ldr	r3, [pc, #8]	; (8000acc <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000ac4:	2201      	movs	r2, #1
 8000ac6:	701a      	strb	r2, [r3, #0]
  }
}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	2000012c 	.word	0x2000012c

08000ad0 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b085      	sub	sp, #20
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000ada:	2300      	movs	r3, #0
 8000adc:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000ade:	68fb      	ldr	r3, [r7, #12]
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3714      	adds	r7, #20
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr

08000aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af0:	2003      	movs	r0, #3
 8000af2:	f000 fb90 	bl	8001216 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000af6:	2000      	movs	r0, #0
 8000af8:	f018 fdb8 	bl	801966c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000afc:	f017 ff3e 	bl	801897c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000b00:	2300      	movs	r3, #0
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b0c:	4b06      	ldr	r3, [pc, #24]	; (8000b28 <HAL_IncTick+0x20>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_IncTick+0x24>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4413      	add	r3, r2
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <HAL_IncTick+0x24>)
 8000b1a:	6013      	str	r3, [r2, #0]
}
 8000b1c:	bf00      	nop
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	20000028 	.word	0x20000028
 8000b2c:	20009e6c 	.word	0x20009e6c

08000b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  return uwTick;
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <HAL_GetTick+0x14>)
 8000b36:	681b      	ldr	r3, [r3, #0]
}
 8000b38:	4618      	mov	r0, r3
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	20009e6c 	.word	0x20009e6c

08000b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b50:	f7ff ffee 	bl	8000b30 <HAL_GetTick>
 8000b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b60:	d005      	beq.n	8000b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <HAL_Delay+0x44>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	461a      	mov	r2, r3
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b6e:	bf00      	nop
 8000b70:	f7ff ffde 	bl	8000b30 <HAL_GetTick>
 8000b74:	4602      	mov	r2, r0
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	1ad3      	subs	r3, r2, r3
 8000b7a:	68fa      	ldr	r2, [r7, #12]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d8f7      	bhi.n	8000b70 <HAL_Delay+0x28>
  {
  }
}
 8000b80:	bf00      	nop
 8000b82:	bf00      	nop
 8000b84:	3710      	adds	r7, #16
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	20000028 	.word	0x20000028

08000b90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b084      	sub	sp, #16
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d101      	bne.n	8000ba6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	e031      	b.n	8000c0a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d109      	bne.n	8000bc2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f017 ff0c 	bl	80189cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	f003 0310 	and.w	r3, r3, #16
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d116      	bne.n	8000bfc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <HAL_ADC_Init+0x84>)
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	f043 0202 	orr.w	r2, r3, #2
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000bde:	6878      	ldr	r0, [r7, #4]
 8000be0:	f000 f94e 	bl	8000e80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2200      	movs	r2, #0
 8000be8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f023 0303 	bic.w	r3, r3, #3
 8000bf2:	f043 0201 	orr.w	r2, r3, #1
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	641a      	str	r2, [r3, #64]	; 0x40
 8000bfa:	e001      	b.n	8000c00 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2200      	movs	r2, #0
 8000c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3710      	adds	r7, #16
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	ffffeefd 	.word	0xffffeefd

08000c18 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b085      	sub	sp, #20
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
 8000c20:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000c22:	2300      	movs	r3, #0
 8000c24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c2c:	2b01      	cmp	r3, #1
 8000c2e:	d101      	bne.n	8000c34 <HAL_ADC_ConfigChannel+0x1c>
 8000c30:	2302      	movs	r3, #2
 8000c32:	e115      	b.n	8000e60 <HAL_ADC_ConfigChannel+0x248>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	2201      	movs	r2, #1
 8000c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	2b09      	cmp	r3, #9
 8000c42:	d935      	bls.n	8000cb0 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	68d9      	ldr	r1, [r3, #12]
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	b29b      	uxth	r3, r3
 8000c50:	461a      	mov	r2, r3
 8000c52:	4613      	mov	r3, r2
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	4413      	add	r3, r2
 8000c58:	3b1e      	subs	r3, #30
 8000c5a:	2207      	movs	r2, #7
 8000c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c60:	43da      	mvns	r2, r3
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	400a      	ands	r2, r1
 8000c68:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a7f      	ldr	r2, [pc, #508]	; (8000e6c <HAL_ADC_ConfigChannel+0x254>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d10a      	bne.n	8000c8a <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	68d9      	ldr	r1, [r3, #12]
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	061a      	lsls	r2, r3, #24
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	430a      	orrs	r2, r1
 8000c86:	60da      	str	r2, [r3, #12]
 8000c88:	e035      	b.n	8000cf6 <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	68d9      	ldr	r1, [r3, #12]
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	689a      	ldr	r2, [r3, #8]
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	005b      	lsls	r3, r3, #1
 8000ca0:	4403      	add	r3, r0
 8000ca2:	3b1e      	subs	r3, #30
 8000ca4:	409a      	lsls	r2, r3
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	430a      	orrs	r2, r1
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	e022      	b.n	8000cf6 <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	6919      	ldr	r1, [r3, #16]
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	b29b      	uxth	r3, r3
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4613      	mov	r3, r2
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	4413      	add	r3, r2
 8000cc4:	2207      	movs	r2, #7
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43da      	mvns	r2, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	400a      	ands	r2, r1
 8000cd2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	6919      	ldr	r1, [r3, #16]
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	689a      	ldr	r2, [r3, #8]
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	b29b      	uxth	r3, r3
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	4403      	add	r3, r0
 8000cec:	409a      	lsls	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	430a      	orrs	r2, r1
 8000cf4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	2b06      	cmp	r3, #6
 8000cfc:	d824      	bhi.n	8000d48 <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685a      	ldr	r2, [r3, #4]
 8000d08:	4613      	mov	r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	4413      	add	r3, r2
 8000d0e:	3b05      	subs	r3, #5
 8000d10:	221f      	movs	r2, #31
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43da      	mvns	r2, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	400a      	ands	r2, r1
 8000d1e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	685a      	ldr	r2, [r3, #4]
 8000d32:	4613      	mov	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	4413      	add	r3, r2
 8000d38:	3b05      	subs	r3, #5
 8000d3a:	fa00 f203 	lsl.w	r2, r0, r3
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	430a      	orrs	r2, r1
 8000d44:	635a      	str	r2, [r3, #52]	; 0x34
 8000d46:	e04c      	b.n	8000de2 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	685b      	ldr	r3, [r3, #4]
 8000d4c:	2b0c      	cmp	r3, #12
 8000d4e:	d824      	bhi.n	8000d9a <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685a      	ldr	r2, [r3, #4]
 8000d5a:	4613      	mov	r3, r2
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	4413      	add	r3, r2
 8000d60:	3b23      	subs	r3, #35	; 0x23
 8000d62:	221f      	movs	r2, #31
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43da      	mvns	r2, r3
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	400a      	ands	r2, r1
 8000d70:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	4618      	mov	r0, r3
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685a      	ldr	r2, [r3, #4]
 8000d84:	4613      	mov	r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	4413      	add	r3, r2
 8000d8a:	3b23      	subs	r3, #35	; 0x23
 8000d8c:	fa00 f203 	lsl.w	r2, r0, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	430a      	orrs	r2, r1
 8000d96:	631a      	str	r2, [r3, #48]	; 0x30
 8000d98:	e023      	b.n	8000de2 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685a      	ldr	r2, [r3, #4]
 8000da4:	4613      	mov	r3, r2
 8000da6:	009b      	lsls	r3, r3, #2
 8000da8:	4413      	add	r3, r2
 8000daa:	3b41      	subs	r3, #65	; 0x41
 8000dac:	221f      	movs	r2, #31
 8000dae:	fa02 f303 	lsl.w	r3, r2, r3
 8000db2:	43da      	mvns	r2, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	400a      	ands	r2, r1
 8000dba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	4618      	mov	r0, r3
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685a      	ldr	r2, [r3, #4]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	4413      	add	r3, r2
 8000dd4:	3b41      	subs	r3, #65	; 0x41
 8000dd6:	fa00 f203 	lsl.w	r2, r0, r3
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	430a      	orrs	r2, r1
 8000de0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	4a22      	ldr	r2, [pc, #136]	; (8000e70 <HAL_ADC_ConfigChannel+0x258>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	d109      	bne.n	8000e00 <HAL_ADC_ConfigChannel+0x1e8>
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b12      	cmp	r3, #18
 8000df2:	d105      	bne.n	8000e00 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8000df4:	4b1f      	ldr	r3, [pc, #124]	; (8000e74 <HAL_ADC_ConfigChannel+0x25c>)
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	4a1e      	ldr	r2, [pc, #120]	; (8000e74 <HAL_ADC_ConfigChannel+0x25c>)
 8000dfa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000dfe:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a1a      	ldr	r2, [pc, #104]	; (8000e70 <HAL_ADC_ConfigChannel+0x258>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d125      	bne.n	8000e56 <HAL_ADC_ConfigChannel+0x23e>
 8000e0a:	683b      	ldr	r3, [r7, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a17      	ldr	r2, [pc, #92]	; (8000e6c <HAL_ADC_ConfigChannel+0x254>)
 8000e10:	4293      	cmp	r3, r2
 8000e12:	d003      	beq.n	8000e1c <HAL_ADC_ConfigChannel+0x204>
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2b11      	cmp	r3, #17
 8000e1a:	d11c      	bne.n	8000e56 <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000e1c:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <HAL_ADC_ConfigChannel+0x25c>)
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	4a14      	ldr	r2, [pc, #80]	; (8000e74 <HAL_ADC_ConfigChannel+0x25c>)
 8000e22:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e26:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a0f      	ldr	r2, [pc, #60]	; (8000e6c <HAL_ADC_ConfigChannel+0x254>)
 8000e2e:	4293      	cmp	r3, r2
 8000e30:	d111      	bne.n	8000e56 <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <HAL_ADC_ConfigChannel+0x260>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a11      	ldr	r2, [pc, #68]	; (8000e7c <HAL_ADC_ConfigChannel+0x264>)
 8000e38:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3c:	0c9a      	lsrs	r2, r3, #18
 8000e3e:	4613      	mov	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4413      	add	r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000e48:	e002      	b.n	8000e50 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d1f9      	bne.n	8000e4a <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2200      	movs	r2, #0
 8000e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3714      	adds	r7, #20
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	10000012 	.word	0x10000012
 8000e70:	40012000 	.word	0x40012000
 8000e74:	40012300 	.word	0x40012300
 8000e78:	20000070 	.word	0x20000070
 8000e7c:	431bde83 	.word	0x431bde83

08000e80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000e88:	4b78      	ldr	r3, [pc, #480]	; (800106c <ADC_Init+0x1ec>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	4a77      	ldr	r2, [pc, #476]	; (800106c <ADC_Init+0x1ec>)
 8000e8e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000e92:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8000e94:	4b75      	ldr	r3, [pc, #468]	; (800106c <ADC_Init+0x1ec>)
 8000e96:	685a      	ldr	r2, [r3, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	4973      	ldr	r1, [pc, #460]	; (800106c <ADC_Init+0x1ec>)
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	685a      	ldr	r2, [r3, #4]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000eb0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	6859      	ldr	r1, [r3, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	691b      	ldr	r3, [r3, #16]
 8000ebc:	021a      	lsls	r2, r3, #8
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	430a      	orrs	r2, r1
 8000ec4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	685a      	ldr	r2, [r3, #4]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000ed4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	6859      	ldr	r1, [r3, #4]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	689a      	ldr	r2, [r3, #8]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	430a      	orrs	r2, r1
 8000ee6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	689a      	ldr	r2, [r3, #8]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ef6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	6899      	ldr	r1, [r3, #8]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	68da      	ldr	r2, [r3, #12]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	430a      	orrs	r2, r1
 8000f08:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0e:	4a58      	ldr	r2, [pc, #352]	; (8001070 <ADC_Init+0x1f0>)
 8000f10:	4293      	cmp	r3, r2
 8000f12:	d022      	beq.n	8000f5a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	689a      	ldr	r2, [r3, #8]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f22:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	6899      	ldr	r1, [r3, #8]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	430a      	orrs	r2, r1
 8000f34:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	689a      	ldr	r2, [r3, #8]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6899      	ldr	r1, [r3, #8]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	430a      	orrs	r2, r1
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	e00f      	b.n	8000f7a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	689a      	ldr	r2, [r3, #8]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f68:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	689a      	ldr	r2, [r3, #8]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f78:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f022 0202 	bic.w	r2, r2, #2
 8000f88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	6899      	ldr	r1, [r3, #8]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	005a      	lsls	r2, r3, #1
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d01b      	beq.n	8000fe0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fb6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	685a      	ldr	r2, [r3, #4]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000fc6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6859      	ldr	r1, [r3, #4]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	035a      	lsls	r2, r3, #13
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	430a      	orrs	r2, r1
 8000fdc:	605a      	str	r2, [r3, #4]
 8000fde:	e007      	b.n	8000ff0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	685a      	ldr	r2, [r3, #4]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000fee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8000ffe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	3b01      	subs	r3, #1
 800100c:	051a      	lsls	r2, r3, #20
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	430a      	orrs	r2, r1
 8001014:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	689a      	ldr	r2, [r3, #8]
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001024:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	6899      	ldr	r1, [r3, #8]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001032:	025a      	lsls	r2, r3, #9
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	430a      	orrs	r2, r1
 800103a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800104a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6899      	ldr	r1, [r3, #8]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	695b      	ldr	r3, [r3, #20]
 8001056:	029a      	lsls	r2, r3, #10
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	430a      	orrs	r2, r1
 800105e:	609a      	str	r2, [r3, #8]
}
 8001060:	bf00      	nop
 8001062:	370c      	adds	r7, #12
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr
 800106c:	40012300 	.word	0x40012300
 8001070:	0f000001 	.word	0x0f000001

08001074 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001074:	b480      	push	{r7}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	f003 0307 	and.w	r3, r3, #7
 8001082:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001084:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <__NVIC_SetPriorityGrouping+0x40>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108a:	68ba      	ldr	r2, [r7, #8]
 800108c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001090:	4013      	ands	r3, r2
 8001092:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001098:	68bb      	ldr	r3, [r7, #8]
 800109a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800109c:	4b06      	ldr	r3, [pc, #24]	; (80010b8 <__NVIC_SetPriorityGrouping+0x44>)
 800109e:	4313      	orrs	r3, r2
 80010a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a2:	4a04      	ldr	r2, [pc, #16]	; (80010b4 <__NVIC_SetPriorityGrouping+0x40>)
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	60d3      	str	r3, [r2, #12]
}
 80010a8:	bf00      	nop
 80010aa:	3714      	adds	r7, #20
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr
 80010b4:	e000ed00 	.word	0xe000ed00
 80010b8:	05fa0000 	.word	0x05fa0000

080010bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c0:	4b04      	ldr	r3, [pc, #16]	; (80010d4 <__NVIC_GetPriorityGrouping+0x18>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	0a1b      	lsrs	r3, r3, #8
 80010c6:	f003 0307 	and.w	r3, r3, #7
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000ed00 	.word	0xe000ed00

080010d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	db0b      	blt.n	8001102 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	f003 021f 	and.w	r2, r3, #31
 80010f0:	4907      	ldr	r1, [pc, #28]	; (8001110 <__NVIC_EnableIRQ+0x38>)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	095b      	lsrs	r3, r3, #5
 80010f8:	2001      	movs	r0, #1
 80010fa:	fa00 f202 	lsl.w	r2, r0, r2
 80010fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001102:	bf00      	nop
 8001104:	370c      	adds	r7, #12
 8001106:	46bd      	mov	sp, r7
 8001108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110c:	4770      	bx	lr
 800110e:	bf00      	nop
 8001110:	e000e100 	.word	0xe000e100

08001114 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	4603      	mov	r3, r0
 800111c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800111e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001122:	2b00      	cmp	r3, #0
 8001124:	db12      	blt.n	800114c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	f003 021f 	and.w	r2, r3, #31
 800112c:	490a      	ldr	r1, [pc, #40]	; (8001158 <__NVIC_DisableIRQ+0x44>)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	095b      	lsrs	r3, r3, #5
 8001134:	2001      	movs	r0, #1
 8001136:	fa00 f202 	lsl.w	r2, r0, r2
 800113a:	3320      	adds	r3, #32
 800113c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001140:	f3bf 8f4f 	dsb	sy
}
 8001144:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001146:	f3bf 8f6f 	isb	sy
}
 800114a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000e100 	.word	0xe000e100

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ff28 	bl	8001074 <__NVIC_SetPriorityGrouping>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
 8001238:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800123e:	f7ff ff3d 	bl	80010bc <__NVIC_GetPriorityGrouping>
 8001242:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	68b9      	ldr	r1, [r7, #8]
 8001248:	6978      	ldr	r0, [r7, #20]
 800124a:	f7ff ffb1 	bl	80011b0 <NVIC_EncodePriority>
 800124e:	4602      	mov	r2, r0
 8001250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001254:	4611      	mov	r1, r2
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ff80 	bl	800115c <__NVIC_SetPriority>
}
 800125c:	bf00      	nop
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff30 	bl	80010d8 <__NVIC_EnableIRQ>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff40 	bl	8001114 <__NVIC_DisableIRQ>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e054      	b.n	8001358 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	7f5b      	ldrb	r3, [r3, #29]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d105      	bne.n	80012c4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f017 fbde 	bl	8018a80 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2202      	movs	r2, #2
 80012c8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	791b      	ldrb	r3, [r3, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10c      	bne.n	80012ec <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a22      	ldr	r2, [pc, #136]	; (8001360 <HAL_CRC_Init+0xc4>)
 80012d8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 0218 	bic.w	r2, r2, #24
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	e00c      	b.n	8001306 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6899      	ldr	r1, [r3, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	461a      	mov	r2, r3
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 f834 	bl	8001364 <HAL_CRCEx_Polynomial_Set>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e028      	b.n	8001358 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	795b      	ldrb	r3, [r3, #5]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d105      	bne.n	800131a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f04f 32ff 	mov.w	r2, #4294967295
 8001316:	611a      	str	r2, [r3, #16]
 8001318:	e004      	b.n	8001324 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6912      	ldr	r2, [r2, #16]
 8001322:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695a      	ldr	r2, [r3, #20]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	699a      	ldr	r2, [r3, #24]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	430a      	orrs	r2, r1
 800134e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	04c11db7 	.word	0x04c11db7

08001364 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001364:	b480      	push	{r7}
 8001366:	b087      	sub	sp, #28
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001374:	231f      	movs	r3, #31
 8001376:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001378:	bf00      	nop
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1e5a      	subs	r2, r3, #1
 800137e:	613a      	str	r2, [r7, #16]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d009      	beq.n	8001398 <HAL_CRCEx_Polynomial_Set+0x34>
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	f003 031f 	and.w	r3, r3, #31
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	fa22 f303 	lsr.w	r3, r2, r3
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0f0      	beq.n	800137a <HAL_CRCEx_Polynomial_Set+0x16>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b18      	cmp	r3, #24
 800139c:	d846      	bhi.n	800142c <HAL_CRCEx_Polynomial_Set+0xc8>
 800139e:	a201      	add	r2, pc, #4	; (adr r2, 80013a4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80013a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a4:	08001433 	.word	0x08001433
 80013a8:	0800142d 	.word	0x0800142d
 80013ac:	0800142d 	.word	0x0800142d
 80013b0:	0800142d 	.word	0x0800142d
 80013b4:	0800142d 	.word	0x0800142d
 80013b8:	0800142d 	.word	0x0800142d
 80013bc:	0800142d 	.word	0x0800142d
 80013c0:	0800142d 	.word	0x0800142d
 80013c4:	08001421 	.word	0x08001421
 80013c8:	0800142d 	.word	0x0800142d
 80013cc:	0800142d 	.word	0x0800142d
 80013d0:	0800142d 	.word	0x0800142d
 80013d4:	0800142d 	.word	0x0800142d
 80013d8:	0800142d 	.word	0x0800142d
 80013dc:	0800142d 	.word	0x0800142d
 80013e0:	0800142d 	.word	0x0800142d
 80013e4:	08001415 	.word	0x08001415
 80013e8:	0800142d 	.word	0x0800142d
 80013ec:	0800142d 	.word	0x0800142d
 80013f0:	0800142d 	.word	0x0800142d
 80013f4:	0800142d 	.word	0x0800142d
 80013f8:	0800142d 	.word	0x0800142d
 80013fc:	0800142d 	.word	0x0800142d
 8001400:	0800142d 	.word	0x0800142d
 8001404:	08001409 	.word	0x08001409
  }

  switch (PolyLength)
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	2b06      	cmp	r3, #6
 800140c:	d913      	bls.n	8001436 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001412:	e010      	b.n	8001436 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	2b07      	cmp	r3, #7
 8001418:	d90f      	bls.n	800143a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800141e:	e00c      	b.n	800143a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	2b0f      	cmp	r3, #15
 8001424:	d90b      	bls.n	800143e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800142a:	e008      	b.n	800143e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	75fb      	strb	r3, [r7, #23]
      break;
 8001430:	e006      	b.n	8001440 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001432:	bf00      	nop
 8001434:	e004      	b.n	8001440 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001436:	bf00      	nop
 8001438:	e002      	b.n	8001440 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800143a:	bf00      	nop
 800143c:	e000      	b.n	8001440 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800143e:	bf00      	nop
  }
  if (status == HAL_OK)
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10d      	bne.n	8001462 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f023 0118 	bic.w	r1, r3, #24
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	430a      	orrs	r2, r1
 8001460:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001462:	7dfb      	ldrb	r3, [r7, #23]
}
 8001464:	4618      	mov	r0, r3
 8001466:	371c      	adds	r7, #28
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e062      	b.n	8001548 <HAL_DCMI_Init+0xd8>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f017 fb16 	bl	8018ac0 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2202      	movs	r2, #2
 8001498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6819      	ldr	r1, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <HAL_DCMI_Init+0xe0>)
 80014a8:	400b      	ands	r3, r1
 80014aa:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6819      	ldr	r1, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80014c0:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80014cc:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80014d8:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014de:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80014e4:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ea:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80014f0:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b10      	cmp	r3, #16
 8001500:	d112      	bne.n	8001528 <HAL_DCMI_Init+0xb8>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	7f1b      	ldrb	r3, [r3, #28]
 8001506:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7f5b      	ldrb	r3, [r3, #29]
 800150c:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 800150e:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7f9b      	ldrb	r3, [r3, #30]
 8001514:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001516:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7fdb      	ldrb	r3, [r3, #31]
 800151e:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001524:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001526:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f042 021e 	orr.w	r2, r2, #30
 8001536:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	ffe0f007 	.word	0xffe0f007

08001554 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001572:	2b01      	cmp	r3, #1
 8001574:	d101      	bne.n	800157a <HAL_DMA_Start_IT+0x26>
 8001576:	2302      	movs	r3, #2
 8001578:	e048      	b.n	800160c <HAL_DMA_Start_IT+0xb8>
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b01      	cmp	r3, #1
 800158c:	d137      	bne.n	80015fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2202      	movs	r2, #2
 8001592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2200      	movs	r2, #0
 800159a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f000 f842 	bl	800162c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ac:	223f      	movs	r2, #63	; 0x3f
 80015ae:	409a      	lsls	r2, r3
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 0216 	orr.w	r2, r2, #22
 80015c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	695a      	ldr	r2, [r3, #20]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015d2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d007      	beq.n	80015ec <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0208 	orr.w	r2, r2, #8
 80015ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 0201 	orr.w	r2, r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	e005      	b.n	800160a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001606:	2302      	movs	r3, #2
 8001608:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800160a:	7dfb      	ldrb	r3, [r7, #23]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
 8001638:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001648:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b40      	cmp	r3, #64	; 0x40
 8001658:	d108      	bne.n	800166c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800166a:	e007      	b.n	800167c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68ba      	ldr	r2, [r7, #8]
 8001672:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	60da      	str	r2, [r3, #12]
}
 800167c:	bf00      	nop
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e039      	b.n	800170e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d106      	bne.n	80016b4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f014 fc3e 	bl	8015f30 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2202      	movs	r2, #2
 80016b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d8:	f023 0107 	bic.w	r1, r3, #7
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <HAL_DMA2D_Init+0x90>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68d1      	ldr	r1, [r2, #12]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	430b      	orrs	r3, r1
 80016fc:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	ffffc000 	.word	0xffffc000

0800171c <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e05f      	b.n	80017ee <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800172e:	4b32      	ldr	r3, [pc, #200]	; (80017f8 <HAL_DMA2D_DeInit+0xdc>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d02e      	beq.n	8001798 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	2b01      	cmp	r3, #1
 8001746:	d107      	bne.n	8001758 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 f8c1 	bl	80018d0 <HAL_DMA2D_Abort>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d021      	beq.n	8001798 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e04a      	b.n	80017ee <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	f003 0320 	and.w	r3, r3, #32
 8001762:	2b20      	cmp	r3, #32
 8001764:	d108      	bne.n	8001778 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8001766:	2100      	movs	r1, #0
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 f8f7 	bl	800195c <HAL_DMA2D_CLUTLoading_Abort>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d011      	beq.n	8001798 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e03a      	b.n	80017ee <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	f003 0320 	and.w	r3, r3, #32
 8001782:	2b20      	cmp	r3, #32
 8001784:	d108      	bne.n	8001798 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8001786:	2101      	movs	r1, #1
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f8e7 	bl	800195c <HAL_DMA2D_CLUTLoading_Abort>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e02a      	b.n	80017ee <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	223f      	movs	r2, #63	; 0x3f
 80017a6:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2200      	movs	r2, #0
 80017be:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2200      	movs	r2, #0
 80017c6:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2200      	movs	r2, #0
 80017ce:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f014 fbd3 	bl	8015f7c <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800

080017fc <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af02      	add	r7, sp, #8
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
 8001808:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001810:	2b01      	cmp	r3, #1
 8001812:	d101      	bne.n	8001818 <HAL_DMA2D_Start_IT+0x1c>
 8001814:	2302      	movs	r3, #2
 8001816:	e020      	b.n	800185a <HAL_DMA2D_Start_IT+0x5e>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2202      	movs	r2, #2
 8001824:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	68b9      	ldr	r1, [r7, #8]
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f000 fa84 	bl	8001d40 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8001846:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 0201 	orr.w	r2, r2, #1
 8001856:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af02      	add	r7, sp, #8
 8001868:	60f8      	str	r0, [r7, #12]
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001876:	2b01      	cmp	r3, #1
 8001878:	d101      	bne.n	800187e <HAL_DMA2D_BlendingStart_IT+0x1c>
 800187a:	2302      	movs	r3, #2
 800187c:	e024      	b.n	80018c8 <HAL_DMA2D_BlendingStart_IT+0x66>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2202      	movs	r2, #2
 800188a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	68b9      	ldr	r1, [r7, #8]
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f000 fa4d 	bl	8001d40 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80018b4:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f042 0201 	orr.w	r2, r2, #1
 80018c4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 0205 	bic.w	r2, r3, #5
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0204 	orr.w	r2, r2, #4
 80018ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018ec:	f7ff f920 	bl	8000b30 <HAL_GetTick>
 80018f0:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80018f2:	e017      	b.n	8001924 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80018f4:	f7ff f91c 	bl	8000b30 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001902:	d90f      	bls.n	8001924 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001908:	f043 0220 	orr.w	r2, r3, #32
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2203      	movs	r2, #3
 8001914:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e017      	b.n	8001954 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1e0      	bne.n	80018f4 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8001940:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	3324      	adds	r3, #36	; 0x24
 800196c:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f042 0204 	orr.w	r2, r2, #4
 800197c:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d103      	bne.n	800198c <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	331c      	adds	r3, #28
 800198a:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 800198c:	f7ff f8d0 	bl	8000b30 <HAL_GetTick>
 8001990:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8001992:	e017      	b.n	80019c4 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8001994:	f7ff f8cc 	bl	8000b30 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019a2:	d90f      	bls.n	80019c4 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a8:	f043 0220 	orr.w	r2, r3, #32
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2203      	movs	r2, #3
 80019b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e016      	b.n	80019f2 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0320 	and.w	r3, r3, #32
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1e1      	bne.n	8001994 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 80019de:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d026      	beq.n	8001a6a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d021      	beq.n	8001a6a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a34:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3a:	f043 0201 	orr.w	r2, r3, #1
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2201      	movs	r2, #1
 8001a48:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f003 0320 	and.w	r3, r3, #32
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d026      	beq.n	8001ac2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d021      	beq.n	8001ac2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a8c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2220      	movs	r2, #32
 8001a94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9a:	f043 0202 	orr.w	r2, r3, #2
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d026      	beq.n	8001b1a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d021      	beq.n	8001b1a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ae4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2208      	movs	r2, #8
 8001aec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af2:	f043 0204 	orr.w	r2, r3, #4
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2204      	movs	r2, #4
 8001afe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d013      	beq.n	8001b4c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00e      	beq.n	8001b4c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b3c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2204      	movs	r2, #4
 8001b44:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f853 	bl	8001bf2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d024      	beq.n	8001ba0 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d01f      	beq.n	8001ba0 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b6e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2202      	movs	r2, #2
 8001b76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 0310 	and.w	r3, r3, #16
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d01f      	beq.n	8001bea <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d01a      	beq.n	8001bea <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bc2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2210      	movs	r2, #16
 8001bca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f80e 	bl	8001c06 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_DMA2D_ConfigLayer+0x20>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e079      	b.n	8001d30 <HAL_DMA2D_ConfigLayer+0x114>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	3318      	adds	r3, #24
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	041b      	lsls	r3, r3, #16
 8001c62:	4313      	orrs	r3, r2
 8001c64:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001c66:	4b35      	ldr	r3, [pc, #212]	; (8001d3c <HAL_DMA2D_ConfigLayer+0x120>)
 8001c68:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b0a      	cmp	r3, #10
 8001c70:	d003      	beq.n	8001c7a <HAL_DMA2D_ConfigLayer+0x5e>
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b09      	cmp	r3, #9
 8001c78:	d107      	bne.n	8001c8a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	e005      	b.n	8001c96 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	061b      	lsls	r3, r3, #24
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d120      	bne.n	8001cde <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	ea02 0103 	and.w	r1, r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b0a      	cmp	r3, #10
 8001cc4:	d003      	beq.n	8001cce <HAL_DMA2D_ConfigLayer+0xb2>
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b09      	cmp	r3, #9
 8001ccc:	d127      	bne.n	8001d1e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001cda:	629a      	str	r2, [r3, #40]	; 0x28
 8001cdc:	e01f      	b.n	8001d1e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	69da      	ldr	r2, [r3, #28]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	ea02 0103 	and.w	r1, r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	6812      	ldr	r2, [r2, #0]
 8001cfe:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b0a      	cmp	r3, #10
 8001d06:	d003      	beq.n	8001d10 <HAL_DMA2D_ConfigLayer+0xf4>
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b09      	cmp	r3, #9
 8001d0e:	d106      	bne.n	8001d1e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001d1c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	371c      	adds	r7, #28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	ff03000f 	.word	0xff03000f

08001d40 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b08b      	sub	sp, #44	; 0x2c
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
 8001d4c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d54:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	041a      	lsls	r2, r3, #16
 8001d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001d78:	d174      	bne.n	8001e64 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001d80:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001d88:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001d90:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d108      	bne.n	8001db2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	431a      	orrs	r2, r3
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
 8001db0:	e053      	b.n	8001e5a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d106      	bne.n	8001dc8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc6:	e048      	b.n	8001e5a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d111      	bne.n	8001df4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	0cdb      	lsrs	r3, r3, #19
 8001dd4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	0a9b      	lsrs	r3, r3, #10
 8001dda:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	08db      	lsrs	r3, r3, #3
 8001de0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	015a      	lsls	r2, r3, #5
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	02db      	lsls	r3, r3, #11
 8001dea:	4313      	orrs	r3, r2
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
 8001df2:	e032      	b.n	8001e5a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d117      	bne.n	8001e2c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	0fdb      	lsrs	r3, r3, #31
 8001e00:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	0cdb      	lsrs	r3, r3, #19
 8001e06:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	0adb      	lsrs	r3, r3, #11
 8001e0c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	08db      	lsrs	r3, r3, #3
 8001e12:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	015a      	lsls	r2, r3, #5
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	029b      	lsls	r3, r3, #10
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	03db      	lsls	r3, r3, #15
 8001e22:	4313      	orrs	r3, r2
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
 8001e2a:	e016      	b.n	8001e5a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	0f1b      	lsrs	r3, r3, #28
 8001e30:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	0d1b      	lsrs	r3, r3, #20
 8001e36:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	0b1b      	lsrs	r3, r3, #12
 8001e3c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	011a      	lsls	r2, r3, #4
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	031b      	lsls	r3, r3, #12
 8001e52:	4313      	orrs	r3, r2
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e60:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8001e62:	e003      	b.n	8001e6c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	60da      	str	r2, [r3, #12]
}
 8001e6c:	bf00      	nop
 8001e6e:	372c      	adds	r7, #44	; 0x2c
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001e88:	4ba9      	ldr	r3, [pc, #676]	; (8002130 <HAL_ETH_Init+0x2b8>)
 8001e8a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001e90:	2300      	movs	r3, #0
 8001e92:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e181      	b.n	80021a2 <HAL_ETH_Init+0x32a>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d106      	bne.n	8001eb8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f016 fec2 	bl	8018c3c <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb8:	4b9e      	ldr	r3, [pc, #632]	; (8002134 <HAL_ETH_Init+0x2bc>)
 8001eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebc:	4a9d      	ldr	r2, [pc, #628]	; (8002134 <HAL_ETH_Init+0x2bc>)
 8001ebe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec2:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec4:	4b9b      	ldr	r3, [pc, #620]	; (8002134 <HAL_ETH_Init+0x2bc>)
 8001ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001ed0:	4b99      	ldr	r3, [pc, #612]	; (8002138 <HAL_ETH_Init+0x2c0>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	4a98      	ldr	r2, [pc, #608]	; (8002138 <HAL_ETH_Init+0x2c0>)
 8001ed6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001eda:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001edc:	4b96      	ldr	r3, [pc, #600]	; (8002138 <HAL_ETH_Init+0x2c0>)
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4994      	ldr	r1, [pc, #592]	; (8002138 <HAL_ETH_Init+0x2c0>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 0201 	orr.w	r2, r2, #1
 8001efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f00:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001f02:	f7fe fe15 	bl	8000b30 <HAL_GetTick>
 8001f06:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001f08:	e011      	b.n	8001f2e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001f0a:	f7fe fe11 	bl	8000b30 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f18:	d909      	bls.n	8001f2e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e139      	b.n	80021a2 <HAL_ETH_Init+0x32a>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1e4      	bne.n	8001f0a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f023 031c 	bic.w	r3, r3, #28
 8001f4e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001f50:	f004 fa66 	bl	8006420 <HAL_RCC_GetHCLKFreq>
 8001f54:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4a78      	ldr	r2, [pc, #480]	; (800213c <HAL_ETH_Init+0x2c4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d908      	bls.n	8001f70 <HAL_ETH_Init+0xf8>
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	4a77      	ldr	r2, [pc, #476]	; (8002140 <HAL_ETH_Init+0x2c8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d804      	bhi.n	8001f70 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	f043 0308 	orr.w	r3, r3, #8
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	e027      	b.n	8001fc0 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	4a73      	ldr	r2, [pc, #460]	; (8002140 <HAL_ETH_Init+0x2c8>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d908      	bls.n	8001f8a <HAL_ETH_Init+0x112>
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	4a6d      	ldr	r2, [pc, #436]	; (8002130 <HAL_ETH_Init+0x2b8>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d204      	bcs.n	8001f8a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f043 030c 	orr.w	r3, r3, #12
 8001f86:	61fb      	str	r3, [r7, #28]
 8001f88:	e01a      	b.n	8001fc0 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	4a68      	ldr	r2, [pc, #416]	; (8002130 <HAL_ETH_Init+0x2b8>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d303      	bcc.n	8001f9a <HAL_ETH_Init+0x122>
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	4a6b      	ldr	r2, [pc, #428]	; (8002144 <HAL_ETH_Init+0x2cc>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d911      	bls.n	8001fbe <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	4a69      	ldr	r2, [pc, #420]	; (8002144 <HAL_ETH_Init+0x2cc>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d908      	bls.n	8001fb4 <HAL_ETH_Init+0x13c>
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	4a68      	ldr	r2, [pc, #416]	; (8002148 <HAL_ETH_Init+0x2d0>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d804      	bhi.n	8001fb4 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f043 0304 	orr.w	r3, r3, #4
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	e005      	b.n	8001fc0 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f043 0310 	orr.w	r3, r3, #16
 8001fba:	61fb      	str	r3, [r7, #28]
 8001fbc:	e000      	b.n	8001fc0 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001fbe:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	69fa      	ldr	r2, [r7, #28]
 8001fc6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001fc8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001fcc:	2100      	movs	r1, #0
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f954 	bl	800227c <HAL_ETH_WritePHYRegister>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00b      	beq.n	8001ff2 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001fde:	6939      	ldr	r1, [r7, #16]
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f9b1 	bl	8002348 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e0d7      	b.n	80021a2 <HAL_ETH_Init+0x32a>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001ff2:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001ff6:	f7fe fda7 	bl	8000b48 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 80a4 	beq.w	800214c <HAL_ETH_Init+0x2d4>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002004:	f7fe fd94 	bl	8000b30 <HAL_GetTick>
 8002008:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800200a:	f107 030c 	add.w	r3, r7, #12
 800200e:	461a      	mov	r2, r3
 8002010:	2101      	movs	r1, #1
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f8ca 	bl	80021ac <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002018:	f7fe fd8a 	bl	8000b30 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	f241 3288 	movw	r2, #5000	; 0x1388
 8002026:	4293      	cmp	r3, r2
 8002028:	d90f      	bls.n	800204a <HAL_ETH_Init+0x1d2>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800202e:	6939      	ldr	r1, [r7, #16]
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f989 	bl	8002348 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e0ab      	b.n	80021a2 <HAL_ETH_Init+0x32a>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0da      	beq.n	800200a <HAL_ETH_Init+0x192>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002054:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002058:	2100      	movs	r1, #0
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f90e 	bl	800227c <HAL_ETH_WritePHYRegister>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00b      	beq.n	800207e <HAL_ETH_Init+0x206>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800206a:	6939      	ldr	r1, [r7, #16]
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f96b 	bl	8002348 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800207a:	2301      	movs	r3, #1
 800207c:	e091      	b.n	80021a2 <HAL_ETH_Init+0x32a>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800207e:	f7fe fd57 	bl	8000b30 <HAL_GetTick>
 8002082:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002084:	f107 030c 	add.w	r3, r7, #12
 8002088:	461a      	mov	r2, r3
 800208a:	2101      	movs	r1, #1
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f88d 	bl	80021ac <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002092:	f7fe fd4d 	bl	8000b30 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d90f      	bls.n	80020c4 <HAL_ETH_Init+0x24c>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80020a8:	6939      	ldr	r1, [r7, #16]
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f94c 	bl	8002348 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e06e      	b.n	80021a2 <HAL_ETH_Init+0x32a>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0da      	beq.n	8002084 <HAL_ETH_Init+0x20c>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80020ce:	f107 030c 	add.w	r3, r7, #12
 80020d2:	461a      	mov	r2, r3
 80020d4:	211f      	movs	r1, #31
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f868 	bl	80021ac <HAL_ETH_ReadPHYRegister>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00b      	beq.n	80020fa <HAL_ETH_Init+0x282>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80020e6:	6939      	ldr	r1, [r7, #16]
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f92d 	bl	8002348 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80020f6:	2301      	movs	r3, #1
 80020f8:	e053      	b.n	80021a2 <HAL_ETH_Init+0x32a>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b00      	cmp	r3, #0
 8002102:	d004      	beq.n	800210e <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800210a:	60da      	str	r2, [r3, #12]
 800210c:	e002      	b.n	8002114 <HAL_ETH_Init+0x29c>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_ETH_Init+0x2ae>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	e034      	b.n	8002190 <HAL_ETH_Init+0x318>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	e02f      	b.n	8002190 <HAL_ETH_Init+0x318>
 8002130:	03938700 	.word	0x03938700
 8002134:	40023800 	.word	0x40023800
 8002138:	40013800 	.word	0x40013800
 800213c:	01312cff 	.word	0x01312cff
 8002140:	02160ebf 	.word	0x02160ebf
 8002144:	05f5e0ff 	.word	0x05f5e0ff
 8002148:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	08db      	lsrs	r3, r3, #3
 8002152:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	085b      	lsrs	r3, r3, #1
 800215a:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 800215c:	4313      	orrs	r3, r2
 800215e:	b29b      	uxth	r3, r3
 8002160:	461a      	mov	r2, r3
 8002162:	2100      	movs	r1, #0
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	f000 f889 	bl	800227c <HAL_ETH_WritePHYRegister>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	d00b      	beq.n	8002188 <HAL_ETH_Init+0x310>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002174:	6939      	ldr	r1, [r7, #16]
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 f8e6 	bl	8002348 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002184:	2301      	movs	r3, #1
 8002186:	e00c      	b.n	80021a2 <HAL_ETH_Init+0x32a>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8002188:	f640 70ff 	movw	r0, #4095	; 0xfff
 800218c:	f7fe fcdc 	bl	8000b48 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002190:	6939      	ldr	r1, [r7, #16]
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f8d8 	bl	8002348 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2201      	movs	r2, #1
 800219c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3720      	adds	r7, #32
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop

080021ac <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	60f8      	str	r0, [r7, #12]
 80021b4:	460b      	mov	r3, r1
 80021b6:	607a      	str	r2, [r7, #4]
 80021b8:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80021be:	2300      	movs	r3, #0
 80021c0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021c8:	b2db      	uxtb	r3, r3
 80021ca:	2b82      	cmp	r3, #130	; 0x82
 80021cc:	d101      	bne.n	80021d2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80021ce:	2302      	movs	r3, #2
 80021d0:	e050      	b.n	8002274 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2282      	movs	r2, #130	; 0x82
 80021d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	f003 031c 	and.w	r3, r3, #28
 80021e8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	8a1b      	ldrh	r3, [r3, #16]
 80021ee:	02db      	lsls	r3, r3, #11
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80021f8:	897b      	ldrh	r3, [r7, #10]
 80021fa:	019b      	lsls	r3, r3, #6
 80021fc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	4313      	orrs	r3, r2
 8002204:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f023 0302 	bic.w	r3, r3, #2
 800220c:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800221e:	f7fe fc87 	bl	8000b30 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002224:	e015      	b.n	8002252 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002226:	f7fe fc83 	bl	8000b30 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002234:	d309      	bcc.n	800224a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2201      	movs	r2, #1
 800223a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e014      	b.n	8002274 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	2b00      	cmp	r3, #0
 800225a:	d1e4      	bne.n	8002226 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	b29b      	uxth	r3, r3
 8002264:	461a      	mov	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3718      	adds	r7, #24
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}

0800227c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b086      	sub	sp, #24
 8002280:	af00      	add	r7, sp, #0
 8002282:	60f8      	str	r0, [r7, #12]
 8002284:	460b      	mov	r3, r1
 8002286:	607a      	str	r2, [r7, #4]
 8002288:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b42      	cmp	r3, #66	; 0x42
 800229c:	d101      	bne.n	80022a2 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800229e:	2302      	movs	r3, #2
 80022a0:	e04e      	b.n	8002340 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2242      	movs	r2, #66	; 0x42
 80022a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	f003 031c 	and.w	r3, r3, #28
 80022b8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	8a1b      	ldrh	r3, [r3, #16]
 80022be:	02db      	lsls	r3, r3, #11
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	697a      	ldr	r2, [r7, #20]
 80022c4:	4313      	orrs	r3, r2
 80022c6:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80022c8:	897b      	ldrh	r3, [r7, #10]
 80022ca:	019b      	lsls	r3, r3, #6
 80022cc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80022d0:	697a      	ldr	r2, [r7, #20]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	f043 0302 	orr.w	r3, r3, #2
 80022dc:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80022de:	697b      	ldr	r3, [r7, #20]
 80022e0:	f043 0301 	orr.w	r3, r3, #1
 80022e4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	697a      	ldr	r2, [r7, #20]
 80022f6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80022f8:	f7fe fc1a 	bl	8000b30 <HAL_GetTick>
 80022fc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022fe:	e015      	b.n	800232c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002300:	f7fe fc16 	bl	8000b30 <HAL_GetTick>
 8002304:	4602      	mov	r2, r0
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800230e:	d309      	bcc.n	8002324 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2200      	movs	r2, #0
 800231c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002320:	2303      	movs	r3, #3
 8002322:	e00d      	b.n	8002340 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	691b      	ldr	r3, [r3, #16]
 800232a:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1e4      	bne.n	8002300 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	3718      	adds	r7, #24
 8002344:	46bd      	mov	sp, r7
 8002346:	bd80      	pop	{r7, pc}

08002348 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b0b0      	sub	sp, #192	; 0xc0
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d007      	beq.n	800236e <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002364:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800236c:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 800236e:	2300      	movs	r3, #0
 8002370:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002372:	2300      	movs	r3, #0
 8002374:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8002376:	2300      	movs	r3, #0
 8002378:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800237a:	2300      	movs	r3, #0
 800237c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 800237e:	2300      	movs	r3, #0
 8002380:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002382:	2300      	movs	r3, #0
 8002384:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	69db      	ldr	r3, [r3, #28]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d103      	bne.n	8002396 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 800238e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002392:	663b      	str	r3, [r7, #96]	; 0x60
 8002394:	e001      	b.n	800239a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8002396:	2300      	movs	r3, #0
 8002398:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800239a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800239e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80023a0:	2300      	movs	r3, #0
 80023a2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80023a4:	2300      	movs	r3, #0
 80023a6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80023a8:	2300      	movs	r3, #0
 80023aa:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80023b4:	2340      	movs	r3, #64	; 0x40
 80023b6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80023b8:	2300      	movs	r3, #0
 80023ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80023be:	2300      	movs	r3, #0
 80023c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80023c4:	2300      	movs	r3, #0
 80023c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80023ca:	2300      	movs	r3, #0
 80023cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80023d0:	2300      	movs	r3, #0
 80023d2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80023d6:	2300      	movs	r3, #0
 80023d8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80023dc:	2300      	movs	r3, #0
 80023de:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80023e2:	2300      	movs	r3, #0
 80023e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80023ee:	2300      	movs	r3, #0
 80023f0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80023f4:	2300      	movs	r3, #0
 80023f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80023fa:	2300      	movs	r3, #0
 80023fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002400:	2300      	movs	r3, #0
 8002402:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002406:	2300      	movs	r3, #0
 8002408:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 800240c:	2300      	movs	r3, #0
 800240e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 800241c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002420:	4bab      	ldr	r3, [pc, #684]	; (80026d0 <ETH_MACDMAConfig+0x388>)
 8002422:	4013      	ands	r3, r2
 8002424:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002428:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800242a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800242c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800242e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002430:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002432:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002434:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800243a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 800243c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800243e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002440:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002442:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002448:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800244a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 800244c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800244e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002450:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002452:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002454:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8002456:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8002458:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800245a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 800245c:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800245e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002462:	4313      	orrs	r3, r2
 8002464:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002470:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800247c:	2001      	movs	r0, #1
 800247e:	f7fe fb63 	bl	8000b48 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800248a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 800248c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 800248e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002490:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002492:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002494:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8002496:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800249a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 800249c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80024a0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80024a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80024a6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80024a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80024ac:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80024b0:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80024b8:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80024ba:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80024c6:	2001      	movs	r0, #1
 80024c8:	f7fe fb3e 	bl	8000b48 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024d4:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80024de:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80024e8:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	699b      	ldr	r3, [r3, #24]
 80024f0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80024f4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024f8:	f64f 7341 	movw	r3, #65345	; 0xff41
 80024fc:	4013      	ands	r3, r2
 80024fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002502:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002506:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002508:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800250c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 800250e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002512:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002514:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002518:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800251a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 800251e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002520:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002524:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002526:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002538:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002544:	2001      	movs	r0, #1
 8002546:	f7fe faff 	bl	8000b48 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002552:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002554:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8002558:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	430a      	orrs	r2, r1
 8002562:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800256e:	2001      	movs	r0, #1
 8002570:	f7fe faea 	bl	8000b48 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800257c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002582:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002586:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8002588:	2300      	movs	r3, #0
 800258a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 800258c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002590:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002592:	2300      	movs	r3, #0
 8002594:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8002596:	2300      	movs	r3, #0
 8002598:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800259e:	2300      	movs	r3, #0
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80025a2:	2304      	movs	r3, #4
 80025a4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80025a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80025ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025b0:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80025b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025b6:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80025b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025bc:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80025be:	2380      	movs	r3, #128	; 0x80
 80025c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80025c6:	2300      	movs	r3, #0
 80025c8:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	f241 0318 	movw	r3, #4120	; 0x1018
 80025d2:	4413      	add	r3, r2
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80025da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025de:	4b3d      	ldr	r3, [pc, #244]	; (80026d4 <ETH_MACDMAConfig+0x38c>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80025e6:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80025e8:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80025ea:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80025ec:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80025ee:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80025f0:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80025f2:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80025f4:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80025f6:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80025f8:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80025fa:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 80025fc:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 80025fe:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002602:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002604:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002606:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002608:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	f241 0318 	movw	r3, #4120	; 0x1018
 800261a:	4413      	add	r3, r2
 800261c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002620:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	f241 0318 	movw	r3, #4120	; 0x1018
 800262a:	4413      	add	r3, r2
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002632:	2001      	movs	r0, #1
 8002634:	f7fe fa88 	bl	8000b48 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681a      	ldr	r2, [r3, #0]
 800263c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002640:	4413      	add	r3, r2
 8002642:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002646:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002648:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800264a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800264c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800264e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002650:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002654:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8002656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8002658:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800265a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800265c:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 800265e:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002660:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002662:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800266c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002670:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002680:	2001      	movs	r0, #1
 8002682:	f7fe fa61 	bl	8000b48 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800268e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002692:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d10d      	bne.n	80026b8 <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	f241 031c 	movw	r3, #4124	; 0x101c
 80026a4:	4413      	add	r3, r2
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	687a      	ldr	r2, [r7, #4]
 80026aa:	6811      	ldr	r1, [r2, #0]
 80026ac:	4a0a      	ldr	r2, [pc, #40]	; (80026d8 <ETH_MACDMAConfig+0x390>)
 80026ae:	431a      	orrs	r2, r3
 80026b0:	f241 031c 	movw	r3, #4124	; 0x101c
 80026b4:	440b      	add	r3, r1
 80026b6:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	695b      	ldr	r3, [r3, #20]
 80026bc:	461a      	mov	r2, r3
 80026be:	2100      	movs	r1, #0
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f000 f80b 	bl	80026dc <ETH_MACAddressConfig>
}
 80026c6:	bf00      	nop
 80026c8:	37c0      	adds	r7, #192	; 0xc0
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}
 80026ce:	bf00      	nop
 80026d0:	ff20810f 	.word	0xff20810f
 80026d4:	f8de3f23 	.word	0xf8de3f23
 80026d8:	00010040 	.word	0x00010040

080026dc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80026dc:	b480      	push	{r7}
 80026de:	b087      	sub	sp, #28
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	3305      	adds	r3, #5
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	021b      	lsls	r3, r3, #8
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	3204      	adds	r2, #4
 80026f4:	7812      	ldrb	r2, [r2, #0]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	4b11      	ldr	r3, [pc, #68]	; (8002744 <ETH_MACAddressConfig+0x68>)
 80026fe:	4413      	add	r3, r2
 8002700:	461a      	mov	r2, r3
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	3303      	adds	r3, #3
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	061a      	lsls	r2, r3, #24
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3302      	adds	r3, #2
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	041b      	lsls	r3, r3, #16
 8002716:	431a      	orrs	r2, r3
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	3301      	adds	r3, #1
 800271c:	781b      	ldrb	r3, [r3, #0]
 800271e:	021b      	lsls	r3, r3, #8
 8002720:	4313      	orrs	r3, r2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	7812      	ldrb	r2, [r2, #0]
 8002726:	4313      	orrs	r3, r2
 8002728:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	4b06      	ldr	r3, [pc, #24]	; (8002748 <ETH_MACAddressConfig+0x6c>)
 800272e:	4413      	add	r3, r2
 8002730:	461a      	mov	r2, r3
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	6013      	str	r3, [r2, #0]
}
 8002736:	bf00      	nop
 8002738:	371c      	adds	r7, #28
 800273a:	46bd      	mov	sp, r7
 800273c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	40028040 	.word	0x40028040
 8002748:	40028044 	.word	0x40028044

0800274c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800274c:	b480      	push	{r7}
 800274e:	b089      	sub	sp, #36	; 0x24
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800275a:	2300      	movs	r3, #0
 800275c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800275e:	2300      	movs	r3, #0
 8002760:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002762:	2300      	movs	r3, #0
 8002764:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002766:	2300      	movs	r3, #0
 8002768:	61fb      	str	r3, [r7, #28]
 800276a:	e175      	b.n	8002a58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800276c:	2201      	movs	r2, #1
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	4013      	ands	r3, r2
 800277e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002780:	693a      	ldr	r2, [r7, #16]
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	429a      	cmp	r2, r3
 8002786:	f040 8164 	bne.w	8002a52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d003      	beq.n	800279a <HAL_GPIO_Init+0x4e>
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b12      	cmp	r3, #18
 8002798:	d123      	bne.n	80027e2 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	08da      	lsrs	r2, r3, #3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	3208      	adds	r2, #8
 80027a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	220f      	movs	r2, #15
 80027b2:	fa02 f303 	lsl.w	r3, r2, r3
 80027b6:	43db      	mvns	r3, r3
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	4013      	ands	r3, r2
 80027bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	691a      	ldr	r2, [r3, #16]
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	f003 0307 	and.w	r3, r3, #7
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	4313      	orrs	r3, r2
 80027d2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80027d4:	69fb      	ldr	r3, [r7, #28]
 80027d6:	08da      	lsrs	r2, r3, #3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	3208      	adds	r2, #8
 80027dc:	69b9      	ldr	r1, [r7, #24]
 80027de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	2203      	movs	r2, #3
 80027ee:	fa02 f303 	lsl.w	r3, r2, r3
 80027f2:	43db      	mvns	r3, r3
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	4013      	ands	r3, r2
 80027f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 0203 	and.w	r2, r3, #3
 8002802:	69fb      	ldr	r3, [r7, #28]
 8002804:	005b      	lsls	r3, r3, #1
 8002806:	fa02 f303 	lsl.w	r3, r2, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4313      	orrs	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d00b      	beq.n	8002836 <HAL_GPIO_Init+0xea>
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d007      	beq.n	8002836 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800282a:	2b11      	cmp	r3, #17
 800282c:	d003      	beq.n	8002836 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	2b12      	cmp	r3, #18
 8002834:	d130      	bne.n	8002898 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	2203      	movs	r2, #3
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43db      	mvns	r3, r3
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	4013      	ands	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	68da      	ldr	r2, [r3, #12]
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	fa02 f303 	lsl.w	r3, r2, r3
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800286c:	2201      	movs	r2, #1
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	43db      	mvns	r3, r3
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4013      	ands	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	091b      	lsrs	r3, r3, #4
 8002882:	f003 0201 	and.w	r2, r3, #1
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	4313      	orrs	r3, r2
 8002890:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	69ba      	ldr	r2, [r7, #24]
 8002896:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	005b      	lsls	r3, r3, #1
 80028a2:	2203      	movs	r2, #3
 80028a4:	fa02 f303 	lsl.w	r3, r2, r3
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	689a      	ldr	r2, [r3, #8]
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	005b      	lsls	r3, r3, #1
 80028b8:	fa02 f303 	lsl.w	r3, r2, r3
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	f000 80be 	beq.w	8002a52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028d6:	4b66      	ldr	r3, [pc, #408]	; (8002a70 <HAL_GPIO_Init+0x324>)
 80028d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028da:	4a65      	ldr	r2, [pc, #404]	; (8002a70 <HAL_GPIO_Init+0x324>)
 80028dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e0:	6453      	str	r3, [r2, #68]	; 0x44
 80028e2:	4b63      	ldr	r3, [pc, #396]	; (8002a70 <HAL_GPIO_Init+0x324>)
 80028e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028ee:	4a61      	ldr	r2, [pc, #388]	; (8002a74 <HAL_GPIO_Init+0x328>)
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	089b      	lsrs	r3, r3, #2
 80028f4:	3302      	adds	r3, #2
 80028f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	f003 0303 	and.w	r3, r3, #3
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	220f      	movs	r2, #15
 8002906:	fa02 f303 	lsl.w	r3, r2, r3
 800290a:	43db      	mvns	r3, r3
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	4013      	ands	r3, r2
 8002910:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a58      	ldr	r2, [pc, #352]	; (8002a78 <HAL_GPIO_Init+0x32c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d037      	beq.n	800298a <HAL_GPIO_Init+0x23e>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a57      	ldr	r2, [pc, #348]	; (8002a7c <HAL_GPIO_Init+0x330>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d031      	beq.n	8002986 <HAL_GPIO_Init+0x23a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a56      	ldr	r2, [pc, #344]	; (8002a80 <HAL_GPIO_Init+0x334>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d02b      	beq.n	8002982 <HAL_GPIO_Init+0x236>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a55      	ldr	r2, [pc, #340]	; (8002a84 <HAL_GPIO_Init+0x338>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d025      	beq.n	800297e <HAL_GPIO_Init+0x232>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a54      	ldr	r2, [pc, #336]	; (8002a88 <HAL_GPIO_Init+0x33c>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d01f      	beq.n	800297a <HAL_GPIO_Init+0x22e>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a53      	ldr	r2, [pc, #332]	; (8002a8c <HAL_GPIO_Init+0x340>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d019      	beq.n	8002976 <HAL_GPIO_Init+0x22a>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a52      	ldr	r2, [pc, #328]	; (8002a90 <HAL_GPIO_Init+0x344>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d013      	beq.n	8002972 <HAL_GPIO_Init+0x226>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a51      	ldr	r2, [pc, #324]	; (8002a94 <HAL_GPIO_Init+0x348>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d00d      	beq.n	800296e <HAL_GPIO_Init+0x222>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a50      	ldr	r2, [pc, #320]	; (8002a98 <HAL_GPIO_Init+0x34c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d007      	beq.n	800296a <HAL_GPIO_Init+0x21e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a4f      	ldr	r2, [pc, #316]	; (8002a9c <HAL_GPIO_Init+0x350>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d101      	bne.n	8002966 <HAL_GPIO_Init+0x21a>
 8002962:	2309      	movs	r3, #9
 8002964:	e012      	b.n	800298c <HAL_GPIO_Init+0x240>
 8002966:	230a      	movs	r3, #10
 8002968:	e010      	b.n	800298c <HAL_GPIO_Init+0x240>
 800296a:	2308      	movs	r3, #8
 800296c:	e00e      	b.n	800298c <HAL_GPIO_Init+0x240>
 800296e:	2307      	movs	r3, #7
 8002970:	e00c      	b.n	800298c <HAL_GPIO_Init+0x240>
 8002972:	2306      	movs	r3, #6
 8002974:	e00a      	b.n	800298c <HAL_GPIO_Init+0x240>
 8002976:	2305      	movs	r3, #5
 8002978:	e008      	b.n	800298c <HAL_GPIO_Init+0x240>
 800297a:	2304      	movs	r3, #4
 800297c:	e006      	b.n	800298c <HAL_GPIO_Init+0x240>
 800297e:	2303      	movs	r3, #3
 8002980:	e004      	b.n	800298c <HAL_GPIO_Init+0x240>
 8002982:	2302      	movs	r3, #2
 8002984:	e002      	b.n	800298c <HAL_GPIO_Init+0x240>
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <HAL_GPIO_Init+0x240>
 800298a:	2300      	movs	r3, #0
 800298c:	69fa      	ldr	r2, [r7, #28]
 800298e:	f002 0203 	and.w	r2, r2, #3
 8002992:	0092      	lsls	r2, r2, #2
 8002994:	4093      	lsls	r3, r2
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4313      	orrs	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800299c:	4935      	ldr	r1, [pc, #212]	; (8002a74 <HAL_GPIO_Init+0x328>)
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	089b      	lsrs	r3, r3, #2
 80029a2:	3302      	adds	r3, #2
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029aa:	4b3d      	ldr	r3, [pc, #244]	; (8002aa0 <HAL_GPIO_Init+0x354>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	43db      	mvns	r3, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4013      	ands	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029ce:	4a34      	ldr	r2, [pc, #208]	; (8002aa0 <HAL_GPIO_Init+0x354>)
 80029d0:	69bb      	ldr	r3, [r7, #24]
 80029d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029d4:	4b32      	ldr	r3, [pc, #200]	; (8002aa0 <HAL_GPIO_Init+0x354>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029f8:	4a29      	ldr	r2, [pc, #164]	; (8002aa0 <HAL_GPIO_Init+0x354>)
 80029fa:	69bb      	ldr	r3, [r7, #24]
 80029fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80029fe:	4b28      	ldr	r3, [pc, #160]	; (8002aa0 <HAL_GPIO_Init+0x354>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	43db      	mvns	r3, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d003      	beq.n	8002a22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	693b      	ldr	r3, [r7, #16]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a22:	4a1f      	ldr	r2, [pc, #124]	; (8002aa0 <HAL_GPIO_Init+0x354>)
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a28:	4b1d      	ldr	r3, [pc, #116]	; (8002aa0 <HAL_GPIO_Init+0x354>)
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	43db      	mvns	r3, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4013      	ands	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a4c:	4a14      	ldr	r2, [pc, #80]	; (8002aa0 <HAL_GPIO_Init+0x354>)
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	3301      	adds	r3, #1
 8002a56:	61fb      	str	r3, [r7, #28]
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	2b0f      	cmp	r3, #15
 8002a5c:	f67f ae86 	bls.w	800276c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a60:	bf00      	nop
 8002a62:	bf00      	nop
 8002a64:	3724      	adds	r7, #36	; 0x24
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	40023800 	.word	0x40023800
 8002a74:	40013800 	.word	0x40013800
 8002a78:	40020000 	.word	0x40020000
 8002a7c:	40020400 	.word	0x40020400
 8002a80:	40020800 	.word	0x40020800
 8002a84:	40020c00 	.word	0x40020c00
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	40021400 	.word	0x40021400
 8002a90:	40021800 	.word	0x40021800
 8002a94:	40021c00 	.word	0x40021c00
 8002a98:	40022000 	.word	0x40022000
 8002a9c:	40022400 	.word	0x40022400
 8002aa0:	40013c00 	.word	0x40013c00

08002aa4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	e0d9      	b.n	8002c74 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	f040 80c9 	bne.w	8002c6e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8002adc:	4a6b      	ldr	r2, [pc, #428]	; (8002c8c <HAL_GPIO_DeInit+0x1e8>)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	089b      	lsrs	r3, r3, #2
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	220f      	movs	r2, #15
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	4013      	ands	r3, r2
 8002afc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a63      	ldr	r2, [pc, #396]	; (8002c90 <HAL_GPIO_DeInit+0x1ec>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d037      	beq.n	8002b76 <HAL_GPIO_DeInit+0xd2>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a62      	ldr	r2, [pc, #392]	; (8002c94 <HAL_GPIO_DeInit+0x1f0>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d031      	beq.n	8002b72 <HAL_GPIO_DeInit+0xce>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a61      	ldr	r2, [pc, #388]	; (8002c98 <HAL_GPIO_DeInit+0x1f4>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d02b      	beq.n	8002b6e <HAL_GPIO_DeInit+0xca>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a60      	ldr	r2, [pc, #384]	; (8002c9c <HAL_GPIO_DeInit+0x1f8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d025      	beq.n	8002b6a <HAL_GPIO_DeInit+0xc6>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a5f      	ldr	r2, [pc, #380]	; (8002ca0 <HAL_GPIO_DeInit+0x1fc>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d01f      	beq.n	8002b66 <HAL_GPIO_DeInit+0xc2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a5e      	ldr	r2, [pc, #376]	; (8002ca4 <HAL_GPIO_DeInit+0x200>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d019      	beq.n	8002b62 <HAL_GPIO_DeInit+0xbe>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a5d      	ldr	r2, [pc, #372]	; (8002ca8 <HAL_GPIO_DeInit+0x204>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d013      	beq.n	8002b5e <HAL_GPIO_DeInit+0xba>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a5c      	ldr	r2, [pc, #368]	; (8002cac <HAL_GPIO_DeInit+0x208>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d00d      	beq.n	8002b5a <HAL_GPIO_DeInit+0xb6>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a5b      	ldr	r2, [pc, #364]	; (8002cb0 <HAL_GPIO_DeInit+0x20c>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d007      	beq.n	8002b56 <HAL_GPIO_DeInit+0xb2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a5a      	ldr	r2, [pc, #360]	; (8002cb4 <HAL_GPIO_DeInit+0x210>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d101      	bne.n	8002b52 <HAL_GPIO_DeInit+0xae>
 8002b4e:	2309      	movs	r3, #9
 8002b50:	e012      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b52:	230a      	movs	r3, #10
 8002b54:	e010      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b56:	2308      	movs	r3, #8
 8002b58:	e00e      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b5a:	2307      	movs	r3, #7
 8002b5c:	e00c      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b5e:	2306      	movs	r3, #6
 8002b60:	e00a      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b62:	2305      	movs	r3, #5
 8002b64:	e008      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b66:	2304      	movs	r3, #4
 8002b68:	e006      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e004      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e002      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b76:	2300      	movs	r3, #0
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	f002 0203 	and.w	r2, r2, #3
 8002b7e:	0092      	lsls	r2, r2, #2
 8002b80:	4093      	lsls	r3, r2
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d132      	bne.n	8002bee <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	220f      	movs	r2, #15
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8002b98:	4a3c      	ldr	r2, [pc, #240]	; (8002c8c <HAL_GPIO_DeInit+0x1e8>)
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	089b      	lsrs	r3, r3, #2
 8002b9e:	3302      	adds	r3, #2
 8002ba0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	43da      	mvns	r2, r3
 8002ba8:	4838      	ldr	r0, [pc, #224]	; (8002c8c <HAL_GPIO_DeInit+0x1e8>)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	089b      	lsrs	r3, r3, #2
 8002bae:	400a      	ands	r2, r1
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002bb6:	4b40      	ldr	r3, [pc, #256]	; (8002cb8 <HAL_GPIO_DeInit+0x214>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	493e      	ldr	r1, [pc, #248]	; (8002cb8 <HAL_GPIO_DeInit+0x214>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002bc4:	4b3c      	ldr	r3, [pc, #240]	; (8002cb8 <HAL_GPIO_DeInit+0x214>)
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	493a      	ldr	r1, [pc, #232]	; (8002cb8 <HAL_GPIO_DeInit+0x214>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002bd2:	4b39      	ldr	r3, [pc, #228]	; (8002cb8 <HAL_GPIO_DeInit+0x214>)
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	4937      	ldr	r1, [pc, #220]	; (8002cb8 <HAL_GPIO_DeInit+0x214>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002be0:	4b35      	ldr	r3, [pc, #212]	; (8002cb8 <HAL_GPIO_DeInit+0x214>)
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	43db      	mvns	r3, r3
 8002be8:	4933      	ldr	r1, [pc, #204]	; (8002cb8 <HAL_GPIO_DeInit+0x214>)
 8002bea:	4013      	ands	r3, r2
 8002bec:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	2103      	movs	r1, #3
 8002bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	401a      	ands	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	08da      	lsrs	r2, r3, #3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3208      	adds	r2, #8
 8002c0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	220f      	movs	r2, #15
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	08d2      	lsrs	r2, r2, #3
 8002c24:	4019      	ands	r1, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3208      	adds	r2, #8
 8002c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	2103      	movs	r1, #3
 8002c38:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	401a      	ands	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	2101      	movs	r1, #1
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	401a      	ands	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	2103      	movs	r1, #3
 8002c62:	fa01 f303 	lsl.w	r3, r1, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	401a      	ands	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	3301      	adds	r3, #1
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2b0f      	cmp	r3, #15
 8002c78:	f67f af22 	bls.w	8002ac0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	bf00      	nop
 8002c80:	371c      	adds	r7, #28
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	40013800 	.word	0x40013800
 8002c90:	40020000 	.word	0x40020000
 8002c94:	40020400 	.word	0x40020400
 8002c98:	40020800 	.word	0x40020800
 8002c9c:	40020c00 	.word	0x40020c00
 8002ca0:	40021000 	.word	0x40021000
 8002ca4:	40021400 	.word	0x40021400
 8002ca8:	40021800 	.word	0x40021800
 8002cac:	40021c00 	.word	0x40021c00
 8002cb0:	40022000 	.word	0x40022000
 8002cb4:	40022400 	.word	0x40022400
 8002cb8:	40013c00 	.word	0x40013c00

08002cbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
 8002cc4:	460b      	mov	r3, r1
 8002cc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	691a      	ldr	r2, [r3, #16]
 8002ccc:	887b      	ldrh	r3, [r7, #2]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d002      	beq.n	8002cda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	73fb      	strb	r3, [r7, #15]
 8002cd8:	e001      	b.n	8002cde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cde:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3714      	adds	r7, #20
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cea:	4770      	bx	lr

08002cec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b083      	sub	sp, #12
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	807b      	strh	r3, [r7, #2]
 8002cf8:	4613      	mov	r3, r2
 8002cfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cfc:	787b      	ldrb	r3, [r7, #1]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d02:	887a      	ldrh	r2, [r7, #2]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d08:	e003      	b.n	8002d12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d0a:	887b      	ldrh	r3, [r7, #2]
 8002d0c:	041a      	lsls	r2, r3, #16
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	619a      	str	r2, [r3, #24]
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002d1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d20:	b08d      	sub	sp, #52	; 0x34
 8002d22:	af0a      	add	r7, sp, #40	; 0x28
 8002d24:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e048      	b.n	8002dc2 <HAL_HCD_Init+0xa4>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002d36:	b2db      	uxtb	r3, r3
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d106      	bne.n	8002d4a <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f016 fe71 	bl	8019a2c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2203      	movs	r2, #3
 8002d4e:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4618      	mov	r0, r3
 8002d58:	f008 fc75 	bl	800b646 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	603b      	str	r3, [r7, #0]
 8002d62:	687e      	ldr	r6, [r7, #4]
 8002d64:	466d      	mov	r5, sp
 8002d66:	f106 0410 	add.w	r4, r6, #16
 8002d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d72:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d76:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d7a:	1d33      	adds	r3, r6, #4
 8002d7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d7e:	6838      	ldr	r0, [r7, #0]
 8002d80:	f008 fbf8 	bl	800b574 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2101      	movs	r1, #1
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f008 fc6c 	bl	800b668 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	603b      	str	r3, [r7, #0]
 8002d96:	687e      	ldr	r6, [r7, #4]
 8002d98:	466d      	mov	r5, sp
 8002d9a:	f106 0410 	add.w	r4, r6, #16
 8002d9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002da0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002da2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002da4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002da6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002daa:	e885 0003 	stmia.w	r5, {r0, r1}
 8002dae:	1d33      	adds	r3, r6, #4
 8002db0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002db2:	6838      	ldr	r0, [r7, #0]
 8002db4:	f008 fd7e 	bl	800b8b4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	370c      	adds	r7, #12
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dca <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002dca:	b590      	push	{r4, r7, lr}
 8002dcc:	b089      	sub	sp, #36	; 0x24
 8002dce:	af04      	add	r7, sp, #16
 8002dd0:	6078      	str	r0, [r7, #4]
 8002dd2:	4608      	mov	r0, r1
 8002dd4:	4611      	mov	r1, r2
 8002dd6:	461a      	mov	r2, r3
 8002dd8:	4603      	mov	r3, r0
 8002dda:	70fb      	strb	r3, [r7, #3]
 8002ddc:	460b      	mov	r3, r1
 8002dde:	70bb      	strb	r3, [r7, #2]
 8002de0:	4613      	mov	r3, r2
 8002de2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <HAL_HCD_HC_Init+0x28>
 8002dee:	2302      	movs	r3, #2
 8002df0:	e07f      	b.n	8002ef2 <HAL_HCD_HC_Init+0x128>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002dfa:	78fa      	ldrb	r2, [r7, #3]
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	00db      	lsls	r3, r3, #3
 8002e06:	440b      	add	r3, r1
 8002e08:	333d      	adds	r3, #61	; 0x3d
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002e0e:	78fa      	ldrb	r2, [r7, #3]
 8002e10:	6879      	ldr	r1, [r7, #4]
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	440b      	add	r3, r1
 8002e1c:	3338      	adds	r3, #56	; 0x38
 8002e1e:	787a      	ldrb	r2, [r7, #1]
 8002e20:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002e22:	78fa      	ldrb	r2, [r7, #3]
 8002e24:	6879      	ldr	r1, [r7, #4]
 8002e26:	4613      	mov	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	4413      	add	r3, r2
 8002e2c:	00db      	lsls	r3, r3, #3
 8002e2e:	440b      	add	r3, r1
 8002e30:	3340      	adds	r3, #64	; 0x40
 8002e32:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e34:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e36:	78fa      	ldrb	r2, [r7, #3]
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	4413      	add	r3, r2
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	440b      	add	r3, r1
 8002e44:	3339      	adds	r3, #57	; 0x39
 8002e46:	78fa      	ldrb	r2, [r7, #3]
 8002e48:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002e4a:	78fa      	ldrb	r2, [r7, #3]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	440b      	add	r3, r1
 8002e58:	333f      	adds	r3, #63	; 0x3f
 8002e5a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002e5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	78bb      	ldrb	r3, [r7, #2]
 8002e64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e68:	b2d8      	uxtb	r0, r3
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	4413      	add	r3, r2
 8002e72:	00db      	lsls	r3, r3, #3
 8002e74:	440b      	add	r3, r1
 8002e76:	333a      	adds	r3, #58	; 0x3a
 8002e78:	4602      	mov	r2, r0
 8002e7a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002e7c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	da0a      	bge.n	8002e9a <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002e84:	78fa      	ldrb	r2, [r7, #3]
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	4613      	mov	r3, r2
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	00db      	lsls	r3, r3, #3
 8002e90:	440b      	add	r3, r1
 8002e92:	333b      	adds	r3, #59	; 0x3b
 8002e94:	2201      	movs	r2, #1
 8002e96:	701a      	strb	r2, [r3, #0]
 8002e98:	e009      	b.n	8002eae <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002e9a:	78fa      	ldrb	r2, [r7, #3]
 8002e9c:	6879      	ldr	r1, [r7, #4]
 8002e9e:	4613      	mov	r3, r2
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	4413      	add	r3, r2
 8002ea4:	00db      	lsls	r3, r3, #3
 8002ea6:	440b      	add	r3, r1
 8002ea8:	333b      	adds	r3, #59	; 0x3b
 8002eaa:	2200      	movs	r2, #0
 8002eac:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002eae:	78fa      	ldrb	r2, [r7, #3]
 8002eb0:	6879      	ldr	r1, [r7, #4]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	440b      	add	r3, r1
 8002ebc:	333c      	adds	r3, #60	; 0x3c
 8002ebe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002ec2:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6818      	ldr	r0, [r3, #0]
 8002ec8:	787c      	ldrb	r4, [r7, #1]
 8002eca:	78ba      	ldrb	r2, [r7, #2]
 8002ecc:	78f9      	ldrb	r1, [r7, #3]
 8002ece:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002ed0:	9302      	str	r3, [sp, #8]
 8002ed2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ed6:	9301      	str	r3, [sp, #4]
 8002ed8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	4623      	mov	r3, r4
 8002ee0:	f008 fe5e 	bl	800bba0 <USB_HC_Init>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd90      	pop	{r4, r7, pc}

08002efa <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
 8002f02:	460b      	mov	r3, r1
 8002f04:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002f06:	2300      	movs	r3, #0
 8002f08:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d101      	bne.n	8002f18 <HAL_HCD_HC_Halt+0x1e>
 8002f14:	2302      	movs	r3, #2
 8002f16:	e00f      	b.n	8002f38 <HAL_HCD_HC_Halt+0x3e>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	78fa      	ldrb	r2, [r7, #3]
 8002f26:	4611      	mov	r1, r2
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f009 f896 	bl	800c05a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3710      	adds	r7, #16
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	4608      	mov	r0, r1
 8002f4a:	4611      	mov	r1, r2
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	4603      	mov	r3, r0
 8002f50:	70fb      	strb	r3, [r7, #3]
 8002f52:	460b      	mov	r3, r1
 8002f54:	70bb      	strb	r3, [r7, #2]
 8002f56:	4613      	mov	r3, r2
 8002f58:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8002f5a:	78fa      	ldrb	r2, [r7, #3]
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	009b      	lsls	r3, r3, #2
 8002f62:	4413      	add	r3, r2
 8002f64:	00db      	lsls	r3, r3, #3
 8002f66:	440b      	add	r3, r1
 8002f68:	333b      	adds	r3, #59	; 0x3b
 8002f6a:	78ba      	ldrb	r2, [r7, #2]
 8002f6c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002f6e:	78fa      	ldrb	r2, [r7, #3]
 8002f70:	6879      	ldr	r1, [r7, #4]
 8002f72:	4613      	mov	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	440b      	add	r3, r1
 8002f7c:	333f      	adds	r3, #63	; 0x3f
 8002f7e:	787a      	ldrb	r2, [r7, #1]
 8002f80:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002f82:	7c3b      	ldrb	r3, [r7, #16]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d10a      	bne.n	8002f9e <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002f88:	78fa      	ldrb	r2, [r7, #3]
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	00db      	lsls	r3, r3, #3
 8002f94:	440b      	add	r3, r1
 8002f96:	3342      	adds	r3, #66	; 0x42
 8002f98:	2203      	movs	r2, #3
 8002f9a:	701a      	strb	r2, [r3, #0]
 8002f9c:	e009      	b.n	8002fb2 <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f9e:	78fa      	ldrb	r2, [r7, #3]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	009b      	lsls	r3, r3, #2
 8002fa6:	4413      	add	r3, r2
 8002fa8:	00db      	lsls	r3, r3, #3
 8002faa:	440b      	add	r3, r1
 8002fac:	3342      	adds	r3, #66	; 0x42
 8002fae:	2202      	movs	r2, #2
 8002fb0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002fb2:	787b      	ldrb	r3, [r7, #1]
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	f200 80d6 	bhi.w	8003166 <HAL_HCD_HC_SubmitRequest+0x226>
 8002fba:	a201      	add	r2, pc, #4	; (adr r2, 8002fc0 <HAL_HCD_HC_SubmitRequest+0x80>)
 8002fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc0:	08002fd1 	.word	0x08002fd1
 8002fc4:	08003151 	.word	0x08003151
 8002fc8:	0800303d 	.word	0x0800303d
 8002fcc:	080030c7 	.word	0x080030c7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002fd0:	7c3b      	ldrb	r3, [r7, #16]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	f040 80c9 	bne.w	800316a <HAL_HCD_HC_SubmitRequest+0x22a>
 8002fd8:	78bb      	ldrb	r3, [r7, #2]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f040 80c5 	bne.w	800316a <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8002fe0:	8b3b      	ldrh	r3, [r7, #24]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	440b      	add	r3, r1
 8002ff4:	3351      	adds	r3, #81	; 0x51
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ffa:	78fa      	ldrb	r2, [r7, #3]
 8002ffc:	6879      	ldr	r1, [r7, #4]
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	00db      	lsls	r3, r3, #3
 8003006:	440b      	add	r3, r1
 8003008:	3351      	adds	r3, #81	; 0x51
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10a      	bne.n	8003026 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003010:	78fa      	ldrb	r2, [r7, #3]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4413      	add	r3, r2
 800301a:	00db      	lsls	r3, r3, #3
 800301c:	440b      	add	r3, r1
 800301e:	3342      	adds	r3, #66	; 0x42
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003024:	e0a1      	b.n	800316a <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003026:	78fa      	ldrb	r2, [r7, #3]
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	4613      	mov	r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	4413      	add	r3, r2
 8003030:	00db      	lsls	r3, r3, #3
 8003032:	440b      	add	r3, r1
 8003034:	3342      	adds	r3, #66	; 0x42
 8003036:	2202      	movs	r2, #2
 8003038:	701a      	strb	r2, [r3, #0]
      break;
 800303a:	e096      	b.n	800316a <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 800303c:	78bb      	ldrb	r3, [r7, #2]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d120      	bne.n	8003084 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003042:	78fa      	ldrb	r2, [r7, #3]
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	4413      	add	r3, r2
 800304c:	00db      	lsls	r3, r3, #3
 800304e:	440b      	add	r3, r1
 8003050:	3351      	adds	r3, #81	; 0x51
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d10a      	bne.n	800306e <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003058:	78fa      	ldrb	r2, [r7, #3]
 800305a:	6879      	ldr	r1, [r7, #4]
 800305c:	4613      	mov	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4413      	add	r3, r2
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	440b      	add	r3, r1
 8003066:	3342      	adds	r3, #66	; 0x42
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 800306c:	e07e      	b.n	800316c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800306e:	78fa      	ldrb	r2, [r7, #3]
 8003070:	6879      	ldr	r1, [r7, #4]
 8003072:	4613      	mov	r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4413      	add	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	440b      	add	r3, r1
 800307c:	3342      	adds	r3, #66	; 0x42
 800307e:	2202      	movs	r2, #2
 8003080:	701a      	strb	r2, [r3, #0]
      break;
 8003082:	e073      	b.n	800316c <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	009b      	lsls	r3, r3, #2
 800308c:	4413      	add	r3, r2
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	440b      	add	r3, r1
 8003092:	3350      	adds	r3, #80	; 0x50
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10a      	bne.n	80030b0 <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	440b      	add	r3, r1
 80030a8:	3342      	adds	r3, #66	; 0x42
 80030aa:	2200      	movs	r2, #0
 80030ac:	701a      	strb	r2, [r3, #0]
      break;
 80030ae:	e05d      	b.n	800316c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030b0:	78fa      	ldrb	r2, [r7, #3]
 80030b2:	6879      	ldr	r1, [r7, #4]
 80030b4:	4613      	mov	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4413      	add	r3, r2
 80030ba:	00db      	lsls	r3, r3, #3
 80030bc:	440b      	add	r3, r1
 80030be:	3342      	adds	r3, #66	; 0x42
 80030c0:	2202      	movs	r2, #2
 80030c2:	701a      	strb	r2, [r3, #0]
      break;
 80030c4:	e052      	b.n	800316c <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80030c6:	78bb      	ldrb	r3, [r7, #2]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d120      	bne.n	800310e <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030cc:	78fa      	ldrb	r2, [r7, #3]
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	4613      	mov	r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	4413      	add	r3, r2
 80030d6:	00db      	lsls	r3, r3, #3
 80030d8:	440b      	add	r3, r1
 80030da:	3351      	adds	r3, #81	; 0x51
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10a      	bne.n	80030f8 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030e2:	78fa      	ldrb	r2, [r7, #3]
 80030e4:	6879      	ldr	r1, [r7, #4]
 80030e6:	4613      	mov	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	4413      	add	r3, r2
 80030ec:	00db      	lsls	r3, r3, #3
 80030ee:	440b      	add	r3, r1
 80030f0:	3342      	adds	r3, #66	; 0x42
 80030f2:	2200      	movs	r2, #0
 80030f4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80030f6:	e039      	b.n	800316c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030f8:	78fa      	ldrb	r2, [r7, #3]
 80030fa:	6879      	ldr	r1, [r7, #4]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	00db      	lsls	r3, r3, #3
 8003104:	440b      	add	r3, r1
 8003106:	3342      	adds	r3, #66	; 0x42
 8003108:	2202      	movs	r2, #2
 800310a:	701a      	strb	r2, [r3, #0]
      break;
 800310c:	e02e      	b.n	800316c <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800310e:	78fa      	ldrb	r2, [r7, #3]
 8003110:	6879      	ldr	r1, [r7, #4]
 8003112:	4613      	mov	r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	4413      	add	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	440b      	add	r3, r1
 800311c:	3350      	adds	r3, #80	; 0x50
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d10a      	bne.n	800313a <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003124:	78fa      	ldrb	r2, [r7, #3]
 8003126:	6879      	ldr	r1, [r7, #4]
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	00db      	lsls	r3, r3, #3
 8003130:	440b      	add	r3, r1
 8003132:	3342      	adds	r3, #66	; 0x42
 8003134:	2200      	movs	r2, #0
 8003136:	701a      	strb	r2, [r3, #0]
      break;
 8003138:	e018      	b.n	800316c <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800313a:	78fa      	ldrb	r2, [r7, #3]
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	4613      	mov	r3, r2
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	4413      	add	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	440b      	add	r3, r1
 8003148:	3342      	adds	r3, #66	; 0x42
 800314a:	2202      	movs	r2, #2
 800314c:	701a      	strb	r2, [r3, #0]
      break;
 800314e:	e00d      	b.n	800316c <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003150:	78fa      	ldrb	r2, [r7, #3]
 8003152:	6879      	ldr	r1, [r7, #4]
 8003154:	4613      	mov	r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	4413      	add	r3, r2
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	440b      	add	r3, r1
 800315e:	3342      	adds	r3, #66	; 0x42
 8003160:	2200      	movs	r2, #0
 8003162:	701a      	strb	r2, [r3, #0]
      break;
 8003164:	e002      	b.n	800316c <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8003166:	bf00      	nop
 8003168:	e000      	b.n	800316c <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 800316a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800316c:	78fa      	ldrb	r2, [r7, #3]
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	4613      	mov	r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	4413      	add	r3, r2
 8003176:	00db      	lsls	r3, r3, #3
 8003178:	440b      	add	r3, r1
 800317a:	3344      	adds	r3, #68	; 0x44
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003180:	78fa      	ldrb	r2, [r7, #3]
 8003182:	8b39      	ldrh	r1, [r7, #24]
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	4613      	mov	r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	4413      	add	r3, r2
 800318c:	00db      	lsls	r3, r3, #3
 800318e:	4403      	add	r3, r0
 8003190:	3348      	adds	r3, #72	; 0x48
 8003192:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	009b      	lsls	r3, r3, #2
 800319c:	4413      	add	r3, r2
 800319e:	00db      	lsls	r3, r3, #3
 80031a0:	440b      	add	r3, r1
 80031a2:	335c      	adds	r3, #92	; 0x5c
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	00db      	lsls	r3, r3, #3
 80031b4:	440b      	add	r3, r1
 80031b6:	334c      	adds	r3, #76	; 0x4c
 80031b8:	2200      	movs	r2, #0
 80031ba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80031bc:	78fa      	ldrb	r2, [r7, #3]
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4413      	add	r3, r2
 80031c6:	00db      	lsls	r3, r3, #3
 80031c8:	440b      	add	r3, r1
 80031ca:	3339      	adds	r3, #57	; 0x39
 80031cc:	78fa      	ldrb	r2, [r7, #3]
 80031ce:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80031d0:	78fa      	ldrb	r2, [r7, #3]
 80031d2:	6879      	ldr	r1, [r7, #4]
 80031d4:	4613      	mov	r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	4413      	add	r3, r2
 80031da:	00db      	lsls	r3, r3, #3
 80031dc:	440b      	add	r3, r1
 80031de:	335d      	adds	r3, #93	; 0x5d
 80031e0:	2200      	movs	r2, #0
 80031e2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6818      	ldr	r0, [r3, #0]
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	4613      	mov	r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	4413      	add	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	3338      	adds	r3, #56	; 0x38
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	18d1      	adds	r1, r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	691b      	ldr	r3, [r3, #16]
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	461a      	mov	r2, r3
 8003200:	f008 fdd8 	bl	800bdb4 <USB_HC_StartXfer>
 8003204:	4603      	mov	r3, r0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3708      	adds	r7, #8
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop

08003210 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4618      	mov	r0, r3
 8003228:	f008 fb01 	bl	800b82e <USB_GetMode>
 800322c:	4603      	mov	r3, r0
 800322e:	2b01      	cmp	r3, #1
 8003230:	f040 80f1 	bne.w	8003416 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4618      	mov	r0, r3
 800323a:	f008 fae5 	bl	800b808 <USB_ReadInterrupts>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 80e7 	beq.w	8003414 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4618      	mov	r0, r3
 800324c:	f008 fadc 	bl	800b808 <USB_ReadInterrupts>
 8003250:	4603      	mov	r3, r0
 8003252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003256:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800325a:	d104      	bne.n	8003266 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003264:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4618      	mov	r0, r3
 800326c:	f008 facc 	bl	800b808 <USB_ReadInterrupts>
 8003270:	4603      	mov	r3, r0
 8003272:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003276:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800327a:	d104      	bne.n	8003286 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003284:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4618      	mov	r0, r3
 800328c:	f008 fabc 	bl	800b808 <USB_ReadInterrupts>
 8003290:	4603      	mov	r3, r0
 8003292:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003296:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800329a:	d104      	bne.n	80032a6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80032a4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f008 faac 	bl	800b808 <USB_ReadInterrupts>
 80032b0:	4603      	mov	r3, r0
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d103      	bne.n	80032c2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2202      	movs	r2, #2
 80032c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f008 fa9e 	bl	800b808 <USB_ReadInterrupts>
 80032cc:	4603      	mov	r3, r0
 80032ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032d6:	d117      	bne.n	8003308 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68fa      	ldr	r2, [r7, #12]
 80032e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80032e6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80032ea:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f016 fc0f 	bl	8019b10 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2101      	movs	r1, #1
 80032f8:	4618      	mov	r0, r3
 80032fa:	f008 fb8b 	bl	800ba14 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003306:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4618      	mov	r0, r3
 800330e:	f008 fa7b 	bl	800b808 <USB_ReadInterrupts>
 8003312:	4603      	mov	r3, r0
 8003314:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800331c:	d102      	bne.n	8003324 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f001 f8ca 	bl	80044b8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f008 fa6d 	bl	800b808 <USB_ReadInterrupts>
 800332e:	4603      	mov	r3, r0
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b08      	cmp	r3, #8
 8003336:	d106      	bne.n	8003346 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003338:	6878      	ldr	r0, [r7, #4]
 800333a:	f016 fbcd 	bl	8019ad8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2208      	movs	r2, #8
 8003344:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4618      	mov	r0, r3
 800334c:	f008 fa5c 	bl	800b808 <USB_ReadInterrupts>
 8003350:	4603      	mov	r3, r0
 8003352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003356:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800335a:	d138      	bne.n	80033ce <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4618      	mov	r0, r3
 8003362:	f008 fe69 	bl	800c038 <USB_HC_ReadInterrupt>
 8003366:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]
 800336c:	e025      	b.n	80033ba <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f003 030f 	and.w	r3, r3, #15
 8003374:	68ba      	ldr	r2, [r7, #8]
 8003376:	fa22 f303 	lsr.w	r3, r2, r3
 800337a:	f003 0301 	and.w	r3, r3, #1
 800337e:	2b00      	cmp	r3, #0
 8003380:	d018      	beq.n	80033b4 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	015a      	lsls	r2, r3, #5
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4413      	add	r3, r2
 800338a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003398:	d106      	bne.n	80033a8 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	b2db      	uxtb	r3, r3
 800339e:	4619      	mov	r1, r3
 80033a0:	6878      	ldr	r0, [r7, #4]
 80033a2:	f000 f8cf 	bl	8003544 <HCD_HC_IN_IRQHandler>
 80033a6:	e005      	b.n	80033b4 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	4619      	mov	r1, r3
 80033ae:	6878      	ldr	r0, [r7, #4]
 80033b0:	f000 fc5f 	bl	8003c72 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	3301      	adds	r3, #1
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	697a      	ldr	r2, [r7, #20]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d3d4      	bcc.n	800336e <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f008 fa18 	bl	800b808 <USB_ReadInterrupts>
 80033d8:	4603      	mov	r3, r0
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	2b10      	cmp	r3, #16
 80033e0:	d101      	bne.n	80033e6 <HAL_HCD_IRQHandler+0x1d6>
 80033e2:	2301      	movs	r3, #1
 80033e4:	e000      	b.n	80033e8 <HAL_HCD_IRQHandler+0x1d8>
 80033e6:	2300      	movs	r3, #0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d014      	beq.n	8003416 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	699a      	ldr	r2, [r3, #24]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0210 	bic.w	r2, r2, #16
 80033fa:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	f000 ffad 	bl	800435c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	699a      	ldr	r2, [r3, #24]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f042 0210 	orr.w	r2, r2, #16
 8003410:	619a      	str	r2, [r3, #24]
 8003412:	e000      	b.n	8003416 <HAL_HCD_IRQHandler+0x206>
      return;
 8003414:	bf00      	nop
    }
  }
}
 8003416:	3718      	adds	r7, #24
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b082      	sub	sp, #8
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800342a:	2b01      	cmp	r3, #1
 800342c:	d101      	bne.n	8003432 <HAL_HCD_Start+0x16>
 800342e:	2302      	movs	r3, #2
 8003430:	e013      	b.n	800345a <HAL_HCD_Start+0x3e>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f008 f8f0 	bl	800b624 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2101      	movs	r1, #1
 800344a:	4618      	mov	r0, r3
 800344c:	f008 fb46 	bl	800badc <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}

08003462 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_HCD_Stop+0x16>
 8003474:	2302      	movs	r3, #2
 8003476:	e00d      	b.n	8003494 <HAL_HCD_Stop+0x32>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4618      	mov	r0, r3
 8003486:	f008 ff23 	bl	800c2d0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8003492:	2300      	movs	r3, #0
}
 8003494:	4618      	mov	r0, r3
 8003496:	3708      	adds	r7, #8
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f008 faed 	bl	800ba88 <USB_ResetPort>
 80034ae:	4603      	mov	r3, r0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3708      	adds	r7, #8
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034b8:	b480      	push	{r7}
 80034ba:	b083      	sub	sp, #12
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
 80034c0:	460b      	mov	r3, r1
 80034c2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80034c4:	78fa      	ldrb	r2, [r7, #3]
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	00db      	lsls	r3, r3, #3
 80034d0:	440b      	add	r3, r1
 80034d2:	335c      	adds	r3, #92	; 0x5c
 80034d4:	781b      	ldrb	r3, [r3, #0]
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b083      	sub	sp, #12
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	460b      	mov	r3, r1
 80034ec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80034ee:	78fa      	ldrb	r2, [r7, #3]
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	4413      	add	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	440b      	add	r3, r1
 80034fc:	334c      	adds	r3, #76	; 0x4c
 80034fe:	681b      	ldr	r3, [r3, #0]
}
 8003500:	4618      	mov	r0, r3
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4618      	mov	r0, r3
 800351a:	f008 fb2f 	bl	800bb7c <USB_GetCurrentFrame>
 800351e:	4603      	mov	r3, r0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b082      	sub	sp, #8
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4618      	mov	r0, r3
 8003536:	f008 fb0a 	bl	800bb4e <USB_GetHostSpeed>
 800353a:	4603      	mov	r3, r0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3708      	adds	r7, #8
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b086      	sub	sp, #24
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	460b      	mov	r3, r1
 800354e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003556:	697b      	ldr	r3, [r7, #20]
 8003558:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 800355a:	78fb      	ldrb	r3, [r7, #3]
 800355c:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	015a      	lsls	r2, r3, #5
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	4413      	add	r3, r2
 8003566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f003 0304 	and.w	r3, r3, #4
 8003570:	2b04      	cmp	r3, #4
 8003572:	d119      	bne.n	80035a8 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	015a      	lsls	r2, r3, #5
 8003578:	693b      	ldr	r3, [r7, #16]
 800357a:	4413      	add	r3, r2
 800357c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003580:	461a      	mov	r2, r3
 8003582:	2304      	movs	r3, #4
 8003584:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	015a      	lsls	r2, r3, #5
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	4413      	add	r3, r2
 800358e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	0151      	lsls	r1, r2, #5
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	440a      	add	r2, r1
 800359c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035a0:	f043 0302 	orr.w	r3, r3, #2
 80035a4:	60d3      	str	r3, [r2, #12]
 80035a6:	e095      	b.n	80036d4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	015a      	lsls	r2, r3, #5
 80035ac:	693b      	ldr	r3, [r7, #16]
 80035ae:	4413      	add	r3, r2
 80035b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f003 0320 	and.w	r3, r3, #32
 80035ba:	2b20      	cmp	r3, #32
 80035bc:	d109      	bne.n	80035d2 <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	015a      	lsls	r2, r3, #5
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4413      	add	r3, r2
 80035c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ca:	461a      	mov	r2, r3
 80035cc:	2320      	movs	r3, #32
 80035ce:	6093      	str	r3, [r2, #8]
 80035d0:	e080      	b.n	80036d4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	015a      	lsls	r2, r3, #5
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	4413      	add	r3, r2
 80035da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	f003 0308 	and.w	r3, r3, #8
 80035e4:	2b08      	cmp	r3, #8
 80035e6:	d134      	bne.n	8003652 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	015a      	lsls	r2, r3, #5
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	4413      	add	r3, r2
 80035f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f4:	68db      	ldr	r3, [r3, #12]
 80035f6:	68fa      	ldr	r2, [r7, #12]
 80035f8:	0151      	lsls	r1, r2, #5
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	440a      	add	r2, r1
 80035fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003602:	f043 0302 	orr.w	r3, r3, #2
 8003606:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003608:	6879      	ldr	r1, [r7, #4]
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	440b      	add	r3, r1
 8003616:	335d      	adds	r3, #93	; 0x5d
 8003618:	2205      	movs	r2, #5
 800361a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4413      	add	r3, r2
 8003624:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003628:	461a      	mov	r2, r3
 800362a:	2310      	movs	r3, #16
 800362c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	015a      	lsls	r2, r3, #5
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	4413      	add	r3, r2
 8003636:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800363a:	461a      	mov	r2, r3
 800363c:	2308      	movs	r3, #8
 800363e:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	68fa      	ldr	r2, [r7, #12]
 8003646:	b2d2      	uxtb	r2, r2
 8003648:	4611      	mov	r1, r2
 800364a:	4618      	mov	r0, r3
 800364c:	f008 fd05 	bl	800c05a <USB_HC_Halt>
 8003650:	e040      	b.n	80036d4 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	015a      	lsls	r2, r3, #5
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	4413      	add	r3, r2
 800365a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003668:	d134      	bne.n	80036d4 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	015a      	lsls	r2, r3, #5
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	4413      	add	r3, r2
 8003672:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	0151      	lsls	r1, r2, #5
 800367c:	693a      	ldr	r2, [r7, #16]
 800367e:	440a      	add	r2, r1
 8003680:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003684:	f043 0302 	orr.w	r3, r3, #2
 8003688:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	4611      	mov	r1, r2
 8003694:	4618      	mov	r0, r3
 8003696:	f008 fce0 	bl	800c05a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	015a      	lsls	r2, r3, #5
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	4413      	add	r3, r2
 80036a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a6:	461a      	mov	r2, r3
 80036a8:	2310      	movs	r3, #16
 80036aa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	68fa      	ldr	r2, [r7, #12]
 80036b0:	4613      	mov	r3, r2
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	4413      	add	r3, r2
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	440b      	add	r3, r1
 80036ba:	335d      	adds	r3, #93	; 0x5d
 80036bc:	2208      	movs	r2, #8
 80036be:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	015a      	lsls	r2, r3, #5
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	4413      	add	r3, r2
 80036c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036cc:	461a      	mov	r2, r3
 80036ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036d2:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	015a      	lsls	r2, r3, #5
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	4413      	add	r3, r2
 80036dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036ea:	d122      	bne.n	8003732 <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	0151      	lsls	r1, r2, #5
 80036fe:	693a      	ldr	r2, [r7, #16]
 8003700:	440a      	add	r2, r1
 8003702:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003706:	f043 0302 	orr.w	r3, r3, #2
 800370a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	4611      	mov	r1, r2
 8003716:	4618      	mov	r0, r3
 8003718:	f008 fc9f 	bl	800c05a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	015a      	lsls	r2, r3, #5
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	4413      	add	r3, r2
 8003724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003728:	461a      	mov	r2, r3
 800372a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800372e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003730:	e29b      	b.n	8003c6a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	4413      	add	r3, r2
 800373a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b01      	cmp	r3, #1
 8003746:	f040 80c1 	bne.w	80038cc <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d01b      	beq.n	800378a <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	4613      	mov	r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	4413      	add	r3, r2
 800375c:	00db      	lsls	r3, r3, #3
 800375e:	440b      	add	r3, r1
 8003760:	3348      	adds	r3, #72	; 0x48
 8003762:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	0159      	lsls	r1, r3, #5
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	440b      	add	r3, r1
 800376c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003770:	691b      	ldr	r3, [r3, #16]
 8003772:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003776:	1ad1      	subs	r1, r2, r3
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	68fa      	ldr	r2, [r7, #12]
 800377c:	4613      	mov	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	00db      	lsls	r3, r3, #3
 8003784:	4403      	add	r3, r0
 8003786:	334c      	adds	r3, #76	; 0x4c
 8003788:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4613      	mov	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	00db      	lsls	r3, r3, #3
 8003796:	440b      	add	r3, r1
 8003798:	335d      	adds	r3, #93	; 0x5d
 800379a:	2201      	movs	r2, #1
 800379c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800379e:	6879      	ldr	r1, [r7, #4]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	4613      	mov	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	440b      	add	r3, r1
 80037ac:	3358      	adds	r3, #88	; 0x58
 80037ae:	2200      	movs	r2, #0
 80037b0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	015a      	lsls	r2, r3, #5
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	4413      	add	r3, r2
 80037ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037be:	461a      	mov	r2, r3
 80037c0:	2301      	movs	r3, #1
 80037c2:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4613      	mov	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	00db      	lsls	r3, r3, #3
 80037d0:	440b      	add	r3, r1
 80037d2:	333f      	adds	r3, #63	; 0x3f
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d00a      	beq.n	80037f0 <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	68fa      	ldr	r2, [r7, #12]
 80037de:	4613      	mov	r3, r2
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	4413      	add	r3, r2
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	440b      	add	r3, r1
 80037e8:	333f      	adds	r3, #63	; 0x3f
 80037ea:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d121      	bne.n	8003834 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037fc:	68db      	ldr	r3, [r3, #12]
 80037fe:	68fa      	ldr	r2, [r7, #12]
 8003800:	0151      	lsls	r1, r2, #5
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	440a      	add	r2, r1
 8003806:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800380a:	f043 0302 	orr.w	r3, r3, #2
 800380e:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	b2d2      	uxtb	r2, r2
 8003818:	4611      	mov	r1, r2
 800381a:	4618      	mov	r0, r3
 800381c:	f008 fc1d 	bl	800c05a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	015a      	lsls	r2, r3, #5
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	4413      	add	r3, r2
 8003828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800382c:	461a      	mov	r2, r3
 800382e:	2310      	movs	r3, #16
 8003830:	6093      	str	r3, [r2, #8]
 8003832:	e034      	b.n	800389e <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	68fa      	ldr	r2, [r7, #12]
 8003838:	4613      	mov	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	440b      	add	r3, r1
 8003842:	333f      	adds	r3, #63	; 0x3f
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	2b03      	cmp	r3, #3
 8003848:	d129      	bne.n	800389e <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	015a      	lsls	r2, r3, #5
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	4413      	add	r3, r2
 8003852:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	0151      	lsls	r1, r2, #5
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	440a      	add	r2, r1
 8003860:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003864:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003868:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800386a:	6879      	ldr	r1, [r7, #4]
 800386c:	68fa      	ldr	r2, [r7, #12]
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	00db      	lsls	r3, r3, #3
 8003876:	440b      	add	r3, r1
 8003878:	335c      	adds	r3, #92	; 0x5c
 800387a:	2201      	movs	r2, #1
 800387c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	b2d8      	uxtb	r0, r3
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	68fa      	ldr	r2, [r7, #12]
 8003886:	4613      	mov	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	4413      	add	r3, r2
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	440b      	add	r3, r1
 8003890:	335c      	adds	r3, #92	; 0x5c
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	461a      	mov	r2, r3
 8003896:	4601      	mov	r1, r0
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f016 f947 	bl	8019b2c <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800389e:	6879      	ldr	r1, [r7, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	4613      	mov	r3, r2
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	4413      	add	r3, r2
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	440b      	add	r3, r1
 80038ac:	3350      	adds	r3, #80	; 0x50
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	f083 0301 	eor.w	r3, r3, #1
 80038b4:	b2d8      	uxtb	r0, r3
 80038b6:	6879      	ldr	r1, [r7, #4]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	4613      	mov	r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	4413      	add	r3, r2
 80038c0:	00db      	lsls	r3, r3, #3
 80038c2:	440b      	add	r3, r1
 80038c4:	3350      	adds	r3, #80	; 0x50
 80038c6:	4602      	mov	r2, r0
 80038c8:	701a      	strb	r2, [r3, #0]
}
 80038ca:	e1ce      	b.n	8003c6a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f003 0302 	and.w	r3, r3, #2
 80038de:	2b02      	cmp	r3, #2
 80038e0:	f040 80f1 	bne.w	8003ac6 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	015a      	lsls	r2, r3, #5
 80038e8:	693b      	ldr	r3, [r7, #16]
 80038ea:	4413      	add	r3, r2
 80038ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	0151      	lsls	r1, r2, #5
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	440a      	add	r2, r1
 80038fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038fe:	f023 0302 	bic.w	r3, r3, #2
 8003902:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003904:	6879      	ldr	r1, [r7, #4]
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	4613      	mov	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4413      	add	r3, r2
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	440b      	add	r3, r1
 8003912:	335d      	adds	r3, #93	; 0x5d
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d10a      	bne.n	8003930 <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 800391a:	6879      	ldr	r1, [r7, #4]
 800391c:	68fa      	ldr	r2, [r7, #12]
 800391e:	4613      	mov	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	4413      	add	r3, r2
 8003924:	00db      	lsls	r3, r3, #3
 8003926:	440b      	add	r3, r1
 8003928:	335c      	adds	r3, #92	; 0x5c
 800392a:	2201      	movs	r2, #1
 800392c:	701a      	strb	r2, [r3, #0]
 800392e:	e0b0      	b.n	8003a92 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	68fa      	ldr	r2, [r7, #12]
 8003934:	4613      	mov	r3, r2
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	4413      	add	r3, r2
 800393a:	00db      	lsls	r3, r3, #3
 800393c:	440b      	add	r3, r1
 800393e:	335d      	adds	r3, #93	; 0x5d
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	2b05      	cmp	r3, #5
 8003944:	d10a      	bne.n	800395c <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	4613      	mov	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	440b      	add	r3, r1
 8003954:	335c      	adds	r3, #92	; 0x5c
 8003956:	2205      	movs	r2, #5
 8003958:	701a      	strb	r2, [r3, #0]
 800395a:	e09a      	b.n	8003a92 <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800395c:	6879      	ldr	r1, [r7, #4]
 800395e:	68fa      	ldr	r2, [r7, #12]
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	00db      	lsls	r3, r3, #3
 8003968:	440b      	add	r3, r1
 800396a:	335d      	adds	r3, #93	; 0x5d
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b06      	cmp	r3, #6
 8003970:	d00a      	beq.n	8003988 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	4613      	mov	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	4413      	add	r3, r2
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	440b      	add	r3, r1
 8003980:	335d      	adds	r3, #93	; 0x5d
 8003982:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003984:	2b08      	cmp	r3, #8
 8003986:	d156      	bne.n	8003a36 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	4613      	mov	r3, r2
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	4413      	add	r3, r2
 8003992:	00db      	lsls	r3, r3, #3
 8003994:	440b      	add	r3, r1
 8003996:	3358      	adds	r3, #88	; 0x58
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	1c59      	adds	r1, r3, #1
 800399c:	6878      	ldr	r0, [r7, #4]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	4613      	mov	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4413      	add	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	4403      	add	r3, r0
 80039aa:	3358      	adds	r3, #88	; 0x58
 80039ac:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80039ae:	6879      	ldr	r1, [r7, #4]
 80039b0:	68fa      	ldr	r2, [r7, #12]
 80039b2:	4613      	mov	r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	4413      	add	r3, r2
 80039b8:	00db      	lsls	r3, r3, #3
 80039ba:	440b      	add	r3, r1
 80039bc:	3358      	adds	r3, #88	; 0x58
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2b03      	cmp	r3, #3
 80039c2:	d914      	bls.n	80039ee <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80039c4:	6879      	ldr	r1, [r7, #4]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	4613      	mov	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	4413      	add	r3, r2
 80039ce:	00db      	lsls	r3, r3, #3
 80039d0:	440b      	add	r3, r1
 80039d2:	3358      	adds	r3, #88	; 0x58
 80039d4:	2200      	movs	r2, #0
 80039d6:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	4613      	mov	r3, r2
 80039de:	009b      	lsls	r3, r3, #2
 80039e0:	4413      	add	r3, r2
 80039e2:	00db      	lsls	r3, r3, #3
 80039e4:	440b      	add	r3, r1
 80039e6:	335c      	adds	r3, #92	; 0x5c
 80039e8:	2204      	movs	r2, #4
 80039ea:	701a      	strb	r2, [r3, #0]
 80039ec:	e009      	b.n	8003a02 <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	68fa      	ldr	r2, [r7, #12]
 80039f2:	4613      	mov	r3, r2
 80039f4:	009b      	lsls	r3, r3, #2
 80039f6:	4413      	add	r3, r2
 80039f8:	00db      	lsls	r3, r3, #3
 80039fa:	440b      	add	r3, r1
 80039fc:	335c      	adds	r3, #92	; 0x5c
 80039fe:	2202      	movs	r2, #2
 8003a00:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a18:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a20:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2e:	461a      	mov	r2, r3
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	6013      	str	r3, [r2, #0]
 8003a34:	e02d      	b.n	8003a92 <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	4413      	add	r3, r2
 8003a40:	00db      	lsls	r3, r3, #3
 8003a42:	440b      	add	r3, r1
 8003a44:	335d      	adds	r3, #93	; 0x5d
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d122      	bne.n	8003a92 <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003a4c:	6879      	ldr	r1, [r7, #4]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	4613      	mov	r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	4413      	add	r3, r2
 8003a56:	00db      	lsls	r3, r3, #3
 8003a58:	440b      	add	r3, r1
 8003a5a:	335c      	adds	r3, #92	; 0x5c
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	015a      	lsls	r2, r3, #5
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	4413      	add	r3, r2
 8003a68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a76:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a7e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	015a      	lsls	r2, r3, #5
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	4413      	add	r3, r2
 8003a88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a8c:	461a      	mov	r2, r3
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	015a      	lsls	r2, r3, #5
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	4413      	add	r3, r2
 8003a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	b2d8      	uxtb	r0, r3
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	4613      	mov	r3, r2
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	4413      	add	r3, r2
 8003ab2:	00db      	lsls	r3, r3, #3
 8003ab4:	440b      	add	r3, r1
 8003ab6:	335c      	adds	r3, #92	; 0x5c
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	461a      	mov	r2, r3
 8003abc:	4601      	mov	r1, r0
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f016 f834 	bl	8019b2c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003ac4:	e0d1      	b.n	8003c6a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	015a      	lsls	r2, r3, #5
 8003aca:	693b      	ldr	r3, [r7, #16]
 8003acc:	4413      	add	r3, r2
 8003ace:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad8:	2b80      	cmp	r3, #128	; 0x80
 8003ada:	d13e      	bne.n	8003b5a <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	0151      	lsls	r1, r2, #5
 8003aee:	693a      	ldr	r2, [r7, #16]
 8003af0:	440a      	add	r2, r1
 8003af2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003af6:	f043 0302 	orr.w	r3, r3, #2
 8003afa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003afc:	6879      	ldr	r1, [r7, #4]
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	4613      	mov	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4413      	add	r3, r2
 8003b06:	00db      	lsls	r3, r3, #3
 8003b08:	440b      	add	r3, r1
 8003b0a:	3358      	adds	r3, #88	; 0x58
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	1c59      	adds	r1, r3, #1
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	00db      	lsls	r3, r3, #3
 8003b1c:	4403      	add	r3, r0
 8003b1e:	3358      	adds	r3, #88	; 0x58
 8003b20:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003b22:	6879      	ldr	r1, [r7, #4]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	4613      	mov	r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	4413      	add	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	440b      	add	r3, r1
 8003b30:	335d      	adds	r3, #93	; 0x5d
 8003b32:	2206      	movs	r2, #6
 8003b34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	4611      	mov	r1, r2
 8003b40:	4618      	mov	r0, r3
 8003b42:	f008 fa8a 	bl	800c05a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	015a      	lsls	r2, r3, #5
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	4413      	add	r3, r2
 8003b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b52:	461a      	mov	r2, r3
 8003b54:	2380      	movs	r3, #128	; 0x80
 8003b56:	6093      	str	r3, [r2, #8]
}
 8003b58:	e087      	b.n	8003c6a <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	015a      	lsls	r2, r3, #5
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	4413      	add	r3, r2
 8003b62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f003 0310 	and.w	r3, r3, #16
 8003b6c:	2b10      	cmp	r3, #16
 8003b6e:	d17c      	bne.n	8003c6a <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	68fa      	ldr	r2, [r7, #12]
 8003b74:	4613      	mov	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	4413      	add	r3, r2
 8003b7a:	00db      	lsls	r3, r3, #3
 8003b7c:	440b      	add	r3, r1
 8003b7e:	333f      	adds	r3, #63	; 0x3f
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2b03      	cmp	r3, #3
 8003b84:	d122      	bne.n	8003bcc <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003b86:	6879      	ldr	r1, [r7, #4]
 8003b88:	68fa      	ldr	r2, [r7, #12]
 8003b8a:	4613      	mov	r3, r2
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4413      	add	r3, r2
 8003b90:	00db      	lsls	r3, r3, #3
 8003b92:	440b      	add	r3, r1
 8003b94:	3358      	adds	r3, #88	; 0x58
 8003b96:	2200      	movs	r2, #0
 8003b98:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	015a      	lsls	r2, r3, #5
 8003b9e:	693b      	ldr	r3, [r7, #16]
 8003ba0:	4413      	add	r3, r2
 8003ba2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	0151      	lsls	r1, r2, #5
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	440a      	add	r2, r1
 8003bb0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bb4:	f043 0302 	orr.w	r3, r3, #2
 8003bb8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	b2d2      	uxtb	r2, r2
 8003bc2:	4611      	mov	r1, r2
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	f008 fa48 	bl	800c05a <USB_HC_Halt>
 8003bca:	e045      	b.n	8003c58 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003bcc:	6879      	ldr	r1, [r7, #4]
 8003bce:	68fa      	ldr	r2, [r7, #12]
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	440b      	add	r3, r1
 8003bda:	333f      	adds	r3, #63	; 0x3f
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00a      	beq.n	8003bf8 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	4613      	mov	r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	4413      	add	r3, r2
 8003bec:	00db      	lsls	r3, r3, #3
 8003bee:	440b      	add	r3, r1
 8003bf0:	333f      	adds	r3, #63	; 0x3f
 8003bf2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d12f      	bne.n	8003c58 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	68fa      	ldr	r2, [r7, #12]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	4413      	add	r3, r2
 8003c02:	00db      	lsls	r3, r3, #3
 8003c04:	440b      	add	r3, r1
 8003c06:	3358      	adds	r3, #88	; 0x58
 8003c08:	2200      	movs	r2, #0
 8003c0a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d121      	bne.n	8003c58 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	68fa      	ldr	r2, [r7, #12]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	009b      	lsls	r3, r3, #2
 8003c1c:	4413      	add	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	440b      	add	r3, r1
 8003c22:	335d      	adds	r3, #93	; 0x5d
 8003c24:	2203      	movs	r2, #3
 8003c26:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c34:	68db      	ldr	r3, [r3, #12]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	0151      	lsls	r1, r2, #5
 8003c3a:	693a      	ldr	r2, [r7, #16]
 8003c3c:	440a      	add	r2, r1
 8003c3e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c42:	f043 0302 	orr.w	r3, r3, #2
 8003c46:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	4611      	mov	r1, r2
 8003c52:	4618      	mov	r0, r3
 8003c54:	f008 fa01 	bl	800c05a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c64:	461a      	mov	r2, r3
 8003c66:	2310      	movs	r3, #16
 8003c68:	6093      	str	r3, [r2, #8]
}
 8003c6a:	bf00      	nop
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c72:	b580      	push	{r7, lr}
 8003c74:	b086      	sub	sp, #24
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	6078      	str	r0, [r7, #4]
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003c88:	78fb      	ldrb	r3, [r7, #3]
 8003c8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	f003 0304 	and.w	r3, r3, #4
 8003c9e:	2b04      	cmp	r3, #4
 8003ca0:	d119      	bne.n	8003cd6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cae:	461a      	mov	r2, r3
 8003cb0:	2304      	movs	r3, #4
 8003cb2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	015a      	lsls	r2, r3, #5
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	4413      	add	r3, r2
 8003cbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	0151      	lsls	r1, r2, #5
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	440a      	add	r2, r1
 8003cca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cce:	f043 0302 	orr.w	r3, r3, #2
 8003cd2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003cd4:	e33e      	b.n	8004354 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	015a      	lsls	r2, r3, #5
 8003cda:	693b      	ldr	r3, [r7, #16]
 8003cdc:	4413      	add	r3, r2
 8003cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f003 0320 	and.w	r3, r3, #32
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d141      	bne.n	8003d70 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	2320      	movs	r3, #32
 8003cfc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003cfe:	6879      	ldr	r1, [r7, #4]
 8003d00:	68fa      	ldr	r2, [r7, #12]
 8003d02:	4613      	mov	r3, r2
 8003d04:	009b      	lsls	r3, r3, #2
 8003d06:	4413      	add	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	440b      	add	r3, r1
 8003d0c:	333d      	adds	r3, #61	; 0x3d
 8003d0e:	781b      	ldrb	r3, [r3, #0]
 8003d10:	2b01      	cmp	r3, #1
 8003d12:	f040 831f 	bne.w	8004354 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	009b      	lsls	r3, r3, #2
 8003d1e:	4413      	add	r3, r2
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	440b      	add	r3, r1
 8003d24:	333d      	adds	r3, #61	; 0x3d
 8003d26:	2200      	movs	r2, #0
 8003d28:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d2a:	6879      	ldr	r1, [r7, #4]
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	009b      	lsls	r3, r3, #2
 8003d32:	4413      	add	r3, r2
 8003d34:	00db      	lsls	r3, r3, #3
 8003d36:	440b      	add	r3, r1
 8003d38:	335c      	adds	r3, #92	; 0x5c
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	68fa      	ldr	r2, [r7, #12]
 8003d4e:	0151      	lsls	r1, r2, #5
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	440a      	add	r2, r1
 8003d54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d58:	f043 0302 	orr.w	r3, r3, #2
 8003d5c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68fa      	ldr	r2, [r7, #12]
 8003d64:	b2d2      	uxtb	r2, r2
 8003d66:	4611      	mov	r1, r2
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f008 f976 	bl	800c05a <USB_HC_Halt>
}
 8003d6e:	e2f1      	b.n	8004354 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d7c:	689b      	ldr	r3, [r3, #8]
 8003d7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d82:	2b40      	cmp	r3, #64	; 0x40
 8003d84:	d13f      	bne.n	8003e06 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	4613      	mov	r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	4413      	add	r3, r2
 8003d90:	00db      	lsls	r3, r3, #3
 8003d92:	440b      	add	r3, r1
 8003d94:	335d      	adds	r3, #93	; 0x5d
 8003d96:	2204      	movs	r2, #4
 8003d98:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	68fa      	ldr	r2, [r7, #12]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	4413      	add	r3, r2
 8003da4:	00db      	lsls	r3, r3, #3
 8003da6:	440b      	add	r3, r1
 8003da8:	333d      	adds	r3, #61	; 0x3d
 8003daa:	2201      	movs	r2, #1
 8003dac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003dae:	6879      	ldr	r1, [r7, #4]
 8003db0:	68fa      	ldr	r2, [r7, #12]
 8003db2:	4613      	mov	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	4413      	add	r3, r2
 8003db8:	00db      	lsls	r3, r3, #3
 8003dba:	440b      	add	r3, r1
 8003dbc:	3358      	adds	r3, #88	; 0x58
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	0151      	lsls	r1, r2, #5
 8003dd4:	693a      	ldr	r2, [r7, #16]
 8003dd6:	440a      	add	r2, r1
 8003dd8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ddc:	f043 0302 	orr.w	r3, r3, #2
 8003de0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68fa      	ldr	r2, [r7, #12]
 8003de8:	b2d2      	uxtb	r2, r2
 8003dea:	4611      	mov	r1, r2
 8003dec:	4618      	mov	r0, r3
 8003dee:	f008 f934 	bl	800c05a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	015a      	lsls	r2, r3, #5
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	4413      	add	r3, r2
 8003dfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfe:	461a      	mov	r2, r3
 8003e00:	2340      	movs	r3, #64	; 0x40
 8003e02:	6093      	str	r3, [r2, #8]
}
 8003e04:	e2a6      	b.n	8004354 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e1c:	d122      	bne.n	8003e64 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	015a      	lsls	r2, r3, #5
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4413      	add	r3, r2
 8003e26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	0151      	lsls	r1, r2, #5
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	440a      	add	r2, r1
 8003e34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e38:	f043 0302 	orr.w	r3, r3, #2
 8003e3c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68fa      	ldr	r2, [r7, #12]
 8003e44:	b2d2      	uxtb	r2, r2
 8003e46:	4611      	mov	r1, r2
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f008 f906 	bl	800c05a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	015a      	lsls	r2, r3, #5
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	4413      	add	r3, r2
 8003e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e60:	6093      	str	r3, [r2, #8]
}
 8003e62:	e277      	b.n	8004354 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d135      	bne.n	8003ee6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	68fa      	ldr	r2, [r7, #12]
 8003e7e:	4613      	mov	r3, r2
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	4413      	add	r3, r2
 8003e84:	00db      	lsls	r3, r3, #3
 8003e86:	440b      	add	r3, r1
 8003e88:	3358      	adds	r3, #88	; 0x58
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	0151      	lsls	r1, r2, #5
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	440a      	add	r2, r1
 8003ea4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ea8:	f043 0302 	orr.w	r3, r3, #2
 8003eac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	68fa      	ldr	r2, [r7, #12]
 8003eb4:	b2d2      	uxtb	r2, r2
 8003eb6:	4611      	mov	r1, r2
 8003eb8:	4618      	mov	r0, r3
 8003eba:	f008 f8ce 	bl	800c05a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	015a      	lsls	r2, r3, #5
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eca:	461a      	mov	r2, r3
 8003ecc:	2301      	movs	r3, #1
 8003ece:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003ed0:	6879      	ldr	r1, [r7, #4]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	4613      	mov	r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4413      	add	r3, r2
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	440b      	add	r3, r1
 8003ede:	335d      	adds	r3, #93	; 0x5d
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	701a      	strb	r2, [r3, #0]
}
 8003ee4:	e236      	b.n	8004354 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	015a      	lsls	r2, r3, #5
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	4413      	add	r3, r2
 8003eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	f003 0308 	and.w	r3, r3, #8
 8003ef8:	2b08      	cmp	r3, #8
 8003efa:	d12b      	bne.n	8003f54 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f08:	461a      	mov	r2, r3
 8003f0a:	2308      	movs	r3, #8
 8003f0c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f1a:	68db      	ldr	r3, [r3, #12]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	0151      	lsls	r1, r2, #5
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	440a      	add	r2, r1
 8003f24:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f28:	f043 0302 	orr.w	r3, r3, #2
 8003f2c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	4611      	mov	r1, r2
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f008 f88e 	bl	800c05a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003f3e:	6879      	ldr	r1, [r7, #4]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	4613      	mov	r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	440b      	add	r3, r1
 8003f4c:	335d      	adds	r3, #93	; 0x5d
 8003f4e:	2205      	movs	r2, #5
 8003f50:	701a      	strb	r2, [r3, #0]
}
 8003f52:	e1ff      	b.n	8004354 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	015a      	lsls	r2, r3, #5
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	4413      	add	r3, r2
 8003f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 0310 	and.w	r3, r3, #16
 8003f66:	2b10      	cmp	r3, #16
 8003f68:	d155      	bne.n	8004016 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f6a:	6879      	ldr	r1, [r7, #4]
 8003f6c:	68fa      	ldr	r2, [r7, #12]
 8003f6e:	4613      	mov	r3, r2
 8003f70:	009b      	lsls	r3, r3, #2
 8003f72:	4413      	add	r3, r2
 8003f74:	00db      	lsls	r3, r3, #3
 8003f76:	440b      	add	r3, r1
 8003f78:	3358      	adds	r3, #88	; 0x58
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	4613      	mov	r3, r2
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	4413      	add	r3, r2
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	440b      	add	r3, r1
 8003f8c:	335d      	adds	r3, #93	; 0x5d
 8003f8e:	2203      	movs	r2, #3
 8003f90:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003f92:	6879      	ldr	r1, [r7, #4]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	4613      	mov	r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	4413      	add	r3, r2
 8003f9c:	00db      	lsls	r3, r3, #3
 8003f9e:	440b      	add	r3, r1
 8003fa0:	333d      	adds	r3, #61	; 0x3d
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d114      	bne.n	8003fd2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003fa8:	6879      	ldr	r1, [r7, #4]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	4613      	mov	r3, r2
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	4413      	add	r3, r2
 8003fb2:	00db      	lsls	r3, r3, #3
 8003fb4:	440b      	add	r3, r1
 8003fb6:	333c      	adds	r3, #60	; 0x3c
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d109      	bne.n	8003fd2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003fbe:	6879      	ldr	r1, [r7, #4]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	4413      	add	r3, r2
 8003fc8:	00db      	lsls	r3, r3, #3
 8003fca:	440b      	add	r3, r1
 8003fcc:	333d      	adds	r3, #61	; 0x3d
 8003fce:	2201      	movs	r2, #1
 8003fd0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	015a      	lsls	r2, r3, #5
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	4413      	add	r3, r2
 8003fda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	68fa      	ldr	r2, [r7, #12]
 8003fe2:	0151      	lsls	r1, r2, #5
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	440a      	add	r2, r1
 8003fe8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fec:	f043 0302 	orr.w	r3, r3, #2
 8003ff0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	4611      	mov	r1, r2
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f008 f82c 	bl	800c05a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	015a      	lsls	r2, r3, #5
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	4413      	add	r3, r2
 800400a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400e:	461a      	mov	r2, r3
 8004010:	2310      	movs	r3, #16
 8004012:	6093      	str	r3, [r2, #8]
}
 8004014:	e19e      	b.n	8004354 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	015a      	lsls	r2, r3, #5
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	4413      	add	r3, r2
 800401e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004028:	2b80      	cmp	r3, #128	; 0x80
 800402a:	d12b      	bne.n	8004084 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	015a      	lsls	r2, r3, #5
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	4413      	add	r3, r2
 8004034:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	0151      	lsls	r1, r2, #5
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	440a      	add	r2, r1
 8004042:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004046:	f043 0302 	orr.w	r3, r3, #2
 800404a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	4611      	mov	r1, r2
 8004056:	4618      	mov	r0, r3
 8004058:	f007 ffff 	bl	800c05a <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 800405c:	6879      	ldr	r1, [r7, #4]
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	440b      	add	r3, r1
 800406a:	335d      	adds	r3, #93	; 0x5d
 800406c:	2206      	movs	r2, #6
 800406e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	4413      	add	r3, r2
 8004078:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800407c:	461a      	mov	r2, r3
 800407e:	2380      	movs	r3, #128	; 0x80
 8004080:	6093      	str	r3, [r2, #8]
}
 8004082:	e167      	b.n	8004354 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	4413      	add	r3, r2
 800408c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004096:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800409a:	d135      	bne.n	8004108 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a8:	68db      	ldr	r3, [r3, #12]
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	0151      	lsls	r1, r2, #5
 80040ae:	693a      	ldr	r2, [r7, #16]
 80040b0:	440a      	add	r2, r1
 80040b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040b6:	f043 0302 	orr.w	r3, r3, #2
 80040ba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68fa      	ldr	r2, [r7, #12]
 80040c2:	b2d2      	uxtb	r2, r2
 80040c4:	4611      	mov	r1, r2
 80040c6:	4618      	mov	r0, r3
 80040c8:	f007 ffc7 	bl	800c05a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d8:	461a      	mov	r2, r3
 80040da:	2310      	movs	r3, #16
 80040dc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	015a      	lsls	r2, r3, #5
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	4413      	add	r3, r2
 80040e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040ea:	461a      	mov	r2, r3
 80040ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80040f2:	6879      	ldr	r1, [r7, #4]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	00db      	lsls	r3, r3, #3
 80040fe:	440b      	add	r3, r1
 8004100:	335d      	adds	r3, #93	; 0x5d
 8004102:	2208      	movs	r2, #8
 8004104:	701a      	strb	r2, [r3, #0]
}
 8004106:	e125      	b.n	8004354 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	693b      	ldr	r3, [r7, #16]
 800410e:	4413      	add	r3, r2
 8004110:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b02      	cmp	r3, #2
 800411c:	f040 811a 	bne.w	8004354 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	015a      	lsls	r2, r3, #5
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	4413      	add	r3, r2
 8004128:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800412c:	68db      	ldr	r3, [r3, #12]
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	0151      	lsls	r1, r2, #5
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	440a      	add	r2, r1
 8004136:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800413a:	f023 0302 	bic.w	r3, r3, #2
 800413e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004140:	6879      	ldr	r1, [r7, #4]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	4613      	mov	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	4413      	add	r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	440b      	add	r3, r1
 800414e:	335d      	adds	r3, #93	; 0x5d
 8004150:	781b      	ldrb	r3, [r3, #0]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d137      	bne.n	80041c6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004156:	6879      	ldr	r1, [r7, #4]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	4613      	mov	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	4413      	add	r3, r2
 8004160:	00db      	lsls	r3, r3, #3
 8004162:	440b      	add	r3, r1
 8004164:	335c      	adds	r3, #92	; 0x5c
 8004166:	2201      	movs	r2, #1
 8004168:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	4613      	mov	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4413      	add	r3, r2
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	440b      	add	r3, r1
 8004178:	333f      	adds	r3, #63	; 0x3f
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b02      	cmp	r3, #2
 800417e:	d00b      	beq.n	8004198 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004180:	6879      	ldr	r1, [r7, #4]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	4613      	mov	r3, r2
 8004186:	009b      	lsls	r3, r3, #2
 8004188:	4413      	add	r3, r2
 800418a:	00db      	lsls	r3, r3, #3
 800418c:	440b      	add	r3, r1
 800418e:	333f      	adds	r3, #63	; 0x3f
 8004190:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004192:	2b03      	cmp	r3, #3
 8004194:	f040 80c5 	bne.w	8004322 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	68fa      	ldr	r2, [r7, #12]
 800419c:	4613      	mov	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	4413      	add	r3, r2
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	440b      	add	r3, r1
 80041a6:	3351      	adds	r3, #81	; 0x51
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	f083 0301 	eor.w	r3, r3, #1
 80041ae:	b2d8      	uxtb	r0, r3
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4613      	mov	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4413      	add	r3, r2
 80041ba:	00db      	lsls	r3, r3, #3
 80041bc:	440b      	add	r3, r1
 80041be:	3351      	adds	r3, #81	; 0x51
 80041c0:	4602      	mov	r2, r0
 80041c2:	701a      	strb	r2, [r3, #0]
 80041c4:	e0ad      	b.n	8004322 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80041c6:	6879      	ldr	r1, [r7, #4]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	4613      	mov	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	00db      	lsls	r3, r3, #3
 80041d2:	440b      	add	r3, r1
 80041d4:	335d      	adds	r3, #93	; 0x5d
 80041d6:	781b      	ldrb	r3, [r3, #0]
 80041d8:	2b03      	cmp	r3, #3
 80041da:	d10a      	bne.n	80041f2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80041dc:	6879      	ldr	r1, [r7, #4]
 80041de:	68fa      	ldr	r2, [r7, #12]
 80041e0:	4613      	mov	r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	4413      	add	r3, r2
 80041e6:	00db      	lsls	r3, r3, #3
 80041e8:	440b      	add	r3, r1
 80041ea:	335c      	adds	r3, #92	; 0x5c
 80041ec:	2202      	movs	r2, #2
 80041ee:	701a      	strb	r2, [r3, #0]
 80041f0:	e097      	b.n	8004322 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80041f2:	6879      	ldr	r1, [r7, #4]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	4613      	mov	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4413      	add	r3, r2
 80041fc:	00db      	lsls	r3, r3, #3
 80041fe:	440b      	add	r3, r1
 8004200:	335d      	adds	r3, #93	; 0x5d
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	2b04      	cmp	r3, #4
 8004206:	d10a      	bne.n	800421e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004208:	6879      	ldr	r1, [r7, #4]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	4613      	mov	r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	4413      	add	r3, r2
 8004212:	00db      	lsls	r3, r3, #3
 8004214:	440b      	add	r3, r1
 8004216:	335c      	adds	r3, #92	; 0x5c
 8004218:	2202      	movs	r2, #2
 800421a:	701a      	strb	r2, [r3, #0]
 800421c:	e081      	b.n	8004322 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800421e:	6879      	ldr	r1, [r7, #4]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4613      	mov	r3, r2
 8004224:	009b      	lsls	r3, r3, #2
 8004226:	4413      	add	r3, r2
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	440b      	add	r3, r1
 800422c:	335d      	adds	r3, #93	; 0x5d
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b05      	cmp	r3, #5
 8004232:	d10a      	bne.n	800424a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	4613      	mov	r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	4413      	add	r3, r2
 800423e:	00db      	lsls	r3, r3, #3
 8004240:	440b      	add	r3, r1
 8004242:	335c      	adds	r3, #92	; 0x5c
 8004244:	2205      	movs	r2, #5
 8004246:	701a      	strb	r2, [r3, #0]
 8004248:	e06b      	b.n	8004322 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800424a:	6879      	ldr	r1, [r7, #4]
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	4613      	mov	r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	4413      	add	r3, r2
 8004254:	00db      	lsls	r3, r3, #3
 8004256:	440b      	add	r3, r1
 8004258:	335d      	adds	r3, #93	; 0x5d
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b06      	cmp	r3, #6
 800425e:	d00a      	beq.n	8004276 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004260:	6879      	ldr	r1, [r7, #4]
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	00db      	lsls	r3, r3, #3
 800426c:	440b      	add	r3, r1
 800426e:	335d      	adds	r3, #93	; 0x5d
 8004270:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004272:	2b08      	cmp	r3, #8
 8004274:	d155      	bne.n	8004322 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4613      	mov	r3, r2
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4413      	add	r3, r2
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	440b      	add	r3, r1
 8004284:	3358      	adds	r3, #88	; 0x58
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	1c59      	adds	r1, r3, #1
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	68fa      	ldr	r2, [r7, #12]
 800428e:	4613      	mov	r3, r2
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4413      	add	r3, r2
 8004294:	00db      	lsls	r3, r3, #3
 8004296:	4403      	add	r3, r0
 8004298:	3358      	adds	r3, #88	; 0x58
 800429a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800429c:	6879      	ldr	r1, [r7, #4]
 800429e:	68fa      	ldr	r2, [r7, #12]
 80042a0:	4613      	mov	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	4413      	add	r3, r2
 80042a6:	00db      	lsls	r3, r3, #3
 80042a8:	440b      	add	r3, r1
 80042aa:	3358      	adds	r3, #88	; 0x58
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	2b03      	cmp	r3, #3
 80042b0:	d914      	bls.n	80042dc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80042b2:	6879      	ldr	r1, [r7, #4]
 80042b4:	68fa      	ldr	r2, [r7, #12]
 80042b6:	4613      	mov	r3, r2
 80042b8:	009b      	lsls	r3, r3, #2
 80042ba:	4413      	add	r3, r2
 80042bc:	00db      	lsls	r3, r3, #3
 80042be:	440b      	add	r3, r1
 80042c0:	3358      	adds	r3, #88	; 0x58
 80042c2:	2200      	movs	r2, #0
 80042c4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	68fa      	ldr	r2, [r7, #12]
 80042ca:	4613      	mov	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4413      	add	r3, r2
 80042d0:	00db      	lsls	r3, r3, #3
 80042d2:	440b      	add	r3, r1
 80042d4:	335c      	adds	r3, #92	; 0x5c
 80042d6:	2204      	movs	r2, #4
 80042d8:	701a      	strb	r2, [r3, #0]
 80042da:	e009      	b.n	80042f0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80042dc:	6879      	ldr	r1, [r7, #4]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	4613      	mov	r3, r2
 80042e2:	009b      	lsls	r3, r3, #2
 80042e4:	4413      	add	r3, r2
 80042e6:	00db      	lsls	r3, r3, #3
 80042e8:	440b      	add	r3, r1
 80042ea:	335c      	adds	r3, #92	; 0x5c
 80042ec:	2202      	movs	r2, #2
 80042ee:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	015a      	lsls	r2, r3, #5
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	4413      	add	r3, r2
 80042f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004306:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800430e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	015a      	lsls	r2, r3, #5
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	4413      	add	r3, r2
 8004318:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800431c:	461a      	mov	r2, r3
 800431e:	68bb      	ldr	r3, [r7, #8]
 8004320:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	015a      	lsls	r2, r3, #5
 8004326:	693b      	ldr	r3, [r7, #16]
 8004328:	4413      	add	r3, r2
 800432a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800432e:	461a      	mov	r2, r3
 8004330:	2302      	movs	r3, #2
 8004332:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	b2d8      	uxtb	r0, r3
 8004338:	6879      	ldr	r1, [r7, #4]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	4613      	mov	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	00db      	lsls	r3, r3, #3
 8004344:	440b      	add	r3, r1
 8004346:	335c      	adds	r3, #92	; 0x5c
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	4601      	mov	r1, r0
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f015 fbec 	bl	8019b2c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004354:	bf00      	nop
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08a      	sub	sp, #40	; 0x28
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800436a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800436c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6a1b      	ldr	r3, [r3, #32]
 8004374:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8004376:	69fb      	ldr	r3, [r7, #28]
 8004378:	f003 030f 	and.w	r3, r3, #15
 800437c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	0c5b      	lsrs	r3, r3, #17
 8004382:	f003 030f 	and.w	r3, r3, #15
 8004386:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	091b      	lsrs	r3, r3, #4
 800438c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004390:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004392:	697b      	ldr	r3, [r7, #20]
 8004394:	2b02      	cmp	r3, #2
 8004396:	d004      	beq.n	80043a2 <HCD_RXQLVL_IRQHandler+0x46>
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2b05      	cmp	r3, #5
 800439c:	f000 8082 	beq.w	80044a4 <HCD_RXQLVL_IRQHandler+0x148>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80043a0:	e083      	b.n	80044aa <HCD_RXQLVL_IRQHandler+0x14e>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d07f      	beq.n	80044a8 <HCD_RXQLVL_IRQHandler+0x14c>
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	4613      	mov	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	4413      	add	r3, r2
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	440b      	add	r3, r1
 80043b6:	3344      	adds	r3, #68	; 0x44
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d074      	beq.n	80044a8 <HCD_RXQLVL_IRQHandler+0x14c>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6818      	ldr	r0, [r3, #0]
 80043c2:	6879      	ldr	r1, [r7, #4]
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	4613      	mov	r3, r2
 80043c8:	009b      	lsls	r3, r3, #2
 80043ca:	4413      	add	r3, r2
 80043cc:	00db      	lsls	r3, r3, #3
 80043ce:	440b      	add	r3, r1
 80043d0:	3344      	adds	r3, #68	; 0x44
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	693a      	ldr	r2, [r7, #16]
 80043d6:	b292      	uxth	r2, r2
 80043d8:	4619      	mov	r1, r3
 80043da:	f007 f9ec 	bl	800b7b6 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80043de:	6879      	ldr	r1, [r7, #4]
 80043e0:	69ba      	ldr	r2, [r7, #24]
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	00db      	lsls	r3, r3, #3
 80043ea:	440b      	add	r3, r1
 80043ec:	3344      	adds	r3, #68	; 0x44
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	18d1      	adds	r1, r2, r3
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	4613      	mov	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	4413      	add	r3, r2
 80043fe:	00db      	lsls	r3, r3, #3
 8004400:	4403      	add	r3, r0
 8004402:	3344      	adds	r3, #68	; 0x44
 8004404:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004406:	6879      	ldr	r1, [r7, #4]
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	4613      	mov	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	4413      	add	r3, r2
 8004410:	00db      	lsls	r3, r3, #3
 8004412:	440b      	add	r3, r1
 8004414:	334c      	adds	r3, #76	; 0x4c
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	18d1      	adds	r1, r2, r3
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	4613      	mov	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	4403      	add	r3, r0
 800442a:	334c      	adds	r3, #76	; 0x4c
 800442c:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	015a      	lsls	r2, r3, #5
 8004432:	6a3b      	ldr	r3, [r7, #32]
 8004434:	4413      	add	r3, r2
 8004436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800443a:	691a      	ldr	r2, [r3, #16]
 800443c:	4b1d      	ldr	r3, [pc, #116]	; (80044b4 <HCD_RXQLVL_IRQHandler+0x158>)
 800443e:	4013      	ands	r3, r2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d031      	beq.n	80044a8 <HCD_RXQLVL_IRQHandler+0x14c>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	015a      	lsls	r2, r3, #5
 8004448:	6a3b      	ldr	r3, [r7, #32]
 800444a:	4413      	add	r3, r2
 800444c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800445a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004462:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004464:	69bb      	ldr	r3, [r7, #24]
 8004466:	015a      	lsls	r2, r3, #5
 8004468:	6a3b      	ldr	r3, [r7, #32]
 800446a:	4413      	add	r3, r2
 800446c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004470:	461a      	mov	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004476:	6879      	ldr	r1, [r7, #4]
 8004478:	69ba      	ldr	r2, [r7, #24]
 800447a:	4613      	mov	r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	4413      	add	r3, r2
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	440b      	add	r3, r1
 8004484:	3350      	adds	r3, #80	; 0x50
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	f083 0301 	eor.w	r3, r3, #1
 800448c:	b2d8      	uxtb	r0, r3
 800448e:	6879      	ldr	r1, [r7, #4]
 8004490:	69ba      	ldr	r2, [r7, #24]
 8004492:	4613      	mov	r3, r2
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4413      	add	r3, r2
 8004498:	00db      	lsls	r3, r3, #3
 800449a:	440b      	add	r3, r1
 800449c:	3350      	adds	r3, #80	; 0x50
 800449e:	4602      	mov	r2, r0
 80044a0:	701a      	strb	r2, [r3, #0]
      break;
 80044a2:	e001      	b.n	80044a8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80044a4:	bf00      	nop
 80044a6:	e000      	b.n	80044aa <HCD_RXQLVL_IRQHandler+0x14e>
      break;
 80044a8:	bf00      	nop
  }
}
 80044aa:	bf00      	nop
 80044ac:	3728      	adds	r7, #40	; 0x28
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	1ff80000 	.word	0x1ff80000

080044b8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80044e4:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d113      	bne.n	8004518 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d10a      	bne.n	8004510 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	699a      	ldr	r2, [r3, #24]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004508:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800450a:	6878      	ldr	r0, [r7, #4]
 800450c:	f015 faf2 	bl	8019af4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	f043 0302 	orr.w	r3, r3, #2
 8004516:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	2b08      	cmp	r3, #8
 8004520:	d147      	bne.n	80045b2 <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	f043 0308 	orr.w	r3, r3, #8
 8004528:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b04      	cmp	r3, #4
 8004532:	d129      	bne.n	8004588 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	699b      	ldr	r3, [r3, #24]
 8004538:	2b02      	cmp	r3, #2
 800453a:	d113      	bne.n	8004564 <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004542:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004546:	d106      	bne.n	8004556 <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2102      	movs	r1, #2
 800454e:	4618      	mov	r0, r3
 8004550:	f007 fa60 	bl	800ba14 <USB_InitFSLSPClkSel>
 8004554:	e011      	b.n	800457a <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	2101      	movs	r1, #1
 800455c:	4618      	mov	r0, r3
 800455e:	f007 fa59 	bl	800ba14 <USB_InitFSLSPClkSel>
 8004562:	e00a      	b.n	800457a <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	2b03      	cmp	r3, #3
 800456a:	d106      	bne.n	800457a <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 800456c:	693b      	ldr	r3, [r7, #16]
 800456e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004572:	461a      	mov	r2, r3
 8004574:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004578:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800457a:	6878      	ldr	r0, [r7, #4]
 800457c:	f015 fae8 	bl	8019b50 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f015 fab7 	bl	8019af4 <HAL_HCD_Connect_Callback>
 8004586:	e014      	b.n	80045b2 <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004588:	6878      	ldr	r0, [r7, #4]
 800458a:	f015 faef 	bl	8019b6c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	693a      	ldr	r2, [r7, #16]
 8004598:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800459c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80045a0:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	699a      	ldr	r2, [r3, #24]
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80045b0:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f003 0320 	and.w	r3, r3, #32
 80045b8:	2b20      	cmp	r3, #32
 80045ba:	d103      	bne.n	80045c4 <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f043 0320 	orr.w	r3, r3, #32
 80045c2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80045ca:	461a      	mov	r2, r3
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	6013      	str	r3, [r2, #0]
}
 80045d0:	bf00      	nop
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e07f      	b.n	80046ea <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d106      	bne.n	8004604 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f014 fbb4 	bl	8018d6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2224      	movs	r2, #36	; 0x24
 8004608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	681a      	ldr	r2, [r3, #0]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 0201 	bic.w	r2, r2, #1
 800461a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004628:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004638:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d107      	bne.n	8004652 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	689a      	ldr	r2, [r3, #8]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800464e:	609a      	str	r2, [r3, #8]
 8004650:	e006      	b.n	8004660 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	689a      	ldr	r2, [r3, #8]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800465e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	2b02      	cmp	r3, #2
 8004666:	d104      	bne.n	8004672 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004670:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	6859      	ldr	r1, [r3, #4]
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	4b1d      	ldr	r3, [pc, #116]	; (80046f4 <HAL_I2C_Init+0x11c>)
 800467e:	430b      	orrs	r3, r1
 8004680:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	68da      	ldr	r2, [r3, #12]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004690:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	691a      	ldr	r2, [r3, #16]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	695b      	ldr	r3, [r3, #20]
 800469a:	ea42 0103 	orr.w	r1, r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	699b      	ldr	r3, [r3, #24]
 80046a2:	021a      	lsls	r2, r3, #8
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	69d9      	ldr	r1, [r3, #28]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a1a      	ldr	r2, [r3, #32]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	430a      	orrs	r2, r1
 80046ba:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f042 0201 	orr.w	r2, r2, #1
 80046ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2220      	movs	r2, #32
 80046d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80046e8:	2300      	movs	r3, #0
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3708      	adds	r7, #8
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	02008000 	.word	0x02008000

080046f8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e021      	b.n	800474e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2224      	movs	r2, #36	; 0x24
 800470e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f022 0201 	bic.w	r2, r2, #1
 8004720:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f014 fb9a 	bl	8018e5c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2200      	movs	r2, #0
 8004748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800474c:	2300      	movs	r3, #0
}
 800474e:	4618      	mov	r0, r3
 8004750:	3708      	adds	r7, #8
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
	...

08004758 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b088      	sub	sp, #32
 800475c:	af02      	add	r7, sp, #8
 800475e:	60f8      	str	r0, [r7, #12]
 8004760:	4608      	mov	r0, r1
 8004762:	4611      	mov	r1, r2
 8004764:	461a      	mov	r2, r3
 8004766:	4603      	mov	r3, r0
 8004768:	817b      	strh	r3, [r7, #10]
 800476a:	460b      	mov	r3, r1
 800476c:	813b      	strh	r3, [r7, #8]
 800476e:	4613      	mov	r3, r2
 8004770:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2b20      	cmp	r3, #32
 800477c:	f040 80f9 	bne.w	8004972 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004780:	6a3b      	ldr	r3, [r7, #32]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d002      	beq.n	800478c <HAL_I2C_Mem_Write+0x34>
 8004786:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004788:	2b00      	cmp	r3, #0
 800478a:	d105      	bne.n	8004798 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004792:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e0ed      	b.n	8004974 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d101      	bne.n	80047a6 <HAL_I2C_Mem_Write+0x4e>
 80047a2:	2302      	movs	r3, #2
 80047a4:	e0e6      	b.n	8004974 <HAL_I2C_Mem_Write+0x21c>
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80047ae:	f7fc f9bf 	bl	8000b30 <HAL_GetTick>
 80047b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	2319      	movs	r3, #25
 80047ba:	2201      	movs	r2, #1
 80047bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047c0:	68f8      	ldr	r0, [r7, #12]
 80047c2:	f000 fad1 	bl	8004d68 <I2C_WaitOnFlagUntilTimeout>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d001      	beq.n	80047d0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e0d1      	b.n	8004974 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2221      	movs	r2, #33	; 0x21
 80047d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2240      	movs	r2, #64	; 0x40
 80047dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6a3a      	ldr	r2, [r7, #32]
 80047ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80047f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047f8:	88f8      	ldrh	r0, [r7, #6]
 80047fa:	893a      	ldrh	r2, [r7, #8]
 80047fc:	8979      	ldrh	r1, [r7, #10]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	9301      	str	r3, [sp, #4]
 8004802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004804:	9300      	str	r3, [sp, #0]
 8004806:	4603      	mov	r3, r0
 8004808:	68f8      	ldr	r0, [r7, #12]
 800480a:	f000 f9e1 	bl	8004bd0 <I2C_RequestMemoryWrite>
 800480e:	4603      	mov	r3, r0
 8004810:	2b00      	cmp	r3, #0
 8004812:	d005      	beq.n	8004820 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e0a9      	b.n	8004974 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004824:	b29b      	uxth	r3, r3
 8004826:	2bff      	cmp	r3, #255	; 0xff
 8004828:	d90e      	bls.n	8004848 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	22ff      	movs	r2, #255	; 0xff
 800482e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004834:	b2da      	uxtb	r2, r3
 8004836:	8979      	ldrh	r1, [r7, #10]
 8004838:	2300      	movs	r3, #0
 800483a:	9300      	str	r3, [sp, #0]
 800483c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 fbb3 	bl	8004fac <I2C_TransferConfig>
 8004846:	e00f      	b.n	8004868 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484c:	b29a      	uxth	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004856:	b2da      	uxtb	r2, r3
 8004858:	8979      	ldrh	r1, [r7, #10]
 800485a:	2300      	movs	r3, #0
 800485c:	9300      	str	r3, [sp, #0]
 800485e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004862:	68f8      	ldr	r0, [r7, #12]
 8004864:	f000 fba2 	bl	8004fac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800486c:	68f8      	ldr	r0, [r7, #12]
 800486e:	f000 fabb 	bl	8004de8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d001      	beq.n	800487c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e07b      	b.n	8004974 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004880:	781a      	ldrb	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004896:	b29b      	uxth	r3, r3
 8004898:	3b01      	subs	r3, #1
 800489a:	b29a      	uxth	r2, r3
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048b0:	b29b      	uxth	r3, r3
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d034      	beq.n	8004920 <HAL_I2C_Mem_Write+0x1c8>
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d130      	bne.n	8004920 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c4:	2200      	movs	r2, #0
 80048c6:	2180      	movs	r1, #128	; 0x80
 80048c8:	68f8      	ldr	r0, [r7, #12]
 80048ca:	f000 fa4d 	bl	8004d68 <I2C_WaitOnFlagUntilTimeout>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d001      	beq.n	80048d8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80048d4:	2301      	movs	r3, #1
 80048d6:	e04d      	b.n	8004974 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2bff      	cmp	r3, #255	; 0xff
 80048e0:	d90e      	bls.n	8004900 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	22ff      	movs	r2, #255	; 0xff
 80048e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048ec:	b2da      	uxtb	r2, r3
 80048ee:	8979      	ldrh	r1, [r7, #10]
 80048f0:	2300      	movs	r3, #0
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f000 fb57 	bl	8004fac <I2C_TransferConfig>
 80048fe:	e00f      	b.n	8004920 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004904:	b29a      	uxth	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800490e:	b2da      	uxtb	r2, r3
 8004910:	8979      	ldrh	r1, [r7, #10]
 8004912:	2300      	movs	r3, #0
 8004914:	9300      	str	r3, [sp, #0]
 8004916:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800491a:	68f8      	ldr	r0, [r7, #12]
 800491c:	f000 fb46 	bl	8004fac <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004924:	b29b      	uxth	r3, r3
 8004926:	2b00      	cmp	r3, #0
 8004928:	d19e      	bne.n	8004868 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800492e:	68f8      	ldr	r0, [r7, #12]
 8004930:	f000 fa9a 	bl	8004e68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004934:	4603      	mov	r3, r0
 8004936:	2b00      	cmp	r3, #0
 8004938:	d001      	beq.n	800493e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800493a:	2301      	movs	r3, #1
 800493c:	e01a      	b.n	8004974 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2220      	movs	r2, #32
 8004944:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6859      	ldr	r1, [r3, #4]
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681a      	ldr	r2, [r3, #0]
 8004950:	4b0a      	ldr	r3, [pc, #40]	; (800497c <HAL_I2C_Mem_Write+0x224>)
 8004952:	400b      	ands	r3, r1
 8004954:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2220      	movs	r2, #32
 800495a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800496e:	2300      	movs	r3, #0
 8004970:	e000      	b.n	8004974 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8004972:	2302      	movs	r3, #2
  }
}
 8004974:	4618      	mov	r0, r3
 8004976:	3718      	adds	r7, #24
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	fe00e800 	.word	0xfe00e800

08004980 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b088      	sub	sp, #32
 8004984:	af02      	add	r7, sp, #8
 8004986:	60f8      	str	r0, [r7, #12]
 8004988:	4608      	mov	r0, r1
 800498a:	4611      	mov	r1, r2
 800498c:	461a      	mov	r2, r3
 800498e:	4603      	mov	r3, r0
 8004990:	817b      	strh	r3, [r7, #10]
 8004992:	460b      	mov	r3, r1
 8004994:	813b      	strh	r3, [r7, #8]
 8004996:	4613      	mov	r3, r2
 8004998:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049a0:	b2db      	uxtb	r3, r3
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	f040 80fd 	bne.w	8004ba2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a8:	6a3b      	ldr	r3, [r7, #32]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d002      	beq.n	80049b4 <HAL_I2C_Mem_Read+0x34>
 80049ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d105      	bne.n	80049c0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e0f1      	b.n	8004ba4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d101      	bne.n	80049ce <HAL_I2C_Mem_Read+0x4e>
 80049ca:	2302      	movs	r3, #2
 80049cc:	e0ea      	b.n	8004ba4 <HAL_I2C_Mem_Read+0x224>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049d6:	f7fc f8ab 	bl	8000b30 <HAL_GetTick>
 80049da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	9300      	str	r3, [sp, #0]
 80049e0:	2319      	movs	r3, #25
 80049e2:	2201      	movs	r2, #1
 80049e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049e8:	68f8      	ldr	r0, [r7, #12]
 80049ea:	f000 f9bd 	bl	8004d68 <I2C_WaitOnFlagUntilTimeout>
 80049ee:	4603      	mov	r3, r0
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d001      	beq.n	80049f8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	e0d5      	b.n	8004ba4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2222      	movs	r2, #34	; 0x22
 80049fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2240      	movs	r2, #64	; 0x40
 8004a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	6a3a      	ldr	r2, [r7, #32]
 8004a12:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a18:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a20:	88f8      	ldrh	r0, [r7, #6]
 8004a22:	893a      	ldrh	r2, [r7, #8]
 8004a24:	8979      	ldrh	r1, [r7, #10]
 8004a26:	697b      	ldr	r3, [r7, #20]
 8004a28:	9301      	str	r3, [sp, #4]
 8004a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	4603      	mov	r3, r0
 8004a30:	68f8      	ldr	r0, [r7, #12]
 8004a32:	f000 f921 	bl	8004c78 <I2C_RequestMemoryRead>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004a44:	2301      	movs	r3, #1
 8004a46:	e0ad      	b.n	8004ba4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4c:	b29b      	uxth	r3, r3
 8004a4e:	2bff      	cmp	r3, #255	; 0xff
 8004a50:	d90e      	bls.n	8004a70 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	22ff      	movs	r2, #255	; 0xff
 8004a56:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a5c:	b2da      	uxtb	r2, r3
 8004a5e:	8979      	ldrh	r1, [r7, #10]
 8004a60:	4b52      	ldr	r3, [pc, #328]	; (8004bac <HAL_I2C_Mem_Read+0x22c>)
 8004a62:	9300      	str	r3, [sp, #0]
 8004a64:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 fa9f 	bl	8004fac <I2C_TransferConfig>
 8004a6e:	e00f      	b.n	8004a90 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a7e:	b2da      	uxtb	r2, r3
 8004a80:	8979      	ldrh	r1, [r7, #10]
 8004a82:	4b4a      	ldr	r3, [pc, #296]	; (8004bac <HAL_I2C_Mem_Read+0x22c>)
 8004a84:	9300      	str	r3, [sp, #0]
 8004a86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 fa8e 	bl	8004fac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	9300      	str	r3, [sp, #0]
 8004a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a96:	2200      	movs	r2, #0
 8004a98:	2104      	movs	r1, #4
 8004a9a:	68f8      	ldr	r0, [r7, #12]
 8004a9c:	f000 f964 	bl	8004d68 <I2C_WaitOnFlagUntilTimeout>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d001      	beq.n	8004aaa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004aa6:	2301      	movs	r3, #1
 8004aa8:	e07c      	b.n	8004ba4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	b2d2      	uxtb	r2, r2
 8004ab6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac6:	3b01      	subs	r3, #1
 8004ac8:	b29a      	uxth	r2, r3
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ae0:	b29b      	uxth	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d034      	beq.n	8004b50 <HAL_I2C_Mem_Read+0x1d0>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d130      	bne.n	8004b50 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	9300      	str	r3, [sp, #0]
 8004af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af4:	2200      	movs	r2, #0
 8004af6:	2180      	movs	r1, #128	; 0x80
 8004af8:	68f8      	ldr	r0, [r7, #12]
 8004afa:	f000 f935 	bl	8004d68 <I2C_WaitOnFlagUntilTimeout>
 8004afe:	4603      	mov	r3, r0
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d001      	beq.n	8004b08 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004b04:	2301      	movs	r3, #1
 8004b06:	e04d      	b.n	8004ba4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b0c:	b29b      	uxth	r3, r3
 8004b0e:	2bff      	cmp	r3, #255	; 0xff
 8004b10:	d90e      	bls.n	8004b30 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	22ff      	movs	r2, #255	; 0xff
 8004b16:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	8979      	ldrh	r1, [r7, #10]
 8004b20:	2300      	movs	r3, #0
 8004b22:	9300      	str	r3, [sp, #0]
 8004b24:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 fa3f 	bl	8004fac <I2C_TransferConfig>
 8004b2e:	e00f      	b.n	8004b50 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b34:	b29a      	uxth	r2, r3
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b3e:	b2da      	uxtb	r2, r3
 8004b40:	8979      	ldrh	r1, [r7, #10]
 8004b42:	2300      	movs	r3, #0
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 fa2e 	bl	8004fac <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d19a      	bne.n	8004a90 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 f982 	bl	8004e68 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d001      	beq.n	8004b6e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	e01a      	b.n	8004ba4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2220      	movs	r2, #32
 8004b74:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	6859      	ldr	r1, [r3, #4]
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681a      	ldr	r2, [r3, #0]
 8004b80:	4b0b      	ldr	r3, [pc, #44]	; (8004bb0 <HAL_I2C_Mem_Read+0x230>)
 8004b82:	400b      	ands	r3, r1
 8004b84:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2220      	movs	r2, #32
 8004b8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	e000      	b.n	8004ba4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004ba2:	2302      	movs	r3, #2
  }
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}
 8004bac:	80002400 	.word	0x80002400
 8004bb0:	fe00e800 	.word	0xfe00e800

08004bb4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b083      	sub	sp, #12
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bc2:	b2db      	uxtb	r3, r3
}
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	370c      	adds	r7, #12
 8004bc8:	46bd      	mov	sp, r7
 8004bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bce:	4770      	bx	lr

08004bd0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b086      	sub	sp, #24
 8004bd4:	af02      	add	r7, sp, #8
 8004bd6:	60f8      	str	r0, [r7, #12]
 8004bd8:	4608      	mov	r0, r1
 8004bda:	4611      	mov	r1, r2
 8004bdc:	461a      	mov	r2, r3
 8004bde:	4603      	mov	r3, r0
 8004be0:	817b      	strh	r3, [r7, #10]
 8004be2:	460b      	mov	r3, r1
 8004be4:	813b      	strh	r3, [r7, #8]
 8004be6:	4613      	mov	r3, r2
 8004be8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004bea:	88fb      	ldrh	r3, [r7, #6]
 8004bec:	b2da      	uxtb	r2, r3
 8004bee:	8979      	ldrh	r1, [r7, #10]
 8004bf0:	4b20      	ldr	r3, [pc, #128]	; (8004c74 <I2C_RequestMemoryWrite+0xa4>)
 8004bf2:	9300      	str	r3, [sp, #0]
 8004bf4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bf8:	68f8      	ldr	r0, [r7, #12]
 8004bfa:	f000 f9d7 	bl	8004fac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bfe:	69fa      	ldr	r2, [r7, #28]
 8004c00:	69b9      	ldr	r1, [r7, #24]
 8004c02:	68f8      	ldr	r0, [r7, #12]
 8004c04:	f000 f8f0 	bl	8004de8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004c0e:	2301      	movs	r3, #1
 8004c10:	e02c      	b.n	8004c6c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c12:	88fb      	ldrh	r3, [r7, #6]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d105      	bne.n	8004c24 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c18:	893b      	ldrh	r3, [r7, #8]
 8004c1a:	b2da      	uxtb	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	629a      	str	r2, [r3, #40]	; 0x28
 8004c22:	e015      	b.n	8004c50 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c24:	893b      	ldrh	r3, [r7, #8]
 8004c26:	0a1b      	lsrs	r3, r3, #8
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	b2da      	uxtb	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c32:	69fa      	ldr	r2, [r7, #28]
 8004c34:	69b9      	ldr	r1, [r7, #24]
 8004c36:	68f8      	ldr	r0, [r7, #12]
 8004c38:	f000 f8d6 	bl	8004de8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d001      	beq.n	8004c46 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004c42:	2301      	movs	r3, #1
 8004c44:	e012      	b.n	8004c6c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c46:	893b      	ldrh	r3, [r7, #8]
 8004c48:	b2da      	uxtb	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	9300      	str	r3, [sp, #0]
 8004c54:	69bb      	ldr	r3, [r7, #24]
 8004c56:	2200      	movs	r2, #0
 8004c58:	2180      	movs	r1, #128	; 0x80
 8004c5a:	68f8      	ldr	r0, [r7, #12]
 8004c5c:	f000 f884 	bl	8004d68 <I2C_WaitOnFlagUntilTimeout>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e000      	b.n	8004c6c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004c6a:	2300      	movs	r3, #0
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	3710      	adds	r7, #16
 8004c70:	46bd      	mov	sp, r7
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	80002000 	.word	0x80002000

08004c78 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b086      	sub	sp, #24
 8004c7c:	af02      	add	r7, sp, #8
 8004c7e:	60f8      	str	r0, [r7, #12]
 8004c80:	4608      	mov	r0, r1
 8004c82:	4611      	mov	r1, r2
 8004c84:	461a      	mov	r2, r3
 8004c86:	4603      	mov	r3, r0
 8004c88:	817b      	strh	r3, [r7, #10]
 8004c8a:	460b      	mov	r3, r1
 8004c8c:	813b      	strh	r3, [r7, #8]
 8004c8e:	4613      	mov	r3, r2
 8004c90:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004c92:	88fb      	ldrh	r3, [r7, #6]
 8004c94:	b2da      	uxtb	r2, r3
 8004c96:	8979      	ldrh	r1, [r7, #10]
 8004c98:	4b20      	ldr	r3, [pc, #128]	; (8004d1c <I2C_RequestMemoryRead+0xa4>)
 8004c9a:	9300      	str	r3, [sp, #0]
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	68f8      	ldr	r0, [r7, #12]
 8004ca0:	f000 f984 	bl	8004fac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ca4:	69fa      	ldr	r2, [r7, #28]
 8004ca6:	69b9      	ldr	r1, [r7, #24]
 8004ca8:	68f8      	ldr	r0, [r7, #12]
 8004caa:	f000 f89d 	bl	8004de8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d001      	beq.n	8004cb8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004cb4:	2301      	movs	r3, #1
 8004cb6:	e02c      	b.n	8004d12 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cb8:	88fb      	ldrh	r3, [r7, #6]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d105      	bne.n	8004cca <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cbe:	893b      	ldrh	r3, [r7, #8]
 8004cc0:	b2da      	uxtb	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	629a      	str	r2, [r3, #40]	; 0x28
 8004cc8:	e015      	b.n	8004cf6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004cca:	893b      	ldrh	r3, [r7, #8]
 8004ccc:	0a1b      	lsrs	r3, r3, #8
 8004cce:	b29b      	uxth	r3, r3
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cd8:	69fa      	ldr	r2, [r7, #28]
 8004cda:	69b9      	ldr	r1, [r7, #24]
 8004cdc:	68f8      	ldr	r0, [r7, #12]
 8004cde:	f000 f883 	bl	8004de8 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d001      	beq.n	8004cec <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e012      	b.n	8004d12 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cec:	893b      	ldrh	r3, [r7, #8]
 8004cee:	b2da      	uxtb	r2, r3
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004cf6:	69fb      	ldr	r3, [r7, #28]
 8004cf8:	9300      	str	r3, [sp, #0]
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	2140      	movs	r1, #64	; 0x40
 8004d00:	68f8      	ldr	r0, [r7, #12]
 8004d02:	f000 f831 	bl	8004d68 <I2C_WaitOnFlagUntilTimeout>
 8004d06:	4603      	mov	r3, r0
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d001      	beq.n	8004d10 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e000      	b.n	8004d12 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	80002000 	.word	0x80002000

08004d20 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d20:	b480      	push	{r7}
 8004d22:	b083      	sub	sp, #12
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	f003 0302 	and.w	r3, r3, #2
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d103      	bne.n	8004d3e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b01      	cmp	r3, #1
 8004d4a:	d007      	beq.n	8004d5c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	699a      	ldr	r2, [r3, #24]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f042 0201 	orr.w	r2, r2, #1
 8004d5a:	619a      	str	r2, [r3, #24]
  }
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b084      	sub	sp, #16
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	603b      	str	r3, [r7, #0]
 8004d74:	4613      	mov	r3, r2
 8004d76:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d78:	e022      	b.n	8004dc0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d80:	d01e      	beq.n	8004dc0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d82:	f7fb fed5 	bl	8000b30 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d302      	bcc.n	8004d98 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d113      	bne.n	8004dc0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9c:	f043 0220 	orr.w	r2, r3, #32
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2220      	movs	r2, #32
 8004da8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e00f      	b.n	8004de0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699a      	ldr	r2, [r3, #24]
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	4013      	ands	r3, r2
 8004dca:	68ba      	ldr	r2, [r7, #8]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	bf0c      	ite	eq
 8004dd0:	2301      	moveq	r3, #1
 8004dd2:	2300      	movne	r3, #0
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	79fb      	ldrb	r3, [r7, #7]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d0cd      	beq.n	8004d7a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3710      	adds	r7, #16
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004df4:	e02c      	b.n	8004e50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	68b9      	ldr	r1, [r7, #8]
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f000 f870 	bl	8004ee0 <I2C_IsAcknowledgeFailed>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d001      	beq.n	8004e0a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	e02a      	b.n	8004e60 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e10:	d01e      	beq.n	8004e50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e12:	f7fb fe8d 	bl	8000b30 <HAL_GetTick>
 8004e16:	4602      	mov	r2, r0
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	1ad3      	subs	r3, r2, r3
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	429a      	cmp	r2, r3
 8004e20:	d302      	bcc.n	8004e28 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004e22:	68bb      	ldr	r3, [r7, #8]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d113      	bne.n	8004e50 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e2c:	f043 0220 	orr.w	r2, r3, #32
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2220      	movs	r2, #32
 8004e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e007      	b.n	8004e60 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	699b      	ldr	r3, [r3, #24]
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d1cb      	bne.n	8004df6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e5e:	2300      	movs	r3, #0
}
 8004e60:	4618      	mov	r0, r3
 8004e62:	3710      	adds	r7, #16
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}

08004e68 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	60f8      	str	r0, [r7, #12]
 8004e70:	60b9      	str	r1, [r7, #8]
 8004e72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e74:	e028      	b.n	8004ec8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e76:	687a      	ldr	r2, [r7, #4]
 8004e78:	68b9      	ldr	r1, [r7, #8]
 8004e7a:	68f8      	ldr	r0, [r7, #12]
 8004e7c:	f000 f830 	bl	8004ee0 <I2C_IsAcknowledgeFailed>
 8004e80:	4603      	mov	r3, r0
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d001      	beq.n	8004e8a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e86:	2301      	movs	r3, #1
 8004e88:	e026      	b.n	8004ed8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e8a:	f7fb fe51 	bl	8000b30 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	68ba      	ldr	r2, [r7, #8]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d302      	bcc.n	8004ea0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d113      	bne.n	8004ec8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea4:	f043 0220 	orr.w	r2, r3, #32
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e007      	b.n	8004ed8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	699b      	ldr	r3, [r3, #24]
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b20      	cmp	r3, #32
 8004ed4:	d1cf      	bne.n	8004e76 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ed6:	2300      	movs	r3, #0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3710      	adds	r7, #16
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b084      	sub	sp, #16
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	f003 0310 	and.w	r3, r3, #16
 8004ef6:	2b10      	cmp	r3, #16
 8004ef8:	d151      	bne.n	8004f9e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004efa:	e022      	b.n	8004f42 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f02:	d01e      	beq.n	8004f42 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f04:	f7fb fe14 	bl	8000b30 <HAL_GetTick>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	1ad3      	subs	r3, r2, r3
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	429a      	cmp	r2, r3
 8004f12:	d302      	bcc.n	8004f1a <I2C_IsAcknowledgeFailed+0x3a>
 8004f14:	68bb      	ldr	r3, [r7, #8]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d113      	bne.n	8004f42 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f1e:	f043 0220 	orr.w	r2, r3, #32
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2220      	movs	r2, #32
 8004f2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e02e      	b.n	8004fa0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	699b      	ldr	r3, [r3, #24]
 8004f48:	f003 0320 	and.w	r3, r3, #32
 8004f4c:	2b20      	cmp	r3, #32
 8004f4e:	d1d5      	bne.n	8004efc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2210      	movs	r2, #16
 8004f56:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	2220      	movs	r2, #32
 8004f5e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f7ff fedd 	bl	8004d20 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6859      	ldr	r1, [r3, #4]
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681a      	ldr	r2, [r3, #0]
 8004f70:	4b0d      	ldr	r3, [pc, #52]	; (8004fa8 <I2C_IsAcknowledgeFailed+0xc8>)
 8004f72:	400b      	ands	r3, r1
 8004f74:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f7a:	f043 0204 	orr.w	r2, r3, #4
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2220      	movs	r2, #32
 8004f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e000      	b.n	8004fa0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004f9e:	2300      	movs	r3, #0
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	3710      	adds	r7, #16
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	fe00e800 	.word	0xfe00e800

08004fac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	607b      	str	r3, [r7, #4]
 8004fb6:	460b      	mov	r3, r1
 8004fb8:	817b      	strh	r3, [r7, #10]
 8004fba:	4613      	mov	r3, r2
 8004fbc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	0d5b      	lsrs	r3, r3, #21
 8004fc8:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004fcc:	4b0d      	ldr	r3, [pc, #52]	; (8005004 <I2C_TransferConfig+0x58>)
 8004fce:	430b      	orrs	r3, r1
 8004fd0:	43db      	mvns	r3, r3
 8004fd2:	ea02 0103 	and.w	r1, r2, r3
 8004fd6:	897b      	ldrh	r3, [r7, #10]
 8004fd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004fdc:	7a7b      	ldrb	r3, [r7, #9]
 8004fde:	041b      	lsls	r3, r3, #16
 8004fe0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	431a      	orrs	r2, r3
 8004fea:	69bb      	ldr	r3, [r7, #24]
 8004fec:	431a      	orrs	r2, r3
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	430a      	orrs	r2, r1
 8004ff4:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004ff6:	bf00      	nop
 8004ff8:	3714      	adds	r7, #20
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	03ff63ff 	.word	0x03ff63ff

08005008 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b20      	cmp	r3, #32
 800501c:	d138      	bne.n	8005090 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005024:	2b01      	cmp	r3, #1
 8005026:	d101      	bne.n	800502c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005028:	2302      	movs	r3, #2
 800502a:	e032      	b.n	8005092 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2224      	movs	r2, #36	; 0x24
 8005038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f022 0201 	bic.w	r2, r2, #1
 800504a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800505a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	6819      	ldr	r1, [r3, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	683a      	ldr	r2, [r7, #0]
 8005068:	430a      	orrs	r2, r1
 800506a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	681a      	ldr	r2, [r3, #0]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0201 	orr.w	r2, r2, #1
 800507a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2220      	movs	r2, #32
 8005080:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800508c:	2300      	movs	r3, #0
 800508e:	e000      	b.n	8005092 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005090:	2302      	movs	r3, #2
  }
}
 8005092:	4618      	mov	r0, r3
 8005094:	370c      	adds	r7, #12
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr

0800509e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800509e:	b480      	push	{r7}
 80050a0:	b085      	sub	sp, #20
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
 80050a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b20      	cmp	r3, #32
 80050b2:	d139      	bne.n	8005128 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d101      	bne.n	80050c2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80050be:	2302      	movs	r3, #2
 80050c0:	e033      	b.n	800512a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2224      	movs	r2, #36	; 0x24
 80050ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	681a      	ldr	r2, [r3, #0]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f022 0201 	bic.w	r2, r2, #1
 80050e0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80050f0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	021b      	lsls	r3, r3, #8
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681a      	ldr	r2, [r3, #0]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f042 0201 	orr.w	r2, r2, #1
 8005112:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2220      	movs	r2, #32
 8005118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005124:	2300      	movs	r3, #0
 8005126:	e000      	b.n	800512a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005128:	2302      	movs	r3, #2
  }
}
 800512a:	4618      	mov	r0, r3
 800512c:	3714      	adds	r7, #20
 800512e:	46bd      	mov	sp, r7
 8005130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005134:	4770      	bx	lr
	...

08005138 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d101      	bne.n	800514a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
 8005148:	e0bf      	b.n	80052ca <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005150:	b2db      	uxtb	r3, r3
 8005152:	2b00      	cmp	r3, #0
 8005154:	d106      	bne.n	8005164 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f010 fd48 	bl	8015bf4 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	699a      	ldr	r2, [r3, #24]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800517a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	6999      	ldr	r1, [r3, #24]
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005190:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	430a      	orrs	r2, r1
 800519e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	6899      	ldr	r1, [r3, #8]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	4b4a      	ldr	r3, [pc, #296]	; (80052d4 <HAL_LTDC_Init+0x19c>)
 80051ac:	400b      	ands	r3, r1
 80051ae:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	041b      	lsls	r3, r3, #16
 80051b6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6899      	ldr	r1, [r3, #8]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	699a      	ldr	r2, [r3, #24]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	431a      	orrs	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	430a      	orrs	r2, r1
 80051cc:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68d9      	ldr	r1, [r3, #12]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	4b3e      	ldr	r3, [pc, #248]	; (80052d4 <HAL_LTDC_Init+0x19c>)
 80051da:	400b      	ands	r3, r1
 80051dc:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	69db      	ldr	r3, [r3, #28]
 80051e2:	041b      	lsls	r3, r3, #16
 80051e4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68d9      	ldr	r1, [r3, #12]
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6a1a      	ldr	r2, [r3, #32]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	431a      	orrs	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	430a      	orrs	r2, r1
 80051fa:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6919      	ldr	r1, [r3, #16]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	4b33      	ldr	r3, [pc, #204]	; (80052d4 <HAL_LTDC_Init+0x19c>)
 8005208:	400b      	ands	r3, r1
 800520a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005210:	041b      	lsls	r3, r3, #16
 8005212:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	6919      	ldr	r1, [r3, #16]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	431a      	orrs	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6959      	ldr	r1, [r3, #20]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	4b27      	ldr	r3, [pc, #156]	; (80052d4 <HAL_LTDC_Init+0x19c>)
 8005236:	400b      	ands	r3, r1
 8005238:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800523e:	041b      	lsls	r3, r3, #16
 8005240:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	6959      	ldr	r1, [r3, #20]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	431a      	orrs	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	430a      	orrs	r2, r1
 8005256:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800525e:	021b      	lsls	r3, r3, #8
 8005260:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005268:	041b      	lsls	r3, r3, #16
 800526a:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800527a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4313      	orrs	r3, r2
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800528e:	431a      	orrs	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0206 	orr.w	r2, r2, #6
 80052a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	699a      	ldr	r2, [r3, #24]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0201 	orr.w	r2, r2, #1
 80052b6:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	f000f800 	.word	0xf000f800

080052d8 <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f010 fd4f 	bl	8015d84 <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80052fe:	2300      	movs	r3, #0
}
 8005300:	4618      	mov	r0, r3
 8005302:	3708      	adds	r7, #8
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005316:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f003 0304 	and.w	r3, r3, #4
 8005326:	2b00      	cmp	r3, #0
 8005328:	d023      	beq.n	8005372 <HAL_LTDC_IRQHandler+0x6a>
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01e      	beq.n	8005372 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f022 0204 	bic.w	r2, r2, #4
 8005342:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	2204      	movs	r2, #4
 800534a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005352:	f043 0201 	orr.w	r2, r3, #1
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2204      	movs	r2, #4
 8005360:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f000 f86f 	bl	8005450 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d023      	beq.n	80053c4 <HAL_LTDC_IRQHandler+0xbc>
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	f003 0302 	and.w	r3, r3, #2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d01e      	beq.n	80053c4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0202 	bic.w	r2, r2, #2
 8005394:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	2202      	movs	r2, #2
 800539c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80053a4:	f043 0202 	orr.w	r2, r3, #2
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2204      	movs	r2, #4
 80053b2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80053be:	6878      	ldr	r0, [r7, #4]
 80053c0:	f000 f846 	bl	8005450 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d01b      	beq.n	8005406 <HAL_LTDC_IRQHandler+0xfe>
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	f003 0301 	and.w	r3, r3, #1
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d016      	beq.n	8005406 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f022 0201 	bic.w	r2, r2, #1
 80053e6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	2201      	movs	r2, #1
 80053ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f011 fceb 	bl	8016ddc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f003 0308 	and.w	r3, r3, #8
 800540c:	2b00      	cmp	r3, #0
 800540e:	d01b      	beq.n	8005448 <HAL_LTDC_IRQHandler+0x140>
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	f003 0308 	and.w	r3, r3, #8
 8005416:	2b00      	cmp	r3, #0
 8005418:	d016      	beq.n	8005448 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f022 0208 	bic.w	r2, r2, #8
 8005428:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2208      	movs	r2, #8
 8005430:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2201      	movs	r2, #1
 8005436:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f80e 	bl	8005464 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005448:	bf00      	nop
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr

08005464 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8005464:	b480      	push	{r7}
 8005466:	b083      	sub	sp, #12
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800546c:	bf00      	nop
 800546e:	370c      	adds	r7, #12
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr

08005478 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005478:	b5b0      	push	{r4, r5, r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 800548a:	2b01      	cmp	r3, #1
 800548c:	d101      	bne.n	8005492 <HAL_LTDC_ConfigLayer+0x1a>
 800548e:	2302      	movs	r3, #2
 8005490:	e02c      	b.n	80054ec <HAL_LTDC_ConfigLayer+0x74>
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2201      	movs	r2, #1
 8005496:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2202      	movs	r2, #2
 800549e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2134      	movs	r1, #52	; 0x34
 80054a8:	fb01 f303 	mul.w	r3, r1, r3
 80054ac:	4413      	add	r3, r2
 80054ae:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	4614      	mov	r4, r2
 80054b6:	461d      	mov	r5, r3
 80054b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054c4:	682b      	ldr	r3, [r5, #0]
 80054c6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80054c8:	687a      	ldr	r2, [r7, #4]
 80054ca:	68b9      	ldr	r1, [r7, #8]
 80054cc:	68f8      	ldr	r0, [r7, #12]
 80054ce:	f000 f8cf 	bl	8005670 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	2201      	movs	r2, #1
 80054d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2201      	movs	r2, #1
 80054de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3710      	adds	r7, #16
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bdb0      	pop	{r4, r5, r7, pc}

080054f4 <HAL_LTDC_SetPitch>:
  * @param  LinePitchInPixels  New line pitch in pixels to configure for LTDC layer 'LayerIdx'.
  * @param  LayerIdx           LTDC layer index concerned by the modification of line pitch.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetPitch(LTDC_HandleTypeDef *hltdc, uint32_t LinePitchInPixels, uint32_t LayerIdx)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b089      	sub	sp, #36	; 0x24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	60b9      	str	r1, [r7, #8]
 80054fe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005506:	2b01      	cmp	r3, #1
 8005508:	d101      	bne.n	800550e <HAL_LTDC_SetPitch+0x1a>
 800550a:	2302      	movs	r3, #2
 800550c:	e06e      	b.n	80055ec <HAL_LTDC_SetPitch+0xf8>
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2201      	movs	r2, #1
 8005512:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2202      	movs	r2, #2
 800551a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* get LayerIdx used pixel format */
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2134      	movs	r1, #52	; 0x34
 8005524:	fb01 f303 	mul.w	r3, r1, r3
 8005528:	4413      	add	r3, r2
 800552a:	3348      	adds	r3, #72	; 0x48
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	61bb      	str	r3, [r7, #24]

  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005530:	69bb      	ldr	r3, [r7, #24]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d102      	bne.n	800553c <HAL_LTDC_SetPitch+0x48>
  {
    tmp = 4U;
 8005536:	2304      	movs	r3, #4
 8005538:	61fb      	str	r3, [r7, #28]
 800553a:	e016      	b.n	800556a <HAL_LTDC_SetPitch+0x76>
  }
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	2b01      	cmp	r3, #1
 8005540:	d102      	bne.n	8005548 <HAL_LTDC_SetPitch+0x54>
  {
    tmp = 3U;
 8005542:	2303      	movs	r3, #3
 8005544:	61fb      	str	r3, [r7, #28]
 8005546:	e010      	b.n	800556a <HAL_LTDC_SetPitch+0x76>
  }
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	2b04      	cmp	r3, #4
 800554c:	d008      	beq.n	8005560 <HAL_LTDC_SetPitch+0x6c>
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	2b02      	cmp	r3, #2
 8005552:	d005      	beq.n	8005560 <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	2b03      	cmp	r3, #3
 8005558:	d002      	beq.n	8005560 <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800555a:	69bb      	ldr	r3, [r7, #24]
 800555c:	2b07      	cmp	r3, #7
 800555e:	d102      	bne.n	8005566 <HAL_LTDC_SetPitch+0x72>
           (pixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8005560:	2302      	movs	r3, #2
 8005562:	61fb      	str	r3, [r7, #28]
 8005564:	e001      	b.n	800556a <HAL_LTDC_SetPitch+0x76>
  }
  else
  {
    tmp = 1U;
 8005566:	2301      	movs	r3, #1
 8005568:	61fb      	str	r3, [r7, #28]
  }

  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 800556a:	68bb      	ldr	r3, [r7, #8]
 800556c:	69fa      	ldr	r2, [r7, #28]
 800556e:	fb02 f303 	mul.w	r3, r2, r3
 8005572:	041b      	lsls	r3, r3, #16
 8005574:	617b      	str	r3, [r7, #20]

  /* Clear previously set standard pitch */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	461a      	mov	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	01db      	lsls	r3, r3, #7
 8005580:	4413      	add	r3, r2
 8005582:	3384      	adds	r3, #132	; 0x84
 8005584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4619      	mov	r1, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	01db      	lsls	r3, r3, #7
 8005590:	440b      	add	r3, r1
 8005592:	3384      	adds	r3, #132	; 0x84
 8005594:	4619      	mov	r1, r3
 8005596:	4b18      	ldr	r3, [pc, #96]	; (80055f8 <HAL_LTDC_SetPitch+0x104>)
 8005598:	4013      	ands	r3, r2
 800559a:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800559c:	4b17      	ldr	r3, [pc, #92]	; (80055fc <HAL_LTDC_SetPitch+0x108>)
 800559e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a0:	4a16      	ldr	r2, [pc, #88]	; (80055fc <HAL_LTDC_SetPitch+0x108>)
 80055a2:	f043 0301 	orr.w	r3, r3, #1
 80055a6:	6253      	str	r3, [r2, #36]	; 0x24

  /* Set new line pitch value */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	461a      	mov	r2, r3
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	01db      	lsls	r3, r3, #7
 80055b2:	4413      	add	r3, r2
 80055b4:	3384      	adds	r3, #132	; 0x84
 80055b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4619      	mov	r1, r3
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	01db      	lsls	r3, r3, #7
 80055c2:	440b      	add	r3, r1
 80055c4:	3384      	adds	r3, #132	; 0x84
 80055c6:	4619      	mov	r1, r3
 80055c8:	697b      	ldr	r3, [r7, #20]
 80055ca:	4313      	orrs	r3, r2
 80055cc:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 80055ce:	4b0b      	ldr	r3, [pc, #44]	; (80055fc <HAL_LTDC_SetPitch+0x108>)
 80055d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d2:	4a0a      	ldr	r2, [pc, #40]	; (80055fc <HAL_LTDC_SetPitch+0x108>)
 80055d4:	f043 0301 	orr.w	r3, r3, #1
 80055d8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2201      	movs	r2, #1
 80055de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3724      	adds	r7, #36	; 0x24
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	e000ffff 	.word	0xe000ffff
 80055fc:	40016800 	.word	0x40016800

08005600 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 8005600:	b480      	push	{r7}
 8005602:	b083      	sub	sp, #12
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
 8005608:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005610:	2b01      	cmp	r3, #1
 8005612:	d101      	bne.n	8005618 <HAL_LTDC_ProgramLineEvent+0x18>
 8005614:	2302      	movs	r3, #2
 8005616:	e023      	b.n	8005660 <HAL_LTDC_ProgramLineEvent+0x60>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f022 0201 	bic.w	r2, r2, #1
 8005636:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8005638:	4a0c      	ldr	r2, [pc, #48]	; (800566c <HAL_LTDC_ProgramLineEvent+0x6c>)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f042 0201 	orr.w	r2, r2, #1
 800564c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2201      	movs	r2, #1
 8005652:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	40016800 	.word	0x40016800

08005670 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005670:	b480      	push	{r7}
 8005672:	b089      	sub	sp, #36	; 0x24
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	685a      	ldr	r2, [r3, #4]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	0c1b      	lsrs	r3, r3, #16
 8005688:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800568c:	4413      	add	r3, r2
 800568e:	041b      	lsls	r3, r3, #16
 8005690:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	461a      	mov	r2, r3
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	01db      	lsls	r3, r3, #7
 800569c:	4413      	add	r3, r2
 800569e:	3384      	adds	r3, #132	; 0x84
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	6812      	ldr	r2, [r2, #0]
 80056a6:	4611      	mov	r1, r2
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	01d2      	lsls	r2, r2, #7
 80056ac:	440a      	add	r2, r1
 80056ae:	3284      	adds	r2, #132	; 0x84
 80056b0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80056b4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	0c1b      	lsrs	r3, r3, #16
 80056c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056c6:	4413      	add	r3, r2
 80056c8:	1c5a      	adds	r2, r3, #1
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4619      	mov	r1, r3
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	01db      	lsls	r3, r3, #7
 80056d4:	440b      	add	r3, r1
 80056d6:	3384      	adds	r3, #132	; 0x84
 80056d8:	4619      	mov	r1, r3
 80056da:	69fb      	ldr	r3, [r7, #28]
 80056dc:	4313      	orrs	r3, r2
 80056de:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	68da      	ldr	r2, [r3, #12]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68db      	ldr	r3, [r3, #12]
 80056ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056ee:	4413      	add	r3, r2
 80056f0:	041b      	lsls	r3, r3, #16
 80056f2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	461a      	mov	r2, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	01db      	lsls	r3, r3, #7
 80056fe:	4413      	add	r3, r2
 8005700:	3384      	adds	r3, #132	; 0x84
 8005702:	689b      	ldr	r3, [r3, #8]
 8005704:	68fa      	ldr	r2, [r7, #12]
 8005706:	6812      	ldr	r2, [r2, #0]
 8005708:	4611      	mov	r1, r2
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	01d2      	lsls	r2, r2, #7
 800570e:	440a      	add	r2, r1
 8005710:	3284      	adds	r2, #132	; 0x84
 8005712:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8005716:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	689a      	ldr	r2, [r3, #8]
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	68db      	ldr	r3, [r3, #12]
 8005722:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005726:	4413      	add	r3, r2
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4619      	mov	r1, r3
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	01db      	lsls	r3, r3, #7
 8005734:	440b      	add	r3, r1
 8005736:	3384      	adds	r3, #132	; 0x84
 8005738:	4619      	mov	r1, r3
 800573a:	69fb      	ldr	r3, [r7, #28]
 800573c:	4313      	orrs	r3, r2
 800573e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	461a      	mov	r2, r3
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	01db      	lsls	r3, r3, #7
 800574a:	4413      	add	r3, r2
 800574c:	3384      	adds	r3, #132	; 0x84
 800574e:	691b      	ldr	r3, [r3, #16]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	6812      	ldr	r2, [r2, #0]
 8005754:	4611      	mov	r1, r2
 8005756:	687a      	ldr	r2, [r7, #4]
 8005758:	01d2      	lsls	r2, r2, #7
 800575a:	440a      	add	r2, r1
 800575c:	3284      	adds	r2, #132	; 0x84
 800575e:	f023 0307 	bic.w	r3, r3, #7
 8005762:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	461a      	mov	r2, r3
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	01db      	lsls	r3, r3, #7
 800576e:	4413      	add	r3, r2
 8005770:	3384      	adds	r3, #132	; 0x84
 8005772:	461a      	mov	r2, r3
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	691b      	ldr	r3, [r3, #16]
 8005778:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005780:	021b      	lsls	r3, r3, #8
 8005782:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800578a:	041b      	lsls	r3, r3, #16
 800578c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	699b      	ldr	r3, [r3, #24]
 8005792:	061b      	lsls	r3, r3, #24
 8005794:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	461a      	mov	r2, r3
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	01db      	lsls	r3, r3, #7
 80057a0:	4413      	add	r3, r2
 80057a2:	3384      	adds	r3, #132	; 0x84
 80057a4:	699b      	ldr	r3, [r3, #24]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	461a      	mov	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	01db      	lsls	r3, r3, #7
 80057b0:	4413      	add	r3, r2
 80057b2:	3384      	adds	r3, #132	; 0x84
 80057b4:	461a      	mov	r2, r3
 80057b6:	2300      	movs	r3, #0
 80057b8:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057c0:	461a      	mov	r2, r3
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	431a      	orrs	r2, r3
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	431a      	orrs	r2, r3
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4619      	mov	r1, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	01db      	lsls	r3, r3, #7
 80057d4:	440b      	add	r3, r1
 80057d6:	3384      	adds	r3, #132	; 0x84
 80057d8:	4619      	mov	r1, r3
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	4313      	orrs	r3, r2
 80057de:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	461a      	mov	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	01db      	lsls	r3, r3, #7
 80057ea:	4413      	add	r3, r2
 80057ec:	3384      	adds	r3, #132	; 0x84
 80057ee:	695b      	ldr	r3, [r3, #20]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	6812      	ldr	r2, [r2, #0]
 80057f4:	4611      	mov	r1, r2
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	01d2      	lsls	r2, r2, #7
 80057fa:	440a      	add	r2, r1
 80057fc:	3284      	adds	r2, #132	; 0x84
 80057fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005802:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	461a      	mov	r2, r3
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	01db      	lsls	r3, r3, #7
 800580e:	4413      	add	r3, r2
 8005810:	3384      	adds	r3, #132	; 0x84
 8005812:	461a      	mov	r2, r3
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	461a      	mov	r2, r3
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	01db      	lsls	r3, r3, #7
 8005824:	4413      	add	r3, r2
 8005826:	3384      	adds	r3, #132	; 0x84
 8005828:	69da      	ldr	r2, [r3, #28]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4619      	mov	r1, r3
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	01db      	lsls	r3, r3, #7
 8005834:	440b      	add	r3, r1
 8005836:	3384      	adds	r3, #132	; 0x84
 8005838:	4619      	mov	r1, r3
 800583a:	4b58      	ldr	r3, [pc, #352]	; (800599c <LTDC_SetConfig+0x32c>)
 800583c:	4013      	ands	r3, r2
 800583e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	69da      	ldr	r2, [r3, #28]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	6a1b      	ldr	r3, [r3, #32]
 8005848:	68f9      	ldr	r1, [r7, #12]
 800584a:	6809      	ldr	r1, [r1, #0]
 800584c:	4608      	mov	r0, r1
 800584e:	6879      	ldr	r1, [r7, #4]
 8005850:	01c9      	lsls	r1, r1, #7
 8005852:	4401      	add	r1, r0
 8005854:	3184      	adds	r1, #132	; 0x84
 8005856:	4313      	orrs	r3, r2
 8005858:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	461a      	mov	r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	01db      	lsls	r3, r3, #7
 8005864:	4413      	add	r3, r2
 8005866:	3384      	adds	r3, #132	; 0x84
 8005868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	461a      	mov	r2, r3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	01db      	lsls	r3, r3, #7
 8005874:	4413      	add	r3, r2
 8005876:	3384      	adds	r3, #132	; 0x84
 8005878:	461a      	mov	r2, r3
 800587a:	2300      	movs	r3, #0
 800587c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	461a      	mov	r2, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	01db      	lsls	r3, r3, #7
 8005888:	4413      	add	r3, r2
 800588a:	3384      	adds	r3, #132	; 0x84
 800588c:	461a      	mov	r2, r3
 800588e:	68bb      	ldr	r3, [r7, #8]
 8005890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005892:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	691b      	ldr	r3, [r3, #16]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d102      	bne.n	80058a2 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800589c:	2304      	movs	r3, #4
 800589e:	61fb      	str	r3, [r7, #28]
 80058a0:	e01b      	b.n	80058da <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	691b      	ldr	r3, [r3, #16]
 80058a6:	2b01      	cmp	r3, #1
 80058a8:	d102      	bne.n	80058b0 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80058aa:	2303      	movs	r3, #3
 80058ac:	61fb      	str	r3, [r7, #28]
 80058ae:	e014      	b.n	80058da <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	691b      	ldr	r3, [r3, #16]
 80058b4:	2b04      	cmp	r3, #4
 80058b6:	d00b      	beq.n	80058d0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80058bc:	2b02      	cmp	r3, #2
 80058be:	d007      	beq.n	80058d0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80058c4:	2b03      	cmp	r3, #3
 80058c6:	d003      	beq.n	80058d0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80058cc:	2b07      	cmp	r3, #7
 80058ce:	d102      	bne.n	80058d6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80058d0:	2302      	movs	r3, #2
 80058d2:	61fb      	str	r3, [r7, #28]
 80058d4:	e001      	b.n	80058da <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80058d6:	2301      	movs	r3, #1
 80058d8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	461a      	mov	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	01db      	lsls	r3, r3, #7
 80058e4:	4413      	add	r3, r2
 80058e6:	3384      	adds	r3, #132	; 0x84
 80058e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058ea:	68fa      	ldr	r2, [r7, #12]
 80058ec:	6812      	ldr	r2, [r2, #0]
 80058ee:	4611      	mov	r1, r2
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	01d2      	lsls	r2, r2, #7
 80058f4:	440a      	add	r2, r1
 80058f6:	3284      	adds	r2, #132	; 0x84
 80058f8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80058fc:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005902:	69fa      	ldr	r2, [r7, #28]
 8005904:	fb02 f303 	mul.w	r3, r2, r3
 8005908:	041a      	lsls	r2, r3, #16
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	6859      	ldr	r1, [r3, #4]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	1acb      	subs	r3, r1, r3
 8005914:	69f9      	ldr	r1, [r7, #28]
 8005916:	fb01 f303 	mul.w	r3, r1, r3
 800591a:	3303      	adds	r3, #3
 800591c:	68f9      	ldr	r1, [r7, #12]
 800591e:	6809      	ldr	r1, [r1, #0]
 8005920:	4608      	mov	r0, r1
 8005922:	6879      	ldr	r1, [r7, #4]
 8005924:	01c9      	lsls	r1, r1, #7
 8005926:	4401      	add	r1, r0
 8005928:	3184      	adds	r1, #132	; 0x84
 800592a:	4313      	orrs	r3, r2
 800592c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	461a      	mov	r2, r3
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	01db      	lsls	r3, r3, #7
 8005938:	4413      	add	r3, r2
 800593a:	3384      	adds	r3, #132	; 0x84
 800593c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4619      	mov	r1, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	01db      	lsls	r3, r3, #7
 8005948:	440b      	add	r3, r1
 800594a:	3384      	adds	r3, #132	; 0x84
 800594c:	4619      	mov	r1, r3
 800594e:	4b14      	ldr	r3, [pc, #80]	; (80059a0 <LTDC_SetConfig+0x330>)
 8005950:	4013      	ands	r3, r2
 8005952:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	461a      	mov	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	01db      	lsls	r3, r3, #7
 800595e:	4413      	add	r3, r2
 8005960:	3384      	adds	r3, #132	; 0x84
 8005962:	461a      	mov	r2, r3
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005968:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	461a      	mov	r2, r3
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	01db      	lsls	r3, r3, #7
 8005974:	4413      	add	r3, r2
 8005976:	3384      	adds	r3, #132	; 0x84
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	6812      	ldr	r2, [r2, #0]
 800597e:	4611      	mov	r1, r2
 8005980:	687a      	ldr	r2, [r7, #4]
 8005982:	01d2      	lsls	r2, r2, #7
 8005984:	440a      	add	r2, r1
 8005986:	3284      	adds	r2, #132	; 0x84
 8005988:	f043 0301 	orr.w	r3, r3, #1
 800598c:	6013      	str	r3, [r2, #0]
}
 800598e:	bf00      	nop
 8005990:	3724      	adds	r7, #36	; 0x24
 8005992:	46bd      	mov	sp, r7
 8005994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005998:	4770      	bx	lr
 800599a:	bf00      	nop
 800599c:	fffff8f8 	.word	0xfffff8f8
 80059a0:	fffff800 	.word	0xfffff800

080059a4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80059a4:	b480      	push	{r7}
 80059a6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059a8:	4b05      	ldr	r3, [pc, #20]	; (80059c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a04      	ldr	r2, [pc, #16]	; (80059c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80059ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059b2:	6013      	str	r3, [r2, #0]
}
 80059b4:	bf00      	nop
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	40007000 	.word	0x40007000

080059c4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80059ca:	2300      	movs	r3, #0
 80059cc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80059ce:	4b23      	ldr	r3, [pc, #140]	; (8005a5c <HAL_PWREx_EnableOverDrive+0x98>)
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	4a22      	ldr	r2, [pc, #136]	; (8005a5c <HAL_PWREx_EnableOverDrive+0x98>)
 80059d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059d8:	6413      	str	r3, [r2, #64]	; 0x40
 80059da:	4b20      	ldr	r3, [pc, #128]	; (8005a5c <HAL_PWREx_EnableOverDrive+0x98>)
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059e2:	603b      	str	r3, [r7, #0]
 80059e4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80059e6:	4b1e      	ldr	r3, [pc, #120]	; (8005a60 <HAL_PWREx_EnableOverDrive+0x9c>)
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a1d      	ldr	r2, [pc, #116]	; (8005a60 <HAL_PWREx_EnableOverDrive+0x9c>)
 80059ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059f0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059f2:	f7fb f89d 	bl	8000b30 <HAL_GetTick>
 80059f6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80059f8:	e009      	b.n	8005a0e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80059fa:	f7fb f899 	bl	8000b30 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a08:	d901      	bls.n	8005a0e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e022      	b.n	8005a54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005a0e:	4b14      	ldr	r3, [pc, #80]	; (8005a60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a10:	685b      	ldr	r3, [r3, #4]
 8005a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a1a:	d1ee      	bne.n	80059fa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005a1c:	4b10      	ldr	r3, [pc, #64]	; (8005a60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a0f      	ldr	r2, [pc, #60]	; (8005a60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a26:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a28:	f7fb f882 	bl	8000b30 <HAL_GetTick>
 8005a2c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005a2e:	e009      	b.n	8005a44 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005a30:	f7fb f87e 	bl	8000b30 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a3e:	d901      	bls.n	8005a44 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e007      	b.n	8005a54 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005a44:	4b06      	ldr	r3, [pc, #24]	; (8005a60 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a4c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a50:	d1ee      	bne.n	8005a30 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3708      	adds	r7, #8
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	40023800 	.word	0x40023800
 8005a60:	40007000 	.word	0x40007000

08005a64 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b086      	sub	sp, #24
 8005a68:	af02      	add	r7, sp, #8
 8005a6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005a70:	f7fb f85e 	bl	8000b30 <HAL_GetTick>
 8005a74:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d101      	bne.n	8005a80 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	e073      	b.n	8005b68 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a86:	b2db      	uxtb	r3, r3
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d101      	bne.n	8005a90 <HAL_QSPI_Init+0x2c>
 8005a8c:	2302      	movs	r3, #2
 8005a8e:	e06b      	b.n	8005b68 <HAL_QSPI_Init+0x104>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	2201      	movs	r2, #1
 8005a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d10b      	bne.n	8005abc <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005aac:	6878      	ldr	r0, [r7, #4]
 8005aae:	f013 fa09 	bl	8018ec4 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8005ab2:	f241 3188 	movw	r1, #5000	; 0x1388
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f85e 	bl	8005b78 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	021a      	lsls	r2, r3, #8
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	430a      	orrs	r2, r1
 8005ad4:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	2120      	movs	r1, #32
 8005ae2:	6878      	ldr	r0, [r7, #4]
 8005ae4:	f000 f856 	bl	8005b94 <QSPI_WaitFlagStateUntilTimeout>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8005aec:	7bfb      	ldrb	r3, [r7, #15]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d135      	bne.n	8005b5e <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	4b1d      	ldr	r3, [pc, #116]	; (8005b70 <HAL_QSPI_Init+0x10c>)
 8005afa:	4013      	ands	r3, r2
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	6852      	ldr	r2, [r2, #4]
 8005b00:	0611      	lsls	r1, r2, #24
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	68d2      	ldr	r2, [r2, #12]
 8005b06:	4311      	orrs	r1, r2
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	69d2      	ldr	r2, [r2, #28]
 8005b0c:	4311      	orrs	r1, r2
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	6a12      	ldr	r2, [r2, #32]
 8005b12:	4311      	orrs	r1, r2
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6812      	ldr	r2, [r2, #0]
 8005b18:	430b      	orrs	r3, r1
 8005b1a:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	685a      	ldr	r2, [r3, #4]
 8005b22:	4b14      	ldr	r3, [pc, #80]	; (8005b74 <HAL_QSPI_Init+0x110>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	6912      	ldr	r2, [r2, #16]
 8005b2a:	0411      	lsls	r1, r2, #16
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	6952      	ldr	r2, [r2, #20]
 8005b30:	4311      	orrs	r1, r2
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	6992      	ldr	r2, [r2, #24]
 8005b36:	4311      	orrs	r1, r2
 8005b38:	687a      	ldr	r2, [r7, #4]
 8005b3a:	6812      	ldr	r2, [r2, #0]
 8005b3c:	430b      	orrs	r3, r1
 8005b3e:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f042 0201 	orr.w	r2, r2, #1
 8005b4e:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2201      	movs	r2, #1
 8005b5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005b66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	00ffff2f 	.word	0x00ffff2f
 8005b74:	ffe0f8fe 	.word	0xffe0f8fe

08005b78 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b083      	sub	sp, #12
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	603b      	str	r3, [r7, #0]
 8005ba0:	4613      	mov	r3, r2
 8005ba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005ba4:	e01a      	b.n	8005bdc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bac:	d016      	beq.n	8005bdc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d007      	beq.n	8005bc4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005bb4:	f7fa ffbc 	bl	8000b30 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	69ba      	ldr	r2, [r7, #24]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d20b      	bcs.n	8005bdc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2204      	movs	r2, #4
 8005bc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bd0:	f043 0201 	orr.w	r2, r3, #1
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e00e      	b.n	8005bfa <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689a      	ldr	r2, [r3, #8]
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	4013      	ands	r3, r2
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	bf14      	ite	ne
 8005bea:	2301      	movne	r3, #1
 8005bec:	2300      	moveq	r3, #0
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	79fb      	ldrb	r3, [r7, #7]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d1d6      	bne.n	8005ba6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3710      	adds	r7, #16
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}
	...

08005c04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b086      	sub	sp, #24
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d101      	bne.n	8005c1a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005c16:	2301      	movs	r3, #1
 8005c18:	e25c      	b.n	80060d4 <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f003 0301 	and.w	r3, r3, #1
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	f000 8087 	beq.w	8005d36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c28:	4b96      	ldr	r3, [pc, #600]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f003 030c 	and.w	r3, r3, #12
 8005c30:	2b04      	cmp	r3, #4
 8005c32:	d00c      	beq.n	8005c4e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c34:	4b93      	ldr	r3, [pc, #588]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f003 030c 	and.w	r3, r3, #12
 8005c3c:	2b08      	cmp	r3, #8
 8005c3e:	d112      	bne.n	8005c66 <HAL_RCC_OscConfig+0x62>
 8005c40:	4b90      	ldr	r3, [pc, #576]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c4c:	d10b      	bne.n	8005c66 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c4e:	4b8d      	ldr	r3, [pc, #564]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d06c      	beq.n	8005d34 <HAL_RCC_OscConfig+0x130>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d168      	bne.n	8005d34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e236      	b.n	80060d4 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c6e:	d106      	bne.n	8005c7e <HAL_RCC_OscConfig+0x7a>
 8005c70:	4b84      	ldr	r3, [pc, #528]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	4a83      	ldr	r2, [pc, #524]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005c76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c7a:	6013      	str	r3, [r2, #0]
 8005c7c:	e02e      	b.n	8005cdc <HAL_RCC_OscConfig+0xd8>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d10c      	bne.n	8005ca0 <HAL_RCC_OscConfig+0x9c>
 8005c86:	4b7f      	ldr	r3, [pc, #508]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a7e      	ldr	r2, [pc, #504]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005c8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c90:	6013      	str	r3, [r2, #0]
 8005c92:	4b7c      	ldr	r3, [pc, #496]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	4a7b      	ldr	r2, [pc, #492]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005c98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c9c:	6013      	str	r3, [r2, #0]
 8005c9e:	e01d      	b.n	8005cdc <HAL_RCC_OscConfig+0xd8>
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ca8:	d10c      	bne.n	8005cc4 <HAL_RCC_OscConfig+0xc0>
 8005caa:	4b76      	ldr	r3, [pc, #472]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4a75      	ldr	r2, [pc, #468]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005cb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cb4:	6013      	str	r3, [r2, #0]
 8005cb6:	4b73      	ldr	r3, [pc, #460]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4a72      	ldr	r2, [pc, #456]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005cbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cc0:	6013      	str	r3, [r2, #0]
 8005cc2:	e00b      	b.n	8005cdc <HAL_RCC_OscConfig+0xd8>
 8005cc4:	4b6f      	ldr	r3, [pc, #444]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a6e      	ldr	r2, [pc, #440]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005cca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cce:	6013      	str	r3, [r2, #0]
 8005cd0:	4b6c      	ldr	r3, [pc, #432]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a6b      	ldr	r2, [pc, #428]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005cd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	685b      	ldr	r3, [r3, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d013      	beq.n	8005d0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ce4:	f7fa ff24 	bl	8000b30 <HAL_GetTick>
 8005ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cea:	e008      	b.n	8005cfe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005cec:	f7fa ff20 	bl	8000b30 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b64      	cmp	r3, #100	; 0x64
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e1ea      	b.n	80060d4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cfe:	4b61      	ldr	r3, [pc, #388]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d0f0      	beq.n	8005cec <HAL_RCC_OscConfig+0xe8>
 8005d0a:	e014      	b.n	8005d36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d0c:	f7fa ff10 	bl	8000b30 <HAL_GetTick>
 8005d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d12:	e008      	b.n	8005d26 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d14:	f7fa ff0c 	bl	8000b30 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	2b64      	cmp	r3, #100	; 0x64
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e1d6      	b.n	80060d4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d26:	4b57      	ldr	r3, [pc, #348]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d1f0      	bne.n	8005d14 <HAL_RCC_OscConfig+0x110>
 8005d32:	e000      	b.n	8005d36 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0302 	and.w	r3, r3, #2
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d069      	beq.n	8005e16 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d42:	4b50      	ldr	r3, [pc, #320]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 030c 	and.w	r3, r3, #12
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d00b      	beq.n	8005d66 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d4e:	4b4d      	ldr	r3, [pc, #308]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f003 030c 	and.w	r3, r3, #12
 8005d56:	2b08      	cmp	r3, #8
 8005d58:	d11c      	bne.n	8005d94 <HAL_RCC_OscConfig+0x190>
 8005d5a:	4b4a      	ldr	r3, [pc, #296]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d116      	bne.n	8005d94 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d66:	4b47      	ldr	r3, [pc, #284]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d005      	beq.n	8005d7e <HAL_RCC_OscConfig+0x17a>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68db      	ldr	r3, [r3, #12]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d001      	beq.n	8005d7e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e1aa      	b.n	80060d4 <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d7e:	4b41      	ldr	r3, [pc, #260]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	00db      	lsls	r3, r3, #3
 8005d8c:	493d      	ldr	r1, [pc, #244]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d92:	e040      	b.n	8005e16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d023      	beq.n	8005de4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d9c:	4b39      	ldr	r3, [pc, #228]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a38      	ldr	r2, [pc, #224]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005da2:	f043 0301 	orr.w	r3, r3, #1
 8005da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da8:	f7fa fec2 	bl	8000b30 <HAL_GetTick>
 8005dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dae:	e008      	b.n	8005dc2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005db0:	f7fa febe 	bl	8000b30 <HAL_GetTick>
 8005db4:	4602      	mov	r2, r0
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	1ad3      	subs	r3, r2, r3
 8005dba:	2b02      	cmp	r3, #2
 8005dbc:	d901      	bls.n	8005dc2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005dbe:	2303      	movs	r3, #3
 8005dc0:	e188      	b.n	80060d4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dc2:	4b30      	ldr	r3, [pc, #192]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f003 0302 	and.w	r3, r3, #2
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d0f0      	beq.n	8005db0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dce:	4b2d      	ldr	r3, [pc, #180]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	00db      	lsls	r3, r3, #3
 8005ddc:	4929      	ldr	r1, [pc, #164]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005dde:	4313      	orrs	r3, r2
 8005de0:	600b      	str	r3, [r1, #0]
 8005de2:	e018      	b.n	8005e16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005de4:	4b27      	ldr	r3, [pc, #156]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a26      	ldr	r2, [pc, #152]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005dea:	f023 0301 	bic.w	r3, r3, #1
 8005dee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005df0:	f7fa fe9e 	bl	8000b30 <HAL_GetTick>
 8005df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005df6:	e008      	b.n	8005e0a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005df8:	f7fa fe9a 	bl	8000b30 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d901      	bls.n	8005e0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e164      	b.n	80060d4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e0a:	4b1e      	ldr	r3, [pc, #120]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 0302 	and.w	r3, r3, #2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1f0      	bne.n	8005df8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0308 	and.w	r3, r3, #8
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d038      	beq.n	8005e94 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d019      	beq.n	8005e5e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e2a:	4b16      	ldr	r3, [pc, #88]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005e2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e2e:	4a15      	ldr	r2, [pc, #84]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005e30:	f043 0301 	orr.w	r3, r3, #1
 8005e34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e36:	f7fa fe7b 	bl	8000b30 <HAL_GetTick>
 8005e3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e3c:	e008      	b.n	8005e50 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e3e:	f7fa fe77 	bl	8000b30 <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	2b02      	cmp	r3, #2
 8005e4a:	d901      	bls.n	8005e50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e4c:	2303      	movs	r3, #3
 8005e4e:	e141      	b.n	80060d4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e50:	4b0c      	ldr	r3, [pc, #48]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e54:	f003 0302 	and.w	r3, r3, #2
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d0f0      	beq.n	8005e3e <HAL_RCC_OscConfig+0x23a>
 8005e5c:	e01a      	b.n	8005e94 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e5e:	4b09      	ldr	r3, [pc, #36]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005e60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e62:	4a08      	ldr	r2, [pc, #32]	; (8005e84 <HAL_RCC_OscConfig+0x280>)
 8005e64:	f023 0301 	bic.w	r3, r3, #1
 8005e68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e6a:	f7fa fe61 	bl	8000b30 <HAL_GetTick>
 8005e6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e70:	e00a      	b.n	8005e88 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e72:	f7fa fe5d 	bl	8000b30 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	693b      	ldr	r3, [r7, #16]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d903      	bls.n	8005e88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e127      	b.n	80060d4 <HAL_RCC_OscConfig+0x4d0>
 8005e84:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e88:	4b94      	ldr	r3, [pc, #592]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 8005e8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e8c:	f003 0302 	and.w	r3, r3, #2
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d1ee      	bne.n	8005e72 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0304 	and.w	r3, r3, #4
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f000 80a4 	beq.w	8005fea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ea2:	4b8e      	ldr	r3, [pc, #568]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10d      	bne.n	8005eca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005eae:	4b8b      	ldr	r3, [pc, #556]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 8005eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb2:	4a8a      	ldr	r2, [pc, #552]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 8005eb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8005eba:	4b88      	ldr	r3, [pc, #544]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 8005ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ec2:	60fb      	str	r3, [r7, #12]
 8005ec4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ec6:	2301      	movs	r3, #1
 8005ec8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005eca:	4b85      	ldr	r3, [pc, #532]	; (80060e0 <HAL_RCC_OscConfig+0x4dc>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d118      	bne.n	8005f08 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005ed6:	4b82      	ldr	r3, [pc, #520]	; (80060e0 <HAL_RCC_OscConfig+0x4dc>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a81      	ldr	r2, [pc, #516]	; (80060e0 <HAL_RCC_OscConfig+0x4dc>)
 8005edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ee0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ee2:	f7fa fe25 	bl	8000b30 <HAL_GetTick>
 8005ee6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ee8:	e008      	b.n	8005efc <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005eea:	f7fa fe21 	bl	8000b30 <HAL_GetTick>
 8005eee:	4602      	mov	r2, r0
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	1ad3      	subs	r3, r2, r3
 8005ef4:	2b64      	cmp	r3, #100	; 0x64
 8005ef6:	d901      	bls.n	8005efc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e0eb      	b.n	80060d4 <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005efc:	4b78      	ldr	r3, [pc, #480]	; (80060e0 <HAL_RCC_OscConfig+0x4dc>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d0f0      	beq.n	8005eea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	2b01      	cmp	r3, #1
 8005f0e:	d106      	bne.n	8005f1e <HAL_RCC_OscConfig+0x31a>
 8005f10:	4b72      	ldr	r3, [pc, #456]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 8005f12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f14:	4a71      	ldr	r2, [pc, #452]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 8005f16:	f043 0301 	orr.w	r3, r3, #1
 8005f1a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f1c:	e02d      	b.n	8005f7a <HAL_RCC_OscConfig+0x376>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10c      	bne.n	8005f40 <HAL_RCC_OscConfig+0x33c>
 8005f26:	4b6d      	ldr	r3, [pc, #436]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 8005f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2a:	4a6c      	ldr	r2, [pc, #432]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 8005f2c:	f023 0301 	bic.w	r3, r3, #1
 8005f30:	6713      	str	r3, [r2, #112]	; 0x70
 8005f32:	4b6a      	ldr	r3, [pc, #424]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 8005f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f36:	4a69      	ldr	r2, [pc, #420]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 8005f38:	f023 0304 	bic.w	r3, r3, #4
 8005f3c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f3e:	e01c      	b.n	8005f7a <HAL_RCC_OscConfig+0x376>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	689b      	ldr	r3, [r3, #8]
 8005f44:	2b05      	cmp	r3, #5
 8005f46:	d10c      	bne.n	8005f62 <HAL_RCC_OscConfig+0x35e>
 8005f48:	4b64      	ldr	r3, [pc, #400]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 8005f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f4c:	4a63      	ldr	r2, [pc, #396]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 8005f4e:	f043 0304 	orr.w	r3, r3, #4
 8005f52:	6713      	str	r3, [r2, #112]	; 0x70
 8005f54:	4b61      	ldr	r3, [pc, #388]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 8005f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f58:	4a60      	ldr	r2, [pc, #384]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 8005f5a:	f043 0301 	orr.w	r3, r3, #1
 8005f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f60:	e00b      	b.n	8005f7a <HAL_RCC_OscConfig+0x376>
 8005f62:	4b5e      	ldr	r3, [pc, #376]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 8005f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f66:	4a5d      	ldr	r2, [pc, #372]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 8005f68:	f023 0301 	bic.w	r3, r3, #1
 8005f6c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f6e:	4b5b      	ldr	r3, [pc, #364]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 8005f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f72:	4a5a      	ldr	r2, [pc, #360]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 8005f74:	f023 0304 	bic.w	r3, r3, #4
 8005f78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d015      	beq.n	8005fae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f82:	f7fa fdd5 	bl	8000b30 <HAL_GetTick>
 8005f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f88:	e00a      	b.n	8005fa0 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f8a:	f7fa fdd1 	bl	8000b30 <HAL_GetTick>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	693b      	ldr	r3, [r7, #16]
 8005f92:	1ad3      	subs	r3, r2, r3
 8005f94:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d901      	bls.n	8005fa0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e099      	b.n	80060d4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fa0:	4b4e      	ldr	r3, [pc, #312]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 8005fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa4:	f003 0302 	and.w	r3, r3, #2
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d0ee      	beq.n	8005f8a <HAL_RCC_OscConfig+0x386>
 8005fac:	e014      	b.n	8005fd8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fae:	f7fa fdbf 	bl	8000b30 <HAL_GetTick>
 8005fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fb4:	e00a      	b.n	8005fcc <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fb6:	f7fa fdbb 	bl	8000b30 <HAL_GetTick>
 8005fba:	4602      	mov	r2, r0
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	1ad3      	subs	r3, r2, r3
 8005fc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d901      	bls.n	8005fcc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	e083      	b.n	80060d4 <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fcc:	4b43      	ldr	r3, [pc, #268]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 8005fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd0:	f003 0302 	and.w	r3, r3, #2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1ee      	bne.n	8005fb6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fd8:	7dfb      	ldrb	r3, [r7, #23]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d105      	bne.n	8005fea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fde:	4b3f      	ldr	r3, [pc, #252]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 8005fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fe2:	4a3e      	ldr	r2, [pc, #248]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 8005fe4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fe8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	699b      	ldr	r3, [r3, #24]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d06f      	beq.n	80060d2 <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005ff2:	4b3a      	ldr	r3, [pc, #232]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f003 030c 	and.w	r3, r3, #12
 8005ffa:	2b08      	cmp	r3, #8
 8005ffc:	d067      	beq.n	80060ce <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	2b02      	cmp	r3, #2
 8006004:	d149      	bne.n	800609a <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006006:	4b35      	ldr	r3, [pc, #212]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a34      	ldr	r2, [pc, #208]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 800600c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006010:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006012:	f7fa fd8d 	bl	8000b30 <HAL_GetTick>
 8006016:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006018:	e008      	b.n	800602c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800601a:	f7fa fd89 	bl	8000b30 <HAL_GetTick>
 800601e:	4602      	mov	r2, r0
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	1ad3      	subs	r3, r2, r3
 8006024:	2b02      	cmp	r3, #2
 8006026:	d901      	bls.n	800602c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e053      	b.n	80060d4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800602c:	4b2b      	ldr	r3, [pc, #172]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1f0      	bne.n	800601a <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	69da      	ldr	r2, [r3, #28]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6a1b      	ldr	r3, [r3, #32]
 8006040:	431a      	orrs	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006046:	019b      	lsls	r3, r3, #6
 8006048:	431a      	orrs	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800604e:	085b      	lsrs	r3, r3, #1
 8006050:	3b01      	subs	r3, #1
 8006052:	041b      	lsls	r3, r3, #16
 8006054:	431a      	orrs	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605a:	061b      	lsls	r3, r3, #24
 800605c:	4313      	orrs	r3, r2
 800605e:	4a1f      	ldr	r2, [pc, #124]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 8006060:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006064:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006066:	4b1d      	ldr	r3, [pc, #116]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	4a1c      	ldr	r2, [pc, #112]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 800606c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006070:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006072:	f7fa fd5d 	bl	8000b30 <HAL_GetTick>
 8006076:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006078:	e008      	b.n	800608c <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800607a:	f7fa fd59 	bl	8000b30 <HAL_GetTick>
 800607e:	4602      	mov	r2, r0
 8006080:	693b      	ldr	r3, [r7, #16]
 8006082:	1ad3      	subs	r3, r2, r3
 8006084:	2b02      	cmp	r3, #2
 8006086:	d901      	bls.n	800608c <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8006088:	2303      	movs	r3, #3
 800608a:	e023      	b.n	80060d4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800608c:	4b13      	ldr	r3, [pc, #76]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0f0      	beq.n	800607a <HAL_RCC_OscConfig+0x476>
 8006098:	e01b      	b.n	80060d2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800609a:	4b10      	ldr	r3, [pc, #64]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a0f      	ldr	r2, [pc, #60]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 80060a0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060a6:	f7fa fd43 	bl	8000b30 <HAL_GetTick>
 80060aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ac:	e008      	b.n	80060c0 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060ae:	f7fa fd3f 	bl	8000b30 <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d901      	bls.n	80060c0 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e009      	b.n	80060d4 <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060c0:	4b06      	ldr	r3, [pc, #24]	; (80060dc <HAL_RCC_OscConfig+0x4d8>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d1f0      	bne.n	80060ae <HAL_RCC_OscConfig+0x4aa>
 80060cc:	e001      	b.n	80060d2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e000      	b.n	80060d4 <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}
 80060dc:	40023800 	.word	0x40023800
 80060e0:	40007000 	.word	0x40007000

080060e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b084      	sub	sp, #16
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
 80060ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80060ee:	2300      	movs	r3, #0
 80060f0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d101      	bne.n	80060fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e0ce      	b.n	800629a <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060fc:	4b69      	ldr	r3, [pc, #420]	; (80062a4 <HAL_RCC_ClockConfig+0x1c0>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 030f 	and.w	r3, r3, #15
 8006104:	683a      	ldr	r2, [r7, #0]
 8006106:	429a      	cmp	r2, r3
 8006108:	d910      	bls.n	800612c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800610a:	4b66      	ldr	r3, [pc, #408]	; (80062a4 <HAL_RCC_ClockConfig+0x1c0>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f023 020f 	bic.w	r2, r3, #15
 8006112:	4964      	ldr	r1, [pc, #400]	; (80062a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	4313      	orrs	r3, r2
 8006118:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800611a:	4b62      	ldr	r3, [pc, #392]	; (80062a4 <HAL_RCC_ClockConfig+0x1c0>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 030f 	and.w	r3, r3, #15
 8006122:	683a      	ldr	r2, [r7, #0]
 8006124:	429a      	cmp	r2, r3
 8006126:	d001      	beq.n	800612c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e0b6      	b.n	800629a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 0302 	and.w	r3, r3, #2
 8006134:	2b00      	cmp	r3, #0
 8006136:	d020      	beq.n	800617a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f003 0304 	and.w	r3, r3, #4
 8006140:	2b00      	cmp	r3, #0
 8006142:	d005      	beq.n	8006150 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006144:	4b58      	ldr	r3, [pc, #352]	; (80062a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	4a57      	ldr	r2, [pc, #348]	; (80062a8 <HAL_RCC_ClockConfig+0x1c4>)
 800614a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800614e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f003 0308 	and.w	r3, r3, #8
 8006158:	2b00      	cmp	r3, #0
 800615a:	d005      	beq.n	8006168 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800615c:	4b52      	ldr	r3, [pc, #328]	; (80062a8 <HAL_RCC_ClockConfig+0x1c4>)
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	4a51      	ldr	r2, [pc, #324]	; (80062a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006162:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006166:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006168:	4b4f      	ldr	r3, [pc, #316]	; (80062a8 <HAL_RCC_ClockConfig+0x1c4>)
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	494c      	ldr	r1, [pc, #304]	; (80062a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006176:	4313      	orrs	r3, r2
 8006178:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0301 	and.w	r3, r3, #1
 8006182:	2b00      	cmp	r3, #0
 8006184:	d040      	beq.n	8006208 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	2b01      	cmp	r3, #1
 800618c:	d107      	bne.n	800619e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800618e:	4b46      	ldr	r3, [pc, #280]	; (80062a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d115      	bne.n	80061c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e07d      	b.n	800629a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d107      	bne.n	80061b6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061a6:	4b40      	ldr	r3, [pc, #256]	; (80062a8 <HAL_RCC_ClockConfig+0x1c4>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d109      	bne.n	80061c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80061b2:	2301      	movs	r3, #1
 80061b4:	e071      	b.n	800629a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061b6:	4b3c      	ldr	r3, [pc, #240]	; (80062a8 <HAL_RCC_ClockConfig+0x1c4>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0302 	and.w	r3, r3, #2
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e069      	b.n	800629a <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061c6:	4b38      	ldr	r3, [pc, #224]	; (80062a8 <HAL_RCC_ClockConfig+0x1c4>)
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	f023 0203 	bic.w	r2, r3, #3
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	4935      	ldr	r1, [pc, #212]	; (80062a8 <HAL_RCC_ClockConfig+0x1c4>)
 80061d4:	4313      	orrs	r3, r2
 80061d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061d8:	f7fa fcaa 	bl	8000b30 <HAL_GetTick>
 80061dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061de:	e00a      	b.n	80061f6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061e0:	f7fa fca6 	bl	8000b30 <HAL_GetTick>
 80061e4:	4602      	mov	r2, r0
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	1ad3      	subs	r3, r2, r3
 80061ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d901      	bls.n	80061f6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80061f2:	2303      	movs	r3, #3
 80061f4:	e051      	b.n	800629a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061f6:	4b2c      	ldr	r3, [pc, #176]	; (80062a8 <HAL_RCC_ClockConfig+0x1c4>)
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	f003 020c 	and.w	r2, r3, #12
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	429a      	cmp	r2, r3
 8006206:	d1eb      	bne.n	80061e0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006208:	4b26      	ldr	r3, [pc, #152]	; (80062a4 <HAL_RCC_ClockConfig+0x1c0>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 030f 	and.w	r3, r3, #15
 8006210:	683a      	ldr	r2, [r7, #0]
 8006212:	429a      	cmp	r2, r3
 8006214:	d210      	bcs.n	8006238 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006216:	4b23      	ldr	r3, [pc, #140]	; (80062a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f023 020f 	bic.w	r2, r3, #15
 800621e:	4921      	ldr	r1, [pc, #132]	; (80062a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	4313      	orrs	r3, r2
 8006224:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006226:	4b1f      	ldr	r3, [pc, #124]	; (80062a4 <HAL_RCC_ClockConfig+0x1c0>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f003 030f 	and.w	r3, r3, #15
 800622e:	683a      	ldr	r2, [r7, #0]
 8006230:	429a      	cmp	r2, r3
 8006232:	d001      	beq.n	8006238 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	e030      	b.n	800629a <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f003 0304 	and.w	r3, r3, #4
 8006240:	2b00      	cmp	r3, #0
 8006242:	d008      	beq.n	8006256 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006244:	4b18      	ldr	r3, [pc, #96]	; (80062a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006246:	689b      	ldr	r3, [r3, #8]
 8006248:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	68db      	ldr	r3, [r3, #12]
 8006250:	4915      	ldr	r1, [pc, #84]	; (80062a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006252:	4313      	orrs	r3, r2
 8006254:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0308 	and.w	r3, r3, #8
 800625e:	2b00      	cmp	r3, #0
 8006260:	d009      	beq.n	8006276 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006262:	4b11      	ldr	r3, [pc, #68]	; (80062a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006264:	689b      	ldr	r3, [r3, #8]
 8006266:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	691b      	ldr	r3, [r3, #16]
 800626e:	00db      	lsls	r3, r3, #3
 8006270:	490d      	ldr	r1, [pc, #52]	; (80062a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006272:	4313      	orrs	r3, r2
 8006274:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006276:	f000 f81d 	bl	80062b4 <HAL_RCC_GetSysClockFreq>
 800627a:	4602      	mov	r2, r0
 800627c:	4b0a      	ldr	r3, [pc, #40]	; (80062a8 <HAL_RCC_ClockConfig+0x1c4>)
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	091b      	lsrs	r3, r3, #4
 8006282:	f003 030f 	and.w	r3, r3, #15
 8006286:	4909      	ldr	r1, [pc, #36]	; (80062ac <HAL_RCC_ClockConfig+0x1c8>)
 8006288:	5ccb      	ldrb	r3, [r1, r3]
 800628a:	fa22 f303 	lsr.w	r3, r2, r3
 800628e:	4a08      	ldr	r2, [pc, #32]	; (80062b0 <HAL_RCC_ClockConfig+0x1cc>)
 8006290:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8006292:	2000      	movs	r0, #0
 8006294:	f013 f9ea 	bl	801966c <HAL_InitTick>

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	40023c00 	.word	0x40023c00
 80062a8:	40023800 	.word	0x40023800
 80062ac:	08025234 	.word	0x08025234
 80062b0:	20000070 	.word	0x20000070

080062b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062b4:	b5b0      	push	{r4, r5, r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80062ba:	2100      	movs	r1, #0
 80062bc:	6079      	str	r1, [r7, #4]
 80062be:	2100      	movs	r1, #0
 80062c0:	60f9      	str	r1, [r7, #12]
 80062c2:	2100      	movs	r1, #0
 80062c4:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80062c6:	2100      	movs	r1, #0
 80062c8:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062ca:	4952      	ldr	r1, [pc, #328]	; (8006414 <HAL_RCC_GetSysClockFreq+0x160>)
 80062cc:	6889      	ldr	r1, [r1, #8]
 80062ce:	f001 010c 	and.w	r1, r1, #12
 80062d2:	2908      	cmp	r1, #8
 80062d4:	d00d      	beq.n	80062f2 <HAL_RCC_GetSysClockFreq+0x3e>
 80062d6:	2908      	cmp	r1, #8
 80062d8:	f200 8094 	bhi.w	8006404 <HAL_RCC_GetSysClockFreq+0x150>
 80062dc:	2900      	cmp	r1, #0
 80062de:	d002      	beq.n	80062e6 <HAL_RCC_GetSysClockFreq+0x32>
 80062e0:	2904      	cmp	r1, #4
 80062e2:	d003      	beq.n	80062ec <HAL_RCC_GetSysClockFreq+0x38>
 80062e4:	e08e      	b.n	8006404 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062e6:	4b4c      	ldr	r3, [pc, #304]	; (8006418 <HAL_RCC_GetSysClockFreq+0x164>)
 80062e8:	60bb      	str	r3, [r7, #8]
       break;
 80062ea:	e08e      	b.n	800640a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062ec:	4b4b      	ldr	r3, [pc, #300]	; (800641c <HAL_RCC_GetSysClockFreq+0x168>)
 80062ee:	60bb      	str	r3, [r7, #8]
      break;
 80062f0:	e08b      	b.n	800640a <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062f2:	4948      	ldr	r1, [pc, #288]	; (8006414 <HAL_RCC_GetSysClockFreq+0x160>)
 80062f4:	6849      	ldr	r1, [r1, #4]
 80062f6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80062fa:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80062fc:	4945      	ldr	r1, [pc, #276]	; (8006414 <HAL_RCC_GetSysClockFreq+0x160>)
 80062fe:	6849      	ldr	r1, [r1, #4]
 8006300:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8006304:	2900      	cmp	r1, #0
 8006306:	d024      	beq.n	8006352 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006308:	4942      	ldr	r1, [pc, #264]	; (8006414 <HAL_RCC_GetSysClockFreq+0x160>)
 800630a:	6849      	ldr	r1, [r1, #4]
 800630c:	0989      	lsrs	r1, r1, #6
 800630e:	4608      	mov	r0, r1
 8006310:	f04f 0100 	mov.w	r1, #0
 8006314:	f240 14ff 	movw	r4, #511	; 0x1ff
 8006318:	f04f 0500 	mov.w	r5, #0
 800631c:	ea00 0204 	and.w	r2, r0, r4
 8006320:	ea01 0305 	and.w	r3, r1, r5
 8006324:	493d      	ldr	r1, [pc, #244]	; (800641c <HAL_RCC_GetSysClockFreq+0x168>)
 8006326:	fb01 f003 	mul.w	r0, r1, r3
 800632a:	2100      	movs	r1, #0
 800632c:	fb01 f102 	mul.w	r1, r1, r2
 8006330:	1844      	adds	r4, r0, r1
 8006332:	493a      	ldr	r1, [pc, #232]	; (800641c <HAL_RCC_GetSysClockFreq+0x168>)
 8006334:	fba2 0101 	umull	r0, r1, r2, r1
 8006338:	1863      	adds	r3, r4, r1
 800633a:	4619      	mov	r1, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	461a      	mov	r2, r3
 8006340:	f04f 0300 	mov.w	r3, #0
 8006344:	f7f9 ffb4 	bl	80002b0 <__aeabi_uldivmod>
 8006348:	4602      	mov	r2, r0
 800634a:	460b      	mov	r3, r1
 800634c:	4613      	mov	r3, r2
 800634e:	60fb      	str	r3, [r7, #12]
 8006350:	e04a      	b.n	80063e8 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006352:	4b30      	ldr	r3, [pc, #192]	; (8006414 <HAL_RCC_GetSysClockFreq+0x160>)
 8006354:	685b      	ldr	r3, [r3, #4]
 8006356:	099b      	lsrs	r3, r3, #6
 8006358:	461a      	mov	r2, r3
 800635a:	f04f 0300 	mov.w	r3, #0
 800635e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006362:	f04f 0100 	mov.w	r1, #0
 8006366:	ea02 0400 	and.w	r4, r2, r0
 800636a:	ea03 0501 	and.w	r5, r3, r1
 800636e:	4620      	mov	r0, r4
 8006370:	4629      	mov	r1, r5
 8006372:	f04f 0200 	mov.w	r2, #0
 8006376:	f04f 0300 	mov.w	r3, #0
 800637a:	014b      	lsls	r3, r1, #5
 800637c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006380:	0142      	lsls	r2, r0, #5
 8006382:	4610      	mov	r0, r2
 8006384:	4619      	mov	r1, r3
 8006386:	1b00      	subs	r0, r0, r4
 8006388:	eb61 0105 	sbc.w	r1, r1, r5
 800638c:	f04f 0200 	mov.w	r2, #0
 8006390:	f04f 0300 	mov.w	r3, #0
 8006394:	018b      	lsls	r3, r1, #6
 8006396:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800639a:	0182      	lsls	r2, r0, #6
 800639c:	1a12      	subs	r2, r2, r0
 800639e:	eb63 0301 	sbc.w	r3, r3, r1
 80063a2:	f04f 0000 	mov.w	r0, #0
 80063a6:	f04f 0100 	mov.w	r1, #0
 80063aa:	00d9      	lsls	r1, r3, #3
 80063ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80063b0:	00d0      	lsls	r0, r2, #3
 80063b2:	4602      	mov	r2, r0
 80063b4:	460b      	mov	r3, r1
 80063b6:	1912      	adds	r2, r2, r4
 80063b8:	eb45 0303 	adc.w	r3, r5, r3
 80063bc:	f04f 0000 	mov.w	r0, #0
 80063c0:	f04f 0100 	mov.w	r1, #0
 80063c4:	0299      	lsls	r1, r3, #10
 80063c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80063ca:	0290      	lsls	r0, r2, #10
 80063cc:	4602      	mov	r2, r0
 80063ce:	460b      	mov	r3, r1
 80063d0:	4610      	mov	r0, r2
 80063d2:	4619      	mov	r1, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	461a      	mov	r2, r3
 80063d8:	f04f 0300 	mov.w	r3, #0
 80063dc:	f7f9 ff68 	bl	80002b0 <__aeabi_uldivmod>
 80063e0:	4602      	mov	r2, r0
 80063e2:	460b      	mov	r3, r1
 80063e4:	4613      	mov	r3, r2
 80063e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80063e8:	4b0a      	ldr	r3, [pc, #40]	; (8006414 <HAL_RCC_GetSysClockFreq+0x160>)
 80063ea:	685b      	ldr	r3, [r3, #4]
 80063ec:	0c1b      	lsrs	r3, r3, #16
 80063ee:	f003 0303 	and.w	r3, r3, #3
 80063f2:	3301      	adds	r3, #1
 80063f4:	005b      	lsls	r3, r3, #1
 80063f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006400:	60bb      	str	r3, [r7, #8]
      break;
 8006402:	e002      	b.n	800640a <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006404:	4b04      	ldr	r3, [pc, #16]	; (8006418 <HAL_RCC_GetSysClockFreq+0x164>)
 8006406:	60bb      	str	r3, [r7, #8]
      break;
 8006408:	bf00      	nop
    }
  }
  return sysclockfreq;
 800640a:	68bb      	ldr	r3, [r7, #8]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bdb0      	pop	{r4, r5, r7, pc}
 8006414:	40023800 	.word	0x40023800
 8006418:	00f42400 	.word	0x00f42400
 800641c:	017d7840 	.word	0x017d7840

08006420 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006420:	b480      	push	{r7}
 8006422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006424:	4b03      	ldr	r3, [pc, #12]	; (8006434 <HAL_RCC_GetHCLKFreq+0x14>)
 8006426:	681b      	ldr	r3, [r3, #0]
}
 8006428:	4618      	mov	r0, r3
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	20000070 	.word	0x20000070

08006438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800643c:	f7ff fff0 	bl	8006420 <HAL_RCC_GetHCLKFreq>
 8006440:	4602      	mov	r2, r0
 8006442:	4b05      	ldr	r3, [pc, #20]	; (8006458 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	0a9b      	lsrs	r3, r3, #10
 8006448:	f003 0307 	and.w	r3, r3, #7
 800644c:	4903      	ldr	r1, [pc, #12]	; (800645c <HAL_RCC_GetPCLK1Freq+0x24>)
 800644e:	5ccb      	ldrb	r3, [r1, r3]
 8006450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006454:	4618      	mov	r0, r3
 8006456:	bd80      	pop	{r7, pc}
 8006458:	40023800 	.word	0x40023800
 800645c:	08025244 	.word	0x08025244

08006460 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006464:	f7ff ffdc 	bl	8006420 <HAL_RCC_GetHCLKFreq>
 8006468:	4602      	mov	r2, r0
 800646a:	4b05      	ldr	r3, [pc, #20]	; (8006480 <HAL_RCC_GetPCLK2Freq+0x20>)
 800646c:	689b      	ldr	r3, [r3, #8]
 800646e:	0b5b      	lsrs	r3, r3, #13
 8006470:	f003 0307 	and.w	r3, r3, #7
 8006474:	4903      	ldr	r1, [pc, #12]	; (8006484 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006476:	5ccb      	ldrb	r3, [r1, r3]
 8006478:	fa22 f303 	lsr.w	r3, r2, r3
}
 800647c:	4618      	mov	r0, r3
 800647e:	bd80      	pop	{r7, pc}
 8006480:	40023800 	.word	0x40023800
 8006484:	08025244 	.word	0x08025244

08006488 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	220f      	movs	r2, #15
 8006496:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006498:	4b12      	ldr	r3, [pc, #72]	; (80064e4 <HAL_RCC_GetClockConfig+0x5c>)
 800649a:	689b      	ldr	r3, [r3, #8]
 800649c:	f003 0203 	and.w	r2, r3, #3
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80064a4:	4b0f      	ldr	r3, [pc, #60]	; (80064e4 <HAL_RCC_GetClockConfig+0x5c>)
 80064a6:	689b      	ldr	r3, [r3, #8]
 80064a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80064b0:	4b0c      	ldr	r3, [pc, #48]	; (80064e4 <HAL_RCC_GetClockConfig+0x5c>)
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80064bc:	4b09      	ldr	r3, [pc, #36]	; (80064e4 <HAL_RCC_GetClockConfig+0x5c>)
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	08db      	lsrs	r3, r3, #3
 80064c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80064ca:	4b07      	ldr	r3, [pc, #28]	; (80064e8 <HAL_RCC_GetClockConfig+0x60>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f003 020f 	and.w	r2, r3, #15
 80064d2:	683b      	ldr	r3, [r7, #0]
 80064d4:	601a      	str	r2, [r3, #0]
}
 80064d6:	bf00      	nop
 80064d8:	370c      	adds	r7, #12
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr
 80064e2:	bf00      	nop
 80064e4:	40023800 	.word	0x40023800
 80064e8:	40023c00 	.word	0x40023c00

080064ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b088      	sub	sp, #32
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80064f4:	2300      	movs	r3, #0
 80064f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80064f8:	2300      	movs	r3, #0
 80064fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80064fc:	2300      	movs	r3, #0
 80064fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006500:	2300      	movs	r3, #0
 8006502:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006504:	2300      	movs	r3, #0
 8006506:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b00      	cmp	r3, #0
 8006512:	d012      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006514:	4b69      	ldr	r3, [pc, #420]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	4a68      	ldr	r2, [pc, #416]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800651a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800651e:	6093      	str	r3, [r2, #8]
 8006520:	4b66      	ldr	r3, [pc, #408]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006522:	689a      	ldr	r2, [r3, #8]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006528:	4964      	ldr	r1, [pc, #400]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800652a:	4313      	orrs	r3, r2
 800652c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006536:	2301      	movs	r3, #1
 8006538:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d017      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006546:	4b5d      	ldr	r3, [pc, #372]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006548:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800654c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006554:	4959      	ldr	r1, [pc, #356]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006556:	4313      	orrs	r3, r2
 8006558:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006560:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006564:	d101      	bne.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006566:	2301      	movs	r3, #1
 8006568:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800656e:	2b00      	cmp	r3, #0
 8006570:	d101      	bne.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006572:	2301      	movs	r3, #1
 8006574:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800657e:	2b00      	cmp	r3, #0
 8006580:	d017      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006582:	4b4e      	ldr	r3, [pc, #312]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006584:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006588:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006590:	494a      	ldr	r1, [pc, #296]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006592:	4313      	orrs	r3, r2
 8006594:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80065a0:	d101      	bne.n	80065a6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80065a2:	2301      	movs	r3, #1
 80065a4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d101      	bne.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80065ae:	2301      	movs	r3, #1
 80065b0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d001      	beq.n	80065c2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80065be:	2301      	movs	r3, #1
 80065c0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0320 	and.w	r3, r3, #32
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f000 808b 	beq.w	80066e6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80065d0:	4b3a      	ldr	r3, [pc, #232]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d4:	4a39      	ldr	r2, [pc, #228]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065da:	6413      	str	r3, [r2, #64]	; 0x40
 80065dc:	4b37      	ldr	r3, [pc, #220]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065e4:	60bb      	str	r3, [r7, #8]
 80065e6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80065e8:	4b35      	ldr	r3, [pc, #212]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a34      	ldr	r2, [pc, #208]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80065ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065f4:	f7fa fa9c 	bl	8000b30 <HAL_GetTick>
 80065f8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80065fa:	e008      	b.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065fc:	f7fa fa98 	bl	8000b30 <HAL_GetTick>
 8006600:	4602      	mov	r2, r0
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	1ad3      	subs	r3, r2, r3
 8006606:	2b64      	cmp	r3, #100	; 0x64
 8006608:	d901      	bls.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e355      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800660e:	4b2c      	ldr	r3, [pc, #176]	; (80066c0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006616:	2b00      	cmp	r3, #0
 8006618:	d0f0      	beq.n	80065fc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800661a:	4b28      	ldr	r3, [pc, #160]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800661c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800661e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006622:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d035      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	429a      	cmp	r2, r3
 8006636:	d02e      	beq.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006638:	4b20      	ldr	r3, [pc, #128]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800663a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800663c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006640:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006642:	4b1e      	ldr	r3, [pc, #120]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006644:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006646:	4a1d      	ldr	r2, [pc, #116]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006648:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800664c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800664e:	4b1b      	ldr	r3, [pc, #108]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006650:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006652:	4a1a      	ldr	r2, [pc, #104]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006654:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006658:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800665a:	4a18      	ldr	r2, [pc, #96]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006660:	4b16      	ldr	r3, [pc, #88]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006664:	f003 0301 	and.w	r3, r3, #1
 8006668:	2b01      	cmp	r3, #1
 800666a:	d114      	bne.n	8006696 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800666c:	f7fa fa60 	bl	8000b30 <HAL_GetTick>
 8006670:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006672:	e00a      	b.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006674:	f7fa fa5c 	bl	8000b30 <HAL_GetTick>
 8006678:	4602      	mov	r2, r0
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	1ad3      	subs	r3, r2, r3
 800667e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006682:	4293      	cmp	r3, r2
 8006684:	d901      	bls.n	800668a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e317      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800668a:	4b0c      	ldr	r3, [pc, #48]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800668c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800668e:	f003 0302 	and.w	r3, r3, #2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d0ee      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800669e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80066a2:	d111      	bne.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80066a4:	4b05      	ldr	r3, [pc, #20]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80066b0:	4b04      	ldr	r3, [pc, #16]	; (80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80066b2:	400b      	ands	r3, r1
 80066b4:	4901      	ldr	r1, [pc, #4]	; (80066bc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	608b      	str	r3, [r1, #8]
 80066ba:	e00b      	b.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80066bc:	40023800 	.word	0x40023800
 80066c0:	40007000 	.word	0x40007000
 80066c4:	0ffffcff 	.word	0x0ffffcff
 80066c8:	4bb0      	ldr	r3, [pc, #704]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066ca:	689b      	ldr	r3, [r3, #8]
 80066cc:	4aaf      	ldr	r2, [pc, #700]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066ce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80066d2:	6093      	str	r3, [r2, #8]
 80066d4:	4bad      	ldr	r3, [pc, #692]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066d6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066e0:	49aa      	ldr	r1, [pc, #680]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066e2:	4313      	orrs	r3, r2
 80066e4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f003 0310 	and.w	r3, r3, #16
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d010      	beq.n	8006714 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066f2:	4ba6      	ldr	r3, [pc, #664]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066f8:	4aa4      	ldr	r2, [pc, #656]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066fe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006702:	4ba2      	ldr	r3, [pc, #648]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006704:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800670c:	499f      	ldr	r1, [pc, #636]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800670e:	4313      	orrs	r3, r2
 8006710:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800671c:	2b00      	cmp	r3, #0
 800671e:	d00a      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006720:	4b9a      	ldr	r3, [pc, #616]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006726:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800672e:	4997      	ldr	r1, [pc, #604]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006730:	4313      	orrs	r3, r2
 8006732:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00a      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006742:	4b92      	ldr	r3, [pc, #584]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006748:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006750:	498e      	ldr	r1, [pc, #568]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006752:	4313      	orrs	r3, r2
 8006754:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006760:	2b00      	cmp	r3, #0
 8006762:	d00a      	beq.n	800677a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006764:	4b89      	ldr	r3, [pc, #548]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800676a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006772:	4986      	ldr	r1, [pc, #536]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006774:	4313      	orrs	r3, r2
 8006776:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006782:	2b00      	cmp	r3, #0
 8006784:	d00a      	beq.n	800679c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006786:	4b81      	ldr	r3, [pc, #516]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800678c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006794:	497d      	ldr	r1, [pc, #500]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006796:	4313      	orrs	r3, r2
 8006798:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d00a      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80067a8:	4b78      	ldr	r3, [pc, #480]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ae:	f023 0203 	bic.w	r2, r3, #3
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b6:	4975      	ldr	r1, [pc, #468]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067b8:	4313      	orrs	r3, r2
 80067ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d00a      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067ca:	4b70      	ldr	r3, [pc, #448]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067d0:	f023 020c 	bic.w	r2, r3, #12
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067d8:	496c      	ldr	r1, [pc, #432]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067da:	4313      	orrs	r3, r2
 80067dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00a      	beq.n	8006802 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067ec:	4b67      	ldr	r3, [pc, #412]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067f2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067fa:	4964      	ldr	r1, [pc, #400]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067fc:	4313      	orrs	r3, r2
 80067fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00a      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800680e:	4b5f      	ldr	r3, [pc, #380]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006814:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800681c:	495b      	ldr	r1, [pc, #364]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800681e:	4313      	orrs	r3, r2
 8006820:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00a      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006830:	4b56      	ldr	r3, [pc, #344]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006832:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006836:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800683e:	4953      	ldr	r1, [pc, #332]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006840:	4313      	orrs	r3, r2
 8006842:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800684e:	2b00      	cmp	r3, #0
 8006850:	d00a      	beq.n	8006868 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006852:	4b4e      	ldr	r3, [pc, #312]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006854:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006858:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006860:	494a      	ldr	r1, [pc, #296]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006862:	4313      	orrs	r3, r2
 8006864:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00a      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006874:	4b45      	ldr	r3, [pc, #276]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800687a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006882:	4942      	ldr	r1, [pc, #264]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006884:	4313      	orrs	r3, r2
 8006886:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00a      	beq.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006896:	4b3d      	ldr	r3, [pc, #244]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006898:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800689c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80068a4:	4939      	ldr	r1, [pc, #228]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d00a      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80068b8:	4b34      	ldr	r3, [pc, #208]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068c6:	4931      	ldr	r1, [pc, #196]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068c8:	4313      	orrs	r3, r2
 80068ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d011      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80068da:	4b2c      	ldr	r3, [pc, #176]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068e0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068e8:	4928      	ldr	r1, [pc, #160]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068f8:	d101      	bne.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80068fa:	2301      	movs	r3, #1
 80068fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f003 0308 	and.w	r3, r3, #8
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800690a:	2301      	movs	r3, #1
 800690c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00a      	beq.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800691a:	4b1c      	ldr	r3, [pc, #112]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800691c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006920:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006928:	4918      	ldr	r1, [pc, #96]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800692a:	4313      	orrs	r3, r2
 800692c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006938:	2b00      	cmp	r3, #0
 800693a:	d00b      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800693c:	4b13      	ldr	r3, [pc, #76]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800693e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006942:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800694c:	490f      	ldr	r1, [pc, #60]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800694e:	4313      	orrs	r3, r2
 8006950:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d005      	beq.n	8006966 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006962:	f040 80d8 	bne.w	8006b16 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006966:	4b09      	ldr	r3, [pc, #36]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	4a08      	ldr	r2, [pc, #32]	; (800698c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800696c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006970:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006972:	f7fa f8dd 	bl	8000b30 <HAL_GetTick>
 8006976:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006978:	e00a      	b.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800697a:	f7fa f8d9 	bl	8000b30 <HAL_GetTick>
 800697e:	4602      	mov	r2, r0
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	1ad3      	subs	r3, r2, r3
 8006984:	2b64      	cmp	r3, #100	; 0x64
 8006986:	d903      	bls.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006988:	2303      	movs	r3, #3
 800698a:	e196      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800698c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006990:	4b6c      	ldr	r3, [pc, #432]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1ee      	bne.n	800697a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d021      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x500>
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d11d      	bne.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80069b0:	4b64      	ldr	r3, [pc, #400]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80069b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069b6:	0c1b      	lsrs	r3, r3, #16
 80069b8:	f003 0303 	and.w	r3, r3, #3
 80069bc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80069be:	4b61      	ldr	r3, [pc, #388]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80069c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069c4:	0e1b      	lsrs	r3, r3, #24
 80069c6:	f003 030f 	and.w	r3, r3, #15
 80069ca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	685b      	ldr	r3, [r3, #4]
 80069d0:	019a      	lsls	r2, r3, #6
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	041b      	lsls	r3, r3, #16
 80069d6:	431a      	orrs	r2, r3
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	061b      	lsls	r3, r3, #24
 80069dc:	431a      	orrs	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	071b      	lsls	r3, r3, #28
 80069e4:	4957      	ldr	r1, [pc, #348]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80069e6:	4313      	orrs	r3, r2
 80069e8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d004      	beq.n	8006a02 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a00:	d00a      	beq.n	8006a18 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d02e      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a16:	d129      	bne.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006a18:	4b4a      	ldr	r3, [pc, #296]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a1e:	0c1b      	lsrs	r3, r3, #16
 8006a20:	f003 0303 	and.w	r3, r3, #3
 8006a24:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a26:	4b47      	ldr	r3, [pc, #284]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a2c:	0f1b      	lsrs	r3, r3, #28
 8006a2e:	f003 0307 	and.w	r3, r3, #7
 8006a32:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	685b      	ldr	r3, [r3, #4]
 8006a38:	019a      	lsls	r2, r3, #6
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	041b      	lsls	r3, r3, #16
 8006a3e:	431a      	orrs	r2, r3
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	061b      	lsls	r3, r3, #24
 8006a46:	431a      	orrs	r2, r3
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	071b      	lsls	r3, r3, #28
 8006a4c:	493d      	ldr	r1, [pc, #244]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006a54:	4b3b      	ldr	r3, [pc, #236]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a5a:	f023 021f 	bic.w	r2, r3, #31
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a62:	3b01      	subs	r3, #1
 8006a64:	4937      	ldr	r1, [pc, #220]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a66:	4313      	orrs	r3, r2
 8006a68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d01d      	beq.n	8006ab4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a78:	4b32      	ldr	r3, [pc, #200]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a7a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a7e:	0e1b      	lsrs	r3, r3, #24
 8006a80:	f003 030f 	and.w	r3, r3, #15
 8006a84:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a86:	4b2f      	ldr	r3, [pc, #188]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a8c:	0f1b      	lsrs	r3, r3, #28
 8006a8e:	f003 0307 	and.w	r3, r3, #7
 8006a92:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	019a      	lsls	r2, r3, #6
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	691b      	ldr	r3, [r3, #16]
 8006a9e:	041b      	lsls	r3, r3, #16
 8006aa0:	431a      	orrs	r2, r3
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	061b      	lsls	r3, r3, #24
 8006aa6:	431a      	orrs	r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	071b      	lsls	r3, r3, #28
 8006aac:	4925      	ldr	r1, [pc, #148]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d011      	beq.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	685b      	ldr	r3, [r3, #4]
 8006ac4:	019a      	lsls	r2, r3, #6
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	041b      	lsls	r3, r3, #16
 8006acc:	431a      	orrs	r2, r3
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	68db      	ldr	r3, [r3, #12]
 8006ad2:	061b      	lsls	r3, r3, #24
 8006ad4:	431a      	orrs	r2, r3
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	689b      	ldr	r3, [r3, #8]
 8006ada:	071b      	lsls	r3, r3, #28
 8006adc:	4919      	ldr	r1, [pc, #100]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ae4:	4b17      	ldr	r3, [pc, #92]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a16      	ldr	r2, [pc, #88]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006aea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006aee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006af0:	f7fa f81e 	bl	8000b30 <HAL_GetTick>
 8006af4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006af6:	e008      	b.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006af8:	f7fa f81a 	bl	8000b30 <HAL_GetTick>
 8006afc:	4602      	mov	r2, r0
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	1ad3      	subs	r3, r2, r3
 8006b02:	2b64      	cmp	r3, #100	; 0x64
 8006b04:	d901      	bls.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e0d7      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006b0a:	4b0e      	ldr	r3, [pc, #56]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d0f0      	beq.n	8006af8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006b16:	69bb      	ldr	r3, [r7, #24]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	f040 80cd 	bne.w	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006b1e:	4b09      	ldr	r3, [pc, #36]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	4a08      	ldr	r2, [pc, #32]	; (8006b44 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b2a:	f7fa f801 	bl	8000b30 <HAL_GetTick>
 8006b2e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b30:	e00a      	b.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b32:	f7f9 fffd 	bl	8000b30 <HAL_GetTick>
 8006b36:	4602      	mov	r2, r0
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	1ad3      	subs	r3, r2, r3
 8006b3c:	2b64      	cmp	r3, #100	; 0x64
 8006b3e:	d903      	bls.n	8006b48 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e0ba      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006b44:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b48:	4b5e      	ldr	r3, [pc, #376]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b54:	d0ed      	beq.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d003      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d009      	beq.n	8006b7e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d02e      	beq.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d12a      	bne.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006b7e:	4b51      	ldr	r3, [pc, #324]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b84:	0c1b      	lsrs	r3, r3, #16
 8006b86:	f003 0303 	and.w	r3, r3, #3
 8006b8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b8c:	4b4d      	ldr	r3, [pc, #308]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b92:	0f1b      	lsrs	r3, r3, #28
 8006b94:	f003 0307 	and.w	r3, r3, #7
 8006b98:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	695b      	ldr	r3, [r3, #20]
 8006b9e:	019a      	lsls	r2, r3, #6
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	041b      	lsls	r3, r3, #16
 8006ba4:	431a      	orrs	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	061b      	lsls	r3, r3, #24
 8006bac:	431a      	orrs	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	071b      	lsls	r3, r3, #28
 8006bb2:	4944      	ldr	r1, [pc, #272]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006bba:	4b42      	ldr	r3, [pc, #264]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bc0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	021b      	lsls	r3, r3, #8
 8006bcc:	493d      	ldr	r1, [pc, #244]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d022      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006be4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006be8:	d11d      	bne.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006bea:	4b36      	ldr	r3, [pc, #216]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf0:	0e1b      	lsrs	r3, r3, #24
 8006bf2:	f003 030f 	and.w	r3, r3, #15
 8006bf6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006bf8:	4b32      	ldr	r3, [pc, #200]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006bfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bfe:	0f1b      	lsrs	r3, r3, #28
 8006c00:	f003 0307 	and.w	r3, r3, #7
 8006c04:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	695b      	ldr	r3, [r3, #20]
 8006c0a:	019a      	lsls	r2, r3, #6
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a1b      	ldr	r3, [r3, #32]
 8006c10:	041b      	lsls	r3, r3, #16
 8006c12:	431a      	orrs	r2, r3
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	061b      	lsls	r3, r3, #24
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	071b      	lsls	r3, r3, #28
 8006c1e:	4929      	ldr	r1, [pc, #164]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c20:	4313      	orrs	r3, r2
 8006c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	f003 0308 	and.w	r3, r3, #8
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d028      	beq.n	8006c84 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c32:	4b24      	ldr	r3, [pc, #144]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c38:	0e1b      	lsrs	r3, r3, #24
 8006c3a:	f003 030f 	and.w	r3, r3, #15
 8006c3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006c40:	4b20      	ldr	r3, [pc, #128]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c46:	0c1b      	lsrs	r3, r3, #16
 8006c48:	f003 0303 	and.w	r3, r3, #3
 8006c4c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	019a      	lsls	r2, r3, #6
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	041b      	lsls	r3, r3, #16
 8006c58:	431a      	orrs	r2, r3
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	061b      	lsls	r3, r3, #24
 8006c5e:	431a      	orrs	r2, r3
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	69db      	ldr	r3, [r3, #28]
 8006c64:	071b      	lsls	r3, r3, #28
 8006c66:	4917      	ldr	r1, [pc, #92]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006c6e:	4b15      	ldr	r3, [pc, #84]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7c:	4911      	ldr	r1, [pc, #68]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006c84:	4b0f      	ldr	r3, [pc, #60]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a0e      	ldr	r2, [pc, #56]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c90:	f7f9 ff4e 	bl	8000b30 <HAL_GetTick>
 8006c94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c96:	e008      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006c98:	f7f9 ff4a 	bl	8000b30 <HAL_GetTick>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	1ad3      	subs	r3, r2, r3
 8006ca2:	2b64      	cmp	r3, #100	; 0x64
 8006ca4:	d901      	bls.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e007      	b.n	8006cba <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006caa:	4b06      	ldr	r3, [pc, #24]	; (8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006cb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006cb6:	d1ef      	bne.n	8006c98 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3720      	adds	r7, #32
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	40023800 	.word	0x40023800

08006cc8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b087      	sub	sp, #28
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006ce6:	f040 808c 	bne.w	8006e02 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006cea:	4b95      	ldr	r3, [pc, #596]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cf0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006cf8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d00:	d07c      	beq.n	8006dfc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006d08:	d87d      	bhi.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8006d0a:	68bb      	ldr	r3, [r7, #8]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d004      	beq.n	8006d1a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d16:	d039      	beq.n	8006d8c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006d18:	e075      	b.n	8006e06 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006d1a:	4b89      	ldr	r3, [pc, #548]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d108      	bne.n	8006d38 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d26:	4b86      	ldr	r3, [pc, #536]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d2e:	4a85      	ldr	r2, [pc, #532]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d34:	613b      	str	r3, [r7, #16]
 8006d36:	e007      	b.n	8006d48 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006d38:	4b81      	ldr	r3, [pc, #516]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006d3a:	685b      	ldr	r3, [r3, #4]
 8006d3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d40:	4a81      	ldr	r2, [pc, #516]	; (8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d46:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006d48:	4b7d      	ldr	r3, [pc, #500]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d4e:	0e1b      	lsrs	r3, r3, #24
 8006d50:	f003 030f 	and.w	r3, r3, #15
 8006d54:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006d56:	4b7a      	ldr	r3, [pc, #488]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d5c:	099b      	lsrs	r3, r3, #6
 8006d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	fb02 f203 	mul.w	r2, r2, r3
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d6e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006d70:	4b73      	ldr	r3, [pc, #460]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006d72:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d76:	0a1b      	lsrs	r3, r3, #8
 8006d78:	f003 031f 	and.w	r3, r3, #31
 8006d7c:	3301      	adds	r3, #1
 8006d7e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d88:	617b      	str	r3, [r7, #20]
        break;
 8006d8a:	e03d      	b.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006d8c:	4b6c      	ldr	r3, [pc, #432]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d108      	bne.n	8006daa <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d98:	4b69      	ldr	r3, [pc, #420]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006d9a:	685b      	ldr	r3, [r3, #4]
 8006d9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006da0:	4a68      	ldr	r2, [pc, #416]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006da6:	613b      	str	r3, [r7, #16]
 8006da8:	e007      	b.n	8006dba <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006daa:	4b65      	ldr	r3, [pc, #404]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006db2:	4a65      	ldr	r2, [pc, #404]	; (8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006db8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006dba:	4b61      	ldr	r3, [pc, #388]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006dbc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dc0:	0e1b      	lsrs	r3, r3, #24
 8006dc2:	f003 030f 	and.w	r3, r3, #15
 8006dc6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006dc8:	4b5d      	ldr	r3, [pc, #372]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006dca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006dce:	099b      	lsrs	r3, r3, #6
 8006dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	fb02 f203 	mul.w	r2, r2, r3
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006de2:	4b57      	ldr	r3, [pc, #348]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006de4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006de8:	f003 031f 	and.w	r3, r3, #31
 8006dec:	3301      	adds	r3, #1
 8006dee:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006df8:	617b      	str	r3, [r7, #20]
        break;
 8006dfa:	e005      	b.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006dfc:	4b53      	ldr	r3, [pc, #332]	; (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006dfe:	617b      	str	r3, [r7, #20]
        break;
 8006e00:	e002      	b.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 8006e02:	bf00      	nop
 8006e04:	e000      	b.n	8006e08 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 8006e06:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006e0e:	f040 808c 	bne.w	8006f2a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006e12:	4b4b      	ldr	r3, [pc, #300]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e18:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8006e1a:	68bb      	ldr	r3, [r7, #8]
 8006e1c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006e20:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e28:	d07c      	beq.n	8006f24 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e30:	d87d      	bhi.n	8006f2e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d004      	beq.n	8006e42 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e3e:	d039      	beq.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006e40:	e075      	b.n	8006f2e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006e42:	4b3f      	ldr	r3, [pc, #252]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d108      	bne.n	8006e60 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006e4e:	4b3c      	ldr	r3, [pc, #240]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006e50:	685b      	ldr	r3, [r3, #4]
 8006e52:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e56:	4a3b      	ldr	r2, [pc, #236]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e5c:	613b      	str	r3, [r7, #16]
 8006e5e:	e007      	b.n	8006e70 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006e60:	4b37      	ldr	r3, [pc, #220]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006e62:	685b      	ldr	r3, [r3, #4]
 8006e64:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e68:	4a37      	ldr	r2, [pc, #220]	; (8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e6e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006e70:	4b33      	ldr	r3, [pc, #204]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e76:	0e1b      	lsrs	r3, r3, #24
 8006e78:	f003 030f 	and.w	r3, r3, #15
 8006e7c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006e7e:	4b30      	ldr	r3, [pc, #192]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e84:	099b      	lsrs	r3, r3, #6
 8006e86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	fb02 f203 	mul.w	r2, r2, r3
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e96:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006e98:	4b29      	ldr	r3, [pc, #164]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e9e:	0a1b      	lsrs	r3, r3, #8
 8006ea0:	f003 031f 	and.w	r3, r3, #31
 8006ea4:	3301      	adds	r3, #1
 8006ea6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006ea8:	697a      	ldr	r2, [r7, #20]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb0:	617b      	str	r3, [r7, #20]
        break;
 8006eb2:	e03d      	b.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006eb4:	4b22      	ldr	r3, [pc, #136]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d108      	bne.n	8006ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006ec0:	4b1f      	ldr	r3, [pc, #124]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ec8:	4a1e      	ldr	r2, [pc, #120]	; (8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8006eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ece:	613b      	str	r3, [r7, #16]
 8006ed0:	e007      	b.n	8006ee2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006ed2:	4b1b      	ldr	r3, [pc, #108]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eda:	4a1b      	ldr	r2, [pc, #108]	; (8006f48 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8006edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ee0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006ee2:	4b17      	ldr	r3, [pc, #92]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006ee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ee8:	0e1b      	lsrs	r3, r3, #24
 8006eea:	f003 030f 	and.w	r3, r3, #15
 8006eee:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006ef0:	4b13      	ldr	r3, [pc, #76]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ef6:	099b      	lsrs	r3, r3, #6
 8006ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006efc:	693a      	ldr	r2, [r7, #16]
 8006efe:	fb02 f203 	mul.w	r2, r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f08:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006f0a:	4b0d      	ldr	r3, [pc, #52]	; (8006f40 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8006f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f10:	f003 031f 	and.w	r3, r3, #31
 8006f14:	3301      	adds	r3, #1
 8006f16:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006f18:	697a      	ldr	r2, [r7, #20]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f20:	617b      	str	r3, [r7, #20]
        break;
 8006f22:	e005      	b.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006f24:	4b09      	ldr	r3, [pc, #36]	; (8006f4c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8006f26:	617b      	str	r3, [r7, #20]
        break;
 8006f28:	e002      	b.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 8006f2a:	bf00      	nop
 8006f2c:	e000      	b.n	8006f30 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 8006f2e:	bf00      	nop

  return frequency;
 8006f30:	697b      	ldr	r3, [r7, #20]
}
 8006f32:	4618      	mov	r0, r3
 8006f34:	371c      	adds	r7, #28
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	40023800 	.word	0x40023800
 8006f44:	00f42400 	.word	0x00f42400
 8006f48:	017d7840 	.word	0x017d7840
 8006f4c:	00bb8000 	.word	0x00bb8000

08006f50 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b082      	sub	sp, #8
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d101      	bne.n	8006f62 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e06b      	b.n	800703a <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	7f5b      	ldrb	r3, [r3, #29]
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d105      	bne.n	8006f78 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f012 f836 	bl	8018fe4 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	22ca      	movs	r2, #202	; 0xca
 8006f84:	625a      	str	r2, [r3, #36]	; 0x24
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	2253      	movs	r2, #83	; 0x53
 8006f8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fb00 	bl	8007594 <RTC_EnterInitMode>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d008      	beq.n	8006fac <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	22ff      	movs	r2, #255	; 0xff
 8006fa0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2204      	movs	r2, #4
 8006fa6:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e046      	b.n	800703a <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	6899      	ldr	r1, [r3, #8]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681a      	ldr	r2, [r3, #0]
 8006fb6:	4b23      	ldr	r3, [pc, #140]	; (8007044 <HAL_RTC_Init+0xf4>)
 8006fb8:	400b      	ands	r3, r1
 8006fba:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	6899      	ldr	r1, [r3, #8]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	685a      	ldr	r2, [r3, #4]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	691b      	ldr	r3, [r3, #16]
 8006fca:	431a      	orrs	r2, r3
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	695b      	ldr	r3, [r3, #20]
 8006fd0:	431a      	orrs	r2, r3
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	430a      	orrs	r2, r1
 8006fd8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	687a      	ldr	r2, [r7, #4]
 8006fe0:	68d2      	ldr	r2, [r2, #12]
 8006fe2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	6919      	ldr	r1, [r3, #16]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	041a      	lsls	r2, r3, #16
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	430a      	orrs	r2, r1
 8006ff6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68da      	ldr	r2, [r3, #12]
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007006:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f022 0208 	bic.w	r2, r2, #8
 8007016:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	699a      	ldr	r2, [r3, #24]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	430a      	orrs	r2, r1
 8007028:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	22ff      	movs	r2, #255	; 0xff
 8007030:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2201      	movs	r2, #1
 8007036:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007038:	2300      	movs	r3, #0
  }
}
 800703a:	4618      	mov	r0, r3
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
 8007042:	bf00      	nop
 8007044:	ff8fffbf 	.word	0xff8fffbf

08007048 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007048:	b590      	push	{r4, r7, lr}
 800704a:	b087      	sub	sp, #28
 800704c:	af00      	add	r7, sp, #0
 800704e:	60f8      	str	r0, [r7, #12]
 8007050:	60b9      	str	r1, [r7, #8]
 8007052:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007054:	2300      	movs	r3, #0
 8007056:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	7f1b      	ldrb	r3, [r3, #28]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d101      	bne.n	8007064 <HAL_RTC_SetTime+0x1c>
 8007060:	2302      	movs	r3, #2
 8007062:	e0a8      	b.n	80071b6 <HAL_RTC_SetTime+0x16e>
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2201      	movs	r2, #1
 8007068:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2202      	movs	r2, #2
 800706e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d126      	bne.n	80070c4 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007080:	2b00      	cmp	r3, #0
 8007082:	d102      	bne.n	800708a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	2200      	movs	r2, #0
 8007088:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	4618      	mov	r0, r3
 8007090:	f000 faac 	bl	80075ec <RTC_ByteToBcd2>
 8007094:	4603      	mov	r3, r0
 8007096:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	785b      	ldrb	r3, [r3, #1]
 800709c:	4618      	mov	r0, r3
 800709e:	f000 faa5 	bl	80075ec <RTC_ByteToBcd2>
 80070a2:	4603      	mov	r3, r0
 80070a4:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80070a6:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	789b      	ldrb	r3, [r3, #2]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 fa9d 	bl	80075ec <RTC_ByteToBcd2>
 80070b2:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80070b4:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	7b1b      	ldrb	r3, [r3, #12]
 80070bc:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80070be:	4313      	orrs	r3, r2
 80070c0:	617b      	str	r3, [r7, #20]
 80070c2:	e018      	b.n	80070f6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d102      	bne.n	80070d8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80070d2:	68bb      	ldr	r3, [r7, #8]
 80070d4:	2200      	movs	r2, #0
 80070d6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	785b      	ldrb	r3, [r3, #1]
 80070e2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80070e4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80070e6:	68ba      	ldr	r2, [r7, #8]
 80070e8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80070ea:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	7b1b      	ldrb	r3, [r3, #12]
 80070f0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80070f2:	4313      	orrs	r3, r2
 80070f4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	22ca      	movs	r2, #202	; 0xca
 80070fc:	625a      	str	r2, [r3, #36]	; 0x24
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2253      	movs	r2, #83	; 0x53
 8007104:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f000 fa44 	bl	8007594 <RTC_EnterInitMode>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00b      	beq.n	800712a <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	22ff      	movs	r2, #255	; 0xff
 8007118:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2204      	movs	r2, #4
 800711e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	2200      	movs	r2, #0
 8007124:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e045      	b.n	80071b6 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	6979      	ldr	r1, [r7, #20]
 8007130:	4b23      	ldr	r3, [pc, #140]	; (80071c0 <HAL_RTC_SetTime+0x178>)
 8007132:	400b      	ands	r3, r1
 8007134:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	689a      	ldr	r2, [r3, #8]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007144:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6899      	ldr	r1, [r3, #8]
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	691a      	ldr	r2, [r3, #16]
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	695b      	ldr	r3, [r3, #20]
 8007154:	431a      	orrs	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	430a      	orrs	r2, r1
 800715c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	68da      	ldr	r2, [r3, #12]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800716c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	f003 0320 	and.w	r3, r3, #32
 8007178:	2b00      	cmp	r3, #0
 800717a:	d111      	bne.n	80071a0 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800717c:	68f8      	ldr	r0, [r7, #12]
 800717e:	f000 f9e1 	bl	8007544 <HAL_RTC_WaitForSynchro>
 8007182:	4603      	mov	r3, r0
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00b      	beq.n	80071a0 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	22ff      	movs	r2, #255	; 0xff
 800718e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2204      	movs	r2, #4
 8007194:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2200      	movs	r2, #0
 800719a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e00a      	b.n	80071b6 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	22ff      	movs	r2, #255	; 0xff
 80071a6:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2201      	movs	r2, #1
 80071ac:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80071b4:	2300      	movs	r3, #0
  }
}
 80071b6:	4618      	mov	r0, r3
 80071b8:	371c      	adds	r7, #28
 80071ba:	46bd      	mov	sp, r7
 80071bc:	bd90      	pop	{r4, r7, pc}
 80071be:	bf00      	nop
 80071c0:	007f7f7f 	.word	0x007f7f7f

080071c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80071c4:	b590      	push	{r4, r7, lr}
 80071c6:	b087      	sub	sp, #28
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	60f8      	str	r0, [r7, #12]
 80071cc:	60b9      	str	r1, [r7, #8]
 80071ce:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80071d0:	2300      	movs	r3, #0
 80071d2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	7f1b      	ldrb	r3, [r3, #28]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d101      	bne.n	80071e0 <HAL_RTC_SetDate+0x1c>
 80071dc:	2302      	movs	r3, #2
 80071de:	e092      	b.n	8007306 <HAL_RTC_SetDate+0x142>
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2201      	movs	r2, #1
 80071e4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2202      	movs	r2, #2
 80071ea:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10e      	bne.n	8007210 <HAL_RTC_SetDate+0x4c>
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	785b      	ldrb	r3, [r3, #1]
 80071f6:	f003 0310 	and.w	r3, r3, #16
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d008      	beq.n	8007210 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	785b      	ldrb	r3, [r3, #1]
 8007202:	f023 0310 	bic.w	r3, r3, #16
 8007206:	b2db      	uxtb	r3, r3
 8007208:	330a      	adds	r3, #10
 800720a:	b2da      	uxtb	r2, r3
 800720c:	68bb      	ldr	r3, [r7, #8]
 800720e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d11c      	bne.n	8007250 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007216:	68bb      	ldr	r3, [r7, #8]
 8007218:	78db      	ldrb	r3, [r3, #3]
 800721a:	4618      	mov	r0, r3
 800721c:	f000 f9e6 	bl	80075ec <RTC_ByteToBcd2>
 8007220:	4603      	mov	r3, r0
 8007222:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007224:	68bb      	ldr	r3, [r7, #8]
 8007226:	785b      	ldrb	r3, [r3, #1]
 8007228:	4618      	mov	r0, r3
 800722a:	f000 f9df 	bl	80075ec <RTC_ByteToBcd2>
 800722e:	4603      	mov	r3, r0
 8007230:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007232:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	789b      	ldrb	r3, [r3, #2]
 8007238:	4618      	mov	r0, r3
 800723a:	f000 f9d7 	bl	80075ec <RTC_ByteToBcd2>
 800723e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007240:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800724a:	4313      	orrs	r3, r2
 800724c:	617b      	str	r3, [r7, #20]
 800724e:	e00e      	b.n	800726e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	78db      	ldrb	r3, [r3, #3]
 8007254:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	785b      	ldrb	r3, [r3, #1]
 800725a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800725c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007262:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	781b      	ldrb	r3, [r3, #0]
 8007268:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800726a:	4313      	orrs	r3, r2
 800726c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	22ca      	movs	r2, #202	; 0xca
 8007274:	625a      	str	r2, [r3, #36]	; 0x24
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	2253      	movs	r2, #83	; 0x53
 800727c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800727e:	68f8      	ldr	r0, [r7, #12]
 8007280:	f000 f988 	bl	8007594 <RTC_EnterInitMode>
 8007284:	4603      	mov	r3, r0
 8007286:	2b00      	cmp	r3, #0
 8007288:	d00b      	beq.n	80072a2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	22ff      	movs	r2, #255	; 0xff
 8007290:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2204      	movs	r2, #4
 8007296:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2200      	movs	r2, #0
 800729c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800729e:	2301      	movs	r3, #1
 80072a0:	e031      	b.n	8007306 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	6979      	ldr	r1, [r7, #20]
 80072a8:	4b19      	ldr	r3, [pc, #100]	; (8007310 <HAL_RTC_SetDate+0x14c>)
 80072aa:	400b      	ands	r3, r1
 80072ac:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68da      	ldr	r2, [r3, #12]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80072bc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	f003 0320 	and.w	r3, r3, #32
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d111      	bne.n	80072f0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f000 f939 	bl	8007544 <HAL_RTC_WaitForSynchro>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d00b      	beq.n	80072f0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	22ff      	movs	r2, #255	; 0xff
 80072de:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2204      	movs	r2, #4
 80072e4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	2200      	movs	r2, #0
 80072ea:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80072ec:	2301      	movs	r3, #1
 80072ee:	e00a      	b.n	8007306 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	22ff      	movs	r2, #255	; 0xff
 80072f6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2201      	movs	r2, #1
 80072fc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8007304:	2300      	movs	r3, #0
  }
}
 8007306:	4618      	mov	r0, r3
 8007308:	371c      	adds	r7, #28
 800730a:	46bd      	mov	sp, r7
 800730c:	bd90      	pop	{r4, r7, pc}
 800730e:	bf00      	nop
 8007310:	00ffff3f 	.word	0x00ffff3f

08007314 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007314:	b590      	push	{r4, r7, lr}
 8007316:	b089      	sub	sp, #36	; 0x24
 8007318:	af00      	add	r7, sp, #0
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	60b9      	str	r1, [r7, #8]
 800731e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8007320:	2300      	movs	r3, #0
 8007322:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8007324:	2300      	movs	r3, #0
 8007326:	61fb      	str	r3, [r7, #28]
 8007328:	2300      	movs	r3, #0
 800732a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	7f1b      	ldrb	r3, [r3, #28]
 8007330:	2b01      	cmp	r3, #1
 8007332:	d101      	bne.n	8007338 <HAL_RTC_SetAlarm+0x24>
 8007334:	2302      	movs	r3, #2
 8007336:	e101      	b.n	800753c <HAL_RTC_SetAlarm+0x228>
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2201      	movs	r2, #1
 800733c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	2202      	movs	r2, #2
 8007342:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d137      	bne.n	80073ba <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007354:	2b00      	cmp	r3, #0
 8007356:	d102      	bne.n	800735e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007358:	68bb      	ldr	r3, [r7, #8]
 800735a:	2200      	movs	r2, #0
 800735c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	4618      	mov	r0, r3
 8007364:	f000 f942 	bl	80075ec <RTC_ByteToBcd2>
 8007368:	4603      	mov	r3, r0
 800736a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800736c:	68bb      	ldr	r3, [r7, #8]
 800736e:	785b      	ldrb	r3, [r3, #1]
 8007370:	4618      	mov	r0, r3
 8007372:	f000 f93b 	bl	80075ec <RTC_ByteToBcd2>
 8007376:	4603      	mov	r3, r0
 8007378:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800737a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800737c:	68bb      	ldr	r3, [r7, #8]
 800737e:	789b      	ldrb	r3, [r3, #2]
 8007380:	4618      	mov	r0, r3
 8007382:	f000 f933 	bl	80075ec <RTC_ByteToBcd2>
 8007386:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007388:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	7b1b      	ldrb	r3, [r3, #12]
 8007390:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007392:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800739c:	4618      	mov	r0, r3
 800739e:	f000 f925 	bl	80075ec <RTC_ByteToBcd2>
 80073a2:	4603      	mov	r3, r0
 80073a4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80073a6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80073ae:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80073b4:	4313      	orrs	r3, r2
 80073b6:	61fb      	str	r3, [r7, #28]
 80073b8:	e023      	b.n	8007402 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d102      	bne.n	80073ce <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	2200      	movs	r2, #0
 80073cc:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	785b      	ldrb	r3, [r3, #1]
 80073d8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80073da:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80073dc:	68ba      	ldr	r2, [r7, #8]
 80073de:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80073e0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80073e2:	68bb      	ldr	r3, [r7, #8]
 80073e4:	7b1b      	ldrb	r3, [r3, #12]
 80073e6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80073e8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80073ea:	68bb      	ldr	r3, [r7, #8]
 80073ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80073f0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80073f2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80073f8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80073fe:	4313      	orrs	r3, r2
 8007400:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	685a      	ldr	r2, [r3, #4]
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	69db      	ldr	r3, [r3, #28]
 800740a:	4313      	orrs	r3, r2
 800740c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	22ca      	movs	r2, #202	; 0xca
 8007414:	625a      	str	r2, [r3, #36]	; 0x24
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	2253      	movs	r2, #83	; 0x53
 800741c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 800741e:	68bb      	ldr	r3, [r7, #8]
 8007420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007426:	d13f      	bne.n	80074a8 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	689a      	ldr	r2, [r3, #8]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007436:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689a      	ldr	r2, [r3, #8]
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007446:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007448:	f7f9 fb72 	bl	8000b30 <HAL_GetTick>
 800744c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800744e:	e013      	b.n	8007478 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007450:	f7f9 fb6e 	bl	8000b30 <HAL_GetTick>
 8007454:	4602      	mov	r2, r0
 8007456:	69bb      	ldr	r3, [r7, #24]
 8007458:	1ad3      	subs	r3, r2, r3
 800745a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800745e:	d90b      	bls.n	8007478 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	22ff      	movs	r2, #255	; 0xff
 8007466:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2203      	movs	r2, #3
 800746c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007474:	2303      	movs	r3, #3
 8007476:	e061      	b.n	800753c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	68db      	ldr	r3, [r3, #12]
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	2b00      	cmp	r3, #0
 8007484:	d0e4      	beq.n	8007450 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	69fa      	ldr	r2, [r7, #28]
 800748c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	689a      	ldr	r2, [r3, #8]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074a4:	609a      	str	r2, [r3, #8]
 80074a6:	e03e      	b.n	8007526 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	689a      	ldr	r2, [r3, #8]
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80074b6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	689a      	ldr	r2, [r3, #8]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074c6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80074c8:	f7f9 fb32 	bl	8000b30 <HAL_GetTick>
 80074cc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80074ce:	e013      	b.n	80074f8 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80074d0:	f7f9 fb2e 	bl	8000b30 <HAL_GetTick>
 80074d4:	4602      	mov	r2, r0
 80074d6:	69bb      	ldr	r3, [r7, #24]
 80074d8:	1ad3      	subs	r3, r2, r3
 80074da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074de:	d90b      	bls.n	80074f8 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	22ff      	movs	r2, #255	; 0xff
 80074e6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2203      	movs	r2, #3
 80074ec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2200      	movs	r2, #0
 80074f2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80074f4:	2303      	movs	r3, #3
 80074f6:	e021      	b.n	800753c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	2b00      	cmp	r3, #0
 8007504:	d0e4      	beq.n	80074d0 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	69fa      	ldr	r2, [r7, #28]
 800750c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	697a      	ldr	r2, [r7, #20]
 8007514:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	689a      	ldr	r2, [r3, #8]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007524:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	22ff      	movs	r2, #255	; 0xff
 800752c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2201      	movs	r2, #1
 8007532:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2200      	movs	r2, #0
 8007538:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3724      	adds	r7, #36	; 0x24
 8007540:	46bd      	mov	sp, r7
 8007542:	bd90      	pop	{r4, r7, pc}

08007544 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b084      	sub	sp, #16
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800754c:	2300      	movs	r3, #0
 800754e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	68da      	ldr	r2, [r3, #12]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800755e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007560:	f7f9 fae6 	bl	8000b30 <HAL_GetTick>
 8007564:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007566:	e009      	b.n	800757c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007568:	f7f9 fae2 	bl	8000b30 <HAL_GetTick>
 800756c:	4602      	mov	r2, r0
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	1ad3      	subs	r3, r2, r3
 8007572:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007576:	d901      	bls.n	800757c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007578:	2303      	movs	r3, #3
 800757a:	e007      	b.n	800758c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	68db      	ldr	r3, [r3, #12]
 8007582:	f003 0320 	and.w	r3, r3, #32
 8007586:	2b00      	cmp	r3, #0
 8007588:	d0ee      	beq.n	8007568 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800758a:	2300      	movs	r3, #0
}
 800758c:	4618      	mov	r0, r3
 800758e:	3710      	adds	r7, #16
 8007590:	46bd      	mov	sp, r7
 8007592:	bd80      	pop	{r7, pc}

08007594 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b084      	sub	sp, #16
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800759c:	2300      	movs	r3, #0
 800759e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	68db      	ldr	r3, [r3, #12]
 80075a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d119      	bne.n	80075e2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f04f 32ff 	mov.w	r2, #4294967295
 80075b6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80075b8:	f7f9 faba 	bl	8000b30 <HAL_GetTick>
 80075bc:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80075be:	e009      	b.n	80075d4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80075c0:	f7f9 fab6 	bl	8000b30 <HAL_GetTick>
 80075c4:	4602      	mov	r2, r0
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	1ad3      	subs	r3, r2, r3
 80075ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075ce:	d901      	bls.n	80075d4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80075d0:	2303      	movs	r3, #3
 80075d2:	e007      	b.n	80075e4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	68db      	ldr	r3, [r3, #12]
 80075da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d0ee      	beq.n	80075c0 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80075ec:	b480      	push	{r7}
 80075ee:	b085      	sub	sp, #20
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	4603      	mov	r3, r0
 80075f4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80075f6:	2300      	movs	r3, #0
 80075f8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80075fa:	e005      	b.n	8007608 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	3301      	adds	r3, #1
 8007600:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8007602:	79fb      	ldrb	r3, [r7, #7]
 8007604:	3b0a      	subs	r3, #10
 8007606:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8007608:	79fb      	ldrb	r3, [r7, #7]
 800760a:	2b09      	cmp	r3, #9
 800760c:	d8f6      	bhi.n	80075fc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	b2db      	uxtb	r3, r3
 8007612:	011b      	lsls	r3, r3, #4
 8007614:	b2da      	uxtb	r2, r3
 8007616:	79fb      	ldrb	r3, [r7, #7]
 8007618:	4313      	orrs	r3, r2
 800761a:	b2db      	uxtb	r3, r3
}
 800761c:	4618      	mov	r0, r3
 800761e:	3714      	adds	r7, #20
 8007620:	46bd      	mov	sp, r7
 8007622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007626:	4770      	bx	lr

08007628 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8007628:	b480      	push	{r7}
 800762a:	b087      	sub	sp, #28
 800762c:	af00      	add	r7, sp, #0
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007634:	2300      	movs	r3, #0
 8007636:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	7f1b      	ldrb	r3, [r3, #28]
 800763c:	2b01      	cmp	r3, #1
 800763e:	d101      	bne.n	8007644 <HAL_RTCEx_SetTimeStamp+0x1c>
 8007640:	2302      	movs	r3, #2
 8007642:	e03e      	b.n	80076c2 <HAL_RTCEx_SetTimeStamp+0x9a>
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	2201      	movs	r2, #1
 8007648:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	2202      	movs	r2, #2
 800764e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	689a      	ldr	r2, [r3, #8]
 8007656:	4b1e      	ldr	r3, [pc, #120]	; (80076d0 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8007658:	4013      	ands	r3, r2
 800765a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	4313      	orrs	r3, r2
 8007662:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	22ca      	movs	r2, #202	; 0xca
 800766a:	625a      	str	r2, [r3, #36]	; 0x24
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2253      	movs	r2, #83	; 0x53
 8007672:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f022 0206 	bic.w	r2, r2, #6
 8007682:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	687a      	ldr	r2, [r7, #4]
 8007690:	430a      	orrs	r2, r1
 8007692:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	689a      	ldr	r2, [r3, #8]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80076aa:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	22ff      	movs	r2, #255	; 0xff
 80076b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2201      	movs	r2, #1
 80076b8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80076c0:	2300      	movs	r3, #0
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	371c      	adds	r7, #28
 80076c6:	46bd      	mov	sp, r7
 80076c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076cc:	4770      	bx	lr
 80076ce:	bf00      	nop
 80076d0:	fffff7f7 	.word	0xfffff7f7

080076d4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b088      	sub	sp, #32
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80076dc:	2300      	movs	r3, #0
 80076de:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80076e0:	2300      	movs	r3, #0
 80076e2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80076e4:	2300      	movs	r3, #0
 80076e6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d101      	bne.n	80076f2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80076ee:	2301      	movs	r3, #1
 80076f0:	e14d      	b.n	800798e <HAL_SAI_Init+0x2ba>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d106      	bne.n	800770c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f011 ff46 	bl	8019598 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2202      	movs	r2, #2
 8007710:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8007714:	6878      	ldr	r0, [r7, #4]
 8007716:	f000 f953 	bl	80079c0 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	68db      	ldr	r3, [r3, #12]
 800771e:	2b02      	cmp	r3, #2
 8007720:	d00c      	beq.n	800773c <HAL_SAI_Init+0x68>
 8007722:	2b02      	cmp	r3, #2
 8007724:	d80d      	bhi.n	8007742 <HAL_SAI_Init+0x6e>
 8007726:	2b00      	cmp	r3, #0
 8007728:	d002      	beq.n	8007730 <HAL_SAI_Init+0x5c>
 800772a:	2b01      	cmp	r3, #1
 800772c:	d003      	beq.n	8007736 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 800772e:	e008      	b.n	8007742 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8007730:	2300      	movs	r3, #0
 8007732:	61fb      	str	r3, [r7, #28]
      break;
 8007734:	e006      	b.n	8007744 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007736:	2310      	movs	r3, #16
 8007738:	61fb      	str	r3, [r7, #28]
      break;
 800773a:	e003      	b.n	8007744 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800773c:	2320      	movs	r3, #32
 800773e:	61fb      	str	r3, [r7, #28]
      break;
 8007740:	e000      	b.n	8007744 <HAL_SAI_Init+0x70>
    break;
 8007742:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	689b      	ldr	r3, [r3, #8]
 8007748:	2b03      	cmp	r3, #3
 800774a:	d81e      	bhi.n	800778a <HAL_SAI_Init+0xb6>
 800774c:	a201      	add	r2, pc, #4	; (adr r2, 8007754 <HAL_SAI_Init+0x80>)
 800774e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007752:	bf00      	nop
 8007754:	08007765 	.word	0x08007765
 8007758:	0800776b 	.word	0x0800776b
 800775c:	08007773 	.word	0x08007773
 8007760:	0800777b 	.word	0x0800777b
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 8007764:	2300      	movs	r3, #0
 8007766:	617b      	str	r3, [r7, #20]
      }
      break;
 8007768:	e010      	b.n	800778c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 800776a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800776e:	617b      	str	r3, [r7, #20]
      }
      break;
 8007770:	e00c      	b.n	800778c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007772:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007776:	617b      	str	r3, [r7, #20]
      }
      break;
 8007778:	e008      	b.n	800778c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800777a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800777e:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	f043 0301 	orr.w	r3, r3, #1
 8007786:	61fb      	str	r3, [r7, #28]
      }
      break;
 8007788:	e000      	b.n	800778c <HAL_SAI_Init+0xb8>
  default:
    break;
 800778a:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a81      	ldr	r2, [pc, #516]	; (8007998 <HAL_SAI_Init+0x2c4>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d004      	beq.n	80077a0 <HAL_SAI_Init+0xcc>
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4a80      	ldr	r2, [pc, #512]	; (800799c <HAL_SAI_Init+0x2c8>)
 800779c:	4293      	cmp	r3, r2
 800779e:	d103      	bne.n	80077a8 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80077a0:	4a7f      	ldr	r2, [pc, #508]	; (80079a0 <HAL_SAI_Init+0x2cc>)
 80077a2:	69fb      	ldr	r3, [r7, #28]
 80077a4:	6013      	str	r3, [r2, #0]
 80077a6:	e002      	b.n	80077ae <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80077a8:	4a7e      	ldr	r2, [pc, #504]	; (80079a4 <HAL_SAI_Init+0x2d0>)
 80077aa:	69fb      	ldr	r3, [r7, #28]
 80077ac:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	69db      	ldr	r3, [r3, #28]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d043      	beq.n	800783e <HAL_SAI_Init+0x16a>
  {
    uint32_t freq = 0;
 80077b6:	2300      	movs	r3, #0
 80077b8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a76      	ldr	r2, [pc, #472]	; (8007998 <HAL_SAI_Init+0x2c4>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d004      	beq.n	80077ce <HAL_SAI_Init+0xfa>
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a74      	ldr	r2, [pc, #464]	; (800799c <HAL_SAI_Init+0x2c8>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d104      	bne.n	80077d8 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80077ce:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80077d2:	f7ff fa79 	bl	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq>
 80077d6:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	4a72      	ldr	r2, [pc, #456]	; (80079a8 <HAL_SAI_Init+0x2d4>)
 80077de:	4293      	cmp	r3, r2
 80077e0:	d004      	beq.n	80077ec <HAL_SAI_Init+0x118>
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	4a71      	ldr	r2, [pc, #452]	; (80079ac <HAL_SAI_Init+0x2d8>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d104      	bne.n	80077f6 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80077ec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80077f0:	f7ff fa6a 	bl	8006cc8 <HAL_RCCEx_GetPeriphCLKFreq>
 80077f4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	4613      	mov	r3, r2
 80077fa:	009b      	lsls	r3, r3, #2
 80077fc:	4413      	add	r3, r2
 80077fe:	005b      	lsls	r3, r3, #1
 8007800:	461a      	mov	r2, r3
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	025b      	lsls	r3, r3, #9
 8007808:	fbb2 f3f3 	udiv	r3, r2, r3
 800780c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	4a67      	ldr	r2, [pc, #412]	; (80079b0 <HAL_SAI_Init+0x2dc>)
 8007812:	fba2 2303 	umull	r2, r3, r2, r3
 8007816:	08da      	lsrs	r2, r3, #3
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 800781c:	68f9      	ldr	r1, [r7, #12]
 800781e:	4b64      	ldr	r3, [pc, #400]	; (80079b0 <HAL_SAI_Init+0x2dc>)
 8007820:	fba3 2301 	umull	r2, r3, r3, r1
 8007824:	08da      	lsrs	r2, r3, #3
 8007826:	4613      	mov	r3, r2
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	005b      	lsls	r3, r3, #1
 800782e:	1aca      	subs	r2, r1, r3
 8007830:	2a08      	cmp	r2, #8
 8007832:	d904      	bls.n	800783e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv+= 1;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	6a1b      	ldr	r3, [r3, #32]
 8007838:	1c5a      	adds	r2, r3, #1
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	685b      	ldr	r3, [r3, #4]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d003      	beq.n	800784e <HAL_SAI_Init+0x17a>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	2b02      	cmp	r3, #2
 800784c:	d109      	bne.n	8007862 <HAL_SAI_Init+0x18e>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007852:	2b01      	cmp	r3, #1
 8007854:	d101      	bne.n	800785a <HAL_SAI_Init+0x186>
 8007856:	2300      	movs	r3, #0
 8007858:	e001      	b.n	800785e <HAL_SAI_Init+0x18a>
 800785a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800785e:	61bb      	str	r3, [r7, #24]
 8007860:	e008      	b.n	8007874 <HAL_SAI_Init+0x1a0>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007866:	2b01      	cmp	r3, #1
 8007868:	d102      	bne.n	8007870 <HAL_SAI_Init+0x19c>
 800786a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800786e:	e000      	b.n	8007872 <HAL_SAI_Init+0x19e>
 8007870:	2300      	movs	r3, #0
 8007872:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	6819      	ldr	r1, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	4b4d      	ldr	r3, [pc, #308]	; (80079b4 <HAL_SAI_Init+0x2e0>)
 8007880:	400b      	ands	r3, r1
 8007882:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	6819      	ldr	r1, [r3, #0]
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685a      	ldr	r2, [r3, #4]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007892:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007898:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789e:	431a      	orrs	r2, r3
 80078a0:	69bb      	ldr	r3, [r7, #24]
 80078a2:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 80078ac:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80078b8:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	6a1b      	ldr	r3, [r3, #32]
 80078be:	051b      	lsls	r3, r3, #20
 80078c0:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	430a      	orrs	r2, r1
 80078c8:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	6859      	ldr	r1, [r3, #4]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	4b38      	ldr	r3, [pc, #224]	; (80079b8 <HAL_SAI_Init+0x2e4>)
 80078d6:	400b      	ands	r3, r1
 80078d8:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	6859      	ldr	r1, [r3, #4]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	699a      	ldr	r2, [r3, #24]
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078e8:	431a      	orrs	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ee:	431a      	orrs	r2, r3
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	430a      	orrs	r2, r1
 80078f6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	6899      	ldr	r1, [r3, #8]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681a      	ldr	r2, [r3, #0]
 8007902:	4b2e      	ldr	r3, [pc, #184]	; (80079bc <HAL_SAI_Init+0x2e8>)
 8007904:	400b      	ands	r3, r1
 8007906:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6899      	ldr	r1, [r3, #8]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007912:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007918:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 800791e:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 8007924:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800792a:	3b01      	subs	r3, #1
 800792c:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 800792e:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	430a      	orrs	r2, r1
 8007936:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68d9      	ldr	r1, [r3, #12]
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	f24f 0320 	movw	r3, #61472	; 0xf020
 8007946:	400b      	ands	r3, r1
 8007948:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	68d9      	ldr	r1, [r3, #12]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007958:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800795e:	041b      	lsls	r3, r3, #16
 8007960:	431a      	orrs	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007966:	3b01      	subs	r3, #1
 8007968:	021b      	lsls	r3, r3, #8
 800796a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	430a      	orrs	r2, r1
 8007972:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2201      	movs	r2, #1
 8007980:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800798c:	2300      	movs	r3, #0
}
 800798e:	4618      	mov	r0, r3
 8007990:	3720      	adds	r7, #32
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	40015804 	.word	0x40015804
 800799c:	40015824 	.word	0x40015824
 80079a0:	40015800 	.word	0x40015800
 80079a4:	40015c00 	.word	0x40015c00
 80079a8:	40015c04 	.word	0x40015c04
 80079ac:	40015c24 	.word	0x40015c24
 80079b0:	cccccccd 	.word	0xcccccccd
 80079b4:	ff05c010 	.word	0xff05c010
 80079b8:	ffff1ff0 	.word	0xffff1ff0
 80079bc:	fff88000 	.word	0xfff88000

080079c0 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80079c0:	b490      	push	{r4, r7}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 80079c8:	4b16      	ldr	r3, [pc, #88]	; (8007a24 <SAI_Disable+0x64>)
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a16      	ldr	r2, [pc, #88]	; (8007a28 <SAI_Disable+0x68>)
 80079ce:	fba2 2303 	umull	r2, r3, r2, r3
 80079d2:	0b1b      	lsrs	r3, r3, #12
 80079d4:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 80079d6:	2300      	movs	r3, #0
 80079d8:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80079e8:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80079ea:	4623      	mov	r3, r4
 80079ec:	1e5c      	subs	r4, r3, #1
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d10a      	bne.n	8007a08 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079f8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8007a02:	2303      	movs	r3, #3
 8007a04:	73fb      	strb	r3, [r7, #15]
      break;
 8007a06:	e006      	b.n	8007a16 <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1e9      	bne.n	80079ea <SAI_Disable+0x2a>

  return status;
 8007a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bc90      	pop	{r4, r7}
 8007a20:	4770      	bx	lr
 8007a22:	bf00      	nop
 8007a24:	20000070 	.word	0x20000070
 8007a28:	95cbec1b 	.word	0x95cbec1b

08007a2c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d101      	bne.n	8007a3e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	e01d      	b.n	8007a7a <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a44:	b2db      	uxtb	r3, r3
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d105      	bne.n	8007a56 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007a50:	6878      	ldr	r0, [r7, #4]
 8007a52:	f011 fae1 	bl	8019018 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2203      	movs	r2, #3
 8007a5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8007a5e:	6878      	ldr	r0, [r7, #4]
 8007a60:	f000 f80f 	bl	8007a82 <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2200      	movs	r2, #0
 8007a68:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2201      	movs	r2, #1
 8007a74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007a82:	b5b0      	push	{r4, r5, r7, lr}
 8007a84:	b08e      	sub	sp, #56	; 0x38
 8007a86:	af04      	add	r7, sp, #16
 8007a88:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007a92:	2300      	movs	r3, #0
 8007a94:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007a96:	2300      	movs	r3, #0
 8007a98:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007aa2:	2376      	movs	r3, #118	; 0x76
 8007aa4:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681d      	ldr	r5, [r3, #0]
 8007aaa:	466c      	mov	r4, sp
 8007aac:	f107 0318 	add.w	r3, r7, #24
 8007ab0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007ab4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007ab8:	f107 030c 	add.w	r3, r7, #12
 8007abc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007abe:	4628      	mov	r0, r5
 8007ac0:	f003 f806 	bl	800aad0 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	685a      	ldr	r2, [r3, #4]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ad2:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4618      	mov	r0, r3
 8007ada:	f003 f832 	bl	800ab42 <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	685a      	ldr	r2, [r3, #4]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007aec:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 8007aee:	2002      	movs	r0, #2
 8007af0:	f7f9 f82a 	bl	8000b48 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fe23 	bl	8008740 <SD_PowerON>
 8007afa:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d00b      	beq.n	8007b1a <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b10:	431a      	orrs	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e013      	b.n	8007b42 <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fd48 	bl	80085b0 <SD_InitCard>
 8007b20:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d00b      	beq.n	8007b40 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b36:	431a      	orrs	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b3c:	2301      	movs	r3, #1
 8007b3e:	e000      	b.n	8007b42 <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 8007b40:	2300      	movs	r3, #0
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3728      	adds	r7, #40	; 0x28
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007b4c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b08c      	sub	sp, #48	; 0x30
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
 8007b58:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d107      	bne.n	8007b74 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b68:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b70:	2301      	movs	r3, #1
 8007b72:	e0b0      	b.n	8007cd6 <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	2b01      	cmp	r3, #1
 8007b7e:	f040 80a9 	bne.w	8007cd4 <HAL_SD_ReadBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	441a      	add	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b92:	429a      	cmp	r2, r3
 8007b94:	d907      	bls.n	8007ba6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e097      	b.n	8007cd6 <HAL_SD_ReadBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2203      	movs	r2, #3
 8007baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007bc4:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bca:	4a45      	ldr	r2, [pc, #276]	; (8007ce0 <HAL_SD_ReadBlocks_DMA+0x194>)
 8007bcc:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bd2:	4a44      	ldr	r2, [pc, #272]	; (8007ce4 <HAL_SD_ReadBlocks_DMA+0x198>)
 8007bd4:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bda:	2200      	movs	r2, #0
 8007bdc:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	3380      	adds	r3, #128	; 0x80
 8007be8:	4619      	mov	r1, r3
 8007bea:	68ba      	ldr	r2, [r7, #8]
 8007bec:	683b      	ldr	r3, [r7, #0]
 8007bee:	025b      	lsls	r3, r3, #9
 8007bf0:	089b      	lsrs	r3, r3, #2
 8007bf2:	f7f9 fcaf 	bl	8001554 <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f042 0208 	orr.w	r2, r2, #8
 8007c04:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d002      	beq.n	8007c14 <HAL_SD_ReadBlocks_DMA+0xc8>
    {
      BlockAdd *= 512U;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	025b      	lsls	r3, r3, #9
 8007c12:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007c14:	f04f 33ff 	mov.w	r3, #4294967295
 8007c18:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	025b      	lsls	r3, r3, #9
 8007c1e:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007c20:	2390      	movs	r3, #144	; 0x90
 8007c22:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007c24:	2302      	movs	r3, #2
 8007c26:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f107 0214 	add.w	r2, r7, #20
 8007c38:	4611      	mov	r1, r2
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f002 ffea 	bl	800ac14 <SDMMC_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007c48:	4618      	mov	r0, r3
 8007c4a:	f003 f80f 	bl	800ac6c <SDMMC_CmdBlockLength>
 8007c4e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d010      	beq.n	8007c78 <HAL_SD_ReadBlocks_DMA+0x12c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007c5e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c66:	431a      	orrs	r2, r3
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007c74:	2301      	movs	r3, #1
 8007c76:	e02e      	b.n	8007cd6 <HAL_SD_ReadBlocks_DMA+0x18a>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 8007c78:	683b      	ldr	r3, [r7, #0]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d90a      	bls.n	8007c94 <HAL_SD_ReadBlocks_DMA+0x148>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2282      	movs	r2, #130	; 0x82
 8007c82:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	6879      	ldr	r1, [r7, #4]
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f003 f836 	bl	800acfc <SDMMC_CmdReadMultiBlock>
 8007c90:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007c92:	e009      	b.n	8007ca8 <HAL_SD_ReadBlocks_DMA+0x15c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2281      	movs	r2, #129	; 0x81
 8007c98:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	6879      	ldr	r1, [r7, #4]
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f003 f807 	bl	800acb4 <SDMMC_CmdReadSingleBlock>
 8007ca6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d010      	beq.n	8007cd0 <HAL_SD_ReadBlocks_DMA+0x184>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007cb6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbe:	431a      	orrs	r2, r3
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2201      	movs	r2, #1
 8007cc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	e002      	b.n	8007cd6 <HAL_SD_ReadBlocks_DMA+0x18a>
    }

    return HAL_OK;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	e000      	b.n	8007cd6 <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8007cd4:	2302      	movs	r3, #2
  }
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3730      	adds	r7, #48	; 0x30
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	080084ad 	.word	0x080084ad
 8007ce4:	0800851b 	.word	0x0800851b

08007ce8 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b08c      	sub	sp, #48	; 0x30
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	60f8      	str	r0, [r7, #12]
 8007cf0:	60b9      	str	r1, [r7, #8]
 8007cf2:	607a      	str	r2, [r7, #4]
 8007cf4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d107      	bne.n	8007d10 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d04:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	e0b0      	b.n	8007e72 <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	2b01      	cmp	r3, #1
 8007d1a:	f040 80a9 	bne.w	8007e70 <HAL_SD_WriteBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2200      	movs	r2, #0
 8007d22:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007d24:	687a      	ldr	r2, [r7, #4]
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	441a      	add	r2, r3
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d2e:	429a      	cmp	r2, r3
 8007d30:	d907      	bls.n	8007d42 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d36:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007d3e:	2301      	movs	r3, #1
 8007d40:	e097      	b.n	8007e72 <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2203      	movs	r2, #3
 8007d46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));    
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f042 021a 	orr.w	r2, r2, #26
 8007d60:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d66:	4a45      	ldr	r2, [pc, #276]	; (8007e7c <HAL_SD_WriteBlocks_DMA+0x194>)
 8007d68:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d6e:	4a44      	ldr	r2, [pc, #272]	; (8007e80 <HAL_SD_WriteBlocks_DMA+0x198>)
 8007d70:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d76:	2200      	movs	r2, #0
 8007d78:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d7e:	2b01      	cmp	r3, #1
 8007d80:	d002      	beq.n	8007d88 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      BlockAdd *= 512U;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	025b      	lsls	r3, r3, #9
 8007d86:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d90:	4618      	mov	r0, r3
 8007d92:	f002 ff6b 	bl	800ac6c <SDMMC_CmdBlockLength>
 8007d96:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d010      	beq.n	8007dc0 <HAL_SD_WriteBlocks_DMA+0xd8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007da6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dae:	431a      	orrs	r2, r3
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007dbc:	2301      	movs	r3, #1
 8007dbe:	e058      	b.n	8007e72 <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d90a      	bls.n	8007ddc <HAL_SD_WriteBlocks_DMA+0xf4>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	22a0      	movs	r2, #160	; 0xa0
 8007dca:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	6879      	ldr	r1, [r7, #4]
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f002 ffda 	bl	800ad8c <SDMMC_CmdWriteMultiBlock>
 8007dd8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007dda:	e009      	b.n	8007df0 <HAL_SD_WriteBlocks_DMA+0x108>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2290      	movs	r2, #144	; 0x90
 8007de0:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	6879      	ldr	r1, [r7, #4]
 8007de8:	4618      	mov	r0, r3
 8007dea:	f002 ffab 	bl	800ad44 <SDMMC_CmdWriteSingleBlock>
 8007dee:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d010      	beq.n	8007e18 <HAL_SD_WriteBlocks_DMA+0x130>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007dfe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e06:	431a      	orrs	r2, r3
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	e02c      	b.n	8007e72 <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f042 0208 	orr.w	r2, r2, #8
 8007e26:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007e2c:	68b9      	ldr	r1, [r7, #8]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	3380      	adds	r3, #128	; 0x80
 8007e34:	461a      	mov	r2, r3
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	025b      	lsls	r3, r3, #9
 8007e3a:	089b      	lsrs	r3, r3, #2
 8007e3c:	f7f9 fb8a 	bl	8001554 <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007e40:	f04f 33ff 	mov.w	r3, #4294967295
 8007e44:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	025b      	lsls	r3, r3, #9
 8007e4a:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007e4c:	2390      	movs	r3, #144	; 0x90
 8007e4e:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007e50:	2300      	movs	r3, #0
 8007e52:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f107 0214 	add.w	r2, r7, #20
 8007e64:	4611      	mov	r1, r2
 8007e66:	4618      	mov	r0, r3
 8007e68:	f002 fed4 	bl	800ac14 <SDMMC_ConfigData>
    
    return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	e000      	b.n	8007e72 <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8007e70:	2302      	movs	r3, #2
  }
}
 8007e72:	4618      	mov	r0, r3
 8007e74:	3730      	adds	r7, #48	; 0x30
 8007e76:	46bd      	mov	sp, r7
 8007e78:	bd80      	pop	{r7, pc}
 8007e7a:	bf00      	nop
 8007e7c:	08008483 	.word	0x08008483
 8007e80:	0800851b 	.word	0x0800851b

08007e84 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8007ea2:	2300      	movs	r3, #0
 8007ea4:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007eaa:	0e1b      	lsrs	r3, r3, #24
 8007eac:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	099b      	lsrs	r3, r3, #6
 8007eb2:	b2db      	uxtb	r3, r3
 8007eb4:	f003 0303 	and.w	r3, r3, #3
 8007eb8:	b2da      	uxtb	r2, r3
 8007eba:	683b      	ldr	r3, [r7, #0]
 8007ebc:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	089b      	lsrs	r3, r3, #2
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	f003 030f 	and.w	r3, r3, #15
 8007ec8:	b2da      	uxtb	r2, r3
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	f003 0303 	and.w	r3, r3, #3
 8007ed6:	b2da      	uxtb	r2, r3
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ee0:	0c1b      	lsrs	r3, r3, #16
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	b2da      	uxtb	r2, r3
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ef2:	0a1b      	lsrs	r3, r3, #8
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	b2da      	uxtb	r2, r3
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007f04:	b2db      	uxtb	r3, r3
 8007f06:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	b2da      	uxtb	r2, r3
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f14:	0e1b      	lsrs	r3, r3, #24
 8007f16:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	b29b      	uxth	r3, r3
 8007f1c:	011b      	lsls	r3, r3, #4
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f28:	0c1b      	lsrs	r3, r3, #16
 8007f2a:	b2db      	uxtb	r3, r3
 8007f2c:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	88db      	ldrh	r3, [r3, #6]
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	091b      	lsrs	r3, r3, #4
 8007f38:	b29b      	uxth	r3, r3
 8007f3a:	f003 030f 	and.w	r3, r3, #15
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	4313      	orrs	r3, r2
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	b2db      	uxtb	r3, r3
 8007f4c:	f003 030f 	and.w	r3, r3, #15
 8007f50:	b2da      	uxtb	r2, r3
 8007f52:	683b      	ldr	r3, [r7, #0]
 8007f54:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f5a:	0a1b      	lsrs	r3, r3, #8
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	09db      	lsrs	r3, r3, #7
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	f003 0301 	and.w	r3, r3, #1
 8007f6a:	b2da      	uxtb	r2, r3
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	099b      	lsrs	r3, r3, #6
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	b2da      	uxtb	r2, r3
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	095b      	lsrs	r3, r3, #5
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	f003 0301 	and.w	r3, r3, #1
 8007f8a:	b2da      	uxtb	r2, r3
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	091b      	lsrs	r3, r3, #4
 8007f94:	b2db      	uxtb	r3, r3
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	b2da      	uxtb	r2, r3
 8007f9c:	683b      	ldr	r3, [r7, #0]
 8007f9e:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	f040 8086 	bne.w	80080bc <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	029b      	lsls	r3, r3, #10
 8007fb4:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	691a      	ldr	r2, [r3, #16]
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	431a      	orrs	r2, r3
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fd6:	0e1b      	lsrs	r3, r3, #24
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	691a      	ldr	r2, [r3, #16]
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	099b      	lsrs	r3, r3, #6
 8007fe4:	f003 0303 	and.w	r3, r3, #3
 8007fe8:	431a      	orrs	r2, r3
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	08db      	lsrs	r3, r3, #3
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	f003 0307 	and.w	r3, r3, #7
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	b2db      	uxtb	r3, r3
 8008002:	f003 0307 	and.w	r3, r3, #7
 8008006:	b2da      	uxtb	r2, r3
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008010:	0c1b      	lsrs	r3, r3, #16
 8008012:	b2db      	uxtb	r3, r3
 8008014:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	095b      	lsrs	r3, r3, #5
 800801a:	b2db      	uxtb	r3, r3
 800801c:	f003 0307 	and.w	r3, r3, #7
 8008020:	b2da      	uxtb	r2, r3
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	089b      	lsrs	r3, r3, #2
 800802a:	b2db      	uxtb	r3, r3
 800802c:	f003 0307 	and.w	r3, r3, #7
 8008030:	b2da      	uxtb	r2, r3
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	b2db      	uxtb	r3, r3
 800803a:	005b      	lsls	r3, r3, #1
 800803c:	b2db      	uxtb	r3, r3
 800803e:	f003 0306 	and.w	r3, r3, #6
 8008042:	b2da      	uxtb	r2, r3
 8008044:	683b      	ldr	r3, [r7, #0]
 8008046:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800804c:	0a1b      	lsrs	r3, r3, #8
 800804e:	b2db      	uxtb	r3, r3
 8008050:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	7e1b      	ldrb	r3, [r3, #24]
 8008056:	b2da      	uxtb	r2, r3
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	09db      	lsrs	r3, r3, #7
 800805c:	b2db      	uxtb	r3, r3
 800805e:	f003 0301 	and.w	r3, r3, #1
 8008062:	b2db      	uxtb	r3, r3
 8008064:	4313      	orrs	r3, r2
 8008066:	b2da      	uxtb	r2, r3
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	1c5a      	adds	r2, r3, #1
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	7e1b      	ldrb	r3, [r3, #24]
 800807a:	b2db      	uxtb	r3, r3
 800807c:	3302      	adds	r3, #2
 800807e:	2201      	movs	r2, #1
 8008080:	409a      	lsls	r2, r3
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008086:	fb02 f203 	mul.w	r2, r2, r3
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	7a1b      	ldrb	r3, [r3, #8]
 8008092:	b2db      	uxtb	r3, r3
 8008094:	461a      	mov	r2, r3
 8008096:	2301      	movs	r3, #1
 8008098:	4093      	lsls	r3, r2
 800809a:	461a      	mov	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080a4:	687a      	ldr	r2, [r7, #4]
 80080a6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80080a8:	0a52      	lsrs	r2, r2, #9
 80080aa:	fb02 f203 	mul.w	r2, r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080b8:	661a      	str	r2, [r3, #96]	; 0x60
 80080ba:	e04d      	b.n	8008158 <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080c0:	2b01      	cmp	r3, #1
 80080c2:	d138      	bne.n	8008136 <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80080c8:	b2db      	uxtb	r3, r3
 80080ca:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	041b      	lsls	r3, r3, #16
 80080d0:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080dc:	0e1b      	lsrs	r3, r3, #24
 80080de:	b2db      	uxtb	r3, r3
 80080e0:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	691a      	ldr	r2, [r3, #16]
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	021b      	lsls	r3, r3, #8
 80080ea:	431a      	orrs	r2, r3
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080f4:	0c1b      	lsrs	r3, r3, #16
 80080f6:	b2db      	uxtb	r3, r3
 80080f8:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	691a      	ldr	r2, [r3, #16]
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	431a      	orrs	r2, r3
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800810a:	0a1b      	lsrs	r3, r3, #8
 800810c:	b2db      	uxtb	r3, r3
 800810e:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 8008110:	683b      	ldr	r3, [r7, #0]
 8008112:	691b      	ldr	r3, [r3, #16]
 8008114:	3301      	adds	r3, #1
 8008116:	029a      	lsls	r2, r3, #10
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	655a      	str	r2, [r3, #84]	; 0x54
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	f44f 7200 	mov.w	r2, #512	; 0x200
 800812a:	659a      	str	r2, [r3, #88]	; 0x58
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	661a      	str	r2, [r3, #96]	; 0x60
 8008134:	e010      	b.n	8008158 <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800813e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008144:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e0c1      	b.n	80082dc <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	099b      	lsrs	r3, r3, #6
 800815c:	b2db      	uxtb	r3, r3
 800815e:	f003 0301 	and.w	r3, r3, #1
 8008162:	b2da      	uxtb	r2, r3
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	b2db      	uxtb	r3, r3
 800816c:	005b      	lsls	r3, r3, #1
 800816e:	b2db      	uxtb	r3, r3
 8008170:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8008174:	b2da      	uxtb	r2, r3
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800817e:	b2db      	uxtb	r3, r3
 8008180:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	7e9b      	ldrb	r3, [r3, #26]
 8008186:	b2da      	uxtb	r2, r3
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	09db      	lsrs	r3, r3, #7
 800818c:	b2db      	uxtb	r3, r3
 800818e:	f003 0301 	and.w	r3, r3, #1
 8008192:	b2db      	uxtb	r3, r3
 8008194:	4313      	orrs	r3, r2
 8008196:	b2da      	uxtb	r2, r3
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081a4:	b2da      	uxtb	r2, r3
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081ae:	0e1b      	lsrs	r3, r3, #24
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	09db      	lsrs	r3, r3, #7
 80081b8:	b2db      	uxtb	r3, r3
 80081ba:	f003 0301 	and.w	r3, r3, #1
 80081be:	b2da      	uxtb	r2, r3
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	095b      	lsrs	r3, r3, #5
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	f003 0303 	and.w	r3, r3, #3
 80081ce:	b2da      	uxtb	r2, r3
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	089b      	lsrs	r3, r3, #2
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	f003 0307 	and.w	r3, r3, #7
 80081de:	b2da      	uxtb	r2, r3
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	b2db      	uxtb	r3, r3
 80081ec:	f003 030c 	and.w	r3, r3, #12
 80081f0:	b2da      	uxtb	r2, r3
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081fa:	0c1b      	lsrs	r3, r3, #16
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 8008200:	683b      	ldr	r3, [r7, #0]
 8008202:	7fdb      	ldrb	r3, [r3, #31]
 8008204:	b2da      	uxtb	r2, r3
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	099b      	lsrs	r3, r3, #6
 800820a:	b2db      	uxtb	r3, r3
 800820c:	f003 0303 	and.w	r3, r3, #3
 8008210:	b2db      	uxtb	r3, r3
 8008212:	4313      	orrs	r3, r2
 8008214:	b2da      	uxtb	r2, r3
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	095b      	lsrs	r3, r3, #5
 800821e:	b2db      	uxtb	r3, r3
 8008220:	f003 0301 	and.w	r3, r3, #1
 8008224:	b2da      	uxtb	r2, r3
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	2200      	movs	r2, #0
 8008230:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	b2db      	uxtb	r3, r3
 8008238:	f003 0301 	and.w	r3, r3, #1
 800823c:	b2da      	uxtb	r2, r3
 800823e:	683b      	ldr	r3, [r7, #0]
 8008240:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008248:	0a1b      	lsrs	r3, r3, #8
 800824a:	b2db      	uxtb	r3, r3
 800824c:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	09db      	lsrs	r3, r3, #7
 8008252:	b2db      	uxtb	r3, r3
 8008254:	f003 0301 	and.w	r3, r3, #1
 8008258:	b2da      	uxtb	r2, r3
 800825a:	683b      	ldr	r3, [r7, #0]
 800825c:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	099b      	lsrs	r3, r3, #6
 8008264:	b2db      	uxtb	r3, r3
 8008266:	f003 0301 	and.w	r3, r3, #1
 800826a:	b2da      	uxtb	r2, r3
 800826c:	683b      	ldr	r3, [r7, #0]
 800826e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	095b      	lsrs	r3, r3, #5
 8008276:	b2db      	uxtb	r3, r3
 8008278:	f003 0301 	and.w	r3, r3, #1
 800827c:	b2da      	uxtb	r2, r3
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	091b      	lsrs	r3, r3, #4
 8008288:	b2db      	uxtb	r3, r3
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	b2da      	uxtb	r2, r3
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	089b      	lsrs	r3, r3, #2
 800829a:	b2db      	uxtb	r3, r3
 800829c:	f003 0303 	and.w	r3, r3, #3
 80082a0:	b2da      	uxtb	r2, r3
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	b2db      	uxtb	r3, r3
 80082ac:	f003 0303 	and.w	r3, r3, #3
 80082b0:	b2da      	uxtb	r2, r3
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082bc:	b2db      	uxtb	r3, r3
 80082be:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	085b      	lsrs	r3, r3, #1
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082ca:	b2da      	uxtb	r2, r3
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 80082da:	2300      	movs	r3, #0
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3714      	adds	r7, #20
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008340:	b5b0      	push	{r4, r5, r7, lr}
 8008342:	b08e      	sub	sp, #56	; 0x38
 8008344:	af04      	add	r7, sp, #16
 8008346:	6078      	str	r0, [r7, #4]
 8008348:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800834a:	2300      	movs	r3, #0
 800834c:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2203      	movs	r2, #3
 8008352:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800835a:	2b03      	cmp	r3, #3
 800835c:	d02e      	beq.n	80083bc <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008364:	d106      	bne.n	8008374 <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	639a      	str	r2, [r3, #56]	; 0x38
 8008372:	e029      	b.n	80083c8 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800837a:	d10a      	bne.n	8008392 <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 fab1 	bl	80088e4 <SD_WideBus_Enable>
 8008382:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800838a:	431a      	orrs	r2, r3
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	639a      	str	r2, [r3, #56]	; 0x38
 8008390:	e01a      	b.n	80083c8 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d10a      	bne.n	80083ae <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008398:	6878      	ldr	r0, [r7, #4]
 800839a:	f000 faf0 	bl	800897e <SD_WideBus_Disable>
 800839e:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a6:	431a      	orrs	r2, r3
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	639a      	str	r2, [r3, #56]	; 0x38
 80083ac:	e00c      	b.n	80083c8 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	639a      	str	r2, [r3, #56]	; 0x38
 80083ba:	e005      	b.n	80083c8 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083c0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00a      	beq.n	80083e6 <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80083d8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80083e2:	2301      	movs	r3, #1
 80083e4:	e024      	b.n	8008430 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	685b      	ldr	r3, [r3, #4]
 80083ea:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	689b      	ldr	r3, [r3, #8]
 80083f0:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	68db      	ldr	r3, [r3, #12]
 80083f6:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80083f8:	683b      	ldr	r3, [r7, #0]
 80083fa:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	695b      	ldr	r3, [r3, #20]
 8008400:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681d      	ldr	r5, [r3, #0]
 800840c:	466c      	mov	r4, sp
 800840e:	f107 0318 	add.w	r3, r7, #24
 8008412:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008416:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800841a:	f107 030c 	add.w	r3, r7, #12
 800841e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008420:	4628      	mov	r0, r5
 8008422:	f002 fb55 	bl	800aad0 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	2201      	movs	r2, #1
 800842a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 800842e:	2300      	movs	r3, #0
}
 8008430:	4618      	mov	r0, r3
 8008432:	3728      	adds	r7, #40	; 0x28
 8008434:	46bd      	mov	sp, r7
 8008436:	bdb0      	pop	{r4, r5, r7, pc}

08008438 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b086      	sub	sp, #24
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8008440:	2304      	movs	r3, #4
 8008442:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008444:	2300      	movs	r3, #0
 8008446:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8008448:	2300      	movs	r3, #0
 800844a:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 800844c:	f107 030c 	add.w	r3, r7, #12
 8008450:	4619      	mov	r1, r3
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f000 fa1c 	bl	8008890 <SD_SendStatus>
 8008458:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 800845a:	693b      	ldr	r3, [r7, #16]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d005      	beq.n	800846c <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008464:	693b      	ldr	r3, [r7, #16]
 8008466:	431a      	orrs	r2, r3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	0a5b      	lsrs	r3, r3, #9
 8008470:	b2db      	uxtb	r3, r3
 8008472:	f003 030f 	and.w	r3, r3, #15
 8008476:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8008478:	7dfb      	ldrb	r3, [r7, #23]
}
 800847a:	4618      	mov	r0, r3
 800847c:	3718      	adds	r7, #24
 800847e:	46bd      	mov	sp, r7
 8008480:	bd80      	pop	{r7, pc}

08008482 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 8008482:	b480      	push	{r7}
 8008484:	b085      	sub	sp, #20
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800848e:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800849e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80084a0:	bf00      	nop
 80084a2:	3714      	adds	r7, #20
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084b8:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80084ba:	2300      	movs	r3, #0
 80084bc:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c2:	2b82      	cmp	r3, #130	; 0x82
 80084c4:	d111      	bne.n	80084ea <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f002 fc82 	bl	800add4 <SDMMC_CmdStopTransfer>
 80084d0:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d008      	beq.n	80084ea <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	431a      	orrs	r2, r3
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80084e4:	68f8      	ldr	r0, [r7, #12]
 80084e6:	f7ff fccd 	bl	8007e84 <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f022 0208 	bic.w	r2, r2, #8
 80084f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008502:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	2201      	movs	r2, #1
 8008508:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800850c:	68f8      	ldr	r0, [r7, #12]
 800850e:	f00e febb 	bl	8017288 <HAL_SD_RxCpltCallback>
#endif
}
 8008512:	bf00      	nop
 8008514:	3710      	adds	r7, #16
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}

0800851a <SD_DMAError>:
* @brief  DMA SD communication error callback 
* @param  hdma DMA handle
* @retval None
*/
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 800851a:	b580      	push	{r7, lr}
 800851c:	b084      	sub	sp, #16
 800851e:	af00      	add	r7, sp, #0
 8008520:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008526:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f7f9 f873 	bl	8001614 <HAL_DMA_GetError>
 800852e:	4603      	mov	r3, r0
 8008530:	2b02      	cmp	r3, #2
 8008532:	d039      	beq.n	80085a8 <SD_DMAError+0x8e>
  {
    if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008538:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800853a:	2b01      	cmp	r3, #1
 800853c:	d004      	beq.n	8008548 <SD_DMAError+0x2e>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008542:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008544:	2b01      	cmp	r3, #1
 8008546:	d12c      	bne.n	80085a2 <SD_DMAError+0x88>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008550:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008560:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
      
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008566:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800856e:	68f8      	ldr	r0, [r7, #12]
 8008570:	f7ff ff62 	bl	8008438 <HAL_SD_GetCardState>
 8008574:	4603      	mov	r3, r0
 8008576:	72fb      	strb	r3, [r7, #11]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008578:	7afb      	ldrb	r3, [r7, #11]
 800857a:	2b06      	cmp	r3, #6
 800857c:	d002      	beq.n	8008584 <SD_DMAError+0x6a>
 800857e:	7afb      	ldrb	r3, [r7, #11]
 8008580:	2b05      	cmp	r3, #5
 8008582:	d10a      	bne.n	800859a <SD_DMAError+0x80>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	4618      	mov	r0, r3
 800858a:	f002 fc23 	bl	800add4 <SDMMC_CmdStopTransfer>
 800858e:	4602      	mov	r2, r0
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008594:	431a      	orrs	r2, r3
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	639a      	str	r2, [r3, #56]	; 0x38
      }
      
      hsd->State= HAL_SD_STATE_READY;
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	2201      	movs	r2, #1
 800859e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 80085a2:	68f8      	ldr	r0, [r7, #12]
 80085a4:	f7ff fc6e 	bl	8007e84 <HAL_SD_ErrorCallback>
#endif
  }
}
 80085a8:	bf00      	nop
 80085aa:	3710      	adds	r7, #16
 80085ac:	46bd      	mov	sp, r7
 80085ae:	bd80      	pop	{r7, pc}

080085b0 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80085b0:	b5b0      	push	{r4, r5, r7, lr}
 80085b2:	b094      	sub	sp, #80	; 0x50
 80085b4:	af04      	add	r7, sp, #16
 80085b6:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80085b8:	2300      	movs	r3, #0
 80085ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 80085bc:	2301      	movs	r3, #1
 80085be:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4618      	mov	r0, r3
 80085c6:	f002 faca 	bl	800ab5e <SDMMC_GetPowerState>
 80085ca:	4603      	mov	r3, r0
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d102      	bne.n	80085d6 <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80085d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80085d4:	e0b0      	b.n	8008738 <SD_InitCard+0x188>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085da:	2b03      	cmp	r3, #3
 80085dc:	d02f      	beq.n	800863e <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	4618      	mov	r0, r3
 80085e4:	f002 fd11 	bl	800b00a <SDMMC_CmdSendCID>
 80085e8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80085ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <SD_InitCard+0x44>
    {
      return errorstate;
 80085f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085f2:	e0a1      	b.n	8008738 <SD_InitCard+0x188>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2100      	movs	r1, #0
 80085fa:	4618      	mov	r0, r3
 80085fc:	f002 faf5 	bl	800abea <SDMMC_GetResponse>
 8008600:	4602      	mov	r2, r0
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	2104      	movs	r1, #4
 800860c:	4618      	mov	r0, r3
 800860e:	f002 faec 	bl	800abea <SDMMC_GetResponse>
 8008612:	4602      	mov	r2, r0
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	2108      	movs	r1, #8
 800861e:	4618      	mov	r0, r3
 8008620:	f002 fae3 	bl	800abea <SDMMC_GetResponse>
 8008624:	4602      	mov	r2, r0
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	210c      	movs	r1, #12
 8008630:	4618      	mov	r0, r3
 8008632:	f002 fada 	bl	800abea <SDMMC_GetResponse>
 8008636:	4602      	mov	r2, r0
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008642:	2b03      	cmp	r3, #3
 8008644:	d00d      	beq.n	8008662 <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	f107 020e 	add.w	r2, r7, #14
 800864e:	4611      	mov	r1, r2
 8008650:	4618      	mov	r0, r3
 8008652:	f002 fd1b 	bl	800b08c <SDMMC_CmdSetRelAdd>
 8008656:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008658:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800865a:	2b00      	cmp	r3, #0
 800865c:	d001      	beq.n	8008662 <SD_InitCard+0xb2>
    {
      return errorstate;
 800865e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008660:	e06a      	b.n	8008738 <SD_InitCard+0x188>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008666:	2b03      	cmp	r3, #3
 8008668:	d036      	beq.n	80086d8 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800866a:	89fb      	ldrh	r3, [r7, #14]
 800866c:	461a      	mov	r2, r3
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800867a:	041b      	lsls	r3, r3, #16
 800867c:	4619      	mov	r1, r3
 800867e:	4610      	mov	r0, r2
 8008680:	f002 fce3 	bl	800b04a <SDMMC_CmdSendCSD>
 8008684:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008686:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008688:	2b00      	cmp	r3, #0
 800868a:	d001      	beq.n	8008690 <SD_InitCard+0xe0>
    {
      return errorstate;
 800868c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800868e:	e053      	b.n	8008738 <SD_InitCard+0x188>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2100      	movs	r1, #0
 8008696:	4618      	mov	r0, r3
 8008698:	f002 faa7 	bl	800abea <SDMMC_GetResponse>
 800869c:	4602      	mov	r2, r0
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2104      	movs	r1, #4
 80086a8:	4618      	mov	r0, r3
 80086aa:	f002 fa9e 	bl	800abea <SDMMC_GetResponse>
 80086ae:	4602      	mov	r2, r0
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2108      	movs	r1, #8
 80086ba:	4618      	mov	r0, r3
 80086bc:	f002 fa95 	bl	800abea <SDMMC_GetResponse>
 80086c0:	4602      	mov	r2, r0
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	210c      	movs	r1, #12
 80086cc:	4618      	mov	r0, r3
 80086ce:	f002 fa8c 	bl	800abea <SDMMC_GetResponse>
 80086d2:	4602      	mov	r2, r0
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	2104      	movs	r1, #4
 80086de:	4618      	mov	r0, r3
 80086e0:	f002 fa83 	bl	800abea <SDMMC_GetResponse>
 80086e4:	4603      	mov	r3, r0
 80086e6:	0d1a      	lsrs	r2, r3, #20
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 80086ec:	f107 0310 	add.w	r3, r7, #16
 80086f0:	4619      	mov	r1, r3
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f7ff fbd0 	bl	8007e98 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6819      	ldr	r1, [r3, #0]
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008700:	041b      	lsls	r3, r3, #16
 8008702:	461a      	mov	r2, r3
 8008704:	f04f 0300 	mov.w	r3, #0
 8008708:	4608      	mov	r0, r1
 800870a:	f002 fb87 	bl	800ae1c <SDMMC_CmdSelDesel>
 800870e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008710:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008712:	2b00      	cmp	r3, #0
 8008714:	d001      	beq.n	800871a <SD_InitCard+0x16a>
  {
    return errorstate;
 8008716:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008718:	e00e      	b.n	8008738 <SD_InitCard+0x188>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681d      	ldr	r5, [r3, #0]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	466c      	mov	r4, sp
 8008722:	f103 0210 	add.w	r2, r3, #16
 8008726:	ca07      	ldmia	r2, {r0, r1, r2}
 8008728:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800872c:	3304      	adds	r3, #4
 800872e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008730:	4628      	mov	r0, r5
 8008732:	f002 f9cd 	bl	800aad0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3740      	adds	r7, #64	; 0x40
 800873c:	46bd      	mov	sp, r7
 800873e:	bdb0      	pop	{r4, r5, r7, pc}

08008740 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b086      	sub	sp, #24
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8008748:	2300      	movs	r3, #0
 800874a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 800874c:	2300      	movs	r3, #0
 800874e:	617b      	str	r3, [r7, #20]
 8008750:	2300      	movs	r3, #0
 8008752:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008754:	2300      	movs	r3, #0
 8008756:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	4618      	mov	r0, r3
 800875e:	f002 fb82 	bl	800ae66 <SDMMC_CmdGoIdleState>
 8008762:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2b00      	cmp	r3, #0
 8008768:	d001      	beq.n	800876e <SD_PowerON+0x2e>
  {
    return errorstate;
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	e08c      	b.n	8008888 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	4618      	mov	r0, r3
 8008774:	f002 fb97 	bl	800aea6 <SDMMC_CmdOperCond>
 8008778:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2b00      	cmp	r3, #0
 800877e:	d03d      	beq.n	80087fc <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8008786:	e032      	b.n	80087ee <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8008788:	68bb      	ldr	r3, [r7, #8]
 800878a:	1c5a      	adds	r2, r3, #1
 800878c:	60ba      	str	r2, [r7, #8]
 800878e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008792:	4293      	cmp	r3, r2
 8008794:	d102      	bne.n	800879c <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008796:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800879a:	e075      	b.n	8008888 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	2100      	movs	r1, #0
 80087a2:	4618      	mov	r0, r3
 80087a4:	f002 fba0 	bl	800aee8 <SDMMC_CmdAppCommand>
 80087a8:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d002      	beq.n	80087b6 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087b0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80087b4:	e068      	b.n	8008888 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2100      	movs	r1, #0
 80087bc:	4618      	mov	r0, r3
 80087be:	f002 fbb7 	bl	800af30 <SDMMC_CmdAppOperCommand>
 80087c2:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d002      	beq.n	80087d0 <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80087ce:	e05b      	b.n	8008888 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	2100      	movs	r1, #0
 80087d6:	4618      	mov	r0, r3
 80087d8:	f002 fa07 	bl	800abea <SDMMC_GetResponse>
 80087dc:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 80087de:	697b      	ldr	r3, [r7, #20]
 80087e0:	0fdb      	lsrs	r3, r3, #31
 80087e2:	2b01      	cmp	r3, #1
 80087e4:	bf0c      	ite	eq
 80087e6:	2301      	moveq	r3, #1
 80087e8:	2300      	movne	r3, #0
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d0c9      	beq.n	8008788 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	2200      	movs	r2, #0
 80087f8:	645a      	str	r2, [r3, #68]	; 0x44
 80087fa:	e044      	b.n	8008886 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2201      	movs	r2, #1
 8008800:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8008802:	e031      	b.n	8008868 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	1c5a      	adds	r2, r3, #1
 8008808:	60ba      	str	r2, [r7, #8]
 800880a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800880e:	4293      	cmp	r3, r2
 8008810:	d102      	bne.n	8008818 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008812:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008816:	e037      	b.n	8008888 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2100      	movs	r1, #0
 800881e:	4618      	mov	r0, r3
 8008820:	f002 fb62 	bl	800aee8 <SDMMC_CmdAppCommand>
 8008824:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d001      	beq.n	8008830 <SD_PowerON+0xf0>
      {
        return errorstate;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	e02b      	b.n	8008888 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008838:	4618      	mov	r0, r3
 800883a:	f002 fb79 	bl	800af30 <SDMMC_CmdAppOperCommand>
 800883e:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d001      	beq.n	800884a <SD_PowerON+0x10a>
      {
        return errorstate;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	e01e      	b.n	8008888 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2100      	movs	r1, #0
 8008850:	4618      	mov	r0, r3
 8008852:	f002 f9ca 	bl	800abea <SDMMC_GetResponse>
 8008856:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	0fdb      	lsrs	r3, r3, #31
 800885c:	2b01      	cmp	r3, #1
 800885e:	bf0c      	ite	eq
 8008860:	2301      	moveq	r3, #1
 8008862:	2300      	movne	r3, #0
 8008864:	b2db      	uxtb	r3, r3
 8008866:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d0ca      	beq.n	8008804 <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008874:	2b00      	cmp	r3, #0
 8008876:	d003      	beq.n	8008880 <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2201      	movs	r2, #1
 800887c:	645a      	str	r2, [r3, #68]	; 0x44
 800887e:	e002      	b.n	8008886 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2200      	movs	r2, #0
 8008884:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8008886:	2300      	movs	r3, #0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3718      	adds	r7, #24
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b084      	sub	sp, #16
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
 8008898:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800889a:	2300      	movs	r3, #0
 800889c:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d102      	bne.n	80088aa <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 80088a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80088a8:	e018      	b.n	80088dc <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681a      	ldr	r2, [r3, #0]
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088b2:	041b      	lsls	r3, r3, #16
 80088b4:	4619      	mov	r1, r3
 80088b6:	4610      	mov	r0, r2
 80088b8:	f002 fc0b 	bl	800b0d2 <SDMMC_CmdSendStatus>
 80088bc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d001      	beq.n	80088c8 <SD_SendStatus+0x38>
  {
    return errorstate;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	e009      	b.n	80088dc <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	2100      	movs	r1, #0
 80088ce:	4618      	mov	r0, r3
 80088d0:	f002 f98b 	bl	800abea <SDMMC_GetResponse>
 80088d4:	4602      	mov	r2, r0
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b086      	sub	sp, #24
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 80088ec:	2300      	movs	r3, #0
 80088ee:	60fb      	str	r3, [r7, #12]
 80088f0:	2300      	movs	r3, #0
 80088f2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80088f4:	2300      	movs	r3, #0
 80088f6:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2100      	movs	r1, #0
 80088fe:	4618      	mov	r0, r3
 8008900:	f002 f973 	bl	800abea <SDMMC_GetResponse>
 8008904:	4603      	mov	r3, r0
 8008906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800890a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800890e:	d102      	bne.n	8008916 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008910:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008914:	e02f      	b.n	8008976 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8008916:	f107 030c 	add.w	r3, r7, #12
 800891a:	4619      	mov	r1, r3
 800891c:	6878      	ldr	r0, [r7, #4]
 800891e:	f000 f87b 	bl	8008a18 <SD_FindSCR>
 8008922:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d001      	beq.n	800892e <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	e023      	b.n	8008976 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800892e:	693b      	ldr	r3, [r7, #16]
 8008930:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008934:	2b00      	cmp	r3, #0
 8008936:	d01c      	beq.n	8008972 <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008940:	041b      	lsls	r3, r3, #16
 8008942:	4619      	mov	r1, r3
 8008944:	4610      	mov	r0, r2
 8008946:	f002 facf 	bl	800aee8 <SDMMC_CmdAppCommand>
 800894a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d001      	beq.n	8008956 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	e00f      	b.n	8008976 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2102      	movs	r1, #2
 800895c:	4618      	mov	r0, r3
 800895e:	f002 fb0d 	bl	800af7c <SDMMC_CmdBusWidth>
 8008962:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d001      	beq.n	800896e <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 800896a:	697b      	ldr	r3, [r7, #20]
 800896c:	e003      	b.n	8008976 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 800896e:	2300      	movs	r3, #0
 8008970:	e001      	b.n	8008976 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008972:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008976:	4618      	mov	r0, r3
 8008978:	3718      	adds	r7, #24
 800897a:	46bd      	mov	sp, r7
 800897c:	bd80      	pop	{r7, pc}

0800897e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800897e:	b580      	push	{r7, lr}
 8008980:	b086      	sub	sp, #24
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8008986:	2300      	movs	r3, #0
 8008988:	60fb      	str	r3, [r7, #12]
 800898a:	2300      	movs	r3, #0
 800898c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800898e:	2300      	movs	r3, #0
 8008990:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2100      	movs	r1, #0
 8008998:	4618      	mov	r0, r3
 800899a:	f002 f926 	bl	800abea <SDMMC_GetResponse>
 800899e:	4603      	mov	r3, r0
 80089a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089a8:	d102      	bne.n	80089b0 <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80089aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80089ae:	e02f      	b.n	8008a10 <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80089b0:	f107 030c 	add.w	r3, r7, #12
 80089b4:	4619      	mov	r1, r3
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f000 f82e 	bl	8008a18 <SD_FindSCR>
 80089bc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80089be:	697b      	ldr	r3, [r7, #20]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d001      	beq.n	80089c8 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	e023      	b.n	8008a10 <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d01c      	beq.n	8008a0c <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681a      	ldr	r2, [r3, #0]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089da:	041b      	lsls	r3, r3, #16
 80089dc:	4619      	mov	r1, r3
 80089de:	4610      	mov	r0, r2
 80089e0:	f002 fa82 	bl	800aee8 <SDMMC_CmdAppCommand>
 80089e4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d001      	beq.n	80089f0 <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	e00f      	b.n	8008a10 <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2100      	movs	r1, #0
 80089f6:	4618      	mov	r0, r3
 80089f8:	f002 fac0 	bl	800af7c <SDMMC_CmdBusWidth>
 80089fc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80089fe:	697b      	ldr	r3, [r7, #20]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d001      	beq.n	8008a08 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	e003      	b.n	8008a10 <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 8008a08:	2300      	movs	r3, #0
 8008a0a:	e001      	b.n	8008a10 <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008a0c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3718      	adds	r7, #24
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8008a18:	b590      	push	{r4, r7, lr}
 8008a1a:	b08f      	sub	sp, #60	; 0x3c
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008a22:	2300      	movs	r3, #0
 8008a24:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8008a26:	f7f8 f883 	bl	8000b30 <HAL_GetTick>
 8008a2a:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 8008a30:	2300      	movs	r3, #0
 8008a32:	60fb      	str	r3, [r7, #12]
 8008a34:	2300      	movs	r3, #0
 8008a36:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2108      	movs	r1, #8
 8008a3e:	4618      	mov	r0, r3
 8008a40:	f002 f914 	bl	800ac6c <SDMMC_CmdBlockLength>
 8008a44:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d001      	beq.n	8008a50 <SD_FindSCR+0x38>
  {
    return errorstate;
 8008a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a4e:	e0a8      	b.n	8008ba2 <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681a      	ldr	r2, [r3, #0]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a58:	041b      	lsls	r3, r3, #16
 8008a5a:	4619      	mov	r1, r3
 8008a5c:	4610      	mov	r0, r2
 8008a5e:	f002 fa43 	bl	800aee8 <SDMMC_CmdAppCommand>
 8008a62:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d001      	beq.n	8008a6e <SD_FindSCR+0x56>
  {
    return errorstate;
 8008a6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a6c:	e099      	b.n	8008ba2 <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8008a72:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 8008a74:	2308      	movs	r3, #8
 8008a76:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008a78:	2330      	movs	r3, #48	; 0x30
 8008a7a:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008a80:	2300      	movs	r3, #0
 8008a82:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008a84:	2301      	movs	r3, #1
 8008a86:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f107 0214 	add.w	r2, r7, #20
 8008a90:	4611      	mov	r1, r2
 8008a92:	4618      	mov	r0, r3
 8008a94:	f002 f8be 	bl	800ac14 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	f002 fa91 	bl	800afc4 <SDMMC_CmdSendSCR>
 8008aa2:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d022      	beq.n	8008af0 <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aac:	e079      	b.n	8008ba2 <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d00e      	beq.n	8008ada <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6819      	ldr	r1, [r3, #0]
 8008ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ac2:	009b      	lsls	r3, r3, #2
 8008ac4:	f107 020c 	add.w	r2, r7, #12
 8008ac8:	18d4      	adds	r4, r2, r3
 8008aca:	4608      	mov	r0, r1
 8008acc:	f002 f82c 	bl	800ab28 <SDMMC_ReadFIFO>
 8008ad0:	4603      	mov	r3, r0
 8008ad2:	6023      	str	r3, [r4, #0]
      index++;
 8008ad4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008ada:	f7f8 f829 	bl	8000b30 <HAL_GetTick>
 8008ade:	4602      	mov	r2, r0
 8008ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ae8:	d102      	bne.n	8008af0 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008aea:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008aee:	e058      	b.n	8008ba2 <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008af6:	f240 432a 	movw	r3, #1066	; 0x42a
 8008afa:	4013      	ands	r3, r2
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d0d6      	beq.n	8008aae <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b06:	f003 0308 	and.w	r3, r3, #8
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d005      	beq.n	8008b1a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2208      	movs	r2, #8
 8008b14:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008b16:	2308      	movs	r3, #8
 8008b18:	e043      	b.n	8008ba2 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b20:	f003 0302 	and.w	r3, r3, #2
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d005      	beq.n	8008b34 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	2202      	movs	r2, #2
 8008b2e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008b30:	2302      	movs	r3, #2
 8008b32:	e036      	b.n	8008ba2 <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b3a:	f003 0320 	and.w	r3, r3, #32
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d005      	beq.n	8008b4e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	2220      	movs	r2, #32
 8008b48:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8008b4a:	2320      	movs	r3, #32
 8008b4c:	e029      	b.n	8008ba2 <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008b56:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	061a      	lsls	r2, r3, #24
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	021b      	lsls	r3, r3, #8
 8008b60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b64:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	0a1b      	lsrs	r3, r3, #8
 8008b6a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b6e:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b76:	683b      	ldr	r3, [r7, #0]
 8008b78:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008b7a:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b7c:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	061a      	lsls	r2, r3, #24
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	021b      	lsls	r3, r3, #8
 8008b86:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b8a:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8008b8c:	693b      	ldr	r3, [r7, #16]
 8008b8e:	0a1b      	lsrs	r3, r3, #8
 8008b90:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008b94:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	0e1b      	lsrs	r3, r3, #24
 8008b9a:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008b9c:	683b      	ldr	r3, [r7, #0]
 8008b9e:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8008ba0:	2300      	movs	r3, #0
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	373c      	adds	r7, #60	; 0x3c
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd90      	pop	{r4, r7, pc}

08008baa <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b082      	sub	sp, #8
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
 8008bb2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d101      	bne.n	8008bbe <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008bba:	2301      	movs	r3, #1
 8008bbc:	e025      	b.n	8008c0a <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d106      	bne.n	8008bd8 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2200      	movs	r2, #0
 8008bce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	f00d f9a2 	bl	8015f1c <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2202      	movs	r2, #2
 8008bdc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681a      	ldr	r2, [r3, #0]
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	3304      	adds	r3, #4
 8008be8:	4619      	mov	r1, r3
 8008bea:	4610      	mov	r0, r2
 8008bec:	f001 fe4a 	bl	800a884 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6818      	ldr	r0, [r3, #0]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	685b      	ldr	r3, [r3, #4]
 8008bf8:	461a      	mov	r2, r3
 8008bfa:	6839      	ldr	r1, [r7, #0]
 8008bfc:	f001 feb4 	bl	800a968 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2201      	movs	r2, #1
 8008c04:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008c08:	2300      	movs	r3, #0
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	3708      	adds	r7, #8
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008c12:	b580      	push	{r7, lr}
 8008c14:	b084      	sub	sp, #16
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	60f8      	str	r0, [r7, #12]
 8008c1a:	60b9      	str	r1, [r7, #8]
 8008c1c:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	2b02      	cmp	r3, #2
 8008c28:	d101      	bne.n	8008c2e <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008c2a:	2302      	movs	r3, #2
 8008c2c:	e018      	b.n	8008c60 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2202      	movs	r2, #2
 8008c32:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	687a      	ldr	r2, [r7, #4]
 8008c3c:	68b9      	ldr	r1, [r7, #8]
 8008c3e:	4618      	mov	r0, r3
 8008c40:	f001 ff12 	bl	800aa68 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	2b02      	cmp	r3, #2
 8008c4a:	d104      	bne.n	8008c56 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	2205      	movs	r2, #5
 8008c50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008c54:	e003      	b.n	8008c5e <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2201      	movs	r2, #1
 8008c5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008c5e:	2300      	movs	r3, #0
}
 8008c60:	4618      	mov	r0, r3
 8008c62:	3710      	adds	r7, #16
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}

08008c68 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c78:	b2db      	uxtb	r3, r3
 8008c7a:	2b02      	cmp	r3, #2
 8008c7c:	d101      	bne.n	8008c82 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008c7e:	2302      	movs	r3, #2
 8008c80:	e00e      	b.n	8008ca0 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	2202      	movs	r2, #2
 8008c86:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	6839      	ldr	r1, [r7, #0]
 8008c90:	4618      	mov	r0, r3
 8008c92:	f001 ff0a 	bl	800aaaa <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	2201      	movs	r2, #1
 8008c9a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3708      	adds	r7, #8
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b084      	sub	sp, #16
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d101      	bne.n	8008cba <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e04c      	b.n	8008d54 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008cc0:	b2db      	uxtb	r3, r3
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d106      	bne.n	8008cd4 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f010 fa04 	bl	80190dc <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2202      	movs	r2, #2
 8008cd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	f022 0203 	bic.w	r2, r2, #3
 8008cea:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8008cf4:	68fa      	ldr	r2, [r7, #12]
 8008cf6:	4b19      	ldr	r3, [pc, #100]	; (8008d5c <HAL_SPDIFRX_Init+0xb4>)
 8008cf8:	4013      	ands	r3, r2
 8008cfa:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8008d04:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8008d0a:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8008d10:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8008d16:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8008d1c:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8008d22:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8008d28:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8008d2e:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8008d34:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8008d36:	68fa      	ldr	r2, [r7, #12]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	68fa      	ldr	r2, [r7, #12]
 8008d42:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2200      	movs	r2, #0
 8008d48:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2201      	movs	r2, #1
 8008d4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}
 8008d5c:	fff88407 	.word	0xfff88407

08008d60 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d101      	bne.n	8008d72 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e084      	b.n	8008e7c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d7e:	b2db      	uxtb	r3, r3
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d106      	bne.n	8008d92 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f010 f9e7 	bl	8019160 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2202      	movs	r2, #2
 8008d96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	681a      	ldr	r2, [r3, #0]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008da8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	68db      	ldr	r3, [r3, #12]
 8008dae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008db2:	d902      	bls.n	8008dba <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008db4:	2300      	movs	r3, #0
 8008db6:	60fb      	str	r3, [r7, #12]
 8008db8:	e002      	b.n	8008dc0 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008dba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dbe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008dc8:	d007      	beq.n	8008dda <HAL_SPI_Init+0x7a>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008dd2:	d002      	beq.n	8008dda <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d10b      	bne.n	8008dfa <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008dea:	d903      	bls.n	8008df4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	2202      	movs	r2, #2
 8008df0:	631a      	str	r2, [r3, #48]	; 0x30
 8008df2:	e002      	b.n	8008dfa <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2201      	movs	r2, #1
 8008df8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	685a      	ldr	r2, [r3, #4]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	689b      	ldr	r3, [r3, #8]
 8008e02:	431a      	orrs	r2, r3
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	691b      	ldr	r3, [r3, #16]
 8008e08:	431a      	orrs	r2, r3
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	695b      	ldr	r3, [r3, #20]
 8008e0e:	431a      	orrs	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	699b      	ldr	r3, [r3, #24]
 8008e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e18:	431a      	orrs	r2, r3
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	69db      	ldr	r3, [r3, #28]
 8008e1e:	431a      	orrs	r2, r3
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a1b      	ldr	r3, [r3, #32]
 8008e24:	ea42 0103 	orr.w	r1, r2, r3
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	430a      	orrs	r2, r1
 8008e32:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	699b      	ldr	r3, [r3, #24]
 8008e38:	0c1b      	lsrs	r3, r3, #16
 8008e3a:	f003 0204 	and.w	r2, r3, #4
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e42:	431a      	orrs	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e48:	431a      	orrs	r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	ea42 0103 	orr.w	r1, r2, r3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	68fa      	ldr	r2, [r7, #12]
 8008e58:	430a      	orrs	r2, r1
 8008e5a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	69da      	ldr	r2, [r3, #28]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e6a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	2201      	movs	r2, #1
 8008e76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008e7a:	2300      	movs	r3, #0
}
 8008e7c:	4618      	mov	r0, r3
 8008e7e:	3710      	adds	r7, #16
 8008e80:	46bd      	mov	sp, r7
 8008e82:	bd80      	pop	{r7, pc}

08008e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b082      	sub	sp, #8
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d101      	bne.n	8008e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e92:	2301      	movs	r3, #1
 8008e94:	e01d      	b.n	8008ed2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d106      	bne.n	8008eb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008eaa:	6878      	ldr	r0, [r7, #4]
 8008eac:	f010 f9ba 	bl	8019224 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681a      	ldr	r2, [r3, #0]
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	3304      	adds	r3, #4
 8008ec0:	4619      	mov	r1, r3
 8008ec2:	4610      	mov	r0, r2
 8008ec4:	f000 fbae 	bl	8009624 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008ed0:	2300      	movs	r3, #0
}
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	3708      	adds	r7, #8
 8008ed6:	46bd      	mov	sp, r7
 8008ed8:	bd80      	pop	{r7, pc}
	...

08008edc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008edc:	b480      	push	{r7}
 8008ede:	b085      	sub	sp, #20
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2202      	movs	r2, #2
 8008ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	689a      	ldr	r2, [r3, #8]
 8008ef2:	4b0e      	ldr	r3, [pc, #56]	; (8008f2c <HAL_TIM_Base_Start+0x50>)
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2b06      	cmp	r3, #6
 8008efc:	d00b      	beq.n	8008f16 <HAL_TIM_Base_Start+0x3a>
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f04:	d007      	beq.n	8008f16 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681a      	ldr	r2, [r3, #0]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f042 0201 	orr.w	r2, r2, #1
 8008f14:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2201      	movs	r2, #1
 8008f1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3714      	adds	r7, #20
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr
 8008f2c:	00010007 	.word	0x00010007

08008f30 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b085      	sub	sp, #20
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68da      	ldr	r2, [r3, #12]
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f042 0201 	orr.w	r2, r2, #1
 8008f46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	689a      	ldr	r2, [r3, #8]
 8008f4e:	4b0c      	ldr	r3, [pc, #48]	; (8008f80 <HAL_TIM_Base_Start_IT+0x50>)
 8008f50:	4013      	ands	r3, r2
 8008f52:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	2b06      	cmp	r3, #6
 8008f58:	d00b      	beq.n	8008f72 <HAL_TIM_Base_Start_IT+0x42>
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f60:	d007      	beq.n	8008f72 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	681a      	ldr	r2, [r3, #0]
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	f042 0201 	orr.w	r2, r2, #1
 8008f70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3714      	adds	r7, #20
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7e:	4770      	bx	lr
 8008f80:	00010007 	.word	0x00010007

08008f84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f84:	b580      	push	{r7, lr}
 8008f86:	b082      	sub	sp, #8
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d101      	bne.n	8008f96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f92:	2301      	movs	r3, #1
 8008f94:	e01d      	b.n	8008fd2 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d106      	bne.n	8008fb0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008faa:	6878      	ldr	r0, [r7, #4]
 8008fac:	f010 f996 	bl	80192dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2202      	movs	r2, #2
 8008fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	3304      	adds	r3, #4
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	4610      	mov	r0, r2
 8008fc4:	f000 fb2e 	bl	8009624 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
}
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}

08008fda <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008fda:	b580      	push	{r7, lr}
 8008fdc:	b082      	sub	sp, #8
 8008fde:	af00      	add	r7, sp, #0
 8008fe0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	691b      	ldr	r3, [r3, #16]
 8008fe8:	f003 0302 	and.w	r3, r3, #2
 8008fec:	2b02      	cmp	r3, #2
 8008fee:	d122      	bne.n	8009036 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	f003 0302 	and.w	r3, r3, #2
 8008ffa:	2b02      	cmp	r3, #2
 8008ffc:	d11b      	bne.n	8009036 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	f06f 0202 	mvn.w	r2, #2
 8009006:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2201      	movs	r2, #1
 800900c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	699b      	ldr	r3, [r3, #24]
 8009014:	f003 0303 	and.w	r3, r3, #3
 8009018:	2b00      	cmp	r3, #0
 800901a:	d003      	beq.n	8009024 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800901c:	6878      	ldr	r0, [r7, #4]
 800901e:	f000 fae3 	bl	80095e8 <HAL_TIM_IC_CaptureCallback>
 8009022:	e005      	b.n	8009030 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fad5 	bl	80095d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800902a:	6878      	ldr	r0, [r7, #4]
 800902c:	f000 fae6 	bl	80095fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2200      	movs	r2, #0
 8009034:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	f003 0304 	and.w	r3, r3, #4
 8009040:	2b04      	cmp	r3, #4
 8009042:	d122      	bne.n	800908a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	68db      	ldr	r3, [r3, #12]
 800904a:	f003 0304 	and.w	r3, r3, #4
 800904e:	2b04      	cmp	r3, #4
 8009050:	d11b      	bne.n	800908a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f06f 0204 	mvn.w	r2, #4
 800905a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2202      	movs	r2, #2
 8009060:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800906c:	2b00      	cmp	r3, #0
 800906e:	d003      	beq.n	8009078 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 fab9 	bl	80095e8 <HAL_TIM_IC_CaptureCallback>
 8009076:	e005      	b.n	8009084 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 faab 	bl	80095d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800907e:	6878      	ldr	r0, [r7, #4]
 8009080:	f000 fabc 	bl	80095fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2200      	movs	r2, #0
 8009088:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	691b      	ldr	r3, [r3, #16]
 8009090:	f003 0308 	and.w	r3, r3, #8
 8009094:	2b08      	cmp	r3, #8
 8009096:	d122      	bne.n	80090de <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	f003 0308 	and.w	r3, r3, #8
 80090a2:	2b08      	cmp	r3, #8
 80090a4:	d11b      	bne.n	80090de <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f06f 0208 	mvn.w	r2, #8
 80090ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	2204      	movs	r2, #4
 80090b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	69db      	ldr	r3, [r3, #28]
 80090bc:	f003 0303 	and.w	r3, r3, #3
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d003      	beq.n	80090cc <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f000 fa8f 	bl	80095e8 <HAL_TIM_IC_CaptureCallback>
 80090ca:	e005      	b.n	80090d8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090cc:	6878      	ldr	r0, [r7, #4]
 80090ce:	f000 fa81 	bl	80095d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090d2:	6878      	ldr	r0, [r7, #4]
 80090d4:	f000 fa92 	bl	80095fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2200      	movs	r2, #0
 80090dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	691b      	ldr	r3, [r3, #16]
 80090e4:	f003 0310 	and.w	r3, r3, #16
 80090e8:	2b10      	cmp	r3, #16
 80090ea:	d122      	bne.n	8009132 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	f003 0310 	and.w	r3, r3, #16
 80090f6:	2b10      	cmp	r3, #16
 80090f8:	d11b      	bne.n	8009132 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f06f 0210 	mvn.w	r2, #16
 8009102:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2208      	movs	r2, #8
 8009108:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	69db      	ldr	r3, [r3, #28]
 8009110:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009114:	2b00      	cmp	r3, #0
 8009116:	d003      	beq.n	8009120 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 fa65 	bl	80095e8 <HAL_TIM_IC_CaptureCallback>
 800911e:	e005      	b.n	800912c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009120:	6878      	ldr	r0, [r7, #4]
 8009122:	f000 fa57 	bl	80095d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 fa68 	bl	80095fc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	2200      	movs	r2, #0
 8009130:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	691b      	ldr	r3, [r3, #16]
 8009138:	f003 0301 	and.w	r3, r3, #1
 800913c:	2b01      	cmp	r3, #1
 800913e:	d10e      	bne.n	800915e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	f003 0301 	and.w	r3, r3, #1
 800914a:	2b01      	cmp	r3, #1
 800914c:	d107      	bne.n	800915e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f06f 0201 	mvn.w	r2, #1
 8009156:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f00f f9e3 	bl	8018524 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	691b      	ldr	r3, [r3, #16]
 8009164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009168:	2b80      	cmp	r3, #128	; 0x80
 800916a:	d10e      	bne.n	800918a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	68db      	ldr	r3, [r3, #12]
 8009172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009176:	2b80      	cmp	r3, #128	; 0x80
 8009178:	d107      	bne.n	800918a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 fec9 	bl	8009f1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	691b      	ldr	r3, [r3, #16]
 8009190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009198:	d10e      	bne.n	80091b8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091a4:	2b80      	cmp	r3, #128	; 0x80
 80091a6:	d107      	bne.n	80091b8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80091b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 febc 	bl	8009f30 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	691b      	ldr	r3, [r3, #16]
 80091be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091c2:	2b40      	cmp	r3, #64	; 0x40
 80091c4:	d10e      	bne.n	80091e4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091d0:	2b40      	cmp	r3, #64	; 0x40
 80091d2:	d107      	bne.n	80091e4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80091dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	f000 fa16 	bl	8009610 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	691b      	ldr	r3, [r3, #16]
 80091ea:	f003 0320 	and.w	r3, r3, #32
 80091ee:	2b20      	cmp	r3, #32
 80091f0:	d10e      	bne.n	8009210 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	f003 0320 	and.w	r3, r3, #32
 80091fc:	2b20      	cmp	r3, #32
 80091fe:	d107      	bne.n	8009210 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	f06f 0220 	mvn.w	r2, #32
 8009208:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 fe7c 	bl	8009f08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009210:	bf00      	nop
 8009212:	3708      	adds	r7, #8
 8009214:	46bd      	mov	sp, r7
 8009216:	bd80      	pop	{r7, pc}

08009218 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b084      	sub	sp, #16
 800921c:	af00      	add	r7, sp, #0
 800921e:	60f8      	str	r0, [r7, #12]
 8009220:	60b9      	str	r1, [r7, #8]
 8009222:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800922a:	2b01      	cmp	r3, #1
 800922c:	d101      	bne.n	8009232 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800922e:	2302      	movs	r3, #2
 8009230:	e105      	b.n	800943e <HAL_TIM_PWM_ConfigChannel+0x226>
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2201      	movs	r2, #1
 8009236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	2202      	movs	r2, #2
 800923e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2b14      	cmp	r3, #20
 8009246:	f200 80f0 	bhi.w	800942a <HAL_TIM_PWM_ConfigChannel+0x212>
 800924a:	a201      	add	r2, pc, #4	; (adr r2, 8009250 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800924c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009250:	080092a5 	.word	0x080092a5
 8009254:	0800942b 	.word	0x0800942b
 8009258:	0800942b 	.word	0x0800942b
 800925c:	0800942b 	.word	0x0800942b
 8009260:	080092e5 	.word	0x080092e5
 8009264:	0800942b 	.word	0x0800942b
 8009268:	0800942b 	.word	0x0800942b
 800926c:	0800942b 	.word	0x0800942b
 8009270:	08009327 	.word	0x08009327
 8009274:	0800942b 	.word	0x0800942b
 8009278:	0800942b 	.word	0x0800942b
 800927c:	0800942b 	.word	0x0800942b
 8009280:	08009367 	.word	0x08009367
 8009284:	0800942b 	.word	0x0800942b
 8009288:	0800942b 	.word	0x0800942b
 800928c:	0800942b 	.word	0x0800942b
 8009290:	080093a9 	.word	0x080093a9
 8009294:	0800942b 	.word	0x0800942b
 8009298:	0800942b 	.word	0x0800942b
 800929c:	0800942b 	.word	0x0800942b
 80092a0:	080093e9 	.word	0x080093e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	68b9      	ldr	r1, [r7, #8]
 80092aa:	4618      	mov	r0, r3
 80092ac:	f000 fa5a 	bl	8009764 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	699a      	ldr	r2, [r3, #24]
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	f042 0208 	orr.w	r2, r2, #8
 80092be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	699a      	ldr	r2, [r3, #24]
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	f022 0204 	bic.w	r2, r2, #4
 80092ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	6999      	ldr	r1, [r3, #24]
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	691a      	ldr	r2, [r3, #16]
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	430a      	orrs	r2, r1
 80092e0:	619a      	str	r2, [r3, #24]
      break;
 80092e2:	e0a3      	b.n	800942c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	68b9      	ldr	r1, [r7, #8]
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 faac 	bl	8009848 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	699a      	ldr	r2, [r3, #24]
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	699a      	ldr	r2, [r3, #24]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800930e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6999      	ldr	r1, [r3, #24]
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	691b      	ldr	r3, [r3, #16]
 800931a:	021a      	lsls	r2, r3, #8
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	430a      	orrs	r2, r1
 8009322:	619a      	str	r2, [r3, #24]
      break;
 8009324:	e082      	b.n	800942c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	68b9      	ldr	r1, [r7, #8]
 800932c:	4618      	mov	r0, r3
 800932e:	f000 fb03 	bl	8009938 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	69da      	ldr	r2, [r3, #28]
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f042 0208 	orr.w	r2, r2, #8
 8009340:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	69da      	ldr	r2, [r3, #28]
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f022 0204 	bic.w	r2, r2, #4
 8009350:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	69d9      	ldr	r1, [r3, #28]
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	691a      	ldr	r2, [r3, #16]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	430a      	orrs	r2, r1
 8009362:	61da      	str	r2, [r3, #28]
      break;
 8009364:	e062      	b.n	800942c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	68b9      	ldr	r1, [r7, #8]
 800936c:	4618      	mov	r0, r3
 800936e:	f000 fb59 	bl	8009a24 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	69da      	ldr	r2, [r3, #28]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009380:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	69da      	ldr	r2, [r3, #28]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009390:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	69d9      	ldr	r1, [r3, #28]
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	691b      	ldr	r3, [r3, #16]
 800939c:	021a      	lsls	r2, r3, #8
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	430a      	orrs	r2, r1
 80093a4:	61da      	str	r2, [r3, #28]
      break;
 80093a6:	e041      	b.n	800942c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	68b9      	ldr	r1, [r7, #8]
 80093ae:	4618      	mov	r0, r3
 80093b0:	f000 fb90 	bl	8009ad4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	f042 0208 	orr.w	r2, r2, #8
 80093c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f022 0204 	bic.w	r2, r2, #4
 80093d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80093d4:	68fb      	ldr	r3, [r7, #12]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	691a      	ldr	r2, [r3, #16]
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	430a      	orrs	r2, r1
 80093e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80093e6:	e021      	b.n	800942c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	68b9      	ldr	r1, [r7, #8]
 80093ee:	4618      	mov	r0, r3
 80093f0:	f000 fbc2 	bl	8009b78 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009402:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009412:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	021a      	lsls	r2, r3, #8
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	430a      	orrs	r2, r1
 8009426:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009428:	e000      	b.n	800942c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800942a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2200      	movs	r2, #0
 8009438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800943c:	2300      	movs	r3, #0
}
 800943e:	4618      	mov	r0, r3
 8009440:	3710      	adds	r7, #16
 8009442:	46bd      	mov	sp, r7
 8009444:	bd80      	pop	{r7, pc}
 8009446:	bf00      	nop

08009448 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
 8009450:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009458:	2b01      	cmp	r3, #1
 800945a:	d101      	bne.n	8009460 <HAL_TIM_ConfigClockSource+0x18>
 800945c:	2302      	movs	r3, #2
 800945e:	e0b3      	b.n	80095c8 <HAL_TIM_ConfigClockSource+0x180>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2201      	movs	r2, #1
 8009464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2202      	movs	r2, #2
 800946c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009478:	68fa      	ldr	r2, [r7, #12]
 800947a:	4b55      	ldr	r3, [pc, #340]	; (80095d0 <HAL_TIM_ConfigClockSource+0x188>)
 800947c:	4013      	ands	r3, r2
 800947e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009486:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009490:	683b      	ldr	r3, [r7, #0]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009498:	d03e      	beq.n	8009518 <HAL_TIM_ConfigClockSource+0xd0>
 800949a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800949e:	f200 8087 	bhi.w	80095b0 <HAL_TIM_ConfigClockSource+0x168>
 80094a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094a6:	f000 8085 	beq.w	80095b4 <HAL_TIM_ConfigClockSource+0x16c>
 80094aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80094ae:	d87f      	bhi.n	80095b0 <HAL_TIM_ConfigClockSource+0x168>
 80094b0:	2b70      	cmp	r3, #112	; 0x70
 80094b2:	d01a      	beq.n	80094ea <HAL_TIM_ConfigClockSource+0xa2>
 80094b4:	2b70      	cmp	r3, #112	; 0x70
 80094b6:	d87b      	bhi.n	80095b0 <HAL_TIM_ConfigClockSource+0x168>
 80094b8:	2b60      	cmp	r3, #96	; 0x60
 80094ba:	d050      	beq.n	800955e <HAL_TIM_ConfigClockSource+0x116>
 80094bc:	2b60      	cmp	r3, #96	; 0x60
 80094be:	d877      	bhi.n	80095b0 <HAL_TIM_ConfigClockSource+0x168>
 80094c0:	2b50      	cmp	r3, #80	; 0x50
 80094c2:	d03c      	beq.n	800953e <HAL_TIM_ConfigClockSource+0xf6>
 80094c4:	2b50      	cmp	r3, #80	; 0x50
 80094c6:	d873      	bhi.n	80095b0 <HAL_TIM_ConfigClockSource+0x168>
 80094c8:	2b40      	cmp	r3, #64	; 0x40
 80094ca:	d058      	beq.n	800957e <HAL_TIM_ConfigClockSource+0x136>
 80094cc:	2b40      	cmp	r3, #64	; 0x40
 80094ce:	d86f      	bhi.n	80095b0 <HAL_TIM_ConfigClockSource+0x168>
 80094d0:	2b30      	cmp	r3, #48	; 0x30
 80094d2:	d064      	beq.n	800959e <HAL_TIM_ConfigClockSource+0x156>
 80094d4:	2b30      	cmp	r3, #48	; 0x30
 80094d6:	d86b      	bhi.n	80095b0 <HAL_TIM_ConfigClockSource+0x168>
 80094d8:	2b20      	cmp	r3, #32
 80094da:	d060      	beq.n	800959e <HAL_TIM_ConfigClockSource+0x156>
 80094dc:	2b20      	cmp	r3, #32
 80094de:	d867      	bhi.n	80095b0 <HAL_TIM_ConfigClockSource+0x168>
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d05c      	beq.n	800959e <HAL_TIM_ConfigClockSource+0x156>
 80094e4:	2b10      	cmp	r3, #16
 80094e6:	d05a      	beq.n	800959e <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80094e8:	e062      	b.n	80095b0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6818      	ldr	r0, [r3, #0]
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	6899      	ldr	r1, [r3, #8]
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	685a      	ldr	r2, [r3, #4]
 80094f6:	683b      	ldr	r3, [r7, #0]
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	f000 fc0b 	bl	8009d14 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	689b      	ldr	r3, [r3, #8]
 8009504:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800950c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	68fa      	ldr	r2, [r7, #12]
 8009514:	609a      	str	r2, [r3, #8]
      break;
 8009516:	e04e      	b.n	80095b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	6818      	ldr	r0, [r3, #0]
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	6899      	ldr	r1, [r3, #8]
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	685a      	ldr	r2, [r3, #4]
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	f000 fbf4 	bl	8009d14 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	689a      	ldr	r2, [r3, #8]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800953a:	609a      	str	r2, [r3, #8]
      break;
 800953c:	e03b      	b.n	80095b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6818      	ldr	r0, [r3, #0]
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	6859      	ldr	r1, [r3, #4]
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	68db      	ldr	r3, [r3, #12]
 800954a:	461a      	mov	r2, r3
 800954c:	f000 fb68 	bl	8009c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2150      	movs	r1, #80	; 0x50
 8009556:	4618      	mov	r0, r3
 8009558:	f000 fbc1 	bl	8009cde <TIM_ITRx_SetConfig>
      break;
 800955c:	e02b      	b.n	80095b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6818      	ldr	r0, [r3, #0]
 8009562:	683b      	ldr	r3, [r7, #0]
 8009564:	6859      	ldr	r1, [r3, #4]
 8009566:	683b      	ldr	r3, [r7, #0]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	461a      	mov	r2, r3
 800956c:	f000 fb87 	bl	8009c7e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	2160      	movs	r1, #96	; 0x60
 8009576:	4618      	mov	r0, r3
 8009578:	f000 fbb1 	bl	8009cde <TIM_ITRx_SetConfig>
      break;
 800957c:	e01b      	b.n	80095b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6818      	ldr	r0, [r3, #0]
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	6859      	ldr	r1, [r3, #4]
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	68db      	ldr	r3, [r3, #12]
 800958a:	461a      	mov	r2, r3
 800958c:	f000 fb48 	bl	8009c20 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	2140      	movs	r1, #64	; 0x40
 8009596:	4618      	mov	r0, r3
 8009598:	f000 fba1 	bl	8009cde <TIM_ITRx_SetConfig>
      break;
 800959c:	e00b      	b.n	80095b6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681a      	ldr	r2, [r3, #0]
 80095a2:	683b      	ldr	r3, [r7, #0]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4619      	mov	r1, r3
 80095a8:	4610      	mov	r0, r2
 80095aa:	f000 fb98 	bl	8009cde <TIM_ITRx_SetConfig>
      break;
 80095ae:	e002      	b.n	80095b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80095b0:	bf00      	nop
 80095b2:	e000      	b.n	80095b6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80095b4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2200      	movs	r2, #0
 80095c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80095c6:	2300      	movs	r3, #0
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	3710      	adds	r7, #16
 80095cc:	46bd      	mov	sp, r7
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	fffeff88 	.word	0xfffeff88

080095d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b083      	sub	sp, #12
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80095dc:	bf00      	nop
 80095de:	370c      	adds	r7, #12
 80095e0:	46bd      	mov	sp, r7
 80095e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e6:	4770      	bx	lr

080095e8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80095e8:	b480      	push	{r7}
 80095ea:	b083      	sub	sp, #12
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80095f0:	bf00      	nop
 80095f2:	370c      	adds	r7, #12
 80095f4:	46bd      	mov	sp, r7
 80095f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fa:	4770      	bx	lr

080095fc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80095fc:	b480      	push	{r7}
 80095fe:	b083      	sub	sp, #12
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009604:	bf00      	nop
 8009606:	370c      	adds	r7, #12
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009610:	b480      	push	{r7}
 8009612:	b083      	sub	sp, #12
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009618:	bf00      	nop
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009622:	4770      	bx	lr

08009624 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
 800962c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	4a40      	ldr	r2, [pc, #256]	; (8009738 <TIM_Base_SetConfig+0x114>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d013      	beq.n	8009664 <TIM_Base_SetConfig+0x40>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009642:	d00f      	beq.n	8009664 <TIM_Base_SetConfig+0x40>
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	4a3d      	ldr	r2, [pc, #244]	; (800973c <TIM_Base_SetConfig+0x118>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d00b      	beq.n	8009664 <TIM_Base_SetConfig+0x40>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	4a3c      	ldr	r2, [pc, #240]	; (8009740 <TIM_Base_SetConfig+0x11c>)
 8009650:	4293      	cmp	r3, r2
 8009652:	d007      	beq.n	8009664 <TIM_Base_SetConfig+0x40>
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	4a3b      	ldr	r2, [pc, #236]	; (8009744 <TIM_Base_SetConfig+0x120>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d003      	beq.n	8009664 <TIM_Base_SetConfig+0x40>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	4a3a      	ldr	r2, [pc, #232]	; (8009748 <TIM_Base_SetConfig+0x124>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d108      	bne.n	8009676 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800966a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	68fa      	ldr	r2, [r7, #12]
 8009672:	4313      	orrs	r3, r2
 8009674:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4a2f      	ldr	r2, [pc, #188]	; (8009738 <TIM_Base_SetConfig+0x114>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d02b      	beq.n	80096d6 <TIM_Base_SetConfig+0xb2>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009684:	d027      	beq.n	80096d6 <TIM_Base_SetConfig+0xb2>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	4a2c      	ldr	r2, [pc, #176]	; (800973c <TIM_Base_SetConfig+0x118>)
 800968a:	4293      	cmp	r3, r2
 800968c:	d023      	beq.n	80096d6 <TIM_Base_SetConfig+0xb2>
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	4a2b      	ldr	r2, [pc, #172]	; (8009740 <TIM_Base_SetConfig+0x11c>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d01f      	beq.n	80096d6 <TIM_Base_SetConfig+0xb2>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	4a2a      	ldr	r2, [pc, #168]	; (8009744 <TIM_Base_SetConfig+0x120>)
 800969a:	4293      	cmp	r3, r2
 800969c:	d01b      	beq.n	80096d6 <TIM_Base_SetConfig+0xb2>
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	4a29      	ldr	r2, [pc, #164]	; (8009748 <TIM_Base_SetConfig+0x124>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d017      	beq.n	80096d6 <TIM_Base_SetConfig+0xb2>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	4a28      	ldr	r2, [pc, #160]	; (800974c <TIM_Base_SetConfig+0x128>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d013      	beq.n	80096d6 <TIM_Base_SetConfig+0xb2>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4a27      	ldr	r2, [pc, #156]	; (8009750 <TIM_Base_SetConfig+0x12c>)
 80096b2:	4293      	cmp	r3, r2
 80096b4:	d00f      	beq.n	80096d6 <TIM_Base_SetConfig+0xb2>
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	4a26      	ldr	r2, [pc, #152]	; (8009754 <TIM_Base_SetConfig+0x130>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d00b      	beq.n	80096d6 <TIM_Base_SetConfig+0xb2>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	4a25      	ldr	r2, [pc, #148]	; (8009758 <TIM_Base_SetConfig+0x134>)
 80096c2:	4293      	cmp	r3, r2
 80096c4:	d007      	beq.n	80096d6 <TIM_Base_SetConfig+0xb2>
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	4a24      	ldr	r2, [pc, #144]	; (800975c <TIM_Base_SetConfig+0x138>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d003      	beq.n	80096d6 <TIM_Base_SetConfig+0xb2>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	4a23      	ldr	r2, [pc, #140]	; (8009760 <TIM_Base_SetConfig+0x13c>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d108      	bne.n	80096e8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80096dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	68db      	ldr	r3, [r3, #12]
 80096e2:	68fa      	ldr	r2, [r7, #12]
 80096e4:	4313      	orrs	r3, r2
 80096e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	695b      	ldr	r3, [r3, #20]
 80096f2:	4313      	orrs	r3, r2
 80096f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	689a      	ldr	r2, [r3, #8]
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	681a      	ldr	r2, [r3, #0]
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	4a0a      	ldr	r2, [pc, #40]	; (8009738 <TIM_Base_SetConfig+0x114>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d003      	beq.n	800971c <TIM_Base_SetConfig+0xf8>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4a0c      	ldr	r2, [pc, #48]	; (8009748 <TIM_Base_SetConfig+0x124>)
 8009718:	4293      	cmp	r3, r2
 800971a:	d103      	bne.n	8009724 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	691a      	ldr	r2, [r3, #16]
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2201      	movs	r2, #1
 8009728:	615a      	str	r2, [r3, #20]
}
 800972a:	bf00      	nop
 800972c:	3714      	adds	r7, #20
 800972e:	46bd      	mov	sp, r7
 8009730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009734:	4770      	bx	lr
 8009736:	bf00      	nop
 8009738:	40010000 	.word	0x40010000
 800973c:	40000400 	.word	0x40000400
 8009740:	40000800 	.word	0x40000800
 8009744:	40000c00 	.word	0x40000c00
 8009748:	40010400 	.word	0x40010400
 800974c:	40014000 	.word	0x40014000
 8009750:	40014400 	.word	0x40014400
 8009754:	40014800 	.word	0x40014800
 8009758:	40001800 	.word	0x40001800
 800975c:	40001c00 	.word	0x40001c00
 8009760:	40002000 	.word	0x40002000

08009764 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009764:	b480      	push	{r7}
 8009766:	b087      	sub	sp, #28
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a1b      	ldr	r3, [r3, #32]
 8009772:	f023 0201 	bic.w	r2, r3, #1
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6a1b      	ldr	r3, [r3, #32]
 800977e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	699b      	ldr	r3, [r3, #24]
 800978a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	4b2b      	ldr	r3, [pc, #172]	; (800983c <TIM_OC1_SetConfig+0xd8>)
 8009790:	4013      	ands	r3, r2
 8009792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	f023 0303 	bic.w	r3, r3, #3
 800979a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800979c:	683b      	ldr	r3, [r7, #0]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	68fa      	ldr	r2, [r7, #12]
 80097a2:	4313      	orrs	r3, r2
 80097a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80097a6:	697b      	ldr	r3, [r7, #20]
 80097a8:	f023 0302 	bic.w	r3, r3, #2
 80097ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	689b      	ldr	r3, [r3, #8]
 80097b2:	697a      	ldr	r2, [r7, #20]
 80097b4:	4313      	orrs	r3, r2
 80097b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	4a21      	ldr	r2, [pc, #132]	; (8009840 <TIM_OC1_SetConfig+0xdc>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d003      	beq.n	80097c8 <TIM_OC1_SetConfig+0x64>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	4a20      	ldr	r2, [pc, #128]	; (8009844 <TIM_OC1_SetConfig+0xe0>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d10c      	bne.n	80097e2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	f023 0308 	bic.w	r3, r3, #8
 80097ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80097d0:	683b      	ldr	r3, [r7, #0]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	697a      	ldr	r2, [r7, #20]
 80097d6:	4313      	orrs	r3, r2
 80097d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80097da:	697b      	ldr	r3, [r7, #20]
 80097dc:	f023 0304 	bic.w	r3, r3, #4
 80097e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	4a16      	ldr	r2, [pc, #88]	; (8009840 <TIM_OC1_SetConfig+0xdc>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d003      	beq.n	80097f2 <TIM_OC1_SetConfig+0x8e>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4a15      	ldr	r2, [pc, #84]	; (8009844 <TIM_OC1_SetConfig+0xe0>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d111      	bne.n	8009816 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80097f2:	693b      	ldr	r3, [r7, #16]
 80097f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80097fa:	693b      	ldr	r3, [r7, #16]
 80097fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009800:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009802:	683b      	ldr	r3, [r7, #0]
 8009804:	695b      	ldr	r3, [r3, #20]
 8009806:	693a      	ldr	r2, [r7, #16]
 8009808:	4313      	orrs	r3, r2
 800980a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800980c:	683b      	ldr	r3, [r7, #0]
 800980e:	699b      	ldr	r3, [r3, #24]
 8009810:	693a      	ldr	r2, [r7, #16]
 8009812:	4313      	orrs	r3, r2
 8009814:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	693a      	ldr	r2, [r7, #16]
 800981a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	68fa      	ldr	r2, [r7, #12]
 8009820:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	685a      	ldr	r2, [r3, #4]
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	621a      	str	r2, [r3, #32]
}
 8009830:	bf00      	nop
 8009832:	371c      	adds	r7, #28
 8009834:	46bd      	mov	sp, r7
 8009836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983a:	4770      	bx	lr
 800983c:	fffeff8f 	.word	0xfffeff8f
 8009840:	40010000 	.word	0x40010000
 8009844:	40010400 	.word	0x40010400

08009848 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009848:	b480      	push	{r7}
 800984a:	b087      	sub	sp, #28
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6a1b      	ldr	r3, [r3, #32]
 8009856:	f023 0210 	bic.w	r2, r3, #16
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a1b      	ldr	r3, [r3, #32]
 8009862:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	699b      	ldr	r3, [r3, #24]
 800986e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009870:	68fa      	ldr	r2, [r7, #12]
 8009872:	4b2e      	ldr	r3, [pc, #184]	; (800992c <TIM_OC2_SetConfig+0xe4>)
 8009874:	4013      	ands	r3, r2
 8009876:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800987e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009880:	683b      	ldr	r3, [r7, #0]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	021b      	lsls	r3, r3, #8
 8009886:	68fa      	ldr	r2, [r7, #12]
 8009888:	4313      	orrs	r3, r2
 800988a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800988c:	697b      	ldr	r3, [r7, #20]
 800988e:	f023 0320 	bic.w	r3, r3, #32
 8009892:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	689b      	ldr	r3, [r3, #8]
 8009898:	011b      	lsls	r3, r3, #4
 800989a:	697a      	ldr	r2, [r7, #20]
 800989c:	4313      	orrs	r3, r2
 800989e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a23      	ldr	r2, [pc, #140]	; (8009930 <TIM_OC2_SetConfig+0xe8>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d003      	beq.n	80098b0 <TIM_OC2_SetConfig+0x68>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a22      	ldr	r2, [pc, #136]	; (8009934 <TIM_OC2_SetConfig+0xec>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d10d      	bne.n	80098cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80098b0:	697b      	ldr	r3, [r7, #20]
 80098b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	68db      	ldr	r3, [r3, #12]
 80098bc:	011b      	lsls	r3, r3, #4
 80098be:	697a      	ldr	r2, [r7, #20]
 80098c0:	4313      	orrs	r3, r2
 80098c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80098c4:	697b      	ldr	r3, [r7, #20]
 80098c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80098ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a18      	ldr	r2, [pc, #96]	; (8009930 <TIM_OC2_SetConfig+0xe8>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d003      	beq.n	80098dc <TIM_OC2_SetConfig+0x94>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	4a17      	ldr	r2, [pc, #92]	; (8009934 <TIM_OC2_SetConfig+0xec>)
 80098d8:	4293      	cmp	r3, r2
 80098da:	d113      	bne.n	8009904 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80098dc:	693b      	ldr	r3, [r7, #16]
 80098de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80098e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80098ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	695b      	ldr	r3, [r3, #20]
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	693a      	ldr	r2, [r7, #16]
 80098f4:	4313      	orrs	r3, r2
 80098f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	699b      	ldr	r3, [r3, #24]
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	693a      	ldr	r2, [r7, #16]
 8009900:	4313      	orrs	r3, r2
 8009902:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	693a      	ldr	r2, [r7, #16]
 8009908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	68fa      	ldr	r2, [r7, #12]
 800990e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009910:	683b      	ldr	r3, [r7, #0]
 8009912:	685a      	ldr	r2, [r3, #4]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	697a      	ldr	r2, [r7, #20]
 800991c:	621a      	str	r2, [r3, #32]
}
 800991e:	bf00      	nop
 8009920:	371c      	adds	r7, #28
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr
 800992a:	bf00      	nop
 800992c:	feff8fff 	.word	0xfeff8fff
 8009930:	40010000 	.word	0x40010000
 8009934:	40010400 	.word	0x40010400

08009938 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009938:	b480      	push	{r7}
 800993a:	b087      	sub	sp, #28
 800993c:	af00      	add	r7, sp, #0
 800993e:	6078      	str	r0, [r7, #4]
 8009940:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6a1b      	ldr	r3, [r3, #32]
 8009946:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6a1b      	ldr	r3, [r3, #32]
 8009952:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	69db      	ldr	r3, [r3, #28]
 800995e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009960:	68fa      	ldr	r2, [r7, #12]
 8009962:	4b2d      	ldr	r3, [pc, #180]	; (8009a18 <TIM_OC3_SetConfig+0xe0>)
 8009964:	4013      	ands	r3, r2
 8009966:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f023 0303 	bic.w	r3, r3, #3
 800996e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	68fa      	ldr	r2, [r7, #12]
 8009976:	4313      	orrs	r3, r2
 8009978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009980:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	689b      	ldr	r3, [r3, #8]
 8009986:	021b      	lsls	r3, r3, #8
 8009988:	697a      	ldr	r2, [r7, #20]
 800998a:	4313      	orrs	r3, r2
 800998c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	4a22      	ldr	r2, [pc, #136]	; (8009a1c <TIM_OC3_SetConfig+0xe4>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d003      	beq.n	800999e <TIM_OC3_SetConfig+0x66>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	4a21      	ldr	r2, [pc, #132]	; (8009a20 <TIM_OC3_SetConfig+0xe8>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d10d      	bne.n	80099ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80099a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	021b      	lsls	r3, r3, #8
 80099ac:	697a      	ldr	r2, [r7, #20]
 80099ae:	4313      	orrs	r3, r2
 80099b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80099b2:	697b      	ldr	r3, [r7, #20]
 80099b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80099b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	4a17      	ldr	r2, [pc, #92]	; (8009a1c <TIM_OC3_SetConfig+0xe4>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d003      	beq.n	80099ca <TIM_OC3_SetConfig+0x92>
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	4a16      	ldr	r2, [pc, #88]	; (8009a20 <TIM_OC3_SetConfig+0xe8>)
 80099c6:	4293      	cmp	r3, r2
 80099c8:	d113      	bne.n	80099f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80099ca:	693b      	ldr	r3, [r7, #16]
 80099cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80099d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80099d2:	693b      	ldr	r3, [r7, #16]
 80099d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80099d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	695b      	ldr	r3, [r3, #20]
 80099de:	011b      	lsls	r3, r3, #4
 80099e0:	693a      	ldr	r2, [r7, #16]
 80099e2:	4313      	orrs	r3, r2
 80099e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80099e6:	683b      	ldr	r3, [r7, #0]
 80099e8:	699b      	ldr	r3, [r3, #24]
 80099ea:	011b      	lsls	r3, r3, #4
 80099ec:	693a      	ldr	r2, [r7, #16]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	693a      	ldr	r2, [r7, #16]
 80099f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	68fa      	ldr	r2, [r7, #12]
 80099fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80099fe:	683b      	ldr	r3, [r7, #0]
 8009a00:	685a      	ldr	r2, [r3, #4]
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	697a      	ldr	r2, [r7, #20]
 8009a0a:	621a      	str	r2, [r3, #32]
}
 8009a0c:	bf00      	nop
 8009a0e:	371c      	adds	r7, #28
 8009a10:	46bd      	mov	sp, r7
 8009a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a16:	4770      	bx	lr
 8009a18:	fffeff8f 	.word	0xfffeff8f
 8009a1c:	40010000 	.word	0x40010000
 8009a20:	40010400 	.word	0x40010400

08009a24 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a24:	b480      	push	{r7}
 8009a26:	b087      	sub	sp, #28
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	6a1b      	ldr	r3, [r3, #32]
 8009a32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6a1b      	ldr	r3, [r3, #32]
 8009a3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	69db      	ldr	r3, [r3, #28]
 8009a4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a4c:	68fa      	ldr	r2, [r7, #12]
 8009a4e:	4b1e      	ldr	r3, [pc, #120]	; (8009ac8 <TIM_OC4_SetConfig+0xa4>)
 8009a50:	4013      	ands	r3, r2
 8009a52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	021b      	lsls	r3, r3, #8
 8009a62:	68fa      	ldr	r2, [r7, #12]
 8009a64:	4313      	orrs	r3, r2
 8009a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	689b      	ldr	r3, [r3, #8]
 8009a74:	031b      	lsls	r3, r3, #12
 8009a76:	693a      	ldr	r2, [r7, #16]
 8009a78:	4313      	orrs	r3, r2
 8009a7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	4a13      	ldr	r2, [pc, #76]	; (8009acc <TIM_OC4_SetConfig+0xa8>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d003      	beq.n	8009a8c <TIM_OC4_SetConfig+0x68>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	4a12      	ldr	r2, [pc, #72]	; (8009ad0 <TIM_OC4_SetConfig+0xac>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d109      	bne.n	8009aa0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a92:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	695b      	ldr	r3, [r3, #20]
 8009a98:	019b      	lsls	r3, r3, #6
 8009a9a:	697a      	ldr	r2, [r7, #20]
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	697a      	ldr	r2, [r7, #20]
 8009aa4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	68fa      	ldr	r2, [r7, #12]
 8009aaa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	685a      	ldr	r2, [r3, #4]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	693a      	ldr	r2, [r7, #16]
 8009ab8:	621a      	str	r2, [r3, #32]
}
 8009aba:	bf00      	nop
 8009abc:	371c      	adds	r7, #28
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr
 8009ac6:	bf00      	nop
 8009ac8:	feff8fff 	.word	0xfeff8fff
 8009acc:	40010000 	.word	0x40010000
 8009ad0:	40010400 	.word	0x40010400

08009ad4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009ad4:	b480      	push	{r7}
 8009ad6:	b087      	sub	sp, #28
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
 8009adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6a1b      	ldr	r3, [r3, #32]
 8009ae2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6a1b      	ldr	r3, [r3, #32]
 8009aee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	685b      	ldr	r3, [r3, #4]
 8009af4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009afc:	68fa      	ldr	r2, [r7, #12]
 8009afe:	4b1b      	ldr	r3, [pc, #108]	; (8009b6c <TIM_OC5_SetConfig+0x98>)
 8009b00:	4013      	ands	r3, r2
 8009b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	68fa      	ldr	r2, [r7, #12]
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009b14:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009b16:	683b      	ldr	r3, [r7, #0]
 8009b18:	689b      	ldr	r3, [r3, #8]
 8009b1a:	041b      	lsls	r3, r3, #16
 8009b1c:	693a      	ldr	r2, [r7, #16]
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	4a12      	ldr	r2, [pc, #72]	; (8009b70 <TIM_OC5_SetConfig+0x9c>)
 8009b26:	4293      	cmp	r3, r2
 8009b28:	d003      	beq.n	8009b32 <TIM_OC5_SetConfig+0x5e>
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	4a11      	ldr	r2, [pc, #68]	; (8009b74 <TIM_OC5_SetConfig+0xa0>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d109      	bne.n	8009b46 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009b32:	697b      	ldr	r3, [r7, #20]
 8009b34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009b38:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	695b      	ldr	r3, [r3, #20]
 8009b3e:	021b      	lsls	r3, r3, #8
 8009b40:	697a      	ldr	r2, [r7, #20]
 8009b42:	4313      	orrs	r3, r2
 8009b44:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	697a      	ldr	r2, [r7, #20]
 8009b4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	685a      	ldr	r2, [r3, #4]
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	693a      	ldr	r2, [r7, #16]
 8009b5e:	621a      	str	r2, [r3, #32]
}
 8009b60:	bf00      	nop
 8009b62:	371c      	adds	r7, #28
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr
 8009b6c:	fffeff8f 	.word	0xfffeff8f
 8009b70:	40010000 	.word	0x40010000
 8009b74:	40010400 	.word	0x40010400

08009b78 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b087      	sub	sp, #28
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
 8009b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	6a1b      	ldr	r3, [r3, #32]
 8009b86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a1b      	ldr	r3, [r3, #32]
 8009b92:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	685b      	ldr	r3, [r3, #4]
 8009b98:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009ba0:	68fa      	ldr	r2, [r7, #12]
 8009ba2:	4b1c      	ldr	r3, [pc, #112]	; (8009c14 <TIM_OC6_SetConfig+0x9c>)
 8009ba4:	4013      	ands	r3, r2
 8009ba6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	021b      	lsls	r3, r3, #8
 8009bae:	68fa      	ldr	r2, [r7, #12]
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009bb4:	693b      	ldr	r3, [r7, #16]
 8009bb6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009bba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	689b      	ldr	r3, [r3, #8]
 8009bc0:	051b      	lsls	r3, r3, #20
 8009bc2:	693a      	ldr	r2, [r7, #16]
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	4a13      	ldr	r2, [pc, #76]	; (8009c18 <TIM_OC6_SetConfig+0xa0>)
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d003      	beq.n	8009bd8 <TIM_OC6_SetConfig+0x60>
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	4a12      	ldr	r2, [pc, #72]	; (8009c1c <TIM_OC6_SetConfig+0xa4>)
 8009bd4:	4293      	cmp	r3, r2
 8009bd6:	d109      	bne.n	8009bec <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009bd8:	697b      	ldr	r3, [r7, #20]
 8009bda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009bde:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	695b      	ldr	r3, [r3, #20]
 8009be4:	029b      	lsls	r3, r3, #10
 8009be6:	697a      	ldr	r2, [r7, #20]
 8009be8:	4313      	orrs	r3, r2
 8009bea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	697a      	ldr	r2, [r7, #20]
 8009bf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	68fa      	ldr	r2, [r7, #12]
 8009bf6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	685a      	ldr	r2, [r3, #4]
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	693a      	ldr	r2, [r7, #16]
 8009c04:	621a      	str	r2, [r3, #32]
}
 8009c06:	bf00      	nop
 8009c08:	371c      	adds	r7, #28
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c10:	4770      	bx	lr
 8009c12:	bf00      	nop
 8009c14:	feff8fff 	.word	0xfeff8fff
 8009c18:	40010000 	.word	0x40010000
 8009c1c:	40010400 	.word	0x40010400

08009c20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c20:	b480      	push	{r7}
 8009c22:	b087      	sub	sp, #28
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	6a1b      	ldr	r3, [r3, #32]
 8009c30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	6a1b      	ldr	r3, [r3, #32]
 8009c36:	f023 0201 	bic.w	r2, r3, #1
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	699b      	ldr	r3, [r3, #24]
 8009c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009c44:	693b      	ldr	r3, [r7, #16]
 8009c46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	011b      	lsls	r3, r3, #4
 8009c50:	693a      	ldr	r2, [r7, #16]
 8009c52:	4313      	orrs	r3, r2
 8009c54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	f023 030a 	bic.w	r3, r3, #10
 8009c5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c5e:	697a      	ldr	r2, [r7, #20]
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	4313      	orrs	r3, r2
 8009c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	693a      	ldr	r2, [r7, #16]
 8009c6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	697a      	ldr	r2, [r7, #20]
 8009c70:	621a      	str	r2, [r3, #32]
}
 8009c72:	bf00      	nop
 8009c74:	371c      	adds	r7, #28
 8009c76:	46bd      	mov	sp, r7
 8009c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7c:	4770      	bx	lr

08009c7e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c7e:	b480      	push	{r7}
 8009c80:	b087      	sub	sp, #28
 8009c82:	af00      	add	r7, sp, #0
 8009c84:	60f8      	str	r0, [r7, #12]
 8009c86:	60b9      	str	r1, [r7, #8]
 8009c88:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	6a1b      	ldr	r3, [r3, #32]
 8009c8e:	f023 0210 	bic.w	r2, r3, #16
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	699b      	ldr	r3, [r3, #24]
 8009c9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	6a1b      	ldr	r3, [r3, #32]
 8009ca0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ca8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	031b      	lsls	r3, r3, #12
 8009cae:	697a      	ldr	r2, [r7, #20]
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009cba:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	011b      	lsls	r3, r3, #4
 8009cc0:	693a      	ldr	r2, [r7, #16]
 8009cc2:	4313      	orrs	r3, r2
 8009cc4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	697a      	ldr	r2, [r7, #20]
 8009cca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	693a      	ldr	r2, [r7, #16]
 8009cd0:	621a      	str	r2, [r3, #32]
}
 8009cd2:	bf00      	nop
 8009cd4:	371c      	adds	r7, #28
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr

08009cde <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009cde:	b480      	push	{r7}
 8009ce0:	b085      	sub	sp, #20
 8009ce2:	af00      	add	r7, sp, #0
 8009ce4:	6078      	str	r0, [r7, #4]
 8009ce6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	689b      	ldr	r3, [r3, #8]
 8009cec:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cf4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009cf6:	683a      	ldr	r2, [r7, #0]
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	4313      	orrs	r3, r2
 8009cfc:	f043 0307 	orr.w	r3, r3, #7
 8009d00:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	68fa      	ldr	r2, [r7, #12]
 8009d06:	609a      	str	r2, [r3, #8]
}
 8009d08:	bf00      	nop
 8009d0a:	3714      	adds	r7, #20
 8009d0c:	46bd      	mov	sp, r7
 8009d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d12:	4770      	bx	lr

08009d14 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009d14:	b480      	push	{r7}
 8009d16:	b087      	sub	sp, #28
 8009d18:	af00      	add	r7, sp, #0
 8009d1a:	60f8      	str	r0, [r7, #12]
 8009d1c:	60b9      	str	r1, [r7, #8]
 8009d1e:	607a      	str	r2, [r7, #4]
 8009d20:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009d2e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	021a      	lsls	r2, r3, #8
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	431a      	orrs	r2, r3
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	697a      	ldr	r2, [r7, #20]
 8009d3e:	4313      	orrs	r3, r2
 8009d40:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	697a      	ldr	r2, [r7, #20]
 8009d46:	609a      	str	r2, [r3, #8]
}
 8009d48:	bf00      	nop
 8009d4a:	371c      	adds	r7, #28
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d52:	4770      	bx	lr

08009d54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d54:	b480      	push	{r7}
 8009d56:	b085      	sub	sp, #20
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
 8009d5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d101      	bne.n	8009d6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d68:	2302      	movs	r3, #2
 8009d6a:	e045      	b.n	8009df8 <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2202      	movs	r2, #2
 8009d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	685b      	ldr	r3, [r3, #4]
 8009d82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	689b      	ldr	r3, [r3, #8]
 8009d8a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	4a1c      	ldr	r2, [pc, #112]	; (8009e04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009d92:	4293      	cmp	r3, r2
 8009d94:	d004      	beq.n	8009da0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a1b      	ldr	r2, [pc, #108]	; (8009e08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009d9c:	4293      	cmp	r3, r2
 8009d9e:	d108      	bne.n	8009db2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009da6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009da8:	683b      	ldr	r3, [r7, #0]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	68fa      	ldr	r2, [r7, #12]
 8009dae:	4313      	orrs	r3, r2
 8009db0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009db8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	68fa      	ldr	r2, [r7, #12]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8009dc4:	68bb      	ldr	r3, [r7, #8]
 8009dc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009dca:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	689b      	ldr	r3, [r3, #8]
 8009dd0:	68ba      	ldr	r2, [r7, #8]
 8009dd2:	4313      	orrs	r3, r2
 8009dd4:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	68fa      	ldr	r2, [r7, #12]
 8009ddc:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	68ba      	ldr	r2, [r7, #8]
 8009de4:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2201      	movs	r2, #1
 8009dea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2200      	movs	r2, #0
 8009df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009df6:	2300      	movs	r3, #0
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3714      	adds	r7, #20
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr
 8009e04:	40010000 	.word	0x40010000
 8009e08:	40010400 	.word	0x40010400

08009e0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b085      	sub	sp, #20
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009e16:	2300      	movs	r3, #0
 8009e18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e20:	2b01      	cmp	r3, #1
 8009e22:	d101      	bne.n	8009e28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009e24:	2302      	movs	r3, #2
 8009e26:	e065      	b.n	8009ef4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	2201      	movs	r2, #1
 8009e2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009e36:	683b      	ldr	r3, [r7, #0]
 8009e38:	68db      	ldr	r3, [r3, #12]
 8009e3a:	4313      	orrs	r3, r2
 8009e3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	689b      	ldr	r3, [r3, #8]
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009e52:	683b      	ldr	r3, [r7, #0]
 8009e54:	685b      	ldr	r3, [r3, #4]
 8009e56:	4313      	orrs	r3, r2
 8009e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4313      	orrs	r3, r2
 8009e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	691b      	ldr	r3, [r3, #16]
 8009e72:	4313      	orrs	r3, r2
 8009e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	695b      	ldr	r3, [r3, #20]
 8009e80:	4313      	orrs	r3, r2
 8009e82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e8e:	4313      	orrs	r3, r2
 8009e90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	699b      	ldr	r3, [r3, #24]
 8009e9c:	041b      	lsls	r3, r3, #16
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	4a16      	ldr	r2, [pc, #88]	; (8009f00 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d004      	beq.n	8009eb6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	4a14      	ldr	r2, [pc, #80]	; (8009f04 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d115      	bne.n	8009ee2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ec0:	051b      	lsls	r3, r3, #20
 8009ec2:	4313      	orrs	r3, r2
 8009ec4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	69db      	ldr	r3, [r3, #28]
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	6a1b      	ldr	r3, [r3, #32]
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	68fa      	ldr	r2, [r7, #12]
 8009ee8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2200      	movs	r2, #0
 8009eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ef2:	2300      	movs	r3, #0
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3714      	adds	r7, #20
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr
 8009f00:	40010000 	.word	0x40010000
 8009f04:	40010400 	.word	0x40010400

08009f08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009f08:	b480      	push	{r7}
 8009f0a:	b083      	sub	sp, #12
 8009f0c:	af00      	add	r7, sp, #0
 8009f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009f10:	bf00      	nop
 8009f12:	370c      	adds	r7, #12
 8009f14:	46bd      	mov	sp, r7
 8009f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1a:	4770      	bx	lr

08009f1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009f1c:	b480      	push	{r7}
 8009f1e:	b083      	sub	sp, #12
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009f24:	bf00      	nop
 8009f26:	370c      	adds	r7, #12
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr

08009f30 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009f30:	b480      	push	{r7}
 8009f32:	b083      	sub	sp, #12
 8009f34:	af00      	add	r7, sp, #0
 8009f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009f38:	bf00      	nop
 8009f3a:	370c      	adds	r7, #12
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f42:	4770      	bx	lr

08009f44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009f44:	b580      	push	{r7, lr}
 8009f46:	b082      	sub	sp, #8
 8009f48:	af00      	add	r7, sp, #0
 8009f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d101      	bne.n	8009f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	e040      	b.n	8009fd8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d106      	bne.n	8009f6c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2200      	movs	r2, #0
 8009f62:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f00f fa82 	bl	8019470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2224      	movs	r2, #36	; 0x24
 8009f70:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	681a      	ldr	r2, [r3, #0]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	f022 0201 	bic.w	r2, r2, #1
 8009f80:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f82:	6878      	ldr	r0, [r7, #4]
 8009f84:	f000 f8be 	bl	800a104 <UART_SetConfig>
 8009f88:	4603      	mov	r3, r0
 8009f8a:	2b01      	cmp	r3, #1
 8009f8c:	d101      	bne.n	8009f92 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e022      	b.n	8009fd8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d002      	beq.n	8009fa0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 fb58 	bl	800a650 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	685a      	ldr	r2, [r3, #4]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009fae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	689a      	ldr	r2, [r3, #8]
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009fbe:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f042 0201 	orr.w	r2, r2, #1
 8009fce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009fd0:	6878      	ldr	r0, [r7, #4]
 8009fd2:	f000 fbdf 	bl	800a794 <UART_CheckIdleState>
 8009fd6:	4603      	mov	r3, r0
}
 8009fd8:	4618      	mov	r0, r3
 8009fda:	3708      	adds	r7, #8
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	bd80      	pop	{r7, pc}

08009fe0 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b08a      	sub	sp, #40	; 0x28
 8009fe4:	af02      	add	r7, sp, #8
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	60b9      	str	r1, [r7, #8]
 8009fea:	603b      	str	r3, [r7, #0]
 8009fec:	4613      	mov	r3, r2
 8009fee:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009ff4:	2b20      	cmp	r3, #32
 8009ff6:	d17f      	bne.n	800a0f8 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d002      	beq.n	800a004 <HAL_UART_Transmit+0x24>
 8009ffe:	88fb      	ldrh	r3, [r7, #6]
 800a000:	2b00      	cmp	r3, #0
 800a002:	d101      	bne.n	800a008 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800a004:	2301      	movs	r3, #1
 800a006:	e078      	b.n	800a0fa <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d101      	bne.n	800a016 <HAL_UART_Transmit+0x36>
 800a012:	2302      	movs	r3, #2
 800a014:	e071      	b.n	800a0fa <HAL_UART_Transmit+0x11a>
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	2201      	movs	r2, #1
 800a01a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a01e:	68fb      	ldr	r3, [r7, #12]
 800a020:	2200      	movs	r2, #0
 800a022:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	2221      	movs	r2, #33	; 0x21
 800a028:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a02a:	f7f6 fd81 	bl	8000b30 <HAL_GetTick>
 800a02e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	88fa      	ldrh	r2, [r7, #6]
 800a034:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	88fa      	ldrh	r2, [r7, #6]
 800a03c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	689b      	ldr	r3, [r3, #8]
 800a044:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a048:	d108      	bne.n	800a05c <HAL_UART_Transmit+0x7c>
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	691b      	ldr	r3, [r3, #16]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d104      	bne.n	800a05c <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800a052:	2300      	movs	r3, #0
 800a054:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	61bb      	str	r3, [r7, #24]
 800a05a:	e003      	b.n	800a064 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a060:	2300      	movs	r3, #0
 800a062:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a064:	e02c      	b.n	800a0c0 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a066:	683b      	ldr	r3, [r7, #0]
 800a068:	9300      	str	r3, [sp, #0]
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	2200      	movs	r2, #0
 800a06e:	2180      	movs	r1, #128	; 0x80
 800a070:	68f8      	ldr	r0, [r7, #12]
 800a072:	f000 fbbe 	bl	800a7f2 <UART_WaitOnFlagUntilTimeout>
 800a076:	4603      	mov	r3, r0
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d001      	beq.n	800a080 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 800a07c:	2303      	movs	r3, #3
 800a07e:	e03c      	b.n	800a0fa <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d10b      	bne.n	800a09e <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	881b      	ldrh	r3, [r3, #0]
 800a08a:	461a      	mov	r2, r3
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a094:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	3302      	adds	r3, #2
 800a09a:	61bb      	str	r3, [r7, #24]
 800a09c:	e007      	b.n	800a0ae <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a09e:	69fb      	ldr	r3, [r7, #28]
 800a0a0:	781a      	ldrb	r2, [r3, #0]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a0a8:	69fb      	ldr	r3, [r7, #28]
 800a0aa:	3301      	adds	r3, #1
 800a0ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	3b01      	subs	r3, #1
 800a0b8:	b29a      	uxth	r2, r3
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a0c6:	b29b      	uxth	r3, r3
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1cc      	bne.n	800a066 <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a0cc:	683b      	ldr	r3, [r7, #0]
 800a0ce:	9300      	str	r3, [sp, #0]
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	2140      	movs	r1, #64	; 0x40
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	f000 fb8b 	bl	800a7f2 <UART_WaitOnFlagUntilTimeout>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d001      	beq.n	800a0e6 <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 800a0e2:	2303      	movs	r3, #3
 800a0e4:	e009      	b.n	800a0fa <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2220      	movs	r2, #32
 800a0ea:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	e000      	b.n	800a0fa <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800a0f8:	2302      	movs	r3, #2
  }
}
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	3720      	adds	r7, #32
 800a0fe:	46bd      	mov	sp, r7
 800a100:	bd80      	pop	{r7, pc}
	...

0800a104 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b088      	sub	sp, #32
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a10c:	2300      	movs	r3, #0
 800a10e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a110:	2300      	movs	r3, #0
 800a112:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	689a      	ldr	r2, [r3, #8]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	691b      	ldr	r3, [r3, #16]
 800a11c:	431a      	orrs	r2, r3
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	695b      	ldr	r3, [r3, #20]
 800a122:	431a      	orrs	r2, r3
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	69db      	ldr	r3, [r3, #28]
 800a128:	4313      	orrs	r3, r2
 800a12a:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	681a      	ldr	r2, [r3, #0]
 800a132:	4ba7      	ldr	r3, [pc, #668]	; (800a3d0 <UART_SetConfig+0x2cc>)
 800a134:	4013      	ands	r3, r2
 800a136:	687a      	ldr	r2, [r7, #4]
 800a138:	6812      	ldr	r2, [r2, #0]
 800a13a:	6939      	ldr	r1, [r7, #16]
 800a13c:	430b      	orrs	r3, r1
 800a13e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	685b      	ldr	r3, [r3, #4]
 800a146:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	68da      	ldr	r2, [r3, #12]
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	430a      	orrs	r2, r1
 800a154:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	699b      	ldr	r3, [r3, #24]
 800a15a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	6a1b      	ldr	r3, [r3, #32]
 800a160:	693a      	ldr	r2, [r7, #16]
 800a162:	4313      	orrs	r3, r2
 800a164:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	689b      	ldr	r3, [r3, #8]
 800a16c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	693a      	ldr	r2, [r7, #16]
 800a176:	430a      	orrs	r2, r1
 800a178:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	4a95      	ldr	r2, [pc, #596]	; (800a3d4 <UART_SetConfig+0x2d0>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d120      	bne.n	800a1c6 <UART_SetConfig+0xc2>
 800a184:	4b94      	ldr	r3, [pc, #592]	; (800a3d8 <UART_SetConfig+0x2d4>)
 800a186:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a18a:	f003 0303 	and.w	r3, r3, #3
 800a18e:	2b03      	cmp	r3, #3
 800a190:	d816      	bhi.n	800a1c0 <UART_SetConfig+0xbc>
 800a192:	a201      	add	r2, pc, #4	; (adr r2, 800a198 <UART_SetConfig+0x94>)
 800a194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a198:	0800a1a9 	.word	0x0800a1a9
 800a19c:	0800a1b5 	.word	0x0800a1b5
 800a1a0:	0800a1af 	.word	0x0800a1af
 800a1a4:	0800a1bb 	.word	0x0800a1bb
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	77fb      	strb	r3, [r7, #31]
 800a1ac:	e14f      	b.n	800a44e <UART_SetConfig+0x34a>
 800a1ae:	2302      	movs	r3, #2
 800a1b0:	77fb      	strb	r3, [r7, #31]
 800a1b2:	e14c      	b.n	800a44e <UART_SetConfig+0x34a>
 800a1b4:	2304      	movs	r3, #4
 800a1b6:	77fb      	strb	r3, [r7, #31]
 800a1b8:	e149      	b.n	800a44e <UART_SetConfig+0x34a>
 800a1ba:	2308      	movs	r3, #8
 800a1bc:	77fb      	strb	r3, [r7, #31]
 800a1be:	e146      	b.n	800a44e <UART_SetConfig+0x34a>
 800a1c0:	2310      	movs	r3, #16
 800a1c2:	77fb      	strb	r3, [r7, #31]
 800a1c4:	e143      	b.n	800a44e <UART_SetConfig+0x34a>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	4a84      	ldr	r2, [pc, #528]	; (800a3dc <UART_SetConfig+0x2d8>)
 800a1cc:	4293      	cmp	r3, r2
 800a1ce:	d132      	bne.n	800a236 <UART_SetConfig+0x132>
 800a1d0:	4b81      	ldr	r3, [pc, #516]	; (800a3d8 <UART_SetConfig+0x2d4>)
 800a1d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1d6:	f003 030c 	and.w	r3, r3, #12
 800a1da:	2b0c      	cmp	r3, #12
 800a1dc:	d828      	bhi.n	800a230 <UART_SetConfig+0x12c>
 800a1de:	a201      	add	r2, pc, #4	; (adr r2, 800a1e4 <UART_SetConfig+0xe0>)
 800a1e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e4:	0800a219 	.word	0x0800a219
 800a1e8:	0800a231 	.word	0x0800a231
 800a1ec:	0800a231 	.word	0x0800a231
 800a1f0:	0800a231 	.word	0x0800a231
 800a1f4:	0800a225 	.word	0x0800a225
 800a1f8:	0800a231 	.word	0x0800a231
 800a1fc:	0800a231 	.word	0x0800a231
 800a200:	0800a231 	.word	0x0800a231
 800a204:	0800a21f 	.word	0x0800a21f
 800a208:	0800a231 	.word	0x0800a231
 800a20c:	0800a231 	.word	0x0800a231
 800a210:	0800a231 	.word	0x0800a231
 800a214:	0800a22b 	.word	0x0800a22b
 800a218:	2300      	movs	r3, #0
 800a21a:	77fb      	strb	r3, [r7, #31]
 800a21c:	e117      	b.n	800a44e <UART_SetConfig+0x34a>
 800a21e:	2302      	movs	r3, #2
 800a220:	77fb      	strb	r3, [r7, #31]
 800a222:	e114      	b.n	800a44e <UART_SetConfig+0x34a>
 800a224:	2304      	movs	r3, #4
 800a226:	77fb      	strb	r3, [r7, #31]
 800a228:	e111      	b.n	800a44e <UART_SetConfig+0x34a>
 800a22a:	2308      	movs	r3, #8
 800a22c:	77fb      	strb	r3, [r7, #31]
 800a22e:	e10e      	b.n	800a44e <UART_SetConfig+0x34a>
 800a230:	2310      	movs	r3, #16
 800a232:	77fb      	strb	r3, [r7, #31]
 800a234:	e10b      	b.n	800a44e <UART_SetConfig+0x34a>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4a69      	ldr	r2, [pc, #420]	; (800a3e0 <UART_SetConfig+0x2dc>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d120      	bne.n	800a282 <UART_SetConfig+0x17e>
 800a240:	4b65      	ldr	r3, [pc, #404]	; (800a3d8 <UART_SetConfig+0x2d4>)
 800a242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a246:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a24a:	2b30      	cmp	r3, #48	; 0x30
 800a24c:	d013      	beq.n	800a276 <UART_SetConfig+0x172>
 800a24e:	2b30      	cmp	r3, #48	; 0x30
 800a250:	d814      	bhi.n	800a27c <UART_SetConfig+0x178>
 800a252:	2b20      	cmp	r3, #32
 800a254:	d009      	beq.n	800a26a <UART_SetConfig+0x166>
 800a256:	2b20      	cmp	r3, #32
 800a258:	d810      	bhi.n	800a27c <UART_SetConfig+0x178>
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d002      	beq.n	800a264 <UART_SetConfig+0x160>
 800a25e:	2b10      	cmp	r3, #16
 800a260:	d006      	beq.n	800a270 <UART_SetConfig+0x16c>
 800a262:	e00b      	b.n	800a27c <UART_SetConfig+0x178>
 800a264:	2300      	movs	r3, #0
 800a266:	77fb      	strb	r3, [r7, #31]
 800a268:	e0f1      	b.n	800a44e <UART_SetConfig+0x34a>
 800a26a:	2302      	movs	r3, #2
 800a26c:	77fb      	strb	r3, [r7, #31]
 800a26e:	e0ee      	b.n	800a44e <UART_SetConfig+0x34a>
 800a270:	2304      	movs	r3, #4
 800a272:	77fb      	strb	r3, [r7, #31]
 800a274:	e0eb      	b.n	800a44e <UART_SetConfig+0x34a>
 800a276:	2308      	movs	r3, #8
 800a278:	77fb      	strb	r3, [r7, #31]
 800a27a:	e0e8      	b.n	800a44e <UART_SetConfig+0x34a>
 800a27c:	2310      	movs	r3, #16
 800a27e:	77fb      	strb	r3, [r7, #31]
 800a280:	e0e5      	b.n	800a44e <UART_SetConfig+0x34a>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a57      	ldr	r2, [pc, #348]	; (800a3e4 <UART_SetConfig+0x2e0>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d120      	bne.n	800a2ce <UART_SetConfig+0x1ca>
 800a28c:	4b52      	ldr	r3, [pc, #328]	; (800a3d8 <UART_SetConfig+0x2d4>)
 800a28e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a292:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a296:	2bc0      	cmp	r3, #192	; 0xc0
 800a298:	d013      	beq.n	800a2c2 <UART_SetConfig+0x1be>
 800a29a:	2bc0      	cmp	r3, #192	; 0xc0
 800a29c:	d814      	bhi.n	800a2c8 <UART_SetConfig+0x1c4>
 800a29e:	2b80      	cmp	r3, #128	; 0x80
 800a2a0:	d009      	beq.n	800a2b6 <UART_SetConfig+0x1b2>
 800a2a2:	2b80      	cmp	r3, #128	; 0x80
 800a2a4:	d810      	bhi.n	800a2c8 <UART_SetConfig+0x1c4>
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d002      	beq.n	800a2b0 <UART_SetConfig+0x1ac>
 800a2aa:	2b40      	cmp	r3, #64	; 0x40
 800a2ac:	d006      	beq.n	800a2bc <UART_SetConfig+0x1b8>
 800a2ae:	e00b      	b.n	800a2c8 <UART_SetConfig+0x1c4>
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	77fb      	strb	r3, [r7, #31]
 800a2b4:	e0cb      	b.n	800a44e <UART_SetConfig+0x34a>
 800a2b6:	2302      	movs	r3, #2
 800a2b8:	77fb      	strb	r3, [r7, #31]
 800a2ba:	e0c8      	b.n	800a44e <UART_SetConfig+0x34a>
 800a2bc:	2304      	movs	r3, #4
 800a2be:	77fb      	strb	r3, [r7, #31]
 800a2c0:	e0c5      	b.n	800a44e <UART_SetConfig+0x34a>
 800a2c2:	2308      	movs	r3, #8
 800a2c4:	77fb      	strb	r3, [r7, #31]
 800a2c6:	e0c2      	b.n	800a44e <UART_SetConfig+0x34a>
 800a2c8:	2310      	movs	r3, #16
 800a2ca:	77fb      	strb	r3, [r7, #31]
 800a2cc:	e0bf      	b.n	800a44e <UART_SetConfig+0x34a>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	4a45      	ldr	r2, [pc, #276]	; (800a3e8 <UART_SetConfig+0x2e4>)
 800a2d4:	4293      	cmp	r3, r2
 800a2d6:	d125      	bne.n	800a324 <UART_SetConfig+0x220>
 800a2d8:	4b3f      	ldr	r3, [pc, #252]	; (800a3d8 <UART_SetConfig+0x2d4>)
 800a2da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2e6:	d017      	beq.n	800a318 <UART_SetConfig+0x214>
 800a2e8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2ec:	d817      	bhi.n	800a31e <UART_SetConfig+0x21a>
 800a2ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2f2:	d00b      	beq.n	800a30c <UART_SetConfig+0x208>
 800a2f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2f8:	d811      	bhi.n	800a31e <UART_SetConfig+0x21a>
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d003      	beq.n	800a306 <UART_SetConfig+0x202>
 800a2fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a302:	d006      	beq.n	800a312 <UART_SetConfig+0x20e>
 800a304:	e00b      	b.n	800a31e <UART_SetConfig+0x21a>
 800a306:	2300      	movs	r3, #0
 800a308:	77fb      	strb	r3, [r7, #31]
 800a30a:	e0a0      	b.n	800a44e <UART_SetConfig+0x34a>
 800a30c:	2302      	movs	r3, #2
 800a30e:	77fb      	strb	r3, [r7, #31]
 800a310:	e09d      	b.n	800a44e <UART_SetConfig+0x34a>
 800a312:	2304      	movs	r3, #4
 800a314:	77fb      	strb	r3, [r7, #31]
 800a316:	e09a      	b.n	800a44e <UART_SetConfig+0x34a>
 800a318:	2308      	movs	r3, #8
 800a31a:	77fb      	strb	r3, [r7, #31]
 800a31c:	e097      	b.n	800a44e <UART_SetConfig+0x34a>
 800a31e:	2310      	movs	r3, #16
 800a320:	77fb      	strb	r3, [r7, #31]
 800a322:	e094      	b.n	800a44e <UART_SetConfig+0x34a>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	4a30      	ldr	r2, [pc, #192]	; (800a3ec <UART_SetConfig+0x2e8>)
 800a32a:	4293      	cmp	r3, r2
 800a32c:	d125      	bne.n	800a37a <UART_SetConfig+0x276>
 800a32e:	4b2a      	ldr	r3, [pc, #168]	; (800a3d8 <UART_SetConfig+0x2d4>)
 800a330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a334:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a338:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a33c:	d017      	beq.n	800a36e <UART_SetConfig+0x26a>
 800a33e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a342:	d817      	bhi.n	800a374 <UART_SetConfig+0x270>
 800a344:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a348:	d00b      	beq.n	800a362 <UART_SetConfig+0x25e>
 800a34a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a34e:	d811      	bhi.n	800a374 <UART_SetConfig+0x270>
 800a350:	2b00      	cmp	r3, #0
 800a352:	d003      	beq.n	800a35c <UART_SetConfig+0x258>
 800a354:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a358:	d006      	beq.n	800a368 <UART_SetConfig+0x264>
 800a35a:	e00b      	b.n	800a374 <UART_SetConfig+0x270>
 800a35c:	2301      	movs	r3, #1
 800a35e:	77fb      	strb	r3, [r7, #31]
 800a360:	e075      	b.n	800a44e <UART_SetConfig+0x34a>
 800a362:	2302      	movs	r3, #2
 800a364:	77fb      	strb	r3, [r7, #31]
 800a366:	e072      	b.n	800a44e <UART_SetConfig+0x34a>
 800a368:	2304      	movs	r3, #4
 800a36a:	77fb      	strb	r3, [r7, #31]
 800a36c:	e06f      	b.n	800a44e <UART_SetConfig+0x34a>
 800a36e:	2308      	movs	r3, #8
 800a370:	77fb      	strb	r3, [r7, #31]
 800a372:	e06c      	b.n	800a44e <UART_SetConfig+0x34a>
 800a374:	2310      	movs	r3, #16
 800a376:	77fb      	strb	r3, [r7, #31]
 800a378:	e069      	b.n	800a44e <UART_SetConfig+0x34a>
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	4a1c      	ldr	r2, [pc, #112]	; (800a3f0 <UART_SetConfig+0x2ec>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d137      	bne.n	800a3f4 <UART_SetConfig+0x2f0>
 800a384:	4b14      	ldr	r3, [pc, #80]	; (800a3d8 <UART_SetConfig+0x2d4>)
 800a386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a38a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a38e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a392:	d017      	beq.n	800a3c4 <UART_SetConfig+0x2c0>
 800a394:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a398:	d817      	bhi.n	800a3ca <UART_SetConfig+0x2c6>
 800a39a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a39e:	d00b      	beq.n	800a3b8 <UART_SetConfig+0x2b4>
 800a3a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3a4:	d811      	bhi.n	800a3ca <UART_SetConfig+0x2c6>
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d003      	beq.n	800a3b2 <UART_SetConfig+0x2ae>
 800a3aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3ae:	d006      	beq.n	800a3be <UART_SetConfig+0x2ba>
 800a3b0:	e00b      	b.n	800a3ca <UART_SetConfig+0x2c6>
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	77fb      	strb	r3, [r7, #31]
 800a3b6:	e04a      	b.n	800a44e <UART_SetConfig+0x34a>
 800a3b8:	2302      	movs	r3, #2
 800a3ba:	77fb      	strb	r3, [r7, #31]
 800a3bc:	e047      	b.n	800a44e <UART_SetConfig+0x34a>
 800a3be:	2304      	movs	r3, #4
 800a3c0:	77fb      	strb	r3, [r7, #31]
 800a3c2:	e044      	b.n	800a44e <UART_SetConfig+0x34a>
 800a3c4:	2308      	movs	r3, #8
 800a3c6:	77fb      	strb	r3, [r7, #31]
 800a3c8:	e041      	b.n	800a44e <UART_SetConfig+0x34a>
 800a3ca:	2310      	movs	r3, #16
 800a3cc:	77fb      	strb	r3, [r7, #31]
 800a3ce:	e03e      	b.n	800a44e <UART_SetConfig+0x34a>
 800a3d0:	efff69f3 	.word	0xefff69f3
 800a3d4:	40011000 	.word	0x40011000
 800a3d8:	40023800 	.word	0x40023800
 800a3dc:	40004400 	.word	0x40004400
 800a3e0:	40004800 	.word	0x40004800
 800a3e4:	40004c00 	.word	0x40004c00
 800a3e8:	40005000 	.word	0x40005000
 800a3ec:	40011400 	.word	0x40011400
 800a3f0:	40007800 	.word	0x40007800
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	4a91      	ldr	r2, [pc, #580]	; (800a640 <UART_SetConfig+0x53c>)
 800a3fa:	4293      	cmp	r3, r2
 800a3fc:	d125      	bne.n	800a44a <UART_SetConfig+0x346>
 800a3fe:	4b91      	ldr	r3, [pc, #580]	; (800a644 <UART_SetConfig+0x540>)
 800a400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a404:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a408:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a40c:	d017      	beq.n	800a43e <UART_SetConfig+0x33a>
 800a40e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a412:	d817      	bhi.n	800a444 <UART_SetConfig+0x340>
 800a414:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a418:	d00b      	beq.n	800a432 <UART_SetConfig+0x32e>
 800a41a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a41e:	d811      	bhi.n	800a444 <UART_SetConfig+0x340>
 800a420:	2b00      	cmp	r3, #0
 800a422:	d003      	beq.n	800a42c <UART_SetConfig+0x328>
 800a424:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a428:	d006      	beq.n	800a438 <UART_SetConfig+0x334>
 800a42a:	e00b      	b.n	800a444 <UART_SetConfig+0x340>
 800a42c:	2300      	movs	r3, #0
 800a42e:	77fb      	strb	r3, [r7, #31]
 800a430:	e00d      	b.n	800a44e <UART_SetConfig+0x34a>
 800a432:	2302      	movs	r3, #2
 800a434:	77fb      	strb	r3, [r7, #31]
 800a436:	e00a      	b.n	800a44e <UART_SetConfig+0x34a>
 800a438:	2304      	movs	r3, #4
 800a43a:	77fb      	strb	r3, [r7, #31]
 800a43c:	e007      	b.n	800a44e <UART_SetConfig+0x34a>
 800a43e:	2308      	movs	r3, #8
 800a440:	77fb      	strb	r3, [r7, #31]
 800a442:	e004      	b.n	800a44e <UART_SetConfig+0x34a>
 800a444:	2310      	movs	r3, #16
 800a446:	77fb      	strb	r3, [r7, #31]
 800a448:	e001      	b.n	800a44e <UART_SetConfig+0x34a>
 800a44a:	2310      	movs	r3, #16
 800a44c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	69db      	ldr	r3, [r3, #28]
 800a452:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a456:	d17c      	bne.n	800a552 <UART_SetConfig+0x44e>
  {
    switch (clocksource)
 800a458:	7ffb      	ldrb	r3, [r7, #31]
 800a45a:	2b08      	cmp	r3, #8
 800a45c:	d859      	bhi.n	800a512 <UART_SetConfig+0x40e>
 800a45e:	a201      	add	r2, pc, #4	; (adr r2, 800a464 <UART_SetConfig+0x360>)
 800a460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a464:	0800a489 	.word	0x0800a489
 800a468:	0800a4a7 	.word	0x0800a4a7
 800a46c:	0800a4c5 	.word	0x0800a4c5
 800a470:	0800a513 	.word	0x0800a513
 800a474:	0800a4dd 	.word	0x0800a4dd
 800a478:	0800a513 	.word	0x0800a513
 800a47c:	0800a513 	.word	0x0800a513
 800a480:	0800a513 	.word	0x0800a513
 800a484:	0800a4fb 	.word	0x0800a4fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800a488:	f7fb ffd6 	bl	8006438 <HAL_RCC_GetPCLK1Freq>
 800a48c:	4603      	mov	r3, r0
 800a48e:	005a      	lsls	r2, r3, #1
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	685b      	ldr	r3, [r3, #4]
 800a494:	085b      	lsrs	r3, r3, #1
 800a496:	441a      	add	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	685b      	ldr	r3, [r3, #4]
 800a49c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4a0:	b29b      	uxth	r3, r3
 800a4a2:	61bb      	str	r3, [r7, #24]
        break;
 800a4a4:	e038      	b.n	800a518 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800a4a6:	f7fb ffdb 	bl	8006460 <HAL_RCC_GetPCLK2Freq>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	005a      	lsls	r2, r3, #1
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	685b      	ldr	r3, [r3, #4]
 800a4b2:	085b      	lsrs	r3, r3, #1
 800a4b4:	441a      	add	r2, r3
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4be:	b29b      	uxth	r3, r3
 800a4c0:	61bb      	str	r3, [r7, #24]
        break;
 800a4c2:	e029      	b.n	800a518 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	085a      	lsrs	r2, r3, #1
 800a4ca:	4b5f      	ldr	r3, [pc, #380]	; (800a648 <UART_SetConfig+0x544>)
 800a4cc:	4413      	add	r3, r2
 800a4ce:	687a      	ldr	r2, [r7, #4]
 800a4d0:	6852      	ldr	r2, [r2, #4]
 800a4d2:	fbb3 f3f2 	udiv	r3, r3, r2
 800a4d6:	b29b      	uxth	r3, r3
 800a4d8:	61bb      	str	r3, [r7, #24]
        break;
 800a4da:	e01d      	b.n	800a518 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800a4dc:	f7fb feea 	bl	80062b4 <HAL_RCC_GetSysClockFreq>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	005a      	lsls	r2, r3, #1
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	085b      	lsrs	r3, r3, #1
 800a4ea:	441a      	add	r2, r3
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4f4:	b29b      	uxth	r3, r3
 800a4f6:	61bb      	str	r3, [r7, #24]
        break;
 800a4f8:	e00e      	b.n	800a518 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	685b      	ldr	r3, [r3, #4]
 800a4fe:	085b      	lsrs	r3, r3, #1
 800a500:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	fbb2 f3f3 	udiv	r3, r2, r3
 800a50c:	b29b      	uxth	r3, r3
 800a50e:	61bb      	str	r3, [r7, #24]
        break;
 800a510:	e002      	b.n	800a518 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800a512:	2301      	movs	r3, #1
 800a514:	75fb      	strb	r3, [r7, #23]
        break;
 800a516:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a518:	69bb      	ldr	r3, [r7, #24]
 800a51a:	2b0f      	cmp	r3, #15
 800a51c:	d916      	bls.n	800a54c <UART_SetConfig+0x448>
 800a51e:	69bb      	ldr	r3, [r7, #24]
 800a520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a524:	d212      	bcs.n	800a54c <UART_SetConfig+0x448>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a526:	69bb      	ldr	r3, [r7, #24]
 800a528:	b29b      	uxth	r3, r3
 800a52a:	f023 030f 	bic.w	r3, r3, #15
 800a52e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a530:	69bb      	ldr	r3, [r7, #24]
 800a532:	085b      	lsrs	r3, r3, #1
 800a534:	b29b      	uxth	r3, r3
 800a536:	f003 0307 	and.w	r3, r3, #7
 800a53a:	b29a      	uxth	r2, r3
 800a53c:	89fb      	ldrh	r3, [r7, #14]
 800a53e:	4313      	orrs	r3, r2
 800a540:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	89fa      	ldrh	r2, [r7, #14]
 800a548:	60da      	str	r2, [r3, #12]
 800a54a:	e06e      	b.n	800a62a <UART_SetConfig+0x526>
    }
    else
    {
      ret = HAL_ERROR;
 800a54c:	2301      	movs	r3, #1
 800a54e:	75fb      	strb	r3, [r7, #23]
 800a550:	e06b      	b.n	800a62a <UART_SetConfig+0x526>
    }
  }
  else
  {
    switch (clocksource)
 800a552:	7ffb      	ldrb	r3, [r7, #31]
 800a554:	2b08      	cmp	r3, #8
 800a556:	d857      	bhi.n	800a608 <UART_SetConfig+0x504>
 800a558:	a201      	add	r2, pc, #4	; (adr r2, 800a560 <UART_SetConfig+0x45c>)
 800a55a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a55e:	bf00      	nop
 800a560:	0800a585 	.word	0x0800a585
 800a564:	0800a5a1 	.word	0x0800a5a1
 800a568:	0800a5bd 	.word	0x0800a5bd
 800a56c:	0800a609 	.word	0x0800a609
 800a570:	0800a5d5 	.word	0x0800a5d5
 800a574:	0800a609 	.word	0x0800a609
 800a578:	0800a609 	.word	0x0800a609
 800a57c:	0800a609 	.word	0x0800a609
 800a580:	0800a5f1 	.word	0x0800a5f1
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800a584:	f7fb ff58 	bl	8006438 <HAL_RCC_GetPCLK1Freq>
 800a588:	4602      	mov	r2, r0
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	085b      	lsrs	r3, r3, #1
 800a590:	441a      	add	r2, r3
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	fbb2 f3f3 	udiv	r3, r2, r3
 800a59a:	b29b      	uxth	r3, r3
 800a59c:	61bb      	str	r3, [r7, #24]
        break;
 800a59e:	e036      	b.n	800a60e <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800a5a0:	f7fb ff5e 	bl	8006460 <HAL_RCC_GetPCLK2Freq>
 800a5a4:	4602      	mov	r2, r0
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	685b      	ldr	r3, [r3, #4]
 800a5aa:	085b      	lsrs	r3, r3, #1
 800a5ac:	441a      	add	r2, r3
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	685b      	ldr	r3, [r3, #4]
 800a5b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5b6:	b29b      	uxth	r3, r3
 800a5b8:	61bb      	str	r3, [r7, #24]
        break;
 800a5ba:	e028      	b.n	800a60e <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	685b      	ldr	r3, [r3, #4]
 800a5c0:	085a      	lsrs	r2, r3, #1
 800a5c2:	4b22      	ldr	r3, [pc, #136]	; (800a64c <UART_SetConfig+0x548>)
 800a5c4:	4413      	add	r3, r2
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	6852      	ldr	r2, [r2, #4]
 800a5ca:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5ce:	b29b      	uxth	r3, r3
 800a5d0:	61bb      	str	r3, [r7, #24]
        break;
 800a5d2:	e01c      	b.n	800a60e <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800a5d4:	f7fb fe6e 	bl	80062b4 <HAL_RCC_GetSysClockFreq>
 800a5d8:	4602      	mov	r2, r0
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	685b      	ldr	r3, [r3, #4]
 800a5de:	085b      	lsrs	r3, r3, #1
 800a5e0:	441a      	add	r2, r3
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	685b      	ldr	r3, [r3, #4]
 800a5e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	61bb      	str	r3, [r7, #24]
        break;
 800a5ee:	e00e      	b.n	800a60e <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	085b      	lsrs	r3, r3, #1
 800a5f6:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	685b      	ldr	r3, [r3, #4]
 800a5fe:	fbb2 f3f3 	udiv	r3, r2, r3
 800a602:	b29b      	uxth	r3, r3
 800a604:	61bb      	str	r3, [r7, #24]
        break;
 800a606:	e002      	b.n	800a60e <UART_SetConfig+0x50a>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800a608:	2301      	movs	r3, #1
 800a60a:	75fb      	strb	r3, [r7, #23]
        break;
 800a60c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a60e:	69bb      	ldr	r3, [r7, #24]
 800a610:	2b0f      	cmp	r3, #15
 800a612:	d908      	bls.n	800a626 <UART_SetConfig+0x522>
 800a614:	69bb      	ldr	r3, [r7, #24]
 800a616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a61a:	d204      	bcs.n	800a626 <UART_SetConfig+0x522>
    {
      huart->Instance->BRR = usartdiv;
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	69ba      	ldr	r2, [r7, #24]
 800a622:	60da      	str	r2, [r3, #12]
 800a624:	e001      	b.n	800a62a <UART_SetConfig+0x526>
    }
    else
    {
      ret = HAL_ERROR;
 800a626:	2301      	movs	r3, #1
 800a628:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2200      	movs	r2, #0
 800a62e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2200      	movs	r2, #0
 800a634:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a636:	7dfb      	ldrb	r3, [r7, #23]
}
 800a638:	4618      	mov	r0, r3
 800a63a:	3720      	adds	r7, #32
 800a63c:	46bd      	mov	sp, r7
 800a63e:	bd80      	pop	{r7, pc}
 800a640:	40007c00 	.word	0x40007c00
 800a644:	40023800 	.word	0x40023800
 800a648:	01e84800 	.word	0x01e84800
 800a64c:	00f42400 	.word	0x00f42400

0800a650 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a650:	b480      	push	{r7}
 800a652:	b083      	sub	sp, #12
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65c:	f003 0301 	and.w	r3, r3, #1
 800a660:	2b00      	cmp	r3, #0
 800a662:	d00a      	beq.n	800a67a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	685b      	ldr	r3, [r3, #4]
 800a66a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	430a      	orrs	r2, r1
 800a678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67e:	f003 0302 	and.w	r3, r3, #2
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00a      	beq.n	800a69c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	685b      	ldr	r3, [r3, #4]
 800a68c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	430a      	orrs	r2, r1
 800a69a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a0:	f003 0304 	and.w	r3, r3, #4
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d00a      	beq.n	800a6be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	685b      	ldr	r3, [r3, #4]
 800a6ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	430a      	orrs	r2, r1
 800a6bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6c2:	f003 0308 	and.w	r3, r3, #8
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d00a      	beq.n	800a6e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	685b      	ldr	r3, [r3, #4]
 800a6d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	430a      	orrs	r2, r1
 800a6de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e4:	f003 0310 	and.w	r3, r3, #16
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d00a      	beq.n	800a702 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	430a      	orrs	r2, r1
 800a700:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a706:	f003 0320 	and.w	r3, r3, #32
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d00a      	beq.n	800a724 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	689b      	ldr	r3, [r3, #8]
 800a714:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	430a      	orrs	r2, r1
 800a722:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a728:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d01a      	beq.n	800a766 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	430a      	orrs	r2, r1
 800a744:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a74a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a74e:	d10a      	bne.n	800a766 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	430a      	orrs	r2, r1
 800a764:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a76a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d00a      	beq.n	800a788 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	430a      	orrs	r2, r1
 800a786:	605a      	str	r2, [r3, #4]
  }
}
 800a788:	bf00      	nop
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a792:	4770      	bx	lr

0800a794 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b086      	sub	sp, #24
 800a798:	af02      	add	r7, sp, #8
 800a79a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a7a2:	f7f6 f9c5 	bl	8000b30 <HAL_GetTick>
 800a7a6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f003 0308 	and.w	r3, r3, #8
 800a7b2:	2b08      	cmp	r3, #8
 800a7b4:	d10e      	bne.n	800a7d4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a7b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a7ba:	9300      	str	r3, [sp, #0]
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2200      	movs	r2, #0
 800a7c0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f000 f814 	bl	800a7f2 <UART_WaitOnFlagUntilTimeout>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d001      	beq.n	800a7d4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7d0:	2303      	movs	r3, #3
 800a7d2:	e00a      	b.n	800a7ea <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2220      	movs	r2, #32
 800a7d8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	2220      	movs	r2, #32
 800a7de:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a7e8:	2300      	movs	r3, #0
}
 800a7ea:	4618      	mov	r0, r3
 800a7ec:	3710      	adds	r7, #16
 800a7ee:	46bd      	mov	sp, r7
 800a7f0:	bd80      	pop	{r7, pc}

0800a7f2 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a7f2:	b580      	push	{r7, lr}
 800a7f4:	b084      	sub	sp, #16
 800a7f6:	af00      	add	r7, sp, #0
 800a7f8:	60f8      	str	r0, [r7, #12]
 800a7fa:	60b9      	str	r1, [r7, #8]
 800a7fc:	603b      	str	r3, [r7, #0]
 800a7fe:	4613      	mov	r3, r2
 800a800:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a802:	e02a      	b.n	800a85a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a804:	69bb      	ldr	r3, [r7, #24]
 800a806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a80a:	d026      	beq.n	800a85a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a80c:	f7f6 f990 	bl	8000b30 <HAL_GetTick>
 800a810:	4602      	mov	r2, r0
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	1ad3      	subs	r3, r2, r3
 800a816:	69ba      	ldr	r2, [r7, #24]
 800a818:	429a      	cmp	r2, r3
 800a81a:	d302      	bcc.n	800a822 <UART_WaitOnFlagUntilTimeout+0x30>
 800a81c:	69bb      	ldr	r3, [r7, #24]
 800a81e:	2b00      	cmp	r3, #0
 800a820:	d11b      	bne.n	800a85a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	681a      	ldr	r2, [r3, #0]
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a830:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	689a      	ldr	r2, [r3, #8]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f022 0201 	bic.w	r2, r2, #1
 800a840:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2220      	movs	r2, #32
 800a846:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2220      	movs	r2, #32
 800a84c:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	2200      	movs	r2, #0
 800a852:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a856:	2303      	movs	r3, #3
 800a858:	e00f      	b.n	800a87a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	69da      	ldr	r2, [r3, #28]
 800a860:	68bb      	ldr	r3, [r7, #8]
 800a862:	4013      	ands	r3, r2
 800a864:	68ba      	ldr	r2, [r7, #8]
 800a866:	429a      	cmp	r2, r3
 800a868:	bf0c      	ite	eq
 800a86a:	2301      	moveq	r3, #1
 800a86c:	2300      	movne	r3, #0
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	461a      	mov	r2, r3
 800a872:	79fb      	ldrb	r3, [r7, #7]
 800a874:	429a      	cmp	r2, r3
 800a876:	d0c5      	beq.n	800a804 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a878:	2300      	movs	r3, #0
}
 800a87a:	4618      	mov	r0, r3
 800a87c:	3710      	adds	r7, #16
 800a87e:	46bd      	mov	sp, r7
 800a880:	bd80      	pop	{r7, pc}
	...

0800a884 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a884:	b480      	push	{r7}
 800a886:	b085      	sub	sp, #20
 800a888:	af00      	add	r7, sp, #0
 800a88a:	6078      	str	r0, [r7, #4]
 800a88c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800a88e:	2300      	movs	r3, #0
 800a890:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800a892:	2300      	movs	r3, #0
 800a894:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	2b01      	cmp	r3, #1
 800a89c:	d027      	beq.n	800a8ee <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a8a4:	68fa      	ldr	r2, [r7, #12]
 800a8a6:	4b2f      	ldr	r3, [pc, #188]	; (800a964 <FMC_SDRAM_Init+0xe0>)
 800a8a8:	4013      	ands	r3, r2
 800a8aa:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a8b4:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800a8ba:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800a8bc:	683b      	ldr	r3, [r7, #0]
 800a8be:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800a8c0:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800a8c6:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800a8cc:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800a8ce:	683b      	ldr	r3, [r7, #0]
 800a8d0:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800a8d2:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800a8d8:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a8de:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a8e0:	68fa      	ldr	r2, [r7, #12]
 800a8e2:	4313      	orrs	r3, r2
 800a8e4:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	68fa      	ldr	r2, [r7, #12]
 800a8ea:	601a      	str	r2, [r3, #0]
 800a8ec:	e032      	b.n	800a954 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a8fa:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a900:	683b      	ldr	r3, [r7, #0]
 800a902:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a904:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a90a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a90c:	68fa      	ldr	r2, [r7, #12]
 800a90e:	4313      	orrs	r3, r2
 800a910:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	685b      	ldr	r3, [r3, #4]
 800a916:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a918:	68ba      	ldr	r2, [r7, #8]
 800a91a:	4b12      	ldr	r3, [pc, #72]	; (800a964 <FMC_SDRAM_Init+0xe0>)
 800a91c:	4013      	ands	r3, r2
 800a91e:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a928:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800a92e:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800a934:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800a93a:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800a940:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a942:	68ba      	ldr	r2, [r7, #8]
 800a944:	4313      	orrs	r3, r2
 800a946:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	68fa      	ldr	r2, [r7, #12]
 800a94c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	68ba      	ldr	r2, [r7, #8]
 800a952:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	3714      	adds	r7, #20
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr
 800a962:	bf00      	nop
 800a964:	ffff8000 	.word	0xffff8000

0800a968 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a968:	b480      	push	{r7}
 800a96a:	b087      	sub	sp, #28
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	60f8      	str	r0, [r7, #12]
 800a970:	60b9      	str	r1, [r7, #8]
 800a972:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800a974:	2300      	movs	r3, #0
 800a976:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800a978:	2300      	movs	r3, #0
 800a97a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d02e      	beq.n	800a9e0 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	689b      	ldr	r3, [r3, #8]
 800a986:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a98e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a996:	68bb      	ldr	r3, [r7, #8]
 800a998:	685b      	ldr	r3, [r3, #4]
 800a99a:	3b01      	subs	r3, #1
 800a99c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a99e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	689b      	ldr	r3, [r3, #8]
 800a9a4:	3b01      	subs	r3, #1
 800a9a6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a9a8:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	68db      	ldr	r3, [r3, #12]
 800a9ae:	3b01      	subs	r3, #1
 800a9b0:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a9b2:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a9b4:	68bb      	ldr	r3, [r7, #8]
 800a9b6:	691b      	ldr	r3, [r3, #16]
 800a9b8:	3b01      	subs	r3, #1
 800a9ba:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a9bc:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	695b      	ldr	r3, [r3, #20]
 800a9c2:	3b01      	subs	r3, #1
 800a9c4:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a9c6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800a9c8:	68bb      	ldr	r3, [r7, #8]
 800a9ca:	699b      	ldr	r3, [r3, #24]
 800a9cc:	3b01      	subs	r3, #1
 800a9ce:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	697a      	ldr	r2, [r7, #20]
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	697a      	ldr	r2, [r7, #20]
 800a9dc:	609a      	str	r2, [r3, #8]
 800a9de:	e039      	b.n	800aa54 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	689b      	ldr	r3, [r3, #8]
 800a9e4:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a9e6:	697a      	ldr	r2, [r7, #20]
 800a9e8:	4b1e      	ldr	r3, [pc, #120]	; (800aa64 <FMC_SDRAM_Timing_Init+0xfc>)
 800a9ea:	4013      	ands	r3, r2
 800a9ec:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	68db      	ldr	r3, [r3, #12]
 800a9f2:	3b01      	subs	r3, #1
 800a9f4:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	695b      	ldr	r3, [r3, #20]
 800a9fa:	3b01      	subs	r3, #1
 800a9fc:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	697a      	ldr	r2, [r7, #20]
 800aa02:	4313      	orrs	r3, r2
 800aa04:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	68db      	ldr	r3, [r3, #12]
 800aa0a:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800aa0c:	693b      	ldr	r3, [r7, #16]
 800aa0e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800aa12:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800aa14:	68bb      	ldr	r3, [r7, #8]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	3b01      	subs	r3, #1
 800aa20:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800aa22:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	689b      	ldr	r3, [r3, #8]
 800aa28:	3b01      	subs	r3, #1
 800aa2a:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800aa2c:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	691b      	ldr	r3, [r3, #16]
 800aa32:	3b01      	subs	r3, #1
 800aa34:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800aa36:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	699b      	ldr	r3, [r3, #24]
 800aa3c:	3b01      	subs	r3, #1
 800aa3e:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800aa40:	4313      	orrs	r3, r2
 800aa42:	693a      	ldr	r2, [r7, #16]
 800aa44:	4313      	orrs	r3, r2
 800aa46:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	697a      	ldr	r2, [r7, #20]
 800aa4c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	693a      	ldr	r2, [r7, #16]
 800aa52:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800aa54:	2300      	movs	r3, #0
}
 800aa56:	4618      	mov	r0, r3
 800aa58:	371c      	adds	r7, #28
 800aa5a:	46bd      	mov	sp, r7
 800aa5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa60:	4770      	bx	lr
 800aa62:	bf00      	nop
 800aa64:	ff0f0fff 	.word	0xff0f0fff

0800aa68 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800aa68:	b480      	push	{r7}
 800aa6a:	b087      	sub	sp, #28
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	60f8      	str	r0, [r7, #12]
 800aa70:	60b9      	str	r1, [r7, #8]
 800aa72:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800aa74:	2300      	movs	r3, #0
 800aa76:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800aa80:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	689b      	ldr	r3, [r3, #8]
 800aa86:	3b01      	subs	r3, #1
 800aa88:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800aa8a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	68db      	ldr	r3, [r3, #12]
 800aa90:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800aa92:	4313      	orrs	r3, r2
 800aa94:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800aa96:	697a      	ldr	r2, [r7, #20]
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800aa9c:	2300      	movs	r3, #0
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	371c      	adds	r7, #28
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr

0800aaaa <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800aaaa:	b480      	push	{r7}
 800aaac:	b083      	sub	sp, #12
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
 800aab2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	695a      	ldr	r2, [r3, #20]
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	005b      	lsls	r3, r3, #1
 800aabc:	431a      	orrs	r2, r3
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	370c      	adds	r7, #12
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	4770      	bx	lr

0800aad0 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800aad0:	b084      	sub	sp, #16
 800aad2:	b480      	push	{r7}
 800aad4:	b085      	sub	sp, #20
 800aad6:	af00      	add	r7, sp, #0
 800aad8:	6078      	str	r0, [r7, #4]
 800aada:	f107 001c 	add.w	r0, r7, #28
 800aade:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800aae2:	2300      	movs	r3, #0
 800aae4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800aae6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800aae8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800aaea:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800aaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800aaee:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800aaf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800aaf2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800aaf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800aaf6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800aaf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800aafa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800aafc:	68fa      	ldr	r2, [r7, #12]
 800aafe:	4313      	orrs	r3, r2
 800ab00:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	685a      	ldr	r2, [r3, #4]
 800ab06:	4b07      	ldr	r3, [pc, #28]	; (800ab24 <SDMMC_Init+0x54>)
 800ab08:	4013      	ands	r3, r2
 800ab0a:	68fa      	ldr	r2, [r7, #12]
 800ab0c:	431a      	orrs	r2, r3
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800ab12:	2300      	movs	r3, #0
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3714      	adds	r7, #20
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	b004      	add	sp, #16
 800ab20:	4770      	bx	lr
 800ab22:	bf00      	nop
 800ab24:	ffff8100 	.word	0xffff8100

0800ab28 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800ab36:	4618      	mov	r0, r3
 800ab38:	370c      	adds	r7, #12
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab40:	4770      	bx	lr

0800ab42 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800ab42:	b480      	push	{r7}
 800ab44:	b083      	sub	sp, #12
 800ab46:	af00      	add	r7, sp, #0
 800ab48:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	2203      	movs	r2, #3
 800ab4e:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 800ab50:	2300      	movs	r3, #0
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	370c      	adds	r7, #12
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr

0800ab5e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800ab5e:	b480      	push	{r7}
 800ab60:	b083      	sub	sp, #12
 800ab62:	af00      	add	r7, sp, #0
 800ab64:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f003 0303 	and.w	r3, r3, #3
}
 800ab6e:	4618      	mov	r0, r3
 800ab70:	370c      	adds	r7, #12
 800ab72:	46bd      	mov	sp, r7
 800ab74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab78:	4770      	bx	lr
	...

0800ab7c <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ab7c:	b480      	push	{r7}
 800ab7e:	b085      	sub	sp, #20
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
 800ab84:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ab86:	2300      	movs	r3, #0
 800ab88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ab8a:	683b      	ldr	r3, [r7, #0]
 800ab8c:	681a      	ldr	r2, [r3, #0]
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab9a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800aba0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800aba6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800aba8:	68fa      	ldr	r2, [r7, #12]
 800abaa:	4313      	orrs	r3, r2
 800abac:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	68da      	ldr	r2, [r3, #12]
 800abb2:	4b06      	ldr	r3, [pc, #24]	; (800abcc <SDMMC_SendCommand+0x50>)
 800abb4:	4013      	ands	r3, r2
 800abb6:	68fa      	ldr	r2, [r7, #12]
 800abb8:	431a      	orrs	r2, r3
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800abbe:	2300      	movs	r3, #0
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	3714      	adds	r7, #20
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr
 800abcc:	fffff000 	.word	0xfffff000

0800abd0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	691b      	ldr	r3, [r3, #16]
 800abdc:	b2db      	uxtb	r3, r3
}
 800abde:	4618      	mov	r0, r3
 800abe0:	370c      	adds	r7, #12
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr

0800abea <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800abea:	b480      	push	{r7}
 800abec:	b085      	sub	sp, #20
 800abee:	af00      	add	r7, sp, #0
 800abf0:	6078      	str	r0, [r7, #4]
 800abf2:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 800abf4:	2300      	movs	r3, #0
 800abf6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	3314      	adds	r3, #20
 800abfc:	461a      	mov	r2, r3
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	4413      	add	r3, r2
 800ac02:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	681b      	ldr	r3, [r3, #0]
}  
 800ac08:	4618      	mov	r0, r3
 800ac0a:	3714      	adds	r7, #20
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800ac14:	b480      	push	{r7}
 800ac16:	b085      	sub	sp, #20
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
 800ac1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ac1e:	2300      	movs	r3, #0
 800ac20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800ac22:	683b      	ldr	r3, [r7, #0]
 800ac24:	681a      	ldr	r2, [r3, #0]
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	685a      	ldr	r2, [r3, #4]
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ac3a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ac40:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ac42:	683b      	ldr	r3, [r7, #0]
 800ac44:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ac46:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ac48:	68fa      	ldr	r2, [r7, #12]
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac52:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	431a      	orrs	r2, r3
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ac5e:	2300      	movs	r3, #0

}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3714      	adds	r7, #20
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr

0800ac6c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b088      	sub	sp, #32
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ac76:	2300      	movs	r3, #0
 800ac78:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ac7e:	2310      	movs	r3, #16
 800ac80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac82:	2340      	movs	r3, #64	; 0x40
 800ac84:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac86:	2300      	movs	r3, #0
 800ac88:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac8e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac90:	f107 0308 	add.w	r3, r7, #8
 800ac94:	4619      	mov	r1, r3
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f7ff ff70 	bl	800ab7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ac9c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aca0:	2110      	movs	r1, #16
 800aca2:	6878      	ldr	r0, [r7, #4]
 800aca4:	f000 fa64 	bl	800b170 <SDMMC_GetCmdResp1>
 800aca8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acaa:	69fb      	ldr	r3, [r7, #28]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3720      	adds	r7, #32
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b088      	sub	sp, #32
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
 800acbc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800acbe:	2300      	movs	r3, #0
 800acc0:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800acc6:	2311      	movs	r3, #17
 800acc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acca:	2340      	movs	r3, #64	; 0x40
 800accc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acce:	2300      	movs	r3, #0
 800acd0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acd6:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acd8:	f107 0308 	add.w	r3, r7, #8
 800acdc:	4619      	mov	r1, r3
 800acde:	6878      	ldr	r0, [r7, #4]
 800ace0:	f7ff ff4c 	bl	800ab7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ace4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ace8:	2111      	movs	r1, #17
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 fa40 	bl	800b170 <SDMMC_GetCmdResp1>
 800acf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acf2:	69fb      	ldr	r3, [r7, #28]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3720      	adds	r7, #32
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	b088      	sub	sp, #32
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	6078      	str	r0, [r7, #4]
 800ad04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ad06:	2300      	movs	r3, #0
 800ad08:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ad0a:	683b      	ldr	r3, [r7, #0]
 800ad0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ad0e:	2312      	movs	r3, #18
 800ad10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad12:	2340      	movs	r3, #64	; 0x40
 800ad14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad16:	2300      	movs	r3, #0
 800ad18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad1e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad20:	f107 0308 	add.w	r3, r7, #8
 800ad24:	4619      	mov	r1, r3
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f7ff ff28 	bl	800ab7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ad2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad30:	2112      	movs	r1, #18
 800ad32:	6878      	ldr	r0, [r7, #4]
 800ad34:	f000 fa1c 	bl	800b170 <SDMMC_GetCmdResp1>
 800ad38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad3a:	69fb      	ldr	r3, [r7, #28]
}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3720      	adds	r7, #32
 800ad40:	46bd      	mov	sp, r7
 800ad42:	bd80      	pop	{r7, pc}

0800ad44 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b088      	sub	sp, #32
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
 800ad4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ad4e:	2300      	movs	r3, #0
 800ad50:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ad56:	2318      	movs	r3, #24
 800ad58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad5a:	2340      	movs	r3, #64	; 0x40
 800ad5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad66:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad68:	f107 0308 	add.w	r3, r7, #8
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f7ff ff04 	bl	800ab7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ad74:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad78:	2118      	movs	r1, #24
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 f9f8 	bl	800b170 <SDMMC_GetCmdResp1>
 800ad80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad82:	69fb      	ldr	r3, [r7, #28]
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3720      	adds	r7, #32
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b088      	sub	sp, #32
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ad96:	2300      	movs	r3, #0
 800ad98:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ad9e:	2319      	movs	r3, #25
 800ada0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ada2:	2340      	movs	r3, #64	; 0x40
 800ada4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ada6:	2300      	movs	r3, #0
 800ada8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adae:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adb0:	f107 0308 	add.w	r3, r7, #8
 800adb4:	4619      	mov	r1, r3
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f7ff fee0 	bl	800ab7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800adbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800adc0:	2119      	movs	r1, #25
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 f9d4 	bl	800b170 <SDMMC_GetCmdResp1>
 800adc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adca:	69fb      	ldr	r3, [r7, #28]
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3720      	adds	r7, #32
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b088      	sub	sp, #32
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800addc:	2300      	movs	r3, #0
 800adde:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 800ade0:	2300      	movs	r3, #0
 800ade2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ade4:	230c      	movs	r3, #12
 800ade6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ade8:	2340      	movs	r3, #64	; 0x40
 800adea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adec:	2300      	movs	r3, #0
 800adee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adf4:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adf6:	f107 0308 	add.w	r3, r7, #8
 800adfa:	4619      	mov	r1, r3
 800adfc:	6878      	ldr	r0, [r7, #4]
 800adfe:	f7ff febd 	bl	800ab7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 800ae02:	4a05      	ldr	r2, [pc, #20]	; (800ae18 <SDMMC_CmdStopTransfer+0x44>)
 800ae04:	210c      	movs	r1, #12
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 f9b2 	bl	800b170 <SDMMC_GetCmdResp1>
 800ae0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae0e:	69fb      	ldr	r3, [r7, #28]
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3720      	adds	r7, #32
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}
 800ae18:	05f5e100 	.word	0x05f5e100

0800ae1c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b08a      	sub	sp, #40	; 0x28
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	60f8      	str	r0, [r7, #12]
 800ae24:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ae2c:	683b      	ldr	r3, [r7, #0]
 800ae2e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ae30:	2307      	movs	r3, #7
 800ae32:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae34:	2340      	movs	r3, #64	; 0x40
 800ae36:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae38:	2300      	movs	r3, #0
 800ae3a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae40:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae42:	f107 0310 	add.w	r3, r7, #16
 800ae46:	4619      	mov	r1, r3
 800ae48:	68f8      	ldr	r0, [r7, #12]
 800ae4a:	f7ff fe97 	bl	800ab7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800ae4e:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae52:	2107      	movs	r1, #7
 800ae54:	68f8      	ldr	r0, [r7, #12]
 800ae56:	f000 f98b 	bl	800b170 <SDMMC_GetCmdResp1>
 800ae5a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ae5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	3728      	adds	r7, #40	; 0x28
 800ae62:	46bd      	mov	sp, r7
 800ae64:	bd80      	pop	{r7, pc}

0800ae66 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ae66:	b580      	push	{r7, lr}
 800ae68:	b088      	sub	sp, #32
 800ae6a:	af00      	add	r7, sp, #0
 800ae6c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 800ae72:	2300      	movs	r3, #0
 800ae74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ae76:	2300      	movs	r3, #0
 800ae78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae7e:	2300      	movs	r3, #0
 800ae80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae86:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae88:	f107 0308 	add.w	r3, r7, #8
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f7ff fe74 	bl	800ab7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ae94:	6878      	ldr	r0, [r7, #4]
 800ae96:	f000 f941 	bl	800b11c <SDMMC_GetCmdError>
 800ae9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae9c:	69fb      	ldr	r3, [r7, #28]
}
 800ae9e:	4618      	mov	r0, r3
 800aea0:	3720      	adds	r7, #32
 800aea2:	46bd      	mov	sp, r7
 800aea4:	bd80      	pop	{r7, pc}

0800aea6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800aea6:	b580      	push	{r7, lr}
 800aea8:	b088      	sub	sp, #32
 800aeaa:	af00      	add	r7, sp, #0
 800aeac:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800aeb2:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800aeb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800aeb8:	2308      	movs	r3, #8
 800aeba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aebc:	2340      	movs	r3, #64	; 0x40
 800aebe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aec0:	2300      	movs	r3, #0
 800aec2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aec8:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aeca:	f107 0308 	add.w	r3, r7, #8
 800aece:	4619      	mov	r1, r3
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f7ff fe53 	bl	800ab7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f000 fb12 	bl	800b500 <SDMMC_GetCmdResp7>
 800aedc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aede:	69fb      	ldr	r3, [r7, #28]
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	3720      	adds	r7, #32
 800aee4:	46bd      	mov	sp, r7
 800aee6:	bd80      	pop	{r7, pc}

0800aee8 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800aee8:	b580      	push	{r7, lr}
 800aeea:	b088      	sub	sp, #32
 800aeec:	af00      	add	r7, sp, #0
 800aeee:	6078      	str	r0, [r7, #4]
 800aef0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800aef2:	2300      	movs	r3, #0
 800aef4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800aefa:	2337      	movs	r3, #55	; 0x37
 800aefc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aefe:	2340      	movs	r3, #64	; 0x40
 800af00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af02:	2300      	movs	r3, #0
 800af04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af0a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af0c:	f107 0308 	add.w	r3, r7, #8
 800af10:	4619      	mov	r1, r3
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f7ff fe32 	bl	800ab7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800af18:	f241 3288 	movw	r2, #5000	; 0x1388
 800af1c:	2137      	movs	r1, #55	; 0x37
 800af1e:	6878      	ldr	r0, [r7, #4]
 800af20:	f000 f926 	bl	800b170 <SDMMC_GetCmdResp1>
 800af24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af26:	69fb      	ldr	r3, [r7, #28]
}
 800af28:	4618      	mov	r0, r3
 800af2a:	3720      	adds	r7, #32
 800af2c:	46bd      	mov	sp, r7
 800af2e:	bd80      	pop	{r7, pc}

0800af30 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b088      	sub	sp, #32
 800af34:	af00      	add	r7, sp, #0
 800af36:	6078      	str	r0, [r7, #4]
 800af38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800af3a:	2300      	movs	r3, #0
 800af3c:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800af3e:	683a      	ldr	r2, [r7, #0]
 800af40:	4b0d      	ldr	r3, [pc, #52]	; (800af78 <SDMMC_CmdAppOperCommand+0x48>)
 800af42:	4313      	orrs	r3, r2
 800af44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800af46:	2329      	movs	r3, #41	; 0x29
 800af48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af4a:	2340      	movs	r3, #64	; 0x40
 800af4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af4e:	2300      	movs	r3, #0
 800af50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af56:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af58:	f107 0308 	add.w	r3, r7, #8
 800af5c:	4619      	mov	r1, r3
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f7ff fe0c 	bl	800ab7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800af64:	6878      	ldr	r0, [r7, #4]
 800af66:	f000 fa29 	bl	800b3bc <SDMMC_GetCmdResp3>
 800af6a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af6c:	69fb      	ldr	r3, [r7, #28]
}
 800af6e:	4618      	mov	r0, r3
 800af70:	3720      	adds	r7, #32
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	80100000 	.word	0x80100000

0800af7c <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b088      	sub	sp, #32
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
 800af84:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800af86:	2300      	movs	r3, #0
 800af88:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800af8e:	2306      	movs	r3, #6
 800af90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af92:	2340      	movs	r3, #64	; 0x40
 800af94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af96:	2300      	movs	r3, #0
 800af98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af9e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afa0:	f107 0308 	add.w	r3, r7, #8
 800afa4:	4619      	mov	r1, r3
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f7ff fde8 	bl	800ab7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800afac:	f241 3288 	movw	r2, #5000	; 0x1388
 800afb0:	2106      	movs	r1, #6
 800afb2:	6878      	ldr	r0, [r7, #4]
 800afb4:	f000 f8dc 	bl	800b170 <SDMMC_GetCmdResp1>
 800afb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afba:	69fb      	ldr	r3, [r7, #28]
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3720      	adds	r7, #32
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b088      	sub	sp, #32
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800afcc:	2300      	movs	r3, #0
 800afce:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 800afd0:	2300      	movs	r3, #0
 800afd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800afd4:	2333      	movs	r3, #51	; 0x33
 800afd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afd8:	2340      	movs	r3, #64	; 0x40
 800afda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afdc:	2300      	movs	r3, #0
 800afde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afe4:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afe6:	f107 0308 	add.w	r3, r7, #8
 800afea:	4619      	mov	r1, r3
 800afec:	6878      	ldr	r0, [r7, #4]
 800afee:	f7ff fdc5 	bl	800ab7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800aff2:	f241 3288 	movw	r2, #5000	; 0x1388
 800aff6:	2133      	movs	r1, #51	; 0x33
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 f8b9 	bl	800b170 <SDMMC_GetCmdResp1>
 800affe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b000:	69fb      	ldr	r3, [r7, #28]
}
 800b002:	4618      	mov	r0, r3
 800b004:	3720      	adds	r7, #32
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}

0800b00a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b00a:	b580      	push	{r7, lr}
 800b00c:	b088      	sub	sp, #32
 800b00e:	af00      	add	r7, sp, #0
 800b010:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b012:	2300      	movs	r3, #0
 800b014:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 800b016:	2300      	movs	r3, #0
 800b018:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b01a:	2302      	movs	r3, #2
 800b01c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b01e:	23c0      	movs	r3, #192	; 0xc0
 800b020:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b022:	2300      	movs	r3, #0
 800b024:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b026:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b02a:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b02c:	f107 0308 	add.w	r3, r7, #8
 800b030:	4619      	mov	r1, r3
 800b032:	6878      	ldr	r0, [r7, #4]
 800b034:	f7ff fda2 	bl	800ab7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b038:	6878      	ldr	r0, [r7, #4]
 800b03a:	f000 f97f 	bl	800b33c <SDMMC_GetCmdResp2>
 800b03e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b040:	69fb      	ldr	r3, [r7, #28]
}
 800b042:	4618      	mov	r0, r3
 800b044:	3720      	adds	r7, #32
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}

0800b04a <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b04a:	b580      	push	{r7, lr}
 800b04c:	b088      	sub	sp, #32
 800b04e:	af00      	add	r7, sp, #0
 800b050:	6078      	str	r0, [r7, #4]
 800b052:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b054:	2300      	movs	r3, #0
 800b056:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b058:	683b      	ldr	r3, [r7, #0]
 800b05a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b05c:	2309      	movs	r3, #9
 800b05e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b060:	23c0      	movs	r3, #192	; 0xc0
 800b062:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b064:	2300      	movs	r3, #0
 800b066:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b068:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b06c:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b06e:	f107 0308 	add.w	r3, r7, #8
 800b072:	4619      	mov	r1, r3
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f7ff fd81 	bl	800ab7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b07a:	6878      	ldr	r0, [r7, #4]
 800b07c:	f000 f95e 	bl	800b33c <SDMMC_GetCmdResp2>
 800b080:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b082:	69fb      	ldr	r3, [r7, #28]
}
 800b084:	4618      	mov	r0, r3
 800b086:	3720      	adds	r7, #32
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}

0800b08c <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b08c:	b580      	push	{r7, lr}
 800b08e:	b088      	sub	sp, #32
 800b090:	af00      	add	r7, sp, #0
 800b092:	6078      	str	r0, [r7, #4]
 800b094:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b096:	2300      	movs	r3, #0
 800b098:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 800b09a:	2300      	movs	r3, #0
 800b09c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b09e:	2303      	movs	r3, #3
 800b0a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0a2:	2340      	movs	r3, #64	; 0x40
 800b0a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0ae:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0b0:	f107 0308 	add.w	r3, r7, #8
 800b0b4:	4619      	mov	r1, r3
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f7ff fd60 	bl	800ab7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b0bc:	683a      	ldr	r2, [r7, #0]
 800b0be:	2103      	movs	r1, #3
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 f9af 	bl	800b424 <SDMMC_GetCmdResp6>
 800b0c6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0c8:	69fb      	ldr	r3, [r7, #28]
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3720      	adds	r7, #32
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}

0800b0d2 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b0d2:	b580      	push	{r7, lr}
 800b0d4:	b088      	sub	sp, #32
 800b0d6:	af00      	add	r7, sp, #0
 800b0d8:	6078      	str	r0, [r7, #4]
 800b0da:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b0e0:	683b      	ldr	r3, [r7, #0]
 800b0e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b0e4:	230d      	movs	r3, #13
 800b0e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0e8:	2340      	movs	r3, #64	; 0x40
 800b0ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0f4:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0f6:	f107 0308 	add.w	r3, r7, #8
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f7ff fd3d 	bl	800ab7c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b102:	f241 3288 	movw	r2, #5000	; 0x1388
 800b106:	210d      	movs	r1, #13
 800b108:	6878      	ldr	r0, [r7, #4]
 800b10a:	f000 f831 	bl	800b170 <SDMMC_GetCmdResp1>
 800b10e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b110:	69fb      	ldr	r3, [r7, #28]
}
 800b112:	4618      	mov	r0, r3
 800b114:	3720      	adds	r7, #32
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}
	...

0800b11c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b11c:	b490      	push	{r4, r7}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800b124:	4b10      	ldr	r3, [pc, #64]	; (800b168 <SDMMC_GetCmdError+0x4c>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	4a10      	ldr	r2, [pc, #64]	; (800b16c <SDMMC_GetCmdError+0x50>)
 800b12a:	fba2 2303 	umull	r2, r3, r2, r3
 800b12e:	0a5b      	lsrs	r3, r3, #9
 800b130:	f241 3288 	movw	r2, #5000	; 0x1388
 800b134:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b138:	4623      	mov	r3, r4
 800b13a:	1e5c      	subs	r4, r3, #1
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d102      	bne.n	800b146 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b140:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b144:	e00a      	b.n	800b15c <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b14a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d0f2      	beq.n	800b138 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b158:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b15a:	2300      	movs	r3, #0
}
 800b15c:	4618      	mov	r0, r3
 800b15e:	3708      	adds	r7, #8
 800b160:	46bd      	mov	sp, r7
 800b162:	bc90      	pop	{r4, r7}
 800b164:	4770      	bx	lr
 800b166:	bf00      	nop
 800b168:	20000070 	.word	0x20000070
 800b16c:	10624dd3 	.word	0x10624dd3

0800b170 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b170:	b590      	push	{r4, r7, lr}
 800b172:	b087      	sub	sp, #28
 800b174:	af00      	add	r7, sp, #0
 800b176:	60f8      	str	r0, [r7, #12]
 800b178:	460b      	mov	r3, r1
 800b17a:	607a      	str	r2, [r7, #4]
 800b17c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800b17e:	4b6c      	ldr	r3, [pc, #432]	; (800b330 <SDMMC_GetCmdResp1+0x1c0>)
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4a6c      	ldr	r2, [pc, #432]	; (800b334 <SDMMC_GetCmdResp1+0x1c4>)
 800b184:	fba2 2303 	umull	r2, r3, r2, r3
 800b188:	0a5b      	lsrs	r3, r3, #9
 800b18a:	687a      	ldr	r2, [r7, #4]
 800b18c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b190:	4623      	mov	r3, r4
 800b192:	1e5c      	subs	r4, r3, #1
 800b194:	2b00      	cmp	r3, #0
 800b196:	d102      	bne.n	800b19e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b198:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b19c:	e0c3      	b.n	800b326 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d0f2      	beq.n	800b190 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1ae:	f003 0304 	and.w	r3, r3, #4
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d004      	beq.n	800b1c0 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2204      	movs	r2, #4
 800b1ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b1bc:	2304      	movs	r3, #4
 800b1be:	e0b2      	b.n	800b326 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1c4:	f003 0301 	and.w	r3, r3, #1
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d004      	beq.n	800b1d6 <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2201      	movs	r2, #1
 800b1d0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	e0a7      	b.n	800b326 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b1d6:	68f8      	ldr	r0, [r7, #12]
 800b1d8:	f7ff fcfa 	bl	800abd0 <SDMMC_GetCommandResponse>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	461a      	mov	r2, r3
 800b1e0:	7afb      	ldrb	r3, [r7, #11]
 800b1e2:	4293      	cmp	r3, r2
 800b1e4:	d001      	beq.n	800b1ea <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b1e6:	2301      	movs	r3, #1
 800b1e8:	e09d      	b.n	800b326 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b1f0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b1f2:	2100      	movs	r1, #0
 800b1f4:	68f8      	ldr	r0, [r7, #12]
 800b1f6:	f7ff fcf8 	bl	800abea <SDMMC_GetResponse>
 800b1fa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b1fc:	697a      	ldr	r2, [r7, #20]
 800b1fe:	4b4e      	ldr	r3, [pc, #312]	; (800b338 <SDMMC_GetCmdResp1+0x1c8>)
 800b200:	4013      	ands	r3, r2
 800b202:	2b00      	cmp	r3, #0
 800b204:	d101      	bne.n	800b20a <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800b206:	2300      	movs	r3, #0
 800b208:	e08d      	b.n	800b326 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b20a:	697b      	ldr	r3, [r7, #20]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	da02      	bge.n	800b216 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b210:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b214:	e087      	b.n	800b326 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b216:	697b      	ldr	r3, [r7, #20]
 800b218:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d001      	beq.n	800b224 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b220:	2340      	movs	r3, #64	; 0x40
 800b222:	e080      	b.n	800b326 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d001      	beq.n	800b232 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b22e:	2380      	movs	r3, #128	; 0x80
 800b230:	e079      	b.n	800b326 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d002      	beq.n	800b242 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b23c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b240:	e071      	b.n	800b326 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d002      	beq.n	800b252 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b24c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b250:	e069      	b.n	800b326 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d002      	beq.n	800b262 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b25c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b260:	e061      	b.n	800b326 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d002      	beq.n	800b272 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b26c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b270:	e059      	b.n	800b326 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d002      	beq.n	800b282 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b27c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b280:	e051      	b.n	800b326 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d002      	beq.n	800b292 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b28c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b290:	e049      	b.n	800b326 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d002      	beq.n	800b2a2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b29c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b2a0:	e041      	b.n	800b326 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d002      	beq.n	800b2b2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800b2ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b2b0:	e039      	b.n	800b326 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d002      	beq.n	800b2c2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b2bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b2c0:	e031      	b.n	800b326 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d002      	beq.n	800b2d2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b2cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b2d0:	e029      	b.n	800b326 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b2d2:	697b      	ldr	r3, [r7, #20]
 800b2d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d002      	beq.n	800b2e2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b2dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b2e0:	e021      	b.n	800b326 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d002      	beq.n	800b2f2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b2ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b2f0:	e019      	b.n	800b326 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d002      	beq.n	800b302 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b2fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b300:	e011      	b.n	800b326 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b302:	697b      	ldr	r3, [r7, #20]
 800b304:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d002      	beq.n	800b312 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b30c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b310:	e009      	b.n	800b326 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b312:	697b      	ldr	r3, [r7, #20]
 800b314:	f003 0308 	and.w	r3, r3, #8
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d002      	beq.n	800b322 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b31c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b320:	e001      	b.n	800b326 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b322:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b326:	4618      	mov	r0, r3
 800b328:	371c      	adds	r7, #28
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd90      	pop	{r4, r7, pc}
 800b32e:	bf00      	nop
 800b330:	20000070 	.word	0x20000070
 800b334:	10624dd3 	.word	0x10624dd3
 800b338:	fdffe008 	.word	0xfdffe008

0800b33c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b33c:	b490      	push	{r4, r7}
 800b33e:	b082      	sub	sp, #8
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800b344:	4b1b      	ldr	r3, [pc, #108]	; (800b3b4 <SDMMC_GetCmdResp2+0x78>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	4a1b      	ldr	r2, [pc, #108]	; (800b3b8 <SDMMC_GetCmdResp2+0x7c>)
 800b34a:	fba2 2303 	umull	r2, r3, r2, r3
 800b34e:	0a5b      	lsrs	r3, r3, #9
 800b350:	f241 3288 	movw	r2, #5000	; 0x1388
 800b354:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b358:	4623      	mov	r3, r4
 800b35a:	1e5c      	subs	r4, r3, #1
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d102      	bne.n	800b366 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b360:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b364:	e020      	b.n	800b3a8 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b36a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d0f2      	beq.n	800b358 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b376:	f003 0304 	and.w	r3, r3, #4
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d004      	beq.n	800b388 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	2204      	movs	r2, #4
 800b382:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b384:	2304      	movs	r3, #4
 800b386:	e00f      	b.n	800b3a8 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b38c:	f003 0301 	and.w	r3, r3, #1
 800b390:	2b00      	cmp	r3, #0
 800b392:	d004      	beq.n	800b39e <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	2201      	movs	r2, #1
 800b398:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b39a:	2301      	movs	r3, #1
 800b39c:	e004      	b.n	800b3a8 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b3a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b3a6:	2300      	movs	r3, #0
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3708      	adds	r7, #8
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bc90      	pop	{r4, r7}
 800b3b0:	4770      	bx	lr
 800b3b2:	bf00      	nop
 800b3b4:	20000070 	.word	0x20000070
 800b3b8:	10624dd3 	.word	0x10624dd3

0800b3bc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b3bc:	b490      	push	{r4, r7}
 800b3be:	b082      	sub	sp, #8
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800b3c4:	4b15      	ldr	r3, [pc, #84]	; (800b41c <SDMMC_GetCmdResp3+0x60>)
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	4a15      	ldr	r2, [pc, #84]	; (800b420 <SDMMC_GetCmdResp3+0x64>)
 800b3ca:	fba2 2303 	umull	r2, r3, r2, r3
 800b3ce:	0a5b      	lsrs	r3, r3, #9
 800b3d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3d4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b3d8:	4623      	mov	r3, r4
 800b3da:	1e5c      	subs	r4, r3, #1
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d102      	bne.n	800b3e6 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3e0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3e4:	e015      	b.n	800b412 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ea:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d0f2      	beq.n	800b3d8 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3f6:	f003 0304 	and.w	r3, r3, #4
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d004      	beq.n	800b408 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2204      	movs	r2, #4
 800b402:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b404:	2304      	movs	r3, #4
 800b406:	e004      	b.n	800b412 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b40e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b410:	2300      	movs	r3, #0
}
 800b412:	4618      	mov	r0, r3
 800b414:	3708      	adds	r7, #8
 800b416:	46bd      	mov	sp, r7
 800b418:	bc90      	pop	{r4, r7}
 800b41a:	4770      	bx	lr
 800b41c:	20000070 	.word	0x20000070
 800b420:	10624dd3 	.word	0x10624dd3

0800b424 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b424:	b590      	push	{r4, r7, lr}
 800b426:	b087      	sub	sp, #28
 800b428:	af00      	add	r7, sp, #0
 800b42a:	60f8      	str	r0, [r7, #12]
 800b42c:	460b      	mov	r3, r1
 800b42e:	607a      	str	r2, [r7, #4]
 800b430:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800b432:	4b31      	ldr	r3, [pc, #196]	; (800b4f8 <SDMMC_GetCmdResp6+0xd4>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	4a31      	ldr	r2, [pc, #196]	; (800b4fc <SDMMC_GetCmdResp6+0xd8>)
 800b438:	fba2 2303 	umull	r2, r3, r2, r3
 800b43c:	0a5b      	lsrs	r3, r3, #9
 800b43e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b442:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b446:	4623      	mov	r3, r4
 800b448:	1e5c      	subs	r4, r3, #1
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d102      	bne.n	800b454 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b44e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b452:	e04c      	b.n	800b4ee <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b458:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d0f2      	beq.n	800b446 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b464:	f003 0304 	and.w	r3, r3, #4
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d004      	beq.n	800b476 <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	2204      	movs	r2, #4
 800b470:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b472:	2304      	movs	r3, #4
 800b474:	e03b      	b.n	800b4ee <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b47a:	f003 0301 	and.w	r3, r3, #1
 800b47e:	2b00      	cmp	r3, #0
 800b480:	d004      	beq.n	800b48c <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	2201      	movs	r2, #1
 800b486:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b488:	2301      	movs	r3, #1
 800b48a:	e030      	b.n	800b4ee <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b48c:	68f8      	ldr	r0, [r7, #12]
 800b48e:	f7ff fb9f 	bl	800abd0 <SDMMC_GetCommandResponse>
 800b492:	4603      	mov	r3, r0
 800b494:	461a      	mov	r2, r3
 800b496:	7afb      	ldrb	r3, [r7, #11]
 800b498:	4293      	cmp	r3, r2
 800b49a:	d001      	beq.n	800b4a0 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b49c:	2301      	movs	r3, #1
 800b49e:	e026      	b.n	800b4ee <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b4a6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	68f8      	ldr	r0, [r7, #12]
 800b4ac:	f7ff fb9d 	bl	800abea <SDMMC_GetResponse>
 800b4b0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d106      	bne.n	800b4ca <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	0c1b      	lsrs	r3, r3, #16
 800b4c0:	b29a      	uxth	r2, r3
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	e011      	b.n	800b4ee <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d002      	beq.n	800b4da <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b4d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b4d8:	e009      	b.n	800b4ee <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d002      	beq.n	800b4ea <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b4e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4e8:	e001      	b.n	800b4ee <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b4ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	371c      	adds	r7, #28
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd90      	pop	{r4, r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	20000070 	.word	0x20000070
 800b4fc:	10624dd3 	.word	0x10624dd3

0800b500 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b500:	b490      	push	{r4, r7}
 800b502:	b082      	sub	sp, #8
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800b508:	4b18      	ldr	r3, [pc, #96]	; (800b56c <SDMMC_GetCmdResp7+0x6c>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a18      	ldr	r2, [pc, #96]	; (800b570 <SDMMC_GetCmdResp7+0x70>)
 800b50e:	fba2 2303 	umull	r2, r3, r2, r3
 800b512:	0a5b      	lsrs	r3, r3, #9
 800b514:	f241 3288 	movw	r2, #5000	; 0x1388
 800b518:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b51c:	4623      	mov	r3, r4
 800b51e:	1e5c      	subs	r4, r3, #1
 800b520:	2b00      	cmp	r3, #0
 800b522:	d102      	bne.n	800b52a <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b524:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b528:	e01a      	b.n	800b560 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b52e:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b532:	2b00      	cmp	r3, #0
 800b534:	d0f2      	beq.n	800b51c <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b53a:	f003 0304 	and.w	r3, r3, #4
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d004      	beq.n	800b54c <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	2240      	movs	r2, #64	; 0x40
 800b546:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b548:	2304      	movs	r3, #4
 800b54a:	e009      	b.n	800b560 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b554:	2b00      	cmp	r3, #0
 800b556:	d002      	beq.n	800b55e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2240      	movs	r2, #64	; 0x40
 800b55c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b55e:	2300      	movs	r3, #0
  
}
 800b560:	4618      	mov	r0, r3
 800b562:	3708      	adds	r7, #8
 800b564:	46bd      	mov	sp, r7
 800b566:	bc90      	pop	{r4, r7}
 800b568:	4770      	bx	lr
 800b56a:	bf00      	nop
 800b56c:	20000070 	.word	0x20000070
 800b570:	10624dd3 	.word	0x10624dd3

0800b574 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b574:	b084      	sub	sp, #16
 800b576:	b580      	push	{r7, lr}
 800b578:	b084      	sub	sp, #16
 800b57a:	af00      	add	r7, sp, #0
 800b57c:	6078      	str	r0, [r7, #4]
 800b57e:	f107 001c 	add.w	r0, r7, #28
 800b582:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d120      	bne.n	800b5ce <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b590:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	68da      	ldr	r2, [r3, #12]
 800b59c:	4b20      	ldr	r3, [pc, #128]	; (800b620 <USB_CoreInit+0xac>)
 800b59e:	4013      	ands	r3, r2
 800b5a0:	687a      	ldr	r2, [r7, #4]
 800b5a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	68db      	ldr	r3, [r3, #12]
 800b5a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b5b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b5b2:	2b01      	cmp	r3, #1
 800b5b4:	d105      	bne.n	800b5c2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	68db      	ldr	r3, [r3, #12]
 800b5ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f000 f942 	bl	800b84c <USB_CoreReset>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	73fb      	strb	r3, [r7, #15]
 800b5cc:	e010      	b.n	800b5f0 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	68db      	ldr	r3, [r3, #12]
 800b5d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b5da:	6878      	ldr	r0, [r7, #4]
 800b5dc:	f000 f936 	bl	800b84c <USB_CoreReset>
 800b5e0:	4603      	mov	r3, r0
 800b5e2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800b5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d10b      	bne.n	800b60e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	689b      	ldr	r3, [r3, #8]
 800b5fa:	f043 0206 	orr.w	r2, r3, #6
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	689b      	ldr	r3, [r3, #8]
 800b606:	f043 0220 	orr.w	r2, r3, #32
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b60e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b610:	4618      	mov	r0, r3
 800b612:	3710      	adds	r7, #16
 800b614:	46bd      	mov	sp, r7
 800b616:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b61a:	b004      	add	sp, #16
 800b61c:	4770      	bx	lr
 800b61e:	bf00      	nop
 800b620:	ffbdffbf 	.word	0xffbdffbf

0800b624 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b624:	b480      	push	{r7}
 800b626:	b083      	sub	sp, #12
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	689b      	ldr	r3, [r3, #8]
 800b630:	f043 0201 	orr.w	r2, r3, #1
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b638:	2300      	movs	r3, #0
}
 800b63a:	4618      	mov	r0, r3
 800b63c:	370c      	adds	r7, #12
 800b63e:	46bd      	mov	sp, r7
 800b640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b644:	4770      	bx	lr

0800b646 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b646:	b480      	push	{r7}
 800b648:	b083      	sub	sp, #12
 800b64a:	af00      	add	r7, sp, #0
 800b64c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	689b      	ldr	r3, [r3, #8]
 800b652:	f023 0201 	bic.w	r2, r3, #1
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b65a:	2300      	movs	r3, #0
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	370c      	adds	r7, #12
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr

0800b668 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b668:	b580      	push	{r7, lr}
 800b66a:	b082      	sub	sp, #8
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
 800b670:	460b      	mov	r3, r1
 800b672:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	68db      	ldr	r3, [r3, #12]
 800b678:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b680:	78fb      	ldrb	r3, [r7, #3]
 800b682:	2b01      	cmp	r3, #1
 800b684:	d106      	bne.n	800b694 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	68db      	ldr	r3, [r3, #12]
 800b68a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	60da      	str	r2, [r3, #12]
 800b692:	e00b      	b.n	800b6ac <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b694:	78fb      	ldrb	r3, [r7, #3]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d106      	bne.n	800b6a8 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	68db      	ldr	r3, [r3, #12]
 800b69e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	60da      	str	r2, [r3, #12]
 800b6a6:	e001      	b.n	800b6ac <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	e003      	b.n	800b6b4 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b6ac:	2032      	movs	r0, #50	; 0x32
 800b6ae:	f7f5 fa4b 	bl	8000b48 <HAL_Delay>

  return HAL_OK;
 800b6b2:	2300      	movs	r3, #0
}
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	3708      	adds	r7, #8
 800b6b8:	46bd      	mov	sp, r7
 800b6ba:	bd80      	pop	{r7, pc}

0800b6bc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b6bc:	b480      	push	{r7}
 800b6be:	b085      	sub	sp, #20
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b6c6:	2300      	movs	r3, #0
 800b6c8:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b6ca:	683b      	ldr	r3, [r7, #0]
 800b6cc:	019b      	lsls	r3, r3, #6
 800b6ce:	f043 0220 	orr.w	r2, r3, #32
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	3301      	adds	r3, #1
 800b6da:	60fb      	str	r3, [r7, #12]
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	4a09      	ldr	r2, [pc, #36]	; (800b704 <USB_FlushTxFifo+0x48>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d901      	bls.n	800b6e8 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b6e4:	2303      	movs	r3, #3
 800b6e6:	e006      	b.n	800b6f6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	691b      	ldr	r3, [r3, #16]
 800b6ec:	f003 0320 	and.w	r3, r3, #32
 800b6f0:	2b20      	cmp	r3, #32
 800b6f2:	d0f0      	beq.n	800b6d6 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3714      	adds	r7, #20
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b700:	4770      	bx	lr
 800b702:	bf00      	nop
 800b704:	00030d40 	.word	0x00030d40

0800b708 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b708:	b480      	push	{r7}
 800b70a:	b085      	sub	sp, #20
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b710:	2300      	movs	r3, #0
 800b712:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2210      	movs	r2, #16
 800b718:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	3301      	adds	r3, #1
 800b71e:	60fb      	str	r3, [r7, #12]
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	4a09      	ldr	r2, [pc, #36]	; (800b748 <USB_FlushRxFifo+0x40>)
 800b724:	4293      	cmp	r3, r2
 800b726:	d901      	bls.n	800b72c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b728:	2303      	movs	r3, #3
 800b72a:	e006      	b.n	800b73a <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	691b      	ldr	r3, [r3, #16]
 800b730:	f003 0310 	and.w	r3, r3, #16
 800b734:	2b10      	cmp	r3, #16
 800b736:	d0f0      	beq.n	800b71a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b738:	2300      	movs	r3, #0
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3714      	adds	r7, #20
 800b73e:	46bd      	mov	sp, r7
 800b740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b744:	4770      	bx	lr
 800b746:	bf00      	nop
 800b748:	00030d40 	.word	0x00030d40

0800b74c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b74c:	b480      	push	{r7}
 800b74e:	b089      	sub	sp, #36	; 0x24
 800b750:	af00      	add	r7, sp, #0
 800b752:	60f8      	str	r0, [r7, #12]
 800b754:	60b9      	str	r1, [r7, #8]
 800b756:	4611      	mov	r1, r2
 800b758:	461a      	mov	r2, r3
 800b75a:	460b      	mov	r3, r1
 800b75c:	71fb      	strb	r3, [r7, #7]
 800b75e:	4613      	mov	r3, r2
 800b760:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b766:	68bb      	ldr	r3, [r7, #8]
 800b768:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b76a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d11a      	bne.n	800b7a8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b772:	88bb      	ldrh	r3, [r7, #4]
 800b774:	3303      	adds	r3, #3
 800b776:	089b      	lsrs	r3, r3, #2
 800b778:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b77a:	2300      	movs	r3, #0
 800b77c:	61bb      	str	r3, [r7, #24]
 800b77e:	e00f      	b.n	800b7a0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800b780:	79fb      	ldrb	r3, [r7, #7]
 800b782:	031a      	lsls	r2, r3, #12
 800b784:	697b      	ldr	r3, [r7, #20]
 800b786:	4413      	add	r3, r2
 800b788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b78c:	461a      	mov	r2, r3
 800b78e:	69fb      	ldr	r3, [r7, #28]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b794:	69fb      	ldr	r3, [r7, #28]
 800b796:	3304      	adds	r3, #4
 800b798:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	3301      	adds	r3, #1
 800b79e:	61bb      	str	r3, [r7, #24]
 800b7a0:	69ba      	ldr	r2, [r7, #24]
 800b7a2:	693b      	ldr	r3, [r7, #16]
 800b7a4:	429a      	cmp	r2, r3
 800b7a6:	d3eb      	bcc.n	800b780 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b7a8:	2300      	movs	r3, #0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3724      	adds	r7, #36	; 0x24
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b4:	4770      	bx	lr

0800b7b6 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b7b6:	b480      	push	{r7}
 800b7b8:	b089      	sub	sp, #36	; 0x24
 800b7ba:	af00      	add	r7, sp, #0
 800b7bc:	60f8      	str	r0, [r7, #12]
 800b7be:	60b9      	str	r1, [r7, #8]
 800b7c0:	4613      	mov	r3, r2
 800b7c2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b7cc:	88fb      	ldrh	r3, [r7, #6]
 800b7ce:	3303      	adds	r3, #3
 800b7d0:	089b      	lsrs	r3, r3, #2
 800b7d2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	61bb      	str	r3, [r7, #24]
 800b7d8:	e00b      	b.n	800b7f2 <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800b7da:	697b      	ldr	r3, [r7, #20]
 800b7dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7e0:	681a      	ldr	r2, [r3, #0]
 800b7e2:	69fb      	ldr	r3, [r7, #28]
 800b7e4:	601a      	str	r2, [r3, #0]
    pDest++;
 800b7e6:	69fb      	ldr	r3, [r7, #28]
 800b7e8:	3304      	adds	r3, #4
 800b7ea:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b7ec:	69bb      	ldr	r3, [r7, #24]
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	61bb      	str	r3, [r7, #24]
 800b7f2:	69ba      	ldr	r2, [r7, #24]
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	429a      	cmp	r2, r3
 800b7f8:	d3ef      	bcc.n	800b7da <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b7fa:	69fb      	ldr	r3, [r7, #28]
}
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	3724      	adds	r7, #36	; 0x24
 800b800:	46bd      	mov	sp, r7
 800b802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b806:	4770      	bx	lr

0800b808 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b808:	b480      	push	{r7}
 800b80a:	b085      	sub	sp, #20
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	695b      	ldr	r3, [r3, #20]
 800b814:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	699b      	ldr	r3, [r3, #24]
 800b81a:	68fa      	ldr	r2, [r7, #12]
 800b81c:	4013      	ands	r3, r2
 800b81e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b820:	68fb      	ldr	r3, [r7, #12]
}
 800b822:	4618      	mov	r0, r3
 800b824:	3714      	adds	r7, #20
 800b826:	46bd      	mov	sp, r7
 800b828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82c:	4770      	bx	lr

0800b82e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b82e:	b480      	push	{r7}
 800b830:	b083      	sub	sp, #12
 800b832:	af00      	add	r7, sp, #0
 800b834:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	695b      	ldr	r3, [r3, #20]
 800b83a:	f003 0301 	and.w	r3, r3, #1
}
 800b83e:	4618      	mov	r0, r3
 800b840:	370c      	adds	r7, #12
 800b842:	46bd      	mov	sp, r7
 800b844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b848:	4770      	bx	lr
	...

0800b84c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b84c:	b480      	push	{r7}
 800b84e:	b085      	sub	sp, #20
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b854:	2300      	movs	r3, #0
 800b856:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	3301      	adds	r3, #1
 800b85c:	60fb      	str	r3, [r7, #12]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	4a13      	ldr	r2, [pc, #76]	; (800b8b0 <USB_CoreReset+0x64>)
 800b862:	4293      	cmp	r3, r2
 800b864:	d901      	bls.n	800b86a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b866:	2303      	movs	r3, #3
 800b868:	e01b      	b.n	800b8a2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	691b      	ldr	r3, [r3, #16]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	daf2      	bge.n	800b858 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b872:	2300      	movs	r3, #0
 800b874:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	691b      	ldr	r3, [r3, #16]
 800b87a:	f043 0201 	orr.w	r2, r3, #1
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	3301      	adds	r3, #1
 800b886:	60fb      	str	r3, [r7, #12]
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	4a09      	ldr	r2, [pc, #36]	; (800b8b0 <USB_CoreReset+0x64>)
 800b88c:	4293      	cmp	r3, r2
 800b88e:	d901      	bls.n	800b894 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b890:	2303      	movs	r3, #3
 800b892:	e006      	b.n	800b8a2 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	691b      	ldr	r3, [r3, #16]
 800b898:	f003 0301 	and.w	r3, r3, #1
 800b89c:	2b01      	cmp	r3, #1
 800b89e:	d0f0      	beq.n	800b882 <USB_CoreReset+0x36>

  return HAL_OK;
 800b8a0:	2300      	movs	r3, #0
}
 800b8a2:	4618      	mov	r0, r3
 800b8a4:	3714      	adds	r7, #20
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ac:	4770      	bx	lr
 800b8ae:	bf00      	nop
 800b8b0:	00030d40 	.word	0x00030d40

0800b8b4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b8b4:	b084      	sub	sp, #16
 800b8b6:	b580      	push	{r7, lr}
 800b8b8:	b084      	sub	sp, #16
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	6078      	str	r0, [r7, #4]
 800b8be:	f107 001c 	add.w	r0, r7, #28
 800b8c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b8ca:	68bb      	ldr	r3, [r7, #8]
 800b8cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b8d0:	461a      	mov	r2, r3
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8da:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b8e2:	687b      	ldr	r3, [r7, #4]
 800b8e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d018      	beq.n	800b920 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800b8ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8f0:	2b03      	cmp	r3, #3
 800b8f2:	d10a      	bne.n	800b90a <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b8f4:	68bb      	ldr	r3, [r7, #8]
 800b8f6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	68ba      	ldr	r2, [r7, #8]
 800b8fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b902:	f043 0304 	orr.w	r3, r3, #4
 800b906:	6013      	str	r3, [r2, #0]
 800b908:	e014      	b.n	800b934 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b90a:	68bb      	ldr	r3, [r7, #8]
 800b90c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	68ba      	ldr	r2, [r7, #8]
 800b914:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b918:	f023 0304 	bic.w	r3, r3, #4
 800b91c:	6013      	str	r3, [r2, #0]
 800b91e:	e009      	b.n	800b934 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	68ba      	ldr	r2, [r7, #8]
 800b92a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b92e:	f023 0304 	bic.w	r3, r3, #4
 800b932:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800b934:	2110      	movs	r1, #16
 800b936:	6878      	ldr	r0, [r7, #4]
 800b938:	f7ff fec0 	bl	800b6bc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f7ff fee3 	bl	800b708 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b942:	2300      	movs	r3, #0
 800b944:	60fb      	str	r3, [r7, #12]
 800b946:	e015      	b.n	800b974 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	015a      	lsls	r2, r3, #5
 800b94c:	68bb      	ldr	r3, [r7, #8]
 800b94e:	4413      	add	r3, r2
 800b950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b954:	461a      	mov	r2, r3
 800b956:	f04f 33ff 	mov.w	r3, #4294967295
 800b95a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b95c:	68fb      	ldr	r3, [r7, #12]
 800b95e:	015a      	lsls	r2, r3, #5
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	4413      	add	r3, r2
 800b964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b968:	461a      	mov	r2, r3
 800b96a:	2300      	movs	r3, #0
 800b96c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	3301      	adds	r3, #1
 800b972:	60fb      	str	r3, [r7, #12]
 800b974:	6a3b      	ldr	r3, [r7, #32]
 800b976:	68fa      	ldr	r2, [r7, #12]
 800b978:	429a      	cmp	r2, r3
 800b97a:	d3e5      	bcc.n	800b948 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800b97c:	2101      	movs	r1, #1
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f000 f8ac 	bl	800badc <USB_DriveVbus>

  HAL_Delay(200U);
 800b984:	20c8      	movs	r0, #200	; 0xc8
 800b986:	f7f5 f8df 	bl	8000b48 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2200      	movs	r2, #0
 800b98e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f04f 32ff 	mov.w	r2, #4294967295
 800b996:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b99c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d00b      	beq.n	800b9bc <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9aa:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	4a14      	ldr	r2, [pc, #80]	; (800ba00 <USB_HostInit+0x14c>)
 800b9b0:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	4a13      	ldr	r2, [pc, #76]	; (800ba04 <USB_HostInit+0x150>)
 800b9b6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800b9ba:	e009      	b.n	800b9d0 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	2280      	movs	r2, #128	; 0x80
 800b9c0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	4a10      	ldr	r2, [pc, #64]	; (800ba08 <USB_HostInit+0x154>)
 800b9c6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	4a10      	ldr	r2, [pc, #64]	; (800ba0c <USB_HostInit+0x158>)
 800b9cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b9d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d105      	bne.n	800b9e2 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	699b      	ldr	r3, [r3, #24]
 800b9da:	f043 0210 	orr.w	r2, r3, #16
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	699a      	ldr	r2, [r3, #24]
 800b9e6:	4b0a      	ldr	r3, [pc, #40]	; (800ba10 <USB_HostInit+0x15c>)
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	687a      	ldr	r2, [r7, #4]
 800b9ec:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800b9ee:	2300      	movs	r3, #0
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3710      	adds	r7, #16
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b9fa:	b004      	add	sp, #16
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop
 800ba00:	01000200 	.word	0x01000200
 800ba04:	00e00300 	.word	0x00e00300
 800ba08:	00600080 	.word	0x00600080
 800ba0c:	004000e0 	.word	0x004000e0
 800ba10:	a3200008 	.word	0xa3200008

0800ba14 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b085      	sub	sp, #20
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	460b      	mov	r3, r1
 800ba1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	68fa      	ldr	r2, [r7, #12]
 800ba2e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800ba32:	f023 0303 	bic.w	r3, r3, #3
 800ba36:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba3e:	681a      	ldr	r2, [r3, #0]
 800ba40:	78fb      	ldrb	r3, [r7, #3]
 800ba42:	f003 0303 	and.w	r3, r3, #3
 800ba46:	68f9      	ldr	r1, [r7, #12]
 800ba48:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800ba4c:	4313      	orrs	r3, r2
 800ba4e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800ba50:	78fb      	ldrb	r3, [r7, #3]
 800ba52:	2b01      	cmp	r3, #1
 800ba54:	d107      	bne.n	800ba66 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ba62:	6053      	str	r3, [r2, #4]
 800ba64:	e009      	b.n	800ba7a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800ba66:	78fb      	ldrb	r3, [r7, #3]
 800ba68:	2b02      	cmp	r3, #2
 800ba6a:	d106      	bne.n	800ba7a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800ba6c:	68fb      	ldr	r3, [r7, #12]
 800ba6e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba72:	461a      	mov	r2, r3
 800ba74:	f241 7370 	movw	r3, #6000	; 0x1770
 800ba78:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800ba7a:	2300      	movs	r3, #0
}
 800ba7c:	4618      	mov	r0, r3
 800ba7e:	3714      	adds	r7, #20
 800ba80:	46bd      	mov	sp, r7
 800ba82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba86:	4770      	bx	lr

0800ba88 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b084      	sub	sp, #16
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800ba94:	2300      	movs	r3, #0
 800ba96:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800baa2:	68bb      	ldr	r3, [r7, #8]
 800baa4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800baa8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	68fa      	ldr	r2, [r7, #12]
 800baae:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bab2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bab6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800bab8:	2064      	movs	r0, #100	; 0x64
 800baba:	f7f5 f845 	bl	8000b48 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	68fa      	ldr	r2, [r7, #12]
 800bac2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bac6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800baca:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800bacc:	200a      	movs	r0, #10
 800bace:	f7f5 f83b 	bl	8000b48 <HAL_Delay>

  return HAL_OK;
 800bad2:	2300      	movs	r3, #0
}
 800bad4:	4618      	mov	r0, r3
 800bad6:	3710      	adds	r7, #16
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}

0800badc <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800badc:	b480      	push	{r7}
 800bade:	b085      	sub	sp, #20
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	6078      	str	r0, [r7, #4]
 800bae4:	460b      	mov	r3, r1
 800bae6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800baec:	2300      	movs	r3, #0
 800baee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800bb00:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d109      	bne.n	800bb20 <USB_DriveVbus+0x44>
 800bb0c:	78fb      	ldrb	r3, [r7, #3]
 800bb0e:	2b01      	cmp	r3, #1
 800bb10:	d106      	bne.n	800bb20 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	68fa      	ldr	r2, [r7, #12]
 800bb16:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bb1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bb1e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800bb20:	68bb      	ldr	r3, [r7, #8]
 800bb22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bb26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb2a:	d109      	bne.n	800bb40 <USB_DriveVbus+0x64>
 800bb2c:	78fb      	ldrb	r3, [r7, #3]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d106      	bne.n	800bb40 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	68fa      	ldr	r2, [r7, #12]
 800bb36:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bb3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bb3e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800bb40:	2300      	movs	r3, #0
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3714      	adds	r7, #20
 800bb46:	46bd      	mov	sp, r7
 800bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4c:	4770      	bx	lr

0800bb4e <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bb4e:	b480      	push	{r7}
 800bb50:	b085      	sub	sp, #20
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	0c5b      	lsrs	r3, r3, #17
 800bb6c:	f003 0303 	and.w	r3, r3, #3
}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3714      	adds	r7, #20
 800bb74:	46bd      	mov	sp, r7
 800bb76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7a:	4770      	bx	lr

0800bb7c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800bb7c:	b480      	push	{r7}
 800bb7e:	b085      	sub	sp, #20
 800bb80:	af00      	add	r7, sp, #0
 800bb82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb8e:	689b      	ldr	r3, [r3, #8]
 800bb90:	b29b      	uxth	r3, r3
}
 800bb92:	4618      	mov	r0, r3
 800bb94:	3714      	adds	r7, #20
 800bb96:	46bd      	mov	sp, r7
 800bb98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9c:	4770      	bx	lr
	...

0800bba0 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800bba0:	b480      	push	{r7}
 800bba2:	b087      	sub	sp, #28
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
 800bba8:	4608      	mov	r0, r1
 800bbaa:	4611      	mov	r1, r2
 800bbac:	461a      	mov	r2, r3
 800bbae:	4603      	mov	r3, r0
 800bbb0:	70fb      	strb	r3, [r7, #3]
 800bbb2:	460b      	mov	r3, r1
 800bbb4:	70bb      	strb	r3, [r7, #2]
 800bbb6:	4613      	mov	r3, r2
 800bbb8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800bbc2:	78fb      	ldrb	r3, [r7, #3]
 800bbc4:	015a      	lsls	r2, r3, #5
 800bbc6:	68bb      	ldr	r3, [r7, #8]
 800bbc8:	4413      	add	r3, r2
 800bbca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbce:	461a      	mov	r2, r3
 800bbd0:	f04f 33ff 	mov.w	r3, #4294967295
 800bbd4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800bbd6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bbda:	2b03      	cmp	r3, #3
 800bbdc:	d87e      	bhi.n	800bcdc <USB_HC_Init+0x13c>
 800bbde:	a201      	add	r2, pc, #4	; (adr r2, 800bbe4 <USB_HC_Init+0x44>)
 800bbe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbe4:	0800bbf5 	.word	0x0800bbf5
 800bbe8:	0800bc9f 	.word	0x0800bc9f
 800bbec:	0800bbf5 	.word	0x0800bbf5
 800bbf0:	0800bc61 	.word	0x0800bc61
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bbf4:	78fb      	ldrb	r3, [r7, #3]
 800bbf6:	015a      	lsls	r2, r3, #5
 800bbf8:	68bb      	ldr	r3, [r7, #8]
 800bbfa:	4413      	add	r3, r2
 800bbfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc00:	461a      	mov	r2, r3
 800bc02:	f240 439d 	movw	r3, #1181	; 0x49d
 800bc06:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800bc08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	da10      	bge.n	800bc32 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800bc10:	78fb      	ldrb	r3, [r7, #3]
 800bc12:	015a      	lsls	r2, r3, #5
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	4413      	add	r3, r2
 800bc18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc1c:	68db      	ldr	r3, [r3, #12]
 800bc1e:	78fa      	ldrb	r2, [r7, #3]
 800bc20:	0151      	lsls	r1, r2, #5
 800bc22:	68ba      	ldr	r2, [r7, #8]
 800bc24:	440a      	add	r2, r1
 800bc26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc2e:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800bc30:	e057      	b.n	800bce2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d051      	beq.n	800bce2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800bc3e:	78fb      	ldrb	r3, [r7, #3]
 800bc40:	015a      	lsls	r2, r3, #5
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	4413      	add	r3, r2
 800bc46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc4a:	68db      	ldr	r3, [r3, #12]
 800bc4c:	78fa      	ldrb	r2, [r7, #3]
 800bc4e:	0151      	lsls	r1, r2, #5
 800bc50:	68ba      	ldr	r2, [r7, #8]
 800bc52:	440a      	add	r2, r1
 800bc54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc58:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800bc5c:	60d3      	str	r3, [r2, #12]
      break;
 800bc5e:	e040      	b.n	800bce2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bc60:	78fb      	ldrb	r3, [r7, #3]
 800bc62:	015a      	lsls	r2, r3, #5
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	4413      	add	r3, r2
 800bc68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc6c:	461a      	mov	r2, r3
 800bc6e:	f240 639d 	movw	r3, #1693	; 0x69d
 800bc72:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800bc74:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	da34      	bge.n	800bce6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800bc7c:	78fb      	ldrb	r3, [r7, #3]
 800bc7e:	015a      	lsls	r2, r3, #5
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	4413      	add	r3, r2
 800bc84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc88:	68db      	ldr	r3, [r3, #12]
 800bc8a:	78fa      	ldrb	r2, [r7, #3]
 800bc8c:	0151      	lsls	r1, r2, #5
 800bc8e:	68ba      	ldr	r2, [r7, #8]
 800bc90:	440a      	add	r2, r1
 800bc92:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc9a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800bc9c:	e023      	b.n	800bce6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bc9e:	78fb      	ldrb	r3, [r7, #3]
 800bca0:	015a      	lsls	r2, r3, #5
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	4413      	add	r3, r2
 800bca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcaa:	461a      	mov	r2, r3
 800bcac:	f240 2325 	movw	r3, #549	; 0x225
 800bcb0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800bcb2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	da17      	bge.n	800bcea <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800bcba:	78fb      	ldrb	r3, [r7, #3]
 800bcbc:	015a      	lsls	r2, r3, #5
 800bcbe:	68bb      	ldr	r3, [r7, #8]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bcc6:	68db      	ldr	r3, [r3, #12]
 800bcc8:	78fa      	ldrb	r2, [r7, #3]
 800bcca:	0151      	lsls	r1, r2, #5
 800bccc:	68ba      	ldr	r2, [r7, #8]
 800bcce:	440a      	add	r2, r1
 800bcd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bcd4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800bcd8:	60d3      	str	r3, [r2, #12]
      }
      break;
 800bcda:	e006      	b.n	800bcea <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	75fb      	strb	r3, [r7, #23]
      break;
 800bce0:	e004      	b.n	800bcec <USB_HC_Init+0x14c>
      break;
 800bce2:	bf00      	nop
 800bce4:	e002      	b.n	800bcec <USB_HC_Init+0x14c>
      break;
 800bce6:	bf00      	nop
 800bce8:	e000      	b.n	800bcec <USB_HC_Init+0x14c>
      break;
 800bcea:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bcf2:	699a      	ldr	r2, [r3, #24]
 800bcf4:	78fb      	ldrb	r3, [r7, #3]
 800bcf6:	f003 030f 	and.w	r3, r3, #15
 800bcfa:	2101      	movs	r1, #1
 800bcfc:	fa01 f303 	lsl.w	r3, r1, r3
 800bd00:	68b9      	ldr	r1, [r7, #8]
 800bd02:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bd06:	4313      	orrs	r3, r2
 800bd08:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	699b      	ldr	r3, [r3, #24]
 800bd0e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800bd16:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	da03      	bge.n	800bd26 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800bd1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd22:	613b      	str	r3, [r7, #16]
 800bd24:	e001      	b.n	800bd2a <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800bd26:	2300      	movs	r3, #0
 800bd28:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800bd2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd2e:	2b02      	cmp	r3, #2
 800bd30:	d103      	bne.n	800bd3a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800bd32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bd36:	60fb      	str	r3, [r7, #12]
 800bd38:	e001      	b.n	800bd3e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bd3e:	787b      	ldrb	r3, [r7, #1]
 800bd40:	059b      	lsls	r3, r3, #22
 800bd42:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bd46:	78bb      	ldrb	r3, [r7, #2]
 800bd48:	02db      	lsls	r3, r3, #11
 800bd4a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bd4e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800bd50:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bd54:	049b      	lsls	r3, r3, #18
 800bd56:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bd5a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bd5c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bd5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800bd62:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bd68:	78fb      	ldrb	r3, [r7, #3]
 800bd6a:	0159      	lsls	r1, r3, #5
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	440b      	add	r3, r1
 800bd70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd74:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bd7a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800bd7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bd80:	2b03      	cmp	r3, #3
 800bd82:	d10f      	bne.n	800bda4 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800bd84:	78fb      	ldrb	r3, [r7, #3]
 800bd86:	015a      	lsls	r2, r3, #5
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	4413      	add	r3, r2
 800bd8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	78fa      	ldrb	r2, [r7, #3]
 800bd94:	0151      	lsls	r1, r2, #5
 800bd96:	68ba      	ldr	r2, [r7, #8]
 800bd98:	440a      	add	r2, r1
 800bd9a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bd9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bda2:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800bda4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bda6:	4618      	mov	r0, r3
 800bda8:	371c      	adds	r7, #28
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr
 800bdb2:	bf00      	nop

0800bdb4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b08c      	sub	sp, #48	; 0x30
 800bdb8:	af02      	add	r7, sp, #8
 800bdba:	60f8      	str	r0, [r7, #12]
 800bdbc:	60b9      	str	r1, [r7, #8]
 800bdbe:	4613      	mov	r3, r2
 800bdc0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	785b      	ldrb	r3, [r3, #1]
 800bdca:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800bdcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bdd0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d028      	beq.n	800be30 <USB_HC_StartXfer+0x7c>
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	791b      	ldrb	r3, [r3, #4]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d124      	bne.n	800be30 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800bde6:	79fb      	ldrb	r3, [r7, #7]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d10b      	bne.n	800be04 <USB_HC_StartXfer+0x50>
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	795b      	ldrb	r3, [r3, #5]
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d107      	bne.n	800be04 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	785b      	ldrb	r3, [r3, #1]
 800bdf8:	4619      	mov	r1, r3
 800bdfa:	68f8      	ldr	r0, [r7, #12]
 800bdfc:	f000 fa2c 	bl	800c258 <USB_DoPing>
      return HAL_OK;
 800be00:	2300      	movs	r3, #0
 800be02:	e111      	b.n	800c028 <USB_HC_StartXfer+0x274>
    }
    else if (dma == 1U)
 800be04:	79fb      	ldrb	r3, [r7, #7]
 800be06:	2b01      	cmp	r3, #1
 800be08:	d112      	bne.n	800be30 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800be0a:	69fb      	ldr	r3, [r7, #28]
 800be0c:	015a      	lsls	r2, r3, #5
 800be0e:	6a3b      	ldr	r3, [r7, #32]
 800be10:	4413      	add	r3, r2
 800be12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be16:	68db      	ldr	r3, [r3, #12]
 800be18:	69fa      	ldr	r2, [r7, #28]
 800be1a:	0151      	lsls	r1, r2, #5
 800be1c:	6a3a      	ldr	r2, [r7, #32]
 800be1e:	440a      	add	r2, r1
 800be20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800be24:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800be28:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	2200      	movs	r2, #0
 800be2e:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	691b      	ldr	r3, [r3, #16]
 800be34:	2b00      	cmp	r3, #0
 800be36:	d018      	beq.n	800be6a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800be38:	68bb      	ldr	r3, [r7, #8]
 800be3a:	691b      	ldr	r3, [r3, #16]
 800be3c:	68ba      	ldr	r2, [r7, #8]
 800be3e:	8912      	ldrh	r2, [r2, #8]
 800be40:	4413      	add	r3, r2
 800be42:	3b01      	subs	r3, #1
 800be44:	68ba      	ldr	r2, [r7, #8]
 800be46:	8912      	ldrh	r2, [r2, #8]
 800be48:	fbb3 f3f2 	udiv	r3, r3, r2
 800be4c:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800be4e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800be50:	8b7b      	ldrh	r3, [r7, #26]
 800be52:	429a      	cmp	r2, r3
 800be54:	d90b      	bls.n	800be6e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800be56:	8b7b      	ldrh	r3, [r7, #26]
 800be58:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800be5a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800be5c:	68ba      	ldr	r2, [r7, #8]
 800be5e:	8912      	ldrh	r2, [r2, #8]
 800be60:	fb02 f203 	mul.w	r2, r2, r3
 800be64:	68bb      	ldr	r3, [r7, #8]
 800be66:	611a      	str	r2, [r3, #16]
 800be68:	e001      	b.n	800be6e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800be6a:	2301      	movs	r3, #1
 800be6c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800be6e:	68bb      	ldr	r3, [r7, #8]
 800be70:	78db      	ldrb	r3, [r3, #3]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d006      	beq.n	800be84 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800be76:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800be78:	68ba      	ldr	r2, [r7, #8]
 800be7a:	8912      	ldrh	r2, [r2, #8]
 800be7c:	fb02 f203 	mul.w	r2, r2, r3
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	691b      	ldr	r3, [r3, #16]
 800be88:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800be8c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800be8e:	04d9      	lsls	r1, r3, #19
 800be90:	4b67      	ldr	r3, [pc, #412]	; (800c030 <USB_HC_StartXfer+0x27c>)
 800be92:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800be94:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	7a9b      	ldrb	r3, [r3, #10]
 800be9a:	075b      	lsls	r3, r3, #29
 800be9c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800bea0:	69f9      	ldr	r1, [r7, #28]
 800bea2:	0148      	lsls	r0, r1, #5
 800bea4:	6a39      	ldr	r1, [r7, #32]
 800bea6:	4401      	add	r1, r0
 800bea8:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800beac:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800beae:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800beb0:	79fb      	ldrb	r3, [r7, #7]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d009      	beq.n	800beca <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	68d9      	ldr	r1, [r3, #12]
 800beba:	69fb      	ldr	r3, [r7, #28]
 800bebc:	015a      	lsls	r2, r3, #5
 800bebe:	6a3b      	ldr	r3, [r7, #32]
 800bec0:	4413      	add	r3, r2
 800bec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bec6:	460a      	mov	r2, r1
 800bec8:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800beca:	6a3b      	ldr	r3, [r7, #32]
 800becc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bed0:	689b      	ldr	r3, [r3, #8]
 800bed2:	f003 0301 	and.w	r3, r3, #1
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	bf0c      	ite	eq
 800beda:	2301      	moveq	r3, #1
 800bedc:	2300      	movne	r3, #0
 800bede:	b2db      	uxtb	r3, r3
 800bee0:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800bee2:	69fb      	ldr	r3, [r7, #28]
 800bee4:	015a      	lsls	r2, r3, #5
 800bee6:	6a3b      	ldr	r3, [r7, #32]
 800bee8:	4413      	add	r3, r2
 800beea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	69fa      	ldr	r2, [r7, #28]
 800bef2:	0151      	lsls	r1, r2, #5
 800bef4:	6a3a      	ldr	r2, [r7, #32]
 800bef6:	440a      	add	r2, r1
 800bef8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800befc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800bf00:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800bf02:	69fb      	ldr	r3, [r7, #28]
 800bf04:	015a      	lsls	r2, r3, #5
 800bf06:	6a3b      	ldr	r3, [r7, #32]
 800bf08:	4413      	add	r3, r2
 800bf0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf0e:	681a      	ldr	r2, [r3, #0]
 800bf10:	7e7b      	ldrb	r3, [r7, #25]
 800bf12:	075b      	lsls	r3, r3, #29
 800bf14:	69f9      	ldr	r1, [r7, #28]
 800bf16:	0148      	lsls	r0, r1, #5
 800bf18:	6a39      	ldr	r1, [r7, #32]
 800bf1a:	4401      	add	r1, r0
 800bf1c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800bf20:	4313      	orrs	r3, r2
 800bf22:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800bf24:	69fb      	ldr	r3, [r7, #28]
 800bf26:	015a      	lsls	r2, r3, #5
 800bf28:	6a3b      	ldr	r3, [r7, #32]
 800bf2a:	4413      	add	r3, r2
 800bf2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	4a40      	ldr	r2, [pc, #256]	; (800c034 <USB_HC_StartXfer+0x280>)
 800bf34:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bf36:	4b3f      	ldr	r3, [pc, #252]	; (800c034 <USB_HC_StartXfer+0x280>)
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bf3e:	4a3d      	ldr	r2, [pc, #244]	; (800c034 <USB_HC_StartXfer+0x280>)
 800bf40:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	78db      	ldrb	r3, [r3, #3]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d006      	beq.n	800bf58 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800bf4a:	4b3a      	ldr	r3, [pc, #232]	; (800c034 <USB_HC_StartXfer+0x280>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf52:	4a38      	ldr	r2, [pc, #224]	; (800c034 <USB_HC_StartXfer+0x280>)
 800bf54:	6013      	str	r3, [r2, #0]
 800bf56:	e005      	b.n	800bf64 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800bf58:	4b36      	ldr	r3, [pc, #216]	; (800c034 <USB_HC_StartXfer+0x280>)
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bf60:	4a34      	ldr	r2, [pc, #208]	; (800c034 <USB_HC_StartXfer+0x280>)
 800bf62:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800bf64:	4b33      	ldr	r3, [pc, #204]	; (800c034 <USB_HC_StartXfer+0x280>)
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bf6c:	4a31      	ldr	r2, [pc, #196]	; (800c034 <USB_HC_StartXfer+0x280>)
 800bf6e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800bf70:	69fb      	ldr	r3, [r7, #28]
 800bf72:	015a      	lsls	r2, r3, #5
 800bf74:	6a3b      	ldr	r3, [r7, #32]
 800bf76:	4413      	add	r3, r2
 800bf78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf7c:	461a      	mov	r2, r3
 800bf7e:	4b2d      	ldr	r3, [pc, #180]	; (800c034 <USB_HC_StartXfer+0x280>)
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800bf84:	79fb      	ldrb	r3, [r7, #7]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d14d      	bne.n	800c026 <USB_HC_StartXfer+0x272>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800bf8a:	68bb      	ldr	r3, [r7, #8]
 800bf8c:	78db      	ldrb	r3, [r3, #3]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d149      	bne.n	800c026 <USB_HC_StartXfer+0x272>
 800bf92:	68bb      	ldr	r3, [r7, #8]
 800bf94:	691b      	ldr	r3, [r3, #16]
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d045      	beq.n	800c026 <USB_HC_StartXfer+0x272>
    {
      switch (hc->ep_type)
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	79db      	ldrb	r3, [r3, #7]
 800bf9e:	2b03      	cmp	r3, #3
 800bfa0:	d830      	bhi.n	800c004 <USB_HC_StartXfer+0x250>
 800bfa2:	a201      	add	r2, pc, #4	; (adr r2, 800bfa8 <USB_HC_StartXfer+0x1f4>)
 800bfa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bfa8:	0800bfb9 	.word	0x0800bfb9
 800bfac:	0800bfdd 	.word	0x0800bfdd
 800bfb0:	0800bfb9 	.word	0x0800bfb9
 800bfb4:	0800bfdd 	.word	0x0800bfdd
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800bfb8:	68bb      	ldr	r3, [r7, #8]
 800bfba:	691b      	ldr	r3, [r3, #16]
 800bfbc:	3303      	adds	r3, #3
 800bfbe:	089b      	lsrs	r3, r3, #2
 800bfc0:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800bfc2:	8afa      	ldrh	r2, [r7, #22]
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc8:	b29b      	uxth	r3, r3
 800bfca:	429a      	cmp	r2, r3
 800bfcc:	d91c      	bls.n	800c008 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	699b      	ldr	r3, [r3, #24]
 800bfd2:	f043 0220 	orr.w	r2, r3, #32
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	619a      	str	r2, [r3, #24]
          }
          break;
 800bfda:	e015      	b.n	800c008 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800bfdc:	68bb      	ldr	r3, [r7, #8]
 800bfde:	691b      	ldr	r3, [r3, #16]
 800bfe0:	3303      	adds	r3, #3
 800bfe2:	089b      	lsrs	r3, r3, #2
 800bfe4:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800bfe6:	8afa      	ldrh	r2, [r7, #22]
 800bfe8:	6a3b      	ldr	r3, [r7, #32]
 800bfea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bfee:	691b      	ldr	r3, [r3, #16]
 800bff0:	b29b      	uxth	r3, r3
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d90a      	bls.n	800c00c <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	699b      	ldr	r3, [r3, #24]
 800bffa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	619a      	str	r2, [r3, #24]
          }
          break;
 800c002:	e003      	b.n	800c00c <USB_HC_StartXfer+0x258>

        default:
          break;
 800c004:	bf00      	nop
 800c006:	e002      	b.n	800c00e <USB_HC_StartXfer+0x25a>
          break;
 800c008:	bf00      	nop
 800c00a:	e000      	b.n	800c00e <USB_HC_StartXfer+0x25a>
          break;
 800c00c:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	68d9      	ldr	r1, [r3, #12]
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	785a      	ldrb	r2, [r3, #1]
 800c016:	68bb      	ldr	r3, [r7, #8]
 800c018:	691b      	ldr	r3, [r3, #16]
 800c01a:	b29b      	uxth	r3, r3
 800c01c:	2000      	movs	r0, #0
 800c01e:	9000      	str	r0, [sp, #0]
 800c020:	68f8      	ldr	r0, [r7, #12]
 800c022:	f7ff fb93 	bl	800b74c <USB_WritePacket>
    }
  }

  return HAL_OK;
 800c026:	2300      	movs	r3, #0
}
 800c028:	4618      	mov	r0, r3
 800c02a:	3728      	adds	r7, #40	; 0x28
 800c02c:	46bd      	mov	sp, r7
 800c02e:	bd80      	pop	{r7, pc}
 800c030:	1ff80000 	.word	0x1ff80000
 800c034:	20000134 	.word	0x20000134

0800c038 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c038:	b480      	push	{r7}
 800c03a:	b085      	sub	sp, #20
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c04a:	695b      	ldr	r3, [r3, #20]
 800c04c:	b29b      	uxth	r3, r3
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3714      	adds	r7, #20
 800c052:	46bd      	mov	sp, r7
 800c054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c058:	4770      	bx	lr

0800c05a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c05a:	b480      	push	{r7}
 800c05c:	b087      	sub	sp, #28
 800c05e:	af00      	add	r7, sp, #0
 800c060:	6078      	str	r0, [r7, #4]
 800c062:	460b      	mov	r3, r1
 800c064:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800c06a:	78fb      	ldrb	r3, [r7, #3]
 800c06c:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c06e:	2300      	movs	r3, #0
 800c070:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	015a      	lsls	r2, r3, #5
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	4413      	add	r3, r2
 800c07a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	0c9b      	lsrs	r3, r3, #18
 800c082:	f003 0303 	and.w	r3, r3, #3
 800c086:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c088:	68bb      	ldr	r3, [r7, #8]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d002      	beq.n	800c094 <USB_HC_Halt+0x3a>
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	2b02      	cmp	r3, #2
 800c092:	d16c      	bne.n	800c16e <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	015a      	lsls	r2, r3, #5
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	4413      	add	r3, r2
 800c09c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	68fa      	ldr	r2, [r7, #12]
 800c0a4:	0151      	lsls	r1, r2, #5
 800c0a6:	693a      	ldr	r2, [r7, #16]
 800c0a8:	440a      	add	r2, r1
 800c0aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c0ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c0b2:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d143      	bne.n	800c148 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c0c0:	68fb      	ldr	r3, [r7, #12]
 800c0c2:	015a      	lsls	r2, r3, #5
 800c0c4:	693b      	ldr	r3, [r7, #16]
 800c0c6:	4413      	add	r3, r2
 800c0c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	68fa      	ldr	r2, [r7, #12]
 800c0d0:	0151      	lsls	r1, r2, #5
 800c0d2:	693a      	ldr	r2, [r7, #16]
 800c0d4:	440a      	add	r2, r1
 800c0d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c0da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c0de:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	015a      	lsls	r2, r3, #5
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	4413      	add	r3, r2
 800c0e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	68fa      	ldr	r2, [r7, #12]
 800c0f0:	0151      	lsls	r1, r2, #5
 800c0f2:	693a      	ldr	r2, [r7, #16]
 800c0f4:	440a      	add	r2, r1
 800c0f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c0fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c0fe:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	015a      	lsls	r2, r3, #5
 800c104:	693b      	ldr	r3, [r7, #16]
 800c106:	4413      	add	r3, r2
 800c108:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	68fa      	ldr	r2, [r7, #12]
 800c110:	0151      	lsls	r1, r2, #5
 800c112:	693a      	ldr	r2, [r7, #16]
 800c114:	440a      	add	r2, r1
 800c116:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c11a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c11e:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	3301      	adds	r3, #1
 800c124:	617b      	str	r3, [r7, #20]
 800c126:	697b      	ldr	r3, [r7, #20]
 800c128:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c12c:	d81d      	bhi.n	800c16a <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	015a      	lsls	r2, r3, #5
 800c132:	693b      	ldr	r3, [r7, #16]
 800c134:	4413      	add	r3, r2
 800c136:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c140:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c144:	d0ec      	beq.n	800c120 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c146:	e080      	b.n	800c24a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	015a      	lsls	r2, r3, #5
 800c14c:	693b      	ldr	r3, [r7, #16]
 800c14e:	4413      	add	r3, r2
 800c150:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	68fa      	ldr	r2, [r7, #12]
 800c158:	0151      	lsls	r1, r2, #5
 800c15a:	693a      	ldr	r2, [r7, #16]
 800c15c:	440a      	add	r2, r1
 800c15e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c162:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c166:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c168:	e06f      	b.n	800c24a <USB_HC_Halt+0x1f0>
          break;
 800c16a:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c16c:	e06d      	b.n	800c24a <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	015a      	lsls	r2, r3, #5
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	4413      	add	r3, r2
 800c176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	68fa      	ldr	r2, [r7, #12]
 800c17e:	0151      	lsls	r1, r2, #5
 800c180:	693a      	ldr	r2, [r7, #16]
 800c182:	440a      	add	r2, r1
 800c184:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c188:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c18c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c194:	691b      	ldr	r3, [r3, #16]
 800c196:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d143      	bne.n	800c226 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	015a      	lsls	r2, r3, #5
 800c1a2:	693b      	ldr	r3, [r7, #16]
 800c1a4:	4413      	add	r3, r2
 800c1a6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	68fa      	ldr	r2, [r7, #12]
 800c1ae:	0151      	lsls	r1, r2, #5
 800c1b0:	693a      	ldr	r2, [r7, #16]
 800c1b2:	440a      	add	r2, r1
 800c1b4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c1b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c1bc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	015a      	lsls	r2, r3, #5
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	4413      	add	r3, r2
 800c1c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	68fa      	ldr	r2, [r7, #12]
 800c1ce:	0151      	lsls	r1, r2, #5
 800c1d0:	693a      	ldr	r2, [r7, #16]
 800c1d2:	440a      	add	r2, r1
 800c1d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c1d8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c1dc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	015a      	lsls	r2, r3, #5
 800c1e2:	693b      	ldr	r3, [r7, #16]
 800c1e4:	4413      	add	r3, r2
 800c1e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	68fa      	ldr	r2, [r7, #12]
 800c1ee:	0151      	lsls	r1, r2, #5
 800c1f0:	693a      	ldr	r2, [r7, #16]
 800c1f2:	440a      	add	r2, r1
 800c1f4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c1f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c1fc:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c1fe:	697b      	ldr	r3, [r7, #20]
 800c200:	3301      	adds	r3, #1
 800c202:	617b      	str	r3, [r7, #20]
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c20a:	d81d      	bhi.n	800c248 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c20c:	68fb      	ldr	r3, [r7, #12]
 800c20e:	015a      	lsls	r2, r3, #5
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	4413      	add	r3, r2
 800c214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c21e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c222:	d0ec      	beq.n	800c1fe <USB_HC_Halt+0x1a4>
 800c224:	e011      	b.n	800c24a <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	015a      	lsls	r2, r3, #5
 800c22a:	693b      	ldr	r3, [r7, #16]
 800c22c:	4413      	add	r3, r2
 800c22e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	68fa      	ldr	r2, [r7, #12]
 800c236:	0151      	lsls	r1, r2, #5
 800c238:	693a      	ldr	r2, [r7, #16]
 800c23a:	440a      	add	r2, r1
 800c23c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c240:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c244:	6013      	str	r3, [r2, #0]
 800c246:	e000      	b.n	800c24a <USB_HC_Halt+0x1f0>
          break;
 800c248:	bf00      	nop
    }
  }

  return HAL_OK;
 800c24a:	2300      	movs	r3, #0
}
 800c24c:	4618      	mov	r0, r3
 800c24e:	371c      	adds	r7, #28
 800c250:	46bd      	mov	sp, r7
 800c252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c256:	4770      	bx	lr

0800c258 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c258:	b480      	push	{r7}
 800c25a:	b087      	sub	sp, #28
 800c25c:	af00      	add	r7, sp, #0
 800c25e:	6078      	str	r0, [r7, #4]
 800c260:	460b      	mov	r3, r1
 800c262:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c268:	78fb      	ldrb	r3, [r7, #3]
 800c26a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c26c:	2301      	movs	r3, #1
 800c26e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	04da      	lsls	r2, r3, #19
 800c274:	4b15      	ldr	r3, [pc, #84]	; (800c2cc <USB_DoPing+0x74>)
 800c276:	4013      	ands	r3, r2
 800c278:	693a      	ldr	r2, [r7, #16]
 800c27a:	0151      	lsls	r1, r2, #5
 800c27c:	697a      	ldr	r2, [r7, #20]
 800c27e:	440a      	add	r2, r1
 800c280:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c284:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c288:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c28a:	693b      	ldr	r3, [r7, #16]
 800c28c:	015a      	lsls	r2, r3, #5
 800c28e:	697b      	ldr	r3, [r7, #20]
 800c290:	4413      	add	r3, r2
 800c292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c29a:	68bb      	ldr	r3, [r7, #8]
 800c29c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c2a0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c2a8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	015a      	lsls	r2, r3, #5
 800c2ae:	697b      	ldr	r3, [r7, #20]
 800c2b0:	4413      	add	r3, r2
 800c2b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2b6:	461a      	mov	r2, r3
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c2bc:	2300      	movs	r3, #0
}
 800c2be:	4618      	mov	r0, r3
 800c2c0:	371c      	adds	r7, #28
 800c2c2:	46bd      	mov	sp, r7
 800c2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2c8:	4770      	bx	lr
 800c2ca:	bf00      	nop
 800c2cc:	1ff80000 	.word	0x1ff80000

0800c2d0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b086      	sub	sp, #24
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c2dc:	2300      	movs	r3, #0
 800c2de:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800c2e0:	6878      	ldr	r0, [r7, #4]
 800c2e2:	f7ff f9b0 	bl	800b646 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800c2e6:	2110      	movs	r1, #16
 800c2e8:	6878      	ldr	r0, [r7, #4]
 800c2ea:	f7ff f9e7 	bl	800b6bc <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f7ff fa0a 	bl	800b708 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	613b      	str	r3, [r7, #16]
 800c2f8:	e01f      	b.n	800c33a <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	015a      	lsls	r2, r3, #5
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	4413      	add	r3, r2
 800c302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c310:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c318:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c320:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	015a      	lsls	r2, r3, #5
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	4413      	add	r3, r2
 800c32a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c32e:	461a      	mov	r2, r3
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c334:	693b      	ldr	r3, [r7, #16]
 800c336:	3301      	adds	r3, #1
 800c338:	613b      	str	r3, [r7, #16]
 800c33a:	693b      	ldr	r3, [r7, #16]
 800c33c:	2b0f      	cmp	r3, #15
 800c33e:	d9dc      	bls.n	800c2fa <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c340:	2300      	movs	r3, #0
 800c342:	613b      	str	r3, [r7, #16]
 800c344:	e034      	b.n	800c3b0 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	015a      	lsls	r2, r3, #5
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	4413      	add	r3, r2
 800c34e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c35c:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c364:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c366:	68bb      	ldr	r3, [r7, #8]
 800c368:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c36c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c36e:	693b      	ldr	r3, [r7, #16]
 800c370:	015a      	lsls	r2, r3, #5
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	4413      	add	r3, r2
 800c376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c37a:	461a      	mov	r2, r3
 800c37c:	68bb      	ldr	r3, [r7, #8]
 800c37e:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	3301      	adds	r3, #1
 800c384:	617b      	str	r3, [r7, #20]
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c38c:	d80c      	bhi.n	800c3a8 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c38e:	693b      	ldr	r3, [r7, #16]
 800c390:	015a      	lsls	r2, r3, #5
 800c392:	68fb      	ldr	r3, [r7, #12]
 800c394:	4413      	add	r3, r2
 800c396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c3a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c3a4:	d0ec      	beq.n	800c380 <USB_StopHost+0xb0>
 800c3a6:	e000      	b.n	800c3aa <USB_StopHost+0xda>
        break;
 800c3a8:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	3301      	adds	r3, #1
 800c3ae:	613b      	str	r3, [r7, #16]
 800c3b0:	693b      	ldr	r3, [r7, #16]
 800c3b2:	2b0f      	cmp	r3, #15
 800c3b4:	d9c7      	bls.n	800c346 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c3bc:	461a      	mov	r2, r3
 800c3be:	f04f 33ff 	mov.w	r3, #4294967295
 800c3c2:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	f04f 32ff 	mov.w	r2, #4294967295
 800c3ca:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	f7ff f929 	bl	800b624 <USB_EnableGlobalInt>

  return HAL_OK;
 800c3d2:	2300      	movs	r3, #0
}
 800c3d4:	4618      	mov	r0, r3
 800c3d6:	3718      	adds	r7, #24
 800c3d8:	46bd      	mov	sp, r7
 800c3da:	bd80      	pop	{r7, pc}

0800c3dc <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 800c3dc:	b590      	push	{r4, r7, lr}
 800c3de:	b089      	sub	sp, #36	; 0x24
 800c3e0:	af04      	add	r7, sp, #16
 800c3e2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 800c3e4:	2302      	movs	r3, #2
 800c3e6:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	2202      	movs	r2, #2
 800c3ec:	2102      	movs	r1, #2
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f000 fc8a 	bl	800cd08 <USBH_FindInterface>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 800c3f8:	7bbb      	ldrb	r3, [r7, #14]
 800c3fa:	2bff      	cmp	r3, #255	; 0xff
 800c3fc:	f000 812a 	beq.w	800c654 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800c400:	7bbb      	ldrb	r3, [r7, #14]
 800c402:	4619      	mov	r1, r3
 800c404:	6878      	ldr	r0, [r7, #4]
 800c406:	f000 fc63 	bl	800ccd0 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800c410:	2050      	movs	r0, #80	; 0x50
 800c412:	f016 f949 	bl	80226a8 <malloc>
 800c416:	4603      	mov	r3, r0
 800c418:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c420:	69db      	ldr	r3, [r3, #28]
 800c422:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c424:	7bbb      	ldrb	r3, [r7, #14]
 800c426:	687a      	ldr	r2, [r7, #4]
 800c428:	211a      	movs	r1, #26
 800c42a:	fb01 f303 	mul.w	r3, r1, r3
 800c42e:	4413      	add	r3, r2
 800c430:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800c434:	781b      	ldrb	r3, [r3, #0]
 800c436:	b25b      	sxtb	r3, r3
 800c438:	2b00      	cmp	r3, #0
 800c43a:	da15      	bge.n	800c468 <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c43c:	7bbb      	ldrb	r3, [r7, #14]
 800c43e:	687a      	ldr	r2, [r7, #4]
 800c440:	211a      	movs	r1, #26
 800c442:	fb01 f303 	mul.w	r3, r1, r3
 800c446:	4413      	add	r3, r2
 800c448:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800c44c:	781a      	ldrb	r2, [r3, #0]
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c452:	7bbb      	ldrb	r3, [r7, #14]
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	211a      	movs	r1, #26
 800c458:	fb01 f303 	mul.w	r3, r1, r3
 800c45c:	4413      	add	r3, r2
 800c45e:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800c462:	881a      	ldrh	r2, [r3, #0]
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	785b      	ldrb	r3, [r3, #1]
 800c46c:	4619      	mov	r1, r3
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f001 ff2b 	bl	800e2ca <USBH_AllocPipe>
 800c474:	4603      	mov	r3, r0
 800c476:	461a      	mov	r2, r3
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	7819      	ldrb	r1, [r3, #0]
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	7858      	ldrb	r0, [r3, #1]
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c490:	68ba      	ldr	r2, [r7, #8]
 800c492:	8952      	ldrh	r2, [r2, #10]
 800c494:	9202      	str	r2, [sp, #8]
 800c496:	2203      	movs	r2, #3
 800c498:	9201      	str	r2, [sp, #4]
 800c49a:	9300      	str	r3, [sp, #0]
 800c49c:	4623      	mov	r3, r4
 800c49e:	4602      	mov	r2, r0
 800c4a0:	6878      	ldr	r0, [r7, #4]
 800c4a2:	f001 fee3 	bl	800e26c <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800c4a6:	68bb      	ldr	r3, [r7, #8]
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	2200      	movs	r2, #0
 800c4ac:	4619      	mov	r1, r3
 800c4ae:	6878      	ldr	r0, [r7, #4]
 800c4b0:	f00d fcda 	bl	8019e68 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 800c4b4:	2300      	movs	r3, #0
 800c4b6:	2200      	movs	r2, #0
 800c4b8:	210a      	movs	r1, #10
 800c4ba:	6878      	ldr	r0, [r7, #4]
 800c4bc:	f000 fc24 	bl	800cd08 <USBH_FindInterface>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 800c4c4:	7bbb      	ldrb	r3, [r7, #14]
 800c4c6:	2bff      	cmp	r3, #255	; 0xff
 800c4c8:	f000 80c4 	beq.w	800c654 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c4cc:	7bbb      	ldrb	r3, [r7, #14]
 800c4ce:	687a      	ldr	r2, [r7, #4]
 800c4d0:	211a      	movs	r1, #26
 800c4d2:	fb01 f303 	mul.w	r3, r1, r3
 800c4d6:	4413      	add	r3, r2
 800c4d8:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	b25b      	sxtb	r3, r3
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	da16      	bge.n	800c512 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c4e4:	7bbb      	ldrb	r3, [r7, #14]
 800c4e6:	687a      	ldr	r2, [r7, #4]
 800c4e8:	211a      	movs	r1, #26
 800c4ea:	fb01 f303 	mul.w	r3, r1, r3
 800c4ee:	4413      	add	r3, r2
 800c4f0:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800c4f4:	781a      	ldrb	r2, [r3, #0]
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c4fa:	7bbb      	ldrb	r3, [r7, #14]
 800c4fc:	687a      	ldr	r2, [r7, #4]
 800c4fe:	211a      	movs	r1, #26
 800c500:	fb01 f303 	mul.w	r3, r1, r3
 800c504:	4413      	add	r3, r2
 800c506:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800c50a:	881a      	ldrh	r2, [r3, #0]
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	835a      	strh	r2, [r3, #26]
 800c510:	e015      	b.n	800c53e <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c512:	7bbb      	ldrb	r3, [r7, #14]
 800c514:	687a      	ldr	r2, [r7, #4]
 800c516:	211a      	movs	r1, #26
 800c518:	fb01 f303 	mul.w	r3, r1, r3
 800c51c:	4413      	add	r3, r2
 800c51e:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800c522:	781a      	ldrb	r2, [r3, #0]
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c528:	7bbb      	ldrb	r3, [r7, #14]
 800c52a:	687a      	ldr	r2, [r7, #4]
 800c52c:	211a      	movs	r1, #26
 800c52e:	fb01 f303 	mul.w	r3, r1, r3
 800c532:	4413      	add	r3, r2
 800c534:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800c538:	881a      	ldrh	r2, [r3, #0]
 800c53a:	68bb      	ldr	r3, [r7, #8]
 800c53c:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800c53e:	7bbb      	ldrb	r3, [r7, #14]
 800c540:	687a      	ldr	r2, [r7, #4]
 800c542:	211a      	movs	r1, #26
 800c544:	fb01 f303 	mul.w	r3, r1, r3
 800c548:	4413      	add	r3, r2
 800c54a:	f203 3352 	addw	r3, r3, #850	; 0x352
 800c54e:	781b      	ldrb	r3, [r3, #0]
 800c550:	b25b      	sxtb	r3, r3
 800c552:	2b00      	cmp	r3, #0
 800c554:	da16      	bge.n	800c584 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c556:	7bbb      	ldrb	r3, [r7, #14]
 800c558:	687a      	ldr	r2, [r7, #4]
 800c55a:	211a      	movs	r1, #26
 800c55c:	fb01 f303 	mul.w	r3, r1, r3
 800c560:	4413      	add	r3, r2
 800c562:	f203 3352 	addw	r3, r3, #850	; 0x352
 800c566:	781a      	ldrb	r2, [r3, #0]
 800c568:	68bb      	ldr	r3, [r7, #8]
 800c56a:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c56c:	7bbb      	ldrb	r3, [r7, #14]
 800c56e:	687a      	ldr	r2, [r7, #4]
 800c570:	211a      	movs	r1, #26
 800c572:	fb01 f303 	mul.w	r3, r1, r3
 800c576:	4413      	add	r3, r2
 800c578:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800c57c:	881a      	ldrh	r2, [r3, #0]
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	835a      	strh	r2, [r3, #26]
 800c582:	e015      	b.n	800c5b0 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c584:	7bbb      	ldrb	r3, [r7, #14]
 800c586:	687a      	ldr	r2, [r7, #4]
 800c588:	211a      	movs	r1, #26
 800c58a:	fb01 f303 	mul.w	r3, r1, r3
 800c58e:	4413      	add	r3, r2
 800c590:	f203 3352 	addw	r3, r3, #850	; 0x352
 800c594:	781a      	ldrb	r2, [r3, #0]
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c59a:	7bbb      	ldrb	r3, [r7, #14]
 800c59c:	687a      	ldr	r2, [r7, #4]
 800c59e:	211a      	movs	r1, #26
 800c5a0:	fb01 f303 	mul.w	r3, r1, r3
 800c5a4:	4413      	add	r3, r2
 800c5a6:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800c5aa:	881a      	ldrh	r2, [r3, #0]
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	7b9b      	ldrb	r3, [r3, #14]
 800c5b4:	4619      	mov	r1, r3
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f001 fe87 	bl	800e2ca <USBH_AllocPipe>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	461a      	mov	r2, r3
 800c5c0:	68bb      	ldr	r3, [r7, #8]
 800c5c2:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	7bdb      	ldrb	r3, [r3, #15]
 800c5c8:	4619      	mov	r1, r3
 800c5ca:	6878      	ldr	r0, [r7, #4]
 800c5cc:	f001 fe7d 	bl	800e2ca <USBH_AllocPipe>
 800c5d0:	4603      	mov	r3, r0
 800c5d2:	461a      	mov	r2, r3
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 800c5d8:	68bb      	ldr	r3, [r7, #8]
 800c5da:	7b59      	ldrb	r1, [r3, #13]
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	7b98      	ldrb	r0, [r3, #14]
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c5ec:	68ba      	ldr	r2, [r7, #8]
 800c5ee:	8b12      	ldrh	r2, [r2, #24]
 800c5f0:	9202      	str	r2, [sp, #8]
 800c5f2:	2202      	movs	r2, #2
 800c5f4:	9201      	str	r2, [sp, #4]
 800c5f6:	9300      	str	r3, [sp, #0]
 800c5f8:	4623      	mov	r3, r4
 800c5fa:	4602      	mov	r2, r0
 800c5fc:	6878      	ldr	r0, [r7, #4]
 800c5fe:	f001 fe35 	bl	800e26c <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800c602:	68bb      	ldr	r3, [r7, #8]
 800c604:	7b19      	ldrb	r1, [r3, #12]
 800c606:	68bb      	ldr	r3, [r7, #8]
 800c608:	7bd8      	ldrb	r0, [r3, #15]
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c616:	68ba      	ldr	r2, [r7, #8]
 800c618:	8b52      	ldrh	r2, [r2, #26]
 800c61a:	9202      	str	r2, [sp, #8]
 800c61c:	2202      	movs	r2, #2
 800c61e:	9201      	str	r2, [sp, #4]
 800c620:	9300      	str	r3, [sp, #0]
 800c622:	4623      	mov	r3, r4
 800c624:	4602      	mov	r2, r0
 800c626:	6878      	ldr	r0, [r7, #4]
 800c628:	f001 fe20 	bl	800e26c <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	2200      	movs	r2, #0
 800c630:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800c634:	68bb      	ldr	r3, [r7, #8]
 800c636:	7b5b      	ldrb	r3, [r3, #13]
 800c638:	2200      	movs	r2, #0
 800c63a:	4619      	mov	r1, r3
 800c63c:	6878      	ldr	r0, [r7, #4]
 800c63e:	f00d fc13 	bl	8019e68 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	7b1b      	ldrb	r3, [r3, #12]
 800c646:	2200      	movs	r2, #0
 800c648:	4619      	mov	r1, r3
 800c64a:	6878      	ldr	r0, [r7, #4]
 800c64c:	f00d fc0c 	bl	8019e68 <USBH_LL_SetToggle>
      status = USBH_OK;
 800c650:	2300      	movs	r3, #0
 800c652:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800c654:	7bfb      	ldrb	r3, [r7, #15]
}
 800c656:	4618      	mov	r0, r3
 800c658:	3714      	adds	r7, #20
 800c65a:	46bd      	mov	sp, r7
 800c65c:	bd90      	pop	{r4, r7, pc}

0800c65e <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800c65e:	b580      	push	{r7, lr}
 800c660:	b084      	sub	sp, #16
 800c662:	af00      	add	r7, sp, #0
 800c664:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c66c:	69db      	ldr	r3, [r3, #28]
 800c66e:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	781b      	ldrb	r3, [r3, #0]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d00e      	beq.n	800c696 <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	4619      	mov	r1, r3
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f001 fe13 	bl	800e2aa <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	781b      	ldrb	r3, [r3, #0]
 800c688:	4619      	mov	r1, r3
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f001 fe3b 	bl	800e306 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2200      	movs	r2, #0
 800c694:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 800c696:	68fb      	ldr	r3, [r7, #12]
 800c698:	7b1b      	ldrb	r3, [r3, #12]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d00e      	beq.n	800c6bc <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800c69e:	68fb      	ldr	r3, [r7, #12]
 800c6a0:	7b1b      	ldrb	r3, [r3, #12]
 800c6a2:	4619      	mov	r1, r3
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f001 fe00 	bl	800e2aa <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800c6aa:	68fb      	ldr	r3, [r7, #12]
 800c6ac:	7b1b      	ldrb	r3, [r3, #12]
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f001 fe28 	bl	800e306 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	7b5b      	ldrb	r3, [r3, #13]
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d00e      	beq.n	800c6e2 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	7b5b      	ldrb	r3, [r3, #13]
 800c6c8:	4619      	mov	r1, r3
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f001 fded 	bl	800e2aa <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	7b5b      	ldrb	r3, [r3, #13]
 800c6d4:	4619      	mov	r1, r3
 800c6d6:	6878      	ldr	r0, [r7, #4]
 800c6d8:	f001 fe15 	bl	800e306 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800c6dc:	68fb      	ldr	r3, [r7, #12]
 800c6de:	2200      	movs	r2, #0
 800c6e0:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c6e8:	69db      	ldr	r3, [r3, #28]
 800c6ea:	2b00      	cmp	r3, #0
 800c6ec:	d00b      	beq.n	800c706 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c6f4:	69db      	ldr	r3, [r3, #28]
 800c6f6:	4618      	mov	r0, r3
 800c6f8:	f015 ffde 	bl	80226b8 <free>
    phost->pActiveClass->pData = 0U;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c702:	2200      	movs	r2, #0
 800c704:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c706:	2300      	movs	r3, #0
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3710      	adds	r7, #16
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800c718:	2302      	movs	r3, #2
 800c71a:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c722:	69db      	ldr	r3, [r3, #28]
 800c724:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800c726:	68bb      	ldr	r3, [r7, #8]
 800c728:	3340      	adds	r3, #64	; 0x40
 800c72a:	4619      	mov	r1, r3
 800c72c:	6878      	ldr	r0, [r7, #4]
 800c72e:	f000 f8b2 	bl	800c896 <GetLineCoding>
 800c732:	4603      	mov	r3, r0
 800c734:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800c736:	7bfb      	ldrb	r3, [r7, #15]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d105      	bne.n	800c748 <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c742:	2102      	movs	r1, #2
 800c744:	6878      	ldr	r0, [r7, #4]
 800c746:	4798      	blx	r3
  }
  return status;
 800c748:	7bfb      	ldrb	r3, [r7, #15]
}
 800c74a:	4618      	mov	r0, r3
 800c74c:	3710      	adds	r7, #16
 800c74e:	46bd      	mov	sp, r7
 800c750:	bd80      	pop	{r7, pc}
	...

0800c754 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b084      	sub	sp, #16
 800c758:	af00      	add	r7, sp, #0
 800c75a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c75c:	2301      	movs	r3, #1
 800c75e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800c760:	2300      	movs	r3, #0
 800c762:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c76a:	69db      	ldr	r3, [r3, #28]
 800c76c:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c774:	2b04      	cmp	r3, #4
 800c776:	d877      	bhi.n	800c868 <USBH_CDC_Process+0x114>
 800c778:	a201      	add	r2, pc, #4	; (adr r2, 800c780 <USBH_CDC_Process+0x2c>)
 800c77a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c77e:	bf00      	nop
 800c780:	0800c795 	.word	0x0800c795
 800c784:	0800c79b 	.word	0x0800c79b
 800c788:	0800c7cb 	.word	0x0800c7cb
 800c78c:	0800c83f 	.word	0x0800c83f
 800c790:	0800c84d 	.word	0x0800c84d
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 800c794:	2300      	movs	r3, #0
 800c796:	73fb      	strb	r3, [r7, #15]
    break;
 800c798:	e06d      	b.n	800c876 <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800c79a:	68bb      	ldr	r3, [r7, #8]
 800c79c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c79e:	4619      	mov	r1, r3
 800c7a0:	6878      	ldr	r0, [r7, #4]
 800c7a2:	f000 f897 	bl	800c8d4 <SetLineCoding>
 800c7a6:	4603      	mov	r3, r0
 800c7a8:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800c7aa:	7bbb      	ldrb	r3, [r7, #14]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d104      	bne.n	800c7ba <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	2202      	movs	r2, #2
 800c7b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800c7b8:	e058      	b.n	800c86c <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800c7ba:	7bbb      	ldrb	r3, [r7, #14]
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	d055      	beq.n	800c86c <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	2204      	movs	r2, #4
 800c7c4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800c7c8:	e050      	b.n	800c86c <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	3340      	adds	r3, #64	; 0x40
 800c7ce:	4619      	mov	r1, r3
 800c7d0:	6878      	ldr	r0, [r7, #4]
 800c7d2:	f000 f860 	bl	800c896 <GetLineCoding>
 800c7d6:	4603      	mov	r3, r0
 800c7d8:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800c7da:	7bbb      	ldrb	r3, [r7, #14]
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d126      	bne.n	800c82e <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 800c7e0:	68bb      	ldr	r3, [r7, #8]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c7ee:	68bb      	ldr	r3, [r7, #8]
 800c7f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7f2:	791b      	ldrb	r3, [r3, #4]
 800c7f4:	429a      	cmp	r2, r3
 800c7f6:	d13b      	bne.n	800c870 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c7f8:	68bb      	ldr	r3, [r7, #8]
 800c7fa:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c802:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c804:	429a      	cmp	r2, r3
 800c806:	d133      	bne.n	800c870 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c808:	68bb      	ldr	r3, [r7, #8]
 800c80a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c812:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c814:	429a      	cmp	r2, r3
 800c816:	d12b      	bne.n	800c870 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c81c:	68bb      	ldr	r3, [r7, #8]
 800c81e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c820:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c822:	429a      	cmp	r2, r3
 800c824:	d124      	bne.n	800c870 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800c826:	6878      	ldr	r0, [r7, #4]
 800c828:	f000 f982 	bl	800cb30 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800c82c:	e020      	b.n	800c870 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 800c82e:	7bbb      	ldrb	r3, [r7, #14]
 800c830:	2b01      	cmp	r3, #1
 800c832:	d01d      	beq.n	800c870 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 800c834:	68bb      	ldr	r3, [r7, #8]
 800c836:	2204      	movs	r2, #4
 800c838:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800c83c:	e018      	b.n	800c870 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800c83e:	6878      	ldr	r0, [r7, #4]
 800c840:	f000 f867 	bl	800c912 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f000 f8f6 	bl	800ca36 <CDC_ProcessReception>
    break;
 800c84a:	e014      	b.n	800c876 <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 800c84c:	2100      	movs	r1, #0
 800c84e:	6878      	ldr	r0, [r7, #4]
 800c850:	f000 fff8 	bl	800d844 <USBH_ClrFeature>
 800c854:	4603      	mov	r3, r0
 800c856:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 800c858:	7bbb      	ldrb	r3, [r7, #14]
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d10a      	bne.n	800c874 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	2200      	movs	r2, #0
 800c862:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800c866:	e005      	b.n	800c874 <USBH_CDC_Process+0x120>

  default:
    break;
 800c868:	bf00      	nop
 800c86a:	e004      	b.n	800c876 <USBH_CDC_Process+0x122>
    break;
 800c86c:	bf00      	nop
 800c86e:	e002      	b.n	800c876 <USBH_CDC_Process+0x122>
    break;
 800c870:	bf00      	nop
 800c872:	e000      	b.n	800c876 <USBH_CDC_Process+0x122>
    break;
 800c874:	bf00      	nop

  }

  return status;
 800c876:	7bfb      	ldrb	r3, [r7, #15]
}
 800c878:	4618      	mov	r0, r3
 800c87a:	3710      	adds	r7, #16
 800c87c:	46bd      	mov	sp, r7
 800c87e:	bd80      	pop	{r7, pc}

0800c880 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 800c880:	b480      	push	{r7}
 800c882:	b083      	sub	sp, #12
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 800c888:	2300      	movs	r3, #0
}
 800c88a:	4618      	mov	r0, r3
 800c88c:	370c      	adds	r7, #12
 800c88e:	46bd      	mov	sp, r7
 800c890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c894:	4770      	bx	lr

0800c896 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c896:	b580      	push	{r7, lr}
 800c898:	b082      	sub	sp, #8
 800c89a:	af00      	add	r7, sp, #0
 800c89c:	6078      	str	r0, [r7, #4]
 800c89e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	22a1      	movs	r2, #161	; 0xa1
 800c8a4:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	2221      	movs	r2, #33	; 0x21
 800c8aa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	2200      	movs	r2, #0
 800c8b0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2200      	movs	r2, #0
 800c8b6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	2207      	movs	r2, #7
 800c8bc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c8be:	683b      	ldr	r3, [r7, #0]
 800c8c0:	2207      	movs	r2, #7
 800c8c2:	4619      	mov	r1, r3
 800c8c4:	6878      	ldr	r0, [r7, #4]
 800c8c6:	f001 f99d 	bl	800dc04 <USBH_CtlReq>
 800c8ca:	4603      	mov	r3, r0
}
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	3708      	adds	r7, #8
 800c8d0:	46bd      	mov	sp, r7
 800c8d2:	bd80      	pop	{r7, pc}

0800c8d4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800c8d4:	b580      	push	{r7, lr}
 800c8d6:	b082      	sub	sp, #8
 800c8d8:	af00      	add	r7, sp, #0
 800c8da:	6078      	str	r0, [r7, #4]
 800c8dc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	2221      	movs	r2, #33	; 0x21
 800c8e2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	2220      	movs	r2, #32
 800c8e8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2207      	movs	r2, #7
 800c8fa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c8fc:	683b      	ldr	r3, [r7, #0]
 800c8fe:	2207      	movs	r2, #7
 800c900:	4619      	mov	r1, r3
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f001 f97e 	bl	800dc04 <USBH_CtlReq>
 800c908:	4603      	mov	r3, r0
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	3708      	adds	r7, #8
 800c90e:	46bd      	mov	sp, r7
 800c910:	bd80      	pop	{r7, pc}

0800c912 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800c912:	b580      	push	{r7, lr}
 800c914:	b086      	sub	sp, #24
 800c916:	af02      	add	r7, sp, #8
 800c918:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c920:	69db      	ldr	r3, [r3, #28]
 800c922:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c924:	2300      	movs	r3, #0
 800c926:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800c92e:	2b01      	cmp	r3, #1
 800c930:	d002      	beq.n	800c938 <CDC_ProcessTransmission+0x26>
 800c932:	2b02      	cmp	r3, #2
 800c934:	d023      	beq.n	800c97e <CDC_ProcessTransmission+0x6c>
      }
    }
    break;

  default:
    break;
 800c936:	e07a      	b.n	800ca2e <CDC_ProcessTransmission+0x11c>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c93c:	68fa      	ldr	r2, [r7, #12]
 800c93e:	8b12      	ldrh	r2, [r2, #24]
 800c940:	4293      	cmp	r3, r2
 800c942:	d90b      	bls.n	800c95c <CDC_ProcessTransmission+0x4a>
      USBH_BulkSendData (phost,
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	69d9      	ldr	r1, [r3, #28]
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	8b1a      	ldrh	r2, [r3, #24]
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	7b5b      	ldrb	r3, [r3, #13]
 800c950:	2001      	movs	r0, #1
 800c952:	9000      	str	r0, [sp, #0]
 800c954:	6878      	ldr	r0, [r7, #4]
 800c956:	f001 fc46 	bl	800e1e6 <USBH_BulkSendData>
 800c95a:	e00b      	b.n	800c974 <CDC_ProcessTransmission+0x62>
      USBH_BulkSendData (phost,
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800c964:	b29a      	uxth	r2, r3
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	7b5b      	ldrb	r3, [r3, #13]
 800c96a:	2001      	movs	r0, #1
 800c96c:	9000      	str	r0, [sp, #0]
 800c96e:	6878      	ldr	r0, [r7, #4]
 800c970:	f001 fc39 	bl	800e1e6 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	2202      	movs	r2, #2
 800c978:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800c97c:	e057      	b.n	800ca2e <CDC_ProcessTransmission+0x11c>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	7b5b      	ldrb	r3, [r3, #13]
 800c982:	4619      	mov	r1, r3
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f00d fa45 	bl	8019e14 <USBH_LL_GetURBState>
 800c98a:	4603      	mov	r3, r0
 800c98c:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800c98e:	7afb      	ldrb	r3, [r7, #11]
 800c990:	2b01      	cmp	r3, #1
 800c992:	d136      	bne.n	800ca02 <CDC_ProcessTransmission+0xf0>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c998:	68fa      	ldr	r2, [r7, #12]
 800c99a:	8b12      	ldrh	r2, [r2, #24]
 800c99c:	4293      	cmp	r3, r2
 800c99e:	d90e      	bls.n	800c9be <CDC_ProcessTransmission+0xac>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9a4:	68fa      	ldr	r2, [r7, #12]
 800c9a6:	8b12      	ldrh	r2, [r2, #24]
 800c9a8:	1a9a      	subs	r2, r3, r2
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c9ae:	68fb      	ldr	r3, [r7, #12]
 800c9b0:	69db      	ldr	r3, [r3, #28]
 800c9b2:	68fa      	ldr	r2, [r7, #12]
 800c9b4:	8b12      	ldrh	r2, [r2, #24]
 800c9b6:	441a      	add	r2, r3
 800c9b8:	68fb      	ldr	r3, [r7, #12]
 800c9ba:	61da      	str	r2, [r3, #28]
 800c9bc:	e002      	b.n	800c9c4 <CDC_ProcessTransmission+0xb2>
        CDC_Handle->TxDataLength = 0U;
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d004      	beq.n	800c9d6 <CDC_ProcessTransmission+0xc4>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	2201      	movs	r2, #1
 800c9d0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800c9d4:	e006      	b.n	800c9e4 <CDC_ProcessTransmission+0xd2>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	2200      	movs	r2, #0
 800c9da:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f000 f892 	bl	800cb08 <USBH_CDC_TransmitCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2204      	movs	r2, #4
 800c9e8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	4619      	mov	r1, r3
 800c9fc:	f004 fd54 	bl	80114a8 <osMessagePut>
    break;
 800ca00:	e014      	b.n	800ca2c <CDC_ProcessTransmission+0x11a>
      if (URB_Status == USBH_URB_NOTREADY)
 800ca02:	7afb      	ldrb	r3, [r7, #11]
 800ca04:	2b02      	cmp	r3, #2
 800ca06:	d111      	bne.n	800ca2c <CDC_ProcessTransmission+0x11a>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	2201      	movs	r2, #1
 800ca0c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	2204      	movs	r2, #4
 800ca14:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ca18:	687b      	ldr	r3, [r7, #4]
 800ca1a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ca24:	2200      	movs	r2, #0
 800ca26:	4619      	mov	r1, r3
 800ca28:	f004 fd3e 	bl	80114a8 <osMessagePut>
    break;
 800ca2c:	bf00      	nop
  }
}
 800ca2e:	bf00      	nop
 800ca30:	3710      	adds	r7, #16
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd80      	pop	{r7, pc}

0800ca36 <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800ca36:	b580      	push	{r7, lr}
 800ca38:	b086      	sub	sp, #24
 800ca3a:	af00      	add	r7, sp, #0
 800ca3c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800ca44:	69db      	ldr	r3, [r3, #28]
 800ca46:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 800ca4c:	697b      	ldr	r3, [r7, #20]
 800ca4e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ca52:	2b03      	cmp	r3, #3
 800ca54:	d002      	beq.n	800ca5c <CDC_ProcessReception+0x26>
 800ca56:	2b04      	cmp	r3, #4
 800ca58:	d00e      	beq.n	800ca78 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 800ca5a:	e051      	b.n	800cb00 <CDC_ProcessReception+0xca>
    USBH_BulkReceiveData (phost,
 800ca5c:	697b      	ldr	r3, [r7, #20]
 800ca5e:	6a19      	ldr	r1, [r3, #32]
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	8b5a      	ldrh	r2, [r3, #26]
 800ca64:	697b      	ldr	r3, [r7, #20]
 800ca66:	7b1b      	ldrb	r3, [r3, #12]
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f001 fbe1 	bl	800e230 <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800ca6e:	697b      	ldr	r3, [r7, #20]
 800ca70:	2204      	movs	r2, #4
 800ca72:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800ca76:	e043      	b.n	800cb00 <CDC_ProcessReception+0xca>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800ca78:	697b      	ldr	r3, [r7, #20]
 800ca7a:	7b1b      	ldrb	r3, [r3, #12]
 800ca7c:	4619      	mov	r1, r3
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f00d f9c8 	bl	8019e14 <USBH_LL_GetURBState>
 800ca84:	4603      	mov	r3, r0
 800ca86:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 800ca88:	7cfb      	ldrb	r3, [r7, #19]
 800ca8a:	2b01      	cmp	r3, #1
 800ca8c:	d137      	bne.n	800cafe <CDC_ProcessReception+0xc8>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800ca8e:	697b      	ldr	r3, [r7, #20]
 800ca90:	7b1b      	ldrb	r3, [r3, #12]
 800ca92:	4619      	mov	r1, r3
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f00d f92b 	bl	8019cf0 <USBH_LL_GetLastXferSize>
 800ca9a:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800caa0:	68fa      	ldr	r2, [r7, #12]
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d016      	beq.n	800cad4 <CDC_ProcessReception+0x9e>
 800caa6:	697b      	ldr	r3, [r7, #20]
 800caa8:	8b5b      	ldrh	r3, [r3, #26]
 800caaa:	461a      	mov	r2, r3
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	4293      	cmp	r3, r2
 800cab0:	d910      	bls.n	800cad4 <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800cab2:	697b      	ldr	r3, [r7, #20]
 800cab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	1ad2      	subs	r2, r2, r3
 800caba:	697b      	ldr	r3, [r7, #20]
 800cabc:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	6a1a      	ldr	r2, [r3, #32]
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	441a      	add	r2, r3
 800cac6:	697b      	ldr	r3, [r7, #20]
 800cac8:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800caca:	697b      	ldr	r3, [r7, #20]
 800cacc:	2203      	movs	r2, #3
 800cace:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800cad2:	e006      	b.n	800cae2 <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	2200      	movs	r2, #0
 800cad8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f000 f81d 	bl	800cb1c <USBH_CDC_ReceiveCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800cae2:	687b      	ldr	r3, [r7, #4]
 800cae4:	2204      	movs	r2, #4
 800cae6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800caea:	687b      	ldr	r3, [r7, #4]
 800caec:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800caf0:	687b      	ldr	r3, [r7, #4]
 800caf2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800caf6:	2200      	movs	r2, #0
 800caf8:	4619      	mov	r1, r3
 800cafa:	f004 fcd5 	bl	80114a8 <osMessagePut>
    break;
 800cafe:	bf00      	nop
  }
}
 800cb00:	bf00      	nop
 800cb02:	3718      	adds	r7, #24
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}

0800cb08 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b083      	sub	sp, #12
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]

}
 800cb10:	bf00      	nop
 800cb12:	370c      	adds	r7, #12
 800cb14:	46bd      	mov	sp, r7
 800cb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb1a:	4770      	bx	lr

0800cb1c <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b083      	sub	sp, #12
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]

}
 800cb24:	bf00      	nop
 800cb26:	370c      	adds	r7, #12
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2e:	4770      	bx	lr

0800cb30 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800cb30:	b480      	push	{r7}
 800cb32:	b083      	sub	sp, #12
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]

}
 800cb38:	bf00      	nop
 800cb3a:	370c      	adds	r7, #12
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb42:	4770      	bx	lr

0800cb44 <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 800cb44:	b5b0      	push	{r4, r5, r7, lr}
 800cb46:	b08c      	sub	sp, #48	; 0x30
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	60f8      	str	r0, [r7, #12]
 800cb4c:	60b9      	str	r1, [r7, #8]
 800cb4e:	4613      	mov	r3, r2
 800cb50:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d101      	bne.n	800cb5c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800cb58:	2302      	movs	r3, #2
 800cb5a:	e03c      	b.n	800cbd6 <USBH_Init+0x92>
  }

  /* Set DRiver ID */
  phost->id = id;
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	79fa      	ldrb	r2, [r7, #7]
 800cb60:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2200      	movs	r2, #0
 800cb68:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800cb74:	68f8      	ldr	r0, [r7, #12]
 800cb76:	f000 f837 	bl	800cbe8 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d003      	beq.n	800cb88 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	68ba      	ldr	r2, [r7, #8]
 800cb84:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800cb88:	4a15      	ldr	r2, [pc, #84]	; (800cbe0 <USBH_Init+0x9c>)
 800cb8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cb8e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cb92:	e883 0003 	stmia.w	r3, {r0, r1}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 800cb96:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cb9a:	2100      	movs	r1, #0
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	f004 fc71 	bl	8011484 <osMessageCreate>
 800cba2:	4602      	mov	r2, r0
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800cbaa:	4b0e      	ldr	r3, [pc, #56]	; (800cbe4 <USBH_Init+0xa0>)
 800cbac:	f107 0414 	add.w	r4, r7, #20
 800cbb0:	461d      	mov	r5, r3
 800cbb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cbb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cbb6:	682b      	ldr	r3, [r5, #0]
 800cbb8:	6023      	str	r3, [r4, #0]
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800cbba:	f107 0314 	add.w	r3, r7, #20
 800cbbe:	68f9      	ldr	r1, [r7, #12]
 800cbc0:	4618      	mov	r0, r3
 800cbc2:	f004 fb7b 	bl	80112bc <osThreadCreate>
 800cbc6:	4602      	mov	r2, r0
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800cbce:	68f8      	ldr	r0, [r7, #12]
 800cbd0:	f00c ffda 	bl	8019b88 <USBH_LL_Init>

  return USBH_OK;
 800cbd4:	2300      	movs	r3, #0
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3730      	adds	r7, #48	; 0x30
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bdb0      	pop	{r4, r5, r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	080236e8 	.word	0x080236e8
 800cbe4:	080236f0 	.word	0x080236f0

0800cbe8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800cbe8:	b480      	push	{r7}
 800cbea:	b085      	sub	sp, #20
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800cbf4:	e008      	b.n	800cc08 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	68fa      	ldr	r2, [r7, #12]
 800cbfa:	32e0      	adds	r2, #224	; 0xe0
 800cbfc:	2100      	movs	r1, #0
 800cbfe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800cc02:	68fb      	ldr	r3, [r7, #12]
 800cc04:	3301      	adds	r3, #1
 800cc06:	60fb      	str	r3, [r7, #12]
 800cc08:	68fb      	ldr	r3, [r7, #12]
 800cc0a:	2b0e      	cmp	r3, #14
 800cc0c:	d9f3      	bls.n	800cbf6 <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800cc0e:	2300      	movs	r3, #0
 800cc10:	60fb      	str	r3, [r7, #12]
 800cc12:	e009      	b.n	800cc28 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 800cc14:	687a      	ldr	r2, [r7, #4]
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	4413      	add	r3, r2
 800cc1a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cc1e:	2200      	movs	r2, #0
 800cc20:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	3301      	adds	r3, #1
 800cc26:	60fb      	str	r3, [r7, #12]
 800cc28:	68fb      	ldr	r3, [r7, #12]
 800cc2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc2e:	d3f1      	bcc.n	800cc14 <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2200      	movs	r2, #0
 800cc34:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	2200      	movs	r2, #0
 800cc3a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2201      	movs	r2, #1
 800cc40:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2200      	movs	r2, #0
 800cc46:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	2201      	movs	r2, #1
 800cc4e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	2240      	movs	r2, #64	; 0x40
 800cc54:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	2200      	movs	r2, #0
 800cc5a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2200      	movs	r2, #0
 800cc60:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	2201      	movs	r2, #1
 800cc68:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800cc6c:	2300      	movs	r3, #0
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3714      	adds	r7, #20
 800cc72:	46bd      	mov	sp, r7
 800cc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc78:	4770      	bx	lr

0800cc7a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800cc7a:	b480      	push	{r7}
 800cc7c:	b085      	sub	sp, #20
 800cc7e:	af00      	add	r7, sp, #0
 800cc80:	6078      	str	r0, [r7, #4]
 800cc82:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 800cc84:	2300      	movs	r3, #0
 800cc86:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d017      	beq.n	800ccbe <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d10f      	bne.n	800ccb8 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc9e:	1c59      	adds	r1, r3, #1
 800cca0:	687a      	ldr	r2, [r7, #4]
 800cca2:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800cca6:	687a      	ldr	r2, [r7, #4]
 800cca8:	33dc      	adds	r3, #220	; 0xdc
 800ccaa:	009b      	lsls	r3, r3, #2
 800ccac:	4413      	add	r3, r2
 800ccae:	683a      	ldr	r2, [r7, #0]
 800ccb0:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	73fb      	strb	r3, [r7, #15]
 800ccb6:	e004      	b.n	800ccc2 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800ccb8:	2302      	movs	r3, #2
 800ccba:	73fb      	strb	r3, [r7, #15]
 800ccbc:	e001      	b.n	800ccc2 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800ccbe:	2302      	movs	r3, #2
 800ccc0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800ccc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3714      	adds	r7, #20
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccce:	4770      	bx	lr

0800ccd0 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800ccd0:	b480      	push	{r7}
 800ccd2:	b085      	sub	sp, #20
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
 800ccd8:	460b      	mov	r3, r1
 800ccda:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 800cce6:	78fa      	ldrb	r2, [r7, #3]
 800cce8:	429a      	cmp	r2, r3
 800ccea:	d204      	bcs.n	800ccf6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	78fa      	ldrb	r2, [r7, #3]
 800ccf0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 800ccf4:	e001      	b.n	800ccfa <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ccf6:	2302      	movs	r3, #2
 800ccf8:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800ccfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	3714      	adds	r7, #20
 800cd00:	46bd      	mov	sp, r7
 800cd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd06:	4770      	bx	lr

0800cd08 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800cd08:	b480      	push	{r7}
 800cd0a:	b087      	sub	sp, #28
 800cd0c:	af00      	add	r7, sp, #0
 800cd0e:	6078      	str	r0, [r7, #4]
 800cd10:	4608      	mov	r0, r1
 800cd12:	4611      	mov	r1, r2
 800cd14:	461a      	mov	r2, r3
 800cd16:	4603      	mov	r3, r0
 800cd18:	70fb      	strb	r3, [r7, #3]
 800cd1a:	460b      	mov	r3, r1
 800cd1c:	70bb      	strb	r3, [r7, #2]
 800cd1e:	4613      	mov	r3, r2
 800cd20:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800cd22:	2300      	movs	r3, #0
 800cd24:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800cd26:	2300      	movs	r3, #0
 800cd28:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800cd30:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cd32:	e025      	b.n	800cd80 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800cd34:	7dfb      	ldrb	r3, [r7, #23]
 800cd36:	221a      	movs	r2, #26
 800cd38:	fb02 f303 	mul.w	r3, r2, r3
 800cd3c:	3308      	adds	r3, #8
 800cd3e:	68fa      	ldr	r2, [r7, #12]
 800cd40:	4413      	add	r3, r2
 800cd42:	3302      	adds	r3, #2
 800cd44:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	795b      	ldrb	r3, [r3, #5]
 800cd4a:	78fa      	ldrb	r2, [r7, #3]
 800cd4c:	429a      	cmp	r2, r3
 800cd4e:	d002      	beq.n	800cd56 <USBH_FindInterface+0x4e>
 800cd50:	78fb      	ldrb	r3, [r7, #3]
 800cd52:	2bff      	cmp	r3, #255	; 0xff
 800cd54:	d111      	bne.n	800cd7a <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800cd56:	693b      	ldr	r3, [r7, #16]
 800cd58:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800cd5a:	78ba      	ldrb	r2, [r7, #2]
 800cd5c:	429a      	cmp	r2, r3
 800cd5e:	d002      	beq.n	800cd66 <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800cd60:	78bb      	ldrb	r3, [r7, #2]
 800cd62:	2bff      	cmp	r3, #255	; 0xff
 800cd64:	d109      	bne.n	800cd7a <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800cd6a:	787a      	ldrb	r2, [r7, #1]
 800cd6c:	429a      	cmp	r2, r3
 800cd6e:	d002      	beq.n	800cd76 <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cd70:	787b      	ldrb	r3, [r7, #1]
 800cd72:	2bff      	cmp	r3, #255	; 0xff
 800cd74:	d101      	bne.n	800cd7a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800cd76:	7dfb      	ldrb	r3, [r7, #23]
 800cd78:	e006      	b.n	800cd88 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800cd7a:	7dfb      	ldrb	r3, [r7, #23]
 800cd7c:	3301      	adds	r3, #1
 800cd7e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cd80:	7dfb      	ldrb	r3, [r7, #23]
 800cd82:	2b01      	cmp	r3, #1
 800cd84:	d9d6      	bls.n	800cd34 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800cd86:	23ff      	movs	r3, #255	; 0xff
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	371c      	adds	r7, #28
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd92:	4770      	bx	lr

0800cd94 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b082      	sub	sp, #8
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800cd9c:	6878      	ldr	r0, [r7, #4]
 800cd9e:	f00c ff2f 	bl	8019c00 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800cda2:	2101      	movs	r1, #1
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f00d f848 	bl	8019e3a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800cdaa:	2300      	movs	r3, #0
}
 800cdac:	4618      	mov	r0, r3
 800cdae:	3708      	adds	r7, #8
 800cdb0:	46bd      	mov	sp, r7
 800cdb2:	bd80      	pop	{r7, pc}

0800cdb4 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800cdb4:	b580      	push	{r7, lr}
 800cdb6:	b088      	sub	sp, #32
 800cdb8:	af04      	add	r7, sp, #16
 800cdba:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800cdbc:	2302      	movs	r3, #2
 800cdbe:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f000 fb7e 	bl	800d4c6 <USBH_IsPortEnabled>
 800cdca:	4603      	mov	r3, r0
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d10c      	bne.n	800cdea <USBH_Process+0x36>
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	781b      	ldrb	r3, [r3, #0]
 800cdd4:	b2db      	uxtb	r3, r3
 800cdd6:	2b00      	cmp	r3, #0
 800cdd8:	d007      	beq.n	800cdea <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	781b      	ldrb	r3, [r3, #0]
 800cdde:	b2db      	uxtb	r3, r3
 800cde0:	2b03      	cmp	r3, #3
 800cde2:	d002      	beq.n	800cdea <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2203      	movs	r2, #3
 800cde8:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	781b      	ldrb	r3, [r3, #0]
 800cdee:	b2db      	uxtb	r3, r3
 800cdf0:	2b0b      	cmp	r3, #11
 800cdf2:	f200 81ab 	bhi.w	800d14c <USBH_Process+0x398>
 800cdf6:	a201      	add	r2, pc, #4	; (adr r2, 800cdfc <USBH_Process+0x48>)
 800cdf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdfc:	0800ce2d 	.word	0x0800ce2d
 800ce00:	0800ce6b 	.word	0x0800ce6b
 800ce04:	0800ce7f 	.word	0x0800ce7f
 800ce08:	0800d127 	.word	0x0800d127
 800ce0c:	0800d14d 	.word	0x0800d14d
 800ce10:	0800cf29 	.word	0x0800cf29
 800ce14:	0800d0c1 	.word	0x0800d0c1
 800ce18:	0800cf59 	.word	0x0800cf59
 800ce1c:	0800cf95 	.word	0x0800cf95
 800ce20:	0800cfcf 	.word	0x0800cfcf
 800ce24:	0800d017 	.word	0x0800d017
 800ce28:	0800d10f 	.word	0x0800d10f
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ce32:	b2db      	uxtb	r3, r3
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	f000 818b 	beq.w	800d150 <USBH_Process+0x39c>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2201      	movs	r2, #1
 800ce3e:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 800ce40:	20c8      	movs	r0, #200	; 0xc8
 800ce42:	f00d f844 	bl	8019ece <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800ce46:	6878      	ldr	r0, [r7, #4]
 800ce48:	f00c ff37 	bl	8019cba <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2201      	movs	r2, #1
 800ce50:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ce60:	2200      	movs	r2, #0
 800ce62:	4619      	mov	r1, r3
 800ce64:	f004 fb20 	bl	80114a8 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800ce68:	e172      	b.n	800d150 <USBH_Process+0x39c>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	f040 816f 	bne.w	800d154 <USBH_Process+0x3a0>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2202      	movs	r2, #2
 800ce7a:	701a      	strb	r2, [r3, #0]
    }
    break;
 800ce7c:	e16a      	b.n	800d154 <USBH_Process+0x3a0>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800ce7e:	2064      	movs	r0, #100	; 0x64
 800ce80:	f00d f825 	bl	8019ece <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f00c fef1 	bl	8019c6c <USBH_LL_GetSpeed>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	461a      	mov	r2, r3
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2205      	movs	r2, #5
 800ce98:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800ce9a:	2100      	movs	r1, #0
 800ce9c:	6878      	ldr	r0, [r7, #4]
 800ce9e:	f001 fa14 	bl	800e2ca <USBH_AllocPipe>
 800cea2:	4603      	mov	r3, r0
 800cea4:	461a      	mov	r2, r3
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800ceaa:	2180      	movs	r1, #128	; 0x80
 800ceac:	6878      	ldr	r0, [r7, #4]
 800ceae:	f001 fa0c 	bl	800e2ca <USBH_AllocPipe>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	461a      	mov	r2, r3
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	7919      	ldrb	r1, [r3, #4]
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800ceca:	687a      	ldr	r2, [r7, #4]
 800cecc:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800cece:	b292      	uxth	r2, r2
 800ced0:	9202      	str	r2, [sp, #8]
 800ced2:	2200      	movs	r2, #0
 800ced4:	9201      	str	r2, [sp, #4]
 800ced6:	9300      	str	r3, [sp, #0]
 800ced8:	4603      	mov	r3, r0
 800ceda:	2280      	movs	r2, #128	; 0x80
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f001 f9c5 	bl	800e26c <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	7959      	ldrb	r1, [r3, #5]
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800cef2:	687a      	ldr	r2, [r7, #4]
 800cef4:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800cef6:	b292      	uxth	r2, r2
 800cef8:	9202      	str	r2, [sp, #8]
 800cefa:	2200      	movs	r2, #0
 800cefc:	9201      	str	r2, [sp, #4]
 800cefe:	9300      	str	r3, [sp, #0]
 800cf00:	4603      	mov	r3, r0
 800cf02:	2200      	movs	r2, #0
 800cf04:	6878      	ldr	r0, [r7, #4]
 800cf06:	f001 f9b1 	bl	800e26c <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cf1e:	2200      	movs	r2, #0
 800cf20:	4619      	mov	r1, r3
 800cf22:	f004 fac1 	bl	80114a8 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800cf26:	e120      	b.n	800d16a <USBH_Process+0x3b6>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800cf28:	6878      	ldr	r0, [r7, #4]
 800cf2a:	f000 f923 	bl	800d174 <USBH_HandleEnum>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	f040 8111 	bne.w	800d158 <USBH_Process+0x3a4>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	d103      	bne.n	800cf50 <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2208      	movs	r2, #8
 800cf4c:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800cf4e:	e103      	b.n	800d158 <USBH_Process+0x3a4>
        phost->gState  = HOST_INPUT;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2207      	movs	r2, #7
 800cf54:	701a      	strb	r2, [r3, #0]
    break;
 800cf56:	e0ff      	b.n	800d158 <USBH_Process+0x3a4>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	f000 80fc 	beq.w	800d15c <USBH_Process+0x3a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cf6a:	2101      	movs	r1, #1
 800cf6c:	6878      	ldr	r0, [r7, #4]
 800cf6e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2208      	movs	r2, #8
 800cf74:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	2205      	movs	r2, #5
 800cf7a:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cf8a:	2200      	movs	r2, #0
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	f004 fa8b 	bl	80114a8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800cf92:	e0e3      	b.n	800d15c <USBH_Process+0x3a8>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800cf9a:	b29b      	uxth	r3, r3
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f000 fc09 	bl	800d7b6 <USBH_SetCfg>
 800cfa4:	4603      	mov	r3, r0
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d102      	bne.n	800cfb0 <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	2209      	movs	r2, #9
 800cfae:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	f004 fa6e 	bl	80114a8 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800cfcc:	e0cd      	b.n	800d16a <USBH_Process+0x3b6>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800cfd4:	f003 0320 	and.w	r3, r3, #32
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d00a      	beq.n	800cff2 <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800cfdc:	2101      	movs	r1, #1
 800cfde:	6878      	ldr	r0, [r7, #4]
 800cfe0:	f000 fc0c 	bl	800d7fc <USBH_SetFeature>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d106      	bne.n	800cff8 <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	220a      	movs	r2, #10
 800cfee:	701a      	strb	r2, [r3, #0]
 800cff0:	e002      	b.n	800cff8 <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	220a      	movs	r2, #10
 800cff6:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	2201      	movs	r2, #1
 800cffc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d00c:	2200      	movs	r2, #0
 800d00e:	4619      	mov	r1, r3
 800d010:	f004 fa4a 	bl	80114a8 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800d014:	e0a9      	b.n	800d16a <USBH_Process+0x3b6>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d040      	beq.n	800d0a2 <USBH_Process+0x2ee>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2200      	movs	r2, #0
 800d024:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d028:	2300      	movs	r3, #0
 800d02a:	73fb      	strb	r3, [r7, #15]
 800d02c:	e017      	b.n	800d05e <USBH_Process+0x2aa>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d02e:	7bfb      	ldrb	r3, [r7, #15]
 800d030:	687a      	ldr	r2, [r7, #4]
 800d032:	33dc      	adds	r3, #220	; 0xdc
 800d034:	009b      	lsls	r3, r3, #2
 800d036:	4413      	add	r3, r2
 800d038:	685b      	ldr	r3, [r3, #4]
 800d03a:	791a      	ldrb	r2, [r3, #4]
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 800d042:	429a      	cmp	r2, r3
 800d044:	d108      	bne.n	800d058 <USBH_Process+0x2a4>
        {
          phost->pActiveClass = phost->pClass[idx];
 800d046:	7bfb      	ldrb	r3, [r7, #15]
 800d048:	687a      	ldr	r2, [r7, #4]
 800d04a:	33dc      	adds	r3, #220	; 0xdc
 800d04c:	009b      	lsls	r3, r3, #2
 800d04e:	4413      	add	r3, r2
 800d050:	685a      	ldr	r2, [r3, #4]
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d058:	7bfb      	ldrb	r3, [r7, #15]
 800d05a:	3301      	adds	r3, #1
 800d05c:	73fb      	strb	r3, [r7, #15]
 800d05e:	7bfb      	ldrb	r3, [r7, #15]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d0e4      	beq.n	800d02e <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d06a:	2b00      	cmp	r3, #0
 800d06c:	d016      	beq.n	800d09c <USBH_Process+0x2e8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d074:	689b      	ldr	r3, [r3, #8]
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	4798      	blx	r3
 800d07a:	4603      	mov	r3, r0
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d109      	bne.n	800d094 <USBH_Process+0x2e0>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2206      	movs	r2, #6
 800d084:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d08c:	2103      	movs	r1, #3
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	4798      	blx	r3
 800d092:	e006      	b.n	800d0a2 <USBH_Process+0x2ee>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	220d      	movs	r2, #13
 800d098:	701a      	strb	r2, [r3, #0]
 800d09a:	e002      	b.n	800d0a2 <USBH_Process+0x2ee>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	220d      	movs	r2, #13
 800d0a0:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	2205      	movs	r2, #5
 800d0a6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	4619      	mov	r1, r3
 800d0ba:	f004 f9f5 	bl	80114a8 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800d0be:	e054      	b.n	800d16a <USBH_Process+0x3b6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d00f      	beq.n	800d0ea <USBH_Process+0x336>
    {
      status = phost->pActiveClass->Requests(phost);
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d0d0:	691b      	ldr	r3, [r3, #16]
 800d0d2:	6878      	ldr	r0, [r7, #4]
 800d0d4:	4798      	blx	r3
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 800d0da:	7bbb      	ldrb	r3, [r7, #14]
 800d0dc:	b2db      	uxtb	r3, r3
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d13e      	bne.n	800d160 <USBH_Process+0x3ac>
      {
        phost->gState  = HOST_CLASS;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	220b      	movs	r2, #11
 800d0e6:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800d0e8:	e03a      	b.n	800d160 <USBH_Process+0x3ac>
      phost->gState  = HOST_ABORT_STATE;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	220d      	movs	r2, #13
 800d0ee:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2205      	movs	r2, #5
 800d0f4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d104:	2200      	movs	r2, #0
 800d106:	4619      	mov	r1, r3
 800d108:	f004 f9ce 	bl	80114a8 <osMessagePut>
    break;
 800d10c:	e028      	b.n	800d160 <USBH_Process+0x3ac>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d114:	2b00      	cmp	r3, #0
 800d116:	d025      	beq.n	800d164 <USBH_Process+0x3b0>
    {
      phost->pActiveClass->BgndProcess(phost);
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d11e:	695b      	ldr	r3, [r3, #20]
 800d120:	6878      	ldr	r0, [r7, #4]
 800d122:	4798      	blx	r3
    }
    break;
 800d124:	e01e      	b.n	800d164 <USBH_Process+0x3b0>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f7ff fd5e 	bl	800cbe8 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d132:	2b00      	cmp	r3, #0
 800d134:	d018      	beq.n	800d168 <USBH_Process+0x3b4>
    {
      phost->pActiveClass->DeInit(phost);
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d13c:	68db      	ldr	r3, [r3, #12]
 800d13e:	6878      	ldr	r0, [r7, #4]
 800d140:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	2200      	movs	r2, #0
 800d146:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 800d14a:	e00d      	b.n	800d168 <USBH_Process+0x3b4>

  case HOST_ABORT_STATE:
  default :
    break;
 800d14c:	bf00      	nop
 800d14e:	e00c      	b.n	800d16a <USBH_Process+0x3b6>
    break;
 800d150:	bf00      	nop
 800d152:	e00a      	b.n	800d16a <USBH_Process+0x3b6>
    break;
 800d154:	bf00      	nop
 800d156:	e008      	b.n	800d16a <USBH_Process+0x3b6>
    break;
 800d158:	bf00      	nop
 800d15a:	e006      	b.n	800d16a <USBH_Process+0x3b6>
    break;
 800d15c:	bf00      	nop
 800d15e:	e004      	b.n	800d16a <USBH_Process+0x3b6>
    break;
 800d160:	bf00      	nop
 800d162:	e002      	b.n	800d16a <USBH_Process+0x3b6>
    break;
 800d164:	bf00      	nop
 800d166:	e000      	b.n	800d16a <USBH_Process+0x3b6>
    break;
 800d168:	bf00      	nop
  }
 return USBH_OK;
 800d16a:	2300      	movs	r3, #0
}
 800d16c:	4618      	mov	r0, r3
 800d16e:	3710      	adds	r7, #16
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}

0800d174 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 800d174:	b580      	push	{r7, lr}
 800d176:	b088      	sub	sp, #32
 800d178:	af04      	add	r7, sp, #16
 800d17a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d17c:	2301      	movs	r3, #1
 800d17e:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	785b      	ldrb	r3, [r3, #1]
 800d184:	2b07      	cmp	r3, #7
 800d186:	f200 8132 	bhi.w	800d3ee <USBH_HandleEnum+0x27a>
 800d18a:	a201      	add	r2, pc, #4	; (adr r2, 800d190 <USBH_HandleEnum+0x1c>)
 800d18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d190:	0800d1b1 	.word	0x0800d1b1
 800d194:	0800d223 	.word	0x0800d223
 800d198:	0800d23b 	.word	0x0800d23b
 800d19c:	0800d2b1 	.word	0x0800d2b1
 800d1a0:	0800d2c9 	.word	0x0800d2c9
 800d1a4:	0800d2e7 	.word	0x0800d2e7
 800d1a8:	0800d353 	.word	0x0800d353
 800d1ac:	0800d3a3 	.word	0x0800d3a3
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800d1b0:	2108      	movs	r1, #8
 800d1b2:	6878      	ldr	r0, [r7, #4]
 800d1b4:	f000 fa2f 	bl	800d616 <USBH_Get_DevDesc>
 800d1b8:	4603      	mov	r3, r0
 800d1ba:	2b00      	cmp	r3, #0
 800d1bc:	f040 8119 	bne.w	800d3f2 <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2201      	movs	r2, #1
 800d1ce:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	7919      	ldrb	r1, [r3, #4]
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800d1e0:	687a      	ldr	r2, [r7, #4]
 800d1e2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800d1e4:	b292      	uxth	r2, r2
 800d1e6:	9202      	str	r2, [sp, #8]
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	9201      	str	r2, [sp, #4]
 800d1ec:	9300      	str	r3, [sp, #0]
 800d1ee:	4603      	mov	r3, r0
 800d1f0:	2280      	movs	r2, #128	; 0x80
 800d1f2:	6878      	ldr	r0, [r7, #4]
 800d1f4:	f001 f83a 	bl	800e26c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	7959      	ldrb	r1, [r3, #5]
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800d208:	687a      	ldr	r2, [r7, #4]
 800d20a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800d20c:	b292      	uxth	r2, r2
 800d20e:	9202      	str	r2, [sp, #8]
 800d210:	2200      	movs	r2, #0
 800d212:	9201      	str	r2, [sp, #4]
 800d214:	9300      	str	r3, [sp, #0]
 800d216:	4603      	mov	r3, r0
 800d218:	2200      	movs	r2, #0
 800d21a:	6878      	ldr	r0, [r7, #4]
 800d21c:	f001 f826 	bl	800e26c <USBH_OpenPipe>

    }
    break;
 800d220:	e0e7      	b.n	800d3f2 <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800d222:	2112      	movs	r1, #18
 800d224:	6878      	ldr	r0, [r7, #4]
 800d226:	f000 f9f6 	bl	800d616 <USBH_Get_DevDesc>
 800d22a:	4603      	mov	r3, r0
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	f040 80e2 	bne.w	800d3f6 <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	2202      	movs	r2, #2
 800d236:	705a      	strb	r2, [r3, #1]

    }
    break;
 800d238:	e0dd      	b.n	800d3f6 <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800d23a:	2101      	movs	r1, #1
 800d23c:	6878      	ldr	r0, [r7, #4]
 800d23e:	f000 fa96 	bl	800d76e <USBH_SetAddress>
 800d242:	4603      	mov	r3, r0
 800d244:	2b00      	cmp	r3, #0
 800d246:	f040 80d8 	bne.w	800d3fa <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 800d24a:	2002      	movs	r0, #2
 800d24c:	f00c fe3f 	bl	8019ece <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2201      	movs	r2, #1
 800d254:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	2203      	movs	r2, #3
 800d25c:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	7919      	ldrb	r1, [r3, #4]
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800d26e:	687a      	ldr	r2, [r7, #4]
 800d270:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800d272:	b292      	uxth	r2, r2
 800d274:	9202      	str	r2, [sp, #8]
 800d276:	2200      	movs	r2, #0
 800d278:	9201      	str	r2, [sp, #4]
 800d27a:	9300      	str	r3, [sp, #0]
 800d27c:	4603      	mov	r3, r0
 800d27e:	2280      	movs	r2, #128	; 0x80
 800d280:	6878      	ldr	r0, [r7, #4]
 800d282:	f000 fff3 	bl	800e26c <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	7959      	ldrb	r1, [r3, #5]
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800d296:	687a      	ldr	r2, [r7, #4]
 800d298:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800d29a:	b292      	uxth	r2, r2
 800d29c:	9202      	str	r2, [sp, #8]
 800d29e:	2200      	movs	r2, #0
 800d2a0:	9201      	str	r2, [sp, #4]
 800d2a2:	9300      	str	r3, [sp, #0]
 800d2a4:	4603      	mov	r3, r0
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	6878      	ldr	r0, [r7, #4]
 800d2aa:	f000 ffdf 	bl	800e26c <USBH_OpenPipe>
    }
    break;
 800d2ae:	e0a4      	b.n	800d3fa <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 800d2b0:	2109      	movs	r1, #9
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f000 f9d7 	bl	800d666 <USBH_Get_CfgDesc>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	f040 809f 	bne.w	800d3fe <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	2204      	movs	r2, #4
 800d2c4:	705a      	strb	r2, [r3, #1]
    }
    break;
 800d2c6:	e09a      	b.n	800d3fe <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f000 f9c8 	bl	800d666 <USBH_Get_CfgDesc>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	f040 8092 	bne.w	800d402 <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2205      	movs	r2, #5
 800d2e2:	705a      	strb	r2, [r3, #1]
    }
    break;
 800d2e4:	e08d      	b.n	800d402 <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d01e      	beq.n	800d32e <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800d2fc:	23ff      	movs	r3, #255	; 0xff
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f000 f9d5 	bl	800d6ae <USBH_Get_StringDesc>
 800d304:	4603      	mov	r3, r0
 800d306:	2b00      	cmp	r3, #0
 800d308:	d17d      	bne.n	800d406 <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2206      	movs	r2, #6
 800d30e:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2205      	movs	r2, #5
 800d314:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d324:	2200      	movs	r2, #0
 800d326:	4619      	mov	r1, r3
 800d328:	f004 f8be 	bl	80114a8 <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800d32c:	e06b      	b.n	800d406 <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2206      	movs	r2, #6
 800d332:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2205      	movs	r2, #5
 800d338:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d348:	2200      	movs	r2, #0
 800d34a:	4619      	mov	r1, r3
 800d34c:	f004 f8ac 	bl	80114a8 <osMessagePut>
    break;
 800d350:	e059      	b.n	800d406 <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800d358:	2b00      	cmp	r3, #0
 800d35a:	d010      	beq.n	800d37e <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800d368:	23ff      	movs	r3, #255	; 0xff
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f000 f99f 	bl	800d6ae <USBH_Get_StringDesc>
 800d370:	4603      	mov	r3, r0
 800d372:	2b00      	cmp	r3, #0
 800d374:	d149      	bne.n	800d40a <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	2207      	movs	r2, #7
 800d37a:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800d37c:	e045      	b.n	800d40a <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	2207      	movs	r2, #7
 800d382:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	2205      	movs	r2, #5
 800d388:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d38c:	687b      	ldr	r3, [r7, #4]
 800d38e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d398:	2200      	movs	r2, #0
 800d39a:	4619      	mov	r1, r3
 800d39c:	f004 f884 	bl	80114a8 <osMessagePut>
    break;
 800d3a0:	e033      	b.n	800d40a <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d00f      	beq.n	800d3cc <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800d3b8:	23ff      	movs	r3, #255	; 0xff
 800d3ba:	6878      	ldr	r0, [r7, #4]
 800d3bc:	f000 f977 	bl	800d6ae <USBH_Get_StringDesc>
 800d3c0:	4603      	mov	r3, r0
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d123      	bne.n	800d40e <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800d3ca:	e020      	b.n	800d40e <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 800d3cc:	2300      	movs	r3, #0
 800d3ce:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2205      	movs	r2, #5
 800d3d4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	4619      	mov	r1, r3
 800d3e8:	f004 f85e 	bl	80114a8 <osMessagePut>
    break;
 800d3ec:	e00f      	b.n	800d40e <USBH_HandleEnum+0x29a>

  default:
    break;
 800d3ee:	bf00      	nop
 800d3f0:	e00e      	b.n	800d410 <USBH_HandleEnum+0x29c>
    break;
 800d3f2:	bf00      	nop
 800d3f4:	e00c      	b.n	800d410 <USBH_HandleEnum+0x29c>
    break;
 800d3f6:	bf00      	nop
 800d3f8:	e00a      	b.n	800d410 <USBH_HandleEnum+0x29c>
    break;
 800d3fa:	bf00      	nop
 800d3fc:	e008      	b.n	800d410 <USBH_HandleEnum+0x29c>
    break;
 800d3fe:	bf00      	nop
 800d400:	e006      	b.n	800d410 <USBH_HandleEnum+0x29c>
    break;
 800d402:	bf00      	nop
 800d404:	e004      	b.n	800d410 <USBH_HandleEnum+0x29c>
    break;
 800d406:	bf00      	nop
 800d408:	e002      	b.n	800d410 <USBH_HandleEnum+0x29c>
    break;
 800d40a:	bf00      	nop
 800d40c:	e000      	b.n	800d410 <USBH_HandleEnum+0x29c>
    break;
 800d40e:	bf00      	nop
  }
  return Status;
 800d410:	7bfb      	ldrb	r3, [r7, #15]
}
 800d412:	4618      	mov	r0, r3
 800d414:	3710      	adds	r7, #16
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}
 800d41a:	bf00      	nop

0800d41c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 800d41c:	b480      	push	{r7}
 800d41e:	b083      	sub	sp, #12
 800d420:	af00      	add	r7, sp, #0
 800d422:	6078      	str	r0, [r7, #4]
 800d424:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	683a      	ldr	r2, [r7, #0]
 800d42a:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800d42e:	bf00      	nop
 800d430:	370c      	adds	r7, #12
 800d432:	46bd      	mov	sp, r7
 800d434:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d438:	4770      	bx	lr

0800d43a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800d43a:	b580      	push	{r7, lr}
 800d43c:	b082      	sub	sp, #8
 800d43e:	af00      	add	r7, sp, #0
 800d440:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800d448:	1c5a      	adds	r2, r3, #1
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800d450:	6878      	ldr	r0, [r7, #4]
 800d452:	f000 f804 	bl	800d45e <USBH_HandleSof>
}
 800d456:	bf00      	nop
 800d458:	3708      	adds	r7, #8
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}

0800d45e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800d45e:	b580      	push	{r7, lr}
 800d460:	b082      	sub	sp, #8
 800d462:	af00      	add	r7, sp, #0
 800d464:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	781b      	ldrb	r3, [r3, #0]
 800d46a:	b2db      	uxtb	r3, r3
 800d46c:	2b0b      	cmp	r3, #11
 800d46e:	d10a      	bne.n	800d486 <USBH_HandleSof+0x28>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d476:	2b00      	cmp	r3, #0
 800d478:	d005      	beq.n	800d486 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d480:	699b      	ldr	r3, [r3, #24]
 800d482:	6878      	ldr	r0, [r7, #4]
 800d484:	4798      	blx	r3
  }
}
 800d486:	bf00      	nop
 800d488:	3708      	adds	r7, #8
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bd80      	pop	{r7, pc}

0800d48e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800d48e:	b480      	push	{r7}
 800d490:	b083      	sub	sp, #12
 800d492:	af00      	add	r7, sp, #0
 800d494:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	2201      	movs	r2, #1
 800d49a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800d49e:	bf00      	nop
}
 800d4a0:	370c      	adds	r7, #12
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a8:	4770      	bx	lr

0800d4aa <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800d4aa:	b480      	push	{r7}
 800d4ac:	b083      	sub	sp, #12
 800d4ae:	af00      	add	r7, sp, #0
 800d4b0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800d4ba:	bf00      	nop
}
 800d4bc:	370c      	adds	r7, #12
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4c4:	4770      	bx	lr

0800d4c6 <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800d4c6:	b480      	push	{r7}
 800d4c8:	b083      	sub	sp, #12
 800d4ca:	af00      	add	r7, sp, #0
 800d4cc:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	370c      	adds	r7, #12
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr

0800d4e0 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800d4e0:	b580      	push	{r7, lr}
 800d4e2:	b082      	sub	sp, #8
 800d4e4:	af00      	add	r7, sp, #0
 800d4e6:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	781b      	ldrb	r3, [r3, #0]
 800d4ec:	b2db      	uxtb	r3, r3
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d10f      	bne.n	800d512 <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2201      	movs	r2, #1
 800d4f6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d500:	2b00      	cmp	r3, #0
 800d502:	d00e      	beq.n	800d522 <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800d504:	687b      	ldr	r3, [r7, #4]
 800d506:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d50a:	2104      	movs	r1, #4
 800d50c:	6878      	ldr	r0, [r7, #4]
 800d50e:	4798      	blx	r3
 800d510:	e007      	b.n	800d522 <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d518:	2b01      	cmp	r3, #1
 800d51a:	d102      	bne.n	800d522 <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	2202      	movs	r2, #2
 800d520:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	2201      	movs	r2, #1
 800d526:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d536:	2200      	movs	r2, #0
 800d538:	4619      	mov	r1, r3
 800d53a:	f003 ffb5 	bl	80114a8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d53e:	2300      	movs	r3, #0
}
 800d540:	4618      	mov	r0, r3
 800d542:	3708      	adds	r7, #8
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}

0800d548 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b082      	sub	sp, #8
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800d550:	6878      	ldr	r0, [r7, #4]
 800d552:	f00c fb70 	bl	8019c36 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	791b      	ldrb	r3, [r3, #4]
 800d55a:	4619      	mov	r1, r3
 800d55c:	6878      	ldr	r0, [r7, #4]
 800d55e:	f000 fed2 	bl	800e306 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	795b      	ldrb	r3, [r3, #5]
 800d566:	4619      	mov	r1, r3
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f000 fecc 	bl	800e306 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	2200      	movs	r2, #0
 800d572:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d005      	beq.n	800d58c <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d586:	2105      	movs	r1, #5
 800d588:	6878      	ldr	r0, [r7, #4]
 800d58a:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f00c fb37 	bl	8019c00 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800d592:	687b      	ldr	r3, [r7, #4]
 800d594:	2203      	movs	r2, #3
 800d596:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	2201      	movs	r2, #1
 800d59c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	f003 ff7a 	bl	80114a8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d5b4:	2300      	movs	r3, #0
}
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	3708      	adds	r7, #8
 800d5ba:	46bd      	mov	sp, r7
 800d5bc:	bd80      	pop	{r7, pc}

0800d5be <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800d5be:	b580      	push	{r7, lr}
 800d5c0:	b086      	sub	sp, #24
 800d5c2:	af00      	add	r7, sp, #0
 800d5c4:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800d5c6:	687b      	ldr	r3, [r7, #4]
 800d5c8:	f8d3 13cc 	ldr.w	r1, [r3, #972]	; 0x3cc
 800d5cc:	f107 030c 	add.w	r3, r7, #12
 800d5d0:	f04f 32ff 	mov.w	r2, #4294967295
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f003 ffa7 	bl	8011528 <osMessageGet>
    if(event.status == osEventMessage)
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	2b10      	cmp	r3, #16
 800d5de:	d1f2      	bne.n	800d5c6 <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800d5e0:	6878      	ldr	r0, [r7, #4]
 800d5e2:	f7ff fbe7 	bl	800cdb4 <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800d5e6:	e7ee      	b.n	800d5c6 <USBH_Process_OS+0x8>

0800d5e8 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 800d5e8:	b580      	push	{r7, lr}
 800d5ea:	b082      	sub	sp, #8
 800d5ec:	af00      	add	r7, sp, #0
 800d5ee:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2201      	movs	r2, #1
 800d5f4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d604:	2200      	movs	r2, #0
 800d606:	4619      	mov	r1, r3
 800d608:	f003 ff4e 	bl	80114a8 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800d60c:	2300      	movs	r3, #0
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3708      	adds	r7, #8
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}

0800d616 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d616:	b580      	push	{r7, lr}
 800d618:	b086      	sub	sp, #24
 800d61a:	af02      	add	r7, sp, #8
 800d61c:	6078      	str	r0, [r7, #4]
 800d61e:	460b      	mov	r3, r1
 800d620:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800d628:	78fb      	ldrb	r3, [r7, #3]
 800d62a:	b29b      	uxth	r3, r3
 800d62c:	9300      	str	r3, [sp, #0]
 800d62e:	4613      	mov	r3, r2
 800d630:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d634:	2100      	movs	r1, #0
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f000 f864 	bl	800d704 <USBH_GetDescriptor>
 800d63c:	4603      	mov	r3, r0
 800d63e:	73fb      	strb	r3, [r7, #15]
 800d640:	7bfb      	ldrb	r3, [r7, #15]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d10a      	bne.n	800d65c <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	f203 3022 	addw	r0, r3, #802	; 0x322
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d652:	78fa      	ldrb	r2, [r7, #3]
 800d654:	b292      	uxth	r2, r2
 800d656:	4619      	mov	r1, r3
 800d658:	f000 f918 	bl	800d88c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 800d65c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3710      	adds	r7, #16
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}

0800d666 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800d666:	b580      	push	{r7, lr}
 800d668:	b086      	sub	sp, #24
 800d66a:	af02      	add	r7, sp, #8
 800d66c:	6078      	str	r0, [r7, #4]
 800d66e:	460b      	mov	r3, r1
 800d670:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	331c      	adds	r3, #28
 800d676:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 800d678:	887b      	ldrh	r3, [r7, #2]
 800d67a:	9300      	str	r3, [sp, #0]
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d682:	2100      	movs	r1, #0
 800d684:	6878      	ldr	r0, [r7, #4]
 800d686:	f000 f83d 	bl	800d704 <USBH_GetDescriptor>
 800d68a:	4603      	mov	r3, r0
 800d68c:	72fb      	strb	r3, [r7, #11]
 800d68e:	7afb      	ldrb	r3, [r7, #11]
 800d690:	2b00      	cmp	r3, #0
 800d692:	d107      	bne.n	800d6a4 <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 800d694:	687b      	ldr	r3, [r7, #4]
 800d696:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800d69a:	887a      	ldrh	r2, [r7, #2]
 800d69c:	68f9      	ldr	r1, [r7, #12]
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f000 f964 	bl	800d96c <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 800d6a4:	7afb      	ldrb	r3, [r7, #11]
}
 800d6a6:	4618      	mov	r0, r3
 800d6a8:	3710      	adds	r7, #16
 800d6aa:	46bd      	mov	sp, r7
 800d6ac:	bd80      	pop	{r7, pc}

0800d6ae <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800d6ae:	b580      	push	{r7, lr}
 800d6b0:	b088      	sub	sp, #32
 800d6b2:	af02      	add	r7, sp, #8
 800d6b4:	60f8      	str	r0, [r7, #12]
 800d6b6:	607a      	str	r2, [r7, #4]
 800d6b8:	461a      	mov	r2, r3
 800d6ba:	460b      	mov	r3, r1
 800d6bc:	72fb      	strb	r3, [r7, #11]
 800d6be:	4613      	mov	r3, r2
 800d6c0:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800d6c2:	7afb      	ldrb	r3, [r7, #11]
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d6ca:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800d6d2:	893b      	ldrh	r3, [r7, #8]
 800d6d4:	9300      	str	r3, [sp, #0]
 800d6d6:	460b      	mov	r3, r1
 800d6d8:	2100      	movs	r1, #0
 800d6da:	68f8      	ldr	r0, [r7, #12]
 800d6dc:	f000 f812 	bl	800d704 <USBH_GetDescriptor>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	75fb      	strb	r3, [r7, #23]
 800d6e4:	7dfb      	ldrb	r3, [r7, #23]
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	d107      	bne.n	800d6fa <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d6f0:	893a      	ldrh	r2, [r7, #8]
 800d6f2:	6879      	ldr	r1, [r7, #4]
 800d6f4:	4618      	mov	r0, r3
 800d6f6:	f000 fa37 	bl	800db68 <USBH_ParseStringDesc>
  }
  return status;
 800d6fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6fc:	4618      	mov	r0, r3
 800d6fe:	3718      	adds	r7, #24
 800d700:	46bd      	mov	sp, r7
 800d702:	bd80      	pop	{r7, pc}

0800d704 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 800d704:	b580      	push	{r7, lr}
 800d706:	b084      	sub	sp, #16
 800d708:	af00      	add	r7, sp, #0
 800d70a:	60f8      	str	r0, [r7, #12]
 800d70c:	607b      	str	r3, [r7, #4]
 800d70e:	460b      	mov	r3, r1
 800d710:	72fb      	strb	r3, [r7, #11]
 800d712:	4613      	mov	r3, r2
 800d714:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	789b      	ldrb	r3, [r3, #2]
 800d71a:	2b01      	cmp	r3, #1
 800d71c:	d11c      	bne.n	800d758 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d71e:	7afb      	ldrb	r3, [r7, #11]
 800d720:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d724:	b2da      	uxtb	r2, r3
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	2206      	movs	r2, #6
 800d72e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	893a      	ldrh	r2, [r7, #8]
 800d734:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d736:	893b      	ldrh	r3, [r7, #8]
 800d738:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d73c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d740:	d104      	bne.n	800d74c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	f240 4209 	movw	r2, #1033	; 0x409
 800d748:	829a      	strh	r2, [r3, #20]
 800d74a:	e002      	b.n	800d752 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2200      	movs	r2, #0
 800d750:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	8b3a      	ldrh	r2, [r7, #24]
 800d756:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 800d758:	8b3b      	ldrh	r3, [r7, #24]
 800d75a:	461a      	mov	r2, r3
 800d75c:	6879      	ldr	r1, [r7, #4]
 800d75e:	68f8      	ldr	r0, [r7, #12]
 800d760:	f000 fa50 	bl	800dc04 <USBH_CtlReq>
 800d764:	4603      	mov	r3, r0
}
 800d766:	4618      	mov	r0, r3
 800d768:	3710      	adds	r7, #16
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}

0800d76e <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d76e:	b580      	push	{r7, lr}
 800d770:	b082      	sub	sp, #8
 800d772:	af00      	add	r7, sp, #0
 800d774:	6078      	str	r0, [r7, #4]
 800d776:	460b      	mov	r3, r1
 800d778:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	789b      	ldrb	r3, [r3, #2]
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d10f      	bne.n	800d7a2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2200      	movs	r2, #0
 800d786:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2205      	movs	r2, #5
 800d78c:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d78e:	78fb      	ldrb	r3, [r7, #3]
 800d790:	b29a      	uxth	r2, r3
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	2200      	movs	r2, #0
 800d79a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800d7a2:	2200      	movs	r2, #0
 800d7a4:	2100      	movs	r1, #0
 800d7a6:	6878      	ldr	r0, [r7, #4]
 800d7a8:	f000 fa2c 	bl	800dc04 <USBH_CtlReq>
 800d7ac:	4603      	mov	r3, r0
}
 800d7ae:	4618      	mov	r0, r3
 800d7b0:	3708      	adds	r7, #8
 800d7b2:	46bd      	mov	sp, r7
 800d7b4:	bd80      	pop	{r7, pc}

0800d7b6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d7b6:	b580      	push	{r7, lr}
 800d7b8:	b082      	sub	sp, #8
 800d7ba:	af00      	add	r7, sp, #0
 800d7bc:	6078      	str	r0, [r7, #4]
 800d7be:	460b      	mov	r3, r1
 800d7c0:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	789b      	ldrb	r3, [r3, #2]
 800d7c6:	2b01      	cmp	r3, #1
 800d7c8:	d10e      	bne.n	800d7e8 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2209      	movs	r2, #9
 800d7d4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	887a      	ldrh	r2, [r7, #2]
 800d7da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	2100      	movs	r1, #0
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f000 fa09 	bl	800dc04 <USBH_CtlReq>
 800d7f2:	4603      	mov	r3, r0
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3708      	adds	r7, #8
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	460b      	mov	r3, r1
 800d806:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	789b      	ldrb	r3, [r3, #2]
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	d10f      	bne.n	800d830 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2200      	movs	r2, #0
 800d814:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2203      	movs	r2, #3
 800d81a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d81c:	78fb      	ldrb	r3, [r7, #3]
 800d81e:	b29a      	uxth	r2, r3
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2200      	movs	r2, #0
 800d828:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2200      	movs	r2, #0
 800d82e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d830:	2200      	movs	r2, #0
 800d832:	2100      	movs	r1, #0
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f000 f9e5 	bl	800dc04 <USBH_CtlReq>
 800d83a:	4603      	mov	r3, r0
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3708      	adds	r7, #8
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}

0800d844 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b082      	sub	sp, #8
 800d848:	af00      	add	r7, sp, #0
 800d84a:	6078      	str	r0, [r7, #4]
 800d84c:	460b      	mov	r3, r1
 800d84e:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	789b      	ldrb	r3, [r3, #2]
 800d854:	2b01      	cmp	r3, #1
 800d856:	d10f      	bne.n	800d878 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	2202      	movs	r2, #2
 800d85c:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	2201      	movs	r2, #1
 800d862:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2200      	movs	r2, #0
 800d868:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d86a:	78fb      	ldrb	r3, [r7, #3]
 800d86c:	b29a      	uxth	r2, r3
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2200      	movs	r2, #0
 800d876:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 800d878:	2200      	movs	r2, #0
 800d87a:	2100      	movs	r1, #0
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f000 f9c1 	bl	800dc04 <USBH_CtlReq>
 800d882:	4603      	mov	r3, r0
}
 800d884:	4618      	mov	r0, r3
 800d886:	3708      	adds	r7, #8
 800d888:	46bd      	mov	sp, r7
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 800d88c:	b480      	push	{r7}
 800d88e:	b085      	sub	sp, #20
 800d890:	af00      	add	r7, sp, #0
 800d892:	60f8      	str	r0, [r7, #12]
 800d894:	60b9      	str	r1, [r7, #8]
 800d896:	4613      	mov	r3, r2
 800d898:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800d89a:	68bb      	ldr	r3, [r7, #8]
 800d89c:	781a      	ldrb	r2, [r3, #0]
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800d8a2:	68bb      	ldr	r3, [r7, #8]
 800d8a4:	785a      	ldrb	r2, [r3, #1]
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	3302      	adds	r3, #2
 800d8ae:	781b      	ldrb	r3, [r3, #0]
 800d8b0:	b29a      	uxth	r2, r3
 800d8b2:	68bb      	ldr	r3, [r7, #8]
 800d8b4:	3303      	adds	r3, #3
 800d8b6:	781b      	ldrb	r3, [r3, #0]
 800d8b8:	b29b      	uxth	r3, r3
 800d8ba:	021b      	lsls	r3, r3, #8
 800d8bc:	b29b      	uxth	r3, r3
 800d8be:	4313      	orrs	r3, r2
 800d8c0:	b29a      	uxth	r2, r3
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800d8c6:	68bb      	ldr	r3, [r7, #8]
 800d8c8:	791a      	ldrb	r2, [r3, #4]
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800d8ce:	68bb      	ldr	r3, [r7, #8]
 800d8d0:	795a      	ldrb	r2, [r3, #5]
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800d8d6:	68bb      	ldr	r3, [r7, #8]
 800d8d8:	799a      	ldrb	r2, [r3, #6]
 800d8da:	68fb      	ldr	r3, [r7, #12]
 800d8dc:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800d8de:	68bb      	ldr	r3, [r7, #8]
 800d8e0:	79da      	ldrb	r2, [r3, #7]
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800d8e6:	88fb      	ldrh	r3, [r7, #6]
 800d8e8:	2b08      	cmp	r3, #8
 800d8ea:	d939      	bls.n	800d960 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 800d8ec:	68bb      	ldr	r3, [r7, #8]
 800d8ee:	3308      	adds	r3, #8
 800d8f0:	781b      	ldrb	r3, [r3, #0]
 800d8f2:	b29a      	uxth	r2, r3
 800d8f4:	68bb      	ldr	r3, [r7, #8]
 800d8f6:	3309      	adds	r3, #9
 800d8f8:	781b      	ldrb	r3, [r3, #0]
 800d8fa:	b29b      	uxth	r3, r3
 800d8fc:	021b      	lsls	r3, r3, #8
 800d8fe:	b29b      	uxth	r3, r3
 800d900:	4313      	orrs	r3, r2
 800d902:	b29a      	uxth	r2, r3
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	330a      	adds	r3, #10
 800d90c:	781b      	ldrb	r3, [r3, #0]
 800d90e:	b29a      	uxth	r2, r3
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	330b      	adds	r3, #11
 800d914:	781b      	ldrb	r3, [r3, #0]
 800d916:	b29b      	uxth	r3, r3
 800d918:	021b      	lsls	r3, r3, #8
 800d91a:	b29b      	uxth	r3, r3
 800d91c:	4313      	orrs	r3, r2
 800d91e:	b29a      	uxth	r2, r3
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800d924:	68bb      	ldr	r3, [r7, #8]
 800d926:	330c      	adds	r3, #12
 800d928:	781b      	ldrb	r3, [r3, #0]
 800d92a:	b29a      	uxth	r2, r3
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	330d      	adds	r3, #13
 800d930:	781b      	ldrb	r3, [r3, #0]
 800d932:	b29b      	uxth	r3, r3
 800d934:	021b      	lsls	r3, r3, #8
 800d936:	b29b      	uxth	r3, r3
 800d938:	4313      	orrs	r3, r2
 800d93a:	b29a      	uxth	r2, r3
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800d940:	68bb      	ldr	r3, [r7, #8]
 800d942:	7b9a      	ldrb	r2, [r3, #14]
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800d948:	68bb      	ldr	r3, [r7, #8]
 800d94a:	7bda      	ldrb	r2, [r3, #15]
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	7c1a      	ldrb	r2, [r3, #16]
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800d958:	68bb      	ldr	r3, [r7, #8]
 800d95a:	7c5a      	ldrb	r2, [r3, #17]
 800d95c:	68fb      	ldr	r3, [r7, #12]
 800d95e:	745a      	strb	r2, [r3, #17]
  }
}
 800d960:	bf00      	nop
 800d962:	3714      	adds	r7, #20
 800d964:	46bd      	mov	sp, r7
 800d966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96a:	4770      	bx	lr

0800d96c <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 800d96c:	b580      	push	{r7, lr}
 800d96e:	b08a      	sub	sp, #40	; 0x28
 800d970:	af00      	add	r7, sp, #0
 800d972:	60f8      	str	r0, [r7, #12]
 800d974:	60b9      	str	r1, [r7, #8]
 800d976:	4613      	mov	r3, r2
 800d978:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d97e:	2300      	movs	r3, #0
 800d980:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800d984:	2300      	movs	r3, #0
 800d986:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800d98e:	68bb      	ldr	r3, [r7, #8]
 800d990:	781a      	ldrb	r2, [r3, #0]
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	785a      	ldrb	r2, [r3, #1]
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800d99e:	68bb      	ldr	r3, [r7, #8]
 800d9a0:	3302      	adds	r3, #2
 800d9a2:	781b      	ldrb	r3, [r3, #0]
 800d9a4:	b29a      	uxth	r2, r3
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	3303      	adds	r3, #3
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	b29b      	uxth	r3, r3
 800d9ae:	021b      	lsls	r3, r3, #8
 800d9b0:	b29b      	uxth	r3, r3
 800d9b2:	4313      	orrs	r3, r2
 800d9b4:	b29a      	uxth	r2, r3
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800d9ba:	68bb      	ldr	r3, [r7, #8]
 800d9bc:	791a      	ldrb	r2, [r3, #4]
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800d9c2:	68bb      	ldr	r3, [r7, #8]
 800d9c4:	795a      	ldrb	r2, [r3, #5]
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	799a      	ldrb	r2, [r3, #6]
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	79da      	ldrb	r2, [r3, #7]
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	7a1a      	ldrb	r2, [r3, #8]
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d9e2:	88fb      	ldrh	r3, [r7, #6]
 800d9e4:	2b09      	cmp	r3, #9
 800d9e6:	d95f      	bls.n	800daa8 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800d9e8:	2309      	movs	r3, #9
 800d9ea:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d9f0:	e051      	b.n	800da96 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d9f2:	f107 0316 	add.w	r3, r7, #22
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d9fa:	f000 f8e8 	bl	800dbce <USBH_GetNextDesc>
 800d9fe:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800da00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da02:	785b      	ldrb	r3, [r3, #1]
 800da04:	2b04      	cmp	r3, #4
 800da06:	d146      	bne.n	800da96 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800da08:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800da0c:	221a      	movs	r2, #26
 800da0e:	fb02 f303 	mul.w	r3, r2, r3
 800da12:	3308      	adds	r3, #8
 800da14:	68fa      	ldr	r2, [r7, #12]
 800da16:	4413      	add	r3, r2
 800da18:	3302      	adds	r3, #2
 800da1a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 800da1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da1e:	69f8      	ldr	r0, [r7, #28]
 800da20:	f000 f846 	bl	800dab0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800da24:	2300      	movs	r3, #0
 800da26:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800da2a:	2300      	movs	r3, #0
 800da2c:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800da2e:	e022      	b.n	800da76 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 800da30:	f107 0316 	add.w	r3, r7, #22
 800da34:	4619      	mov	r1, r3
 800da36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da38:	f000 f8c9 	bl	800dbce <USBH_GetNextDesc>
 800da3c:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800da3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da40:	785b      	ldrb	r3, [r3, #1]
 800da42:	2b05      	cmp	r3, #5
 800da44:	d117      	bne.n	800da76 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800da46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800da4a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800da4e:	3201      	adds	r2, #1
 800da50:	00d2      	lsls	r2, r2, #3
 800da52:	211a      	movs	r1, #26
 800da54:	fb01 f303 	mul.w	r3, r1, r3
 800da58:	4413      	add	r3, r2
 800da5a:	3308      	adds	r3, #8
 800da5c:	68fa      	ldr	r2, [r7, #12]
 800da5e:	4413      	add	r3, r2
 800da60:	3304      	adds	r3, #4
 800da62:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 800da64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da66:	69b8      	ldr	r0, [r7, #24]
 800da68:	f000 f851 	bl	800db0e <USBH_ParseEPDesc>
            ep_ix++;
 800da6c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800da70:	3301      	adds	r3, #1
 800da72:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800da76:	69fb      	ldr	r3, [r7, #28]
 800da78:	791b      	ldrb	r3, [r3, #4]
 800da7a:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800da7e:	429a      	cmp	r2, r3
 800da80:	d204      	bcs.n	800da8c <USBH_ParseCfgDesc+0x120>
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	885a      	ldrh	r2, [r3, #2]
 800da86:	8afb      	ldrh	r3, [r7, #22]
 800da88:	429a      	cmp	r2, r3
 800da8a:	d8d1      	bhi.n	800da30 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800da8c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800da90:	3301      	adds	r3, #1
 800da92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800da96:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800da9a:	2b01      	cmp	r3, #1
 800da9c:	d804      	bhi.n	800daa8 <USBH_ParseCfgDesc+0x13c>
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	885a      	ldrh	r2, [r3, #2]
 800daa2:	8afb      	ldrh	r3, [r7, #22]
 800daa4:	429a      	cmp	r2, r3
 800daa6:	d8a4      	bhi.n	800d9f2 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800daa8:	bf00      	nop
 800daaa:	3728      	adds	r7, #40	; 0x28
 800daac:	46bd      	mov	sp, r7
 800daae:	bd80      	pop	{r7, pc}

0800dab0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 800dab0:	b480      	push	{r7}
 800dab2:	b083      	sub	sp, #12
 800dab4:	af00      	add	r7, sp, #0
 800dab6:	6078      	str	r0, [r7, #4]
 800dab8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800daba:	683b      	ldr	r3, [r7, #0]
 800dabc:	781a      	ldrb	r2, [r3, #0]
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800dac2:	683b      	ldr	r3, [r7, #0]
 800dac4:	785a      	ldrb	r2, [r3, #1]
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800daca:	683b      	ldr	r3, [r7, #0]
 800dacc:	789a      	ldrb	r2, [r3, #2]
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800dad2:	683b      	ldr	r3, [r7, #0]
 800dad4:	78da      	ldrb	r2, [r3, #3]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	791a      	ldrb	r2, [r3, #4]
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	795a      	ldrb	r2, [r3, #5]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800daea:	683b      	ldr	r3, [r7, #0]
 800daec:	799a      	ldrb	r2, [r3, #6]
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	79da      	ldrb	r2, [r3, #7]
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800dafa:	683b      	ldr	r3, [r7, #0]
 800dafc:	7a1a      	ldrb	r2, [r3, #8]
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	721a      	strb	r2, [r3, #8]
}
 800db02:	bf00      	nop
 800db04:	370c      	adds	r7, #12
 800db06:	46bd      	mov	sp, r7
 800db08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db0c:	4770      	bx	lr

0800db0e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800db0e:	b480      	push	{r7}
 800db10:	b083      	sub	sp, #12
 800db12:	af00      	add	r7, sp, #0
 800db14:	6078      	str	r0, [r7, #4]
 800db16:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	781a      	ldrb	r2, [r3, #0]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	785a      	ldrb	r2, [r3, #1]
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800db28:	683b      	ldr	r3, [r7, #0]
 800db2a:	789a      	ldrb	r2, [r3, #2]
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800db30:	683b      	ldr	r3, [r7, #0]
 800db32:	78da      	ldrb	r2, [r3, #3]
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	3304      	adds	r3, #4
 800db3c:	781b      	ldrb	r3, [r3, #0]
 800db3e:	b29a      	uxth	r2, r3
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	3305      	adds	r3, #5
 800db44:	781b      	ldrb	r3, [r3, #0]
 800db46:	b29b      	uxth	r3, r3
 800db48:	021b      	lsls	r3, r3, #8
 800db4a:	b29b      	uxth	r3, r3
 800db4c:	4313      	orrs	r3, r2
 800db4e:	b29a      	uxth	r2, r3
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800db54:	683b      	ldr	r3, [r7, #0]
 800db56:	799a      	ldrb	r2, [r3, #6]
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	719a      	strb	r2, [r3, #6]
}
 800db5c:	bf00      	nop
 800db5e:	370c      	adds	r7, #12
 800db60:	46bd      	mov	sp, r7
 800db62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db66:	4770      	bx	lr

0800db68 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 800db68:	b480      	push	{r7}
 800db6a:	b087      	sub	sp, #28
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	60f8      	str	r0, [r7, #12]
 800db70:	60b9      	str	r1, [r7, #8]
 800db72:	4613      	mov	r3, r2
 800db74:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	3301      	adds	r3, #1
 800db7a:	781b      	ldrb	r3, [r3, #0]
 800db7c:	2b03      	cmp	r3, #3
 800db7e:	d120      	bne.n	800dbc2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	1e9a      	subs	r2, r3, #2
 800db86:	88fb      	ldrh	r3, [r7, #6]
 800db88:	4293      	cmp	r3, r2
 800db8a:	bf28      	it	cs
 800db8c:	4613      	movcs	r3, r2
 800db8e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	3302      	adds	r3, #2
 800db94:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800db96:	2300      	movs	r3, #0
 800db98:	82fb      	strh	r3, [r7, #22]
 800db9a:	e00b      	b.n	800dbb4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800db9c:	8afb      	ldrh	r3, [r7, #22]
 800db9e:	68fa      	ldr	r2, [r7, #12]
 800dba0:	4413      	add	r3, r2
 800dba2:	781a      	ldrb	r2, [r3, #0]
 800dba4:	68bb      	ldr	r3, [r7, #8]
 800dba6:	701a      	strb	r2, [r3, #0]
      pdest++;
 800dba8:	68bb      	ldr	r3, [r7, #8]
 800dbaa:	3301      	adds	r3, #1
 800dbac:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800dbae:	8afb      	ldrh	r3, [r7, #22]
 800dbb0:	3302      	adds	r3, #2
 800dbb2:	82fb      	strh	r3, [r7, #22]
 800dbb4:	8afa      	ldrh	r2, [r7, #22]
 800dbb6:	8abb      	ldrh	r3, [r7, #20]
 800dbb8:	429a      	cmp	r2, r3
 800dbba:	d3ef      	bcc.n	800db9c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800dbbc:	68bb      	ldr	r3, [r7, #8]
 800dbbe:	2200      	movs	r2, #0
 800dbc0:	701a      	strb	r2, [r3, #0]
  }
}
 800dbc2:	bf00      	nop
 800dbc4:	371c      	adds	r7, #28
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbcc:	4770      	bx	lr

0800dbce <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800dbce:	b480      	push	{r7}
 800dbd0:	b085      	sub	sp, #20
 800dbd2:	af00      	add	r7, sp, #0
 800dbd4:	6078      	str	r0, [r7, #4]
 800dbd6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	881a      	ldrh	r2, [r3, #0]
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	781b      	ldrb	r3, [r3, #0]
 800dbe0:	b29b      	uxth	r3, r3
 800dbe2:	4413      	add	r3, r2
 800dbe4:	b29a      	uxth	r2, r3
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	781b      	ldrb	r3, [r3, #0]
 800dbee:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	4413      	add	r3, r2
 800dbf4:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800dbf6:	68fb      	ldr	r3, [r7, #12]
}
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	3714      	adds	r7, #20
 800dbfc:	46bd      	mov	sp, r7
 800dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc02:	4770      	bx	lr

0800dc04 <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b086      	sub	sp, #24
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	60f8      	str	r0, [r7, #12]
 800dc0c:	60b9      	str	r1, [r7, #8]
 800dc0e:	4613      	mov	r3, r2
 800dc10:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800dc12:	2301      	movs	r3, #1
 800dc14:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	789b      	ldrb	r3, [r3, #2]
 800dc1a:	2b01      	cmp	r3, #1
 800dc1c:	d002      	beq.n	800dc24 <USBH_CtlReq+0x20>
 800dc1e:	2b02      	cmp	r3, #2
 800dc20:	d01d      	beq.n	800dc5e <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 800dc22:	e042      	b.n	800dcaa <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	68ba      	ldr	r2, [r7, #8]
 800dc28:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	88fa      	ldrh	r2, [r7, #6]
 800dc2e:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	2201      	movs	r2, #1
 800dc34:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	2202      	movs	r2, #2
 800dc3a:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800dc3c:	2301      	movs	r3, #1
 800dc3e:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dc40:	68fb      	ldr	r3, [r7, #12]
 800dc42:	2203      	movs	r2, #3
 800dc44:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dc54:	2200      	movs	r2, #0
 800dc56:	4619      	mov	r1, r3
 800dc58:	f003 fc26 	bl	80114a8 <osMessagePut>
    break;
 800dc5c:	e025      	b.n	800dcaa <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 800dc5e:	68f8      	ldr	r0, [r7, #12]
 800dc60:	f000 f828 	bl	800dcb4 <USBH_HandleControl>
 800dc64:	4603      	mov	r3, r0
 800dc66:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 800dc68:	7dfb      	ldrb	r3, [r7, #23]
 800dc6a:	2b00      	cmp	r3, #0
 800dc6c:	d108      	bne.n	800dc80 <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 800dc6e:	68fb      	ldr	r3, [r7, #12]
 800dc70:	2201      	movs	r2, #1
 800dc72:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	2200      	movs	r2, #0
 800dc78:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	75fb      	strb	r3, [r7, #23]
    break;
 800dc7e:	e013      	b.n	800dca8 <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 800dc80:	7dfb      	ldrb	r3, [r7, #23]
 800dc82:	2b03      	cmp	r3, #3
 800dc84:	d108      	bne.n	800dc98 <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 800dc86:	68fb      	ldr	r3, [r7, #12]
 800dc88:	2201      	movs	r2, #1
 800dc8a:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	2200      	movs	r2, #0
 800dc90:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800dc92:	2303      	movs	r3, #3
 800dc94:	75fb      	strb	r3, [r7, #23]
    break;
 800dc96:	e007      	b.n	800dca8 <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 800dc98:	7dfb      	ldrb	r3, [r7, #23]
 800dc9a:	2b02      	cmp	r3, #2
 800dc9c:	d104      	bne.n	800dca8 <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	2201      	movs	r2, #1
 800dca2:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800dca4:	2302      	movs	r3, #2
 800dca6:	75fb      	strb	r3, [r7, #23]
    break;
 800dca8:	bf00      	nop
  }
  return status;
 800dcaa:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcac:	4618      	mov	r0, r3
 800dcae:	3718      	adds	r7, #24
 800dcb0:	46bd      	mov	sp, r7
 800dcb2:	bd80      	pop	{r7, pc}

0800dcb4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800dcb4:	b580      	push	{r7, lr}
 800dcb6:	b086      	sub	sp, #24
 800dcb8:	af02      	add	r7, sp, #8
 800dcba:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800dcbc:	2301      	movs	r3, #1
 800dcbe:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	7e1b      	ldrb	r3, [r3, #24]
 800dcc8:	3b01      	subs	r3, #1
 800dcca:	2b0a      	cmp	r3, #10
 800dccc:	f200 821d 	bhi.w	800e10a <USBH_HandleControl+0x456>
 800dcd0:	a201      	add	r2, pc, #4	; (adr r2, 800dcd8 <USBH_HandleControl+0x24>)
 800dcd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcd6:	bf00      	nop
 800dcd8:	0800dd05 	.word	0x0800dd05
 800dcdc:	0800dd1f 	.word	0x0800dd1f
 800dce0:	0800ddc1 	.word	0x0800ddc1
 800dce4:	0800dde7 	.word	0x0800dde7
 800dce8:	0800de73 	.word	0x0800de73
 800dcec:	0800de9d 	.word	0x0800de9d
 800dcf0:	0800df5f 	.word	0x0800df5f
 800dcf4:	0800df81 	.word	0x0800df81
 800dcf8:	0800e013 	.word	0x0800e013
 800dcfc:	0800e039 	.word	0x0800e039
 800dd00:	0800e0cb 	.word	0x0800e0cb
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	f103 0110 	add.w	r1, r3, #16
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	795b      	ldrb	r3, [r3, #5]
 800dd0e:	461a      	mov	r2, r3
 800dd10:	6878      	ldr	r0, [r7, #4]
 800dd12:	f000 fa0b 	bl	800e12c <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2202      	movs	r2, #2
 800dd1a:	761a      	strb	r2, [r3, #24]
    break;
 800dd1c:	e200      	b.n	800e120 <USBH_HandleControl+0x46c>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	795b      	ldrb	r3, [r3, #5]
 800dd22:	4619      	mov	r1, r3
 800dd24:	6878      	ldr	r0, [r7, #4]
 800dd26:	f00c f875 	bl	8019e14 <USBH_LL_GetURBState>
 800dd2a:	4603      	mov	r3, r0
 800dd2c:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800dd2e:	7bbb      	ldrb	r3, [r7, #14]
 800dd30:	2b01      	cmp	r3, #1
 800dd32:	d12c      	bne.n	800dd8e <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800dd34:	687b      	ldr	r3, [r7, #4]
 800dd36:	7c1b      	ldrb	r3, [r3, #16]
 800dd38:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dd3c:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	8adb      	ldrh	r3, [r3, #22]
 800dd42:	2b00      	cmp	r3, #0
 800dd44:	d00a      	beq.n	800dd5c <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800dd46:	7b7b      	ldrb	r3, [r7, #13]
 800dd48:	2b80      	cmp	r3, #128	; 0x80
 800dd4a:	d103      	bne.n	800dd54 <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2203      	movs	r2, #3
 800dd50:	761a      	strb	r2, [r3, #24]
 800dd52:	e00d      	b.n	800dd70 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2205      	movs	r2, #5
 800dd58:	761a      	strb	r2, [r3, #24]
 800dd5a:	e009      	b.n	800dd70 <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 800dd5c:	7b7b      	ldrb	r3, [r7, #13]
 800dd5e:	2b80      	cmp	r3, #128	; 0x80
 800dd60:	d103      	bne.n	800dd6a <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	2209      	movs	r2, #9
 800dd66:	761a      	strb	r2, [r3, #24]
 800dd68:	e002      	b.n	800dd70 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2207      	movs	r2, #7
 800dd6e:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	2203      	movs	r2, #3
 800dd74:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dd84:	2200      	movs	r2, #0
 800dd86:	4619      	mov	r1, r3
 800dd88:	f003 fb8e 	bl	80114a8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800dd8c:	e1bf      	b.n	800e10e <USBH_HandleControl+0x45a>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800dd8e:	7bbb      	ldrb	r3, [r7, #14]
 800dd90:	2b04      	cmp	r3, #4
 800dd92:	d003      	beq.n	800dd9c <USBH_HandleControl+0xe8>
 800dd94:	7bbb      	ldrb	r3, [r7, #14]
 800dd96:	2b02      	cmp	r3, #2
 800dd98:	f040 81b9 	bne.w	800e10e <USBH_HandleControl+0x45a>
        phost->Control.state = CTRL_ERROR;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	220b      	movs	r2, #11
 800dda0:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2203      	movs	r2, #3
 800dda6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	4619      	mov	r1, r3
 800ddba:	f003 fb75 	bl	80114a8 <osMessagePut>
    break;
 800ddbe:	e1a6      	b.n	800e10e <USBH_HandleControl+0x45a>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800ddc6:	b29a      	uxth	r2, r3
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6899      	ldr	r1, [r3, #8]
 800ddd0:	687b      	ldr	r3, [r7, #4]
 800ddd2:	899a      	ldrh	r2, [r3, #12]
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	791b      	ldrb	r3, [r3, #4]
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f000 f9e6 	bl	800e1aa <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	2204      	movs	r2, #4
 800dde2:	761a      	strb	r2, [r3, #24]
    break;
 800dde4:	e19c      	b.n	800e120 <USBH_HandleControl+0x46c>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	791b      	ldrb	r3, [r3, #4]
 800ddea:	4619      	mov	r1, r3
 800ddec:	6878      	ldr	r0, [r7, #4]
 800ddee:	f00c f811 	bl	8019e14 <USBH_LL_GetURBState>
 800ddf2:	4603      	mov	r3, r0
 800ddf4:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800ddf6:	7bbb      	ldrb	r3, [r7, #14]
 800ddf8:	2b01      	cmp	r3, #1
 800ddfa:	d110      	bne.n	800de1e <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	2209      	movs	r2, #9
 800de00:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	2203      	movs	r2, #3
 800de06:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800de0a:	687b      	ldr	r3, [r7, #4]
 800de0c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800de16:	2200      	movs	r2, #0
 800de18:	4619      	mov	r1, r3
 800de1a:	f003 fb45 	bl	80114a8 <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800de1e:	7bbb      	ldrb	r3, [r7, #14]
 800de20:	2b05      	cmp	r3, #5
 800de22:	d110      	bne.n	800de46 <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800de24:	2303      	movs	r3, #3
 800de26:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	2203      	movs	r2, #3
 800de2c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800de3c:	2200      	movs	r2, #0
 800de3e:	4619      	mov	r1, r3
 800de40:	f003 fb32 	bl	80114a8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800de44:	e165      	b.n	800e112 <USBH_HandleControl+0x45e>
      if (URB_Status == USBH_URB_ERROR)
 800de46:	7bbb      	ldrb	r3, [r7, #14]
 800de48:	2b04      	cmp	r3, #4
 800de4a:	f040 8162 	bne.w	800e112 <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	220b      	movs	r2, #11
 800de52:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2203      	movs	r2, #3
 800de58:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800de68:	2200      	movs	r2, #0
 800de6a:	4619      	mov	r1, r3
 800de6c:	f003 fb1c 	bl	80114a8 <osMessagePut>
    break;
 800de70:	e14f      	b.n	800e112 <USBH_HandleControl+0x45e>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	6899      	ldr	r1, [r3, #8]
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	899a      	ldrh	r2, [r3, #12]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	795b      	ldrb	r3, [r3, #5]
 800de7e:	2001      	movs	r0, #1
 800de80:	9000      	str	r0, [sp, #0]
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f000 f96c 	bl	800e160 <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800de8e:	b29a      	uxth	r2, r3
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2206      	movs	r2, #6
 800de98:	761a      	strb	r2, [r3, #24]
    break;
 800de9a:	e141      	b.n	800e120 <USBH_HandleControl+0x46c>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	795b      	ldrb	r3, [r3, #5]
 800dea0:	4619      	mov	r1, r3
 800dea2:	6878      	ldr	r0, [r7, #4]
 800dea4:	f00b ffb6 	bl	8019e14 <USBH_LL_GetURBState>
 800dea8:	4603      	mov	r3, r0
 800deaa:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800deac:	7bbb      	ldrb	r3, [r7, #14]
 800deae:	2b01      	cmp	r3, #1
 800deb0:	d111      	bne.n	800ded6 <USBH_HandleControl+0x222>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2207      	movs	r2, #7
 800deb6:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2203      	movs	r2, #3
 800debc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800decc:	2200      	movs	r2, #0
 800dece:	4619      	mov	r1, r3
 800ded0:	f003 faea 	bl	80114a8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ded4:	e11f      	b.n	800e116 <USBH_HandleControl+0x462>
    else if  (URB_Status == USBH_URB_STALL)
 800ded6:	7bbb      	ldrb	r3, [r7, #14]
 800ded8:	2b05      	cmp	r3, #5
 800deda:	d113      	bne.n	800df04 <USBH_HandleControl+0x250>
      phost->Control.state = CTRL_STALLED;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	220c      	movs	r2, #12
 800dee0:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800dee2:	2303      	movs	r3, #3
 800dee4:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dee6:	687b      	ldr	r3, [r7, #4]
 800dee8:	2203      	movs	r2, #3
 800deea:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800defa:	2200      	movs	r2, #0
 800defc:	4619      	mov	r1, r3
 800defe:	f003 fad3 	bl	80114a8 <osMessagePut>
    break;
 800df02:	e108      	b.n	800e116 <USBH_HandleControl+0x462>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800df04:	7bbb      	ldrb	r3, [r7, #14]
 800df06:	2b02      	cmp	r3, #2
 800df08:	d111      	bne.n	800df2e <USBH_HandleControl+0x27a>
      phost->Control.state = CTRL_DATA_OUT;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	2205      	movs	r2, #5
 800df0e:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2203      	movs	r2, #3
 800df14:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800df24:	2200      	movs	r2, #0
 800df26:	4619      	mov	r1, r3
 800df28:	f003 fabe 	bl	80114a8 <osMessagePut>
    break;
 800df2c:	e0f3      	b.n	800e116 <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 800df2e:	7bbb      	ldrb	r3, [r7, #14]
 800df30:	2b04      	cmp	r3, #4
 800df32:	f040 80f0 	bne.w	800e116 <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	220b      	movs	r2, #11
 800df3a:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800df3c:	2302      	movs	r3, #2
 800df3e:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	2203      	movs	r2, #3
 800df44:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800df48:	687b      	ldr	r3, [r7, #4]
 800df4a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800df54:	2200      	movs	r2, #0
 800df56:	4619      	mov	r1, r3
 800df58:	f003 faa6 	bl	80114a8 <osMessagePut>
    break;
 800df5c:	e0db      	b.n	800e116 <USBH_HandleControl+0x462>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	791b      	ldrb	r3, [r3, #4]
 800df62:	2200      	movs	r2, #0
 800df64:	2100      	movs	r1, #0
 800df66:	6878      	ldr	r0, [r7, #4]
 800df68:	f000 f91f 	bl	800e1aa <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800df72:	b29a      	uxth	r2, r3
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	2208      	movs	r2, #8
 800df7c:	761a      	strb	r2, [r3, #24]

    break;
 800df7e:	e0cf      	b.n	800e120 <USBH_HandleControl+0x46c>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	791b      	ldrb	r3, [r3, #4]
 800df84:	4619      	mov	r1, r3
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f00b ff44 	bl	8019e14 <USBH_LL_GetURBState>
 800df8c:	4603      	mov	r3, r0
 800df8e:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 800df90:	7bbb      	ldrb	r3, [r7, #14]
 800df92:	2b01      	cmp	r3, #1
 800df94:	d113      	bne.n	800dfbe <USBH_HandleControl+0x30a>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	220d      	movs	r2, #13
 800df9a:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800df9c:	2300      	movs	r3, #0
 800df9e:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2203      	movs	r2, #3
 800dfa4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	4619      	mov	r1, r3
 800dfb8:	f003 fa76 	bl	80114a8 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800dfbc:	e0ad      	b.n	800e11a <USBH_HandleControl+0x466>
    else if (URB_Status == USBH_URB_ERROR)
 800dfbe:	7bbb      	ldrb	r3, [r7, #14]
 800dfc0:	2b04      	cmp	r3, #4
 800dfc2:	d111      	bne.n	800dfe8 <USBH_HandleControl+0x334>
      phost->Control.state = CTRL_ERROR;
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	220b      	movs	r2, #11
 800dfc8:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2203      	movs	r2, #3
 800dfce:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dfde:	2200      	movs	r2, #0
 800dfe0:	4619      	mov	r1, r3
 800dfe2:	f003 fa61 	bl	80114a8 <osMessagePut>
    break;
 800dfe6:	e098      	b.n	800e11a <USBH_HandleControl+0x466>
      if(URB_Status == USBH_URB_STALL)
 800dfe8:	7bbb      	ldrb	r3, [r7, #14]
 800dfea:	2b05      	cmp	r3, #5
 800dfec:	f040 8095 	bne.w	800e11a <USBH_HandleControl+0x466>
        status = USBH_NOT_SUPPORTED;
 800dff0:	2303      	movs	r3, #3
 800dff2:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	2203      	movs	r2, #3
 800dff8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e008:	2200      	movs	r2, #0
 800e00a:	4619      	mov	r1, r3
 800e00c:	f003 fa4c 	bl	80114a8 <osMessagePut>
    break;
 800e010:	e083      	b.n	800e11a <USBH_HandleControl+0x466>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	795b      	ldrb	r3, [r3, #5]
 800e016:	2201      	movs	r2, #1
 800e018:	9200      	str	r2, [sp, #0]
 800e01a:	2200      	movs	r2, #0
 800e01c:	2100      	movs	r1, #0
 800e01e:	6878      	ldr	r0, [r7, #4]
 800e020:	f000 f89e 	bl	800e160 <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800e02a:	b29a      	uxth	r2, r3
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	220a      	movs	r2, #10
 800e034:	761a      	strb	r2, [r3, #24]
    break;
 800e036:	e073      	b.n	800e120 <USBH_HandleControl+0x46c>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	795b      	ldrb	r3, [r3, #5]
 800e03c:	4619      	mov	r1, r3
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f00b fee8 	bl	8019e14 <USBH_LL_GetURBState>
 800e044:	4603      	mov	r3, r0
 800e046:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800e048:	7bbb      	ldrb	r3, [r7, #14]
 800e04a:	2b01      	cmp	r3, #1
 800e04c:	d113      	bne.n	800e076 <USBH_HandleControl+0x3c2>
    {
      status = USBH_OK;
 800e04e:	2300      	movs	r3, #0
 800e050:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	220d      	movs	r2, #13
 800e056:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2203      	movs	r2, #3
 800e05c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e06c:	2200      	movs	r2, #0
 800e06e:	4619      	mov	r1, r3
 800e070:	f003 fa1a 	bl	80114a8 <osMessagePut>
#endif
#endif
      }

    }
    break;
 800e074:	e053      	b.n	800e11e <USBH_HandleControl+0x46a>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800e076:	7bbb      	ldrb	r3, [r7, #14]
 800e078:	2b02      	cmp	r3, #2
 800e07a:	d111      	bne.n	800e0a0 <USBH_HandleControl+0x3ec>
      phost->Control.state = CTRL_STATUS_OUT;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	2209      	movs	r2, #9
 800e080:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2203      	movs	r2, #3
 800e086:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e096:	2200      	movs	r2, #0
 800e098:	4619      	mov	r1, r3
 800e09a:	f003 fa05 	bl	80114a8 <osMessagePut>
    break;
 800e09e:	e03e      	b.n	800e11e <USBH_HandleControl+0x46a>
      if (URB_Status == USBH_URB_ERROR)
 800e0a0:	7bbb      	ldrb	r3, [r7, #14]
 800e0a2:	2b04      	cmp	r3, #4
 800e0a4:	d13b      	bne.n	800e11e <USBH_HandleControl+0x46a>
        phost->Control.state = CTRL_ERROR;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	220b      	movs	r2, #11
 800e0aa:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2203      	movs	r2, #3
 800e0b0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	4619      	mov	r1, r3
 800e0c4:	f003 f9f0 	bl	80114a8 <osMessagePut>
    break;
 800e0c8:	e029      	b.n	800e11e <USBH_HandleControl+0x46a>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	7e5b      	ldrb	r3, [r3, #25]
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	b2da      	uxtb	r2, r3
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	765a      	strb	r2, [r3, #25]
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	7e5b      	ldrb	r3, [r3, #25]
 800e0da:	2b02      	cmp	r3, #2
 800e0dc:	d809      	bhi.n	800e0f2 <USBH_HandleControl+0x43e>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800e0de:	6878      	ldr	r0, [r7, #4]
 800e0e0:	f00b fda9 	bl	8019c36 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	2201      	movs	r2, #1
 800e0e8:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800e0ea:	687b      	ldr	r3, [r7, #4]
 800e0ec:	2201      	movs	r2, #1
 800e0ee:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800e0f0:	e016      	b.n	800e120 <USBH_HandleControl+0x46c>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e0f8:	2106      	movs	r1, #6
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2200      	movs	r2, #0
 800e102:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800e104:	2302      	movs	r3, #2
 800e106:	73fb      	strb	r3, [r7, #15]
    break;
 800e108:	e00a      	b.n	800e120 <USBH_HandleControl+0x46c>

  default:
    break;
 800e10a:	bf00      	nop
 800e10c:	e008      	b.n	800e120 <USBH_HandleControl+0x46c>
    break;
 800e10e:	bf00      	nop
 800e110:	e006      	b.n	800e120 <USBH_HandleControl+0x46c>
    break;
 800e112:	bf00      	nop
 800e114:	e004      	b.n	800e120 <USBH_HandleControl+0x46c>
    break;
 800e116:	bf00      	nop
 800e118:	e002      	b.n	800e120 <USBH_HandleControl+0x46c>
    break;
 800e11a:	bf00      	nop
 800e11c:	e000      	b.n	800e120 <USBH_HandleControl+0x46c>
    break;
 800e11e:	bf00      	nop
  }
  return status;
 800e120:	7bfb      	ldrb	r3, [r7, #15]
}
 800e122:	4618      	mov	r0, r3
 800e124:	3710      	adds	r7, #16
 800e126:	46bd      	mov	sp, r7
 800e128:	bd80      	pop	{r7, pc}
 800e12a:	bf00      	nop

0800e12c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b088      	sub	sp, #32
 800e130:	af04      	add	r7, sp, #16
 800e132:	60f8      	str	r0, [r7, #12]
 800e134:	60b9      	str	r1, [r7, #8]
 800e136:	4613      	mov	r3, r2
 800e138:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800e13a:	79f9      	ldrb	r1, [r7, #7]
 800e13c:	2300      	movs	r3, #0
 800e13e:	9303      	str	r3, [sp, #12]
 800e140:	2308      	movs	r3, #8
 800e142:	9302      	str	r3, [sp, #8]
 800e144:	68bb      	ldr	r3, [r7, #8]
 800e146:	9301      	str	r3, [sp, #4]
 800e148:	2300      	movs	r3, #0
 800e14a:	9300      	str	r3, [sp, #0]
 800e14c:	2300      	movs	r3, #0
 800e14e:	2200      	movs	r2, #0
 800e150:	68f8      	ldr	r0, [r7, #12]
 800e152:	f00b fe2e 	bl	8019db2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800e156:	2300      	movs	r3, #0
}
 800e158:	4618      	mov	r0, r3
 800e15a:	3710      	adds	r7, #16
 800e15c:	46bd      	mov	sp, r7
 800e15e:	bd80      	pop	{r7, pc}

0800e160 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800e160:	b580      	push	{r7, lr}
 800e162:	b088      	sub	sp, #32
 800e164:	af04      	add	r7, sp, #16
 800e166:	60f8      	str	r0, [r7, #12]
 800e168:	60b9      	str	r1, [r7, #8]
 800e16a:	4611      	mov	r1, r2
 800e16c:	461a      	mov	r2, r3
 800e16e:	460b      	mov	r3, r1
 800e170:	80fb      	strh	r3, [r7, #6]
 800e172:	4613      	mov	r3, r2
 800e174:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d001      	beq.n	800e184 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e180:	2300      	movs	r3, #0
 800e182:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800e184:	7979      	ldrb	r1, [r7, #5]
 800e186:	7e3b      	ldrb	r3, [r7, #24]
 800e188:	9303      	str	r3, [sp, #12]
 800e18a:	88fb      	ldrh	r3, [r7, #6]
 800e18c:	9302      	str	r3, [sp, #8]
 800e18e:	68bb      	ldr	r3, [r7, #8]
 800e190:	9301      	str	r3, [sp, #4]
 800e192:	2301      	movs	r3, #1
 800e194:	9300      	str	r3, [sp, #0]
 800e196:	2300      	movs	r3, #0
 800e198:	2200      	movs	r2, #0
 800e19a:	68f8      	ldr	r0, [r7, #12]
 800e19c:	f00b fe09 	bl	8019db2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e1a0:	2300      	movs	r3, #0
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3710      	adds	r7, #16
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}

0800e1aa <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800e1aa:	b580      	push	{r7, lr}
 800e1ac:	b088      	sub	sp, #32
 800e1ae:	af04      	add	r7, sp, #16
 800e1b0:	60f8      	str	r0, [r7, #12]
 800e1b2:	60b9      	str	r1, [r7, #8]
 800e1b4:	4611      	mov	r1, r2
 800e1b6:	461a      	mov	r2, r3
 800e1b8:	460b      	mov	r3, r1
 800e1ba:	80fb      	strh	r3, [r7, #6]
 800e1bc:	4613      	mov	r3, r2
 800e1be:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800e1c0:	7979      	ldrb	r1, [r7, #5]
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	9303      	str	r3, [sp, #12]
 800e1c6:	88fb      	ldrh	r3, [r7, #6]
 800e1c8:	9302      	str	r3, [sp, #8]
 800e1ca:	68bb      	ldr	r3, [r7, #8]
 800e1cc:	9301      	str	r3, [sp, #4]
 800e1ce:	2301      	movs	r3, #1
 800e1d0:	9300      	str	r3, [sp, #0]
 800e1d2:	2300      	movs	r3, #0
 800e1d4:	2201      	movs	r2, #1
 800e1d6:	68f8      	ldr	r0, [r7, #12]
 800e1d8:	f00b fdeb 	bl	8019db2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e1dc:	2300      	movs	r3, #0

}
 800e1de:	4618      	mov	r0, r3
 800e1e0:	3710      	adds	r7, #16
 800e1e2:	46bd      	mov	sp, r7
 800e1e4:	bd80      	pop	{r7, pc}

0800e1e6 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800e1e6:	b580      	push	{r7, lr}
 800e1e8:	b088      	sub	sp, #32
 800e1ea:	af04      	add	r7, sp, #16
 800e1ec:	60f8      	str	r0, [r7, #12]
 800e1ee:	60b9      	str	r1, [r7, #8]
 800e1f0:	4611      	mov	r1, r2
 800e1f2:	461a      	mov	r2, r3
 800e1f4:	460b      	mov	r3, r1
 800e1f6:	80fb      	strh	r3, [r7, #6]
 800e1f8:	4613      	mov	r3, r2
 800e1fa:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e202:	2b00      	cmp	r3, #0
 800e204:	d001      	beq.n	800e20a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e206:	2300      	movs	r3, #0
 800e208:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800e20a:	7979      	ldrb	r1, [r7, #5]
 800e20c:	7e3b      	ldrb	r3, [r7, #24]
 800e20e:	9303      	str	r3, [sp, #12]
 800e210:	88fb      	ldrh	r3, [r7, #6]
 800e212:	9302      	str	r3, [sp, #8]
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	9301      	str	r3, [sp, #4]
 800e218:	2301      	movs	r3, #1
 800e21a:	9300      	str	r3, [sp, #0]
 800e21c:	2302      	movs	r3, #2
 800e21e:	2200      	movs	r2, #0
 800e220:	68f8      	ldr	r0, [r7, #12]
 800e222:	f00b fdc6 	bl	8019db2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e226:	2300      	movs	r3, #0
}
 800e228:	4618      	mov	r0, r3
 800e22a:	3710      	adds	r7, #16
 800e22c:	46bd      	mov	sp, r7
 800e22e:	bd80      	pop	{r7, pc}

0800e230 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800e230:	b580      	push	{r7, lr}
 800e232:	b088      	sub	sp, #32
 800e234:	af04      	add	r7, sp, #16
 800e236:	60f8      	str	r0, [r7, #12]
 800e238:	60b9      	str	r1, [r7, #8]
 800e23a:	4611      	mov	r1, r2
 800e23c:	461a      	mov	r2, r3
 800e23e:	460b      	mov	r3, r1
 800e240:	80fb      	strh	r3, [r7, #6]
 800e242:	4613      	mov	r3, r2
 800e244:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800e246:	7979      	ldrb	r1, [r7, #5]
 800e248:	2300      	movs	r3, #0
 800e24a:	9303      	str	r3, [sp, #12]
 800e24c:	88fb      	ldrh	r3, [r7, #6]
 800e24e:	9302      	str	r3, [sp, #8]
 800e250:	68bb      	ldr	r3, [r7, #8]
 800e252:	9301      	str	r3, [sp, #4]
 800e254:	2301      	movs	r3, #1
 800e256:	9300      	str	r3, [sp, #0]
 800e258:	2302      	movs	r3, #2
 800e25a:	2201      	movs	r2, #1
 800e25c:	68f8      	ldr	r0, [r7, #12]
 800e25e:	f00b fda8 	bl	8019db2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e262:	2300      	movs	r3, #0
}
 800e264:	4618      	mov	r0, r3
 800e266:	3710      	adds	r7, #16
 800e268:	46bd      	mov	sp, r7
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b086      	sub	sp, #24
 800e270:	af04      	add	r7, sp, #16
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	4608      	mov	r0, r1
 800e276:	4611      	mov	r1, r2
 800e278:	461a      	mov	r2, r3
 800e27a:	4603      	mov	r3, r0
 800e27c:	70fb      	strb	r3, [r7, #3]
 800e27e:	460b      	mov	r3, r1
 800e280:	70bb      	strb	r3, [r7, #2]
 800e282:	4613      	mov	r3, r2
 800e284:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800e286:	7878      	ldrb	r0, [r7, #1]
 800e288:	78ba      	ldrb	r2, [r7, #2]
 800e28a:	78f9      	ldrb	r1, [r7, #3]
 800e28c:	8b3b      	ldrh	r3, [r7, #24]
 800e28e:	9302      	str	r3, [sp, #8]
 800e290:	7d3b      	ldrb	r3, [r7, #20]
 800e292:	9301      	str	r3, [sp, #4]
 800e294:	7c3b      	ldrb	r3, [r7, #16]
 800e296:	9300      	str	r3, [sp, #0]
 800e298:	4603      	mov	r3, r0
 800e29a:	6878      	ldr	r0, [r7, #4]
 800e29c:	f00b fd3b 	bl	8019d16 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800e2a0:	2300      	movs	r3, #0

}
 800e2a2:	4618      	mov	r0, r3
 800e2a4:	3708      	adds	r7, #8
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	bd80      	pop	{r7, pc}

0800e2aa <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800e2aa:	b580      	push	{r7, lr}
 800e2ac:	b082      	sub	sp, #8
 800e2ae:	af00      	add	r7, sp, #0
 800e2b0:	6078      	str	r0, [r7, #4]
 800e2b2:	460b      	mov	r3, r1
 800e2b4:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800e2b6:	78fb      	ldrb	r3, [r7, #3]
 800e2b8:	4619      	mov	r1, r3
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f00b fd5a 	bl	8019d74 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e2c0:	2300      	movs	r3, #0

}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3708      	adds	r7, #8
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}

0800e2ca <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e2ca:	b580      	push	{r7, lr}
 800e2cc:	b084      	sub	sp, #16
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	6078      	str	r0, [r7, #4]
 800e2d2:	460b      	mov	r3, r1
 800e2d4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f000 f831 	bl	800e33e <USBH_GetFreePipe>
 800e2dc:	4603      	mov	r3, r0
 800e2de:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e2e0:	89fb      	ldrh	r3, [r7, #14]
 800e2e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e2e6:	4293      	cmp	r3, r2
 800e2e8:	d007      	beq.n	800e2fa <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800e2ea:	78fb      	ldrb	r3, [r7, #3]
 800e2ec:	89fa      	ldrh	r2, [r7, #14]
 800e2ee:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	32e0      	adds	r2, #224	; 0xe0
 800e2f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800e2fa:	89fb      	ldrh	r3, [r7, #14]
 800e2fc:	b2db      	uxtb	r3, r3
}
 800e2fe:	4618      	mov	r0, r3
 800e300:	3710      	adds	r7, #16
 800e302:	46bd      	mov	sp, r7
 800e304:	bd80      	pop	{r7, pc}

0800e306 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e306:	b480      	push	{r7}
 800e308:	b083      	sub	sp, #12
 800e30a:	af00      	add	r7, sp, #0
 800e30c:	6078      	str	r0, [r7, #4]
 800e30e:	460b      	mov	r3, r1
 800e310:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800e312:	78fb      	ldrb	r3, [r7, #3]
 800e314:	2b0a      	cmp	r3, #10
 800e316:	d80b      	bhi.n	800e330 <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800e318:	78fa      	ldrb	r2, [r7, #3]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	32e0      	adds	r2, #224	; 0xe0
 800e31e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e322:	78fa      	ldrb	r2, [r7, #3]
 800e324:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	32e0      	adds	r2, #224	; 0xe0
 800e32c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 800e330:	2300      	movs	r3, #0
}
 800e332:	4618      	mov	r0, r3
 800e334:	370c      	adds	r7, #12
 800e336:	46bd      	mov	sp, r7
 800e338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33c:	4770      	bx	lr

0800e33e <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800e33e:	b480      	push	{r7}
 800e340:	b085      	sub	sp, #20
 800e342:	af00      	add	r7, sp, #0
 800e344:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e346:	2300      	movs	r3, #0
 800e348:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800e34a:	2300      	movs	r3, #0
 800e34c:	73fb      	strb	r3, [r7, #15]
 800e34e:	e00e      	b.n	800e36e <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e350:	7bfa      	ldrb	r2, [r7, #15]
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	32e0      	adds	r2, #224	; 0xe0
 800e356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e35a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d102      	bne.n	800e368 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800e362:	7bfb      	ldrb	r3, [r7, #15]
 800e364:	b29b      	uxth	r3, r3
 800e366:	e007      	b.n	800e378 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800e368:	7bfb      	ldrb	r3, [r7, #15]
 800e36a:	3301      	adds	r3, #1
 800e36c:	73fb      	strb	r3, [r7, #15]
 800e36e:	7bfb      	ldrb	r3, [r7, #15]
 800e370:	2b0a      	cmp	r3, #10
 800e372:	d9ed      	bls.n	800e350 <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 800e374:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e378:	4618      	mov	r0, r3
 800e37a:	3714      	adds	r7, #20
 800e37c:	46bd      	mov	sp, r7
 800e37e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e382:	4770      	bx	lr

0800e384 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 800e384:	b480      	push	{r7}
 800e386:	b083      	sub	sp, #12
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
    {
 800e38c:	4a04      	ldr	r2, [pc, #16]	; (800e3a0 <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	601a      	str	r2, [r3, #0]
    }
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	4618      	mov	r0, r3
 800e396:	370c      	adds	r7, #12
 800e398:	46bd      	mov	sp, r7
 800e39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e39e:	4770      	bx	lr
 800e3a0:	08024800 	.word	0x08024800

0800e3a4 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800e3a4:	b580      	push	{r7, lr}
 800e3a6:	b082      	sub	sp, #8
 800e3a8:	af00      	add	r7, sp, #0
 800e3aa:	6078      	str	r0, [r7, #4]
    }
 800e3ac:	6878      	ldr	r0, [r7, #4]
 800e3ae:	f7ff ffe9 	bl	800e384 <_ZN8touchgfx15TouchControllerD1Ev>
 800e3b2:	2104      	movs	r1, #4
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f014 f8e9 	bl	802258c <_ZdlPvj>
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	4618      	mov	r0, r3
 800e3be:	3708      	adds	r7, #8
 800e3c0:	46bd      	mov	sp, r7
 800e3c2:	bd80      	pop	{r7, pc}

0800e3c4 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800e3c4:	b480      	push	{r7}
 800e3c6:	b085      	sub	sp, #20
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	60f8      	str	r0, [r7, #12]
 800e3cc:	4608      	mov	r0, r1
 800e3ce:	4611      	mov	r1, r2
 800e3d0:	461a      	mov	r2, r3
 800e3d2:	4603      	mov	r3, r0
 800e3d4:	817b      	strh	r3, [r7, #10]
 800e3d6:	460b      	mov	r3, r1
 800e3d8:	813b      	strh	r3, [r7, #8]
 800e3da:	4613      	mov	r3, r2
 800e3dc:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800e3de:	68fb      	ldr	r3, [r7, #12]
 800e3e0:	897a      	ldrh	r2, [r7, #10]
 800e3e2:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	893a      	ldrh	r2, [r7, #8]
 800e3e8:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	88fa      	ldrh	r2, [r7, #6]
 800e3ee:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	8b3a      	ldrh	r2, [r7, #24]
 800e3f4:	80da      	strh	r2, [r3, #6]
    }
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3714      	adds	r7, #20
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e402:	4770      	bx	lr

0800e404 <_ZNK8touchgfx4Rect5rightEv>:
     *
     *        Gets the x coordinate of the right edge of the Rect.
     *
     * @return x coordinate of the right edge.
     */
    inline int16_t right() const
 800e404:	b480      	push	{r7}
 800e406:	b083      	sub	sp, #12
 800e408:	af00      	add	r7, sp, #0
 800e40a:	6078      	str	r0, [r7, #4]
    {
        return x + width;
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e412:	b29a      	uxth	r2, r3
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e41a:	b29b      	uxth	r3, r3
 800e41c:	4413      	add	r3, r2
 800e41e:	b29b      	uxth	r3, r3
 800e420:	b21b      	sxth	r3, r3
    }
 800e422:	4618      	mov	r0, r3
 800e424:	370c      	adds	r7, #12
 800e426:	46bd      	mov	sp, r7
 800e428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e42c:	4770      	bx	lr

0800e42e <_ZNK8touchgfx4Rect6bottomEv>:
     *
     *        Gets the y coordinate of the bottom edge of the Rect.
     *
     * @return y coordinate of the buttom edge.
     */
    inline int16_t bottom() const
 800e42e:	b480      	push	{r7}
 800e430:	b083      	sub	sp, #12
 800e432:	af00      	add	r7, sp, #0
 800e434:	6078      	str	r0, [r7, #4]
    {
        return y + height;
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e43c:	b29a      	uxth	r2, r3
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e444:	b29b      	uxth	r3, r3
 800e446:	4413      	add	r3, r2
 800e448:	b29b      	uxth	r3, r3
 800e44a:	b21b      	sxth	r3, r3
    }
 800e44c:	4618      	mov	r0, r3
 800e44e:	370c      	adds	r7, #12
 800e450:	46bd      	mov	sp, r7
 800e452:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e456:	4770      	bx	lr

0800e458 <_ZNK8touchgfx4Rect9intersectEss>:
     * @param otherX The x coordinate of the point.
     * @param otherY The y coordinate of the point.
     *
     * @return true if point lies inside rectangle.
     */
    bool intersect(int16_t otherX, int16_t otherY) const
 800e458:	b580      	push	{r7, lr}
 800e45a:	b082      	sub	sp, #8
 800e45c:	af00      	add	r7, sp, #0
 800e45e:	6078      	str	r0, [r7, #4]
 800e460:	460b      	mov	r3, r1
 800e462:	807b      	strh	r3, [r7, #2]
 800e464:	4613      	mov	r3, r2
 800e466:	803b      	strh	r3, [r7, #0]
    {
        return (otherX >= x && otherX < right() &&
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	f9b3 3000 	ldrsh.w	r3, [r3]
                otherY >= y && otherY < bottom());
 800e46e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e472:	429a      	cmp	r2, r3
 800e474:	db1a      	blt.n	800e4ac <_ZNK8touchgfx4Rect9intersectEss+0x54>
        return (otherX >= x && otherX < right() &&
 800e476:	6878      	ldr	r0, [r7, #4]
 800e478:	f7ff ffc4 	bl	800e404 <_ZNK8touchgfx4Rect5rightEv>
 800e47c:	4603      	mov	r3, r0
 800e47e:	461a      	mov	r2, r3
 800e480:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e484:	4293      	cmp	r3, r2
 800e486:	da11      	bge.n	800e4ac <_ZNK8touchgfx4Rect9intersectEss+0x54>
                otherY >= y && otherY < bottom());
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        return (otherX >= x && otherX < right() &&
 800e48e:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e492:	429a      	cmp	r2, r3
 800e494:	db0a      	blt.n	800e4ac <_ZNK8touchgfx4Rect9intersectEss+0x54>
                otherY >= y && otherY < bottom());
 800e496:	6878      	ldr	r0, [r7, #4]
 800e498:	f7ff ffc9 	bl	800e42e <_ZNK8touchgfx4Rect6bottomEv>
 800e49c:	4603      	mov	r3, r0
 800e49e:	461a      	mov	r2, r3
 800e4a0:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	da01      	bge.n	800e4ac <_ZNK8touchgfx4Rect9intersectEss+0x54>
 800e4a8:	2301      	movs	r3, #1
 800e4aa:	e000      	b.n	800e4ae <_ZNK8touchgfx4Rect9intersectEss+0x56>
 800e4ac:	2300      	movs	r3, #0
    }
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3708      	adds	r7, #8
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}

0800e4b6 <_ZNK8touchgfx4Rect9intersectERKS0_>:
     *
     * @param other The other rectangle.
     *
     * @return true if the two rectangles intersect.
     */
    bool intersect(const Rect& other) const
 800e4b6:	b590      	push	{r4, r7, lr}
 800e4b8:	b083      	sub	sp, #12
 800e4ba:	af00      	add	r7, sp, #0
 800e4bc:	6078      	str	r0, [r7, #4]
 800e4be:	6039      	str	r1, [r7, #0]
    {
        return !(x >= other.right() || right() <= other.x ||
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f9b3 4000 	ldrsh.w	r4, [r3]
 800e4c6:	6838      	ldr	r0, [r7, #0]
 800e4c8:	f7ff ff9c 	bl	800e404 <_ZNK8touchgfx4Rect5rightEv>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	429c      	cmp	r4, r3
 800e4d0:	da1e      	bge.n	800e510 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
 800e4d2:	6878      	ldr	r0, [r7, #4]
 800e4d4:	f7ff ff96 	bl	800e404 <_ZNK8touchgfx4Rect5rightEv>
 800e4d8:	4603      	mov	r3, r0
 800e4da:	461a      	mov	r2, r3
 800e4dc:	683b      	ldr	r3, [r7, #0]
 800e4de:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e4e2:	429a      	cmp	r2, r3
 800e4e4:	dd14      	ble.n	800e510 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
                 y >= other.bottom() || bottom() <= other.y);
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 800e4ec:	6838      	ldr	r0, [r7, #0]
 800e4ee:	f7ff ff9e 	bl	800e42e <_ZNK8touchgfx4Rect6bottomEv>
 800e4f2:	4603      	mov	r3, r0
        return !(x >= other.right() || right() <= other.x ||
 800e4f4:	429c      	cmp	r4, r3
 800e4f6:	da0b      	bge.n	800e510 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
                 y >= other.bottom() || bottom() <= other.y);
 800e4f8:	6878      	ldr	r0, [r7, #4]
 800e4fa:	f7ff ff98 	bl	800e42e <_ZNK8touchgfx4Rect6bottomEv>
 800e4fe:	4603      	mov	r3, r0
 800e500:	461a      	mov	r2, r3
 800e502:	683b      	ldr	r3, [r7, #0]
 800e504:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        return !(x >= other.right() || right() <= other.x ||
 800e508:	429a      	cmp	r2, r3
 800e50a:	dd01      	ble.n	800e510 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
 800e50c:	2301      	movs	r3, #1
 800e50e:	e000      	b.n	800e512 <_ZNK8touchgfx4Rect9intersectERKS0_+0x5c>
 800e510:	2300      	movs	r3, #0
    }
 800e512:	4618      	mov	r0, r3
 800e514:	370c      	adds	r7, #12
 800e516:	46bd      	mov	sp, r7
 800e518:	bd90      	pop	{r4, r7, pc}

0800e51a <_ZNK8touchgfx4RectanERKS0_>:
     *
     * @param other The other rectangle.
     *
     * @return Intersecting rectangle or Rect(0, 0, 0, 0) in case of no intersection.
     */
    Rect operator &(const Rect& other) const
 800e51a:	b580      	push	{r7, lr}
 800e51c:	b084      	sub	sp, #16
 800e51e:	af00      	add	r7, sp, #0
 800e520:	60f8      	str	r0, [r7, #12]
 800e522:	60b9      	str	r1, [r7, #8]
 800e524:	607a      	str	r2, [r7, #4]
    {
        Rect r = *this;
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	68ba      	ldr	r2, [r7, #8]
 800e52a:	6811      	ldr	r1, [r2, #0]
 800e52c:	6852      	ldr	r2, [r2, #4]
 800e52e:	6019      	str	r1, [r3, #0]
 800e530:	605a      	str	r2, [r3, #4]
        r &= other;
 800e532:	6879      	ldr	r1, [r7, #4]
 800e534:	68f8      	ldr	r0, [r7, #12]
 800e536:	f000 f805 	bl	800e544 <_ZN8touchgfx4RectaNERKS0_>
        return r;
 800e53a:	bf00      	nop
    }
 800e53c:	68f8      	ldr	r0, [r7, #12]
 800e53e:	3710      	adds	r7, #16
 800e540:	46bd      	mov	sp, r7
 800e542:	bd80      	pop	{r7, pc}

0800e544 <_ZN8touchgfx4RectaNERKS0_>:
     *        Assigns this Rect to the intersection of the current Rect and the assigned Rect.
     *        The assignment will result in a Rect(0, 0, 0, 0) if they do not intersect.
     *
     * @param other The rect to intersect with.
     */
    void operator &=(const Rect& other)
 800e544:	b590      	push	{r4, r7, lr}
 800e546:	b085      	sub	sp, #20
 800e548:	af00      	add	r7, sp, #0
 800e54a:	6078      	str	r0, [r7, #4]
 800e54c:	6039      	str	r1, [r7, #0]
    {
        if (intersect(other))
 800e54e:	6839      	ldr	r1, [r7, #0]
 800e550:	6878      	ldr	r0, [r7, #4]
 800e552:	f7ff ffb0 	bl	800e4b6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e556:	4603      	mov	r3, r0
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d05f      	beq.n	800e61c <_ZN8touchgfx4RectaNERKS0_+0xd8>
        {
            int16_t newX = MAX(x, other.x);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e562:	683b      	ldr	r3, [r7, #0]
 800e564:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e568:	429a      	cmp	r2, r3
 800e56a:	dd03      	ble.n	800e574 <_ZN8touchgfx4RectaNERKS0_+0x30>
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e572:	e002      	b.n	800e57a <_ZN8touchgfx4RectaNERKS0_+0x36>
 800e574:	683b      	ldr	r3, [r7, #0]
 800e576:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e57a:	81fb      	strh	r3, [r7, #14]
            int16_t newY = MAX(y, other.y);
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e588:	429a      	cmp	r2, r3
 800e58a:	dd04      	ble.n	800e596 <_ZN8touchgfx4RectaNERKS0_+0x52>
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	3302      	adds	r3, #2
 800e590:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e594:	e002      	b.n	800e59c <_ZN8touchgfx4RectaNERKS0_+0x58>
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e59c:	81bb      	strh	r3, [r7, #12]

            width = MIN(right(), other.right()) - newX;
 800e59e:	6878      	ldr	r0, [r7, #4]
 800e5a0:	f7ff ff30 	bl	800e404 <_ZNK8touchgfx4Rect5rightEv>
 800e5a4:	4603      	mov	r3, r0
 800e5a6:	461c      	mov	r4, r3
 800e5a8:	6838      	ldr	r0, [r7, #0]
 800e5aa:	f7ff ff2b 	bl	800e404 <_ZNK8touchgfx4Rect5rightEv>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	429c      	cmp	r4, r3
 800e5b2:	da05      	bge.n	800e5c0 <_ZN8touchgfx4RectaNERKS0_+0x7c>
 800e5b4:	6878      	ldr	r0, [r7, #4]
 800e5b6:	f7ff ff25 	bl	800e404 <_ZNK8touchgfx4Rect5rightEv>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	b29b      	uxth	r3, r3
 800e5be:	e004      	b.n	800e5ca <_ZN8touchgfx4RectaNERKS0_+0x86>
 800e5c0:	6838      	ldr	r0, [r7, #0]
 800e5c2:	f7ff ff1f 	bl	800e404 <_ZNK8touchgfx4Rect5rightEv>
 800e5c6:	4603      	mov	r3, r0
 800e5c8:	b29b      	uxth	r3, r3
 800e5ca:	89fa      	ldrh	r2, [r7, #14]
 800e5cc:	1a9b      	subs	r3, r3, r2
 800e5ce:	b29b      	uxth	r3, r3
 800e5d0:	b21a      	sxth	r2, r3
 800e5d2:	687b      	ldr	r3, [r7, #4]
 800e5d4:	809a      	strh	r2, [r3, #4]
            height = MIN(bottom(), other.bottom()) - newY;
 800e5d6:	6878      	ldr	r0, [r7, #4]
 800e5d8:	f7ff ff29 	bl	800e42e <_ZNK8touchgfx4Rect6bottomEv>
 800e5dc:	4603      	mov	r3, r0
 800e5de:	461c      	mov	r4, r3
 800e5e0:	6838      	ldr	r0, [r7, #0]
 800e5e2:	f7ff ff24 	bl	800e42e <_ZNK8touchgfx4Rect6bottomEv>
 800e5e6:	4603      	mov	r3, r0
 800e5e8:	429c      	cmp	r4, r3
 800e5ea:	da05      	bge.n	800e5f8 <_ZN8touchgfx4RectaNERKS0_+0xb4>
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f7ff ff1e 	bl	800e42e <_ZNK8touchgfx4Rect6bottomEv>
 800e5f2:	4603      	mov	r3, r0
 800e5f4:	b29b      	uxth	r3, r3
 800e5f6:	e004      	b.n	800e602 <_ZN8touchgfx4RectaNERKS0_+0xbe>
 800e5f8:	6838      	ldr	r0, [r7, #0]
 800e5fa:	f7ff ff18 	bl	800e42e <_ZNK8touchgfx4Rect6bottomEv>
 800e5fe:	4603      	mov	r3, r0
 800e600:	b29b      	uxth	r3, r3
 800e602:	89ba      	ldrh	r2, [r7, #12]
 800e604:	1a9b      	subs	r3, r3, r2
 800e606:	b29b      	uxth	r3, r3
 800e608:	b21a      	sxth	r2, r3
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	80da      	strh	r2, [r3, #6]
            x = newX;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	89fa      	ldrh	r2, [r7, #14]
 800e612:	801a      	strh	r2, [r3, #0]
            y = newY;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	89ba      	ldrh	r2, [r7, #12]
 800e618:	805a      	strh	r2, [r3, #2]
            x = 0;
            y = 0;
            width = 0;
            height = 0;
        }
    }
 800e61a:	e00b      	b.n	800e634 <_ZN8touchgfx4RectaNERKS0_+0xf0>
            x = 0;
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	2200      	movs	r2, #0
 800e620:	801a      	strh	r2, [r3, #0]
            y = 0;
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	2200      	movs	r2, #0
 800e626:	805a      	strh	r2, [r3, #2]
            width = 0;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2200      	movs	r2, #0
 800e62c:	809a      	strh	r2, [r3, #4]
            height = 0;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2200      	movs	r2, #0
 800e632:	80da      	strh	r2, [r3, #6]
    }
 800e634:	bf00      	nop
 800e636:	3714      	adds	r7, #20
 800e638:	46bd      	mov	sp, r7
 800e63a:	bd90      	pop	{r4, r7, pc}

0800e63c <_ZN8touchgfx4Rect11expandToFitERKS0_>:
     *        Increases the area covered by this rectangle to encompass the area covered by
     *        supplied rectangle.
     *
     * @param other The other rectangle.
     */
    void expandToFit(const Rect& other)
 800e63c:	b590      	push	{r4, r7, lr}
 800e63e:	b085      	sub	sp, #20
 800e640:	af00      	add	r7, sp, #0
 800e642:	6078      	str	r0, [r7, #4]
 800e644:	6039      	str	r1, [r7, #0]
    {
        if (!other.isEmpty())
 800e646:	6838      	ldr	r0, [r7, #0]
 800e648:	f000 f884 	bl	800e754 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e64c:	4603      	mov	r3, r0
 800e64e:	f083 0301 	eor.w	r3, r3, #1
 800e652:	b2db      	uxtb	r3, r3
 800e654:	2b00      	cmp	r3, #0
 800e656:	d079      	beq.n	800e74c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x110>
        {
            if (isEmpty())
 800e658:	6878      	ldr	r0, [r7, #4]
 800e65a:	f000 f87b 	bl	800e754 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e65e:	4603      	mov	r3, r0
 800e660:	2b00      	cmp	r3, #0
 800e662:	d014      	beq.n	800e68e <_ZN8touchgfx4Rect11expandToFitERKS0_+0x52>
            {
                x = other.x;
 800e664:	683b      	ldr	r3, [r7, #0]
 800e666:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	801a      	strh	r2, [r3, #0]
                y = other.y;
 800e66e:	683b      	ldr	r3, [r7, #0]
 800e670:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	805a      	strh	r2, [r3, #2]
                width = other.width;
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	809a      	strh	r2, [r3, #4]
                height = other.height;
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	80da      	strh	r2, [r3, #6]
                y = newY;
                width = endPointX - newX;
                height = endPointY - newY;
            }
        }
    }
 800e68c:	e05e      	b.n	800e74c <_ZN8touchgfx4Rect11expandToFitERKS0_+0x110>
                int16_t newX = MIN(x, other.x);
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e694:	683b      	ldr	r3, [r7, #0]
 800e696:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e69a:	429a      	cmp	r2, r3
 800e69c:	da03      	bge.n	800e6a6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6a>
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e6a4:	e002      	b.n	800e6ac <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e6ac:	81fb      	strh	r3, [r7, #14]
                int16_t newY = MIN(y, other.y);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e6ba:	429a      	cmp	r2, r3
 800e6bc:	da04      	bge.n	800e6c8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x8c>
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	3302      	adds	r3, #2
 800e6c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e6c6:	e002      	b.n	800e6ce <_ZN8touchgfx4Rect11expandToFitERKS0_+0x92>
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e6ce:	81bb      	strh	r3, [r7, #12]
                int16_t endPointX = MAX(right(), other.right());
 800e6d0:	6878      	ldr	r0, [r7, #4]
 800e6d2:	f7ff fe97 	bl	800e404 <_ZNK8touchgfx4Rect5rightEv>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	461c      	mov	r4, r3
 800e6da:	6838      	ldr	r0, [r7, #0]
 800e6dc:	f7ff fe92 	bl	800e404 <_ZNK8touchgfx4Rect5rightEv>
 800e6e0:	4603      	mov	r3, r0
 800e6e2:	429c      	cmp	r4, r3
 800e6e4:	dd04      	ble.n	800e6f0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0xb4>
 800e6e6:	6878      	ldr	r0, [r7, #4]
 800e6e8:	f7ff fe8c 	bl	800e404 <_ZNK8touchgfx4Rect5rightEv>
 800e6ec:	4603      	mov	r3, r0
 800e6ee:	e003      	b.n	800e6f8 <_ZN8touchgfx4Rect11expandToFitERKS0_+0xbc>
 800e6f0:	6838      	ldr	r0, [r7, #0]
 800e6f2:	f7ff fe87 	bl	800e404 <_ZNK8touchgfx4Rect5rightEv>
 800e6f6:	4603      	mov	r3, r0
 800e6f8:	817b      	strh	r3, [r7, #10]
                int16_t endPointY = MAX(bottom(), other.bottom());
 800e6fa:	6878      	ldr	r0, [r7, #4]
 800e6fc:	f7ff fe97 	bl	800e42e <_ZNK8touchgfx4Rect6bottomEv>
 800e700:	4603      	mov	r3, r0
 800e702:	461c      	mov	r4, r3
 800e704:	6838      	ldr	r0, [r7, #0]
 800e706:	f7ff fe92 	bl	800e42e <_ZNK8touchgfx4Rect6bottomEv>
 800e70a:	4603      	mov	r3, r0
 800e70c:	429c      	cmp	r4, r3
 800e70e:	dd04      	ble.n	800e71a <_ZN8touchgfx4Rect11expandToFitERKS0_+0xde>
 800e710:	6878      	ldr	r0, [r7, #4]
 800e712:	f7ff fe8c 	bl	800e42e <_ZNK8touchgfx4Rect6bottomEv>
 800e716:	4603      	mov	r3, r0
 800e718:	e003      	b.n	800e722 <_ZN8touchgfx4Rect11expandToFitERKS0_+0xe6>
 800e71a:	6838      	ldr	r0, [r7, #0]
 800e71c:	f7ff fe87 	bl	800e42e <_ZNK8touchgfx4Rect6bottomEv>
 800e720:	4603      	mov	r3, r0
 800e722:	813b      	strh	r3, [r7, #8]
                x = newX;
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	89fa      	ldrh	r2, [r7, #14]
 800e728:	801a      	strh	r2, [r3, #0]
                y = newY;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	89ba      	ldrh	r2, [r7, #12]
 800e72e:	805a      	strh	r2, [r3, #2]
                width = endPointX - newX;
 800e730:	897a      	ldrh	r2, [r7, #10]
 800e732:	89fb      	ldrh	r3, [r7, #14]
 800e734:	1ad3      	subs	r3, r2, r3
 800e736:	b29b      	uxth	r3, r3
 800e738:	b21a      	sxth	r2, r3
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	809a      	strh	r2, [r3, #4]
                height = endPointY - newY;
 800e73e:	893a      	ldrh	r2, [r7, #8]
 800e740:	89bb      	ldrh	r3, [r7, #12]
 800e742:	1ad3      	subs	r3, r2, r3
 800e744:	b29b      	uxth	r3, r3
 800e746:	b21a      	sxth	r2, r3
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	80da      	strh	r2, [r3, #6]
    }
 800e74c:	bf00      	nop
 800e74e:	3714      	adds	r7, #20
 800e750:	46bd      	mov	sp, r7
 800e752:	bd90      	pop	{r4, r7, pc}

0800e754 <_ZNK8touchgfx4Rect7isEmptyEv>:
     *
     *        Query if this object is empty.
     *
     * @return true if any of the dimensions are 0.
     */
    bool isEmpty() const
 800e754:	b480      	push	{r7}
 800e756:	b083      	sub	sp, #12
 800e758:	af00      	add	r7, sp, #0
 800e75a:	6078      	str	r0, [r7, #4]
    {
        return ((width == 0) || (height == 0));
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d004      	beq.n	800e770 <_ZNK8touchgfx4Rect7isEmptyEv+0x1c>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d101      	bne.n	800e774 <_ZNK8touchgfx4Rect7isEmptyEv+0x20>
 800e770:	2301      	movs	r3, #1
 800e772:	e000      	b.n	800e776 <_ZNK8touchgfx4Rect7isEmptyEv+0x22>
 800e774:	2300      	movs	r3, #0
    }
 800e776:	4618      	mov	r0, r3
 800e778:	370c      	adds	r7, #12
 800e77a:	46bd      	mov	sp, r7
 800e77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e780:	4770      	bx	lr
	...

0800e784 <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 800e784:	b480      	push	{r7}
 800e786:	b083      	sub	sp, #12
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
 800e78c:	4a04      	ldr	r2, [pc, #16]	; (800e7a0 <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	601a      	str	r2, [r3, #0]
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	4618      	mov	r0, r3
 800e796:	370c      	adds	r7, #12
 800e798:	46bd      	mov	sp, r7
 800e79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e79e:	4770      	bx	lr
 800e7a0:	0802611c 	.word	0x0802611c

0800e7a4 <_ZN8touchgfx8DrawableD0Ev>:
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b082      	sub	sp, #8
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f7ff ffe9 	bl	800e784 <_ZN8touchgfx8DrawableD1Ev>
 800e7b2:	2128      	movs	r1, #40	; 0x28
 800e7b4:	6878      	ldr	r0, [r7, #4]
 800e7b6:	f013 fee9 	bl	802258c <_ZdlPvj>
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	4618      	mov	r0, r3
 800e7be:	3708      	adds	r7, #8
 800e7c0:	46bd      	mov	sp, r7
 800e7c2:	bd80      	pop	{r7, pc}

0800e7c4 <_ZNK8touchgfx8Drawable7getRectEv>:
     *        Gets the rectangle this Drawable covers, in coordinates relative to its parent.
     *
     * @return The rectangle this Drawable covers expressed in coordinates relative to its
     *         parent.
     */
    const Rect& getRect() const
 800e7c4:	b480      	push	{r7}
 800e7c6:	b083      	sub	sp, #12
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
    {
        return rect;
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	3304      	adds	r3, #4
    }
 800e7d0:	4618      	mov	r0, r3
 800e7d2:	370c      	adds	r7, #12
 800e7d4:	46bd      	mov	sp, r7
 800e7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7da:	4770      	bx	lr

0800e7dc <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b084      	sub	sp, #16
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	60f8      	str	r0, [r7, #12]
 800e7e4:	4608      	mov	r0, r1
 800e7e6:	4611      	mov	r1, r2
 800e7e8:	461a      	mov	r2, r3
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	817b      	strh	r3, [r7, #10]
 800e7ee:	460b      	mov	r3, r1
 800e7f0:	813b      	strh	r3, [r7, #8]
 800e7f2:	4613      	mov	r3, r2
 800e7f4:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	3334      	adds	r3, #52	; 0x34
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e802:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800e806:	68f8      	ldr	r0, [r7, #12]
 800e808:	4798      	blx	r3
        setWidth(width);
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	3338      	adds	r3, #56	; 0x38
 800e810:	681b      	ldr	r3, [r3, #0]
 800e812:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e816:	4611      	mov	r1, r2
 800e818:	68f8      	ldr	r0, [r7, #12]
 800e81a:	4798      	blx	r3
        setHeight(height);
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	333c      	adds	r3, #60	; 0x3c
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800e828:	4611      	mov	r1, r2
 800e82a:	68f8      	ldr	r0, [r7, #12]
 800e82c:	4798      	blx	r3
    };
 800e82e:	bf00      	nop
 800e830:	3710      	adds	r7, #16
 800e832:	46bd      	mov	sp, r7
 800e834:	bd80      	pop	{r7, pc}

0800e836 <_ZNK8touchgfx8Drawable4getXEv>:
     *
     *        Gets the x coordinate of this drawable.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 800e836:	b480      	push	{r7}
 800e838:	b083      	sub	sp, #12
 800e83a:	af00      	add	r7, sp, #0
 800e83c:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 800e844:	4618      	mov	r0, r3
 800e846:	370c      	adds	r7, #12
 800e848:	46bd      	mov	sp, r7
 800e84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84e:	4770      	bx	lr

0800e850 <_ZNK8touchgfx8Drawable4getYEv>:
     *
     *        Gets the y coordinate of this drawable.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 800e850:	b480      	push	{r7}
 800e852:	b083      	sub	sp, #12
 800e854:	af00      	add	r7, sp, #0
 800e856:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800e85e:	4618      	mov	r0, r3
 800e860:	370c      	adds	r7, #12
 800e862:	46bd      	mov	sp, r7
 800e864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e868:	4770      	bx	lr

0800e86a <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 800e86a:	b480      	push	{r7}
 800e86c:	b083      	sub	sp, #12
 800e86e:	af00      	add	r7, sp, #0
 800e870:	6078      	str	r0, [r7, #4]
 800e872:	460b      	mov	r3, r1
 800e874:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	887a      	ldrh	r2, [r7, #2]
 800e87a:	809a      	strh	r2, [r3, #4]
    }
 800e87c:	bf00      	nop
 800e87e:	370c      	adds	r7, #12
 800e880:	46bd      	mov	sp, r7
 800e882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e886:	4770      	bx	lr

0800e888 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 800e888:	b480      	push	{r7}
 800e88a:	b083      	sub	sp, #12
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	6078      	str	r0, [r7, #4]
 800e890:	460b      	mov	r3, r1
 800e892:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	887a      	ldrh	r2, [r7, #2]
 800e898:	80da      	strh	r2, [r3, #6]
    }
 800e89a:	bf00      	nop
 800e89c:	370c      	adds	r7, #12
 800e89e:	46bd      	mov	sp, r7
 800e8a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8a4:	4770      	bx	lr

0800e8a6 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 800e8a6:	b580      	push	{r7, lr}
 800e8a8:	b082      	sub	sp, #8
 800e8aa:	af00      	add	r7, sp, #0
 800e8ac:	6078      	str	r0, [r7, #4]
 800e8ae:	460b      	mov	r3, r1
 800e8b0:	807b      	strh	r3, [r7, #2]
 800e8b2:	4613      	mov	r3, r2
 800e8b4:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	681b      	ldr	r3, [r3, #0]
 800e8ba:	332c      	adds	r3, #44	; 0x2c
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e8c2:	4611      	mov	r1, r2
 800e8c4:	6878      	ldr	r0, [r7, #4]
 800e8c6:	4798      	blx	r3
        setY(y);
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	3330      	adds	r3, #48	; 0x30
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e8d4:	4611      	mov	r1, r2
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	4798      	blx	r3
    }
 800e8da:	bf00      	nop
 800e8dc:	3708      	adds	r7, #8
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}

0800e8e2 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 800e8e2:	b480      	push	{r7}
 800e8e4:	b083      	sub	sp, #12
 800e8e6:	af00      	add	r7, sp, #0
 800e8e8:	6078      	str	r0, [r7, #4]
 800e8ea:	460b      	mov	r3, r1
 800e8ec:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	887a      	ldrh	r2, [r7, #2]
 800e8f2:	811a      	strh	r2, [r3, #8]
    }
 800e8f4:	bf00      	nop
 800e8f6:	370c      	adds	r7, #12
 800e8f8:	46bd      	mov	sp, r7
 800e8fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8fe:	4770      	bx	lr

0800e900 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 800e900:	b480      	push	{r7}
 800e902:	b083      	sub	sp, #12
 800e904:	af00      	add	r7, sp, #0
 800e906:	6078      	str	r0, [r7, #4]
 800e908:	460b      	mov	r3, r1
 800e90a:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	887a      	ldrh	r2, [r7, #2]
 800e910:	815a      	strh	r2, [r3, #10]
    }
 800e912:	bf00      	nop
 800e914:	370c      	adds	r7, #12
 800e916:	46bd      	mov	sp, r7
 800e918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91c:	4770      	bx	lr

0800e91e <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 800e91e:	b480      	push	{r7}
 800e920:	b083      	sub	sp, #12
 800e922:	af00      	add	r7, sp, #0
 800e924:	6078      	str	r0, [r7, #4]
 800e926:	bf00      	nop
 800e928:	370c      	adds	r7, #12
 800e92a:	46bd      	mov	sp, r7
 800e92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e930:	4770      	bx	lr

0800e932 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 800e932:	b480      	push	{r7}
 800e934:	b083      	sub	sp, #12
 800e936:	af00      	add	r7, sp, #0
 800e938:	6078      	str	r0, [r7, #4]
 800e93a:	6039      	str	r1, [r7, #0]
 800e93c:	bf00      	nop
 800e93e:	370c      	adds	r7, #12
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr

0800e948 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 800e948:	b480      	push	{r7}
 800e94a:	b083      	sub	sp, #12
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	6039      	str	r1, [r7, #0]
 800e952:	bf00      	nop
 800e954:	370c      	adds	r7, #12
 800e956:	46bd      	mov	sp, r7
 800e958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95c:	4770      	bx	lr

0800e95e <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 800e95e:	b480      	push	{r7}
 800e960:	b083      	sub	sp, #12
 800e962:	af00      	add	r7, sp, #0
 800e964:	6078      	str	r0, [r7, #4]
 800e966:	6039      	str	r1, [r7, #0]
 800e968:	bf00      	nop
 800e96a:	370c      	adds	r7, #12
 800e96c:	46bd      	mov	sp, r7
 800e96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e972:	4770      	bx	lr

0800e974 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 800e974:	b480      	push	{r7}
 800e976:	b083      	sub	sp, #12
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	bf00      	nop
 800e97e:	370c      	adds	r7, #12
 800e980:	46bd      	mov	sp, r7
 800e982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e986:	4770      	bx	lr

0800e988 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800e988:	b480      	push	{r7}
 800e98a:	b083      	sub	sp, #12
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800e996:	4618      	mov	r0, r3
 800e998:	370c      	adds	r7, #12
 800e99a:	46bd      	mov	sp, r7
 800e99c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9a0:	4770      	bx	lr

0800e9a2 <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800e9a2:	b480      	push	{r7}
 800e9a4:	b083      	sub	sp, #12
 800e9a6:	af00      	add	r7, sp, #0
 800e9a8:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	370c      	adds	r7, #12
 800e9b4:	46bd      	mov	sp, r7
 800e9b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ba:	4770      	bx	lr

0800e9bc <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800e9bc:	b580      	push	{r7, lr}
 800e9be:	b082      	sub	sp, #8
 800e9c0:	af00      	add	r7, sp, #0
 800e9c2:	6078      	str	r0, [r7, #4]
 800e9c4:	460b      	mov	r3, r1
 800e9c6:	807b      	strh	r3, [r7, #2]
 800e9c8:	4613      	mov	r3, r2
 800e9ca:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	3354      	adds	r3, #84	; 0x54
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	8879      	ldrh	r1, [r7, #2]
 800e9d6:	687a      	ldr	r2, [r7, #4]
 800e9d8:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800e9dc:	b292      	uxth	r2, r2
 800e9de:	1a8a      	subs	r2, r1, r2
 800e9e0:	b292      	uxth	r2, r2
 800e9e2:	b210      	sxth	r0, r2
 800e9e4:	8839      	ldrh	r1, [r7, #0]
 800e9e6:	687a      	ldr	r2, [r7, #4]
 800e9e8:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800e9ec:	b292      	uxth	r2, r2
 800e9ee:	1a8a      	subs	r2, r1, r2
 800e9f0:	b292      	uxth	r2, r2
 800e9f2:	b212      	sxth	r2, r2
 800e9f4:	4601      	mov	r1, r0
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	4798      	blx	r3
    }
 800e9fa:	bf00      	nop
 800e9fc:	3708      	adds	r7, #8
 800e9fe:	46bd      	mov	sp, r7
 800ea00:	bd80      	pop	{r7, pc}
	...

0800ea04 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 800ea04:	b580      	push	{r7, lr}
 800ea06:	b082      	sub	sp, #8
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
 800ea0c:	4a05      	ldr	r2, [pc, #20]	; (800ea24 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	601a      	str	r2, [r3, #0]
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	4618      	mov	r0, r3
 800ea16:	f7ff feb5 	bl	800e784 <_ZN8touchgfx8DrawableD1Ev>
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	4618      	mov	r0, r3
 800ea1e:	3708      	adds	r7, #8
 800ea20:	46bd      	mov	sp, r7
 800ea22:	bd80      	pop	{r7, pc}
 800ea24:	08024818 	.word	0x08024818

0800ea28 <_ZN8touchgfx9ContainerD0Ev>:
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b082      	sub	sp, #8
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
 800ea30:	6878      	ldr	r0, [r7, #4]
 800ea32:	f7ff ffe7 	bl	800ea04 <_ZN8touchgfx9ContainerD1Ev>
 800ea36:	212c      	movs	r1, #44	; 0x2c
 800ea38:	6878      	ldr	r0, [r7, #4]
 800ea3a:	f013 fda7 	bl	802258c <_ZdlPvj>
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	4618      	mov	r0, r3
 800ea42:	3708      	adds	r7, #8
 800ea44:	46bd      	mov	sp, r7
 800ea46:	bd80      	pop	{r7, pc}

0800ea48 <_ZNK8touchgfx9Container7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_CONTAINER.
     */
    virtual uint16_t getType() const
 800ea48:	b480      	push	{r7}
 800ea4a:	b083      	sub	sp, #12
 800ea4c:	af00      	add	r7, sp, #0
 800ea4e:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_CONTAINER;
 800ea50:	2312      	movs	r3, #18
    }
 800ea52:	4618      	mov	r0, r3
 800ea54:	370c      	adds	r7, #12
 800ea56:	46bd      	mov	sp, r7
 800ea58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5c:	4770      	bx	lr

0800ea5e <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
#include <touchgfx/Screen.hpp>

namespace touchgfx
{
bool Container::contains(const Drawable& d)
{
 800ea5e:	b480      	push	{r7}
 800ea60:	b085      	sub	sp, #20
 800ea62:	af00      	add	r7, sp, #0
 800ea64:	6078      	str	r0, [r7, #4]
 800ea66:	6039      	str	r1, [r7, #0]
    bool found = false;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	73fb      	strb	r3, [r7, #15]
    Drawable* head = firstChild;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea70:	60bb      	str	r3, [r7, #8]
    while (head && !found)
 800ea72:	68bb      	ldr	r3, [r7, #8]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d00d      	beq.n	800ea94 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x36>
 800ea78:	7bfb      	ldrb	r3, [r7, #15]
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	d10a      	bne.n	800ea94 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x36>
    {
        found = (head == &d);
 800ea7e:	68ba      	ldr	r2, [r7, #8]
 800ea80:	683b      	ldr	r3, [r7, #0]
 800ea82:	429a      	cmp	r2, r3
 800ea84:	bf0c      	ite	eq
 800ea86:	2301      	moveq	r3, #1
 800ea88:	2300      	movne	r3, #0
 800ea8a:	73fb      	strb	r3, [r7, #15]
        head = head->nextSibling;
 800ea8c:	68bb      	ldr	r3, [r7, #8]
 800ea8e:	699b      	ldr	r3, [r3, #24]
 800ea90:	60bb      	str	r3, [r7, #8]
    while (head && !found)
 800ea92:	e7ee      	b.n	800ea72 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x14>
    }
    return found;
 800ea94:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	3714      	adds	r7, #20
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa0:	4770      	bx	lr
	...

0800eaa4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:

void Container::add(Drawable& d)
{
 800eaa4:	b580      	push	{r7, lr}
 800eaa6:	b084      	sub	sp, #16
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	6078      	str	r0, [r7, #4]
 800eaac:	6039      	str	r1, [r7, #0]
    assert(&d != this && "Cannot add Drawable to self");
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	683a      	ldr	r2, [r7, #0]
 800eab2:	429a      	cmp	r2, r3
 800eab4:	d105      	bne.n	800eac2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800eab6:	4b22      	ldr	r3, [pc, #136]	; (800eb40 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x9c>)
 800eab8:	4a22      	ldr	r2, [pc, #136]	; (800eb44 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800eaba:	2123      	movs	r1, #35	; 0x23
 800eabc:	4822      	ldr	r0, [pc, #136]	; (800eb48 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800eabe:	f013 fd93 	bl	80225e8 <__assert_func>
    assert(d.parent == 0 && "Cannot add Drawable multiple times");
 800eac2:	683b      	ldr	r3, [r7, #0]
 800eac4:	695b      	ldr	r3, [r3, #20]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d005      	beq.n	800ead6 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x32>
 800eaca:	4b20      	ldr	r3, [pc, #128]	; (800eb4c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa8>)
 800eacc:	4a1d      	ldr	r2, [pc, #116]	; (800eb44 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800eace:	2124      	movs	r1, #36	; 0x24
 800ead0:	481d      	ldr	r0, [pc, #116]	; (800eb48 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800ead2:	f013 fd89 	bl	80225e8 <__assert_func>

    // Initialize d to have this as parent and no sibling.
    d.parent = this;
 800ead6:	687a      	ldr	r2, [r7, #4]
 800ead8:	683b      	ldr	r3, [r7, #0]
 800eada:	615a      	str	r2, [r3, #20]
    d.nextSibling = 0;
 800eadc:	683b      	ldr	r3, [r7, #0]
 800eade:	2200      	movs	r2, #0
 800eae0:	619a      	str	r2, [r3, #24]

    // Check if d is the first child to be added (container is empty)
    if (!firstChild)
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eae6:	2b00      	cmp	r3, #0
 800eae8:	d103      	bne.n	800eaf2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4e>
    {
        firstChild = &d;
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	683a      	ldr	r2, [r7, #0]
 800eaee:	629a      	str	r2, [r3, #40]	; 0x28
        }
        assert(head != &d && "Cannot add Drawable multiple times");
        // Make last child now point to d.
        head->nextSibling = &d;
    }
}
 800eaf0:	e021      	b.n	800eb36 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x92>
        Drawable* head = firstChild;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaf6:	60fb      	str	r3, [r7, #12]
        while (head->nextSibling)
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	699b      	ldr	r3, [r3, #24]
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d00d      	beq.n	800eb1c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x78>
            assert(head != &d && "Cannot add Drawable multiple times");
 800eb00:	68fa      	ldr	r2, [r7, #12]
 800eb02:	683b      	ldr	r3, [r7, #0]
 800eb04:	429a      	cmp	r2, r3
 800eb06:	d105      	bne.n	800eb14 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x70>
 800eb08:	4b11      	ldr	r3, [pc, #68]	; (800eb50 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xac>)
 800eb0a:	4a0e      	ldr	r2, [pc, #56]	; (800eb44 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800eb0c:	2135      	movs	r1, #53	; 0x35
 800eb0e:	480e      	ldr	r0, [pc, #56]	; (800eb48 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800eb10:	f013 fd6a 	bl	80225e8 <__assert_func>
            head = head->nextSibling;
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	699b      	ldr	r3, [r3, #24]
 800eb18:	60fb      	str	r3, [r7, #12]
        while (head->nextSibling)
 800eb1a:	e7ed      	b.n	800eaf8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>
        assert(head != &d && "Cannot add Drawable multiple times");
 800eb1c:	68fa      	ldr	r2, [r7, #12]
 800eb1e:	683b      	ldr	r3, [r7, #0]
 800eb20:	429a      	cmp	r2, r3
 800eb22:	d105      	bne.n	800eb30 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x8c>
 800eb24:	4b0a      	ldr	r3, [pc, #40]	; (800eb50 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xac>)
 800eb26:	4a07      	ldr	r2, [pc, #28]	; (800eb44 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800eb28:	2138      	movs	r1, #56	; 0x38
 800eb2a:	4807      	ldr	r0, [pc, #28]	; (800eb48 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800eb2c:	f013 fd5c 	bl	80225e8 <__assert_func>
        head->nextSibling = &d;
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	683a      	ldr	r2, [r7, #0]
 800eb34:	619a      	str	r2, [r3, #24]
}
 800eb36:	bf00      	nop
 800eb38:	3710      	adds	r7, #16
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}
 800eb3e:	bf00      	nop
 800eb40:	08023704 	.word	0x08023704
 800eb44:	08023730 	.word	0x08023730
 800eb48:	0802376c 	.word	0x0802376c
 800eb4c:	080237c4 	.word	0x080237c4
 800eb50:	080237fc 	.word	0x080237fc

0800eb54 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:

void Container::remove(Drawable& d)
{
 800eb54:	b480      	push	{r7}
 800eb56:	b085      	sub	sp, #20
 800eb58:	af00      	add	r7, sp, #0
 800eb5a:	6078      	str	r0, [r7, #4]
 800eb5c:	6039      	str	r1, [r7, #0]
    if (!firstChild)
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb62:	2b00      	cmp	r3, #0
 800eb64:	d031      	beq.n	800ebca <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x76>
    {
        // No children
        return;
    }

    if (&d == firstChild)
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb6a:	683a      	ldr	r2, [r7, #0]
 800eb6c:	429a      	cmp	r2, r3
 800eb6e:	d112      	bne.n	800eb96 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x42>
    {
        // d is first child.
        d.parent = 0;
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	2200      	movs	r2, #0
 800eb74:	615a      	str	r2, [r3, #20]
        if (!d.nextSibling)
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	699b      	ldr	r3, [r3, #24]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d103      	bne.n	800eb86 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x32>
        {
            // d was only child, so now this container is empty
            firstChild = 0;
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	2200      	movs	r2, #0
 800eb82:	629a      	str	r2, [r3, #40]	; 0x28
        else
        {
            firstChild = d.nextSibling;
            d.nextSibling = 0;
        }
        return;
 800eb84:	e022      	b.n	800ebcc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
            firstChild = d.nextSibling;
 800eb86:	683b      	ldr	r3, [r7, #0]
 800eb88:	699a      	ldr	r2, [r3, #24]
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	629a      	str	r2, [r3, #40]	; 0x28
            d.nextSibling = 0;
 800eb8e:	683b      	ldr	r3, [r7, #0]
 800eb90:	2200      	movs	r2, #0
 800eb92:	619a      	str	r2, [r3, #24]
        return;
 800eb94:	e01a      	b.n	800ebcc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
    }
    Drawable* tmp = firstChild;
 800eb96:	687b      	ldr	r3, [r7, #4]
 800eb98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb9a:	60fb      	str	r3, [r7, #12]

    while (tmp)
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d014      	beq.n	800ebcc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
    {
        if (tmp->nextSibling == &d)
 800eba2:	68fb      	ldr	r3, [r7, #12]
 800eba4:	699b      	ldr	r3, [r3, #24]
 800eba6:	683a      	ldr	r2, [r7, #0]
 800eba8:	429a      	cmp	r2, r3
 800ebaa:	d10a      	bne.n	800ebc2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x6e>
        {
            tmp->nextSibling = d.nextSibling;
 800ebac:	683b      	ldr	r3, [r7, #0]
 800ebae:	699a      	ldr	r2, [r3, #24]
 800ebb0:	68fb      	ldr	r3, [r7, #12]
 800ebb2:	619a      	str	r2, [r3, #24]
            d.parent = 0;
 800ebb4:	683b      	ldr	r3, [r7, #0]
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	615a      	str	r2, [r3, #20]
            d.nextSibling = 0;
 800ebba:	683b      	ldr	r3, [r7, #0]
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	619a      	str	r2, [r3, #24]
            return;
 800ebc0:	e004      	b.n	800ebcc <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
        }
        else
        {
            tmp = tmp->nextSibling;
 800ebc2:	68fb      	ldr	r3, [r7, #12]
 800ebc4:	699b      	ldr	r3, [r3, #24]
 800ebc6:	60fb      	str	r3, [r7, #12]
    while (tmp)
 800ebc8:	e7e8      	b.n	800eb9c <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x48>
        return;
 800ebca:	bf00      	nop
        }
    }
}
 800ebcc:	3714      	adds	r7, #20
 800ebce:	46bd      	mov	sp, r7
 800ebd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebd4:	4770      	bx	lr

0800ebd6 <_ZN8touchgfx9Container9removeAllEv>:

void Container::removeAll()
{
 800ebd6:	b480      	push	{r7}
 800ebd8:	b085      	sub	sp, #20
 800ebda:	af00      	add	r7, sp, #0
 800ebdc:	6078      	str	r0, [r7, #4]
    while (firstChild)
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d00e      	beq.n	800ec04 <_ZN8touchgfx9Container9removeAllEv+0x2e>
    {
        Drawable* d = firstChild;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebea:	60fb      	str	r3, [r7, #12]
        firstChild = firstChild->nextSibling;
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebf0:	699a      	ldr	r2, [r3, #24]
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	629a      	str	r2, [r3, #40]	; 0x28
        d->parent = 0;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	615a      	str	r2, [r3, #20]
        d->nextSibling = 0;
 800ebfc:	68fb      	ldr	r3, [r7, #12]
 800ebfe:	2200      	movs	r2, #0
 800ec00:	619a      	str	r2, [r3, #24]
    while (firstChild)
 800ec02:	e7ec      	b.n	800ebde <_ZN8touchgfx9Container9removeAllEv+0x8>
    }
}
 800ec04:	bf00      	nop
 800ec06:	3714      	adds	r7, #20
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec0e:	4770      	bx	lr

0800ec10 <_ZN8touchgfx9Container6unlinkEv>:

void Container::unlink()
{
 800ec10:	b480      	push	{r7}
 800ec12:	b083      	sub	sp, #12
 800ec14:	af00      	add	r7, sp, #0
 800ec16:	6078      	str	r0, [r7, #4]
    firstChild = 0;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	2200      	movs	r2, #0
 800ec1c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ec1e:	bf00      	nop
 800ec20:	370c      	adds	r7, #12
 800ec22:	46bd      	mov	sp, r7
 800ec24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec28:	4770      	bx	lr

0800ec2a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:

void Container::draw(const Rect& invalidatedArea) const
{
 800ec2a:	b580      	push	{r7, lr}
 800ec2c:	b088      	sub	sp, #32
 800ec2e:	af00      	add	r7, sp, #0
 800ec30:	6078      	str	r0, [r7, #4]
 800ec32:	6039      	str	r1, [r7, #0]
    // The draw function of Container is not normally used. Containers do not per default
    // appear in the draw chain, since they are normally invisible themselves. However,
    // if someone decides to call draw on a container, at least do something useful (draw children).
    if (!isVisible() || !firstChild)
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	4618      	mov	r0, r3
 800ec38:	f7ff fea6 	bl	800e988 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	f083 0301 	eor.w	r3, r3, #1
 800ec42:	b2db      	uxtb	r3, r3
 800ec44:	2b00      	cmp	r3, #0
 800ec46:	d103      	bne.n	800ec50 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x26>
 800ec48:	687b      	ldr	r3, [r7, #4]
 800ec4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d101      	bne.n	800ec54 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x2a>
 800ec50:	2301      	movs	r3, #1
 800ec52:	e000      	b.n	800ec56 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x2c>
 800ec54:	2300      	movs	r3, #0
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d14e      	bne.n	800ecf8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xce>
    {
        // Nothing to draw
        return;
    }

    Rect tmp = invalidatedArea;
 800ec5a:	683a      	ldr	r2, [r7, #0]
 800ec5c:	f107 0314 	add.w	r3, r7, #20
 800ec60:	6810      	ldr	r0, [r2, #0]
 800ec62:	6851      	ldr	r1, [r2, #4]
 800ec64:	c303      	stmia	r3!, {r0, r1}
    Drawable* d = firstChild;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec6a:	61fb      	str	r3, [r7, #28]
    while (d)
 800ec6c:	69fb      	ldr	r3, [r7, #28]
 800ec6e:	2b00      	cmp	r3, #0
 800ec70:	d043      	beq.n	800ecfa <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xd0>
    {
        if (d->isVisible())
 800ec72:	69f8      	ldr	r0, [r7, #28]
 800ec74:	f7ff fe88 	bl	800e988 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800ec78:	4603      	mov	r3, r0
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d038      	beq.n	800ecf0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xc6>
        {
            Rect drawableRegion = tmp & d->getRect();
 800ec7e:	69f8      	ldr	r0, [r7, #28]
 800ec80:	f7ff fda0 	bl	800e7c4 <_ZNK8touchgfx8Drawable7getRectEv>
 800ec84:	4602      	mov	r2, r0
 800ec86:	f107 030c 	add.w	r3, r7, #12
 800ec8a:	f107 0114 	add.w	r1, r7, #20
 800ec8e:	4618      	mov	r0, r3
 800ec90:	f7ff fc43 	bl	800e51a <_ZNK8touchgfx4RectanERKS0_>
            if (!drawableRegion.isEmpty())
 800ec94:	f107 030c 	add.w	r3, r7, #12
 800ec98:	4618      	mov	r0, r3
 800ec9a:	f7ff fd5b 	bl	800e754 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ec9e:	4603      	mov	r3, r0
 800eca0:	f083 0301 	eor.w	r3, r3, #1
 800eca4:	b2db      	uxtb	r3, r3
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d022      	beq.n	800ecf0 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xc6>
            {
                // This child has a non-empty intersection with the invalidated area.
                // Convert region to the Drawable's coordinate system and draw.
                drawableRegion.x -= d->getX();
 800ecaa:	69f8      	ldr	r0, [r7, #28]
 800ecac:	f7ff fdc3 	bl	800e836 <_ZNK8touchgfx8Drawable4getXEv>
 800ecb0:	4603      	mov	r3, r0
 800ecb2:	4619      	mov	r1, r3
 800ecb4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ecb8:	b29a      	uxth	r2, r3
 800ecba:	b28b      	uxth	r3, r1
 800ecbc:	1ad3      	subs	r3, r2, r3
 800ecbe:	b29b      	uxth	r3, r3
 800ecc0:	b21b      	sxth	r3, r3
 800ecc2:	81bb      	strh	r3, [r7, #12]
                drawableRegion.y -= d->getY();
 800ecc4:	69f8      	ldr	r0, [r7, #28]
 800ecc6:	f7ff fdc3 	bl	800e850 <_ZNK8touchgfx8Drawable4getYEv>
 800ecca:	4603      	mov	r3, r0
 800eccc:	4619      	mov	r1, r3
 800ecce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ecd2:	b29a      	uxth	r2, r3
 800ecd4:	b28b      	uxth	r3, r1
 800ecd6:	1ad3      	subs	r3, r2, r3
 800ecd8:	b29b      	uxth	r3, r3
 800ecda:	b21b      	sxth	r3, r3
 800ecdc:	81fb      	strh	r3, [r7, #14]
                d->draw(drawableRegion);
 800ecde:	69fb      	ldr	r3, [r7, #28]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	3308      	adds	r3, #8
 800ece4:	681b      	ldr	r3, [r3, #0]
 800ece6:	f107 020c 	add.w	r2, r7, #12
 800ecea:	4611      	mov	r1, r2
 800ecec:	69f8      	ldr	r0, [r7, #28]
 800ecee:	4798      	blx	r3
            }
        }
        d = d->nextSibling;
 800ecf0:	69fb      	ldr	r3, [r7, #28]
 800ecf2:	699b      	ldr	r3, [r3, #24]
 800ecf4:	61fb      	str	r3, [r7, #28]
    while (d)
 800ecf6:	e7b9      	b.n	800ec6c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x42>
        return;
 800ecf8:	bf00      	nop
    }
}
 800ecfa:	3720      	adds	r7, #32
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}

0800ed00 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:

void Container::getLastChild(int16_t x, int16_t y, Drawable** last)
{
 800ed00:	b590      	push	{r4, r7, lr}
 800ed02:	b087      	sub	sp, #28
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	60f8      	str	r0, [r7, #12]
 800ed08:	607b      	str	r3, [r7, #4]
 800ed0a:	460b      	mov	r3, r1
 800ed0c:	817b      	strh	r3, [r7, #10]
 800ed0e:	4613      	mov	r3, r2
 800ed10:	813b      	strh	r3, [r7, #8]
    // This function is used to obtain the drawable that should receive a click/drag/gesture event.
    // Find the last child (ie. the last child that was added, ie. the "front-most" drawable) covering
    // the specified coords.
    if (isTouchable())
 800ed12:	68fb      	ldr	r3, [r7, #12]
 800ed14:	4618      	mov	r0, r3
 800ed16:	f7ff fe44 	bl	800e9a2 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800ed1a:	4603      	mov	r3, r0
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d002      	beq.n	800ed26 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x26>
    {
        // If the container itself is touchable, result so far is "this". Might be overridden by a child.
        *last = this;
 800ed20:	68fa      	ldr	r2, [r7, #12]
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	601a      	str	r2, [r3, #0]
    }

    Drawable* d = firstChild;
 800ed26:	68fb      	ldr	r3, [r7, #12]
 800ed28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed2a:	617b      	str	r3, [r7, #20]
    while (d)
 800ed2c:	697b      	ldr	r3, [r7, #20]
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d038      	beq.n	800eda4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0xa4>
    {
        // Iterate over children.
        if (d->isVisible() && d->getRect().intersect(x, y))
 800ed32:	6978      	ldr	r0, [r7, #20]
 800ed34:	f7ff fe28 	bl	800e988 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	2b00      	cmp	r3, #0
 800ed3c:	d00e      	beq.n	800ed5c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800ed3e:	6978      	ldr	r0, [r7, #20]
 800ed40:	f7ff fd40 	bl	800e7c4 <_ZNK8touchgfx8Drawable7getRectEv>
 800ed44:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800ed48:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ed4c:	4619      	mov	r1, r3
 800ed4e:	f7ff fb83 	bl	800e458 <_ZNK8touchgfx4Rect9intersectEss>
 800ed52:	4603      	mov	r3, r0
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d001      	beq.n	800ed5c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800ed58:	2301      	movs	r3, #1
 800ed5a:	e000      	b.n	800ed5e <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5e>
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	d01c      	beq.n	800ed9c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x9c>
        {
            int16_t xadj = x - d->getX();
 800ed62:	897c      	ldrh	r4, [r7, #10]
 800ed64:	6978      	ldr	r0, [r7, #20]
 800ed66:	f7ff fd66 	bl	800e836 <_ZNK8touchgfx8Drawable4getXEv>
 800ed6a:	4603      	mov	r3, r0
 800ed6c:	b29b      	uxth	r3, r3
 800ed6e:	1ae3      	subs	r3, r4, r3
 800ed70:	b29b      	uxth	r3, r3
 800ed72:	827b      	strh	r3, [r7, #18]
            int16_t yadj = y - d->getY();
 800ed74:	893c      	ldrh	r4, [r7, #8]
 800ed76:	6978      	ldr	r0, [r7, #20]
 800ed78:	f7ff fd6a 	bl	800e850 <_ZNK8touchgfx8Drawable4getYEv>
 800ed7c:	4603      	mov	r3, r0
 800ed7e:	b29b      	uxth	r3, r3
 800ed80:	1ae3      	subs	r3, r4, r3
 800ed82:	b29b      	uxth	r3, r3
 800ed84:	823b      	strh	r3, [r7, #16]
            d->getLastChild(xadj, yadj, last);
 800ed86:	697b      	ldr	r3, [r7, #20]
 800ed88:	681b      	ldr	r3, [r3, #0]
 800ed8a:	331c      	adds	r3, #28
 800ed8c:	681c      	ldr	r4, [r3, #0]
 800ed8e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800ed92:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	6978      	ldr	r0, [r7, #20]
 800ed9a:	47a0      	blx	r4
        }
        d = d->nextSibling;
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	699b      	ldr	r3, [r3, #24]
 800eda0:	617b      	str	r3, [r7, #20]
    while (d)
 800eda2:	e7c3      	b.n	800ed2c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x2c>
    }
}
 800eda4:	bf00      	nop
 800eda6:	371c      	adds	r7, #28
 800eda8:	46bd      	mov	sp, r7
 800edaa:	bd90      	pop	{r4, r7, pc}

0800edac <_ZNK8touchgfx9Container12getSolidRectEv>:

Rect Container::getSolidRect() const
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b084      	sub	sp, #16
 800edb0:	af02      	add	r7, sp, #8
 800edb2:	6078      	str	r0, [r7, #4]
 800edb4:	6039      	str	r1, [r7, #0]
    return Rect(0, 0, 0, 0);
 800edb6:	2300      	movs	r3, #0
 800edb8:	9300      	str	r3, [sp, #0]
 800edba:	2300      	movs	r3, #0
 800edbc:	2200      	movs	r2, #0
 800edbe:	2100      	movs	r1, #0
 800edc0:	6878      	ldr	r0, [r7, #4]
 800edc2:	f7ff faff 	bl	800e3c4 <_ZN8touchgfx4RectC1Essss>
}
 800edc6:	6878      	ldr	r0, [r7, #4]
 800edc8:	3708      	adds	r7, #8
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}

0800edce <_ZNK8touchgfx9Container16getContainedAreaEv>:

Rect Container::getContainedArea() const
{
 800edce:	b580      	push	{r7, lr}
 800edd0:	b086      	sub	sp, #24
 800edd2:	af02      	add	r7, sp, #8
 800edd4:	6078      	str	r0, [r7, #4]
 800edd6:	6039      	str	r1, [r7, #0]
    Drawable* d = firstChild;
 800edd8:	683b      	ldr	r3, [r7, #0]
 800edda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eddc:	60fb      	str	r3, [r7, #12]
    Rect contained(0, 0, 0, 0);
 800edde:	2300      	movs	r3, #0
 800ede0:	9300      	str	r3, [sp, #0]
 800ede2:	2300      	movs	r3, #0
 800ede4:	2200      	movs	r2, #0
 800ede6:	2100      	movs	r1, #0
 800ede8:	6878      	ldr	r0, [r7, #4]
 800edea:	f7ff faeb 	bl	800e3c4 <_ZN8touchgfx4RectC1Essss>
    while (d)
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	2b00      	cmp	r3, #0
 800edf2:	d00b      	beq.n	800ee0c <_ZNK8touchgfx9Container16getContainedAreaEv+0x3e>
    {
        contained.expandToFit(d->getRect());
 800edf4:	68f8      	ldr	r0, [r7, #12]
 800edf6:	f7ff fce5 	bl	800e7c4 <_ZNK8touchgfx8Drawable7getRectEv>
 800edfa:	4603      	mov	r3, r0
 800edfc:	4619      	mov	r1, r3
 800edfe:	6878      	ldr	r0, [r7, #4]
 800ee00:	f7ff fc1c 	bl	800e63c <_ZN8touchgfx4Rect11expandToFitERKS0_>
        d = d->nextSibling;
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	699b      	ldr	r3, [r3, #24]
 800ee08:	60fb      	str	r3, [r7, #12]
    while (d)
 800ee0a:	e7f0      	b.n	800edee <_ZNK8touchgfx9Container16getContainedAreaEv+0x20>
    }
    return contained;
 800ee0c:	bf00      	nop
}
 800ee0e:	6878      	ldr	r0, [r7, #4]
 800ee10:	3710      	adds	r7, #16
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}

0800ee16 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:

void Container::moveChildrenRelative(int16_t deltaX, int16_t deltaY)
{
 800ee16:	b580      	push	{r7, lr}
 800ee18:	b084      	sub	sp, #16
 800ee1a:	af00      	add	r7, sp, #0
 800ee1c:	6078      	str	r0, [r7, #4]
 800ee1e:	460b      	mov	r3, r1
 800ee20:	807b      	strh	r3, [r7, #2]
 800ee22:	4613      	mov	r3, r2
 800ee24:	803b      	strh	r3, [r7, #0]
    Drawable* d = firstChild;
 800ee26:	687b      	ldr	r3, [r7, #4]
 800ee28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee2a:	60fb      	str	r3, [r7, #12]
    while (d)
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	2b00      	cmp	r3, #0
 800ee30:	d00d      	beq.n	800ee4e <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x38>
    {
        d->moveRelative(deltaX, deltaY);
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	681b      	ldr	r3, [r3, #0]
 800ee36:	3354      	adds	r3, #84	; 0x54
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800ee3e:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800ee42:	68f8      	ldr	r0, [r7, #12]
 800ee44:	4798      	blx	r3
        d = d->nextSibling;
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	699b      	ldr	r3, [r3, #24]
 800ee4a:	60fb      	str	r3, [r7, #12]
    while (d)
 800ee4c:	e7ee      	b.n	800ee2c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x16>
    }
}
 800ee4e:	bf00      	nop
 800ee50:	3710      	adds	r7, #16
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}

0800ee56 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:

void Container::forEachChild(GenericCallback<Drawable&>* function)
{
 800ee56:	b580      	push	{r7, lr}
 800ee58:	b084      	sub	sp, #16
 800ee5a:	af00      	add	r7, sp, #0
 800ee5c:	6078      	str	r0, [r7, #4]
 800ee5e:	6039      	str	r1, [r7, #0]
    Drawable* d = firstChild;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee64:	60fb      	str	r3, [r7, #12]
    while (d)
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d00a      	beq.n	800ee82 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x2c>
    {
        function->execute(*d);
 800ee6c:	683b      	ldr	r3, [r7, #0]
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	3308      	adds	r3, #8
 800ee72:	681b      	ldr	r3, [r3, #0]
 800ee74:	68f9      	ldr	r1, [r7, #12]
 800ee76:	6838      	ldr	r0, [r7, #0]
 800ee78:	4798      	blx	r3
        d = d->nextSibling;
 800ee7a:	68fb      	ldr	r3, [r7, #12]
 800ee7c:	699b      	ldr	r3, [r3, #24]
 800ee7e:	60fb      	str	r3, [r7, #12]
    while (d)
 800ee80:	e7f1      	b.n	800ee66 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x10>
    }
}
 800ee82:	bf00      	nop
 800ee84:	3710      	adds	r7, #16
 800ee86:	46bd      	mov	sp, r7
 800ee88:	bd80      	pop	{r7, pc}

0800ee8a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:

void Container::insert(Drawable* previous, Drawable& d)
{
 800ee8a:	b580      	push	{r7, lr}
 800ee8c:	b086      	sub	sp, #24
 800ee8e:	af00      	add	r7, sp, #0
 800ee90:	60f8      	str	r0, [r7, #12]
 800ee92:	60b9      	str	r1, [r7, #8]
 800ee94:	607a      	str	r2, [r7, #4]
    if (!firstChild)
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	d107      	bne.n	800eeae <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x24>
    {
        // Insert as only element
        add(d);
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	3364      	adds	r3, #100	; 0x64
 800eea4:	681b      	ldr	r3, [r3, #0]
 800eea6:	6879      	ldr	r1, [r7, #4]
 800eea8:	68f8      	ldr	r0, [r7, #12]
 800eeaa:	4798      	blx	r3
        return;
 800eeac:	e026      	b.n	800eefc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
    }
    else if (!previous)
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d10a      	bne.n	800eeca <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x40>
    {
        // Insert as head element
        d.nextSibling = firstChild;
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	619a      	str	r2, [r3, #24]
        firstChild = &d;
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	687a      	ldr	r2, [r7, #4]
 800eec0:	629a      	str	r2, [r3, #40]	; 0x28
        d.parent = this;
 800eec2:	68fa      	ldr	r2, [r7, #12]
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	615a      	str	r2, [r3, #20]
 800eec8:	e018      	b.n	800eefc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
    }
    else
    {
        Drawable* tmp = firstChild;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eece:	617b      	str	r3, [r7, #20]
        while (tmp)
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d012      	beq.n	800eefc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
        {
            if (tmp == previous)
 800eed6:	697a      	ldr	r2, [r7, #20]
 800eed8:	68bb      	ldr	r3, [r7, #8]
 800eeda:	429a      	cmp	r2, r3
 800eedc:	d10a      	bne.n	800eef4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x6a>
            {
                d.nextSibling = tmp->nextSibling;
 800eede:	697b      	ldr	r3, [r7, #20]
 800eee0:	699a      	ldr	r2, [r3, #24]
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	619a      	str	r2, [r3, #24]
                tmp->nextSibling = &d;
 800eee6:	697b      	ldr	r3, [r7, #20]
 800eee8:	687a      	ldr	r2, [r7, #4]
 800eeea:	619a      	str	r2, [r3, #24]
                d.parent = this;
 800eeec:	68fa      	ldr	r2, [r7, #12]
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	615a      	str	r2, [r3, #20]
                return;
 800eef2:	e003      	b.n	800eefc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
            }
            tmp = tmp->nextSibling;
 800eef4:	697b      	ldr	r3, [r7, #20]
 800eef6:	699b      	ldr	r3, [r3, #24]
 800eef8:	617b      	str	r3, [r7, #20]
        while (tmp)
 800eefa:	e7e9      	b.n	800eed0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x46>
        }
    }
}
 800eefc:	3718      	adds	r7, #24
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd80      	pop	{r7, pc}

0800ef02 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:

void Container::setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
{
 800ef02:	b580      	push	{r7, lr}
 800ef04:	b088      	sub	sp, #32
 800ef06:	af00      	add	r7, sp, #0
 800ef08:	60f8      	str	r0, [r7, #12]
 800ef0a:	60b9      	str	r1, [r7, #8]
 800ef0c:	607a      	str	r2, [r7, #4]
    // This function adds the children of this container to the list of drawables to draw.
    if (!isVisible())
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	4618      	mov	r0, r3
 800ef12:	f7ff fd39 	bl	800e988 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800ef16:	4603      	mov	r3, r0
 800ef18:	f083 0301 	eor.w	r3, r3, #1
 800ef1c:	b2db      	uxtb	r3, r3
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d14b      	bne.n	800efba <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb8>
    {
        // If this container itself is not visible, do not add anyone to draw chain.
        return;
    }

    if (!firstChild)
 800ef22:	68fb      	ldr	r3, [r7, #12]
 800ef24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d049      	beq.n	800efbe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbc>
    {
        // If this container is empty, do not add anyone.
        return;
    }
    Drawable* d = firstChild;
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef2e:	61fb      	str	r3, [r7, #28]
    while (d)
 800ef30:	69fb      	ldr	r3, [r7, #28]
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d044      	beq.n	800efc0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbe>
    {
        if (d->isVisible())
 800ef36:	69f8      	ldr	r0, [r7, #28]
 800ef38:	f7ff fd26 	bl	800e988 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800ef3c:	4603      	mov	r3, r0
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d037      	beq.n	800efb2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb0>
        {
            // Only drawables intersecting with the specified invalidated area will be added.
            Rect drawableRegion = invalidatedArea & d->getRect();
 800ef42:	69f8      	ldr	r0, [r7, #28]
 800ef44:	f7ff fc3e 	bl	800e7c4 <_ZNK8touchgfx8Drawable7getRectEv>
 800ef48:	4602      	mov	r2, r0
 800ef4a:	f107 0314 	add.w	r3, r7, #20
 800ef4e:	68b9      	ldr	r1, [r7, #8]
 800ef50:	4618      	mov	r0, r3
 800ef52:	f7ff fae2 	bl	800e51a <_ZNK8touchgfx4RectanERKS0_>
            if (!drawableRegion.isEmpty())
 800ef56:	f107 0314 	add.w	r3, r7, #20
 800ef5a:	4618      	mov	r0, r3
 800ef5c:	f7ff fbfa 	bl	800e754 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ef60:	4603      	mov	r3, r0
 800ef62:	f083 0301 	eor.w	r3, r3, #1
 800ef66:	b2db      	uxtb	r3, r3
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d022      	beq.n	800efb2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb0>
            {
                drawableRegion.x -= d->getX();
 800ef6c:	69f8      	ldr	r0, [r7, #28]
 800ef6e:	f7ff fc62 	bl	800e836 <_ZNK8touchgfx8Drawable4getXEv>
 800ef72:	4603      	mov	r3, r0
 800ef74:	4619      	mov	r1, r3
 800ef76:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ef7a:	b29a      	uxth	r2, r3
 800ef7c:	b28b      	uxth	r3, r1
 800ef7e:	1ad3      	subs	r3, r2, r3
 800ef80:	b29b      	uxth	r3, r3
 800ef82:	b21b      	sxth	r3, r3
 800ef84:	82bb      	strh	r3, [r7, #20]
                drawableRegion.y -= d->getY();
 800ef86:	69f8      	ldr	r0, [r7, #28]
 800ef88:	f7ff fc62 	bl	800e850 <_ZNK8touchgfx8Drawable4getYEv>
 800ef8c:	4603      	mov	r3, r0
 800ef8e:	4619      	mov	r1, r3
 800ef90:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ef94:	b29a      	uxth	r2, r3
 800ef96:	b28b      	uxth	r3, r1
 800ef98:	1ad3      	subs	r3, r2, r3
 800ef9a:	b29b      	uxth	r3, r3
 800ef9c:	b21b      	sxth	r3, r3
 800ef9e:	82fb      	strh	r3, [r7, #22]
                d->setupDrawChain(drawableRegion, nextPreviousElement);
 800efa0:	69fb      	ldr	r3, [r7, #28]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	3360      	adds	r3, #96	; 0x60
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	f107 0114 	add.w	r1, r7, #20
 800efac:	687a      	ldr	r2, [r7, #4]
 800efae:	69f8      	ldr	r0, [r7, #28]
 800efb0:	4798      	blx	r3
            }
        }
        d = d->nextSibling;
 800efb2:	69fb      	ldr	r3, [r7, #28]
 800efb4:	699b      	ldr	r3, [r3, #24]
 800efb6:	61fb      	str	r3, [r7, #28]
    while (d)
 800efb8:	e7ba      	b.n	800ef30 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x2e>
        return;
 800efba:	bf00      	nop
 800efbc:	e000      	b.n	800efc0 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbe>
        return;
 800efbe:	bf00      	nop
    }
}
 800efc0:	3720      	adds	r7, #32
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}

0800efc6 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 800efc6:	b480      	push	{r7}
 800efc8:	b083      	sub	sp, #12
 800efca:	af00      	add	r7, sp, #0
 800efcc:	6078      	str	r0, [r7, #4]
        return rect.width;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 800efd4:	4618      	mov	r0, r3
 800efd6:	370c      	adds	r7, #12
 800efd8:	46bd      	mov	sp, r7
 800efda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efde:	4770      	bx	lr

0800efe0 <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 800efe0:	b480      	push	{r7}
 800efe2:	b083      	sub	sp, #12
 800efe4:	af00      	add	r7, sp, #0
 800efe6:	6078      	str	r0, [r7, #4]
        return rect.height;
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 800efee:	4618      	mov	r0, r3
 800eff0:	370c      	adds	r7, #12
 800eff2:	46bd      	mov	sp, r7
 800eff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff8:	4770      	bx	lr
	...

0800effc <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
 *       taking zero, one, two or three arguments.
 *
 * @tparam T1 The type of the first argument in the member function, or void if none.
 */
template <class T1>
class GenericCallback<T1, void, void>
 800effc:	b480      	push	{r7}
 800effe:	b083      	sub	sp, #12
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
 800f004:	4a04      	ldr	r2, [pc, #16]	; (800f018 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	601a      	str	r2, [r3, #0]
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	4618      	mov	r0, r3
 800f00e:	370c      	adds	r7, #12
 800f010:	46bd      	mov	sp, r7
 800f012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f016:	4770      	bx	lr
 800f018:	080248a8 	.word	0x080248a8

0800f01c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 800f01c:	b480      	push	{r7}
 800f01e:	b083      	sub	sp, #12
 800f020:	af00      	add	r7, sp, #0
 800f022:	6078      	str	r0, [r7, #4]
    {
    }
 800f024:	4a04      	ldr	r2, [pc, #16]	; (800f038 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	601a      	str	r2, [r3, #0]
 800f02a:	687b      	ldr	r3, [r7, #4]
 800f02c:	4618      	mov	r0, r3
 800f02e:	370c      	adds	r7, #12
 800f030:	46bd      	mov	sp, r7
 800f032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f036:	4770      	bx	lr
 800f038:	080248a8 	.word	0x080248a8

0800f03c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b082      	sub	sp, #8
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
    }
 800f044:	6878      	ldr	r0, [r7, #4]
 800f046:	f7ff ffe9 	bl	800f01c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800f04a:	2104      	movs	r1, #4
 800f04c:	6878      	ldr	r0, [r7, #4]
 800f04e:	f013 fa9d 	bl	802258c <_ZdlPvj>
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	4618      	mov	r0, r3
 800f056:	3708      	adds	r7, #8
 800f058:	46bd      	mov	sp, r7
 800f05a:	bd80      	pop	{r7, pc}

0800f05c <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800f05c:	b480      	push	{r7}
 800f05e:	b083      	sub	sp, #12
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
 800f064:	6039      	str	r1, [r7, #0]
        color = col;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	683a      	ldr	r2, [r7, #0]
 800f06a:	601a      	str	r2, [r3, #0]
    }
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	4618      	mov	r0, r3
 800f070:	370c      	adds	r7, #12
 800f072:	46bd      	mov	sp, r7
 800f074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f078:	4770      	bx	lr

0800f07a <_ZN8touchgfx4RectC1Ev>:
    Rect()
 800f07a:	b480      	push	{r7}
 800f07c:	b083      	sub	sp, #12
 800f07e:	af00      	add	r7, sp, #0
 800f080:	6078      	str	r0, [r7, #4]
        this->x = 0;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2200      	movs	r2, #0
 800f086:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2200      	movs	r2, #0
 800f08c:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2200      	movs	r2, #0
 800f092:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800f094:	687b      	ldr	r3, [r7, #4]
 800f096:	2200      	movs	r2, #0
 800f098:	80da      	strh	r2, [r3, #6]
    }
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	4618      	mov	r0, r3
 800f09e:	370c      	adds	r7, #12
 800f0a0:	46bd      	mov	sp, r7
 800f0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a6:	4770      	bx	lr

0800f0a8 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID) : bitmapId(id)
 800f0a8:	b480      	push	{r7}
 800f0aa:	b083      	sub	sp, #12
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
 800f0b0:	460b      	mov	r3, r1
 800f0b2:	807b      	strh	r3, [r7, #2]
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	887a      	ldrh	r2, [r7, #2]
 800f0b8:	801a      	strh	r2, [r3, #0]
    {
    }
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	4618      	mov	r0, r3
 800f0be:	370c      	adds	r7, #12
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0c6:	4770      	bx	lr

0800f0c8 <_ZN8touchgfx8DrawableC1Ev>:
    Drawable() : rect(0, 0, 0, 0),
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b084      	sub	sp, #16
 800f0cc:	af02      	add	r7, sp, #8
 800f0ce:	6078      	str	r0, [r7, #4]
        visible(true)
 800f0d0:	4a13      	ldr	r2, [pc, #76]	; (800f120 <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	601a      	str	r2, [r3, #0]
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	1d18      	adds	r0, r3, #4
 800f0da:	2300      	movs	r3, #0
 800f0dc:	9300      	str	r3, [sp, #0]
 800f0de:	2300      	movs	r3, #0
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	2100      	movs	r1, #0
 800f0e4:	f7ff f96e 	bl	800e3c4 <_ZN8touchgfx4RectC1Essss>
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	330c      	adds	r3, #12
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	f7ff ffc4 	bl	800f07a <_ZN8touchgfx4RectC1Ev>
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2200      	movs	r2, #0
 800f0f6:	615a      	str	r2, [r3, #20]
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	619a      	str	r2, [r3, #24]
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	2200      	movs	r2, #0
 800f102:	61da      	str	r2, [r3, #28]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2200      	movs	r2, #0
 800f108:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2201      	movs	r2, #1
 800f110:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800f114:	687b      	ldr	r3, [r7, #4]
 800f116:	4618      	mov	r0, r3
 800f118:	3708      	adds	r7, #8
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd80      	pop	{r7, pc}
 800f11e:	bf00      	nop
 800f120:	0802611c 	.word	0x0802611c

0800f124 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 800f124:	b480      	push	{r7}
 800f126:	b083      	sub	sp, #12
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
 800f12c:	460b      	mov	r3, r1
 800f12e:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	78fa      	ldrb	r2, [r7, #3]
 800f134:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800f138:	bf00      	nop
 800f13a:	370c      	adds	r7, #12
 800f13c:	46bd      	mov	sp, r7
 800f13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f142:	4770      	bx	lr

0800f144 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800f144:	b480      	push	{r7}
 800f146:	b083      	sub	sp, #12
 800f148:	af00      	add	r7, sp, #0
 800f14a:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f152:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f15a:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f162:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800f164:	bf00      	nop
 800f166:	370c      	adds	r7, #12
 800f168:	46bd      	mov	sp, r7
 800f16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f16e:	4770      	bx	lr

0800f170 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800f170:	b580      	push	{r7, lr}
 800f172:	b084      	sub	sp, #16
 800f174:	af00      	add	r7, sp, #0
 800f176:	60f8      	str	r0, [r7, #12]
 800f178:	60b9      	str	r1, [r7, #8]
 800f17a:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800f17c:	68f8      	ldr	r0, [r7, #12]
 800f17e:	f7ff ffe1 	bl	800f144 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	681a      	ldr	r2, [r3, #0]
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	68fa      	ldr	r2, [r7, #12]
 800f18e:	601a      	str	r2, [r3, #0]
    }
 800f190:	bf00      	nop
 800f192:	3710      	adds	r7, #16
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}

0800f198 <_ZN8touchgfx9ContainerC1Ev>:
    Container() : Drawable(),
 800f198:	b580      	push	{r7, lr}
 800f19a:	b082      	sub	sp, #8
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
        firstChild(0)
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f7ff ff90 	bl	800f0c8 <_ZN8touchgfx8DrawableC1Ev>
 800f1a8:	4a05      	ldr	r2, [pc, #20]	; (800f1c0 <_ZN8touchgfx9ContainerC1Ev+0x28>)
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	601a      	str	r2, [r3, #0]
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3708      	adds	r7, #8
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}
 800f1be:	bf00      	nop
 800f1c0:	08024818 	.word	0x08024818

0800f1c4 <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b082      	sub	sp, #8
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f7ff ff7a 	bl	800f0c8 <_ZN8touchgfx8DrawableC1Ev>
 800f1d4:	4a03      	ldr	r2, [pc, #12]	; (800f1e4 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	601a      	str	r2, [r3, #0]
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	4618      	mov	r0, r3
 800f1de:	3708      	adds	r7, #8
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	bd80      	pop	{r7, pc}
 800f1e4:	080248c0 	.word	0x080248c0

0800f1e8 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b082      	sub	sp, #8
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	6078      	str	r0, [r7, #4]
 800f1f0:	4a05      	ldr	r2, [pc, #20]	; (800f208 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	601a      	str	r2, [r3, #0]
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	4618      	mov	r0, r3
 800f1fa:	f7ff fac3 	bl	800e784 <_ZN8touchgfx8DrawableD1Ev>
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	4618      	mov	r0, r3
 800f202:	3708      	adds	r7, #8
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}
 800f208:	080248c0 	.word	0x080248c0

0800f20c <_ZN8touchgfx6WidgetD0Ev>:
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b082      	sub	sp, #8
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
 800f214:	6878      	ldr	r0, [r7, #4]
 800f216:	f7ff ffe7 	bl	800f1e8 <_ZN8touchgfx6WidgetD1Ev>
 800f21a:	2128      	movs	r1, #40	; 0x28
 800f21c:	6878      	ldr	r0, [r7, #4]
 800f21e:	f013 f9b5 	bl	802258c <_ZdlPvj>
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	4618      	mov	r0, r3
 800f226:	3708      	adds	r7, #8
 800f228:	46bd      	mov	sp, r7
 800f22a:	bd80      	pop	{r7, pc}

0800f22c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800f22c:	b580      	push	{r7, lr}
 800f22e:	b084      	sub	sp, #16
 800f230:	af00      	add	r7, sp, #0
 800f232:	60f8      	str	r0, [r7, #12]
 800f234:	607b      	str	r3, [r7, #4]
 800f236:	460b      	mov	r3, r1
 800f238:	817b      	strh	r3, [r7, #10]
 800f23a:	4613      	mov	r3, r2
 800f23c:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800f23e:	68fb      	ldr	r3, [r7, #12]
 800f240:	4618      	mov	r0, r3
 800f242:	f7ff fba1 	bl	800e988 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800f246:	4603      	mov	r3, r0
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d008      	beq.n	800f25e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	4618      	mov	r0, r3
 800f250:	f7ff fba7 	bl	800e9a2 <_ZNK8touchgfx8Drawable11isTouchableEv>
 800f254:	4603      	mov	r3, r0
 800f256:	2b00      	cmp	r3, #0
 800f258:	d001      	beq.n	800f25e <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800f25a:	2301      	movs	r3, #1
 800f25c:	e000      	b.n	800f260 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800f25e:	2300      	movs	r3, #0
 800f260:	2b00      	cmp	r3, #0
 800f262:	d002      	beq.n	800f26a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800f264:	68fa      	ldr	r2, [r7, #12]
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	601a      	str	r2, [r3, #0]
        }
    }
 800f26a:	bf00      	nop
 800f26c:	3710      	adds	r7, #16
 800f26e:	46bd      	mov	sp, r7
 800f270:	bd80      	pop	{r7, pc}

0800f272 <_ZNK8touchgfx6Widget7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_WIDGET.
     */
    virtual uint16_t getType() const
 800f272:	b480      	push	{r7}
 800f274:	b083      	sub	sp, #12
 800f276:	af00      	add	r7, sp, #0
 800f278:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_WIDGET;
 800f27a:	2301      	movs	r3, #1
    }
 800f27c:	4618      	mov	r0, r3
 800f27e:	370c      	adds	r7, #12
 800f280:	46bd      	mov	sp, r7
 800f282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f286:	4770      	bx	lr

0800f288 <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 800f288:	b580      	push	{r7, lr}
 800f28a:	b082      	sub	sp, #8
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	4618      	mov	r0, r3
 800f294:	f7ff ff96 	bl	800f1c4 <_ZN8touchgfx6WidgetC1Ev>
 800f298:	4a0a      	ldr	r2, [pc, #40]	; (800f2c4 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	601a      	str	r2, [r3, #0]
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	22ff      	movs	r2, #255	; 0xff
 800f2a2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	3328      	adds	r3, #40	; 0x28
 800f2aa:	2100      	movs	r1, #0
 800f2ac:	4618      	mov	r0, r3
 800f2ae:	f7ff fed5 	bl	800f05c <_ZN8touchgfx9colortypeC1Em>
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	4618      	mov	r0, r3
 800f2be:	3708      	adds	r7, #8
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bd80      	pop	{r7, pc}
 800f2c4:	08024ae8 	.word	0x08024ae8

0800f2c8 <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b082      	sub	sp, #8
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	4a05      	ldr	r2, [pc, #20]	; (800f2e8 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	601a      	str	r2, [r3, #0]
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	4618      	mov	r0, r3
 800f2da:	f7ff ff85 	bl	800f1e8 <_ZN8touchgfx6WidgetD1Ev>
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	3708      	adds	r7, #8
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}
 800f2e8:	08024ae8 	.word	0x08024ae8

0800f2ec <_ZN8touchgfx3BoxD0Ev>:
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b082      	sub	sp, #8
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
 800f2f4:	6878      	ldr	r0, [r7, #4]
 800f2f6:	f7ff ffe7 	bl	800f2c8 <_ZN8touchgfx3BoxD1Ev>
 800f2fa:	2130      	movs	r1, #48	; 0x30
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f013 f945 	bl	802258c <_ZdlPvj>
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	4618      	mov	r0, r3
 800f306:	3708      	adds	r7, #8
 800f308:	46bd      	mov	sp, r7
 800f30a:	bd80      	pop	{r7, pc}

0800f30c <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 800f30c:	b480      	push	{r7}
 800f30e:	b083      	sub	sp, #12
 800f310:	af00      	add	r7, sp, #0
 800f312:	6078      	str	r0, [r7, #4]
 800f314:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	683a      	ldr	r2, [r7, #0]
 800f31a:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800f31c:	bf00      	nop
 800f31e:	370c      	adds	r7, #12
 800f320:	46bd      	mov	sp, r7
 800f322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f326:	4770      	bx	lr

0800f328 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800f328:	b580      	push	{r7, lr}
 800f32a:	b082      	sub	sp, #8
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
 800f330:	6039      	str	r1, [r7, #0]
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	4618      	mov	r0, r3
 800f336:	f7ff ff45 	bl	800f1c4 <_ZN8touchgfx6WidgetC1Ev>
 800f33a:	4a0b      	ldr	r2, [pc, #44]	; (800f368 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	601a      	str	r2, [r3, #0]
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	3326      	adds	r3, #38	; 0x26
 800f344:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f348:	4618      	mov	r0, r3
 800f34a:	f7ff fead 	bl	800f0a8 <_ZN8touchgfx6BitmapC1Et>
 800f34e:	687b      	ldr	r3, [r7, #4]
 800f350:	22ff      	movs	r2, #255	; 0xff
 800f352:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 800f356:	6839      	ldr	r1, [r7, #0]
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f001 fa8c 	bl	8010876 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	4618      	mov	r0, r3
 800f362:	3708      	adds	r7, #8
 800f364:	46bd      	mov	sp, r7
 800f366:	bd80      	pop	{r7, pc}
 800f368:	08024d20 	.word	0x08024d20

0800f36c <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b082      	sub	sp, #8
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	4a05      	ldr	r2, [pc, #20]	; (800f38c <_ZN8touchgfx5ImageD1Ev+0x20>)
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	601a      	str	r2, [r3, #0]
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	4618      	mov	r0, r3
 800f37e:	f7ff ff33 	bl	800f1e8 <_ZN8touchgfx6WidgetD1Ev>
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	4618      	mov	r0, r3
 800f386:	3708      	adds	r7, #8
 800f388:	46bd      	mov	sp, r7
 800f38a:	bd80      	pop	{r7, pc}
 800f38c:	08024d20 	.word	0x08024d20

0800f390 <_ZN8touchgfx5ImageD0Ev>:
 800f390:	b580      	push	{r7, lr}
 800f392:	b082      	sub	sp, #8
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f7ff ffe7 	bl	800f36c <_ZN8touchgfx5ImageD1Ev>
 800f39e:	212c      	movs	r1, #44	; 0x2c
 800f3a0:	6878      	ldr	r0, [r7, #4]
 800f3a2:	f013 f8f3 	bl	802258c <_ZdlPvj>
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	4618      	mov	r0, r3
 800f3aa:	3708      	adds	r7, #8
 800f3ac:	46bd      	mov	sp, r7
 800f3ae:	bd80      	pop	{r7, pc}

0800f3b0 <_ZN8touchgfx5EventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Event() { }
 800f3b0:	b480      	push	{r7}
 800f3b2:	b083      	sub	sp, #12
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
 800f3b8:	4a04      	ldr	r2, [pc, #16]	; (800f3cc <_ZN8touchgfx5EventD1Ev+0x1c>)
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	601a      	str	r2, [r3, #0]
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	370c      	adds	r7, #12
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ca:	4770      	bx	lr
 800f3cc:	08024954 	.word	0x08024954

0800f3d0 <_ZN8touchgfx5EventD0Ev>:
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b082      	sub	sp, #8
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f7ff ffe9 	bl	800f3b0 <_ZN8touchgfx5EventD1Ev>
 800f3de:	2104      	movs	r1, #4
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f013 f8d3 	bl	802258c <_ZdlPvj>
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	3708      	adds	r7, #8
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}

0800f3f0 <_ZN8touchgfx10ClickEventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~ClickEvent() { }
 800f3f0:	b580      	push	{r7, lr}
 800f3f2:	b082      	sub	sp, #8
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
 800f3f8:	4a05      	ldr	r2, [pc, #20]	; (800f410 <_ZN8touchgfx10ClickEventD1Ev+0x20>)
 800f3fa:	687b      	ldr	r3, [r7, #4]
 800f3fc:	601a      	str	r2, [r3, #0]
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	4618      	mov	r0, r3
 800f402:	f7ff ffd5 	bl	800f3b0 <_ZN8touchgfx5EventD1Ev>
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	4618      	mov	r0, r3
 800f40a:	3708      	adds	r7, #8
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}
 800f410:	08024940 	.word	0x08024940

0800f414 <_ZN8touchgfx10ClickEventD0Ev>:
 800f414:	b580      	push	{r7, lr}
 800f416:	b082      	sub	sp, #8
 800f418:	af00      	add	r7, sp, #0
 800f41a:	6078      	str	r0, [r7, #4]
 800f41c:	6878      	ldr	r0, [r7, #4]
 800f41e:	f7ff ffe7 	bl	800f3f0 <_ZN8touchgfx10ClickEventD1Ev>
 800f422:	210c      	movs	r1, #12
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f013 f8b1 	bl	802258c <_ZdlPvj>
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	4618      	mov	r0, r3
 800f42e:	3708      	adds	r7, #8
 800f430:	46bd      	mov	sp, r7
 800f432:	bd80      	pop	{r7, pc}

0800f434 <_ZNK8touchgfx10ClickEvent7getTypeEv>:
     *
     *        Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 800f434:	b480      	push	{r7}
 800f436:	b083      	sub	sp, #12
 800f438:	af00      	add	r7, sp, #0
 800f43a:	6078      	str	r0, [r7, #4]
    {
        return _type;
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	791b      	ldrb	r3, [r3, #4]
    }
 800f440:	4618      	mov	r0, r3
 800f442:	370c      	adds	r7, #12
 800f444:	46bd      	mov	sp, r7
 800f446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44a:	4770      	bx	lr

0800f44c <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
     *
     *        Gets event type.
     *
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
 800f44c:	b480      	push	{r7}
 800f44e:	b083      	sub	sp, #12
 800f450:	af00      	add	r7, sp, #0
 800f452:	6078      	str	r0, [r7, #4]
    {
        return Event::EVENT_CLICK;
 800f454:	2300      	movs	r3, #0
    }
 800f456:	4618      	mov	r0, r3
 800f458:	370c      	adds	r7, #12
 800f45a:	46bd      	mov	sp, r7
 800f45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f460:	4770      	bx	lr
	...

0800f464 <_ZN8touchgfx9DragEventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DragEvent() { }
 800f464:	b580      	push	{r7, lr}
 800f466:	b082      	sub	sp, #8
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
 800f46c:	4a05      	ldr	r2, [pc, #20]	; (800f484 <_ZN8touchgfx9DragEventD1Ev+0x20>)
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	601a      	str	r2, [r3, #0]
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	4618      	mov	r0, r3
 800f476:	f7ff ff9b 	bl	800f3b0 <_ZN8touchgfx5EventD1Ev>
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	4618      	mov	r0, r3
 800f47e:	3708      	adds	r7, #8
 800f480:	46bd      	mov	sp, r7
 800f482:	bd80      	pop	{r7, pc}
 800f484:	0802492c 	.word	0x0802492c

0800f488 <_ZN8touchgfx9DragEventD0Ev>:
 800f488:	b580      	push	{r7, lr}
 800f48a:	b082      	sub	sp, #8
 800f48c:	af00      	add	r7, sp, #0
 800f48e:	6078      	str	r0, [r7, #4]
 800f490:	6878      	ldr	r0, [r7, #4]
 800f492:	f7ff ffe7 	bl	800f464 <_ZN8touchgfx9DragEventD1Ev>
 800f496:	2110      	movs	r1, #16
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	f013 f877 	bl	802258c <_ZdlPvj>
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3708      	adds	r7, #8
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}

0800f4a8 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
     *
     *        Gets event type.
     *
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
 800f4a8:	b480      	push	{r7}
 800f4aa:	b083      	sub	sp, #12
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
    {
        return Event::EVENT_DRAG;
 800f4b0:	2301      	movs	r3, #1
    }
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	370c      	adds	r7, #12
 800f4b6:	46bd      	mov	sp, r7
 800f4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4bc:	4770      	bx	lr
	...

0800f4c0 <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800f4c0:	b480      	push	{r7}
 800f4c2:	af00      	add	r7, sp, #0
    {
        return instance;
 800f4c4:	4b03      	ldr	r3, [pc, #12]	; (800f4d4 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
    }
 800f4c8:	4618      	mov	r0, r3
 800f4ca:	46bd      	mov	sp, r7
 800f4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d0:	4770      	bx	lr
 800f4d2:	bf00      	nop
 800f4d4:	20009d38 	.word	0x20009d38

0800f4d8 <_ZN8touchgfx14AbstractButtonC1Ev>:
     * @brief Constructor.
     *
     *        Constructs an AbstractButton instance in released state without an associated
     *        action.
     */
    AbstractButton() : Widget(), action(), pressed(false)
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b082      	sub	sp, #8
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	f7ff fe6e 	bl	800f1c4 <_ZN8touchgfx6WidgetC1Ev>
 800f4e8:	4a09      	ldr	r2, [pc, #36]	; (800f510 <_ZN8touchgfx14AbstractButtonC1Ev+0x38>)
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	601a      	str	r2, [r3, #0]
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	629a      	str	r2, [r3, #40]	; 0x28
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2101      	movs	r1, #1
 800f500:	4618      	mov	r0, r3
 800f502:	f7ff fe0f 	bl	800f124 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	4618      	mov	r0, r3
 800f50a:	3708      	adds	r7, #8
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}
 800f510:	08024a78 	.word	0x08024a78

0800f514 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the AbstractButton.
     *
     * @see GenericCallback
     */
    void setAction(GenericCallback< const AbstractButton& >& callback)
 800f514:	b480      	push	{r7}
 800f516:	b083      	sub	sp, #12
 800f518:	af00      	add	r7, sp, #0
 800f51a:	6078      	str	r0, [r7, #4]
 800f51c:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	683a      	ldr	r2, [r7, #0]
 800f522:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800f524:	bf00      	nop
 800f526:	370c      	adds	r7, #12
 800f528:	46bd      	mov	sp, r7
 800f52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52e:	4770      	bx	lr

0800f530 <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800f530:	b580      	push	{r7, lr}
 800f532:	b082      	sub	sp, #8
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
 800f538:	4a05      	ldr	r2, [pc, #20]	; (800f550 <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	601a      	str	r2, [r3, #0]
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	4618      	mov	r0, r3
 800f542:	f7ff fe51 	bl	800f1e8 <_ZN8touchgfx6WidgetD1Ev>
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	4618      	mov	r0, r3
 800f54a:	3708      	adds	r7, #8
 800f54c:	46bd      	mov	sp, r7
 800f54e:	bd80      	pop	{r7, pc}
 800f550:	08024a78 	.word	0x08024a78

0800f554 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800f554:	b580      	push	{r7, lr}
 800f556:	b082      	sub	sp, #8
 800f558:	af00      	add	r7, sp, #0
 800f55a:	6078      	str	r0, [r7, #4]
 800f55c:	6878      	ldr	r0, [r7, #4]
 800f55e:	f7ff ffe7 	bl	800f530 <_ZN8touchgfx14AbstractButtonD1Ev>
 800f562:	2130      	movs	r1, #48	; 0x30
 800f564:	6878      	ldr	r0, [r7, #4]
 800f566:	f013 f811 	bl	802258c <_ZdlPvj>
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	4618      	mov	r0, r3
 800f56e:	3708      	adds	r7, #8
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}

0800f574 <_ZN8touchgfx6ButtonC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Button() : AbstractButton(), up(), down(), alpha(255) { }
 800f574:	b580      	push	{r7, lr}
 800f576:	b082      	sub	sp, #8
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	4618      	mov	r0, r3
 800f580:	f7ff ffaa 	bl	800f4d8 <_ZN8touchgfx14AbstractButtonC1Ev>
 800f584:	4a0c      	ldr	r2, [pc, #48]	; (800f5b8 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	601a      	str	r2, [r3, #0]
 800f58a:	687b      	ldr	r3, [r7, #4]
 800f58c:	332e      	adds	r3, #46	; 0x2e
 800f58e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f592:	4618      	mov	r0, r3
 800f594:	f7ff fd88 	bl	800f0a8 <_ZN8touchgfx6BitmapC1Et>
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	3330      	adds	r3, #48	; 0x30
 800f59c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	f7ff fd81 	bl	800f0a8 <_ZN8touchgfx6BitmapC1Et>
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	22ff      	movs	r2, #255	; 0xff
 800f5aa:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	3708      	adds	r7, #8
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	bd80      	pop	{r7, pc}
 800f5b8:	08024bc0 	.word	0x08024bc0

0800f5bc <_ZN8touchgfx6ButtonD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Button() { }
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b082      	sub	sp, #8
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	4a05      	ldr	r2, [pc, #20]	; (800f5dc <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	601a      	str	r2, [r3, #0]
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f7ff ffaf 	bl	800f530 <_ZN8touchgfx14AbstractButtonD1Ev>
 800f5d2:	687b      	ldr	r3, [r7, #4]
 800f5d4:	4618      	mov	r0, r3
 800f5d6:	3708      	adds	r7, #8
 800f5d8:	46bd      	mov	sp, r7
 800f5da:	bd80      	pop	{r7, pc}
 800f5dc:	08024bc0 	.word	0x08024bc0

0800f5e0 <_ZN8touchgfx6ButtonD0Ev>:
 800f5e0:	b580      	push	{r7, lr}
 800f5e2:	b082      	sub	sp, #8
 800f5e4:	af00      	add	r7, sp, #0
 800f5e6:	6078      	str	r0, [r7, #4]
 800f5e8:	6878      	ldr	r0, [r7, #4]
 800f5ea:	f7ff ffe7 	bl	800f5bc <_ZN8touchgfx6ButtonD1Ev>
 800f5ee:	2134      	movs	r1, #52	; 0x34
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	f012 ffcb 	bl	802258c <_ZdlPvj>
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	3708      	adds	r7, #8
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}

0800f600 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800f600:	b480      	push	{r7}
 800f602:	b083      	sub	sp, #12
 800f604:	af00      	add	r7, sp, #0
 800f606:	6078      	str	r0, [r7, #4]
 800f608:	4a04      	ldr	r2, [pc, #16]	; (800f61c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	601a      	str	r2, [r3, #0]
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	4618      	mov	r0, r3
 800f612:	370c      	adds	r7, #12
 800f614:	46bd      	mov	sp, r7
 800f616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f61a:	4770      	bx	lr
 800f61c:	08024968 	.word	0x08024968

0800f620 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800f620:	b480      	push	{r7}
 800f622:	b083      	sub	sp, #12
 800f624:	af00      	add	r7, sp, #0
 800f626:	6078      	str	r0, [r7, #4]
    }
 800f628:	4a04      	ldr	r2, [pc, #16]	; (800f63c <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	601a      	str	r2, [r3, #0]
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	4618      	mov	r0, r3
 800f632:	370c      	adds	r7, #12
 800f634:	46bd      	mov	sp, r7
 800f636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63a:	4770      	bx	lr
 800f63c:	08024968 	.word	0x08024968

0800f640 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800f640:	b580      	push	{r7, lr}
 800f642:	b082      	sub	sp, #8
 800f644:	af00      	add	r7, sp, #0
 800f646:	6078      	str	r0, [r7, #4]
    }
 800f648:	6878      	ldr	r0, [r7, #4]
 800f64a:	f7ff ffe9 	bl	800f620 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800f64e:	2104      	movs	r1, #4
 800f650:	6878      	ldr	r0, [r7, #4]
 800f652:	f012 ff9b 	bl	802258c <_ZdlPvj>
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	4618      	mov	r0, r3
 800f65a:	3708      	adds	r7, #8
 800f65c:	46bd      	mov	sp, r7
 800f65e:	bd80      	pop	{r7, pc}

0800f660 <_ZNK8touchgfx6Bitmap5getIdEv>:
     *
     *        Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 800f660:	b580      	push	{r7, lr}
 800f662:	b082      	sub	sp, #8
 800f664:	af00      	add	r7, sp, #0
 800f666:	6078      	str	r0, [r7, #4]
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 800f668:	4b07      	ldr	r3, [pc, #28]	; (800f688 <_ZNK8touchgfx6Bitmap5getIdEv+0x28>)
 800f66a:	681b      	ldr	r3, [r3, #0]
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d105      	bne.n	800f67c <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>
 800f670:	4b06      	ldr	r3, [pc, #24]	; (800f68c <_ZNK8touchgfx6Bitmap5getIdEv+0x2c>)
 800f672:	4a07      	ldr	r2, [pc, #28]	; (800f690 <_ZNK8touchgfx6Bitmap5getIdEv+0x30>)
 800f674:	2195      	movs	r1, #149	; 0x95
 800f676:	4807      	ldr	r0, [pc, #28]	; (800f694 <_ZNK8touchgfx6Bitmap5getIdEv+0x34>)
 800f678:	f012 ffb6 	bl	80225e8 <__assert_func>
        return bitmapId;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	881b      	ldrh	r3, [r3, #0]
    }
 800f680:	4618      	mov	r0, r3
 800f682:	3708      	adds	r7, #8
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}
 800f688:	20009dd0 	.word	0x20009dd0
 800f68c:	08023830 	.word	0x08023830
 800f690:	0802386c 	.word	0x0802386c
 800f694:	080238a0 	.word	0x080238a0

0800f698 <_ZN8touchgfx5Image8setAlphaEh>:
     *
     *        Sets the alpha channel for the image.
     *
     * @param alpha The alpha value. 255 = completely solid.
     */
    void setAlpha(uint8_t alpha)
 800f698:	b480      	push	{r7}
 800f69a:	b083      	sub	sp, #12
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	6078      	str	r0, [r7, #4]
 800f6a0:	460b      	mov	r3, r1
 800f6a2:	70fb      	strb	r3, [r7, #3]
    {
        this->alpha = alpha;
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	78fa      	ldrb	r2, [r7, #3]
 800f6a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
 800f6ac:	bf00      	nop
 800f6ae:	370c      	adds	r7, #12
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b6:	4770      	bx	lr

0800f6b8 <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 800f6b8:	b480      	push	{r7}
 800f6ba:	b083      	sub	sp, #12
 800f6bc:	af00      	add	r7, sp, #0
 800f6be:	6078      	str	r0, [r7, #4]
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	601a      	str	r2, [r3, #0]
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	4618      	mov	r0, r3
 800f6ca:	370c      	adds	r7, #12
 800f6cc:	46bd      	mov	sp, r7
 800f6ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6d2:	4770      	bx	lr

0800f6d4 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800f6d4:	b480      	push	{r7}
 800f6d6:	af00      	add	r7, sp, #0
    {
        return instance->lcdRef;
 800f6d8:	4b03      	ldr	r3, [pc, #12]	; (800f6e8 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	689b      	ldr	r3, [r3, #8]
    }
 800f6de:	4618      	mov	r0, r3
 800f6e0:	46bd      	mov	sp, r7
 800f6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6e6:	4770      	bx	lr
 800f6e8:	20009d38 	.word	0x20009d38

0800f6ec <_ZN8touchgfx3LCD13StringVisualsC1EPKNS_4FontENS_9colortypeEhhtNS_12TextRotationEhhNS_14WideTextActionE>:
         * @param textDirection  The text direction.
         * @param indentation    The indentation of the text from the left and right of the text
         *                       area rectangle.
         * @param wideTextAction What to do with lines longer than the width of the TextArea.
         */
        StringVisuals(const Font* font, colortype color, uint8_t alpha, Alignment alignment, uint16_t linespace, TextRotation rotation, TextDirection textDirection, uint8_t indentation, WideTextAction wideTextAction = WIDE_TEXT_NONE)
 800f6ec:	b580      	push	{r7, lr}
 800f6ee:	b084      	sub	sp, #16
 800f6f0:	af00      	add	r7, sp, #0
 800f6f2:	60f8      	str	r0, [r7, #12]
 800f6f4:	60b9      	str	r1, [r7, #8]
 800f6f6:	607a      	str	r2, [r7, #4]
 800f6f8:	70fb      	strb	r3, [r7, #3]
        {
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	3308      	adds	r3, #8
 800f6fe:	4618      	mov	r0, r3
 800f700:	f7ff ffda 	bl	800f6b8 <_ZN8touchgfx9colortypeC1Ev>
            this->font = font;
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	68ba      	ldr	r2, [r7, #8]
 800f708:	601a      	str	r2, [r3, #0]
            this->color = color;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	687a      	ldr	r2, [r7, #4]
 800f70e:	609a      	str	r2, [r3, #8]
            this->alpha = alpha;
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	78fa      	ldrb	r2, [r7, #3]
 800f714:	739a      	strb	r2, [r3, #14]
            this->alignment = alignment;
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	7e3a      	ldrb	r2, [r7, #24]
 800f71a:	711a      	strb	r2, [r3, #4]
            this->textDirection = textDirection;
 800f71c:	68fb      	ldr	r3, [r7, #12]
 800f71e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800f722:	715a      	strb	r2, [r3, #5]
            this->rotation = rotation;
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	f897 2020 	ldrb.w	r2, [r7, #32]
 800f72a:	719a      	strb	r2, [r3, #6]
            this->linespace = linespace;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	8bba      	ldrh	r2, [r7, #28]
 800f730:	819a      	strh	r2, [r3, #12]
            this->indentation = indentation;
 800f732:	68fb      	ldr	r3, [r7, #12]
 800f734:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f738:	73da      	strb	r2, [r3, #15]
            this->wideTextAction = wideTextAction;
 800f73a:	68fb      	ldr	r3, [r7, #12]
 800f73c:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800f740:	741a      	strb	r2, [r3, #16]
        }
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	4618      	mov	r0, r3
 800f746:	3710      	adds	r7, #16
 800f748:	46bd      	mov	sp, r7
 800f74a:	bd80      	pop	{r7, pc}

0800f74c <_ZNK8touchgfx5Texts7getTextEt>:
     *
     * @param id The id of the text to lookup.
     *
     * @return The text.
     */
    const Unicode::UnicodeChar* getText(TypedTextId id) const
 800f74c:	b480      	push	{r7}
 800f74e:	b083      	sub	sp, #12
 800f750:	af00      	add	r7, sp, #0
 800f752:	6078      	str	r0, [r7, #4]
 800f754:	460b      	mov	r3, r1
 800f756:	807b      	strh	r3, [r7, #2]
    {
        return currentLanguagePtr[id];
 800f758:	4b05      	ldr	r3, [pc, #20]	; (800f770 <_ZNK8touchgfx5Texts7getTextEt+0x24>)
 800f75a:	681a      	ldr	r2, [r3, #0]
 800f75c:	887b      	ldrh	r3, [r7, #2]
 800f75e:	009b      	lsls	r3, r3, #2
 800f760:	4413      	add	r3, r2
 800f762:	681b      	ldr	r3, [r3, #0]
    }
 800f764:	4618      	mov	r0, r3
 800f766:	370c      	adds	r7, #12
 800f768:	46bd      	mov	sp, r7
 800f76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76e:	4770      	bx	lr
 800f770:	20009c9c 	.word	0x20009c9c

0800f774 <_ZN8touchgfx9TypedTextC1Et>:
     *
     *        Construct a typed text.
     *
     * @param id The id of the TypedText.
     */
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 800f774:	b480      	push	{r7}
 800f776:	b083      	sub	sp, #12
 800f778:	af00      	add	r7, sp, #0
 800f77a:	6078      	str	r0, [r7, #4]
 800f77c:	460b      	mov	r3, r1
 800f77e:	807b      	strh	r3, [r7, #2]
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	887a      	ldrh	r2, [r7, #2]
 800f784:	801a      	strh	r2, [r3, #0]
    {
    }
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	4618      	mov	r0, r3
 800f78a:	370c      	adds	r7, #12
 800f78c:	46bd      	mov	sp, r7
 800f78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f792:	4770      	bx	lr

0800f794 <_ZNK8touchgfx9TypedText10hasValidIdEv>:
     *
     *        Has the TypedText been set to a proper value.
     *
     * @return Is the id valid.
     */
    bool hasValidId() const
 800f794:	b480      	push	{r7}
 800f796:	b083      	sub	sp, #12
 800f798:	af00      	add	r7, sp, #0
 800f79a:	6078      	str	r0, [r7, #4]
    {
        return typedTextId != TYPED_TEXT_INVALID;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	881b      	ldrh	r3, [r3, #0]
 800f7a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f7a4:	4293      	cmp	r3, r2
 800f7a6:	bf14      	ite	ne
 800f7a8:	2301      	movne	r3, #1
 800f7aa:	2300      	moveq	r3, #0
 800f7ac:	b2db      	uxtb	r3, r3
    }
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	370c      	adds	r7, #12
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b8:	4770      	bx	lr
	...

0800f7bc <_ZNK8touchgfx9TypedText7getTextEv>:
     *
     *        Gets the text associated with this TypedText.
     *
     * @return The text.
     */
    const Unicode::UnicodeChar* getText() const
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b082      	sub	sp, #8
 800f7c0:	af00      	add	r7, sp, #0
 800f7c2:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f7c4:	6878      	ldr	r0, [r7, #4]
 800f7c6:	f000 f85b 	bl	800f880 <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 800f7ca:	4b06      	ldr	r3, [pc, #24]	; (800f7e4 <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 800f7cc:	681a      	ldr	r2, [r3, #0]
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	881b      	ldrh	r3, [r3, #0]
 800f7d2:	4619      	mov	r1, r3
 800f7d4:	4610      	mov	r0, r2
 800f7d6:	f7ff ffb9 	bl	800f74c <_ZNK8touchgfx5Texts7getTextEt>
 800f7da:	4603      	mov	r3, r0
    }
 800f7dc:	4618      	mov	r0, r3
 800f7de:	3708      	adds	r7, #8
 800f7e0:	46bd      	mov	sp, r7
 800f7e2:	bd80      	pop	{r7, pc}
 800f7e4:	20009da4 	.word	0x20009da4

0800f7e8 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b082      	sub	sp, #8
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f7f0:	6878      	ldr	r0, [r7, #4]
 800f7f2:	f000 f845 	bl	800f880 <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800f7f6:	4b08      	ldr	r3, [pc, #32]	; (800f818 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 800f7f8:	681a      	ldr	r2, [r3, #0]
 800f7fa:	4b08      	ldr	r3, [pc, #32]	; (800f81c <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 800f7fc:	6819      	ldr	r1, [r3, #0]
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	881b      	ldrh	r3, [r3, #0]
 800f802:	005b      	lsls	r3, r3, #1
 800f804:	440b      	add	r3, r1
 800f806:	781b      	ldrb	r3, [r3, #0]
 800f808:	009b      	lsls	r3, r3, #2
 800f80a:	4413      	add	r3, r2
 800f80c:	681b      	ldr	r3, [r3, #0]
    }
 800f80e:	4618      	mov	r0, r3
 800f810:	3708      	adds	r7, #8
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}
 800f816:	bf00      	nop
 800f818:	20009da0 	.word	0x20009da0
 800f81c:	20009d98 	.word	0x20009d98

0800f820 <_ZNK8touchgfx9TypedText12getAlignmentEv>:
     *
     *        Gets the alignment associated with this TypedText.
     *
     * @return The alignment.
     */
    Alignment getAlignment() const
 800f820:	b580      	push	{r7, lr}
 800f822:	b082      	sub	sp, #8
 800f824:	af00      	add	r7, sp, #0
 800f826:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f000 f829 	bl	800f880 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].alignment;
 800f82e:	4b07      	ldr	r3, [pc, #28]	; (800f84c <_ZNK8touchgfx9TypedText12getAlignmentEv+0x2c>)
 800f830:	681a      	ldr	r2, [r3, #0]
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	881b      	ldrh	r3, [r3, #0]
 800f836:	005b      	lsls	r3, r3, #1
 800f838:	4413      	add	r3, r2
 800f83a:	785b      	ldrb	r3, [r3, #1]
 800f83c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800f840:	b2db      	uxtb	r3, r3
    }
 800f842:	4618      	mov	r0, r3
 800f844:	3708      	adds	r7, #8
 800f846:	46bd      	mov	sp, r7
 800f848:	bd80      	pop	{r7, pc}
 800f84a:	bf00      	nop
 800f84c:	20009d98 	.word	0x20009d98

0800f850 <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 800f850:	b580      	push	{r7, lr}
 800f852:	b082      	sub	sp, #8
 800f854:	af00      	add	r7, sp, #0
 800f856:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f000 f811 	bl	800f880 <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 800f85e:	4b07      	ldr	r3, [pc, #28]	; (800f87c <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 800f860:	681a      	ldr	r2, [r3, #0]
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	881b      	ldrh	r3, [r3, #0]
 800f866:	005b      	lsls	r3, r3, #1
 800f868:	4413      	add	r3, r2
 800f86a:	785b      	ldrb	r3, [r3, #1]
 800f86c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800f870:	b2db      	uxtb	r3, r3
    }
 800f872:	4618      	mov	r0, r3
 800f874:	3708      	adds	r7, #8
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}
 800f87a:	bf00      	nop
 800f87c:	20009d98 	.word	0x20009d98

0800f880 <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 800f880:	b580      	push	{r7, lr}
 800f882:	b082      	sub	sp, #8
 800f884:	af00      	add	r7, sp, #0
 800f886:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f888:	4b0c      	ldr	r3, [pc, #48]	; (800f8bc <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d105      	bne.n	800f89c <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 800f890:	4b0b      	ldr	r3, [pc, #44]	; (800f8c0 <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800f892:	4a0c      	ldr	r2, [pc, #48]	; (800f8c4 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f894:	21cf      	movs	r1, #207	; 0xcf
 800f896:	480c      	ldr	r0, [pc, #48]	; (800f8c8 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f898:	f012 fea6 	bl	80225e8 <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	881a      	ldrh	r2, [r3, #0]
 800f8a0:	4b0a      	ldr	r3, [pc, #40]	; (800f8cc <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800f8a2:	881b      	ldrh	r3, [r3, #0]
 800f8a4:	429a      	cmp	r2, r3
 800f8a6:	d305      	bcc.n	800f8b4 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800f8a8:	4b09      	ldr	r3, [pc, #36]	; (800f8d0 <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800f8aa:	4a06      	ldr	r2, [pc, #24]	; (800f8c4 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f8ac:	21d0      	movs	r1, #208	; 0xd0
 800f8ae:	4806      	ldr	r0, [pc, #24]	; (800f8c8 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f8b0:	f012 fe9a 	bl	80225e8 <__assert_func>
    }
 800f8b4:	bf00      	nop
 800f8b6:	3708      	adds	r7, #8
 800f8b8:	46bd      	mov	sp, r7
 800f8ba:	bd80      	pop	{r7, pc}
 800f8bc:	20009d98 	.word	0x20009d98
 800f8c0:	08023ae0 	.word	0x08023ae0
 800f8c4:	08023b24 	.word	0x08023b24
 800f8c8:	08023b54 	.word	0x08023b54
 800f8cc:	20009d9c 	.word	0x20009d9c
 800f8d0:	08023bc8 	.word	0x08023bc8

0800f8d4 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea() : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800f8d4:	b580      	push	{r7, lr}
 800f8d6:	b082      	sub	sp, #8
 800f8d8:	af00      	add	r7, sp, #0
 800f8da:	6078      	str	r0, [r7, #4]
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	4618      	mov	r0, r3
 800f8e0:	f7ff fc70 	bl	800f1c4 <_ZN8touchgfx6WidgetC1Ev>
 800f8e4:	4a13      	ldr	r2, [pc, #76]	; (800f934 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	601a      	str	r2, [r3, #0]
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	3326      	adds	r3, #38	; 0x26
 800f8ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f8f2:	4618      	mov	r0, r3
 800f8f4:	f7ff ff3e 	bl	800f774 <_ZN8touchgfx9TypedTextC1Et>
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	3328      	adds	r3, #40	; 0x28
 800f8fc:	2100      	movs	r1, #0
 800f8fe:	4618      	mov	r0, r3
 800f900:	f7ff fbac 	bl	800f05c <_ZN8touchgfx9colortypeC1Em>
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	2200      	movs	r2, #0
 800f908:	859a      	strh	r2, [r3, #44]	; 0x2c
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	22ff      	movs	r2, #255	; 0xff
 800f90e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2200      	movs	r2, #0
 800f916:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	2200      	movs	r2, #0
 800f91e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	2200      	movs	r2, #0
 800f926:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    { }
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	4618      	mov	r0, r3
 800f92e:	3708      	adds	r7, #8
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}
 800f934:	08024e04 	.word	0x08024e04

0800f938 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 800f938:	b580      	push	{r7, lr}
 800f93a:	b084      	sub	sp, #16
 800f93c:	af02      	add	r7, sp, #8
 800f93e:	6078      	str	r0, [r7, #4]
 800f940:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 800f942:	2300      	movs	r3, #0
 800f944:	9300      	str	r3, [sp, #0]
 800f946:	2300      	movs	r3, #0
 800f948:	2200      	movs	r2, #0
 800f94a:	2100      	movs	r1, #0
 800f94c:	6878      	ldr	r0, [r7, #4]
 800f94e:	f7fe fd39 	bl	800e3c4 <_ZN8touchgfx4RectC1Essss>
    }
 800f952:	6878      	ldr	r0, [r7, #4]
 800f954:	3708      	adds	r7, #8
 800f956:	46bd      	mov	sp, r7
 800f958:	bd80      	pop	{r7, pc}

0800f95a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 800f95a:	b480      	push	{r7}
 800f95c:	b083      	sub	sp, #12
 800f95e:	af00      	add	r7, sp, #0
 800f960:	6078      	str	r0, [r7, #4]
 800f962:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	683a      	ldr	r2, [r7, #0]
 800f968:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800f96a:	bf00      	nop
 800f96c:	370c      	adds	r7, #12
 800f96e:	46bd      	mov	sp, r7
 800f970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f974:	4770      	bx	lr

0800f976 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800f976:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f978:	b085      	sub	sp, #20
 800f97a:	af00      	add	r7, sp, #0
 800f97c:	6078      	str	r0, [r7, #4]
 800f97e:	460b      	mov	r3, r1
 800f980:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800f982:	687e      	ldr	r6, [r7, #4]
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	681b      	ldr	r3, [r3, #0]
 800f988:	3330      	adds	r3, #48	; 0x30
 800f98a:	681c      	ldr	r4, [r3, #0]
 800f98c:	887d      	ldrh	r5, [r7, #2]
 800f98e:	6878      	ldr	r0, [r7, #4]
 800f990:	f000 f836 	bl	800fa00 <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800f994:	4603      	mov	r3, r0
 800f996:	81bb      	strh	r3, [r7, #12]
 800f998:	f107 030c 	add.w	r3, r7, #12
 800f99c:	4618      	mov	r0, r3
 800f99e:	f7ff ff23 	bl	800f7e8 <_ZNK8touchgfx9TypedText7getFontEv>
 800f9a2:	4603      	mov	r3, r0
 800f9a4:	681a      	ldr	r2, [r3, #0]
 800f9a6:	322c      	adds	r2, #44	; 0x2c
 800f9a8:	6812      	ldr	r2, [r2, #0]
 800f9aa:	4618      	mov	r0, r3
 800f9ac:	4790      	blx	r2
 800f9ae:	4603      	mov	r3, r0
 800f9b0:	1aeb      	subs	r3, r5, r3
 800f9b2:	b29b      	uxth	r3, r3
 800f9b4:	b21b      	sxth	r3, r3
 800f9b6:	4619      	mov	r1, r3
 800f9b8:	4630      	mov	r0, r6
 800f9ba:	47a0      	blx	r4
    }
 800f9bc:	bf00      	nop
 800f9be:	3714      	adds	r7, #20
 800f9c0:	46bd      	mov	sp, r7
 800f9c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f9c4 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b082      	sub	sp, #8
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
 800f9cc:	460b      	mov	r3, r1
 800f9ce:	807b      	strh	r3, [r7, #2]
 800f9d0:	4613      	mov	r3, r2
 800f9d2:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800f9d4:	687a      	ldr	r2, [r7, #4]
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	332c      	adds	r3, #44	; 0x2c
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800f9e2:	4610      	mov	r0, r2
 800f9e4:	4798      	blx	r3
        setBaselineY(baselineY);
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	681b      	ldr	r3, [r3, #0]
 800f9ea:	3364      	adds	r3, #100	; 0x64
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f9f2:	4611      	mov	r1, r2
 800f9f4:	6878      	ldr	r0, [r7, #4]
 800f9f6:	4798      	blx	r3
    }
 800f9f8:	bf00      	nop
 800f9fa:	3708      	adds	r7, #8
 800f9fc:	46bd      	mov	sp, r7
 800f9fe:	bd80      	pop	{r7, pc}

0800fa00 <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 800fa00:	b480      	push	{r7}
 800fa02:	b083      	sub	sp, #12
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	370c      	adds	r7, #12
 800fa10:	46bd      	mov	sp, r7
 800fa12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa16:	4770      	bx	lr

0800fa18 <_ZNK8touchgfx8TextArea7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_TEXTAREA.
     */
    virtual uint16_t getType() const
 800fa18:	b480      	push	{r7}
 800fa1a:	b083      	sub	sp, #12
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_TEXTAREA;
 800fa20:	230d      	movs	r3, #13
    }
 800fa22:	4618      	mov	r0, r3
 800fa24:	370c      	adds	r7, #12
 800fa26:	46bd      	mov	sp, r7
 800fa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa2c:	4770      	bx	lr
	...

0800fa30 <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b082      	sub	sp, #8
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	4a05      	ldr	r2, [pc, #20]	; (800fa50 <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	601a      	str	r2, [r3, #0]
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	4618      	mov	r0, r3
 800fa42:	f7ff fbd1 	bl	800f1e8 <_ZN8touchgfx6WidgetD1Ev>
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	4618      	mov	r0, r3
 800fa4a:	3708      	adds	r7, #8
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}
 800fa50:	08024e04 	.word	0x08024e04

0800fa54 <_ZN8touchgfx8TextAreaD0Ev>:
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b082      	sub	sp, #8
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f7ff ffe7 	bl	800fa30 <_ZN8touchgfx8TextAreaD1Ev>
 800fa62:	2134      	movs	r1, #52	; 0x34
 800fa64:	6878      	ldr	r0, [r7, #4]
 800fa66:	f012 fd91 	bl	802258c <_ZdlPvj>
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	3708      	adds	r7, #8
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}

0800fa74 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase() : TextArea() {  }
 800fa74:	b580      	push	{r7, lr}
 800fa76:	b082      	sub	sp, #8
 800fa78:	af00      	add	r7, sp, #0
 800fa7a:	6078      	str	r0, [r7, #4]
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f7ff ff28 	bl	800f8d4 <_ZN8touchgfx8TextAreaC1Ev>
 800fa84:	4a03      	ldr	r2, [pc, #12]	; (800fa94 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	601a      	str	r2, [r3, #0]
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	4618      	mov	r0, r3
 800fa8e:	3708      	adds	r7, #8
 800fa90:	46bd      	mov	sp, r7
 800fa92:	bd80      	pop	{r7, pc}
 800fa94:	080249fc 	.word	0x080249fc

0800fa98 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b082      	sub	sp, #8
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
 800faa0:	4a05      	ldr	r2, [pc, #20]	; (800fab8 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	601a      	str	r2, [r3, #0]
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	4618      	mov	r0, r3
 800faaa:	f7ff ffc1 	bl	800fa30 <_ZN8touchgfx8TextAreaD1Ev>
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	4618      	mov	r0, r3
 800fab2:	3708      	adds	r7, #8
 800fab4:	46bd      	mov	sp, r7
 800fab6:	bd80      	pop	{r7, pc}
 800fab8:	080249fc 	.word	0x080249fc

0800fabc <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800fabc:	b580      	push	{r7, lr}
 800fabe:	b082      	sub	sp, #8
 800fac0:	af00      	add	r7, sp, #0
 800fac2:	6078      	str	r0, [r7, #4]
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	f7ff ffe7 	bl	800fa98 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800faca:	2134      	movs	r1, #52	; 0x34
 800facc:	6878      	ldr	r0, [r7, #4]
 800face:	f012 fd5d 	bl	802258c <_ZdlPvj>
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	4618      	mov	r0, r3
 800fad6:	3708      	adds	r7, #8
 800fad8:	46bd      	mov	sp, r7
 800fada:	bd80      	pop	{r7, pc}

0800fadc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard() : TextAreaWithWildcardBase(), wildcard(0)
 800fadc:	b580      	push	{r7, lr}
 800fade:	b082      	sub	sp, #8
 800fae0:	af00      	add	r7, sp, #0
 800fae2:	6078      	str	r0, [r7, #4]
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	4618      	mov	r0, r3
 800fae8:	f7ff ffc4 	bl	800fa74 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800faec:	4a05      	ldr	r2, [pc, #20]	; (800fb04 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	601a      	str	r2, [r3, #0]
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	2200      	movs	r2, #0
 800faf6:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	4618      	mov	r0, r3
 800fafc:	3708      	adds	r7, #8
 800fafe:	46bd      	mov	sp, r7
 800fb00:	bd80      	pop	{r7, pc}
 800fb02:	bf00      	nop
 800fb04:	08024980 	.word	0x08024980

0800fb08 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
     *
     *        Gets text height.
     *
     * @return The text height.
     */
    virtual int16_t getTextHeight()
 800fb08:	b590      	push	{r4, r7, lr}
 800fb0a:	b083      	sub	sp, #12
 800fb0c:	af00      	add	r7, sp, #0
 800fb0e:	6078      	str	r0, [r7, #4]
    {
        return typedText.hasValidId() ? calculateTextHeight(typedText.getText(), wildcard) : 0;
 800fb10:	687b      	ldr	r3, [r7, #4]
 800fb12:	3326      	adds	r3, #38	; 0x26
 800fb14:	4618      	mov	r0, r3
 800fb16:	f7ff fe3d 	bl	800f794 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d00e      	beq.n	800fb3e <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x36>
 800fb20:	687c      	ldr	r4, [r7, #4]
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	3326      	adds	r3, #38	; 0x26
 800fb26:	4618      	mov	r0, r3
 800fb28:	f7ff fe48 	bl	800f7bc <_ZNK8touchgfx9TypedText7getTextEv>
 800fb2c:	4601      	mov	r1, r0
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb32:	461a      	mov	r2, r3
 800fb34:	4620      	mov	r0, r4
 800fb36:	f001 f994 	bl	8010e62 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz>
 800fb3a:	4603      	mov	r3, r0
 800fb3c:	e000      	b.n	800fb40 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x38>
 800fb3e:	2300      	movs	r3, #0
    }
 800fb40:	4618      	mov	r0, r3
 800fb42:	370c      	adds	r7, #12
 800fb44:	46bd      	mov	sp, r7
 800fb46:	bd90      	pop	{r4, r7, pc}

0800fb48 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
     *        Draws TextArea and its text if a Font is set and the TypedText associated with
     *        the TextArea is valid.
     *
     * @param area The invalidated area.
     */
    virtual void draw(const Rect& area) const
 800fb48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb4a:	b093      	sub	sp, #76	; 0x4c
 800fb4c:	af06      	add	r7, sp, #24
 800fb4e:	60f8      	str	r0, [r7, #12]
 800fb50:	60b9      	str	r1, [r7, #8]
    {
        if (typedText.hasValidId())
 800fb52:	68fb      	ldr	r3, [r7, #12]
 800fb54:	3326      	adds	r3, #38	; 0x26
 800fb56:	4618      	mov	r0, r3
 800fb58:	f7ff fe1c 	bl	800f794 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d052      	beq.n	800fc08 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xc0>
        {
            const Font* fontToDraw = typedText.getFont();
 800fb62:	68fb      	ldr	r3, [r7, #12]
 800fb64:	3326      	adds	r3, #38	; 0x26
 800fb66:	4618      	mov	r0, r3
 800fb68:	f7ff fe3e 	bl	800f7e8 <_ZNK8touchgfx9TypedText7getFontEv>
 800fb6c:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (fontToDraw != 0)
 800fb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d049      	beq.n	800fc08 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xc0>
            {
                LCD::StringVisuals visuals(fontToDraw, color, alpha, typedText.getAlignment(), linespace, rotation, typedText.getTextDirection(), indentation, wideTextAction);
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	f893 602e 	ldrb.w	r6, [r3, #46]	; 0x2e
 800fb7a:	68fb      	ldr	r3, [r7, #12]
 800fb7c:	3326      	adds	r3, #38	; 0x26
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f7ff fe4e 	bl	800f820 <_ZNK8touchgfx9TypedText12getAlignmentEv>
 800fb84:	4603      	mov	r3, r0
 800fb86:	607b      	str	r3, [r7, #4]
 800fb88:	68fb      	ldr	r3, [r7, #12]
 800fb8a:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
 800fb8c:	68fb      	ldr	r3, [r7, #12]
 800fb8e:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	3326      	adds	r3, #38	; 0x26
 800fb96:	4618      	mov	r0, r3
 800fb98:	f7ff fe5a 	bl	800f850 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800fb9c:	4603      	mov	r3, r0
 800fb9e:	603b      	str	r3, [r7, #0]
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fba6:	68fa      	ldr	r2, [r7, #12]
 800fba8:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 800fbac:	68fa      	ldr	r2, [r7, #12]
 800fbae:	f107 0010 	add.w	r0, r7, #16
 800fbb2:	9105      	str	r1, [sp, #20]
 800fbb4:	9304      	str	r3, [sp, #16]
 800fbb6:	6839      	ldr	r1, [r7, #0]
 800fbb8:	9103      	str	r1, [sp, #12]
 800fbba:	9502      	str	r5, [sp, #8]
 800fbbc:	9401      	str	r4, [sp, #4]
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	9300      	str	r3, [sp, #0]
 800fbc2:	4633      	mov	r3, r6
 800fbc4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800fbc6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fbc8:	f7ff fd90 	bl	800f6ec <_ZN8touchgfx3LCD13StringVisualsC1EPKNS_4FontENS_9colortypeEhhtNS_12TextRotationEhhNS_14WideTextActionE>
                HAL::lcd().drawString(getAbsoluteRect(), area, visuals, typedText.getText(), wildcard);
 800fbcc:	f7ff fd82 	bl	800f6d4 <_ZN8touchgfx3HAL3lcdEv>
 800fbd0:	4604      	mov	r4, r0
 800fbd2:	68fa      	ldr	r2, [r7, #12]
 800fbd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fbd8:	4611      	mov	r1, r2
 800fbda:	4618      	mov	r0, r3
 800fbdc:	f00f fb0d 	bl	801f1fa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	3326      	adds	r3, #38	; 0x26
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	f7ff fde9 	bl	800f7bc <_ZNK8touchgfx9TypedText7getTextEv>
 800fbea:	4602      	mov	r2, r0
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbf0:	9302      	str	r3, [sp, #8]
 800fbf2:	9201      	str	r2, [sp, #4]
 800fbf4:	f107 0310 	add.w	r3, r7, #16
 800fbf8:	9300      	str	r3, [sp, #0]
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800fc00:	ca06      	ldmia	r2, {r1, r2}
 800fc02:	4620      	mov	r0, r4
 800fc04:	f00e f8e6 	bl	801ddd4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz>
            }
        }
    }
 800fc08:	bf00      	nop
 800fc0a:	3734      	adds	r7, #52	; 0x34
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fc10 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800fc10:	b480      	push	{r7}
 800fc12:	b083      	sub	sp, #12
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
 800fc18:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	683a      	ldr	r2, [r7, #0]
 800fc1e:	635a      	str	r2, [r3, #52]	; 0x34
    }
 800fc20:	bf00      	nop
 800fc22:	370c      	adds	r7, #12
 800fc24:	46bd      	mov	sp, r7
 800fc26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc2a:	4770      	bx	lr

0800fc2c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
     *         Gets the width in pixels of the current associated text in the current selected
     *         language. In case of multi-lined text the width of the widest line is returned.
     *
     * @return The width in pixels of the current text.
     */
    virtual uint16_t getTextWidth() const
 800fc2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fc2e:	b083      	sub	sp, #12
 800fc30:	af00      	add	r7, sp, #0
 800fc32:	6078      	str	r0, [r7, #4]
    {
        return typedText.hasValidId() ? typedText.getFont()->getStringWidth(typedText.getTextDirection(), typedText.getText(), wildcard) : 0;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	3326      	adds	r3, #38	; 0x26
 800fc38:	4618      	mov	r0, r3
 800fc3a:	f7ff fdab 	bl	800f794 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 800fc3e:	4603      	mov	r3, r0
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d01c      	beq.n	800fc7e <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x52>
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	3326      	adds	r3, #38	; 0x26
 800fc48:	4618      	mov	r0, r3
 800fc4a:	f7ff fdcd 	bl	800f7e8 <_ZNK8touchgfx9TypedText7getFontEv>
 800fc4e:	4604      	mov	r4, r0
 800fc50:	6823      	ldr	r3, [r4, #0]
 800fc52:	331c      	adds	r3, #28
 800fc54:	681d      	ldr	r5, [r3, #0]
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	3326      	adds	r3, #38	; 0x26
 800fc5a:	4618      	mov	r0, r3
 800fc5c:	f7ff fdf8 	bl	800f850 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800fc60:	4603      	mov	r3, r0
 800fc62:	461e      	mov	r6, r3
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	3326      	adds	r3, #38	; 0x26
 800fc68:	4618      	mov	r0, r3
 800fc6a:	f7ff fda7 	bl	800f7bc <_ZNK8touchgfx9TypedText7getTextEv>
 800fc6e:	4602      	mov	r2, r0
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc74:	4631      	mov	r1, r6
 800fc76:	4620      	mov	r0, r4
 800fc78:	47a8      	blx	r5
 800fc7a:	4603      	mov	r3, r0
 800fc7c:	e000      	b.n	800fc80 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x54>
 800fc7e:	2300      	movs	r3, #0
    }
 800fc80:	4618      	mov	r0, r3
 800fc82:	370c      	adds	r7, #12
 800fc84:	46bd      	mov	sp, r7
 800fc86:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fc88 <_ZNK8touchgfx23TextAreaWithOneWildcard7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_TEXTAREAWITHONEWILDCARD.
     */
    virtual uint16_t getType() const
 800fc88:	b480      	push	{r7}
 800fc8a:	b083      	sub	sp, #12
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_TEXTAREAWITHONEWILDCARD;
 800fc90:	230e      	movs	r3, #14
    }
 800fc92:	4618      	mov	r0, r3
 800fc94:	370c      	adds	r7, #12
 800fc96:	46bd      	mov	sp, r7
 800fc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc9c:	4770      	bx	lr
	...

0800fca0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b082      	sub	sp, #8
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
 800fca8:	4a05      	ldr	r2, [pc, #20]	; (800fcc0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	601a      	str	r2, [r3, #0]
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	4618      	mov	r0, r3
 800fcb2:	f7ff fef1 	bl	800fa98 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	4618      	mov	r0, r3
 800fcba:	3708      	adds	r7, #8
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}
 800fcc0:	08024980 	.word	0x08024980

0800fcc4 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800fcc4:	b580      	push	{r7, lr}
 800fcc6:	b082      	sub	sp, #8
 800fcc8:	af00      	add	r7, sp, #0
 800fcca:	6078      	str	r0, [r7, #4]
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f7ff ffe7 	bl	800fca0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fcd2:	2138      	movs	r1, #56	; 0x38
 800fcd4:	6878      	ldr	r0, [r7, #4]
 800fcd6:	f012 fc59 	bl	802258c <_ZdlPvj>
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	4618      	mov	r0, r3
 800fcde:	3708      	adds	r7, #8
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd80      	pop	{r7, pc}

0800fce4 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
     *
     *        Function to determine whether this AbstractButton is currently pressed.
     *
     * @return true if button is pressed, false otherwise.
     */
    virtual bool getPressedState() const
 800fce4:	b480      	push	{r7}
 800fce6:	b083      	sub	sp, #12
 800fce8:	af00      	add	r7, sp, #0
 800fcea:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 800fcf2:	4618      	mov	r0, r3
 800fcf4:	370c      	adds	r7, #12
 800fcf6:	46bd      	mov	sp, r7
 800fcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcfc:	4770      	bx	lr

0800fcfe <_ZNK8touchgfx14AbstractButton7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_ABSTRACTBUTTON.
     */
    virtual uint16_t getType() const
 800fcfe:	b480      	push	{r7}
 800fd00:	b083      	sub	sp, #12
 800fd02:	af00      	add	r7, sp, #0
 800fd04:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_ABSTRACTBUTTON;
 800fd06:	2302      	movs	r3, #2
    }
 800fd08:	4618      	mov	r0, r3
 800fd0a:	370c      	adds	r7, #12
 800fd0c:	46bd      	mov	sp, r7
 800fd0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd12:	4770      	bx	lr

0800fd14 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
#include <touchgfx/widgets/AbstractButton.hpp>

namespace touchgfx
{
void AbstractButton::handleClickEvent(const ClickEvent& event)
{
 800fd14:	b580      	push	{r7, lr}
 800fd16:	b084      	sub	sp, #16
 800fd18:	af00      	add	r7, sp, #0
 800fd1a:	6078      	str	r0, [r7, #4]
 800fd1c:	6039      	str	r1, [r7, #0]
    bool wasPressed = pressed;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fd24:	73fb      	strb	r3, [r7, #15]
    pressed = (event.getType() == ClickEvent::PRESSED);
 800fd26:	6838      	ldr	r0, [r7, #0]
 800fd28:	f7ff fb84 	bl	800f434 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800fd2c:	4603      	mov	r3, r0
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	bf0c      	ite	eq
 800fd32:	2301      	moveq	r3, #1
 800fd34:	2300      	movne	r3, #0
 800fd36:	b2da      	uxtb	r2, r3
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if ((pressed && !wasPressed) || (!pressed && wasPressed))
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d005      	beq.n	800fd54 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x40>
 800fd48:	7bfb      	ldrb	r3, [r7, #15]
 800fd4a:	f083 0301 	eor.w	r3, r3, #1
 800fd4e:	b2db      	uxtb	r3, r3
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d10a      	bne.n	800fd6a <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x56>
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fd5a:	f083 0301 	eor.w	r3, r3, #1
 800fd5e:	b2db      	uxtb	r3, r3
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d009      	beq.n	800fd78 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x64>
 800fd64:	7bfb      	ldrb	r3, [r7, #15]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d006      	beq.n	800fd78 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x64>
    {
        // Pressed state changed, so invalidate
        invalidate();
 800fd6a:	687a      	ldr	r2, [r7, #4]
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	681b      	ldr	r3, [r3, #0]
 800fd70:	3314      	adds	r3, #20
 800fd72:	681b      	ldr	r3, [r3, #0]
 800fd74:	4610      	mov	r0, r2
 800fd76:	4798      	blx	r3
    }
    if (wasPressed && (event.getType() == ClickEvent::RELEASED) && action)
 800fd78:	7bfb      	ldrb	r3, [r7, #15]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d00b      	beq.n	800fd96 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x82>
 800fd7e:	6838      	ldr	r0, [r7, #0]
 800fd80:	f7ff fb58 	bl	800f434 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800fd84:	4603      	mov	r3, r0
 800fd86:	2b01      	cmp	r3, #1
 800fd88:	d105      	bne.n	800fd96 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x82>
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d001      	beq.n	800fd96 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x82>
 800fd92:	2301      	movs	r3, #1
 800fd94:	e000      	b.n	800fd98 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x84>
 800fd96:	2300      	movs	r3, #0
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d015      	beq.n	800fdc8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0xb4>
    {
        // This is a click. Fire callback.
        if (action->isValid())
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	330c      	adds	r3, #12
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	4610      	mov	r0, r2
 800fdac:	4798      	blx	r3
 800fdae:	4603      	mov	r3, r0
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d009      	beq.n	800fdc8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0xb4>
        {
            action->execute(*this);
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	3308      	adds	r3, #8
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	6879      	ldr	r1, [r7, #4]
 800fdc4:	4610      	mov	r0, r2
 800fdc6:	4798      	blx	r3
        }
    }
}
 800fdc8:	bf00      	nop
 800fdca:	3710      	adds	r7, #16
 800fdcc:	46bd      	mov	sp, r7
 800fdce:	bd80      	pop	{r7, pc}

0800fdd0 <_ZNK8touchgfx3Box7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_BOX.
     */
    virtual uint16_t getType() const
 800fdd0:	b480      	push	{r7}
 800fdd2:	b083      	sub	sp, #12
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_BOX;
 800fdd8:	2304      	movs	r3, #4
    }
 800fdda:	4618      	mov	r0, r3
 800fddc:	370c      	adds	r7, #12
 800fdde:	46bd      	mov	sp, r7
 800fde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde4:	4770      	bx	lr

0800fde6 <_ZNK8touchgfx3Box12getSolidRectEv>:
#include <touchgfx/widgets/Box.hpp>

namespace touchgfx
{
Rect Box::getSolidRect() const
{
 800fde6:	b580      	push	{r7, lr}
 800fde8:	b084      	sub	sp, #16
 800fdea:	af02      	add	r7, sp, #8
 800fdec:	6078      	str	r0, [r7, #4]
 800fdee:	6039      	str	r1, [r7, #0]
    Rect solidRect(0, 0, 0, 0);
 800fdf0:	2300      	movs	r3, #0
 800fdf2:	9300      	str	r3, [sp, #0]
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	2200      	movs	r2, #0
 800fdf8:	2100      	movs	r1, #0
 800fdfa:	6878      	ldr	r0, [r7, #4]
 800fdfc:	f7fe fae2 	bl	800e3c4 <_ZN8touchgfx4RectC1Essss>
    if (reportAsSolid || alpha == 255)
 800fe00:	683b      	ldr	r3, [r7, #0]
 800fe02:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d104      	bne.n	800fe14 <_ZNK8touchgfx3Box12getSolidRectEv+0x2e>
 800fe0a:	683b      	ldr	r3, [r7, #0]
 800fe0c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800fe10:	2bff      	cmp	r3, #255	; 0xff
 800fe12:	d109      	bne.n	800fe28 <_ZNK8touchgfx3Box12getSolidRectEv+0x42>
    {
        solidRect.width = rect.width;
 800fe14:	683b      	ldr	r3, [r7, #0]
 800fe16:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800fe1a:	687b      	ldr	r3, [r7, #4]
 800fe1c:	809a      	strh	r2, [r3, #4]
        solidRect.height = rect.height;
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	80da      	strh	r2, [r3, #6]
    }
    return solidRect;
 800fe28:	bf00      	nop
}
 800fe2a:	6878      	ldr	r0, [r7, #4]
 800fe2c:	3708      	adds	r7, #8
 800fe2e:	46bd      	mov	sp, r7
 800fe30:	bd80      	pop	{r7, pc}

0800fe32 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:

void Box::draw(const Rect& area) const
{
 800fe32:	b590      	push	{r4, r7, lr}
 800fe34:	b085      	sub	sp, #20
 800fe36:	af00      	add	r7, sp, #0
 800fe38:	6078      	str	r0, [r7, #4]
 800fe3a:	6039      	str	r1, [r7, #0]
    Rect dirty = area;
 800fe3c:	683a      	ldr	r2, [r7, #0]
 800fe3e:	f107 0308 	add.w	r3, r7, #8
 800fe42:	6810      	ldr	r0, [r2, #0]
 800fe44:	6851      	ldr	r1, [r2, #4]
 800fe46:	c303      	stmia	r3!, {r0, r1}
    translateRectToAbsolute(dirty);
 800fe48:	687a      	ldr	r2, [r7, #4]
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	3324      	adds	r3, #36	; 0x24
 800fe50:	681b      	ldr	r3, [r3, #0]
 800fe52:	f107 0108 	add.w	r1, r7, #8
 800fe56:	4610      	mov	r0, r2
 800fe58:	4798      	blx	r3
    HAL::lcd().fillRect(dirty, color, alpha);
 800fe5a:	f7ff fc3b 	bl	800f6d4 <_ZN8touchgfx3HAL3lcdEv>
 800fe5e:	6803      	ldr	r3, [r0, #0]
 800fe60:	331c      	adds	r3, #28
 800fe62:	681c      	ldr	r4, [r3, #0]
 800fe64:	687b      	ldr	r3, [r7, #4]
 800fe66:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800fe6a:	687a      	ldr	r2, [r7, #4]
 800fe6c:	f107 0108 	add.w	r1, r7, #8
 800fe70:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800fe72:	47a0      	blx	r4
}
 800fe74:	bf00      	nop
 800fe76:	3714      	adds	r7, #20
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd90      	pop	{r4, r7, pc}

0800fe7c <_ZN8touchgfx13BoxWithBorderD1Ev>:
    /**
     * @fn virtual BoxWithBorder::~BoxWithBorder()
     *
     * @brief Destructor.
     */
    virtual ~BoxWithBorder() {}
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b082      	sub	sp, #8
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
 800fe84:	4a05      	ldr	r2, [pc, #20]	; (800fe9c <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	601a      	str	r2, [r3, #0]
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	f7ff f9ab 	bl	800f1e8 <_ZN8touchgfx6WidgetD1Ev>
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	4618      	mov	r0, r3
 800fe96:	3708      	adds	r7, #8
 800fe98:	46bd      	mov	sp, r7
 800fe9a:	bd80      	pop	{r7, pc}
 800fe9c:	08024b54 	.word	0x08024b54

0800fea0 <_ZN8touchgfx13BoxWithBorderD0Ev>:
 800fea0:	b580      	push	{r7, lr}
 800fea2:	b082      	sub	sp, #8
 800fea4:	af00      	add	r7, sp, #0
 800fea6:	6078      	str	r0, [r7, #4]
 800fea8:	6878      	ldr	r0, [r7, #4]
 800feaa:	f7ff ffe7 	bl	800fe7c <_ZN8touchgfx13BoxWithBorderD1Ev>
 800feae:	2134      	movs	r1, #52	; 0x34
 800feb0:	6878      	ldr	r0, [r7, #4]
 800feb2:	f012 fb6b 	bl	802258c <_ZdlPvj>
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	4618      	mov	r0, r3
 800feba:	3708      	adds	r7, #8
 800febc:	46bd      	mov	sp, r7
 800febe:	bd80      	pop	{r7, pc}

0800fec0 <_ZNK8touchgfx13BoxWithBorder7getTypeEv>:
     *
     * @brief Gets the type.
     *
     * @return The type.
     */
    virtual uint16_t getType() const
 800fec0:	b480      	push	{r7}
 800fec2:	b083      	sub	sp, #12
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_BOX;
 800fec8:	2304      	movs	r3, #4
    }
 800feca:	4618      	mov	r0, r3
 800fecc:	370c      	adds	r7, #12
 800fece:	46bd      	mov	sp, r7
 800fed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fed4:	4770      	bx	lr

0800fed6 <_ZNK8touchgfx13BoxWithBorder12getSolidRectEv>:
#include <touchgfx/widgets/BoxWithBorder.hpp>

namespace touchgfx
{
Rect BoxWithBorder::getSolidRect() const
{
 800fed6:	b580      	push	{r7, lr}
 800fed8:	b084      	sub	sp, #16
 800feda:	af02      	add	r7, sp, #8
 800fedc:	6078      	str	r0, [r7, #4]
 800fede:	6039      	str	r1, [r7, #0]
    Rect solidRect(0, 0, 0, 0);
 800fee0:	2300      	movs	r3, #0
 800fee2:	9300      	str	r3, [sp, #0]
 800fee4:	2300      	movs	r3, #0
 800fee6:	2200      	movs	r2, #0
 800fee8:	2100      	movs	r1, #0
 800feea:	6878      	ldr	r0, [r7, #4]
 800feec:	f7fe fa6a 	bl	800e3c4 <_ZN8touchgfx4RectC1Essss>
    if (alpha == 255)
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800fef6:	2bff      	cmp	r3, #255	; 0xff
 800fef8:	d109      	bne.n	800ff0e <_ZNK8touchgfx13BoxWithBorder12getSolidRectEv+0x38>
    {
        solidRect.width = rect.width;
 800fefa:	683b      	ldr	r3, [r7, #0]
 800fefc:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800ff00:	687b      	ldr	r3, [r7, #4]
 800ff02:	809a      	strh	r2, [r3, #4]
        solidRect.height = rect.height;
 800ff04:	683b      	ldr	r3, [r7, #0]
 800ff06:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	80da      	strh	r2, [r3, #6]
    }
    return solidRect;
 800ff0e:	bf00      	nop
}
 800ff10:	6878      	ldr	r0, [r7, #4]
 800ff12:	3708      	adds	r7, #8
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd80      	pop	{r7, pc}

0800ff18 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:

void BoxWithBorder::draw(const Rect& area) const
{
 800ff18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff1c:	b094      	sub	sp, #80	; 0x50
 800ff1e:	af02      	add	r7, sp, #8
 800ff20:	6078      	str	r0, [r7, #4]
 800ff22:	6039      	str	r1, [r7, #0]
    Rect dirty = area & Rect(borderSize, borderSize, getWidth() - (2 * borderSize), getHeight() - (2 * borderSize));
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ff2a:	b21c      	sxth	r4, r3
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ff32:	b21d      	sxth	r5, r3
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	4618      	mov	r0, r3
 800ff38:	f7ff f845 	bl	800efc6 <_ZNK8touchgfx8Drawable8getWidthEv>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	b29a      	uxth	r2, r3
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ff46:	b29b      	uxth	r3, r3
 800ff48:	005b      	lsls	r3, r3, #1
 800ff4a:	b29b      	uxth	r3, r3
 800ff4c:	1ad3      	subs	r3, r2, r3
 800ff4e:	b29b      	uxth	r3, r3
 800ff50:	b21e      	sxth	r6, r3
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	4618      	mov	r0, r3
 800ff56:	f7ff f843 	bl	800efe0 <_ZNK8touchgfx8Drawable9getHeightEv>
 800ff5a:	4603      	mov	r3, r0
 800ff5c:	b29a      	uxth	r2, r3
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ff64:	b29b      	uxth	r3, r3
 800ff66:	005b      	lsls	r3, r3, #1
 800ff68:	b29b      	uxth	r3, r3
 800ff6a:	1ad3      	subs	r3, r2, r3
 800ff6c:	b29b      	uxth	r3, r3
 800ff6e:	b21b      	sxth	r3, r3
 800ff70:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800ff74:	9300      	str	r3, [sp, #0]
 800ff76:	4633      	mov	r3, r6
 800ff78:	462a      	mov	r2, r5
 800ff7a:	4621      	mov	r1, r4
 800ff7c:	f7fe fa22 	bl	800e3c4 <_ZN8touchgfx4RectC1Essss>
 800ff80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ff84:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800ff88:	6839      	ldr	r1, [r7, #0]
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f7fe fac5 	bl	800e51a <_ZNK8touchgfx4RectanERKS0_>
    translateRectToAbsolute(dirty);
 800ff90:	687a      	ldr	r2, [r7, #4]
 800ff92:	687b      	ldr	r3, [r7, #4]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	3324      	adds	r3, #36	; 0x24
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800ff9e:	4610      	mov	r0, r2
 800ffa0:	4798      	blx	r3
    HAL::lcd().fillRect(dirty, color, alpha);
 800ffa2:	f7ff fb97 	bl	800f6d4 <_ZN8touchgfx3HAL3lcdEv>
 800ffa6:	6803      	ldr	r3, [r0, #0]
 800ffa8:	331c      	adds	r3, #28
 800ffaa:	681c      	ldr	r4, [r3, #0]
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800ffb2:	687a      	ldr	r2, [r7, #4]
 800ffb4:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800ffb8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800ffba:	47a0      	blx	r4

    if (borderSize > 0)
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	f000 80b3 	beq.w	801012e <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x216>
        {
            Rect(0, 0, getWidth(), borderSize),                                                     // Upper
            Rect(0, getHeight() - borderSize, getWidth(), borderSize),                              // lower
            Rect(0, borderSize, borderSize, getHeight() - (2 * borderSize)),                        // left
            Rect(getWidth() - borderSize, borderSize, borderSize, getHeight() - (2 * borderSize))   // right
        };
 800ffc8:	f107 040c 	add.w	r4, r7, #12
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	4618      	mov	r0, r3
 800ffd0:	f7fe fff9 	bl	800efc6 <_ZNK8touchgfx8Drawable8getWidthEv>
 800ffd4:	4603      	mov	r3, r0
 800ffd6:	461a      	mov	r2, r3
            Rect(0, 0, getWidth(), borderSize),                                                     // Upper
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
        };
 800ffde:	b21b      	sxth	r3, r3
 800ffe0:	9300      	str	r3, [sp, #0]
 800ffe2:	4613      	mov	r3, r2
 800ffe4:	2200      	movs	r2, #0
 800ffe6:	2100      	movs	r1, #0
 800ffe8:	4620      	mov	r0, r4
 800ffea:	f7fe f9eb 	bl	800e3c4 <_ZN8touchgfx4RectC1Essss>
 800ffee:	3408      	adds	r4, #8
            Rect(0, getHeight() - borderSize, getWidth(), borderSize),                              // lower
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7fe fff4 	bl	800efe0 <_ZNK8touchgfx8Drawable9getHeightEv>
 800fff8:	4603      	mov	r3, r0
 800fffa:	b29a      	uxth	r2, r3
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010002:	b29b      	uxth	r3, r3
 8010004:	1ad3      	subs	r3, r2, r3
 8010006:	b29b      	uxth	r3, r3
        };
 8010008:	b21d      	sxth	r5, r3
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	4618      	mov	r0, r3
 801000e:	f7fe ffda 	bl	800efc6 <_ZNK8touchgfx8Drawable8getWidthEv>
 8010012:	4603      	mov	r3, r0
 8010014:	461a      	mov	r2, r3
            Rect(0, getHeight() - borderSize, getWidth(), borderSize),                              // lower
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
        };
 801001c:	b21b      	sxth	r3, r3
 801001e:	9300      	str	r3, [sp, #0]
 8010020:	4613      	mov	r3, r2
 8010022:	462a      	mov	r2, r5
 8010024:	2100      	movs	r1, #0
 8010026:	4620      	mov	r0, r4
 8010028:	f7fe f9cc 	bl	800e3c4 <_ZN8touchgfx4RectC1Essss>
 801002c:	3408      	adds	r4, #8
            Rect(0, borderSize, borderSize, getHeight() - (2 * borderSize)),                        // left
 801002e:	687b      	ldr	r3, [r7, #4]
 8010030:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
        };
 8010034:	b21d      	sxth	r5, r3
            Rect(0, borderSize, borderSize, getHeight() - (2 * borderSize)),                        // left
 8010036:	687b      	ldr	r3, [r7, #4]
 8010038:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
        };
 801003c:	b21e      	sxth	r6, r3
            Rect(0, borderSize, borderSize, getHeight() - (2 * borderSize)),                        // left
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	4618      	mov	r0, r3
 8010042:	f7fe ffcd 	bl	800efe0 <_ZNK8touchgfx8Drawable9getHeightEv>
 8010046:	4603      	mov	r3, r0
 8010048:	b29a      	uxth	r2, r3
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010050:	b29b      	uxth	r3, r3
 8010052:	005b      	lsls	r3, r3, #1
 8010054:	b29b      	uxth	r3, r3
 8010056:	1ad3      	subs	r3, r2, r3
 8010058:	b29b      	uxth	r3, r3
        };
 801005a:	b21b      	sxth	r3, r3
 801005c:	9300      	str	r3, [sp, #0]
 801005e:	4633      	mov	r3, r6
 8010060:	462a      	mov	r2, r5
 8010062:	2100      	movs	r1, #0
 8010064:	4620      	mov	r0, r4
 8010066:	f7fe f9ad 	bl	800e3c4 <_ZN8touchgfx4RectC1Essss>
 801006a:	3408      	adds	r4, #8
            Rect(getWidth() - borderSize, borderSize, borderSize, getHeight() - (2 * borderSize))   // right
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	4618      	mov	r0, r3
 8010070:	f7fe ffa9 	bl	800efc6 <_ZNK8touchgfx8Drawable8getWidthEv>
 8010074:	4603      	mov	r3, r0
 8010076:	b29a      	uxth	r2, r3
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801007e:	b29b      	uxth	r3, r3
 8010080:	1ad3      	subs	r3, r2, r3
 8010082:	b29b      	uxth	r3, r3
        };
 8010084:	b21d      	sxth	r5, r3
            Rect(getWidth() - borderSize, borderSize, borderSize, getHeight() - (2 * borderSize))   // right
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
        };
 801008c:	b21e      	sxth	r6, r3
            Rect(getWidth() - borderSize, borderSize, borderSize, getHeight() - (2 * borderSize))   // right
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
        };
 8010094:	fa0f f883 	sxth.w	r8, r3
            Rect(getWidth() - borderSize, borderSize, borderSize, getHeight() - (2 * borderSize))   // right
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	4618      	mov	r0, r3
 801009c:	f7fe ffa0 	bl	800efe0 <_ZNK8touchgfx8Drawable9getHeightEv>
 80100a0:	4603      	mov	r3, r0
 80100a2:	b29a      	uxth	r2, r3
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80100aa:	b29b      	uxth	r3, r3
 80100ac:	005b      	lsls	r3, r3, #1
 80100ae:	b29b      	uxth	r3, r3
 80100b0:	1ad3      	subs	r3, r2, r3
 80100b2:	b29b      	uxth	r3, r3
        };
 80100b4:	b21b      	sxth	r3, r3
 80100b6:	9300      	str	r3, [sp, #0]
 80100b8:	4643      	mov	r3, r8
 80100ba:	4632      	mov	r2, r6
 80100bc:	4629      	mov	r1, r5
 80100be:	4620      	mov	r0, r4
 80100c0:	f7fe f980 	bl	800e3c4 <_ZN8touchgfx4RectC1Essss>

        for (int i = 0; i < 4; i++)
 80100c4:	2300      	movs	r3, #0
 80100c6:	647b      	str	r3, [r7, #68]	; 0x44
 80100c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100ca:	2b03      	cmp	r3, #3
 80100cc:	dc2f      	bgt.n	801012e <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x216>
        {
            Rect borderDirty = borders[i] & area;
 80100ce:	f107 020c 	add.w	r2, r7, #12
 80100d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100d4:	00db      	lsls	r3, r3, #3
 80100d6:	18d1      	adds	r1, r2, r3
 80100d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80100dc:	683a      	ldr	r2, [r7, #0]
 80100de:	4618      	mov	r0, r3
 80100e0:	f7fe fa1b 	bl	800e51a <_ZNK8touchgfx4RectanERKS0_>
            if (!borderDirty.isEmpty())
 80100e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80100e8:	4618      	mov	r0, r3
 80100ea:	f7fe fb33 	bl	800e754 <_ZNK8touchgfx4Rect7isEmptyEv>
 80100ee:	4603      	mov	r3, r0
 80100f0:	f083 0301 	eor.w	r3, r3, #1
 80100f4:	b2db      	uxtb	r3, r3
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d015      	beq.n	8010126 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x20e>
            {
                translateRectToAbsolute(borderDirty);
 80100fa:	687a      	ldr	r2, [r7, #4]
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	3324      	adds	r3, #36	; 0x24
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8010108:	4610      	mov	r0, r2
 801010a:	4798      	blx	r3
                HAL::lcd().fillRect(borderDirty, borderColor, alpha);
 801010c:	f7ff fae2 	bl	800f6d4 <_ZN8touchgfx3HAL3lcdEv>
 8010110:	6803      	ldr	r3, [r0, #0]
 8010112:	331c      	adds	r3, #28
 8010114:	681c      	ldr	r4, [r3, #0]
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 801011c:	687a      	ldr	r2, [r7, #4]
 801011e:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8010122:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010124:	47a0      	blx	r4
        for (int i = 0; i < 4; i++)
 8010126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010128:	3301      	adds	r3, #1
 801012a:	647b      	str	r3, [r7, #68]	; 0x44
 801012c:	e7cc      	b.n	80100c8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x1b0>
            }
        }
    }
}
 801012e:	bf00      	nop
 8010130:	3748      	adds	r7, #72	; 0x48
 8010132:	46bd      	mov	sp, r7
 8010134:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010138 <_ZNK8touchgfx6Button7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_BUTTON.
     */
    virtual uint16_t getType() const
 8010138:	b480      	push	{r7}
 801013a:	b083      	sub	sp, #12
 801013c:	af00      	add	r7, sp, #0
 801013e:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_BUTTON;
 8010140:	2305      	movs	r3, #5
    }
 8010142:	4618      	mov	r0, r3
 8010144:	370c      	adds	r7, #12
 8010146:	46bd      	mov	sp, r7
 8010148:	f85d 7b04 	ldr.w	r7, [sp], #4
 801014c:	4770      	bx	lr

0801014e <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
#include <touchgfx/widgets/Button.hpp>

namespace touchgfx
{
void Button::draw(const Rect& invalidatedArea) const
{
 801014e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010150:	b08d      	sub	sp, #52	; 0x34
 8010152:	af04      	add	r7, sp, #16
 8010154:	6078      	str	r0, [r7, #4]
 8010156:	6039      	str	r1, [r7, #0]
    Bitmap bmp(AbstractButton::pressed ? down : up);
 8010158:	687b      	ldr	r3, [r7, #4]
 801015a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801015e:	2b00      	cmp	r3, #0
 8010160:	d002      	beq.n	8010168 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x1a>
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	3330      	adds	r3, #48	; 0x30
 8010166:	e001      	b.n	801016c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x1e>
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	332e      	adds	r3, #46	; 0x2e
 801016c:	881b      	ldrh	r3, [r3, #0]
 801016e:	83bb      	strh	r3, [r7, #28]
    Rect dirty(0, 0, bmp.getWidth(), bmp.getHeight());
 8010170:	f107 031c 	add.w	r3, r7, #28
 8010174:	4618      	mov	r0, r3
 8010176:	f010 f93d 	bl	80203f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801017a:	4603      	mov	r3, r0
 801017c:	b21c      	sxth	r4, r3
 801017e:	f107 031c 	add.w	r3, r7, #28
 8010182:	4618      	mov	r0, r3
 8010184:	f010 f96e 	bl	8020464 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010188:	4603      	mov	r3, r0
 801018a:	b21b      	sxth	r3, r3
 801018c:	f107 0014 	add.w	r0, r7, #20
 8010190:	9300      	str	r3, [sp, #0]
 8010192:	4623      	mov	r3, r4
 8010194:	2200      	movs	r2, #0
 8010196:	2100      	movs	r1, #0
 8010198:	f7fe f914 	bl	800e3c4 <_ZN8touchgfx4RectC1Essss>
    dirty &= invalidatedArea;
 801019c:	f107 0314 	add.w	r3, r7, #20
 80101a0:	6839      	ldr	r1, [r7, #0]
 80101a2:	4618      	mov	r0, r3
 80101a4:	f7fe f9ce 	bl	800e544 <_ZN8touchgfx4RectaNERKS0_>
    if ((bmp.getId() != BITMAP_INVALID) && !dirty.isEmpty())
 80101a8:	f107 031c 	add.w	r3, r7, #28
 80101ac:	4618      	mov	r0, r3
 80101ae:	f7ff fa57 	bl	800f660 <_ZNK8touchgfx6Bitmap5getIdEv>
 80101b2:	4603      	mov	r3, r0
 80101b4:	461a      	mov	r2, r3
 80101b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80101ba:	429a      	cmp	r2, r3
 80101bc:	d00c      	beq.n	80101d8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 80101be:	f107 0314 	add.w	r3, r7, #20
 80101c2:	4618      	mov	r0, r3
 80101c4:	f7fe fac6 	bl	800e754 <_ZNK8touchgfx4Rect7isEmptyEv>
 80101c8:	4603      	mov	r3, r0
 80101ca:	f083 0301 	eor.w	r3, r3, #1
 80101ce:	b2db      	uxtb	r3, r3
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	d001      	beq.n	80101d8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 80101d4:	2301      	movs	r3, #1
 80101d6:	e000      	b.n	80101da <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8c>
 80101d8:	2300      	movs	r3, #0
 80101da:	2b00      	cmp	r3, #0
 80101dc:	d023      	beq.n	8010226 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xd8>
    {
        Rect r;
 80101de:	f107 030c 	add.w	r3, r7, #12
 80101e2:	4618      	mov	r0, r3
 80101e4:	f7fe ff49 	bl	800f07a <_ZN8touchgfx4RectC1Ev>
        translateRectToAbsolute(r);
 80101e8:	687a      	ldr	r2, [r7, #4]
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	3324      	adds	r3, #36	; 0x24
 80101f0:	681b      	ldr	r3, [r3, #0]
 80101f2:	f107 010c 	add.w	r1, r7, #12
 80101f6:	4610      	mov	r0, r2
 80101f8:	4798      	blx	r3
        HAL::lcd().drawPartialBitmap(bmp, r.x, r.y, dirty, alpha);
 80101fa:	f7ff fa6b 	bl	800f6d4 <_ZN8touchgfx3HAL3lcdEv>
 80101fe:	6803      	ldr	r3, [r0, #0]
 8010200:	330c      	adds	r3, #12
 8010202:	681c      	ldr	r4, [r3, #0]
 8010204:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8010208:	f9b7 500e 	ldrsh.w	r5, [r7, #14]
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010212:	f107 011c 	add.w	r1, r7, #28
 8010216:	2601      	movs	r6, #1
 8010218:	9602      	str	r6, [sp, #8]
 801021a:	9301      	str	r3, [sp, #4]
 801021c:	f107 0314 	add.w	r3, r7, #20
 8010220:	9300      	str	r3, [sp, #0]
 8010222:	462b      	mov	r3, r5
 8010224:	47a0      	blx	r4
    }
}
 8010226:	bf00      	nop
 8010228:	3724      	adds	r7, #36	; 0x24
 801022a:	46bd      	mov	sp, r7
 801022c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801022e <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:

void Button::setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
{
 801022e:	b590      	push	{r4, r7, lr}
 8010230:	b085      	sub	sp, #20
 8010232:	af00      	add	r7, sp, #0
 8010234:	60f8      	str	r0, [r7, #12]
 8010236:	60b9      	str	r1, [r7, #8]
 8010238:	607a      	str	r2, [r7, #4]
    up = bmpReleased;
 801023a:	68fb      	ldr	r3, [r7, #12]
 801023c:	68ba      	ldr	r2, [r7, #8]
 801023e:	8812      	ldrh	r2, [r2, #0]
 8010240:	85da      	strh	r2, [r3, #46]	; 0x2e
    down = bmpPressed;
 8010242:	68fb      	ldr	r3, [r7, #12]
 8010244:	687a      	ldr	r2, [r7, #4]
 8010246:	8812      	ldrh	r2, [r2, #0]
 8010248:	861a      	strh	r2, [r3, #48]	; 0x30
    // Adjust width and height of this widget to match bitmap. It is assumed
    // that the two bitmaps have same dimensions.
    Drawable::setWidth(down.getWidth());
 801024a:	68fc      	ldr	r4, [r7, #12]
 801024c:	68fb      	ldr	r3, [r7, #12]
 801024e:	3330      	adds	r3, #48	; 0x30
 8010250:	4618      	mov	r0, r3
 8010252:	f010 f8cf 	bl	80203f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010256:	4603      	mov	r3, r0
 8010258:	b21b      	sxth	r3, r3
 801025a:	4619      	mov	r1, r3
 801025c:	4620      	mov	r0, r4
 801025e:	f7fe fb40 	bl	800e8e2 <_ZN8touchgfx8Drawable8setWidthEs>
    Drawable::setHeight(down.getHeight());
 8010262:	68fc      	ldr	r4, [r7, #12]
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	3330      	adds	r3, #48	; 0x30
 8010268:	4618      	mov	r0, r3
 801026a:	f010 f8fb 	bl	8020464 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801026e:	4603      	mov	r3, r0
 8010270:	b21b      	sxth	r3, r3
 8010272:	4619      	mov	r1, r3
 8010274:	4620      	mov	r0, r4
 8010276:	f7fe fb43 	bl	800e900 <_ZN8touchgfx8Drawable9setHeightEs>
}
 801027a:	bf00      	nop
 801027c:	3714      	adds	r7, #20
 801027e:	46bd      	mov	sp, r7
 8010280:	bd90      	pop	{r4, r7, pc}

08010282 <_ZNK8touchgfx6Button12getSolidRectEv>:

Rect Button::getSolidRect() const
{
 8010282:	b580      	push	{r7, lr}
 8010284:	b084      	sub	sp, #16
 8010286:	af02      	add	r7, sp, #8
 8010288:	6078      	str	r0, [r7, #4]
 801028a:	6039      	str	r1, [r7, #0]
    if (alpha < 255)
 801028c:	683b      	ldr	r3, [r7, #0]
 801028e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010292:	2bff      	cmp	r3, #255	; 0xff
 8010294:	d008      	beq.n	80102a8 <_ZNK8touchgfx6Button12getSolidRectEv+0x26>
    {
        return Rect(0, 0, 0, 0);
 8010296:	2300      	movs	r3, #0
 8010298:	9300      	str	r3, [sp, #0]
 801029a:	2300      	movs	r3, #0
 801029c:	2200      	movs	r2, #0
 801029e:	2100      	movs	r1, #0
 80102a0:	6878      	ldr	r0, [r7, #4]
 80102a2:	f7fe f88f 	bl	800e3c4 <_ZN8touchgfx4RectC1Essss>
 80102a6:	e016      	b.n	80102d6 <_ZNK8touchgfx6Button12getSolidRectEv+0x54>
    }

    return (AbstractButton::pressed ? down.getSolidRect() : up.getSolidRect());
 80102a8:	683b      	ldr	r3, [r7, #0]
 80102aa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d008      	beq.n	80102c4 <_ZNK8touchgfx6Button12getSolidRectEv+0x42>
 80102b2:	683b      	ldr	r3, [r7, #0]
 80102b4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	4611      	mov	r1, r2
 80102bc:	4618      	mov	r0, r3
 80102be:	f010 f909 	bl	80204d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80102c2:	e007      	b.n	80102d4 <_ZNK8touchgfx6Button12getSolidRectEv+0x52>
 80102c4:	683b      	ldr	r3, [r7, #0]
 80102c6:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	4611      	mov	r1, r2
 80102ce:	4618      	mov	r0, r3
 80102d0:	f010 f900 	bl	80204d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80102d4:	bf00      	nop
}
 80102d6:	6878      	ldr	r0, [r7, #4]
 80102d8:	3708      	adds	r7, #8
 80102da:	46bd      	mov	sp, r7
 80102dc:	bd80      	pop	{r7, pc}

080102de <_ZNK8touchgfx14ButtonWithIcon7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_BUTTONWITHICON.
     */
    virtual uint16_t getType() const
 80102de:	b480      	push	{r7}
 80102e0:	b083      	sub	sp, #12
 80102e2:	af00      	add	r7, sp, #0
 80102e4:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_BUTTONWITHICON;
 80102e6:	2306      	movs	r3, #6
    }
 80102e8:	4618      	mov	r0, r3
 80102ea:	370c      	adds	r7, #12
 80102ec:	46bd      	mov	sp, r7
 80102ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f2:	4770      	bx	lr

080102f4 <_ZN8touchgfx14ButtonWithIconC1Ev>:

#include <touchgfx/widgets/ButtonWithIcon.hpp>

namespace touchgfx
{
ButtonWithIcon::ButtonWithIcon() :
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b082      	sub	sp, #8
 80102f8:	af00      	add	r7, sp, #0
 80102fa:	6078      	str	r0, [r7, #4]
    Button(),
    iconX(0),
    iconY(0)
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	4618      	mov	r0, r3
 8010300:	f7ff f938 	bl	800f574 <_ZN8touchgfx6ButtonC1Ev>
 8010304:	4a0d      	ldr	r2, [pc, #52]	; (801033c <_ZN8touchgfx14ButtonWithIconC1Ev+0x48>)
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	601a      	str	r2, [r3, #0]
 801030a:	687b      	ldr	r3, [r7, #4]
 801030c:	3334      	adds	r3, #52	; 0x34
 801030e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010312:	4618      	mov	r0, r3
 8010314:	f7fe fec8 	bl	800f0a8 <_ZN8touchgfx6BitmapC1Et>
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	3336      	adds	r3, #54	; 0x36
 801031c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010320:	4618      	mov	r0, r3
 8010322:	f7fe fec1 	bl	800f0a8 <_ZN8touchgfx6BitmapC1Et>
 8010326:	687b      	ldr	r3, [r7, #4]
 8010328:	2200      	movs	r2, #0
 801032a:	871a      	strh	r2, [r3, #56]	; 0x38
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	2200      	movs	r2, #0
 8010330:	875a      	strh	r2, [r3, #58]	; 0x3a
{
}
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	4618      	mov	r0, r3
 8010336:	3708      	adds	r7, #8
 8010338:	46bd      	mov	sp, r7
 801033a:	bd80      	pop	{r7, pc}
 801033c:	08024c34 	.word	0x08024c34

08010340 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:

void ButtonWithIcon::setBitmaps(const Bitmap& newBackgroundReleased, const Bitmap& newBackgroundPressed,
                                const Bitmap& newIconReleased, const Bitmap& newIconPressed)
{
 8010340:	b590      	push	{r4, r7, lr}
 8010342:	b085      	sub	sp, #20
 8010344:	af00      	add	r7, sp, #0
 8010346:	60f8      	str	r0, [r7, #12]
 8010348:	60b9      	str	r1, [r7, #8]
 801034a:	607a      	str	r2, [r7, #4]
 801034c:	603b      	str	r3, [r7, #0]
    Button::setBitmaps(newBackgroundReleased, newBackgroundPressed);
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	687a      	ldr	r2, [r7, #4]
 8010352:	68b9      	ldr	r1, [r7, #8]
 8010354:	4618      	mov	r0, r3
 8010356:	f7ff ff6a 	bl	801022e <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

    iconReleased = newIconReleased;
 801035a:	68fb      	ldr	r3, [r7, #12]
 801035c:	683a      	ldr	r2, [r7, #0]
 801035e:	8812      	ldrh	r2, [r2, #0]
 8010360:	869a      	strh	r2, [r3, #52]	; 0x34
    iconPressed = newIconPressed;
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	6a3a      	ldr	r2, [r7, #32]
 8010366:	8812      	ldrh	r2, [r2, #0]
 8010368:	86da      	strh	r2, [r3, #54]	; 0x36

    iconX = (getWidth() / 2) - (newIconPressed.getWidth() / 2);
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	4618      	mov	r0, r3
 801036e:	f7fe fe2a 	bl	800efc6 <_ZNK8touchgfx8Drawable8getWidthEv>
 8010372:	4603      	mov	r3, r0
 8010374:	2b00      	cmp	r3, #0
 8010376:	da00      	bge.n	801037a <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_+0x3a>
 8010378:	3301      	adds	r3, #1
 801037a:	105b      	asrs	r3, r3, #1
 801037c:	b21b      	sxth	r3, r3
 801037e:	b29c      	uxth	r4, r3
 8010380:	6a38      	ldr	r0, [r7, #32]
 8010382:	f010 f837 	bl	80203f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010386:	4603      	mov	r3, r0
 8010388:	085b      	lsrs	r3, r3, #1
 801038a:	b29b      	uxth	r3, r3
 801038c:	1ae3      	subs	r3, r4, r3
 801038e:	b29b      	uxth	r3, r3
 8010390:	b21a      	sxth	r2, r3
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	871a      	strh	r2, [r3, #56]	; 0x38
    iconY = (getHeight() / 2) - (newIconPressed.getHeight() / 2);
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	4618      	mov	r0, r3
 801039a:	f7fe fe21 	bl	800efe0 <_ZNK8touchgfx8Drawable9getHeightEv>
 801039e:	4603      	mov	r3, r0
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	da00      	bge.n	80103a6 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_+0x66>
 80103a4:	3301      	adds	r3, #1
 80103a6:	105b      	asrs	r3, r3, #1
 80103a8:	b21b      	sxth	r3, r3
 80103aa:	b29c      	uxth	r4, r3
 80103ac:	6a38      	ldr	r0, [r7, #32]
 80103ae:	f010 f859 	bl	8020464 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80103b2:	4603      	mov	r3, r0
 80103b4:	085b      	lsrs	r3, r3, #1
 80103b6:	b29b      	uxth	r3, r3
 80103b8:	1ae3      	subs	r3, r4, r3
 80103ba:	b29b      	uxth	r3, r3
 80103bc:	b21a      	sxth	r2, r3
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 80103c2:	bf00      	nop
 80103c4:	3714      	adds	r7, #20
 80103c6:	46bd      	mov	sp, r7
 80103c8:	bd90      	pop	{r4, r7, pc}

080103ca <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:

void ButtonWithIcon::draw(const Rect& invalidatedArea) const
{
 80103ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80103cc:	b08f      	sub	sp, #60	; 0x3c
 80103ce:	af04      	add	r7, sp, #16
 80103d0:	6078      	str	r0, [r7, #4]
 80103d2:	6039      	str	r1, [r7, #0]
    Button::draw(invalidatedArea);
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	6839      	ldr	r1, [r7, #0]
 80103d8:	4618      	mov	r0, r3
 80103da:	f7ff feb8 	bl	801014e <_ZNK8touchgfx6Button4drawERKNS_4RectE>

    Bitmap bmp((pressed ? iconPressed : iconReleased));
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d002      	beq.n	80103ee <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x24>
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	3336      	adds	r3, #54	; 0x36
 80103ec:	e001      	b.n	80103f2 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x28>
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	3334      	adds	r3, #52	; 0x34
 80103f2:	881b      	ldrh	r3, [r3, #0]
 80103f4:	84bb      	strh	r3, [r7, #36]	; 0x24
    Rect iconRect(iconX, iconY, bmp.getWidth(), bmp.getHeight());
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	f9b3 4038 	ldrsh.w	r4, [r3, #56]	; 0x38
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	f9b3 503a 	ldrsh.w	r5, [r3, #58]	; 0x3a
 8010402:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010406:	4618      	mov	r0, r3
 8010408:	f00f fff4 	bl	80203f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801040c:	4603      	mov	r3, r0
 801040e:	b21e      	sxth	r6, r3
 8010410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010414:	4618      	mov	r0, r3
 8010416:	f010 f825 	bl	8020464 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801041a:	4603      	mov	r3, r0
 801041c:	b21b      	sxth	r3, r3
 801041e:	f107 001c 	add.w	r0, r7, #28
 8010422:	9300      	str	r3, [sp, #0]
 8010424:	4633      	mov	r3, r6
 8010426:	462a      	mov	r2, r5
 8010428:	4621      	mov	r1, r4
 801042a:	f7fd ffcb 	bl	800e3c4 <_ZN8touchgfx4RectC1Essss>
    Rect dirty = invalidatedArea & iconRect;
 801042e:	f107 0314 	add.w	r3, r7, #20
 8010432:	f107 021c 	add.w	r2, r7, #28
 8010436:	6839      	ldr	r1, [r7, #0]
 8010438:	4618      	mov	r0, r3
 801043a:	f7fe f86e 	bl	800e51a <_ZNK8touchgfx4RectanERKS0_>
    if ((bmp.getId() != BITMAP_INVALID) && !dirty.isEmpty())
 801043e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010442:	4618      	mov	r0, r3
 8010444:	f7ff f90c 	bl	800f660 <_ZNK8touchgfx6Bitmap5getIdEv>
 8010448:	4603      	mov	r3, r0
 801044a:	461a      	mov	r2, r3
 801044c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010450:	429a      	cmp	r2, r3
 8010452:	d00c      	beq.n	801046e <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xa4>
 8010454:	f107 0314 	add.w	r3, r7, #20
 8010458:	4618      	mov	r0, r3
 801045a:	f7fe f97b 	bl	800e754 <_ZNK8touchgfx4Rect7isEmptyEv>
 801045e:	4603      	mov	r3, r0
 8010460:	f083 0301 	eor.w	r3, r3, #1
 8010464:	b2db      	uxtb	r3, r3
 8010466:	2b00      	cmp	r3, #0
 8010468:	d001      	beq.n	801046e <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xa4>
 801046a:	2301      	movs	r3, #1
 801046c:	e000      	b.n	8010470 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xa6>
 801046e:	2300      	movs	r3, #0
 8010470:	2b00      	cmp	r3, #0
 8010472:	d04a      	beq.n	801050a <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x140>
    {
        Rect r;
 8010474:	f107 030c 	add.w	r3, r7, #12
 8010478:	4618      	mov	r0, r3
 801047a:	f7fe fdfe 	bl	800f07a <_ZN8touchgfx4RectC1Ev>
        translateRectToAbsolute(r);
 801047e:	687a      	ldr	r2, [r7, #4]
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	681b      	ldr	r3, [r3, #0]
 8010484:	3324      	adds	r3, #36	; 0x24
 8010486:	681b      	ldr	r3, [r3, #0]
 8010488:	f107 010c 	add.w	r1, r7, #12
 801048c:	4610      	mov	r0, r2
 801048e:	4798      	blx	r3
        dirty.x -= iconX;
 8010490:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010494:	b29a      	uxth	r2, r3
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 801049c:	b29b      	uxth	r3, r3
 801049e:	1ad3      	subs	r3, r2, r3
 80104a0:	b29b      	uxth	r3, r3
 80104a2:	b21b      	sxth	r3, r3
 80104a4:	82bb      	strh	r3, [r7, #20]
        dirty.y -= iconY;
 80104a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80104aa:	b29a      	uxth	r2, r3
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80104b2:	b29b      	uxth	r3, r3
 80104b4:	1ad3      	subs	r3, r2, r3
 80104b6:	b29b      	uxth	r3, r3
 80104b8:	b21b      	sxth	r3, r3
 80104ba:	82fb      	strh	r3, [r7, #22]
        HAL::lcd().drawPartialBitmap(bmp, r.x + iconX, r.y + iconY, dirty, alpha);
 80104bc:	f7ff f90a 	bl	800f6d4 <_ZN8touchgfx3HAL3lcdEv>
 80104c0:	6803      	ldr	r3, [r0, #0]
 80104c2:	330c      	adds	r3, #12
 80104c4:	681c      	ldr	r4, [r3, #0]
 80104c6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80104ca:	b29a      	uxth	r2, r3
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 80104d2:	b29b      	uxth	r3, r3
 80104d4:	4413      	add	r3, r2
 80104d6:	b29b      	uxth	r3, r3
 80104d8:	b21d      	sxth	r5, r3
 80104da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80104de:	b29a      	uxth	r2, r3
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80104e6:	b29b      	uxth	r3, r3
 80104e8:	4413      	add	r3, r2
 80104ea:	b29b      	uxth	r3, r3
 80104ec:	b21a      	sxth	r2, r3
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80104f4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80104f8:	2601      	movs	r6, #1
 80104fa:	9602      	str	r6, [sp, #8]
 80104fc:	9301      	str	r3, [sp, #4]
 80104fe:	f107 0314 	add.w	r3, r7, #20
 8010502:	9300      	str	r3, [sp, #0]
 8010504:	4613      	mov	r3, r2
 8010506:	462a      	mov	r2, r5
 8010508:	47a0      	blx	r4
    }
}
 801050a:	bf00      	nop
 801050c:	372c      	adds	r7, #44	; 0x2c
 801050e:	46bd      	mov	sp, r7
 8010510:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08010514 <_ZN8touchgfx14ButtonWithIconD1Ev>:
class ButtonWithIcon : public Button
 8010514:	b580      	push	{r7, lr}
 8010516:	b082      	sub	sp, #8
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
 801051c:	4a05      	ldr	r2, [pc, #20]	; (8010534 <_ZN8touchgfx14ButtonWithIconD1Ev+0x20>)
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	601a      	str	r2, [r3, #0]
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	4618      	mov	r0, r3
 8010526:	f7ff f849 	bl	800f5bc <_ZN8touchgfx6ButtonD1Ev>
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	4618      	mov	r0, r3
 801052e:	3708      	adds	r7, #8
 8010530:	46bd      	mov	sp, r7
 8010532:	bd80      	pop	{r7, pc}
 8010534:	08024c34 	.word	0x08024c34

08010538 <_ZN8touchgfx14ButtonWithIconD0Ev>:
 8010538:	b580      	push	{r7, lr}
 801053a:	b082      	sub	sp, #8
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
 8010540:	6878      	ldr	r0, [r7, #4]
 8010542:	f7ff ffe7 	bl	8010514 <_ZN8touchgfx14ButtonWithIconD1Ev>
 8010546:	213c      	movs	r1, #60	; 0x3c
 8010548:	6878      	ldr	r0, [r7, #4]
 801054a:	f012 f81f 	bl	802258c <_ZdlPvj>
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	4618      	mov	r0, r3
 8010552:	3708      	adds	r7, #8
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}

08010558 <_ZNK8touchgfx15ButtonWithLabel12getSolidRectEv>:
        const Font* f = typedText.getFont();
        const Unicode::UnicodeChar* s = typedText.getText();
        textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
    }

    virtual Rect getSolidRect() const
 8010558:	b580      	push	{r7, lr}
 801055a:	b082      	sub	sp, #8
 801055c:	af00      	add	r7, sp, #0
 801055e:	6078      	str	r0, [r7, #4]
 8010560:	6039      	str	r1, [r7, #0]
    {
        return Button::getSolidRect();
 8010562:	683a      	ldr	r2, [r7, #0]
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	4611      	mov	r1, r2
 8010568:	4618      	mov	r0, r3
 801056a:	f7ff fe8a 	bl	8010282 <_ZNK8touchgfx6Button12getSolidRectEv>
    };
 801056e:	6878      	ldr	r0, [r7, #4]
 8010570:	3708      	adds	r7, #8
 8010572:	46bd      	mov	sp, r7
 8010574:	bd80      	pop	{r7, pc}

08010576 <_ZNK8touchgfx15ButtonWithLabel7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_BUTTONWITHLABEL.
     */
    virtual uint16_t getType() const
 8010576:	b480      	push	{r7}
 8010578:	b083      	sub	sp, #12
 801057a:	af00      	add	r7, sp, #0
 801057c:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_BUTTONWITHLABEL;
 801057e:	2307      	movs	r3, #7
    }
 8010580:	4618      	mov	r0, r3
 8010582:	370c      	adds	r7, #12
 8010584:	46bd      	mov	sp, r7
 8010586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801058a:	4770      	bx	lr

0801058c <_ZN8touchgfx15ButtonWithLabelC1Ev>:
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/FontManager.hpp>

namespace touchgfx
{
ButtonWithLabel::ButtonWithLabel()
 801058c:	b580      	push	{r7, lr}
 801058e:	b082      	sub	sp, #8
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
    : Button(), color(0), colorPressed(0), rotation(TEXT_ROTATE_0), textHeightIncludingSpacing(0)
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	4618      	mov	r0, r3
 8010598:	f7fe ffec 	bl	800f574 <_ZN8touchgfx6ButtonC1Ev>
 801059c:	4a11      	ldr	r2, [pc, #68]	; (80105e4 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	601a      	str	r2, [r3, #0]
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	3334      	adds	r3, #52	; 0x34
 80105a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7ff f8e2 	bl	800f774 <_ZN8touchgfx9TypedTextC1Et>
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	3338      	adds	r3, #56	; 0x38
 80105b4:	2100      	movs	r1, #0
 80105b6:	4618      	mov	r0, r3
 80105b8:	f7fe fd50 	bl	800f05c <_ZN8touchgfx9colortypeC1Em>
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	333c      	adds	r3, #60	; 0x3c
 80105c0:	2100      	movs	r1, #0
 80105c2:	4618      	mov	r0, r3
 80105c4:	f7fe fd4a 	bl	800f05c <_ZN8touchgfx9colortypeC1Em>
 80105c8:	687b      	ldr	r3, [r7, #4]
 80105ca:	2200      	movs	r2, #0
 80105cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	2200      	movs	r2, #0
 80105d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
{
}
 80105d8:	687b      	ldr	r3, [r7, #4]
 80105da:	4618      	mov	r0, r3
 80105dc:	3708      	adds	r7, #8
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}
 80105e2:	bf00      	nop
 80105e4:	08024cac 	.word	0x08024cac

080105e8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:

void ButtonWithLabel::draw(const Rect& area) const
{
 80105e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105ea:	b09b      	sub	sp, #108	; 0x6c
 80105ec:	af06      	add	r7, sp, #24
 80105ee:	60f8      	str	r0, [r7, #12]
 80105f0:	60b9      	str	r1, [r7, #8]
    Button::draw(area);
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	68b9      	ldr	r1, [r7, #8]
 80105f6:	4618      	mov	r0, r3
 80105f8:	f7ff fda9 	bl	801014e <_ZNK8touchgfx6Button4drawERKNS_4RectE>

    const Font* fontToDraw = typedText.getFont();
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	3334      	adds	r3, #52	; 0x34
 8010600:	4618      	mov	r0, r3
 8010602:	f7ff f8f1 	bl	800f7e8 <_ZNK8touchgfx9TypedText7getFontEv>
 8010606:	64f8      	str	r0, [r7, #76]	; 0x4c
    if ((fontToDraw != 0) && typedText.hasValidId())
 8010608:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801060a:	2b00      	cmp	r3, #0
 801060c:	d009      	beq.n	8010622 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3a>
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	3334      	adds	r3, #52	; 0x34
 8010612:	4618      	mov	r0, r3
 8010614:	f7ff f8be 	bl	800f794 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 8010618:	4603      	mov	r3, r0
 801061a:	2b00      	cmp	r3, #0
 801061c:	d001      	beq.n	8010622 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3a>
 801061e:	2301      	movs	r3, #1
 8010620:	e000      	b.n	8010624 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3c>
 8010622:	2300      	movs	r3, #0
 8010624:	2b00      	cmp	r3, #0
 8010626:	f000 80db 	beq.w	80107e0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x1f8>
    {
        uint8_t height = textHeightIncludingSpacing;
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8010630:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        int16_t offset;
        Rect labelRect;
 8010634:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010638:	4618      	mov	r0, r3
 801063a:	f7fe fd1e 	bl	800f07a <_ZN8touchgfx4RectC1Ev>
        switch (rotation)
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010644:	2b01      	cmp	r3, #1
 8010646:	d02b      	beq.n	80106a0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
 8010648:	2b03      	cmp	r3, #3
 801064a:	d029      	beq.n	80106a0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
        {
        default:
        case TEXT_ROTATE_0:
        case TEXT_ROTATE_180:
            offset = (this->getHeight() - height) / 2;
 801064c:	68fb      	ldr	r3, [r7, #12]
 801064e:	4618      	mov	r0, r3
 8010650:	f7fe fcc6 	bl	800efe0 <_ZNK8touchgfx8Drawable9getHeightEv>
 8010654:	4603      	mov	r3, r0
 8010656:	461a      	mov	r2, r3
 8010658:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801065c:	1ad3      	subs	r3, r2, r3
 801065e:	2b00      	cmp	r3, #0
 8010660:	da00      	bge.n	8010664 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x7c>
 8010662:	3301      	adds	r3, #1
 8010664:	105b      	asrs	r3, r3, #1
 8010666:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            labelRect = Rect(0, offset, this->getWidth(), height);
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	4618      	mov	r0, r3
 801066e:	f7fe fcaa 	bl	800efc6 <_ZNK8touchgfx8Drawable8getWidthEv>
 8010672:	4603      	mov	r3, r0
 8010674:	4619      	mov	r1, r3
 8010676:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801067a:	b21b      	sxth	r3, r3
 801067c:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 8010680:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8010684:	9300      	str	r3, [sp, #0]
 8010686:	460b      	mov	r3, r1
 8010688:	2100      	movs	r1, #0
 801068a:	f7fd fe9b 	bl	800e3c4 <_ZN8touchgfx4RectC1Essss>
 801068e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010692:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8010696:	e892 0003 	ldmia.w	r2, {r0, r1}
 801069a:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801069e:	e028      	b.n	80106f2 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x10a>
        case TEXT_ROTATE_90:
        case TEXT_ROTATE_270:
            offset = (this->getWidth() - height) / 2;
 80106a0:	68fb      	ldr	r3, [r7, #12]
 80106a2:	4618      	mov	r0, r3
 80106a4:	f7fe fc8f 	bl	800efc6 <_ZNK8touchgfx8Drawable8getWidthEv>
 80106a8:	4603      	mov	r3, r0
 80106aa:	461a      	mov	r2, r3
 80106ac:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80106b0:	1ad3      	subs	r3, r2, r3
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	da00      	bge.n	80106b8 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xd0>
 80106b6:	3301      	adds	r3, #1
 80106b8:	105b      	asrs	r3, r3, #1
 80106ba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            labelRect = Rect(offset, 0, height, this->getHeight());
 80106be:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80106c2:	b21c      	sxth	r4, r3
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	4618      	mov	r0, r3
 80106c8:	f7fe fc8a 	bl	800efe0 <_ZNK8touchgfx8Drawable9getHeightEv>
 80106cc:	4603      	mov	r3, r0
 80106ce:	f9b7 1048 	ldrsh.w	r1, [r7, #72]	; 0x48
 80106d2:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80106d6:	9300      	str	r3, [sp, #0]
 80106d8:	4623      	mov	r3, r4
 80106da:	2200      	movs	r2, #0
 80106dc:	f7fd fe72 	bl	800e3c4 <_ZN8touchgfx4RectC1Essss>
 80106e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80106e4:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80106e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106ec:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80106f0:	bf00      	nop
        }
        Rect dirty = labelRect & area;
 80106f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80106f6:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80106fa:	68ba      	ldr	r2, [r7, #8]
 80106fc:	4618      	mov	r0, r3
 80106fe:	f7fd ff0c 	bl	800e51a <_ZNK8touchgfx4RectanERKS0_>

        if (!dirty.isEmpty())
 8010702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010706:	4618      	mov	r0, r3
 8010708:	f7fe f824 	bl	800e754 <_ZNK8touchgfx4Rect7isEmptyEv>
 801070c:	4603      	mov	r3, r0
 801070e:	f083 0301 	eor.w	r3, r3, #1
 8010712:	b2db      	uxtb	r3, r3
 8010714:	2b00      	cmp	r3, #0
 8010716:	d063      	beq.n	80107e0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x1f8>
        {
            dirty.x -= labelRect.x;
 8010718:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801071c:	b29a      	uxth	r2, r3
 801071e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8010722:	b29b      	uxth	r3, r3
 8010724:	1ad3      	subs	r3, r2, r3
 8010726:	b29b      	uxth	r3, r3
 8010728:	b21b      	sxth	r3, r3
 801072a:	853b      	strh	r3, [r7, #40]	; 0x28
            dirty.y -= labelRect.y;
 801072c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8010730:	b29a      	uxth	r2, r3
 8010732:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8010736:	b29b      	uxth	r3, r3
 8010738:	1ad3      	subs	r3, r2, r3
 801073a:	b29b      	uxth	r3, r3
 801073c:	b21b      	sxth	r3, r3
 801073e:	857b      	strh	r3, [r7, #42]	; 0x2a
            translateRectToAbsolute(labelRect);
 8010740:	68fa      	ldr	r2, [r7, #12]
 8010742:	68fb      	ldr	r3, [r7, #12]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	3324      	adds	r3, #36	; 0x24
 8010748:	681b      	ldr	r3, [r3, #0]
 801074a:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801074e:	4610      	mov	r0, r2
 8010750:	4798      	blx	r3
            LCD::StringVisuals visuals(fontToDraw, pressed ? colorPressed : color, alpha, typedText.getAlignment(), 0, rotation, typedText.getTextDirection(), 0, WIDE_TEXT_NONE);
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010758:	2b00      	cmp	r3, #0
 801075a:	d003      	beq.n	8010764 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>
 801075c:	68fb      	ldr	r3, [r7, #12]
 801075e:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8010762:	e002      	b.n	801076a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x182>
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	f103 0438 	add.w	r4, r3, #56	; 0x38
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	f893 6032 	ldrb.w	r6, [r3, #50]	; 0x32
 8010770:	68fb      	ldr	r3, [r7, #12]
 8010772:	3334      	adds	r3, #52	; 0x34
 8010774:	4618      	mov	r0, r3
 8010776:	f7ff f853 	bl	800f820 <_ZNK8touchgfx9TypedText12getAlignmentEv>
 801077a:	4603      	mov	r3, r0
 801077c:	607b      	str	r3, [r7, #4]
 801077e:	68fb      	ldr	r3, [r7, #12]
 8010780:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
 8010784:	68fb      	ldr	r3, [r7, #12]
 8010786:	3334      	adds	r3, #52	; 0x34
 8010788:	4618      	mov	r0, r3
 801078a:	f7ff f861 	bl	800f850 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801078e:	4603      	mov	r3, r0
 8010790:	461a      	mov	r2, r3
 8010792:	f107 0014 	add.w	r0, r7, #20
 8010796:	2300      	movs	r3, #0
 8010798:	9305      	str	r3, [sp, #20]
 801079a:	2300      	movs	r3, #0
 801079c:	9304      	str	r3, [sp, #16]
 801079e:	9203      	str	r2, [sp, #12]
 80107a0:	9502      	str	r5, [sp, #8]
 80107a2:	2300      	movs	r3, #0
 80107a4:	9301      	str	r3, [sp, #4]
 80107a6:	687b      	ldr	r3, [r7, #4]
 80107a8:	9300      	str	r3, [sp, #0]
 80107aa:	4633      	mov	r3, r6
 80107ac:	6822      	ldr	r2, [r4, #0]
 80107ae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80107b0:	f7fe ff9c 	bl	800f6ec <_ZN8touchgfx3LCD13StringVisualsC1EPKNS_4FontENS_9colortypeEhhtNS_12TextRotationEhhNS_14WideTextActionE>
            HAL::lcd().drawString(labelRect, dirty, visuals, typedText.getText());
 80107b4:	f7fe ff8e 	bl	800f6d4 <_ZN8touchgfx3HAL3lcdEv>
 80107b8:	4604      	mov	r4, r0
 80107ba:	68fb      	ldr	r3, [r7, #12]
 80107bc:	3334      	adds	r3, #52	; 0x34
 80107be:	4618      	mov	r0, r3
 80107c0:	f7fe fffc 	bl	800f7bc <_ZNK8touchgfx9TypedText7getTextEv>
 80107c4:	4603      	mov	r3, r0
 80107c6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80107ca:	9301      	str	r3, [sp, #4]
 80107cc:	f107 0314 	add.w	r3, r7, #20
 80107d0:	9300      	str	r3, [sp, #0]
 80107d2:	4613      	mov	r3, r2
 80107d4:	f107 0230 	add.w	r2, r7, #48	; 0x30
 80107d8:	ca06      	ldmia	r2, {r1, r2}
 80107da:	4620      	mov	r0, r4
 80107dc:	f00d fafa 	bl	801ddd4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz>
        }
    }
}
 80107e0:	bf00      	nop
 80107e2:	3754      	adds	r7, #84	; 0x54
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080107e8 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 80107e8:	b580      	push	{r7, lr}
 80107ea:	b082      	sub	sp, #8
 80107ec:	af00      	add	r7, sp, #0
 80107ee:	6078      	str	r0, [r7, #4]
 80107f0:	4a05      	ldr	r2, [pc, #20]	; (8010808 <_ZN8touchgfx15ButtonWithLabelD1Ev+0x20>)
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	601a      	str	r2, [r3, #0]
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	4618      	mov	r0, r3
 80107fa:	f7fe fedf 	bl	800f5bc <_ZN8touchgfx6ButtonD1Ev>
 80107fe:	687b      	ldr	r3, [r7, #4]
 8010800:	4618      	mov	r0, r3
 8010802:	3708      	adds	r7, #8
 8010804:	46bd      	mov	sp, r7
 8010806:	bd80      	pop	{r7, pc}
 8010808:	08024cac 	.word	0x08024cac

0801080c <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 801080c:	b580      	push	{r7, lr}
 801080e:	b082      	sub	sp, #8
 8010810:	af00      	add	r7, sp, #0
 8010812:	6078      	str	r0, [r7, #4]
 8010814:	6878      	ldr	r0, [r7, #4]
 8010816:	f7ff ffe7 	bl	80107e8 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 801081a:	2144      	movs	r1, #68	; 0x44
 801081c:	6878      	ldr	r0, [r7, #4]
 801081e:	f011 feb5 	bl	802258c <_ZdlPvj>
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	4618      	mov	r0, r3
 8010826:	3708      	adds	r7, #8
 8010828:	46bd      	mov	sp, r7
 801082a:	bd80      	pop	{r7, pc}

0801082c <_ZNK8touchgfx6Bitmap7getRectEv>:
     *
     *        Gets the rectangle describing the dimensions of the Bitmap.
     *
     * @return a Rect describing the dimensions of this bitmap.
     */
    Rect getRect() const
 801082c:	b590      	push	{r4, r7, lr}
 801082e:	b085      	sub	sp, #20
 8010830:	af02      	add	r7, sp, #8
 8010832:	6078      	str	r0, [r7, #4]
 8010834:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, getWidth(), getHeight());
 8010836:	6838      	ldr	r0, [r7, #0]
 8010838:	f00f fddc 	bl	80203f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801083c:	4603      	mov	r3, r0
 801083e:	b21c      	sxth	r4, r3
 8010840:	6838      	ldr	r0, [r7, #0]
 8010842:	f00f fe0f 	bl	8020464 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010846:	4603      	mov	r3, r0
 8010848:	b21b      	sxth	r3, r3
 801084a:	9300      	str	r3, [sp, #0]
 801084c:	4623      	mov	r3, r4
 801084e:	2200      	movs	r2, #0
 8010850:	2100      	movs	r1, #0
 8010852:	6878      	ldr	r0, [r7, #4]
 8010854:	f7fd fdb6 	bl	800e3c4 <_ZN8touchgfx4RectC1Essss>
    }
 8010858:	6878      	ldr	r0, [r7, #4]
 801085a:	370c      	adds	r7, #12
 801085c:	46bd      	mov	sp, r7
 801085e:	bd90      	pop	{r4, r7, pc}

08010860 <_ZNK8touchgfx5Image7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_IMAGE.
     */
    virtual uint16_t getType() const
 8010860:	b480      	push	{r7}
 8010862:	b083      	sub	sp, #12
 8010864:	af00      	add	r7, sp, #0
 8010866:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_IMAGE;
 8010868:	2308      	movs	r3, #8
    }
 801086a:	4618      	mov	r0, r3
 801086c:	370c      	adds	r7, #12
 801086e:	46bd      	mov	sp, r7
 8010870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010874:	4770      	bx	lr

08010876 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
#include <touchgfx/widgets/Image.hpp>

namespace touchgfx
{
void Image::setBitmap(const Bitmap& bmp)
{
 8010876:	b5b0      	push	{r4, r5, r7, lr}
 8010878:	b082      	sub	sp, #8
 801087a:	af00      	add	r7, sp, #0
 801087c:	6078      	str	r0, [r7, #4]
 801087e:	6039      	str	r1, [r7, #0]
    bitmap = bmp;
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	683a      	ldr	r2, [r7, #0]
 8010884:	8812      	ldrh	r2, [r2, #0]
 8010886:	84da      	strh	r2, [r3, #38]	; 0x26
    // When setting bitmap, adjust size of this widget to match.
    setWidth(bitmap.getWidth());
 8010888:	687d      	ldr	r5, [r7, #4]
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	3338      	adds	r3, #56	; 0x38
 8010890:	681c      	ldr	r4, [r3, #0]
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	3326      	adds	r3, #38	; 0x26
 8010896:	4618      	mov	r0, r3
 8010898:	f00f fdac 	bl	80203f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801089c:	4603      	mov	r3, r0
 801089e:	b21b      	sxth	r3, r3
 80108a0:	4619      	mov	r1, r3
 80108a2:	4628      	mov	r0, r5
 80108a4:	47a0      	blx	r4
    setHeight(bitmap.getHeight());
 80108a6:	687d      	ldr	r5, [r7, #4]
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	333c      	adds	r3, #60	; 0x3c
 80108ae:	681c      	ldr	r4, [r3, #0]
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	3326      	adds	r3, #38	; 0x26
 80108b4:	4618      	mov	r0, r3
 80108b6:	f00f fdd5 	bl	8020464 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80108ba:	4603      	mov	r3, r0
 80108bc:	b21b      	sxth	r3, r3
 80108be:	4619      	mov	r1, r3
 80108c0:	4628      	mov	r0, r5
 80108c2:	47a0      	blx	r4

    // This bool is no longer used, but maintained for backwards compat.
    hasTransparentPixels = bitmap.hasTransparentPixels();
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	3326      	adds	r3, #38	; 0x26
 80108c8:	4618      	mov	r0, r3
 80108ca:	f00f fe5b 	bl	8020584 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80108ce:	4603      	mov	r3, r0
 80108d0:	461a      	mov	r2, r3
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 80108d8:	bf00      	nop
 80108da:	3708      	adds	r7, #8
 80108dc:	46bd      	mov	sp, r7
 80108de:	bdb0      	pop	{r4, r5, r7, pc}

080108e0 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:

void Image::draw(const Rect& invalidatedArea) const
{
 80108e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108e2:	b08d      	sub	sp, #52	; 0x34
 80108e4:	af04      	add	r7, sp, #16
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	6039      	str	r1, [r7, #0]
    Rect meAbs;
 80108ea:	f107 0310 	add.w	r3, r7, #16
 80108ee:	4618      	mov	r0, r3
 80108f0:	f7fe fbc3 	bl	800f07a <_ZN8touchgfx4RectC1Ev>
    translateRectToAbsolute(meAbs); //To find our x and y coords in absolute.
 80108f4:	687a      	ldr	r2, [r7, #4]
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	3324      	adds	r3, #36	; 0x24
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	f107 0110 	add.w	r1, r7, #16
 8010902:	4610      	mov	r0, r2
 8010904:	4798      	blx	r3

    // Calculate intersection between bitmap rect and invalidated area.
    Rect dirtyBitmapArea = bitmap.getRect() & invalidatedArea;
 8010906:	687b      	ldr	r3, [r7, #4]
 8010908:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801090c:	f107 0318 	add.w	r3, r7, #24
 8010910:	4611      	mov	r1, r2
 8010912:	4618      	mov	r0, r3
 8010914:	f7ff ff8a 	bl	801082c <_ZNK8touchgfx6Bitmap7getRectEv>
 8010918:	f107 0308 	add.w	r3, r7, #8
 801091c:	f107 0118 	add.w	r1, r7, #24
 8010920:	683a      	ldr	r2, [r7, #0]
 8010922:	4618      	mov	r0, r3
 8010924:	f7fd fdf9 	bl	800e51a <_ZNK8touchgfx4RectanERKS0_>

    if (!dirtyBitmapArea.isEmpty())
 8010928:	f107 0308 	add.w	r3, r7, #8
 801092c:	4618      	mov	r0, r3
 801092e:	f7fd ff11 	bl	800e754 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010932:	4603      	mov	r3, r0
 8010934:	f083 0301 	eor.w	r3, r3, #1
 8010938:	b2db      	uxtb	r3, r3
 801093a:	2b00      	cmp	r3, #0
 801093c:	d016      	beq.n	801096c <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x8c>
    {
        HAL::lcd().drawPartialBitmap(bitmap, meAbs.x, meAbs.y, dirtyBitmapArea, alpha);
 801093e:	f7fe fec9 	bl	800f6d4 <_ZN8touchgfx3HAL3lcdEv>
 8010942:	6803      	ldr	r3, [r0, #0]
 8010944:	330c      	adds	r3, #12
 8010946:	681c      	ldr	r4, [r3, #0]
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801094e:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8010952:	f9b7 5012 	ldrsh.w	r5, [r7, #18]
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801095c:	2601      	movs	r6, #1
 801095e:	9602      	str	r6, [sp, #8]
 8010960:	9301      	str	r3, [sp, #4]
 8010962:	f107 0308 	add.w	r3, r7, #8
 8010966:	9300      	str	r3, [sp, #0]
 8010968:	462b      	mov	r3, r5
 801096a:	47a0      	blx	r4
    }
}
 801096c:	bf00      	nop
 801096e:	3724      	adds	r7, #36	; 0x24
 8010970:	46bd      	mov	sp, r7
 8010972:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010974 <_ZNK8touchgfx5Image12getSolidRectEv>:

Rect Image::getSolidRect() const
{
 8010974:	b580      	push	{r7, lr}
 8010976:	b084      	sub	sp, #16
 8010978:	af02      	add	r7, sp, #8
 801097a:	6078      	str	r0, [r7, #4]
 801097c:	6039      	str	r1, [r7, #0]
    // If alpha is less than solid, we have an empty solid rect.
    if (alpha < 255)
 801097e:	683b      	ldr	r3, [r7, #0]
 8010980:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010984:	2bff      	cmp	r3, #255	; 0xff
 8010986:	d008      	beq.n	801099a <_ZNK8touchgfx5Image12getSolidRectEv+0x26>
    {
        return Rect(0, 0, 0, 0);
 8010988:	2300      	movs	r3, #0
 801098a:	9300      	str	r3, [sp, #0]
 801098c:	2300      	movs	r3, #0
 801098e:	2200      	movs	r2, #0
 8010990:	2100      	movs	r1, #0
 8010992:	6878      	ldr	r0, [r7, #4]
 8010994:	f7fd fd16 	bl	800e3c4 <_ZN8touchgfx4RectC1Essss>
 8010998:	e007      	b.n	80109aa <_ZNK8touchgfx5Image12getSolidRectEv+0x36>
    }
    // Return solid rect from bitmap (precalculated).
    return bitmap.getSolidRect();
 801099a:	683b      	ldr	r3, [r7, #0]
 801099c:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80109a0:	687b      	ldr	r3, [r7, #4]
 80109a2:	4611      	mov	r1, r2
 80109a4:	4618      	mov	r0, r3
 80109a6:	f00f fd95 	bl	80204d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
}
 80109aa:	6878      	ldr	r0, [r7, #4]
 80109ac:	3708      	adds	r7, #8
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}

080109b2 <_ZNK8touchgfx14SnapshotWidget7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_SNAPSHOTWIDGET.
     */
    virtual uint16_t getType() const
 80109b2:	b480      	push	{r7}
 80109b4:	b083      	sub	sp, #12
 80109b6:	af00      	add	r7, sp, #0
 80109b8:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_SNAPSHOTWIDGET;
 80109ba:	230c      	movs	r3, #12
    }
 80109bc:	4618      	mov	r0, r3
 80109be:	370c      	adds	r7, #12
 80109c0:	46bd      	mov	sp, r7
 80109c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109c6:	4770      	bx	lr

080109c8 <_ZN8touchgfx14SnapshotWidgetC1Ev>:

#include <touchgfx/widgets/SnapshotWidget.hpp>

namespace touchgfx
{
SnapshotWidget::SnapshotWidget() : Widget(), fbCopy(0), alpha(255)
 80109c8:	b580      	push	{r7, lr}
 80109ca:	b082      	sub	sp, #8
 80109cc:	af00      	add	r7, sp, #0
 80109ce:	6078      	str	r0, [r7, #4]
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	4618      	mov	r0, r3
 80109d4:	f7fe fbf6 	bl	800f1c4 <_ZN8touchgfx6WidgetC1Ev>
 80109d8:	4a07      	ldr	r2, [pc, #28]	; (80109f8 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x30>)
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	601a      	str	r2, [r3, #0]
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	2200      	movs	r2, #0
 80109e2:	629a      	str	r2, [r3, #40]	; 0x28
 80109e4:	687b      	ldr	r3, [r7, #4]
 80109e6:	22ff      	movs	r2, #255	; 0xff
 80109e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
{
}
 80109ec:	687b      	ldr	r3, [r7, #4]
 80109ee:	4618      	mov	r0, r3
 80109f0:	3708      	adds	r7, #8
 80109f2:	46bd      	mov	sp, r7
 80109f4:	bd80      	pop	{r7, pc}
 80109f6:	bf00      	nop
 80109f8:	08024d90 	.word	0x08024d90

080109fc <_ZN8touchgfx14SnapshotWidgetD1Ev>:

SnapshotWidget::~SnapshotWidget()
 80109fc:	b580      	push	{r7, lr}
 80109fe:	b082      	sub	sp, #8
 8010a00:	af00      	add	r7, sp, #0
 8010a02:	6078      	str	r0, [r7, #4]
 8010a04:	4a05      	ldr	r2, [pc, #20]	; (8010a1c <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	601a      	str	r2, [r3, #0]
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f7fe fbeb 	bl	800f1e8 <_ZN8touchgfx6WidgetD1Ev>
{
}
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	4618      	mov	r0, r3
 8010a16:	3708      	adds	r7, #8
 8010a18:	46bd      	mov	sp, r7
 8010a1a:	bd80      	pop	{r7, pc}
 8010a1c:	08024d90 	.word	0x08024d90

08010a20 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
SnapshotWidget::~SnapshotWidget()
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b082      	sub	sp, #8
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
}
 8010a28:	6878      	ldr	r0, [r7, #4]
 8010a2a:	f7ff ffe7 	bl	80109fc <_ZN8touchgfx14SnapshotWidgetD1Ev>
 8010a2e:	2130      	movs	r1, #48	; 0x30
 8010a30:	6878      	ldr	r0, [r7, #4]
 8010a32:	f011 fdab 	bl	802258c <_ZdlPvj>
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	4618      	mov	r0, r3
 8010a3a:	3708      	adds	r7, #8
 8010a3c:	46bd      	mov	sp, r7
 8010a3e:	bd80      	pop	{r7, pc}

08010a40 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:

void SnapshotWidget::draw(const Rect& invalidatedArea) const
{
 8010a40:	b5b0      	push	{r4, r5, r7, lr}
 8010a42:	b086      	sub	sp, #24
 8010a44:	af02      	add	r7, sp, #8
 8010a46:	6078      	str	r0, [r7, #4]
 8010a48:	6039      	str	r1, [r7, #0]
    if (!fbCopy)
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d027      	beq.n	8010aa2 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x62>
    {
        return;
    }

    Rect absRect;
 8010a52:	f107 0308 	add.w	r3, r7, #8
 8010a56:	4618      	mov	r0, r3
 8010a58:	f7fe fb0f 	bl	800f07a <_ZN8touchgfx4RectC1Ev>
    translateRectToAbsolute(absRect);
 8010a5c:	687a      	ldr	r2, [r7, #4]
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	681b      	ldr	r3, [r3, #0]
 8010a62:	3324      	adds	r3, #36	; 0x24
 8010a64:	681b      	ldr	r3, [r3, #0]
 8010a66:	f107 0108 	add.w	r1, r7, #8
 8010a6a:	4610      	mov	r0, r2
 8010a6c:	4798      	blx	r3
    absRect.width = rect.width;
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010a74:	81bb      	strh	r3, [r7, #12]
    absRect.height = rect.height;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8010a7c:	81fb      	strh	r3, [r7, #14]
    HAL::lcd().blitCopy(fbCopy, absRect, invalidatedArea, alpha, false);
 8010a7e:	f7fe fe29 	bl	800f6d4 <_ZN8touchgfx3HAL3lcdEv>
 8010a82:	6803      	ldr	r3, [r0, #0]
 8010a84:	3310      	adds	r3, #16
 8010a86:	681c      	ldr	r4, [r3, #0]
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010a92:	f107 0208 	add.w	r2, r7, #8
 8010a96:	2500      	movs	r5, #0
 8010a98:	9501      	str	r5, [sp, #4]
 8010a9a:	9300      	str	r3, [sp, #0]
 8010a9c:	683b      	ldr	r3, [r7, #0]
 8010a9e:	47a0      	blx	r4
 8010aa0:	e000      	b.n	8010aa4 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x64>
        return;
 8010aa2:	bf00      	nop
}
 8010aa4:	3710      	adds	r7, #16
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bdb0      	pop	{r4, r5, r7, pc}

08010aaa <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:

Rect SnapshotWidget::getSolidRect() const
{
 8010aaa:	b590      	push	{r4, r7, lr}
 8010aac:	b085      	sub	sp, #20
 8010aae:	af02      	add	r7, sp, #8
 8010ab0:	6078      	str	r0, [r7, #4]
 8010ab2:	6039      	str	r1, [r7, #0]
    if (alpha < 255)
 8010ab4:	683b      	ldr	r3, [r7, #0]
 8010ab6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010aba:	2bff      	cmp	r3, #255	; 0xff
 8010abc:	d008      	beq.n	8010ad0 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x26>
    {
        return Rect(0, 0, 0, 0);
 8010abe:	2300      	movs	r3, #0
 8010ac0:	9300      	str	r3, [sp, #0]
 8010ac2:	2300      	movs	r3, #0
 8010ac4:	2200      	movs	r2, #0
 8010ac6:	2100      	movs	r1, #0
 8010ac8:	6878      	ldr	r0, [r7, #4]
 8010aca:	f7fd fc7b 	bl	800e3c4 <_ZN8touchgfx4RectC1Essss>
 8010ace:	e01e      	b.n	8010b0e <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x64>
    }

    if (!fbCopy)
 8010ad0:	683b      	ldr	r3, [r7, #0]
 8010ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ad4:	2b00      	cmp	r3, #0
 8010ad6:	d108      	bne.n	8010aea <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x40>
    {
        return Rect(0, 0, 0, 0);
 8010ad8:	2300      	movs	r3, #0
 8010ada:	9300      	str	r3, [sp, #0]
 8010adc:	2300      	movs	r3, #0
 8010ade:	2200      	movs	r2, #0
 8010ae0:	2100      	movs	r1, #0
 8010ae2:	6878      	ldr	r0, [r7, #4]
 8010ae4:	f7fd fc6e 	bl	800e3c4 <_ZN8touchgfx4RectC1Essss>
 8010ae8:	e011      	b.n	8010b0e <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x64>
    }
    else
    {
        return Rect(0, 0, getWidth(), getHeight());
 8010aea:	683b      	ldr	r3, [r7, #0]
 8010aec:	4618      	mov	r0, r3
 8010aee:	f7fe fa6a 	bl	800efc6 <_ZNK8touchgfx8Drawable8getWidthEv>
 8010af2:	4603      	mov	r3, r0
 8010af4:	461c      	mov	r4, r3
 8010af6:	683b      	ldr	r3, [r7, #0]
 8010af8:	4618      	mov	r0, r3
 8010afa:	f7fe fa71 	bl	800efe0 <_ZNK8touchgfx8Drawable9getHeightEv>
 8010afe:	4603      	mov	r3, r0
 8010b00:	9300      	str	r3, [sp, #0]
 8010b02:	4623      	mov	r3, r4
 8010b04:	2200      	movs	r2, #0
 8010b06:	2100      	movs	r1, #0
 8010b08:	6878      	ldr	r0, [r7, #4]
 8010b0a:	f7fd fc5b 	bl	800e3c4 <_ZN8touchgfx4RectC1Essss>
    }
}
 8010b0e:	6878      	ldr	r0, [r7, #4]
 8010b10:	370c      	adds	r7, #12
 8010b12:	46bd      	mov	sp, r7
 8010b14:	bd90      	pop	{r4, r7, pc}

08010b16 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:

void SnapshotWidget::makeSnapshot()
{
 8010b16:	b590      	push	{r4, r7, lr}
 8010b18:	b083      	sub	sp, #12
 8010b1a:	af00      	add	r7, sp, #0
 8010b1c:	6078      	str	r0, [r7, #4]
    fbCopy = reinterpret_cast<uint16_t*>(HAL::lcd().copyFrameBufferRegionToMemory(rect));
 8010b1e:	f7fe fdd9 	bl	800f6d4 <_ZN8touchgfx3HAL3lcdEv>
 8010b22:	4603      	mov	r3, r0
 8010b24:	681a      	ldr	r2, [r3, #0]
 8010b26:	3218      	adds	r2, #24
 8010b28:	6814      	ldr	r4, [r2, #0]
 8010b2a:	687a      	ldr	r2, [r7, #4]
 8010b2c:	1d11      	adds	r1, r2, #4
 8010b2e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010b32:	4618      	mov	r0, r3
 8010b34:	47a0      	blx	r4
 8010b36:	4602      	mov	r2, r0
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8010b3c:	bf00      	nop
 8010b3e:	370c      	adds	r7, #12
 8010b40:	46bd      	mov	sp, r7
 8010b42:	bd90      	pop	{r4, r7, pc}

08010b44 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:

void SnapshotWidget::makeSnapshot(const BitmapId bmp)
{
 8010b44:	b590      	push	{r4, r7, lr}
 8010b46:	b083      	sub	sp, #12
 8010b48:	af00      	add	r7, sp, #0
 8010b4a:	6078      	str	r0, [r7, #4]
 8010b4c:	460b      	mov	r3, r1
 8010b4e:	807b      	strh	r3, [r7, #2]
    fbCopy = reinterpret_cast<uint16_t*>(HAL::lcd().copyFrameBufferRegionToMemory(rect, bmp));
 8010b50:	f7fe fdc0 	bl	800f6d4 <_ZN8touchgfx3HAL3lcdEv>
 8010b54:	4603      	mov	r3, r0
 8010b56:	681a      	ldr	r2, [r3, #0]
 8010b58:	3218      	adds	r2, #24
 8010b5a:	6814      	ldr	r4, [r2, #0]
 8010b5c:	687a      	ldr	r2, [r7, #4]
 8010b5e:	1d11      	adds	r1, r2, #4
 8010b60:	887a      	ldrh	r2, [r7, #2]
 8010b62:	4618      	mov	r0, r3
 8010b64:	47a0      	blx	r4
 8010b66:	4602      	mov	r2, r0
 8010b68:	687b      	ldr	r3, [r7, #4]
 8010b6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8010b6c:	bf00      	nop
 8010b6e:	370c      	adds	r7, #12
 8010b70:	46bd      	mov	sp, r7
 8010b72:	bd90      	pop	{r4, r7, pc}

08010b74 <_ZN8touchgfx8TextArea13getTextHeightEv>:
#include <touchgfx/widgets/TextArea.hpp>

namespace touchgfx
{
int16_t TextArea::getTextHeight()
{
 8010b74:	b580      	push	{r7, lr}
 8010b76:	b082      	sub	sp, #8
 8010b78:	af00      	add	r7, sp, #0
 8010b7a:	6078      	str	r0, [r7, #4]
    if (typedText.hasValidId())
 8010b7c:	687b      	ldr	r3, [r7, #4]
 8010b7e:	3326      	adds	r3, #38	; 0x26
 8010b80:	4618      	mov	r0, r3
 8010b82:	f7fe fe07 	bl	800f794 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 8010b86:	4603      	mov	r3, r0
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d00b      	beq.n	8010ba4 <_ZN8touchgfx8TextArea13getTextHeightEv+0x30>
    {
        return getTextHeightInternal(typedText.getText());
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	3326      	adds	r3, #38	; 0x26
 8010b90:	4618      	mov	r0, r3
 8010b92:	f7fe fe13 	bl	800f7bc <_ZNK8touchgfx9TypedText7getTextEv>
 8010b96:	4603      	mov	r3, r0
 8010b98:	4619      	mov	r1, r3
 8010b9a:	6878      	ldr	r0, [r7, #4]
 8010b9c:	f000 f906 	bl	8010dac <_ZNK8touchgfx8TextArea21getTextHeightInternalEPKtz>
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	e000      	b.n	8010ba6 <_ZN8touchgfx8TextArea13getTextHeightEv+0x32>
    }
    else
    {
        return 0;
 8010ba4:	2300      	movs	r3, #0
    }
}
 8010ba6:	4618      	mov	r0, r3
 8010ba8:	3708      	adds	r7, #8
 8010baa:	46bd      	mov	sp, r7
 8010bac:	bd80      	pop	{r7, pc}

08010bae <_ZNK8touchgfx8TextArea12getTextWidthEv>:

uint16_t TextArea::getTextWidth() const
{
 8010bae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bb0:	b083      	sub	sp, #12
 8010bb2:	af00      	add	r7, sp, #0
 8010bb4:	6078      	str	r0, [r7, #4]
    return typedText.hasValidId() ? typedText.getFont()->getStringWidth(typedText.getTextDirection(), typedText.getText()) : 0;
 8010bb6:	687b      	ldr	r3, [r7, #4]
 8010bb8:	3326      	adds	r3, #38	; 0x26
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f7fe fdea 	bl	800f794 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	2b00      	cmp	r3, #0
 8010bc4:	d01b      	beq.n	8010bfe <_ZNK8touchgfx8TextArea12getTextWidthEv+0x50>
 8010bc6:	687b      	ldr	r3, [r7, #4]
 8010bc8:	3326      	adds	r3, #38	; 0x26
 8010bca:	4618      	mov	r0, r3
 8010bcc:	f7fe fe0c 	bl	800f7e8 <_ZNK8touchgfx9TypedText7getFontEv>
 8010bd0:	4604      	mov	r4, r0
 8010bd2:	6823      	ldr	r3, [r4, #0]
 8010bd4:	331c      	adds	r3, #28
 8010bd6:	681d      	ldr	r5, [r3, #0]
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	3326      	adds	r3, #38	; 0x26
 8010bdc:	4618      	mov	r0, r3
 8010bde:	f7fe fe37 	bl	800f850 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8010be2:	4603      	mov	r3, r0
 8010be4:	461e      	mov	r6, r3
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	3326      	adds	r3, #38	; 0x26
 8010bea:	4618      	mov	r0, r3
 8010bec:	f7fe fde6 	bl	800f7bc <_ZNK8touchgfx9TypedText7getTextEv>
 8010bf0:	4603      	mov	r3, r0
 8010bf2:	461a      	mov	r2, r3
 8010bf4:	4631      	mov	r1, r6
 8010bf6:	4620      	mov	r0, r4
 8010bf8:	47a8      	blx	r5
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	e000      	b.n	8010c00 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x52>
 8010bfe:	2300      	movs	r3, #0
}
 8010c00:	4618      	mov	r0, r3
 8010c02:	370c      	adds	r7, #12
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010c08 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:

void TextArea::draw(const Rect& area) const
{
 8010c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c0a:	b093      	sub	sp, #76	; 0x4c
 8010c0c:	af06      	add	r7, sp, #24
 8010c0e:	60f8      	str	r0, [r7, #12]
 8010c10:	60b9      	str	r1, [r7, #8]
    if (typedText.hasValidId())
 8010c12:	68fb      	ldr	r3, [r7, #12]
 8010c14:	3326      	adds	r3, #38	; 0x26
 8010c16:	4618      	mov	r0, r3
 8010c18:	f7fe fdbc 	bl	800f794 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 8010c1c:	4603      	mov	r3, r0
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d04f      	beq.n	8010cc2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xba>
    {
        const Font* fontToDraw = typedText.getFont();
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	3326      	adds	r3, #38	; 0x26
 8010c26:	4618      	mov	r0, r3
 8010c28:	f7fe fdde 	bl	800f7e8 <_ZNK8touchgfx9TypedText7getFontEv>
 8010c2c:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (fontToDraw != 0)
 8010c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d046      	beq.n	8010cc2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xba>
        {
            LCD::StringVisuals visuals(fontToDraw, color, alpha, typedText.getAlignment(), linespace, rotation, typedText.getTextDirection(), indentation, wideTextAction);
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	f893 602e 	ldrb.w	r6, [r3, #46]	; 0x2e
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	3326      	adds	r3, #38	; 0x26
 8010c3e:	4618      	mov	r0, r3
 8010c40:	f7fe fdee 	bl	800f820 <_ZNK8touchgfx9TypedText12getAlignmentEv>
 8010c44:	4603      	mov	r3, r0
 8010c46:	607b      	str	r3, [r7, #4]
 8010c48:	68fb      	ldr	r3, [r7, #12]
 8010c4a:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
 8010c4c:	68fb      	ldr	r3, [r7, #12]
 8010c4e:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	3326      	adds	r3, #38	; 0x26
 8010c56:	4618      	mov	r0, r3
 8010c58:	f7fe fdfa 	bl	800f850 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	603b      	str	r3, [r7, #0]
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010c66:	68fa      	ldr	r2, [r7, #12]
 8010c68:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 8010c6c:	68fa      	ldr	r2, [r7, #12]
 8010c6e:	f107 0010 	add.w	r0, r7, #16
 8010c72:	9105      	str	r1, [sp, #20]
 8010c74:	9304      	str	r3, [sp, #16]
 8010c76:	6839      	ldr	r1, [r7, #0]
 8010c78:	9103      	str	r1, [sp, #12]
 8010c7a:	9502      	str	r5, [sp, #8]
 8010c7c:	9401      	str	r4, [sp, #4]
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	9300      	str	r3, [sp, #0]
 8010c82:	4633      	mov	r3, r6
 8010c84:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8010c86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010c88:	f7fe fd30 	bl	800f6ec <_ZN8touchgfx3LCD13StringVisualsC1EPKNS_4FontENS_9colortypeEhhtNS_12TextRotationEhhNS_14WideTextActionE>
            HAL::lcd().drawString(getAbsoluteRect(), area, visuals, typedText.getText());
 8010c8c:	f7fe fd22 	bl	800f6d4 <_ZN8touchgfx3HAL3lcdEv>
 8010c90:	4604      	mov	r4, r0
 8010c92:	68fa      	ldr	r2, [r7, #12]
 8010c94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010c98:	4611      	mov	r1, r2
 8010c9a:	4618      	mov	r0, r3
 8010c9c:	f00e faad 	bl	801f1fa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	3326      	adds	r3, #38	; 0x26
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f7fe fd89 	bl	800f7bc <_ZNK8touchgfx9TypedText7getTextEv>
 8010caa:	4603      	mov	r3, r0
 8010cac:	9301      	str	r3, [sp, #4]
 8010cae:	f107 0310 	add.w	r3, r7, #16
 8010cb2:	9300      	str	r3, [sp, #0]
 8010cb4:	68bb      	ldr	r3, [r7, #8]
 8010cb6:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010cba:	ca06      	ldmia	r2, {r1, r2}
 8010cbc:	4620      	mov	r0, r4
 8010cbe:	f00d f889 	bl	801ddd4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz>
        }
    }
}
 8010cc2:	bf00      	nop
 8010cc4:	3734      	adds	r7, #52	; 0x34
 8010cc6:	46bd      	mov	sp, r7
 8010cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010cca <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:

void TextArea::setTypedText(TypedText t)
{
 8010cca:	b580      	push	{r7, lr}
 8010ccc:	b082      	sub	sp, #8
 8010cce:	af00      	add	r7, sp, #0
 8010cd0:	6078      	str	r0, [r7, #4]
 8010cd2:	8039      	strh	r1, [r7, #0]
    typedText = t;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	883a      	ldrh	r2, [r7, #0]
 8010cd8:	84da      	strh	r2, [r3, #38]	; 0x26
    // If this TextArea does not yet have a width and height,
    // just assign the smallest possible size to fit current text.
    if ((getWidth() == 0) && (getHeight() == 0))
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	4618      	mov	r0, r3
 8010cde:	f7fe f972 	bl	800efc6 <_ZNK8touchgfx8Drawable8getWidthEv>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d108      	bne.n	8010cfa <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x30>
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	4618      	mov	r0, r3
 8010cec:	f7fe f978 	bl	800efe0 <_ZNK8touchgfx8Drawable9getHeightEv>
 8010cf0:	4603      	mov	r3, r0
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d101      	bne.n	8010cfa <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x30>
 8010cf6:	2301      	movs	r3, #1
 8010cf8:	e000      	b.n	8010cfc <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x32>
 8010cfa:	2300      	movs	r3, #0
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d002      	beq.n	8010d06 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x3c>
    {
        resizeToCurrentText();
 8010d00:	6878      	ldr	r0, [r7, #4]
 8010d02:	f000 f804 	bl	8010d0e <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    }
}
 8010d06:	bf00      	nop
 8010d08:	3708      	adds	r7, #8
 8010d0a:	46bd      	mov	sp, r7
 8010d0c:	bd80      	pop	{r7, pc}

08010d0e <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:

void TextArea::resizeToCurrentText()
{
 8010d0e:	b580      	push	{r7, lr}
 8010d10:	b084      	sub	sp, #16
 8010d12:	af00      	add	r7, sp, #0
 8010d14:	6078      	str	r0, [r7, #4]
    if (typedText.hasValidId())
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	3326      	adds	r3, #38	; 0x26
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7fe fd3a 	bl	800f794 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 8010d20:	4603      	mov	r3, r0
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d03e      	beq.n	8010da4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x96>
    {
        uint16_t w = getTextWidth();
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	3370      	adds	r3, #112	; 0x70
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	6878      	ldr	r0, [r7, #4]
 8010d30:	4798      	blx	r3
 8010d32:	4603      	mov	r3, r0
 8010d34:	81fb      	strh	r3, [r7, #14]
        uint16_t h = getTextHeight();
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	681b      	ldr	r3, [r3, #0]
 8010d3a:	336c      	adds	r3, #108	; 0x6c
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	6878      	ldr	r0, [r7, #4]
 8010d40:	4798      	blx	r3
 8010d42:	4603      	mov	r3, r0
 8010d44:	81bb      	strh	r3, [r7, #12]
        if (rotation == TEXT_ROTATE_0 || rotation == TEXT_ROTATE_180)
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d004      	beq.n	8010d5a <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x4c>
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010d56:	2b02      	cmp	r3, #2
 8010d58:	d112      	bne.n	8010d80 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x72>
        {
            setWidth(w);
 8010d5a:	687a      	ldr	r2, [r7, #4]
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	3338      	adds	r3, #56	; 0x38
 8010d62:	681b      	ldr	r3, [r3, #0]
 8010d64:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8010d68:	4610      	mov	r0, r2
 8010d6a:	4798      	blx	r3
            setHeight(h);
 8010d6c:	687a      	ldr	r2, [r7, #4]
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	333c      	adds	r3, #60	; 0x3c
 8010d74:	681b      	ldr	r3, [r3, #0]
 8010d76:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8010d7a:	4610      	mov	r0, r2
 8010d7c:	4798      	blx	r3
        {
            setWidth(h);
            setHeight(w);
        }
    }
}
 8010d7e:	e011      	b.n	8010da4 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x96>
            setWidth(h);
 8010d80:	687a      	ldr	r2, [r7, #4]
 8010d82:	687b      	ldr	r3, [r7, #4]
 8010d84:	681b      	ldr	r3, [r3, #0]
 8010d86:	3338      	adds	r3, #56	; 0x38
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8010d8e:	4610      	mov	r0, r2
 8010d90:	4798      	blx	r3
            setHeight(w);
 8010d92:	687a      	ldr	r2, [r7, #4]
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	681b      	ldr	r3, [r3, #0]
 8010d98:	333c      	adds	r3, #60	; 0x3c
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8010da0:	4610      	mov	r0, r2
 8010da2:	4798      	blx	r3
}
 8010da4:	bf00      	nop
 8010da6:	3710      	adds	r7, #16
 8010da8:	46bd      	mov	sp, r7
 8010daa:	bd80      	pop	{r7, pc}

08010dac <_ZNK8touchgfx8TextArea21getTextHeightInternalEPKtz>:
        }
    }
}

int16_t TextArea::getTextHeightInternal(const Unicode::UnicodeChar* format, ...) const
{
 8010dac:	b40e      	push	{r1, r2, r3}
 8010dae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010db0:	b08e      	sub	sp, #56	; 0x38
 8010db2:	af02      	add	r7, sp, #8
 8010db4:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, format);
 8010db6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010dba:	623b      	str	r3, [r7, #32]
    TextProvider textProvider;
 8010dbc:	f107 0308 	add.w	r3, r7, #8
 8010dc0:	4618      	mov	r0, r3
 8010dc2:	f00e fee5 	bl	801fb90 <_ZN8touchgfx12TextProviderC1Ev>
    textProvider.initialize(format, pArg);
 8010dc6:	f107 0308 	add.w	r3, r7, #8
 8010dca:	6a3a      	ldr	r2, [r7, #32]
 8010dcc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f00e fee7 	bl	801fba2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>

    int16_t numLines = HAL::lcd().getNumLines(textProvider, wideTextAction, typedText.getTextDirection(), typedText.getFont(), getWidth());
 8010dd4:	f7fe fc7e 	bl	800f6d4 <_ZN8touchgfx3HAL3lcdEv>
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	3326      	adds	r3, #38	; 0x26
 8010de2:	4618      	mov	r0, r3
 8010de4:	f7fe fd34 	bl	800f850 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8010de8:	4603      	mov	r3, r0
 8010dea:	461e      	mov	r6, r3
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	3326      	adds	r3, #38	; 0x26
 8010df0:	4618      	mov	r0, r3
 8010df2:	f7fe fcf9 	bl	800f7e8 <_ZNK8touchgfx9TypedText7getFontEv>
 8010df6:	4605      	mov	r5, r0
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f7fe f8e3 	bl	800efc6 <_ZNK8touchgfx8Drawable8getWidthEv>
 8010e00:	4603      	mov	r3, r0
 8010e02:	f107 0008 	add.w	r0, r7, #8
 8010e06:	9300      	str	r3, [sp, #0]
 8010e08:	462b      	mov	r3, r5
 8010e0a:	4632      	mov	r2, r6
 8010e0c:	4621      	mov	r1, r4
 8010e0e:	f00d fa06 	bl	801e21e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8010e12:	4603      	mov	r3, r0
 8010e14:	85fb      	strh	r3, [r7, #46]	; 0x2e

    const Font* fontToDraw = typedText.getFont();
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	3326      	adds	r3, #38	; 0x26
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f7fe fce4 	bl	800f7e8 <_ZNK8touchgfx9TypedText7getFontEv>
 8010e20:	62b8      	str	r0, [r7, #40]	; 0x28
    int16_t textHeight = fontToDraw->getMinimumTextHeight();
 8010e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e24:	681b      	ldr	r3, [r3, #0]
 8010e26:	3330      	adds	r3, #48	; 0x30
 8010e28:	681b      	ldr	r3, [r3, #0]
 8010e2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e2c:	4798      	blx	r3
 8010e2e:	4603      	mov	r3, r0
 8010e30:	84fb      	strh	r3, [r7, #38]	; 0x26

    va_end(pArg);
    return numLines * textHeight + (numLines - 1) * linespace;
 8010e32:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010e34:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010e36:	fb12 f303 	smulbb	r3, r2, r3
 8010e3a:	b29a      	uxth	r2, r3
 8010e3c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8010e40:	3b01      	subs	r3, #1
 8010e42:	b299      	uxth	r1, r3
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010e48:	fb11 f303 	smulbb	r3, r1, r3
 8010e4c:	b29b      	uxth	r3, r3
 8010e4e:	4413      	add	r3, r2
 8010e50:	b29b      	uxth	r3, r3
 8010e52:	b21b      	sxth	r3, r3
}
 8010e54:	4618      	mov	r0, r3
 8010e56:	3730      	adds	r7, #48	; 0x30
 8010e58:	46bd      	mov	sp, r7
 8010e5a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010e5e:	b003      	add	sp, #12
 8010e60:	4770      	bx	lr

08010e62 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz>:
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

namespace touchgfx
{
int16_t TextAreaWithWildcardBase::calculateTextHeight(const Unicode::UnicodeChar* format, ...) const
{
 8010e62:	b40e      	push	{r1, r2, r3}
 8010e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e66:	b08e      	sub	sp, #56	; 0x38
 8010e68:	af02      	add	r7, sp, #8
 8010e6a:	6078      	str	r0, [r7, #4]
    if (!typedText.hasValidId())
 8010e6c:	687b      	ldr	r3, [r7, #4]
 8010e6e:	3326      	adds	r3, #38	; 0x26
 8010e70:	4618      	mov	r0, r3
 8010e72:	f7fe fc8f 	bl	800f794 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 8010e76:	4603      	mov	r3, r0
 8010e78:	f083 0301 	eor.w	r3, r3, #1
 8010e7c:	b2db      	uxtb	r3, r3
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d001      	beq.n	8010e86 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x24>
    {
        return 0;
 8010e82:	2300      	movs	r3, #0
 8010e84:	e04e      	b.n	8010f24 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0xc2>
    }

    va_list pArg;
    va_start(pArg, format);
 8010e86:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010e8a:	623b      	str	r3, [r7, #32]

    TextProvider textProvider;
 8010e8c:	f107 0308 	add.w	r3, r7, #8
 8010e90:	4618      	mov	r0, r3
 8010e92:	f00e fe7d 	bl	801fb90 <_ZN8touchgfx12TextProviderC1Ev>
    textProvider.initialize(format, pArg);
 8010e96:	f107 0308 	add.w	r3, r7, #8
 8010e9a:	6a3a      	ldr	r2, [r7, #32]
 8010e9c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	f00e fe7f 	bl	801fba2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>

    int16_t numLines = HAL::lcd().getNumLines(textProvider, wideTextAction, typedText.getTextDirection(), typedText.getFont(), getWidth());
 8010ea4:	f7fe fc16 	bl	800f6d4 <_ZN8touchgfx3HAL3lcdEv>
 8010ea8:	687b      	ldr	r3, [r7, #4]
 8010eaa:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	3326      	adds	r3, #38	; 0x26
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	f7fe fccc 	bl	800f850 <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	461e      	mov	r6, r3
 8010ebc:	687b      	ldr	r3, [r7, #4]
 8010ebe:	3326      	adds	r3, #38	; 0x26
 8010ec0:	4618      	mov	r0, r3
 8010ec2:	f7fe fc91 	bl	800f7e8 <_ZNK8touchgfx9TypedText7getFontEv>
 8010ec6:	4605      	mov	r5, r0
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f7fe f87b 	bl	800efc6 <_ZNK8touchgfx8Drawable8getWidthEv>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	f107 0008 	add.w	r0, r7, #8
 8010ed6:	9300      	str	r3, [sp, #0]
 8010ed8:	462b      	mov	r3, r5
 8010eda:	4632      	mov	r2, r6
 8010edc:	4621      	mov	r1, r4
 8010ede:	f00d f99e 	bl	801e21e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8010ee2:	4603      	mov	r3, r0
 8010ee4:	85fb      	strh	r3, [r7, #46]	; 0x2e

    const Font* fontToDraw = typedText.getFont();
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	3326      	adds	r3, #38	; 0x26
 8010eea:	4618      	mov	r0, r3
 8010eec:	f7fe fc7c 	bl	800f7e8 <_ZNK8touchgfx9TypedText7getFontEv>
 8010ef0:	62b8      	str	r0, [r7, #40]	; 0x28
    int16_t textHeight = fontToDraw->getMinimumTextHeight();
 8010ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	3330      	adds	r3, #48	; 0x30
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010efc:	4798      	blx	r3
 8010efe:	4603      	mov	r3, r0
 8010f00:	84fb      	strh	r3, [r7, #38]	; 0x26

    va_end(pArg);
    return numLines * textHeight + (numLines - 1) * linespace;
 8010f02:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010f04:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010f06:	fb12 f303 	smulbb	r3, r2, r3
 8010f0a:	b29a      	uxth	r2, r3
 8010f0c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8010f10:	3b01      	subs	r3, #1
 8010f12:	b299      	uxth	r1, r3
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010f18:	fb11 f303 	smulbb	r3, r1, r3
 8010f1c:	b29b      	uxth	r3, r3
 8010f1e:	4413      	add	r3, r2
 8010f20:	b29b      	uxth	r3, r3
 8010f22:	b21b      	sxth	r3, r3
}
 8010f24:	4618      	mov	r0, r3
 8010f26:	3730      	adds	r7, #48	; 0x30
 8010f28:	46bd      	mov	sp, r7
 8010f2a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010f2e:	b003      	add	sp, #12
 8010f30:	4770      	bx	lr

08010f32 <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 8010f32:	b480      	push	{r7}
 8010f34:	b083      	sub	sp, #12
 8010f36:	af00      	add	r7, sp, #0
 8010f38:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	b29b      	uxth	r3, r3
    }
 8010f40:	4618      	mov	r0, r3
 8010f42:	370c      	adds	r7, #12
 8010f44:	46bd      	mov	sp, r7
 8010f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4a:	4770      	bx	lr

08010f4c <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 8010f4c:	b480      	push	{r7}
 8010f4e:	b083      	sub	sp, #12
 8010f50:	af00      	add	r7, sp, #0
 8010f52:	6078      	str	r0, [r7, #4]
        return color;
 8010f54:	687b      	ldr	r3, [r7, #4]
 8010f56:	681b      	ldr	r3, [r3, #0]
    }
 8010f58:	4618      	mov	r0, r3
 8010f5a:	370c      	adds	r7, #12
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f62:	4770      	bx	lr

08010f64 <_ZN8touchgfx10OSWrappers10initializeEv>:

// Just a dummy value to insert in the VSYNC queue.
static uint32_t dummy = 0x5a;

void OSWrappers::initialize()
{
 8010f64:	b580      	push	{r7, lr}
 8010f66:	b084      	sub	sp, #16
 8010f68:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    osSemaphoreDef(frame_buffer_sem);
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	60fb      	str	r3, [r7, #12]
    frame_buffer_sem = osSemaphoreCreate(osSemaphore(frame_buffer_sem), 1); // Binary semaphore
 8010f6e:	f107 030c 	add.w	r3, r7, #12
 8010f72:	2101      	movs	r1, #1
 8010f74:	4618      	mov	r0, r3
 8010f76:	f000 f9dc 	bl	8011332 <osSemaphoreCreate>
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	4a0d      	ldr	r2, [pc, #52]	; (8010fb4 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8010f7e:	6013      	str	r3, [r2, #0]
    osSemaphoreWait(frame_buffer_sem, osWaitForever); // take the lock
 8010f80:	4b0c      	ldr	r3, [pc, #48]	; (8010fb4 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	f04f 31ff 	mov.w	r1, #4294967295
 8010f88:	4618      	mov	r0, r3
 8010f8a:	f000 f9f7 	bl	801137c <osSemaphoreWait>

    // Create a queue of length 1
    osMessageQDef(vsync_queue, 1, uint32_t);
 8010f8e:	4a0a      	ldr	r2, [pc, #40]	; (8010fb8 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8010f90:	1d3b      	adds	r3, r7, #4
 8010f92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f96:	e883 0003 	stmia.w	r3, {r0, r1}
    vsync_queue = osMessageCreate(osMessageQ(vsync_queue),NULL);
 8010f9a:	1d3b      	adds	r3, r7, #4
 8010f9c:	2100      	movs	r1, #0
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	f000 fa70 	bl	8011484 <osMessageCreate>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	4a05      	ldr	r2, [pc, #20]	; (8010fbc <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8010fa8:	6013      	str	r3, [r2, #0]
}
 8010faa:	bf00      	nop
 8010fac:	3710      	adds	r7, #16
 8010fae:	46bd      	mov	sp, r7
 8010fb0:	bd80      	pop	{r7, pc}
 8010fb2:	bf00      	nop
 8010fb4:	20000138 	.word	0x20000138
 8010fb8:	08023c94 	.word	0x08023c94
 8010fbc:	2000013c 	.word	0x2000013c

08010fc0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

void OSWrappers::takeFrameBufferSemaphore()
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 8010fc4:	4b09      	ldr	r3, [pc, #36]	; (8010fec <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x2c>)
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	2b00      	cmp	r3, #0
 8010fca:	d105      	bne.n	8010fd8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>
 8010fcc:	4b08      	ldr	r3, [pc, #32]	; (8010ff0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x30>)
 8010fce:	4a09      	ldr	r2, [pc, #36]	; (8010ff4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x34>)
 8010fd0:	211f      	movs	r1, #31
 8010fd2:	4809      	ldr	r0, [pc, #36]	; (8010ff8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x38>)
 8010fd4:	f011 fb08 	bl	80225e8 <__assert_func>
    osSemaphoreWait(frame_buffer_sem, osWaitForever);
 8010fd8:	4b04      	ldr	r3, [pc, #16]	; (8010fec <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x2c>)
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8010fe0:	4618      	mov	r0, r3
 8010fe2:	f000 f9cb 	bl	801137c <osSemaphoreWait>
}
 8010fe6:	bf00      	nop
 8010fe8:	bd80      	pop	{r7, pc}
 8010fea:	bf00      	nop
 8010fec:	20000138 	.word	0x20000138
 8010ff0:	08023c9c 	.word	0x08023c9c
 8010ff4:	08023cb0 	.word	0x08023cb0
 8010ff8:	08023cf0 	.word	0x08023cf0

08010ffc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

void OSWrappers::giveFrameBufferSemaphore()
{
 8010ffc:	b580      	push	{r7, lr}
 8010ffe:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 8011000:	4b08      	ldr	r3, [pc, #32]	; (8011024 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x28>)
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	2b00      	cmp	r3, #0
 8011006:	d105      	bne.n	8011014 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>
 8011008:	4b07      	ldr	r3, [pc, #28]	; (8011028 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x2c>)
 801100a:	4a08      	ldr	r2, [pc, #32]	; (801102c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x30>)
 801100c:	2125      	movs	r1, #37	; 0x25
 801100e:	4808      	ldr	r0, [pc, #32]	; (8011030 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x34>)
 8011010:	f011 faea 	bl	80225e8 <__assert_func>
    osSemaphoreRelease(frame_buffer_sem);
 8011014:	4b03      	ldr	r3, [pc, #12]	; (8011024 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x28>)
 8011016:	681b      	ldr	r3, [r3, #0]
 8011018:	4618      	mov	r0, r3
 801101a:	f000 f9fd 	bl	8011418 <osSemaphoreRelease>
}
 801101e:	bf00      	nop
 8011020:	bd80      	pop	{r7, pc}
 8011022:	bf00      	nop
 8011024:	20000138 	.word	0x20000138
 8011028:	08023c9c 	.word	0x08023c9c
 801102c:	08023d2c 	.word	0x08023d2c
 8011030:	08023cf0 	.word	0x08023cf0

08011034 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:

void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8011034:	b580      	push	{r7, lr}
 8011036:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 8011038:	4b08      	ldr	r3, [pc, #32]	; (801105c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x28>)
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d105      	bne.n	801104c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x18>
 8011040:	4b07      	ldr	r3, [pc, #28]	; (8011060 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x2c>)
 8011042:	4a08      	ldr	r2, [pc, #32]	; (8011064 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x30>)
 8011044:	212b      	movs	r1, #43	; 0x2b
 8011046:	4808      	ldr	r0, [pc, #32]	; (8011068 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x34>)
 8011048:	f011 face 	bl	80225e8 <__assert_func>
    osSemaphoreWait(frame_buffer_sem, 0);
 801104c:	4b03      	ldr	r3, [pc, #12]	; (801105c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x28>)
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	2100      	movs	r1, #0
 8011052:	4618      	mov	r0, r3
 8011054:	f000 f992 	bl	801137c <osSemaphoreWait>
}
 8011058:	bf00      	nop
 801105a:	bd80      	pop	{r7, pc}
 801105c:	20000138 	.word	0x20000138
 8011060:	08023c9c 	.word	0x08023c9c
 8011064:	08023d6c 	.word	0x08023d6c
 8011068:	08023cf0 	.word	0x08023cf0

0801106c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:

void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 801106c:	b580      	push	{r7, lr}
 801106e:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 8011070:	4b08      	ldr	r3, [pc, #32]	; (8011094 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>)
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d105      	bne.n	8011084 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x18>
 8011078:	4b07      	ldr	r3, [pc, #28]	; (8011098 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2c>)
 801107a:	4a08      	ldr	r2, [pc, #32]	; (801109c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x30>)
 801107c:	2131      	movs	r1, #49	; 0x31
 801107e:	4808      	ldr	r0, [pc, #32]	; (80110a0 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x34>)
 8011080:	f011 fab2 	bl	80225e8 <__assert_func>
    osSemaphoreRelease(frame_buffer_sem);
 8011084:	4b03      	ldr	r3, [pc, #12]	; (8011094 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>)
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	4618      	mov	r0, r3
 801108a:	f000 f9c5 	bl	8011418 <osSemaphoreRelease>
}
 801108e:	bf00      	nop
 8011090:	bd80      	pop	{r7, pc}
 8011092:	bf00      	nop
 8011094:	20000138 	.word	0x20000138
 8011098:	08023c9c 	.word	0x08023c9c
 801109c:	08023dac 	.word	0x08023dac
 80110a0:	08023cf0 	.word	0x08023cf0

080110a4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:

void OSWrappers::signalVSync()
{
 80110a4:	b580      	push	{r7, lr}
 80110a6:	af00      	add	r7, sp, #0
    if (vsync_queue)
 80110a8:	4b06      	ldr	r3, [pc, #24]	; (80110c4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x20>)
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d007      	beq.n	80110c0 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>
    {
        osMessagePut(vsync_queue, dummy, 0);
 80110b0:	4b04      	ldr	r3, [pc, #16]	; (80110c4 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x20>)
 80110b2:	681b      	ldr	r3, [r3, #0]
 80110b4:	4a04      	ldr	r2, [pc, #16]	; (80110c8 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x24>)
 80110b6:	6811      	ldr	r1, [r2, #0]
 80110b8:	2200      	movs	r2, #0
 80110ba:	4618      	mov	r0, r3
 80110bc:	f000 f9f4 	bl	80114a8 <osMessagePut>
    }
}
 80110c0:	bf00      	nop
 80110c2:	bd80      	pop	{r7, pc}
 80110c4:	2000013c 	.word	0x2000013c
 80110c8:	2000004c 	.word	0x2000004c

080110cc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:

void OSWrappers::waitForVSync()
{
 80110cc:	b580      	push	{r7, lr}
 80110ce:	b086      	sub	sp, #24
 80110d0:	af00      	add	r7, sp, #0
    if (vsync_queue)
 80110d2:	4b0c      	ldr	r3, [pc, #48]	; (8011104 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x38>)
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d00f      	beq.n	80110fa <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2e>
    {
        // First make sure the queue is empty, by trying to remove an element with 0 timeout.
        osMessageGet(vsync_queue, 0);
 80110da:	4b0a      	ldr	r3, [pc, #40]	; (8011104 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x38>)
 80110dc:	6819      	ldr	r1, [r3, #0]
 80110de:	463b      	mov	r3, r7
 80110e0:	2200      	movs	r2, #0
 80110e2:	4618      	mov	r0, r3
 80110e4:	f000 fa20 	bl	8011528 <osMessageGet>

        // Then, wait for next VSYNC to occur.
        osMessageGet(vsync_queue, osWaitForever);
 80110e8:	4b06      	ldr	r3, [pc, #24]	; (8011104 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x38>)
 80110ea:	6819      	ldr	r1, [r3, #0]
 80110ec:	f107 030c 	add.w	r3, r7, #12
 80110f0:	f04f 32ff 	mov.w	r2, #4294967295
 80110f4:	4618      	mov	r0, r3
 80110f6:	f000 fa17 	bl	8011528 <osMessageGet>
    }
}
 80110fa:	bf00      	nop
 80110fc:	3718      	adds	r7, #24
 80110fe:	46bd      	mov	sp, r7
 8011100:	bd80      	pop	{r7, pc}
 8011102:	bf00      	nop
 8011104:	2000013c 	.word	0x2000013c

08011108 <_ZL12IdleTaskHookPv>:
// to inform TouchGFX of when the idle task is switched in/out and call the
// setMCUActive function accordingly (see below).

//FreeRTOS hook function being called when idle task is switched in or out.
static portBASE_TYPE IdleTaskHook(void* p)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b082      	sub	sp, #8
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
    if ((int)p) //idle task sched out
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	2b00      	cmp	r3, #0
 8011114:	d007      	beq.n	8011126 <_ZL12IdleTaskHookPv+0x1e>
    {
        touchgfx::HAL::getInstance()->setMCUActive(true);
 8011116:	f7fe f9d3 	bl	800f4c0 <_ZN8touchgfx3HAL11getInstanceEv>
 801111a:	4603      	mov	r3, r0
 801111c:	2101      	movs	r1, #1
 801111e:	4618      	mov	r0, r3
 8011120:	f00c fc7c 	bl	801da1c <_ZN8touchgfx3HAL12setMCUActiveEb>
 8011124:	e006      	b.n	8011134 <_ZL12IdleTaskHookPv+0x2c>
    }
    else //idle task sched in
    {
        touchgfx::HAL::getInstance()->setMCUActive(false);
 8011126:	f7fe f9cb 	bl	800f4c0 <_ZN8touchgfx3HAL11getInstanceEv>
 801112a:	4603      	mov	r3, r0
 801112c:	2100      	movs	r1, #0
 801112e:	4618      	mov	r0, r3
 8011130:	f00c fc74 	bl	801da1c <_ZN8touchgfx3HAL12setMCUActiveEb>
    }
    return pdTRUE;
 8011134:	2301      	movs	r3, #1
}
 8011136:	4618      	mov	r0, r3
 8011138:	3708      	adds	r7, #8
 801113a:	46bd      	mov	sp, r7
 801113c:	bd80      	pop	{r7, pc}

0801113e <vApplicationStackOverflowHook>:

extern "C"
{
    void vApplicationStackOverflowHook(xTaskHandle xTask,
                                       signed portCHAR* pcTaskName)
    {
 801113e:	b480      	push	{r7}
 8011140:	b083      	sub	sp, #12
 8011142:	af00      	add	r7, sp, #0
 8011144:	6078      	str	r0, [r7, #4]
 8011146:	6039      	str	r1, [r7, #0]
        while (1);
 8011148:	e7fe      	b.n	8011148 <vApplicationStackOverflowHook+0xa>

0801114a <vApplicationMallocFailedHook>:
    }

    void vApplicationMallocFailedHook(xTaskHandle xTask,
                                      signed portCHAR* pcTaskName)
    {
 801114a:	b480      	push	{r7}
 801114c:	b083      	sub	sp, #12
 801114e:	af00      	add	r7, sp, #0
 8011150:	6078      	str	r0, [r7, #4]
 8011152:	6039      	str	r1, [r7, #0]
        while (1);
 8011154:	e7fe      	b.n	8011154 <vApplicationMallocFailedHook+0xa>
	...

08011158 <vApplicationIdleHook>:
    }

    void vApplicationIdleHook(void)
    {
 8011158:	b580      	push	{r7, lr}
 801115a:	af00      	add	r7, sp, #0
        // Set task tag in order to have the "IdleTaskHook" function called when the idle task is
        // switched in/out. Used solely for measuring MCU load, and can be removed if MCU load
        // readout is not needed.
        vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 801115c:	4902      	ldr	r1, [pc, #8]	; (8011168 <vApplicationIdleHook+0x10>)
 801115e:	2000      	movs	r0, #0
 8011160:	f001 fd32 	bl	8012bc8 <vTaskSetApplicationTaskTag>
    }
 8011164:	bf00      	nop
 8011166:	bd80      	pop	{r7, pc}
 8011168:	08011109 	.word	0x08011109

0801116c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 801116c:	b480      	push	{r7}
 801116e:	b087      	sub	sp, #28
 8011170:	af00      	add	r7, sp, #0
 8011172:	60f8      	str	r0, [r7, #12]
 8011174:	60b9      	str	r1, [r7, #8]
 8011176:	4613      	mov	r3, r2
 8011178:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801117a:	2301      	movs	r3, #1
 801117c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801117e:	2300      	movs	r3, #0
 8011180:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011182:	4b1f      	ldr	r3, [pc, #124]	; (8011200 <FATFS_LinkDriverEx+0x94>)
 8011184:	7a5b      	ldrb	r3, [r3, #9]
 8011186:	b2db      	uxtb	r3, r3
 8011188:	2b00      	cmp	r3, #0
 801118a:	d131      	bne.n	80111f0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 801118c:	4b1c      	ldr	r3, [pc, #112]	; (8011200 <FATFS_LinkDriverEx+0x94>)
 801118e:	7a5b      	ldrb	r3, [r3, #9]
 8011190:	b2db      	uxtb	r3, r3
 8011192:	461a      	mov	r2, r3
 8011194:	4b1a      	ldr	r3, [pc, #104]	; (8011200 <FATFS_LinkDriverEx+0x94>)
 8011196:	2100      	movs	r1, #0
 8011198:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801119a:	4b19      	ldr	r3, [pc, #100]	; (8011200 <FATFS_LinkDriverEx+0x94>)
 801119c:	7a5b      	ldrb	r3, [r3, #9]
 801119e:	b2db      	uxtb	r3, r3
 80111a0:	4a17      	ldr	r2, [pc, #92]	; (8011200 <FATFS_LinkDriverEx+0x94>)
 80111a2:	009b      	lsls	r3, r3, #2
 80111a4:	4413      	add	r3, r2
 80111a6:	68fa      	ldr	r2, [r7, #12]
 80111a8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80111aa:	4b15      	ldr	r3, [pc, #84]	; (8011200 <FATFS_LinkDriverEx+0x94>)
 80111ac:	7a5b      	ldrb	r3, [r3, #9]
 80111ae:	b2db      	uxtb	r3, r3
 80111b0:	461a      	mov	r2, r3
 80111b2:	4b13      	ldr	r3, [pc, #76]	; (8011200 <FATFS_LinkDriverEx+0x94>)
 80111b4:	4413      	add	r3, r2
 80111b6:	79fa      	ldrb	r2, [r7, #7]
 80111b8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80111ba:	4b11      	ldr	r3, [pc, #68]	; (8011200 <FATFS_LinkDriverEx+0x94>)
 80111bc:	7a5b      	ldrb	r3, [r3, #9]
 80111be:	b2db      	uxtb	r3, r3
 80111c0:	1c5a      	adds	r2, r3, #1
 80111c2:	b2d1      	uxtb	r1, r2
 80111c4:	4a0e      	ldr	r2, [pc, #56]	; (8011200 <FATFS_LinkDriverEx+0x94>)
 80111c6:	7251      	strb	r1, [r2, #9]
 80111c8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80111ca:	7dbb      	ldrb	r3, [r7, #22]
 80111cc:	3330      	adds	r3, #48	; 0x30
 80111ce:	b2da      	uxtb	r2, r3
 80111d0:	68bb      	ldr	r3, [r7, #8]
 80111d2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80111d4:	68bb      	ldr	r3, [r7, #8]
 80111d6:	3301      	adds	r3, #1
 80111d8:	223a      	movs	r2, #58	; 0x3a
 80111da:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80111dc:	68bb      	ldr	r3, [r7, #8]
 80111de:	3302      	adds	r3, #2
 80111e0:	222f      	movs	r2, #47	; 0x2f
 80111e2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80111e4:	68bb      	ldr	r3, [r7, #8]
 80111e6:	3303      	adds	r3, #3
 80111e8:	2200      	movs	r2, #0
 80111ea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80111ec:	2300      	movs	r3, #0
 80111ee:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80111f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80111f2:	4618      	mov	r0, r3
 80111f4:	371c      	adds	r7, #28
 80111f6:	46bd      	mov	sp, r7
 80111f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fc:	4770      	bx	lr
 80111fe:	bf00      	nop
 8011200:	20000140 	.word	0x20000140

08011204 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b082      	sub	sp, #8
 8011208:	af00      	add	r7, sp, #0
 801120a:	6078      	str	r0, [r7, #4]
 801120c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801120e:	2200      	movs	r2, #0
 8011210:	6839      	ldr	r1, [r7, #0]
 8011212:	6878      	ldr	r0, [r7, #4]
 8011214:	f7ff ffaa 	bl	801116c <FATFS_LinkDriverEx>
 8011218:	4603      	mov	r3, r0
}
 801121a:	4618      	mov	r0, r3
 801121c:	3708      	adds	r7, #8
 801121e:	46bd      	mov	sp, r7
 8011220:	bd80      	pop	{r7, pc}

08011222 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011222:	b480      	push	{r7}
 8011224:	b085      	sub	sp, #20
 8011226:	af00      	add	r7, sp, #0
 8011228:	4603      	mov	r3, r0
 801122a:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801122c:	2300      	movs	r3, #0
 801122e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011230:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011234:	2b84      	cmp	r3, #132	; 0x84
 8011236:	d005      	beq.n	8011244 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011238:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801123c:	68fb      	ldr	r3, [r7, #12]
 801123e:	4413      	add	r3, r2
 8011240:	3303      	adds	r3, #3
 8011242:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011244:	68fb      	ldr	r3, [r7, #12]
}
 8011246:	4618      	mov	r0, r3
 8011248:	3714      	adds	r7, #20
 801124a:	46bd      	mov	sp, r7
 801124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011250:	4770      	bx	lr

08011252 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011252:	b480      	push	{r7}
 8011254:	b083      	sub	sp, #12
 8011256:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011258:	f3ef 8305 	mrs	r3, IPSR
 801125c:	607b      	str	r3, [r7, #4]
  return(result);
 801125e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011260:	2b00      	cmp	r3, #0
 8011262:	bf14      	ite	ne
 8011264:	2301      	movne	r3, #1
 8011266:	2300      	moveq	r3, #0
 8011268:	b2db      	uxtb	r3, r3
}
 801126a:	4618      	mov	r0, r3
 801126c:	370c      	adds	r7, #12
 801126e:	46bd      	mov	sp, r7
 8011270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011274:	4770      	bx	lr

08011276 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011276:	b580      	push	{r7, lr}
 8011278:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801127a:	f001 facb 	bl	8012814 <vTaskStartScheduler>
  
  return osOK;
 801127e:	2300      	movs	r3, #0
}
 8011280:	4618      	mov	r0, r3
 8011282:	bd80      	pop	{r7, pc}

08011284 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8011284:	b580      	push	{r7, lr}
 8011286:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8011288:	f001 ff3a 	bl	8013100 <xTaskGetSchedulerState>
 801128c:	4603      	mov	r3, r0
 801128e:	2b01      	cmp	r3, #1
 8011290:	d101      	bne.n	8011296 <osKernelRunning+0x12>
    return 0;
 8011292:	2300      	movs	r3, #0
 8011294:	e000      	b.n	8011298 <osKernelRunning+0x14>
  else
    return 1;
 8011296:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8011298:	4618      	mov	r0, r3
 801129a:	bd80      	pop	{r7, pc}

0801129c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 801129c:	b580      	push	{r7, lr}
 801129e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80112a0:	f7ff ffd7 	bl	8011252 <inHandlerMode>
 80112a4:	4603      	mov	r3, r0
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d003      	beq.n	80112b2 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80112aa:	f001 fbbb 	bl	8012a24 <xTaskGetTickCountFromISR>
 80112ae:	4603      	mov	r3, r0
 80112b0:	e002      	b.n	80112b8 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80112b2:	f001 fba7 	bl	8012a04 <xTaskGetTickCount>
 80112b6:	4603      	mov	r3, r0
  }
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	bd80      	pop	{r7, pc}

080112bc <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80112bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112be:	b087      	sub	sp, #28
 80112c0:	af02      	add	r7, sp, #8
 80112c2:	6078      	str	r0, [r7, #4]
 80112c4:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80112c6:	687b      	ldr	r3, [r7, #4]
 80112c8:	685c      	ldr	r4, [r3, #4]
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80112d2:	b29e      	uxth	r6, r3
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80112da:	4618      	mov	r0, r3
 80112dc:	f7ff ffa1 	bl	8011222 <makeFreeRtosPriority>
 80112e0:	4602      	mov	r2, r0
 80112e2:	f107 030c 	add.w	r3, r7, #12
 80112e6:	9301      	str	r3, [sp, #4]
 80112e8:	9200      	str	r2, [sp, #0]
 80112ea:	683b      	ldr	r3, [r7, #0]
 80112ec:	4632      	mov	r2, r6
 80112ee:	4629      	mov	r1, r5
 80112f0:	4620      	mov	r0, r4
 80112f2:	f001 f921 	bl	8012538 <xTaskCreate>
 80112f6:	4603      	mov	r3, r0
 80112f8:	2b01      	cmp	r3, #1
 80112fa:	d001      	beq.n	8011300 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80112fc:	2300      	movs	r3, #0
 80112fe:	e000      	b.n	8011302 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8011300:	68fb      	ldr	r3, [r7, #12]
}
 8011302:	4618      	mov	r0, r3
 8011304:	3714      	adds	r7, #20
 8011306:	46bd      	mov	sp, r7
 8011308:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801130a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801130a:	b580      	push	{r7, lr}
 801130c:	b084      	sub	sp, #16
 801130e:	af00      	add	r7, sp, #0
 8011310:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011316:	68fb      	ldr	r3, [r7, #12]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d001      	beq.n	8011320 <osDelay+0x16>
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	e000      	b.n	8011322 <osDelay+0x18>
 8011320:	2301      	movs	r3, #1
 8011322:	4618      	mov	r0, r3
 8011324:	f001 fa40 	bl	80127a8 <vTaskDelay>
  
  return osOK;
 8011328:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801132a:	4618      	mov	r0, r3
 801132c:	3710      	adds	r7, #16
 801132e:	46bd      	mov	sp, r7
 8011330:	bd80      	pop	{r7, pc}

08011332 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8011332:	b580      	push	{r7, lr}
 8011334:	b084      	sub	sp, #16
 8011336:	af00      	add	r7, sp, #0
 8011338:	6078      	str	r0, [r7, #4]
 801133a:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 801133c:	683b      	ldr	r3, [r7, #0]
 801133e:	2b01      	cmp	r3, #1
 8011340:	d110      	bne.n	8011364 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 8011342:	2203      	movs	r2, #3
 8011344:	2100      	movs	r1, #0
 8011346:	2001      	movs	r0, #1
 8011348:	f000 fa80 	bl	801184c <xQueueGenericCreate>
 801134c:	60f8      	str	r0, [r7, #12]
 801134e:	68fb      	ldr	r3, [r7, #12]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d005      	beq.n	8011360 <osSemaphoreCreate+0x2e>
 8011354:	2300      	movs	r3, #0
 8011356:	2200      	movs	r2, #0
 8011358:	2100      	movs	r1, #0
 801135a:	68f8      	ldr	r0, [r7, #12]
 801135c:	f000 fb08 	bl	8011970 <xQueueGenericSend>
    return sema;
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	e006      	b.n	8011372 <osSemaphoreCreate+0x40>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	683a      	ldr	r2, [r7, #0]
 8011368:	4611      	mov	r1, r2
 801136a:	4618      	mov	r0, r3
 801136c:	f000 fac9 	bl	8011902 <xQueueCreateCountingSemaphore>
 8011370:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 8011372:	4618      	mov	r0, r3
 8011374:	3710      	adds	r7, #16
 8011376:	46bd      	mov	sp, r7
 8011378:	bd80      	pop	{r7, pc}
	...

0801137c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b084      	sub	sp, #16
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
 8011384:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011386:	2300      	movs	r3, #0
 8011388:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	2b00      	cmp	r3, #0
 801138e:	d101      	bne.n	8011394 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8011390:	2380      	movs	r3, #128	; 0x80
 8011392:	e03a      	b.n	801140a <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8011394:	2300      	movs	r3, #0
 8011396:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011398:	683b      	ldr	r3, [r7, #0]
 801139a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801139e:	d103      	bne.n	80113a8 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80113a0:	f04f 33ff 	mov.w	r3, #4294967295
 80113a4:	60fb      	str	r3, [r7, #12]
 80113a6:	e009      	b.n	80113bc <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80113a8:	683b      	ldr	r3, [r7, #0]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d006      	beq.n	80113bc <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80113ae:	683b      	ldr	r3, [r7, #0]
 80113b0:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80113b2:	68fb      	ldr	r3, [r7, #12]
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d101      	bne.n	80113bc <osSemaphoreWait+0x40>
      ticks = 1;
 80113b8:	2301      	movs	r3, #1
 80113ba:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80113bc:	f7ff ff49 	bl	8011252 <inHandlerMode>
 80113c0:	4603      	mov	r3, r0
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d017      	beq.n	80113f6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80113c6:	f107 0308 	add.w	r3, r7, #8
 80113ca:	461a      	mov	r2, r3
 80113cc:	2100      	movs	r1, #0
 80113ce:	6878      	ldr	r0, [r7, #4]
 80113d0:	f000 ff04 	bl	80121dc <xQueueReceiveFromISR>
 80113d4:	4603      	mov	r3, r0
 80113d6:	2b01      	cmp	r3, #1
 80113d8:	d001      	beq.n	80113de <osSemaphoreWait+0x62>
      return osErrorOS;
 80113da:	23ff      	movs	r3, #255	; 0xff
 80113dc:	e015      	b.n	801140a <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80113de:	68bb      	ldr	r3, [r7, #8]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d011      	beq.n	8011408 <osSemaphoreWait+0x8c>
 80113e4:	4b0b      	ldr	r3, [pc, #44]	; (8011414 <osSemaphoreWait+0x98>)
 80113e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113ea:	601a      	str	r2, [r3, #0]
 80113ec:	f3bf 8f4f 	dsb	sy
 80113f0:	f3bf 8f6f 	isb	sy
 80113f4:	e008      	b.n	8011408 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80113f6:	68f9      	ldr	r1, [r7, #12]
 80113f8:	6878      	ldr	r0, [r7, #4]
 80113fa:	f000 fddb 	bl	8011fb4 <xQueueSemaphoreTake>
 80113fe:	4603      	mov	r3, r0
 8011400:	2b01      	cmp	r3, #1
 8011402:	d001      	beq.n	8011408 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8011404:	23ff      	movs	r3, #255	; 0xff
 8011406:	e000      	b.n	801140a <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8011408:	2300      	movs	r3, #0
}
 801140a:	4618      	mov	r0, r3
 801140c:	3710      	adds	r7, #16
 801140e:	46bd      	mov	sp, r7
 8011410:	bd80      	pop	{r7, pc}
 8011412:	bf00      	nop
 8011414:	e000ed04 	.word	0xe000ed04

08011418 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8011418:	b580      	push	{r7, lr}
 801141a:	b084      	sub	sp, #16
 801141c:	af00      	add	r7, sp, #0
 801141e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011420:	2300      	movs	r3, #0
 8011422:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011424:	2300      	movs	r3, #0
 8011426:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8011428:	f7ff ff13 	bl	8011252 <inHandlerMode>
 801142c:	4603      	mov	r3, r0
 801142e:	2b00      	cmp	r3, #0
 8011430:	d016      	beq.n	8011460 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011432:	f107 0308 	add.w	r3, r7, #8
 8011436:	4619      	mov	r1, r3
 8011438:	6878      	ldr	r0, [r7, #4]
 801143a:	f000 fc3f 	bl	8011cbc <xQueueGiveFromISR>
 801143e:	4603      	mov	r3, r0
 8011440:	2b01      	cmp	r3, #1
 8011442:	d001      	beq.n	8011448 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8011444:	23ff      	movs	r3, #255	; 0xff
 8011446:	e017      	b.n	8011478 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011448:	68bb      	ldr	r3, [r7, #8]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d013      	beq.n	8011476 <osSemaphoreRelease+0x5e>
 801144e:	4b0c      	ldr	r3, [pc, #48]	; (8011480 <osSemaphoreRelease+0x68>)
 8011450:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011454:	601a      	str	r2, [r3, #0]
 8011456:	f3bf 8f4f 	dsb	sy
 801145a:	f3bf 8f6f 	isb	sy
 801145e:	e00a      	b.n	8011476 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8011460:	2300      	movs	r3, #0
 8011462:	2200      	movs	r2, #0
 8011464:	2100      	movs	r1, #0
 8011466:	6878      	ldr	r0, [r7, #4]
 8011468:	f000 fa82 	bl	8011970 <xQueueGenericSend>
 801146c:	4603      	mov	r3, r0
 801146e:	2b01      	cmp	r3, #1
 8011470:	d001      	beq.n	8011476 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8011472:	23ff      	movs	r3, #255	; 0xff
 8011474:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8011476:	68fb      	ldr	r3, [r7, #12]
}
 8011478:	4618      	mov	r0, r3
 801147a:	3710      	adds	r7, #16
 801147c:	46bd      	mov	sp, r7
 801147e:	bd80      	pop	{r7, pc}
 8011480:	e000ed04 	.word	0xe000ed04

08011484 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8011484:	b580      	push	{r7, lr}
 8011486:	b082      	sub	sp, #8
 8011488:	af00      	add	r7, sp, #0
 801148a:	6078      	str	r0, [r7, #4]
 801148c:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801148e:	687b      	ldr	r3, [r7, #4]
 8011490:	6818      	ldr	r0, [r3, #0]
 8011492:	687b      	ldr	r3, [r7, #4]
 8011494:	685b      	ldr	r3, [r3, #4]
 8011496:	2200      	movs	r2, #0
 8011498:	4619      	mov	r1, r3
 801149a:	f000 f9d7 	bl	801184c <xQueueGenericCreate>
 801149e:	4603      	mov	r3, r0
#endif
}
 80114a0:	4618      	mov	r0, r3
 80114a2:	3708      	adds	r7, #8
 80114a4:	46bd      	mov	sp, r7
 80114a6:	bd80      	pop	{r7, pc}

080114a8 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b086      	sub	sp, #24
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	60f8      	str	r0, [r7, #12]
 80114b0:	60b9      	str	r1, [r7, #8]
 80114b2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80114b4:	2300      	movs	r3, #0
 80114b6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80114bc:	697b      	ldr	r3, [r7, #20]
 80114be:	2b00      	cmp	r3, #0
 80114c0:	d101      	bne.n	80114c6 <osMessagePut+0x1e>
    ticks = 1;
 80114c2:	2301      	movs	r3, #1
 80114c4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80114c6:	f7ff fec4 	bl	8011252 <inHandlerMode>
 80114ca:	4603      	mov	r3, r0
 80114cc:	2b00      	cmp	r3, #0
 80114ce:	d018      	beq.n	8011502 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80114d0:	f107 0210 	add.w	r2, r7, #16
 80114d4:	f107 0108 	add.w	r1, r7, #8
 80114d8:	2300      	movs	r3, #0
 80114da:	68f8      	ldr	r0, [r7, #12]
 80114dc:	f000 fb4e 	bl	8011b7c <xQueueGenericSendFromISR>
 80114e0:	4603      	mov	r3, r0
 80114e2:	2b01      	cmp	r3, #1
 80114e4:	d001      	beq.n	80114ea <osMessagePut+0x42>
      return osErrorOS;
 80114e6:	23ff      	movs	r3, #255	; 0xff
 80114e8:	e018      	b.n	801151c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80114ea:	693b      	ldr	r3, [r7, #16]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d014      	beq.n	801151a <osMessagePut+0x72>
 80114f0:	4b0c      	ldr	r3, [pc, #48]	; (8011524 <osMessagePut+0x7c>)
 80114f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114f6:	601a      	str	r2, [r3, #0]
 80114f8:	f3bf 8f4f 	dsb	sy
 80114fc:	f3bf 8f6f 	isb	sy
 8011500:	e00b      	b.n	801151a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8011502:	f107 0108 	add.w	r1, r7, #8
 8011506:	2300      	movs	r3, #0
 8011508:	697a      	ldr	r2, [r7, #20]
 801150a:	68f8      	ldr	r0, [r7, #12]
 801150c:	f000 fa30 	bl	8011970 <xQueueGenericSend>
 8011510:	4603      	mov	r3, r0
 8011512:	2b01      	cmp	r3, #1
 8011514:	d001      	beq.n	801151a <osMessagePut+0x72>
      return osErrorOS;
 8011516:	23ff      	movs	r3, #255	; 0xff
 8011518:	e000      	b.n	801151c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801151a:	2300      	movs	r3, #0
}
 801151c:	4618      	mov	r0, r3
 801151e:	3718      	adds	r7, #24
 8011520:	46bd      	mov	sp, r7
 8011522:	bd80      	pop	{r7, pc}
 8011524:	e000ed04 	.word	0xe000ed04

08011528 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8011528:	b590      	push	{r4, r7, lr}
 801152a:	b08b      	sub	sp, #44	; 0x2c
 801152c:	af00      	add	r7, sp, #0
 801152e:	60f8      	str	r0, [r7, #12]
 8011530:	60b9      	str	r1, [r7, #8]
 8011532:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8011534:	68bb      	ldr	r3, [r7, #8]
 8011536:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8011538:	2300      	movs	r3, #0
 801153a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 801153c:	68bb      	ldr	r3, [r7, #8]
 801153e:	2b00      	cmp	r3, #0
 8011540:	d10a      	bne.n	8011558 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8011542:	2380      	movs	r3, #128	; 0x80
 8011544:	617b      	str	r3, [r7, #20]
    return event;
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	461c      	mov	r4, r3
 801154a:	f107 0314 	add.w	r3, r7, #20
 801154e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011552:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011556:	e054      	b.n	8011602 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8011558:	2300      	movs	r3, #0
 801155a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 801155c:	2300      	movs	r3, #0
 801155e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011566:	d103      	bne.n	8011570 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8011568:	f04f 33ff 	mov.w	r3, #4294967295
 801156c:	627b      	str	r3, [r7, #36]	; 0x24
 801156e:	e009      	b.n	8011584 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	2b00      	cmp	r3, #0
 8011574:	d006      	beq.n	8011584 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 801157a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801157c:	2b00      	cmp	r3, #0
 801157e:	d101      	bne.n	8011584 <osMessageGet+0x5c>
      ticks = 1;
 8011580:	2301      	movs	r3, #1
 8011582:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8011584:	f7ff fe65 	bl	8011252 <inHandlerMode>
 8011588:	4603      	mov	r3, r0
 801158a:	2b00      	cmp	r3, #0
 801158c:	d01c      	beq.n	80115c8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801158e:	f107 0220 	add.w	r2, r7, #32
 8011592:	f107 0314 	add.w	r3, r7, #20
 8011596:	3304      	adds	r3, #4
 8011598:	4619      	mov	r1, r3
 801159a:	68b8      	ldr	r0, [r7, #8]
 801159c:	f000 fe1e 	bl	80121dc <xQueueReceiveFromISR>
 80115a0:	4603      	mov	r3, r0
 80115a2:	2b01      	cmp	r3, #1
 80115a4:	d102      	bne.n	80115ac <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80115a6:	2310      	movs	r3, #16
 80115a8:	617b      	str	r3, [r7, #20]
 80115aa:	e001      	b.n	80115b0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80115ac:	2300      	movs	r3, #0
 80115ae:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80115b0:	6a3b      	ldr	r3, [r7, #32]
 80115b2:	2b00      	cmp	r3, #0
 80115b4:	d01d      	beq.n	80115f2 <osMessageGet+0xca>
 80115b6:	4b15      	ldr	r3, [pc, #84]	; (801160c <osMessageGet+0xe4>)
 80115b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115bc:	601a      	str	r2, [r3, #0]
 80115be:	f3bf 8f4f 	dsb	sy
 80115c2:	f3bf 8f6f 	isb	sy
 80115c6:	e014      	b.n	80115f2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80115c8:	f107 0314 	add.w	r3, r7, #20
 80115cc:	3304      	adds	r3, #4
 80115ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115d0:	4619      	mov	r1, r3
 80115d2:	68b8      	ldr	r0, [r7, #8]
 80115d4:	f000 fc08 	bl	8011de8 <xQueueReceive>
 80115d8:	4603      	mov	r3, r0
 80115da:	2b01      	cmp	r3, #1
 80115dc:	d102      	bne.n	80115e4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80115de:	2310      	movs	r3, #16
 80115e0:	617b      	str	r3, [r7, #20]
 80115e2:	e006      	b.n	80115f2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80115e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d101      	bne.n	80115ee <osMessageGet+0xc6>
 80115ea:	2300      	movs	r3, #0
 80115ec:	e000      	b.n	80115f0 <osMessageGet+0xc8>
 80115ee:	2340      	movs	r3, #64	; 0x40
 80115f0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80115f2:	68fb      	ldr	r3, [r7, #12]
 80115f4:	461c      	mov	r4, r3
 80115f6:	f107 0314 	add.w	r3, r7, #20
 80115fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80115fe:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8011602:	68f8      	ldr	r0, [r7, #12]
 8011604:	372c      	adds	r7, #44	; 0x2c
 8011606:	46bd      	mov	sp, r7
 8011608:	bd90      	pop	{r4, r7, pc}
 801160a:	bf00      	nop
 801160c:	e000ed04 	.word	0xe000ed04

08011610 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011610:	b480      	push	{r7}
 8011612:	b083      	sub	sp, #12
 8011614:	af00      	add	r7, sp, #0
 8011616:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	f103 0208 	add.w	r2, r3, #8
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	f04f 32ff 	mov.w	r2, #4294967295
 8011628:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	f103 0208 	add.w	r2, r3, #8
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011634:	687b      	ldr	r3, [r7, #4]
 8011636:	f103 0208 	add.w	r2, r3, #8
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	2200      	movs	r2, #0
 8011642:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011644:	bf00      	nop
 8011646:	370c      	adds	r7, #12
 8011648:	46bd      	mov	sp, r7
 801164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801164e:	4770      	bx	lr

08011650 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011650:	b480      	push	{r7}
 8011652:	b083      	sub	sp, #12
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	2200      	movs	r2, #0
 801165c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801165e:	bf00      	nop
 8011660:	370c      	adds	r7, #12
 8011662:	46bd      	mov	sp, r7
 8011664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011668:	4770      	bx	lr

0801166a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801166a:	b480      	push	{r7}
 801166c:	b085      	sub	sp, #20
 801166e:	af00      	add	r7, sp, #0
 8011670:	6078      	str	r0, [r7, #4]
 8011672:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	685b      	ldr	r3, [r3, #4]
 8011678:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801167a:	683b      	ldr	r3, [r7, #0]
 801167c:	68fa      	ldr	r2, [r7, #12]
 801167e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	689a      	ldr	r2, [r3, #8]
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	689b      	ldr	r3, [r3, #8]
 801168c:	683a      	ldr	r2, [r7, #0]
 801168e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011690:	68fb      	ldr	r3, [r7, #12]
 8011692:	683a      	ldr	r2, [r7, #0]
 8011694:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8011696:	683b      	ldr	r3, [r7, #0]
 8011698:	687a      	ldr	r2, [r7, #4]
 801169a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	681b      	ldr	r3, [r3, #0]
 80116a0:	1c5a      	adds	r2, r3, #1
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	601a      	str	r2, [r3, #0]
}
 80116a6:	bf00      	nop
 80116a8:	3714      	adds	r7, #20
 80116aa:	46bd      	mov	sp, r7
 80116ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b0:	4770      	bx	lr

080116b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80116b2:	b480      	push	{r7}
 80116b4:	b085      	sub	sp, #20
 80116b6:	af00      	add	r7, sp, #0
 80116b8:	6078      	str	r0, [r7, #4]
 80116ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	681b      	ldr	r3, [r3, #0]
 80116c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80116c2:	68bb      	ldr	r3, [r7, #8]
 80116c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80116c8:	d103      	bne.n	80116d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	691b      	ldr	r3, [r3, #16]
 80116ce:	60fb      	str	r3, [r7, #12]
 80116d0:	e00c      	b.n	80116ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	3308      	adds	r3, #8
 80116d6:	60fb      	str	r3, [r7, #12]
 80116d8:	e002      	b.n	80116e0 <vListInsert+0x2e>
 80116da:	68fb      	ldr	r3, [r7, #12]
 80116dc:	685b      	ldr	r3, [r3, #4]
 80116de:	60fb      	str	r3, [r7, #12]
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	685b      	ldr	r3, [r3, #4]
 80116e4:	681b      	ldr	r3, [r3, #0]
 80116e6:	68ba      	ldr	r2, [r7, #8]
 80116e8:	429a      	cmp	r2, r3
 80116ea:	d2f6      	bcs.n	80116da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	685a      	ldr	r2, [r3, #4]
 80116f0:	683b      	ldr	r3, [r7, #0]
 80116f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80116f4:	683b      	ldr	r3, [r7, #0]
 80116f6:	685b      	ldr	r3, [r3, #4]
 80116f8:	683a      	ldr	r2, [r7, #0]
 80116fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80116fc:	683b      	ldr	r3, [r7, #0]
 80116fe:	68fa      	ldr	r2, [r7, #12]
 8011700:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	683a      	ldr	r2, [r7, #0]
 8011706:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	687a      	ldr	r2, [r7, #4]
 801170c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	681b      	ldr	r3, [r3, #0]
 8011712:	1c5a      	adds	r2, r3, #1
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	601a      	str	r2, [r3, #0]
}
 8011718:	bf00      	nop
 801171a:	3714      	adds	r7, #20
 801171c:	46bd      	mov	sp, r7
 801171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011722:	4770      	bx	lr

08011724 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011724:	b480      	push	{r7}
 8011726:	b085      	sub	sp, #20
 8011728:	af00      	add	r7, sp, #0
 801172a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	691b      	ldr	r3, [r3, #16]
 8011730:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	685b      	ldr	r3, [r3, #4]
 8011736:	687a      	ldr	r2, [r7, #4]
 8011738:	6892      	ldr	r2, [r2, #8]
 801173a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	689b      	ldr	r3, [r3, #8]
 8011740:	687a      	ldr	r2, [r7, #4]
 8011742:	6852      	ldr	r2, [r2, #4]
 8011744:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	685b      	ldr	r3, [r3, #4]
 801174a:	687a      	ldr	r2, [r7, #4]
 801174c:	429a      	cmp	r2, r3
 801174e:	d103      	bne.n	8011758 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	689a      	ldr	r2, [r3, #8]
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	2200      	movs	r2, #0
 801175c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	1e5a      	subs	r2, r3, #1
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	681b      	ldr	r3, [r3, #0]
}
 801176c:	4618      	mov	r0, r3
 801176e:	3714      	adds	r7, #20
 8011770:	46bd      	mov	sp, r7
 8011772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011776:	4770      	bx	lr

08011778 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b084      	sub	sp, #16
 801177c:	af00      	add	r7, sp, #0
 801177e:	6078      	str	r0, [r7, #4]
 8011780:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011786:	68fb      	ldr	r3, [r7, #12]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d10c      	bne.n	80117a6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801178c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011790:	b672      	cpsid	i
 8011792:	f383 8811 	msr	BASEPRI, r3
 8011796:	f3bf 8f6f 	isb	sy
 801179a:	f3bf 8f4f 	dsb	sy
 801179e:	b662      	cpsie	i
 80117a0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80117a2:	bf00      	nop
 80117a4:	e7fe      	b.n	80117a4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80117a6:	f002 f801 	bl	80137ac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	681a      	ldr	r2, [r3, #0]
 80117ae:	68fb      	ldr	r3, [r7, #12]
 80117b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117b2:	68f9      	ldr	r1, [r7, #12]
 80117b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80117b6:	fb01 f303 	mul.w	r3, r1, r3
 80117ba:	441a      	add	r2, r3
 80117bc:	68fb      	ldr	r3, [r7, #12]
 80117be:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80117c0:	68fb      	ldr	r3, [r7, #12]
 80117c2:	2200      	movs	r2, #0
 80117c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	681a      	ldr	r2, [r3, #0]
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80117ce:	68fb      	ldr	r3, [r7, #12]
 80117d0:	681a      	ldr	r2, [r3, #0]
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80117d6:	3b01      	subs	r3, #1
 80117d8:	68f9      	ldr	r1, [r7, #12]
 80117da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80117dc:	fb01 f303 	mul.w	r3, r1, r3
 80117e0:	441a      	add	r2, r3
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	22ff      	movs	r2, #255	; 0xff
 80117ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	22ff      	movs	r2, #255	; 0xff
 80117f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80117f6:	683b      	ldr	r3, [r7, #0]
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d114      	bne.n	8011826 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80117fc:	68fb      	ldr	r3, [r7, #12]
 80117fe:	691b      	ldr	r3, [r3, #16]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d01a      	beq.n	801183a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011804:	68fb      	ldr	r3, [r7, #12]
 8011806:	3310      	adds	r3, #16
 8011808:	4618      	mov	r0, r3
 801180a:	f001 facf 	bl	8012dac <xTaskRemoveFromEventList>
 801180e:	4603      	mov	r3, r0
 8011810:	2b00      	cmp	r3, #0
 8011812:	d012      	beq.n	801183a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011814:	4b0c      	ldr	r3, [pc, #48]	; (8011848 <xQueueGenericReset+0xd0>)
 8011816:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801181a:	601a      	str	r2, [r3, #0]
 801181c:	f3bf 8f4f 	dsb	sy
 8011820:	f3bf 8f6f 	isb	sy
 8011824:	e009      	b.n	801183a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011826:	68fb      	ldr	r3, [r7, #12]
 8011828:	3310      	adds	r3, #16
 801182a:	4618      	mov	r0, r3
 801182c:	f7ff fef0 	bl	8011610 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011830:	68fb      	ldr	r3, [r7, #12]
 8011832:	3324      	adds	r3, #36	; 0x24
 8011834:	4618      	mov	r0, r3
 8011836:	f7ff feeb 	bl	8011610 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801183a:	f001 ffeb 	bl	8013814 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801183e:	2301      	movs	r3, #1
}
 8011840:	4618      	mov	r0, r3
 8011842:	3710      	adds	r7, #16
 8011844:	46bd      	mov	sp, r7
 8011846:	bd80      	pop	{r7, pc}
 8011848:	e000ed04 	.word	0xe000ed04

0801184c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 801184c:	b580      	push	{r7, lr}
 801184e:	b08a      	sub	sp, #40	; 0x28
 8011850:	af02      	add	r7, sp, #8
 8011852:	60f8      	str	r0, [r7, #12]
 8011854:	60b9      	str	r1, [r7, #8]
 8011856:	4613      	mov	r3, r2
 8011858:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801185a:	68fb      	ldr	r3, [r7, #12]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d10c      	bne.n	801187a <xQueueGenericCreate+0x2e>
	__asm volatile
 8011860:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011864:	b672      	cpsid	i
 8011866:	f383 8811 	msr	BASEPRI, r3
 801186a:	f3bf 8f6f 	isb	sy
 801186e:	f3bf 8f4f 	dsb	sy
 8011872:	b662      	cpsie	i
 8011874:	613b      	str	r3, [r7, #16]
}
 8011876:	bf00      	nop
 8011878:	e7fe      	b.n	8011878 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801187a:	68bb      	ldr	r3, [r7, #8]
 801187c:	2b00      	cmp	r3, #0
 801187e:	d102      	bne.n	8011886 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8011880:	2300      	movs	r3, #0
 8011882:	61fb      	str	r3, [r7, #28]
 8011884:	e004      	b.n	8011890 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011886:	68fb      	ldr	r3, [r7, #12]
 8011888:	68ba      	ldr	r2, [r7, #8]
 801188a:	fb02 f303 	mul.w	r3, r2, r3
 801188e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8011890:	69fb      	ldr	r3, [r7, #28]
 8011892:	3348      	adds	r3, #72	; 0x48
 8011894:	4618      	mov	r0, r3
 8011896:	f002 f8b5 	bl	8013a04 <pvPortMalloc>
 801189a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 801189c:	69bb      	ldr	r3, [r7, #24]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d00b      	beq.n	80118ba <xQueueGenericCreate+0x6e>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80118a2:	69bb      	ldr	r3, [r7, #24]
 80118a4:	3348      	adds	r3, #72	; 0x48
 80118a6:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80118a8:	79fa      	ldrb	r2, [r7, #7]
 80118aa:	69bb      	ldr	r3, [r7, #24]
 80118ac:	9300      	str	r3, [sp, #0]
 80118ae:	4613      	mov	r3, r2
 80118b0:	697a      	ldr	r2, [r7, #20]
 80118b2:	68b9      	ldr	r1, [r7, #8]
 80118b4:	68f8      	ldr	r0, [r7, #12]
 80118b6:	f000 f805 	bl	80118c4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80118ba:	69bb      	ldr	r3, [r7, #24]
	}
 80118bc:	4618      	mov	r0, r3
 80118be:	3720      	adds	r7, #32
 80118c0:	46bd      	mov	sp, r7
 80118c2:	bd80      	pop	{r7, pc}

080118c4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b084      	sub	sp, #16
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	60f8      	str	r0, [r7, #12]
 80118cc:	60b9      	str	r1, [r7, #8]
 80118ce:	607a      	str	r2, [r7, #4]
 80118d0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80118d2:	68bb      	ldr	r3, [r7, #8]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d103      	bne.n	80118e0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80118d8:	69bb      	ldr	r3, [r7, #24]
 80118da:	69ba      	ldr	r2, [r7, #24]
 80118dc:	601a      	str	r2, [r3, #0]
 80118de:	e002      	b.n	80118e6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80118e0:	69bb      	ldr	r3, [r7, #24]
 80118e2:	687a      	ldr	r2, [r7, #4]
 80118e4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80118e6:	69bb      	ldr	r3, [r7, #24]
 80118e8:	68fa      	ldr	r2, [r7, #12]
 80118ea:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80118ec:	69bb      	ldr	r3, [r7, #24]
 80118ee:	68ba      	ldr	r2, [r7, #8]
 80118f0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80118f2:	2101      	movs	r1, #1
 80118f4:	69b8      	ldr	r0, [r7, #24]
 80118f6:	f7ff ff3f 	bl	8011778 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80118fa:	bf00      	nop
 80118fc:	3710      	adds	r7, #16
 80118fe:	46bd      	mov	sp, r7
 8011900:	bd80      	pop	{r7, pc}

08011902 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8011902:	b580      	push	{r7, lr}
 8011904:	b086      	sub	sp, #24
 8011906:	af00      	add	r7, sp, #0
 8011908:	6078      	str	r0, [r7, #4]
 801190a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	2b00      	cmp	r3, #0
 8011910:	d10c      	bne.n	801192c <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8011912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011916:	b672      	cpsid	i
 8011918:	f383 8811 	msr	BASEPRI, r3
 801191c:	f3bf 8f6f 	isb	sy
 8011920:	f3bf 8f4f 	dsb	sy
 8011924:	b662      	cpsie	i
 8011926:	613b      	str	r3, [r7, #16]
}
 8011928:	bf00      	nop
 801192a:	e7fe      	b.n	801192a <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 801192c:	683a      	ldr	r2, [r7, #0]
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	429a      	cmp	r2, r3
 8011932:	d90c      	bls.n	801194e <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8011934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011938:	b672      	cpsid	i
 801193a:	f383 8811 	msr	BASEPRI, r3
 801193e:	f3bf 8f6f 	isb	sy
 8011942:	f3bf 8f4f 	dsb	sy
 8011946:	b662      	cpsie	i
 8011948:	60fb      	str	r3, [r7, #12]
}
 801194a:	bf00      	nop
 801194c:	e7fe      	b.n	801194c <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 801194e:	2202      	movs	r2, #2
 8011950:	2100      	movs	r1, #0
 8011952:	6878      	ldr	r0, [r7, #4]
 8011954:	f7ff ff7a 	bl	801184c <xQueueGenericCreate>
 8011958:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 801195a:	697b      	ldr	r3, [r7, #20]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d002      	beq.n	8011966 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011960:	697b      	ldr	r3, [r7, #20]
 8011962:	683a      	ldr	r2, [r7, #0]
 8011964:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8011966:	697b      	ldr	r3, [r7, #20]
	}
 8011968:	4618      	mov	r0, r3
 801196a:	3718      	adds	r7, #24
 801196c:	46bd      	mov	sp, r7
 801196e:	bd80      	pop	{r7, pc}

08011970 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011970:	b580      	push	{r7, lr}
 8011972:	b08e      	sub	sp, #56	; 0x38
 8011974:	af00      	add	r7, sp, #0
 8011976:	60f8      	str	r0, [r7, #12]
 8011978:	60b9      	str	r1, [r7, #8]
 801197a:	607a      	str	r2, [r7, #4]
 801197c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801197e:	2300      	movs	r3, #0
 8011980:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011988:	2b00      	cmp	r3, #0
 801198a:	d10c      	bne.n	80119a6 <xQueueGenericSend+0x36>
	__asm volatile
 801198c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011990:	b672      	cpsid	i
 8011992:	f383 8811 	msr	BASEPRI, r3
 8011996:	f3bf 8f6f 	isb	sy
 801199a:	f3bf 8f4f 	dsb	sy
 801199e:	b662      	cpsie	i
 80119a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80119a2:	bf00      	nop
 80119a4:	e7fe      	b.n	80119a4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80119a6:	68bb      	ldr	r3, [r7, #8]
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d103      	bne.n	80119b4 <xQueueGenericSend+0x44>
 80119ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119b0:	2b00      	cmp	r3, #0
 80119b2:	d101      	bne.n	80119b8 <xQueueGenericSend+0x48>
 80119b4:	2301      	movs	r3, #1
 80119b6:	e000      	b.n	80119ba <xQueueGenericSend+0x4a>
 80119b8:	2300      	movs	r3, #0
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d10c      	bne.n	80119d8 <xQueueGenericSend+0x68>
	__asm volatile
 80119be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119c2:	b672      	cpsid	i
 80119c4:	f383 8811 	msr	BASEPRI, r3
 80119c8:	f3bf 8f6f 	isb	sy
 80119cc:	f3bf 8f4f 	dsb	sy
 80119d0:	b662      	cpsie	i
 80119d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80119d4:	bf00      	nop
 80119d6:	e7fe      	b.n	80119d6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80119d8:	683b      	ldr	r3, [r7, #0]
 80119da:	2b02      	cmp	r3, #2
 80119dc:	d103      	bne.n	80119e6 <xQueueGenericSend+0x76>
 80119de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119e2:	2b01      	cmp	r3, #1
 80119e4:	d101      	bne.n	80119ea <xQueueGenericSend+0x7a>
 80119e6:	2301      	movs	r3, #1
 80119e8:	e000      	b.n	80119ec <xQueueGenericSend+0x7c>
 80119ea:	2300      	movs	r3, #0
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d10c      	bne.n	8011a0a <xQueueGenericSend+0x9a>
	__asm volatile
 80119f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119f4:	b672      	cpsid	i
 80119f6:	f383 8811 	msr	BASEPRI, r3
 80119fa:	f3bf 8f6f 	isb	sy
 80119fe:	f3bf 8f4f 	dsb	sy
 8011a02:	b662      	cpsie	i
 8011a04:	623b      	str	r3, [r7, #32]
}
 8011a06:	bf00      	nop
 8011a08:	e7fe      	b.n	8011a08 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011a0a:	f001 fb79 	bl	8013100 <xTaskGetSchedulerState>
 8011a0e:	4603      	mov	r3, r0
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d102      	bne.n	8011a1a <xQueueGenericSend+0xaa>
 8011a14:	687b      	ldr	r3, [r7, #4]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d101      	bne.n	8011a1e <xQueueGenericSend+0xae>
 8011a1a:	2301      	movs	r3, #1
 8011a1c:	e000      	b.n	8011a20 <xQueueGenericSend+0xb0>
 8011a1e:	2300      	movs	r3, #0
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d10c      	bne.n	8011a3e <xQueueGenericSend+0xce>
	__asm volatile
 8011a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011a28:	b672      	cpsid	i
 8011a2a:	f383 8811 	msr	BASEPRI, r3
 8011a2e:	f3bf 8f6f 	isb	sy
 8011a32:	f3bf 8f4f 	dsb	sy
 8011a36:	b662      	cpsie	i
 8011a38:	61fb      	str	r3, [r7, #28]
}
 8011a3a:	bf00      	nop
 8011a3c:	e7fe      	b.n	8011a3c <xQueueGenericSend+0xcc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011a3e:	f001 feb5 	bl	80137ac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a4a:	429a      	cmp	r2, r3
 8011a4c:	d302      	bcc.n	8011a54 <xQueueGenericSend+0xe4>
 8011a4e:	683b      	ldr	r3, [r7, #0]
 8011a50:	2b02      	cmp	r3, #2
 8011a52:	d129      	bne.n	8011aa8 <xQueueGenericSend+0x138>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011a54:	683a      	ldr	r2, [r7, #0]
 8011a56:	68b9      	ldr	r1, [r7, #8]
 8011a58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a5a:	f000 fc5d 	bl	8012318 <prvCopyDataToQueue>
 8011a5e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a64:	2b00      	cmp	r3, #0
 8011a66:	d010      	beq.n	8011a8a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a6a:	3324      	adds	r3, #36	; 0x24
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	f001 f99d 	bl	8012dac <xTaskRemoveFromEventList>
 8011a72:	4603      	mov	r3, r0
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d013      	beq.n	8011aa0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011a78:	4b3f      	ldr	r3, [pc, #252]	; (8011b78 <xQueueGenericSend+0x208>)
 8011a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a7e:	601a      	str	r2, [r3, #0]
 8011a80:	f3bf 8f4f 	dsb	sy
 8011a84:	f3bf 8f6f 	isb	sy
 8011a88:	e00a      	b.n	8011aa0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011a8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d007      	beq.n	8011aa0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011a90:	4b39      	ldr	r3, [pc, #228]	; (8011b78 <xQueueGenericSend+0x208>)
 8011a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a96:	601a      	str	r2, [r3, #0]
 8011a98:	f3bf 8f4f 	dsb	sy
 8011a9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011aa0:	f001 feb8 	bl	8013814 <vPortExitCritical>
				return pdPASS;
 8011aa4:	2301      	movs	r3, #1
 8011aa6:	e063      	b.n	8011b70 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	2b00      	cmp	r3, #0
 8011aac:	d103      	bne.n	8011ab6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011aae:	f001 feb1 	bl	8013814 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	e05c      	b.n	8011b70 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d106      	bne.n	8011aca <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011abc:	f107 0314 	add.w	r3, r7, #20
 8011ac0:	4618      	mov	r0, r3
 8011ac2:	f001 f9d7 	bl	8012e74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011ac6:	2301      	movs	r3, #1
 8011ac8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011aca:	f001 fea3 	bl	8013814 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011ace:	f000 feed 	bl	80128ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011ad2:	f001 fe6b 	bl	80137ac <vPortEnterCritical>
 8011ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ad8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011adc:	b25b      	sxtb	r3, r3
 8011ade:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ae2:	d103      	bne.n	8011aec <xQueueGenericSend+0x17c>
 8011ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ae6:	2200      	movs	r2, #0
 8011ae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011af2:	b25b      	sxtb	r3, r3
 8011af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011af8:	d103      	bne.n	8011b02 <xQueueGenericSend+0x192>
 8011afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011afc:	2200      	movs	r2, #0
 8011afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011b02:	f001 fe87 	bl	8013814 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011b06:	1d3a      	adds	r2, r7, #4
 8011b08:	f107 0314 	add.w	r3, r7, #20
 8011b0c:	4611      	mov	r1, r2
 8011b0e:	4618      	mov	r0, r3
 8011b10:	f001 f9c6 	bl	8012ea0 <xTaskCheckForTimeOut>
 8011b14:	4603      	mov	r3, r0
 8011b16:	2b00      	cmp	r3, #0
 8011b18:	d124      	bne.n	8011b64 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011b1a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b1c:	f000 fcf4 	bl	8012508 <prvIsQueueFull>
 8011b20:	4603      	mov	r3, r0
 8011b22:	2b00      	cmp	r3, #0
 8011b24:	d018      	beq.n	8011b58 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b28:	3310      	adds	r3, #16
 8011b2a:	687a      	ldr	r2, [r7, #4]
 8011b2c:	4611      	mov	r1, r2
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f001 f916 	bl	8012d60 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011b34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b36:	f000 fc7f 	bl	8012438 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011b3a:	f000 fec5 	bl	80128c8 <xTaskResumeAll>
 8011b3e:	4603      	mov	r3, r0
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	f47f af7c 	bne.w	8011a3e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8011b46:	4b0c      	ldr	r3, [pc, #48]	; (8011b78 <xQueueGenericSend+0x208>)
 8011b48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011b4c:	601a      	str	r2, [r3, #0]
 8011b4e:	f3bf 8f4f 	dsb	sy
 8011b52:	f3bf 8f6f 	isb	sy
 8011b56:	e772      	b.n	8011a3e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011b58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b5a:	f000 fc6d 	bl	8012438 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011b5e:	f000 feb3 	bl	80128c8 <xTaskResumeAll>
 8011b62:	e76c      	b.n	8011a3e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011b64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b66:	f000 fc67 	bl	8012438 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011b6a:	f000 fead 	bl	80128c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011b6e:	2300      	movs	r3, #0
		}
	}
}
 8011b70:	4618      	mov	r0, r3
 8011b72:	3738      	adds	r7, #56	; 0x38
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd80      	pop	{r7, pc}
 8011b78:	e000ed04 	.word	0xe000ed04

08011b7c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b08e      	sub	sp, #56	; 0x38
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	60f8      	str	r0, [r7, #12]
 8011b84:	60b9      	str	r1, [r7, #8]
 8011b86:	607a      	str	r2, [r7, #4]
 8011b88:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011b8a:	68fb      	ldr	r3, [r7, #12]
 8011b8c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d10c      	bne.n	8011bae <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8011b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b98:	b672      	cpsid	i
 8011b9a:	f383 8811 	msr	BASEPRI, r3
 8011b9e:	f3bf 8f6f 	isb	sy
 8011ba2:	f3bf 8f4f 	dsb	sy
 8011ba6:	b662      	cpsie	i
 8011ba8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011baa:	bf00      	nop
 8011bac:	e7fe      	b.n	8011bac <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011bae:	68bb      	ldr	r3, [r7, #8]
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d103      	bne.n	8011bbc <xQueueGenericSendFromISR+0x40>
 8011bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011bb8:	2b00      	cmp	r3, #0
 8011bba:	d101      	bne.n	8011bc0 <xQueueGenericSendFromISR+0x44>
 8011bbc:	2301      	movs	r3, #1
 8011bbe:	e000      	b.n	8011bc2 <xQueueGenericSendFromISR+0x46>
 8011bc0:	2300      	movs	r3, #0
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d10c      	bne.n	8011be0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8011bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bca:	b672      	cpsid	i
 8011bcc:	f383 8811 	msr	BASEPRI, r3
 8011bd0:	f3bf 8f6f 	isb	sy
 8011bd4:	f3bf 8f4f 	dsb	sy
 8011bd8:	b662      	cpsie	i
 8011bda:	623b      	str	r3, [r7, #32]
}
 8011bdc:	bf00      	nop
 8011bde:	e7fe      	b.n	8011bde <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011be0:	683b      	ldr	r3, [r7, #0]
 8011be2:	2b02      	cmp	r3, #2
 8011be4:	d103      	bne.n	8011bee <xQueueGenericSendFromISR+0x72>
 8011be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011bea:	2b01      	cmp	r3, #1
 8011bec:	d101      	bne.n	8011bf2 <xQueueGenericSendFromISR+0x76>
 8011bee:	2301      	movs	r3, #1
 8011bf0:	e000      	b.n	8011bf4 <xQueueGenericSendFromISR+0x78>
 8011bf2:	2300      	movs	r3, #0
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d10c      	bne.n	8011c12 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8011bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bfc:	b672      	cpsid	i
 8011bfe:	f383 8811 	msr	BASEPRI, r3
 8011c02:	f3bf 8f6f 	isb	sy
 8011c06:	f3bf 8f4f 	dsb	sy
 8011c0a:	b662      	cpsie	i
 8011c0c:	61fb      	str	r3, [r7, #28]
}
 8011c0e:	bf00      	nop
 8011c10:	e7fe      	b.n	8011c10 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011c12:	f001 feb3 	bl	801397c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011c16:	f3ef 8211 	mrs	r2, BASEPRI
 8011c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c1e:	b672      	cpsid	i
 8011c20:	f383 8811 	msr	BASEPRI, r3
 8011c24:	f3bf 8f6f 	isb	sy
 8011c28:	f3bf 8f4f 	dsb	sy
 8011c2c:	b662      	cpsie	i
 8011c2e:	61ba      	str	r2, [r7, #24]
 8011c30:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011c32:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011c34:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011c3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011c3e:	429a      	cmp	r2, r3
 8011c40:	d302      	bcc.n	8011c48 <xQueueGenericSendFromISR+0xcc>
 8011c42:	683b      	ldr	r3, [r7, #0]
 8011c44:	2b02      	cmp	r3, #2
 8011c46:	d12c      	bne.n	8011ca2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011c48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011c4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011c52:	683a      	ldr	r2, [r7, #0]
 8011c54:	68b9      	ldr	r1, [r7, #8]
 8011c56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c58:	f000 fb5e 	bl	8012318 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011c5c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8011c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c64:	d112      	bne.n	8011c8c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d016      	beq.n	8011c9c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c70:	3324      	adds	r3, #36	; 0x24
 8011c72:	4618      	mov	r0, r3
 8011c74:	f001 f89a 	bl	8012dac <xTaskRemoveFromEventList>
 8011c78:	4603      	mov	r3, r0
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d00e      	beq.n	8011c9c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011c7e:	687b      	ldr	r3, [r7, #4]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d00b      	beq.n	8011c9c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011c84:	687b      	ldr	r3, [r7, #4]
 8011c86:	2201      	movs	r2, #1
 8011c88:	601a      	str	r2, [r3, #0]
 8011c8a:	e007      	b.n	8011c9c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011c8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011c90:	3301      	adds	r3, #1
 8011c92:	b2db      	uxtb	r3, r3
 8011c94:	b25a      	sxtb	r2, r3
 8011c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011c9c:	2301      	movs	r3, #1
 8011c9e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8011ca0:	e001      	b.n	8011ca6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011ca2:	2300      	movs	r3, #0
 8011ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8011ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ca8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011caa:	693b      	ldr	r3, [r7, #16]
 8011cac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011cb0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011cb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011cb4:	4618      	mov	r0, r3
 8011cb6:	3738      	adds	r7, #56	; 0x38
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	bd80      	pop	{r7, pc}

08011cbc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011cbc:	b580      	push	{r7, lr}
 8011cbe:	b08e      	sub	sp, #56	; 0x38
 8011cc0:	af00      	add	r7, sp, #0
 8011cc2:	6078      	str	r0, [r7, #4]
 8011cc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011cc6:	687b      	ldr	r3, [r7, #4]
 8011cc8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ccc:	2b00      	cmp	r3, #0
 8011cce:	d10c      	bne.n	8011cea <xQueueGiveFromISR+0x2e>
	__asm volatile
 8011cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cd4:	b672      	cpsid	i
 8011cd6:	f383 8811 	msr	BASEPRI, r3
 8011cda:	f3bf 8f6f 	isb	sy
 8011cde:	f3bf 8f4f 	dsb	sy
 8011ce2:	b662      	cpsie	i
 8011ce4:	623b      	str	r3, [r7, #32]
}
 8011ce6:	bf00      	nop
 8011ce8:	e7fe      	b.n	8011ce8 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d00c      	beq.n	8011d0c <xQueueGiveFromISR+0x50>
	__asm volatile
 8011cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cf6:	b672      	cpsid	i
 8011cf8:	f383 8811 	msr	BASEPRI, r3
 8011cfc:	f3bf 8f6f 	isb	sy
 8011d00:	f3bf 8f4f 	dsb	sy
 8011d04:	b662      	cpsie	i
 8011d06:	61fb      	str	r3, [r7, #28]
}
 8011d08:	bf00      	nop
 8011d0a:	e7fe      	b.n	8011d0a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8011d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d0e:	681b      	ldr	r3, [r3, #0]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d103      	bne.n	8011d1c <xQueueGiveFromISR+0x60>
 8011d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d16:	685b      	ldr	r3, [r3, #4]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d101      	bne.n	8011d20 <xQueueGiveFromISR+0x64>
 8011d1c:	2301      	movs	r3, #1
 8011d1e:	e000      	b.n	8011d22 <xQueueGiveFromISR+0x66>
 8011d20:	2300      	movs	r3, #0
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d10c      	bne.n	8011d40 <xQueueGiveFromISR+0x84>
	__asm volatile
 8011d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d2a:	b672      	cpsid	i
 8011d2c:	f383 8811 	msr	BASEPRI, r3
 8011d30:	f3bf 8f6f 	isb	sy
 8011d34:	f3bf 8f4f 	dsb	sy
 8011d38:	b662      	cpsie	i
 8011d3a:	61bb      	str	r3, [r7, #24]
}
 8011d3c:	bf00      	nop
 8011d3e:	e7fe      	b.n	8011d3e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011d40:	f001 fe1c 	bl	801397c <vPortValidateInterruptPriority>
	__asm volatile
 8011d44:	f3ef 8211 	mrs	r2, BASEPRI
 8011d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d4c:	b672      	cpsid	i
 8011d4e:	f383 8811 	msr	BASEPRI, r3
 8011d52:	f3bf 8f6f 	isb	sy
 8011d56:	f3bf 8f4f 	dsb	sy
 8011d5a:	b662      	cpsie	i
 8011d5c:	617a      	str	r2, [r7, #20]
 8011d5e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8011d60:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011d62:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d68:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011d70:	429a      	cmp	r2, r3
 8011d72:	d22b      	bcs.n	8011dcc <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d76:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011d7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d80:	1c5a      	adds	r2, r3, #1
 8011d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d84:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011d86:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d8e:	d112      	bne.n	8011db6 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d016      	beq.n	8011dc6 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d9a:	3324      	adds	r3, #36	; 0x24
 8011d9c:	4618      	mov	r0, r3
 8011d9e:	f001 f805 	bl	8012dac <xTaskRemoveFromEventList>
 8011da2:	4603      	mov	r3, r0
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	d00e      	beq.n	8011dc6 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011da8:	683b      	ldr	r3, [r7, #0]
 8011daa:	2b00      	cmp	r3, #0
 8011dac:	d00b      	beq.n	8011dc6 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011dae:	683b      	ldr	r3, [r7, #0]
 8011db0:	2201      	movs	r2, #1
 8011db2:	601a      	str	r2, [r3, #0]
 8011db4:	e007      	b.n	8011dc6 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011db6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011dba:	3301      	adds	r3, #1
 8011dbc:	b2db      	uxtb	r3, r3
 8011dbe:	b25a      	sxtb	r2, r3
 8011dc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011dc2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011dc6:	2301      	movs	r3, #1
 8011dc8:	637b      	str	r3, [r7, #52]	; 0x34
 8011dca:	e001      	b.n	8011dd0 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011dcc:	2300      	movs	r3, #0
 8011dce:	637b      	str	r3, [r7, #52]	; 0x34
 8011dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dd2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	f383 8811 	msr	BASEPRI, r3
}
 8011dda:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011dde:	4618      	mov	r0, r3
 8011de0:	3738      	adds	r7, #56	; 0x38
 8011de2:	46bd      	mov	sp, r7
 8011de4:	bd80      	pop	{r7, pc}
	...

08011de8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011de8:	b580      	push	{r7, lr}
 8011dea:	b08c      	sub	sp, #48	; 0x30
 8011dec:	af00      	add	r7, sp, #0
 8011dee:	60f8      	str	r0, [r7, #12]
 8011df0:	60b9      	str	r1, [r7, #8]
 8011df2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011df4:	2300      	movs	r3, #0
 8011df6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011dfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d10c      	bne.n	8011e1c <xQueueReceive+0x34>
	__asm volatile
 8011e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e06:	b672      	cpsid	i
 8011e08:	f383 8811 	msr	BASEPRI, r3
 8011e0c:	f3bf 8f6f 	isb	sy
 8011e10:	f3bf 8f4f 	dsb	sy
 8011e14:	b662      	cpsie	i
 8011e16:	623b      	str	r3, [r7, #32]
}
 8011e18:	bf00      	nop
 8011e1a:	e7fe      	b.n	8011e1a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011e1c:	68bb      	ldr	r3, [r7, #8]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d103      	bne.n	8011e2a <xQueueReceive+0x42>
 8011e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011e26:	2b00      	cmp	r3, #0
 8011e28:	d101      	bne.n	8011e2e <xQueueReceive+0x46>
 8011e2a:	2301      	movs	r3, #1
 8011e2c:	e000      	b.n	8011e30 <xQueueReceive+0x48>
 8011e2e:	2300      	movs	r3, #0
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d10c      	bne.n	8011e4e <xQueueReceive+0x66>
	__asm volatile
 8011e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e38:	b672      	cpsid	i
 8011e3a:	f383 8811 	msr	BASEPRI, r3
 8011e3e:	f3bf 8f6f 	isb	sy
 8011e42:	f3bf 8f4f 	dsb	sy
 8011e46:	b662      	cpsie	i
 8011e48:	61fb      	str	r3, [r7, #28]
}
 8011e4a:	bf00      	nop
 8011e4c:	e7fe      	b.n	8011e4c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011e4e:	f001 f957 	bl	8013100 <xTaskGetSchedulerState>
 8011e52:	4603      	mov	r3, r0
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d102      	bne.n	8011e5e <xQueueReceive+0x76>
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d101      	bne.n	8011e62 <xQueueReceive+0x7a>
 8011e5e:	2301      	movs	r3, #1
 8011e60:	e000      	b.n	8011e64 <xQueueReceive+0x7c>
 8011e62:	2300      	movs	r3, #0
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d10c      	bne.n	8011e82 <xQueueReceive+0x9a>
	__asm volatile
 8011e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e6c:	b672      	cpsid	i
 8011e6e:	f383 8811 	msr	BASEPRI, r3
 8011e72:	f3bf 8f6f 	isb	sy
 8011e76:	f3bf 8f4f 	dsb	sy
 8011e7a:	b662      	cpsie	i
 8011e7c:	61bb      	str	r3, [r7, #24]
}
 8011e7e:	bf00      	nop
 8011e80:	e7fe      	b.n	8011e80 <xQueueReceive+0x98>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8011e82:	f001 fc93 	bl	80137ac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e8a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d01f      	beq.n	8011ed2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011e92:	68b9      	ldr	r1, [r7, #8]
 8011e94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e96:	f000 faa9 	bl	80123ec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e9c:	1e5a      	subs	r2, r3, #1
 8011e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ea0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ea4:	691b      	ldr	r3, [r3, #16]
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d00f      	beq.n	8011eca <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eac:	3310      	adds	r3, #16
 8011eae:	4618      	mov	r0, r3
 8011eb0:	f000 ff7c 	bl	8012dac <xTaskRemoveFromEventList>
 8011eb4:	4603      	mov	r3, r0
 8011eb6:	2b00      	cmp	r3, #0
 8011eb8:	d007      	beq.n	8011eca <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011eba:	4b3d      	ldr	r3, [pc, #244]	; (8011fb0 <xQueueReceive+0x1c8>)
 8011ebc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ec0:	601a      	str	r2, [r3, #0]
 8011ec2:	f3bf 8f4f 	dsb	sy
 8011ec6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011eca:	f001 fca3 	bl	8013814 <vPortExitCritical>
				return pdPASS;
 8011ece:	2301      	movs	r3, #1
 8011ed0:	e069      	b.n	8011fa6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011ed2:	687b      	ldr	r3, [r7, #4]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d103      	bne.n	8011ee0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011ed8:	f001 fc9c 	bl	8013814 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011edc:	2300      	movs	r3, #0
 8011ede:	e062      	b.n	8011fa6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011ee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ee2:	2b00      	cmp	r3, #0
 8011ee4:	d106      	bne.n	8011ef4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011ee6:	f107 0310 	add.w	r3, r7, #16
 8011eea:	4618      	mov	r0, r3
 8011eec:	f000 ffc2 	bl	8012e74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011ef0:	2301      	movs	r3, #1
 8011ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011ef4:	f001 fc8e 	bl	8013814 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011ef8:	f000 fcd8 	bl	80128ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011efc:	f001 fc56 	bl	80137ac <vPortEnterCritical>
 8011f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011f06:	b25b      	sxtb	r3, r3
 8011f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f0c:	d103      	bne.n	8011f16 <xQueueReceive+0x12e>
 8011f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f10:	2200      	movs	r2, #0
 8011f12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011f1c:	b25b      	sxtb	r3, r3
 8011f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f22:	d103      	bne.n	8011f2c <xQueueReceive+0x144>
 8011f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f26:	2200      	movs	r2, #0
 8011f28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011f2c:	f001 fc72 	bl	8013814 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011f30:	1d3a      	adds	r2, r7, #4
 8011f32:	f107 0310 	add.w	r3, r7, #16
 8011f36:	4611      	mov	r1, r2
 8011f38:	4618      	mov	r0, r3
 8011f3a:	f000 ffb1 	bl	8012ea0 <xTaskCheckForTimeOut>
 8011f3e:	4603      	mov	r3, r0
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d123      	bne.n	8011f8c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011f44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f46:	f000 fac9 	bl	80124dc <prvIsQueueEmpty>
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d017      	beq.n	8011f80 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011f50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f52:	3324      	adds	r3, #36	; 0x24
 8011f54:	687a      	ldr	r2, [r7, #4]
 8011f56:	4611      	mov	r1, r2
 8011f58:	4618      	mov	r0, r3
 8011f5a:	f000 ff01 	bl	8012d60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011f5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f60:	f000 fa6a 	bl	8012438 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011f64:	f000 fcb0 	bl	80128c8 <xTaskResumeAll>
 8011f68:	4603      	mov	r3, r0
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d189      	bne.n	8011e82 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8011f6e:	4b10      	ldr	r3, [pc, #64]	; (8011fb0 <xQueueReceive+0x1c8>)
 8011f70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f74:	601a      	str	r2, [r3, #0]
 8011f76:	f3bf 8f4f 	dsb	sy
 8011f7a:	f3bf 8f6f 	isb	sy
 8011f7e:	e780      	b.n	8011e82 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011f80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f82:	f000 fa59 	bl	8012438 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011f86:	f000 fc9f 	bl	80128c8 <xTaskResumeAll>
 8011f8a:	e77a      	b.n	8011e82 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011f8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f8e:	f000 fa53 	bl	8012438 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011f92:	f000 fc99 	bl	80128c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011f96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f98:	f000 faa0 	bl	80124dc <prvIsQueueEmpty>
 8011f9c:	4603      	mov	r3, r0
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	f43f af6f 	beq.w	8011e82 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011fa4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8011fa6:	4618      	mov	r0, r3
 8011fa8:	3730      	adds	r7, #48	; 0x30
 8011faa:	46bd      	mov	sp, r7
 8011fac:	bd80      	pop	{r7, pc}
 8011fae:	bf00      	nop
 8011fb0:	e000ed04 	.word	0xe000ed04

08011fb4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b08e      	sub	sp, #56	; 0x38
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
 8011fbc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011fc6:	2300      	movs	r3, #0
 8011fc8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d10c      	bne.n	8011fea <xQueueSemaphoreTake+0x36>
	__asm volatile
 8011fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fd4:	b672      	cpsid	i
 8011fd6:	f383 8811 	msr	BASEPRI, r3
 8011fda:	f3bf 8f6f 	isb	sy
 8011fde:	f3bf 8f4f 	dsb	sy
 8011fe2:	b662      	cpsie	i
 8011fe4:	623b      	str	r3, [r7, #32]
}
 8011fe6:	bf00      	nop
 8011fe8:	e7fe      	b.n	8011fe8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d00c      	beq.n	801200c <xQueueSemaphoreTake+0x58>
	__asm volatile
 8011ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ff6:	b672      	cpsid	i
 8011ff8:	f383 8811 	msr	BASEPRI, r3
 8011ffc:	f3bf 8f6f 	isb	sy
 8012000:	f3bf 8f4f 	dsb	sy
 8012004:	b662      	cpsie	i
 8012006:	61fb      	str	r3, [r7, #28]
}
 8012008:	bf00      	nop
 801200a:	e7fe      	b.n	801200a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801200c:	f001 f878 	bl	8013100 <xTaskGetSchedulerState>
 8012010:	4603      	mov	r3, r0
 8012012:	2b00      	cmp	r3, #0
 8012014:	d102      	bne.n	801201c <xQueueSemaphoreTake+0x68>
 8012016:	683b      	ldr	r3, [r7, #0]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d101      	bne.n	8012020 <xQueueSemaphoreTake+0x6c>
 801201c:	2301      	movs	r3, #1
 801201e:	e000      	b.n	8012022 <xQueueSemaphoreTake+0x6e>
 8012020:	2300      	movs	r3, #0
 8012022:	2b00      	cmp	r3, #0
 8012024:	d10c      	bne.n	8012040 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8012026:	f04f 0350 	mov.w	r3, #80	; 0x50
 801202a:	b672      	cpsid	i
 801202c:	f383 8811 	msr	BASEPRI, r3
 8012030:	f3bf 8f6f 	isb	sy
 8012034:	f3bf 8f4f 	dsb	sy
 8012038:	b662      	cpsie	i
 801203a:	61bb      	str	r3, [r7, #24]
}
 801203c:	bf00      	nop
 801203e:	e7fe      	b.n	801203e <xQueueSemaphoreTake+0x8a>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8012040:	f001 fbb4 	bl	80137ac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012048:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 801204a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801204c:	2b00      	cmp	r3, #0
 801204e:	d024      	beq.n	801209a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012052:	1e5a      	subs	r2, r3, #1
 8012054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012056:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801205a:	681b      	ldr	r3, [r3, #0]
 801205c:	2b00      	cmp	r3, #0
 801205e:	d104      	bne.n	801206a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8012060:	f001 fa20 	bl	80134a4 <pvTaskIncrementMutexHeldCount>
 8012064:	4602      	mov	r2, r0
 8012066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012068:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801206a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801206c:	691b      	ldr	r3, [r3, #16]
 801206e:	2b00      	cmp	r3, #0
 8012070:	d00f      	beq.n	8012092 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012074:	3310      	adds	r3, #16
 8012076:	4618      	mov	r0, r3
 8012078:	f000 fe98 	bl	8012dac <xTaskRemoveFromEventList>
 801207c:	4603      	mov	r3, r0
 801207e:	2b00      	cmp	r3, #0
 8012080:	d007      	beq.n	8012092 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012082:	4b55      	ldr	r3, [pc, #340]	; (80121d8 <xQueueSemaphoreTake+0x224>)
 8012084:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012088:	601a      	str	r2, [r3, #0]
 801208a:	f3bf 8f4f 	dsb	sy
 801208e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012092:	f001 fbbf 	bl	8013814 <vPortExitCritical>
				return pdPASS;
 8012096:	2301      	movs	r3, #1
 8012098:	e099      	b.n	80121ce <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801209a:	683b      	ldr	r3, [r7, #0]
 801209c:	2b00      	cmp	r3, #0
 801209e:	d113      	bne.n	80120c8 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80120a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d00c      	beq.n	80120c0 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80120a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80120aa:	b672      	cpsid	i
 80120ac:	f383 8811 	msr	BASEPRI, r3
 80120b0:	f3bf 8f6f 	isb	sy
 80120b4:	f3bf 8f4f 	dsb	sy
 80120b8:	b662      	cpsie	i
 80120ba:	617b      	str	r3, [r7, #20]
}
 80120bc:	bf00      	nop
 80120be:	e7fe      	b.n	80120be <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80120c0:	f001 fba8 	bl	8013814 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80120c4:	2300      	movs	r3, #0
 80120c6:	e082      	b.n	80121ce <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80120c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d106      	bne.n	80120dc <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80120ce:	f107 030c 	add.w	r3, r7, #12
 80120d2:	4618      	mov	r0, r3
 80120d4:	f000 fece 	bl	8012e74 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80120d8:	2301      	movs	r3, #1
 80120da:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80120dc:	f001 fb9a 	bl	8013814 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80120e0:	f000 fbe4 	bl	80128ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80120e4:	f001 fb62 	bl	80137ac <vPortEnterCritical>
 80120e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80120ee:	b25b      	sxtb	r3, r3
 80120f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120f4:	d103      	bne.n	80120fe <xQueueSemaphoreTake+0x14a>
 80120f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120f8:	2200      	movs	r2, #0
 80120fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80120fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012100:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012104:	b25b      	sxtb	r3, r3
 8012106:	f1b3 3fff 	cmp.w	r3, #4294967295
 801210a:	d103      	bne.n	8012114 <xQueueSemaphoreTake+0x160>
 801210c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801210e:	2200      	movs	r2, #0
 8012110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012114:	f001 fb7e 	bl	8013814 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012118:	463a      	mov	r2, r7
 801211a:	f107 030c 	add.w	r3, r7, #12
 801211e:	4611      	mov	r1, r2
 8012120:	4618      	mov	r0, r3
 8012122:	f000 febd 	bl	8012ea0 <xTaskCheckForTimeOut>
 8012126:	4603      	mov	r3, r0
 8012128:	2b00      	cmp	r3, #0
 801212a:	d132      	bne.n	8012192 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801212c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801212e:	f000 f9d5 	bl	80124dc <prvIsQueueEmpty>
 8012132:	4603      	mov	r3, r0
 8012134:	2b00      	cmp	r3, #0
 8012136:	d026      	beq.n	8012186 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801213a:	681b      	ldr	r3, [r3, #0]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d109      	bne.n	8012154 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8012140:	f001 fb34 	bl	80137ac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8012144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012146:	685b      	ldr	r3, [r3, #4]
 8012148:	4618      	mov	r0, r3
 801214a:	f000 fff7 	bl	801313c <xTaskPriorityInherit>
 801214e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012150:	f001 fb60 	bl	8013814 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012156:	3324      	adds	r3, #36	; 0x24
 8012158:	683a      	ldr	r2, [r7, #0]
 801215a:	4611      	mov	r1, r2
 801215c:	4618      	mov	r0, r3
 801215e:	f000 fdff 	bl	8012d60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012162:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012164:	f000 f968 	bl	8012438 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012168:	f000 fbae 	bl	80128c8 <xTaskResumeAll>
 801216c:	4603      	mov	r3, r0
 801216e:	2b00      	cmp	r3, #0
 8012170:	f47f af66 	bne.w	8012040 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8012174:	4b18      	ldr	r3, [pc, #96]	; (80121d8 <xQueueSemaphoreTake+0x224>)
 8012176:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801217a:	601a      	str	r2, [r3, #0]
 801217c:	f3bf 8f4f 	dsb	sy
 8012180:	f3bf 8f6f 	isb	sy
 8012184:	e75c      	b.n	8012040 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012186:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012188:	f000 f956 	bl	8012438 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801218c:	f000 fb9c 	bl	80128c8 <xTaskResumeAll>
 8012190:	e756      	b.n	8012040 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012192:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012194:	f000 f950 	bl	8012438 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012198:	f000 fb96 	bl	80128c8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801219c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801219e:	f000 f99d 	bl	80124dc <prvIsQueueEmpty>
 80121a2:	4603      	mov	r3, r0
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	f43f af4b 	beq.w	8012040 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80121aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d00d      	beq.n	80121cc <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80121b0:	f001 fafc 	bl	80137ac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80121b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80121b6:	f000 f897 	bl	80122e8 <prvGetDisinheritPriorityAfterTimeout>
 80121ba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80121bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121be:	685b      	ldr	r3, [r3, #4]
 80121c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80121c2:	4618      	mov	r0, r3
 80121c4:	f001 f8ca 	bl	801335c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80121c8:	f001 fb24 	bl	8013814 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80121cc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80121ce:	4618      	mov	r0, r3
 80121d0:	3738      	adds	r7, #56	; 0x38
 80121d2:	46bd      	mov	sp, r7
 80121d4:	bd80      	pop	{r7, pc}
 80121d6:	bf00      	nop
 80121d8:	e000ed04 	.word	0xe000ed04

080121dc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80121dc:	b580      	push	{r7, lr}
 80121de:	b08e      	sub	sp, #56	; 0x38
 80121e0:	af00      	add	r7, sp, #0
 80121e2:	60f8      	str	r0, [r7, #12]
 80121e4:	60b9      	str	r1, [r7, #8]
 80121e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80121ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ee:	2b00      	cmp	r3, #0
 80121f0:	d10c      	bne.n	801220c <xQueueReceiveFromISR+0x30>
	__asm volatile
 80121f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121f6:	b672      	cpsid	i
 80121f8:	f383 8811 	msr	BASEPRI, r3
 80121fc:	f3bf 8f6f 	isb	sy
 8012200:	f3bf 8f4f 	dsb	sy
 8012204:	b662      	cpsie	i
 8012206:	623b      	str	r3, [r7, #32]
}
 8012208:	bf00      	nop
 801220a:	e7fe      	b.n	801220a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801220c:	68bb      	ldr	r3, [r7, #8]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d103      	bne.n	801221a <xQueueReceiveFromISR+0x3e>
 8012212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012216:	2b00      	cmp	r3, #0
 8012218:	d101      	bne.n	801221e <xQueueReceiveFromISR+0x42>
 801221a:	2301      	movs	r3, #1
 801221c:	e000      	b.n	8012220 <xQueueReceiveFromISR+0x44>
 801221e:	2300      	movs	r3, #0
 8012220:	2b00      	cmp	r3, #0
 8012222:	d10c      	bne.n	801223e <xQueueReceiveFromISR+0x62>
	__asm volatile
 8012224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012228:	b672      	cpsid	i
 801222a:	f383 8811 	msr	BASEPRI, r3
 801222e:	f3bf 8f6f 	isb	sy
 8012232:	f3bf 8f4f 	dsb	sy
 8012236:	b662      	cpsie	i
 8012238:	61fb      	str	r3, [r7, #28]
}
 801223a:	bf00      	nop
 801223c:	e7fe      	b.n	801223c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801223e:	f001 fb9d 	bl	801397c <vPortValidateInterruptPriority>
	__asm volatile
 8012242:	f3ef 8211 	mrs	r2, BASEPRI
 8012246:	f04f 0350 	mov.w	r3, #80	; 0x50
 801224a:	b672      	cpsid	i
 801224c:	f383 8811 	msr	BASEPRI, r3
 8012250:	f3bf 8f6f 	isb	sy
 8012254:	f3bf 8f4f 	dsb	sy
 8012258:	b662      	cpsie	i
 801225a:	61ba      	str	r2, [r7, #24]
 801225c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801225e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012260:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012264:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012266:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801226a:	2b00      	cmp	r3, #0
 801226c:	d02f      	beq.n	80122ce <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801226e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012270:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012278:	68b9      	ldr	r1, [r7, #8]
 801227a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801227c:	f000 f8b6 	bl	80123ec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012282:	1e5a      	subs	r2, r3, #1
 8012284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012286:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012288:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801228c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012290:	d112      	bne.n	80122b8 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012294:	691b      	ldr	r3, [r3, #16]
 8012296:	2b00      	cmp	r3, #0
 8012298:	d016      	beq.n	80122c8 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801229a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801229c:	3310      	adds	r3, #16
 801229e:	4618      	mov	r0, r3
 80122a0:	f000 fd84 	bl	8012dac <xTaskRemoveFromEventList>
 80122a4:	4603      	mov	r3, r0
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d00e      	beq.n	80122c8 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80122aa:	687b      	ldr	r3, [r7, #4]
 80122ac:	2b00      	cmp	r3, #0
 80122ae:	d00b      	beq.n	80122c8 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	2201      	movs	r2, #1
 80122b4:	601a      	str	r2, [r3, #0]
 80122b6:	e007      	b.n	80122c8 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80122b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80122bc:	3301      	adds	r3, #1
 80122be:	b2db      	uxtb	r3, r3
 80122c0:	b25a      	sxtb	r2, r3
 80122c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80122c8:	2301      	movs	r3, #1
 80122ca:	637b      	str	r3, [r7, #52]	; 0x34
 80122cc:	e001      	b.n	80122d2 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80122ce:	2300      	movs	r3, #0
 80122d0:	637b      	str	r3, [r7, #52]	; 0x34
 80122d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80122d6:	693b      	ldr	r3, [r7, #16]
 80122d8:	f383 8811 	msr	BASEPRI, r3
}
 80122dc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80122de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80122e0:	4618      	mov	r0, r3
 80122e2:	3738      	adds	r7, #56	; 0x38
 80122e4:	46bd      	mov	sp, r7
 80122e6:	bd80      	pop	{r7, pc}

080122e8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80122e8:	b480      	push	{r7}
 80122ea:	b085      	sub	sp, #20
 80122ec:	af00      	add	r7, sp, #0
 80122ee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80122f4:	2b00      	cmp	r3, #0
 80122f6:	d006      	beq.n	8012306 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80122f8:	687b      	ldr	r3, [r7, #4]
 80122fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	f1c3 0307 	rsb	r3, r3, #7
 8012302:	60fb      	str	r3, [r7, #12]
 8012304:	e001      	b.n	801230a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012306:	2300      	movs	r3, #0
 8012308:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 801230a:	68fb      	ldr	r3, [r7, #12]
	}
 801230c:	4618      	mov	r0, r3
 801230e:	3714      	adds	r7, #20
 8012310:	46bd      	mov	sp, r7
 8012312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012316:	4770      	bx	lr

08012318 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8012318:	b580      	push	{r7, lr}
 801231a:	b086      	sub	sp, #24
 801231c:	af00      	add	r7, sp, #0
 801231e:	60f8      	str	r0, [r7, #12]
 8012320:	60b9      	str	r1, [r7, #8]
 8012322:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8012324:	2300      	movs	r3, #0
 8012326:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012328:	68fb      	ldr	r3, [r7, #12]
 801232a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801232c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801232e:	68fb      	ldr	r3, [r7, #12]
 8012330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012332:	2b00      	cmp	r3, #0
 8012334:	d10d      	bne.n	8012352 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	681b      	ldr	r3, [r3, #0]
 801233a:	2b00      	cmp	r3, #0
 801233c:	d14d      	bne.n	80123da <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 801233e:	68fb      	ldr	r3, [r7, #12]
 8012340:	685b      	ldr	r3, [r3, #4]
 8012342:	4618      	mov	r0, r3
 8012344:	f000 ff80 	bl	8013248 <xTaskPriorityDisinherit>
 8012348:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 801234a:	68fb      	ldr	r3, [r7, #12]
 801234c:	2200      	movs	r2, #0
 801234e:	605a      	str	r2, [r3, #4]
 8012350:	e043      	b.n	80123da <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d119      	bne.n	801238c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8012358:	68fb      	ldr	r3, [r7, #12]
 801235a:	6898      	ldr	r0, [r3, #8]
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012360:	461a      	mov	r2, r3
 8012362:	68b9      	ldr	r1, [r7, #8]
 8012364:	f010 f9b0 	bl	80226c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	689a      	ldr	r2, [r3, #8]
 801236c:	68fb      	ldr	r3, [r7, #12]
 801236e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012370:	441a      	add	r2, r3
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	689a      	ldr	r2, [r3, #8]
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	685b      	ldr	r3, [r3, #4]
 801237e:	429a      	cmp	r2, r3
 8012380:	d32b      	bcc.n	80123da <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8012382:	68fb      	ldr	r3, [r7, #12]
 8012384:	681a      	ldr	r2, [r3, #0]
 8012386:	68fb      	ldr	r3, [r7, #12]
 8012388:	609a      	str	r2, [r3, #8]
 801238a:	e026      	b.n	80123da <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801238c:	68fb      	ldr	r3, [r7, #12]
 801238e:	68d8      	ldr	r0, [r3, #12]
 8012390:	68fb      	ldr	r3, [r7, #12]
 8012392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012394:	461a      	mov	r2, r3
 8012396:	68b9      	ldr	r1, [r7, #8]
 8012398:	f010 f996 	bl	80226c8 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	68da      	ldr	r2, [r3, #12]
 80123a0:	68fb      	ldr	r3, [r7, #12]
 80123a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123a4:	425b      	negs	r3, r3
 80123a6:	441a      	add	r2, r3
 80123a8:	68fb      	ldr	r3, [r7, #12]
 80123aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	68da      	ldr	r2, [r3, #12]
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	681b      	ldr	r3, [r3, #0]
 80123b4:	429a      	cmp	r2, r3
 80123b6:	d207      	bcs.n	80123c8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	685a      	ldr	r2, [r3, #4]
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123c0:	425b      	negs	r3, r3
 80123c2:	441a      	add	r2, r3
 80123c4:	68fb      	ldr	r3, [r7, #12]
 80123c6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	2b02      	cmp	r3, #2
 80123cc:	d105      	bne.n	80123da <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80123ce:	693b      	ldr	r3, [r7, #16]
 80123d0:	2b00      	cmp	r3, #0
 80123d2:	d002      	beq.n	80123da <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80123d4:	693b      	ldr	r3, [r7, #16]
 80123d6:	3b01      	subs	r3, #1
 80123d8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80123da:	693b      	ldr	r3, [r7, #16]
 80123dc:	1c5a      	adds	r2, r3, #1
 80123de:	68fb      	ldr	r3, [r7, #12]
 80123e0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80123e2:	697b      	ldr	r3, [r7, #20]
}
 80123e4:	4618      	mov	r0, r3
 80123e6:	3718      	adds	r7, #24
 80123e8:	46bd      	mov	sp, r7
 80123ea:	bd80      	pop	{r7, pc}

080123ec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b082      	sub	sp, #8
 80123f0:	af00      	add	r7, sp, #0
 80123f2:	6078      	str	r0, [r7, #4]
 80123f4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123fa:	2b00      	cmp	r3, #0
 80123fc:	d018      	beq.n	8012430 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	68da      	ldr	r2, [r3, #12]
 8012402:	687b      	ldr	r3, [r7, #4]
 8012404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012406:	441a      	add	r2, r3
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	68da      	ldr	r2, [r3, #12]
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	685b      	ldr	r3, [r3, #4]
 8012414:	429a      	cmp	r2, r3
 8012416:	d303      	bcc.n	8012420 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	681a      	ldr	r2, [r3, #0]
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	68d9      	ldr	r1, [r3, #12]
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012428:	461a      	mov	r2, r3
 801242a:	6838      	ldr	r0, [r7, #0]
 801242c:	f010 f94c 	bl	80226c8 <memcpy>
	}
}
 8012430:	bf00      	nop
 8012432:	3708      	adds	r7, #8
 8012434:	46bd      	mov	sp, r7
 8012436:	bd80      	pop	{r7, pc}

08012438 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012438:	b580      	push	{r7, lr}
 801243a:	b084      	sub	sp, #16
 801243c:	af00      	add	r7, sp, #0
 801243e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012440:	f001 f9b4 	bl	80137ac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8012444:	687b      	ldr	r3, [r7, #4]
 8012446:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801244a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801244c:	e011      	b.n	8012472 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012452:	2b00      	cmp	r3, #0
 8012454:	d012      	beq.n	801247c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	3324      	adds	r3, #36	; 0x24
 801245a:	4618      	mov	r0, r3
 801245c:	f000 fca6 	bl	8012dac <xTaskRemoveFromEventList>
 8012460:	4603      	mov	r3, r0
 8012462:	2b00      	cmp	r3, #0
 8012464:	d001      	beq.n	801246a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8012466:	f000 fd81 	bl	8012f6c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 801246a:	7bfb      	ldrb	r3, [r7, #15]
 801246c:	3b01      	subs	r3, #1
 801246e:	b2db      	uxtb	r3, r3
 8012470:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012476:	2b00      	cmp	r3, #0
 8012478:	dce9      	bgt.n	801244e <prvUnlockQueue+0x16>
 801247a:	e000      	b.n	801247e <prvUnlockQueue+0x46>
					break;
 801247c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	22ff      	movs	r2, #255	; 0xff
 8012482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012486:	f001 f9c5 	bl	8013814 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 801248a:	f001 f98f 	bl	80137ac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012494:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012496:	e011      	b.n	80124bc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	691b      	ldr	r3, [r3, #16]
 801249c:	2b00      	cmp	r3, #0
 801249e:	d012      	beq.n	80124c6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	3310      	adds	r3, #16
 80124a4:	4618      	mov	r0, r3
 80124a6:	f000 fc81 	bl	8012dac <xTaskRemoveFromEventList>
 80124aa:	4603      	mov	r3, r0
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d001      	beq.n	80124b4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80124b0:	f000 fd5c 	bl	8012f6c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80124b4:	7bbb      	ldrb	r3, [r7, #14]
 80124b6:	3b01      	subs	r3, #1
 80124b8:	b2db      	uxtb	r3, r3
 80124ba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80124bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80124c0:	2b00      	cmp	r3, #0
 80124c2:	dce9      	bgt.n	8012498 <prvUnlockQueue+0x60>
 80124c4:	e000      	b.n	80124c8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80124c6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	22ff      	movs	r2, #255	; 0xff
 80124cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80124d0:	f001 f9a0 	bl	8013814 <vPortExitCritical>
}
 80124d4:	bf00      	nop
 80124d6:	3710      	adds	r7, #16
 80124d8:	46bd      	mov	sp, r7
 80124da:	bd80      	pop	{r7, pc}

080124dc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80124dc:	b580      	push	{r7, lr}
 80124de:	b084      	sub	sp, #16
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80124e4:	f001 f962 	bl	80137ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d102      	bne.n	80124f6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80124f0:	2301      	movs	r3, #1
 80124f2:	60fb      	str	r3, [r7, #12]
 80124f4:	e001      	b.n	80124fa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80124f6:	2300      	movs	r3, #0
 80124f8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80124fa:	f001 f98b 	bl	8013814 <vPortExitCritical>

	return xReturn;
 80124fe:	68fb      	ldr	r3, [r7, #12]
}
 8012500:	4618      	mov	r0, r3
 8012502:	3710      	adds	r7, #16
 8012504:	46bd      	mov	sp, r7
 8012506:	bd80      	pop	{r7, pc}

08012508 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b084      	sub	sp, #16
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8012510:	f001 f94c 	bl	80137ac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801251c:	429a      	cmp	r2, r3
 801251e:	d102      	bne.n	8012526 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8012520:	2301      	movs	r3, #1
 8012522:	60fb      	str	r3, [r7, #12]
 8012524:	e001      	b.n	801252a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8012526:	2300      	movs	r3, #0
 8012528:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 801252a:	f001 f973 	bl	8013814 <vPortExitCritical>

	return xReturn;
 801252e:	68fb      	ldr	r3, [r7, #12]
}
 8012530:	4618      	mov	r0, r3
 8012532:	3710      	adds	r7, #16
 8012534:	46bd      	mov	sp, r7
 8012536:	bd80      	pop	{r7, pc}

08012538 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012538:	b580      	push	{r7, lr}
 801253a:	b08c      	sub	sp, #48	; 0x30
 801253c:	af04      	add	r7, sp, #16
 801253e:	60f8      	str	r0, [r7, #12]
 8012540:	60b9      	str	r1, [r7, #8]
 8012542:	603b      	str	r3, [r7, #0]
 8012544:	4613      	mov	r3, r2
 8012546:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012548:	88fb      	ldrh	r3, [r7, #6]
 801254a:	009b      	lsls	r3, r3, #2
 801254c:	4618      	mov	r0, r3
 801254e:	f001 fa59 	bl	8013a04 <pvPortMalloc>
 8012552:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8012554:	697b      	ldr	r3, [r7, #20]
 8012556:	2b00      	cmp	r3, #0
 8012558:	d00e      	beq.n	8012578 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 801255a:	2058      	movs	r0, #88	; 0x58
 801255c:	f001 fa52 	bl	8013a04 <pvPortMalloc>
 8012560:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8012562:	69fb      	ldr	r3, [r7, #28]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d003      	beq.n	8012570 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012568:	69fb      	ldr	r3, [r7, #28]
 801256a:	697a      	ldr	r2, [r7, #20]
 801256c:	631a      	str	r2, [r3, #48]	; 0x30
 801256e:	e005      	b.n	801257c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012570:	6978      	ldr	r0, [r7, #20]
 8012572:	f001 fb17 	bl	8013ba4 <vPortFree>
 8012576:	e001      	b.n	801257c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012578:	2300      	movs	r3, #0
 801257a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801257c:	69fb      	ldr	r3, [r7, #28]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d013      	beq.n	80125aa <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8012582:	88fa      	ldrh	r2, [r7, #6]
 8012584:	2300      	movs	r3, #0
 8012586:	9303      	str	r3, [sp, #12]
 8012588:	69fb      	ldr	r3, [r7, #28]
 801258a:	9302      	str	r3, [sp, #8]
 801258c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801258e:	9301      	str	r3, [sp, #4]
 8012590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012592:	9300      	str	r3, [sp, #0]
 8012594:	683b      	ldr	r3, [r7, #0]
 8012596:	68b9      	ldr	r1, [r7, #8]
 8012598:	68f8      	ldr	r0, [r7, #12]
 801259a:	f000 f80e 	bl	80125ba <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801259e:	69f8      	ldr	r0, [r7, #28]
 80125a0:	f000 f898 	bl	80126d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80125a4:	2301      	movs	r3, #1
 80125a6:	61bb      	str	r3, [r7, #24]
 80125a8:	e002      	b.n	80125b0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80125aa:	f04f 33ff 	mov.w	r3, #4294967295
 80125ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80125b0:	69bb      	ldr	r3, [r7, #24]
	}
 80125b2:	4618      	mov	r0, r3
 80125b4:	3720      	adds	r7, #32
 80125b6:	46bd      	mov	sp, r7
 80125b8:	bd80      	pop	{r7, pc}

080125ba <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80125ba:	b580      	push	{r7, lr}
 80125bc:	b088      	sub	sp, #32
 80125be:	af00      	add	r7, sp, #0
 80125c0:	60f8      	str	r0, [r7, #12]
 80125c2:	60b9      	str	r1, [r7, #8]
 80125c4:	607a      	str	r2, [r7, #4]
 80125c6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80125c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125ca:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80125cc:	687b      	ldr	r3, [r7, #4]
 80125ce:	009b      	lsls	r3, r3, #2
 80125d0:	461a      	mov	r2, r3
 80125d2:	21a5      	movs	r1, #165	; 0xa5
 80125d4:	f010 f886 	bl	80226e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80125d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80125dc:	6879      	ldr	r1, [r7, #4]
 80125de:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80125e2:	440b      	add	r3, r1
 80125e4:	009b      	lsls	r3, r3, #2
 80125e6:	4413      	add	r3, r2
 80125e8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 80125ea:	69bb      	ldr	r3, [r7, #24]
 80125ec:	f023 0307 	bic.w	r3, r3, #7
 80125f0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80125f2:	69bb      	ldr	r3, [r7, #24]
 80125f4:	f003 0307 	and.w	r3, r3, #7
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d00c      	beq.n	8012616 <prvInitialiseNewTask+0x5c>
	__asm volatile
 80125fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012600:	b672      	cpsid	i
 8012602:	f383 8811 	msr	BASEPRI, r3
 8012606:	f3bf 8f6f 	isb	sy
 801260a:	f3bf 8f4f 	dsb	sy
 801260e:	b662      	cpsie	i
 8012610:	617b      	str	r3, [r7, #20]
}
 8012612:	bf00      	nop
 8012614:	e7fe      	b.n	8012614 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012616:	2300      	movs	r3, #0
 8012618:	61fb      	str	r3, [r7, #28]
 801261a:	e012      	b.n	8012642 <prvInitialiseNewTask+0x88>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801261c:	68ba      	ldr	r2, [r7, #8]
 801261e:	69fb      	ldr	r3, [r7, #28]
 8012620:	4413      	add	r3, r2
 8012622:	7819      	ldrb	r1, [r3, #0]
 8012624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012626:	69fb      	ldr	r3, [r7, #28]
 8012628:	4413      	add	r3, r2
 801262a:	3334      	adds	r3, #52	; 0x34
 801262c:	460a      	mov	r2, r1
 801262e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8012630:	68ba      	ldr	r2, [r7, #8]
 8012632:	69fb      	ldr	r3, [r7, #28]
 8012634:	4413      	add	r3, r2
 8012636:	781b      	ldrb	r3, [r3, #0]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d006      	beq.n	801264a <prvInitialiseNewTask+0x90>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801263c:	69fb      	ldr	r3, [r7, #28]
 801263e:	3301      	adds	r3, #1
 8012640:	61fb      	str	r3, [r7, #28]
 8012642:	69fb      	ldr	r3, [r7, #28]
 8012644:	2b0f      	cmp	r3, #15
 8012646:	d9e9      	bls.n	801261c <prvInitialiseNewTask+0x62>
 8012648:	e000      	b.n	801264c <prvInitialiseNewTask+0x92>
		{
			break;
 801264a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801264c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801264e:	2200      	movs	r2, #0
 8012650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8012654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012656:	2b06      	cmp	r3, #6
 8012658:	d901      	bls.n	801265e <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801265a:	2306      	movs	r3, #6
 801265c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801265e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012660:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012662:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8012664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012668:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801266a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801266c:	2200      	movs	r2, #0
 801266e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012672:	3304      	adds	r3, #4
 8012674:	4618      	mov	r0, r3
 8012676:	f7fe ffeb 	bl	8011650 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801267a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801267c:	3318      	adds	r3, #24
 801267e:	4618      	mov	r0, r3
 8012680:	f7fe ffe6 	bl	8011650 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8012684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012686:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012688:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801268a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801268c:	f1c3 0207 	rsb	r2, r3, #7
 8012690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012692:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8012694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012696:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012698:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 801269a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801269c:	2200      	movs	r2, #0
 801269e:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80126a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126a2:	2200      	movs	r2, #0
 80126a4:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80126a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126a8:	2200      	movs	r2, #0
 80126aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80126ae:	683a      	ldr	r2, [r7, #0]
 80126b0:	68f9      	ldr	r1, [r7, #12]
 80126b2:	69b8      	ldr	r0, [r7, #24]
 80126b4:	f000 ff70 	bl	8013598 <pxPortInitialiseStack>
 80126b8:	4602      	mov	r2, r0
 80126ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80126bc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80126be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d002      	beq.n	80126ca <prvInitialiseNewTask+0x110>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80126c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80126c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80126ca:	bf00      	nop
 80126cc:	3720      	adds	r7, #32
 80126ce:	46bd      	mov	sp, r7
 80126d0:	bd80      	pop	{r7, pc}
	...

080126d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80126d4:	b580      	push	{r7, lr}
 80126d6:	b082      	sub	sp, #8
 80126d8:	af00      	add	r7, sp, #0
 80126da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80126dc:	f001 f866 	bl	80137ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80126e0:	4b2a      	ldr	r3, [pc, #168]	; (801278c <prvAddNewTaskToReadyList+0xb8>)
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	3301      	adds	r3, #1
 80126e6:	4a29      	ldr	r2, [pc, #164]	; (801278c <prvAddNewTaskToReadyList+0xb8>)
 80126e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80126ea:	4b29      	ldr	r3, [pc, #164]	; (8012790 <prvAddNewTaskToReadyList+0xbc>)
 80126ec:	681b      	ldr	r3, [r3, #0]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d109      	bne.n	8012706 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80126f2:	4a27      	ldr	r2, [pc, #156]	; (8012790 <prvAddNewTaskToReadyList+0xbc>)
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80126f8:	4b24      	ldr	r3, [pc, #144]	; (801278c <prvAddNewTaskToReadyList+0xb8>)
 80126fa:	681b      	ldr	r3, [r3, #0]
 80126fc:	2b01      	cmp	r3, #1
 80126fe:	d110      	bne.n	8012722 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012700:	f000 fc5a 	bl	8012fb8 <prvInitialiseTaskLists>
 8012704:	e00d      	b.n	8012722 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8012706:	4b23      	ldr	r3, [pc, #140]	; (8012794 <prvAddNewTaskToReadyList+0xc0>)
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d109      	bne.n	8012722 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801270e:	4b20      	ldr	r3, [pc, #128]	; (8012790 <prvAddNewTaskToReadyList+0xbc>)
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012714:	687b      	ldr	r3, [r7, #4]
 8012716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012718:	429a      	cmp	r2, r3
 801271a:	d802      	bhi.n	8012722 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801271c:	4a1c      	ldr	r2, [pc, #112]	; (8012790 <prvAddNewTaskToReadyList+0xbc>)
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8012722:	4b1d      	ldr	r3, [pc, #116]	; (8012798 <prvAddNewTaskToReadyList+0xc4>)
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	3301      	adds	r3, #1
 8012728:	4a1b      	ldr	r2, [pc, #108]	; (8012798 <prvAddNewTaskToReadyList+0xc4>)
 801272a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012730:	2201      	movs	r2, #1
 8012732:	409a      	lsls	r2, r3
 8012734:	4b19      	ldr	r3, [pc, #100]	; (801279c <prvAddNewTaskToReadyList+0xc8>)
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	4313      	orrs	r3, r2
 801273a:	4a18      	ldr	r2, [pc, #96]	; (801279c <prvAddNewTaskToReadyList+0xc8>)
 801273c:	6013      	str	r3, [r2, #0]
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012742:	4613      	mov	r3, r2
 8012744:	009b      	lsls	r3, r3, #2
 8012746:	4413      	add	r3, r2
 8012748:	009b      	lsls	r3, r3, #2
 801274a:	4a15      	ldr	r2, [pc, #84]	; (80127a0 <prvAddNewTaskToReadyList+0xcc>)
 801274c:	441a      	add	r2, r3
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	3304      	adds	r3, #4
 8012752:	4619      	mov	r1, r3
 8012754:	4610      	mov	r0, r2
 8012756:	f7fe ff88 	bl	801166a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801275a:	f001 f85b 	bl	8013814 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801275e:	4b0d      	ldr	r3, [pc, #52]	; (8012794 <prvAddNewTaskToReadyList+0xc0>)
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	2b00      	cmp	r3, #0
 8012764:	d00e      	beq.n	8012784 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012766:	4b0a      	ldr	r3, [pc, #40]	; (8012790 <prvAddNewTaskToReadyList+0xbc>)
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801276c:	687b      	ldr	r3, [r7, #4]
 801276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012770:	429a      	cmp	r2, r3
 8012772:	d207      	bcs.n	8012784 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012774:	4b0b      	ldr	r3, [pc, #44]	; (80127a4 <prvAddNewTaskToReadyList+0xd0>)
 8012776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801277a:	601a      	str	r2, [r3, #0]
 801277c:	f3bf 8f4f 	dsb	sy
 8012780:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012784:	bf00      	nop
 8012786:	3708      	adds	r7, #8
 8012788:	46bd      	mov	sp, r7
 801278a:	bd80      	pop	{r7, pc}
 801278c:	2000024c 	.word	0x2000024c
 8012790:	2000014c 	.word	0x2000014c
 8012794:	20000258 	.word	0x20000258
 8012798:	20000268 	.word	0x20000268
 801279c:	20000254 	.word	0x20000254
 80127a0:	20000150 	.word	0x20000150
 80127a4:	e000ed04 	.word	0xe000ed04

080127a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b084      	sub	sp, #16
 80127ac:	af00      	add	r7, sp, #0
 80127ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80127b0:	2300      	movs	r3, #0
 80127b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d019      	beq.n	80127ee <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80127ba:	4b14      	ldr	r3, [pc, #80]	; (801280c <vTaskDelay+0x64>)
 80127bc:	681b      	ldr	r3, [r3, #0]
 80127be:	2b00      	cmp	r3, #0
 80127c0:	d00c      	beq.n	80127dc <vTaskDelay+0x34>
	__asm volatile
 80127c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127c6:	b672      	cpsid	i
 80127c8:	f383 8811 	msr	BASEPRI, r3
 80127cc:	f3bf 8f6f 	isb	sy
 80127d0:	f3bf 8f4f 	dsb	sy
 80127d4:	b662      	cpsie	i
 80127d6:	60bb      	str	r3, [r7, #8]
}
 80127d8:	bf00      	nop
 80127da:	e7fe      	b.n	80127da <vTaskDelay+0x32>
			vTaskSuspendAll();
 80127dc:	f000 f866 	bl	80128ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80127e0:	2100      	movs	r1, #0
 80127e2:	6878      	ldr	r0, [r7, #4]
 80127e4:	f000 fe72 	bl	80134cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80127e8:	f000 f86e 	bl	80128c8 <xTaskResumeAll>
 80127ec:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d107      	bne.n	8012804 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80127f4:	4b06      	ldr	r3, [pc, #24]	; (8012810 <vTaskDelay+0x68>)
 80127f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80127fa:	601a      	str	r2, [r3, #0]
 80127fc:	f3bf 8f4f 	dsb	sy
 8012800:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012804:	bf00      	nop
 8012806:	3710      	adds	r7, #16
 8012808:	46bd      	mov	sp, r7
 801280a:	bd80      	pop	{r7, pc}
 801280c:	20000274 	.word	0x20000274
 8012810:	e000ed04 	.word	0xe000ed04

08012814 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8012814:	b580      	push	{r7, lr}
 8012816:	b086      	sub	sp, #24
 8012818:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 801281a:	4b1e      	ldr	r3, [pc, #120]	; (8012894 <vTaskStartScheduler+0x80>)
 801281c:	9301      	str	r3, [sp, #4]
 801281e:	2300      	movs	r3, #0
 8012820:	9300      	str	r3, [sp, #0]
 8012822:	2300      	movs	r3, #0
 8012824:	2280      	movs	r2, #128	; 0x80
 8012826:	491c      	ldr	r1, [pc, #112]	; (8012898 <vTaskStartScheduler+0x84>)
 8012828:	481c      	ldr	r0, [pc, #112]	; (801289c <vTaskStartScheduler+0x88>)
 801282a:	f7ff fe85 	bl	8012538 <xTaskCreate>
 801282e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	2b01      	cmp	r3, #1
 8012834:	d118      	bne.n	8012868 <vTaskStartScheduler+0x54>
	__asm volatile
 8012836:	f04f 0350 	mov.w	r3, #80	; 0x50
 801283a:	b672      	cpsid	i
 801283c:	f383 8811 	msr	BASEPRI, r3
 8012840:	f3bf 8f6f 	isb	sy
 8012844:	f3bf 8f4f 	dsb	sy
 8012848:	b662      	cpsie	i
 801284a:	60bb      	str	r3, [r7, #8]
}
 801284c:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801284e:	4b14      	ldr	r3, [pc, #80]	; (80128a0 <vTaskStartScheduler+0x8c>)
 8012850:	f04f 32ff 	mov.w	r2, #4294967295
 8012854:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012856:	4b13      	ldr	r3, [pc, #76]	; (80128a4 <vTaskStartScheduler+0x90>)
 8012858:	2201      	movs	r2, #1
 801285a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 801285c:	4b12      	ldr	r3, [pc, #72]	; (80128a8 <vTaskStartScheduler+0x94>)
 801285e:	2200      	movs	r2, #0
 8012860:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8012862:	f000 ff25 	bl	80136b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012866:	e010      	b.n	801288a <vTaskStartScheduler+0x76>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801286e:	d10c      	bne.n	801288a <vTaskStartScheduler+0x76>
	__asm volatile
 8012870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012874:	b672      	cpsid	i
 8012876:	f383 8811 	msr	BASEPRI, r3
 801287a:	f3bf 8f6f 	isb	sy
 801287e:	f3bf 8f4f 	dsb	sy
 8012882:	b662      	cpsie	i
 8012884:	607b      	str	r3, [r7, #4]
}
 8012886:	bf00      	nop
 8012888:	e7fe      	b.n	8012888 <vTaskStartScheduler+0x74>
}
 801288a:	bf00      	nop
 801288c:	3710      	adds	r7, #16
 801288e:	46bd      	mov	sp, r7
 8012890:	bd80      	pop	{r7, pc}
 8012892:	bf00      	nop
 8012894:	20000270 	.word	0x20000270
 8012898:	08023df0 	.word	0x08023df0
 801289c:	08012f85 	.word	0x08012f85
 80128a0:	2000026c 	.word	0x2000026c
 80128a4:	20000258 	.word	0x20000258
 80128a8:	20000250 	.word	0x20000250

080128ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80128ac:	b480      	push	{r7}
 80128ae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80128b0:	4b04      	ldr	r3, [pc, #16]	; (80128c4 <vTaskSuspendAll+0x18>)
 80128b2:	681b      	ldr	r3, [r3, #0]
 80128b4:	3301      	adds	r3, #1
 80128b6:	4a03      	ldr	r2, [pc, #12]	; (80128c4 <vTaskSuspendAll+0x18>)
 80128b8:	6013      	str	r3, [r2, #0]
}
 80128ba:	bf00      	nop
 80128bc:	46bd      	mov	sp, r7
 80128be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128c2:	4770      	bx	lr
 80128c4:	20000274 	.word	0x20000274

080128c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80128c8:	b580      	push	{r7, lr}
 80128ca:	b084      	sub	sp, #16
 80128cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80128ce:	2300      	movs	r3, #0
 80128d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80128d2:	2300      	movs	r3, #0
 80128d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80128d6:	4b42      	ldr	r3, [pc, #264]	; (80129e0 <xTaskResumeAll+0x118>)
 80128d8:	681b      	ldr	r3, [r3, #0]
 80128da:	2b00      	cmp	r3, #0
 80128dc:	d10c      	bne.n	80128f8 <xTaskResumeAll+0x30>
	__asm volatile
 80128de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80128e2:	b672      	cpsid	i
 80128e4:	f383 8811 	msr	BASEPRI, r3
 80128e8:	f3bf 8f6f 	isb	sy
 80128ec:	f3bf 8f4f 	dsb	sy
 80128f0:	b662      	cpsie	i
 80128f2:	603b      	str	r3, [r7, #0]
}
 80128f4:	bf00      	nop
 80128f6:	e7fe      	b.n	80128f6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80128f8:	f000 ff58 	bl	80137ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80128fc:	4b38      	ldr	r3, [pc, #224]	; (80129e0 <xTaskResumeAll+0x118>)
 80128fe:	681b      	ldr	r3, [r3, #0]
 8012900:	3b01      	subs	r3, #1
 8012902:	4a37      	ldr	r2, [pc, #220]	; (80129e0 <xTaskResumeAll+0x118>)
 8012904:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012906:	4b36      	ldr	r3, [pc, #216]	; (80129e0 <xTaskResumeAll+0x118>)
 8012908:	681b      	ldr	r3, [r3, #0]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d161      	bne.n	80129d2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801290e:	4b35      	ldr	r3, [pc, #212]	; (80129e4 <xTaskResumeAll+0x11c>)
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d05d      	beq.n	80129d2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012916:	e02e      	b.n	8012976 <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8012918:	4b33      	ldr	r3, [pc, #204]	; (80129e8 <xTaskResumeAll+0x120>)
 801291a:	68db      	ldr	r3, [r3, #12]
 801291c:	68db      	ldr	r3, [r3, #12]
 801291e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	3318      	adds	r3, #24
 8012924:	4618      	mov	r0, r3
 8012926:	f7fe fefd 	bl	8011724 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801292a:	68fb      	ldr	r3, [r7, #12]
 801292c:	3304      	adds	r3, #4
 801292e:	4618      	mov	r0, r3
 8012930:	f7fe fef8 	bl	8011724 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012938:	2201      	movs	r2, #1
 801293a:	409a      	lsls	r2, r3
 801293c:	4b2b      	ldr	r3, [pc, #172]	; (80129ec <xTaskResumeAll+0x124>)
 801293e:	681b      	ldr	r3, [r3, #0]
 8012940:	4313      	orrs	r3, r2
 8012942:	4a2a      	ldr	r2, [pc, #168]	; (80129ec <xTaskResumeAll+0x124>)
 8012944:	6013      	str	r3, [r2, #0]
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801294a:	4613      	mov	r3, r2
 801294c:	009b      	lsls	r3, r3, #2
 801294e:	4413      	add	r3, r2
 8012950:	009b      	lsls	r3, r3, #2
 8012952:	4a27      	ldr	r2, [pc, #156]	; (80129f0 <xTaskResumeAll+0x128>)
 8012954:	441a      	add	r2, r3
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	3304      	adds	r3, #4
 801295a:	4619      	mov	r1, r3
 801295c:	4610      	mov	r0, r2
 801295e:	f7fe fe84 	bl	801166a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012962:	68fb      	ldr	r3, [r7, #12]
 8012964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012966:	4b23      	ldr	r3, [pc, #140]	; (80129f4 <xTaskResumeAll+0x12c>)
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801296c:	429a      	cmp	r2, r3
 801296e:	d302      	bcc.n	8012976 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8012970:	4b21      	ldr	r3, [pc, #132]	; (80129f8 <xTaskResumeAll+0x130>)
 8012972:	2201      	movs	r2, #1
 8012974:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012976:	4b1c      	ldr	r3, [pc, #112]	; (80129e8 <xTaskResumeAll+0x120>)
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	2b00      	cmp	r3, #0
 801297c:	d1cc      	bne.n	8012918 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801297e:	68fb      	ldr	r3, [r7, #12]
 8012980:	2b00      	cmp	r3, #0
 8012982:	d001      	beq.n	8012988 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012984:	f000 fb96 	bl	80130b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012988:	4b1c      	ldr	r3, [pc, #112]	; (80129fc <xTaskResumeAll+0x134>)
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d010      	beq.n	80129b6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012994:	f000 f858 	bl	8012a48 <xTaskIncrementTick>
 8012998:	4603      	mov	r3, r0
 801299a:	2b00      	cmp	r3, #0
 801299c:	d002      	beq.n	80129a4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 801299e:	4b16      	ldr	r3, [pc, #88]	; (80129f8 <xTaskResumeAll+0x130>)
 80129a0:	2201      	movs	r2, #1
 80129a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	3b01      	subs	r3, #1
 80129a8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d1f1      	bne.n	8012994 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80129b0:	4b12      	ldr	r3, [pc, #72]	; (80129fc <xTaskResumeAll+0x134>)
 80129b2:	2200      	movs	r2, #0
 80129b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80129b6:	4b10      	ldr	r3, [pc, #64]	; (80129f8 <xTaskResumeAll+0x130>)
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	2b00      	cmp	r3, #0
 80129bc:	d009      	beq.n	80129d2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80129be:	2301      	movs	r3, #1
 80129c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80129c2:	4b0f      	ldr	r3, [pc, #60]	; (8012a00 <xTaskResumeAll+0x138>)
 80129c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80129c8:	601a      	str	r2, [r3, #0]
 80129ca:	f3bf 8f4f 	dsb	sy
 80129ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80129d2:	f000 ff1f 	bl	8013814 <vPortExitCritical>

	return xAlreadyYielded;
 80129d6:	68bb      	ldr	r3, [r7, #8]
}
 80129d8:	4618      	mov	r0, r3
 80129da:	3710      	adds	r7, #16
 80129dc:	46bd      	mov	sp, r7
 80129de:	bd80      	pop	{r7, pc}
 80129e0:	20000274 	.word	0x20000274
 80129e4:	2000024c 	.word	0x2000024c
 80129e8:	2000020c 	.word	0x2000020c
 80129ec:	20000254 	.word	0x20000254
 80129f0:	20000150 	.word	0x20000150
 80129f4:	2000014c 	.word	0x2000014c
 80129f8:	20000260 	.word	0x20000260
 80129fc:	2000025c 	.word	0x2000025c
 8012a00:	e000ed04 	.word	0xe000ed04

08012a04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012a04:	b480      	push	{r7}
 8012a06:	b083      	sub	sp, #12
 8012a08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012a0a:	4b05      	ldr	r3, [pc, #20]	; (8012a20 <xTaskGetTickCount+0x1c>)
 8012a0c:	681b      	ldr	r3, [r3, #0]
 8012a0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012a10:	687b      	ldr	r3, [r7, #4]
}
 8012a12:	4618      	mov	r0, r3
 8012a14:	370c      	adds	r7, #12
 8012a16:	46bd      	mov	sp, r7
 8012a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a1c:	4770      	bx	lr
 8012a1e:	bf00      	nop
 8012a20:	20000250 	.word	0x20000250

08012a24 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8012a24:	b580      	push	{r7, lr}
 8012a26:	b082      	sub	sp, #8
 8012a28:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012a2a:	f000 ffa7 	bl	801397c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8012a2e:	2300      	movs	r3, #0
 8012a30:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8012a32:	4b04      	ldr	r3, [pc, #16]	; (8012a44 <xTaskGetTickCountFromISR+0x20>)
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012a38:	683b      	ldr	r3, [r7, #0]
}
 8012a3a:	4618      	mov	r0, r3
 8012a3c:	3708      	adds	r7, #8
 8012a3e:	46bd      	mov	sp, r7
 8012a40:	bd80      	pop	{r7, pc}
 8012a42:	bf00      	nop
 8012a44:	20000250 	.word	0x20000250

08012a48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012a48:	b580      	push	{r7, lr}
 8012a4a:	b086      	sub	sp, #24
 8012a4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012a4e:	2300      	movs	r3, #0
 8012a50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012a52:	4b52      	ldr	r3, [pc, #328]	; (8012b9c <xTaskIncrementTick+0x154>)
 8012a54:	681b      	ldr	r3, [r3, #0]
 8012a56:	2b00      	cmp	r3, #0
 8012a58:	f040 808f 	bne.w	8012b7a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012a5c:	4b50      	ldr	r3, [pc, #320]	; (8012ba0 <xTaskIncrementTick+0x158>)
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	3301      	adds	r3, #1
 8012a62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8012a64:	4a4e      	ldr	r2, [pc, #312]	; (8012ba0 <xTaskIncrementTick+0x158>)
 8012a66:	693b      	ldr	r3, [r7, #16]
 8012a68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012a6a:	693b      	ldr	r3, [r7, #16]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d122      	bne.n	8012ab6 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8012a70:	4b4c      	ldr	r3, [pc, #304]	; (8012ba4 <xTaskIncrementTick+0x15c>)
 8012a72:	681b      	ldr	r3, [r3, #0]
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	2b00      	cmp	r3, #0
 8012a78:	d00c      	beq.n	8012a94 <xTaskIncrementTick+0x4c>
	__asm volatile
 8012a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a7e:	b672      	cpsid	i
 8012a80:	f383 8811 	msr	BASEPRI, r3
 8012a84:	f3bf 8f6f 	isb	sy
 8012a88:	f3bf 8f4f 	dsb	sy
 8012a8c:	b662      	cpsie	i
 8012a8e:	603b      	str	r3, [r7, #0]
}
 8012a90:	bf00      	nop
 8012a92:	e7fe      	b.n	8012a92 <xTaskIncrementTick+0x4a>
 8012a94:	4b43      	ldr	r3, [pc, #268]	; (8012ba4 <xTaskIncrementTick+0x15c>)
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	60fb      	str	r3, [r7, #12]
 8012a9a:	4b43      	ldr	r3, [pc, #268]	; (8012ba8 <xTaskIncrementTick+0x160>)
 8012a9c:	681b      	ldr	r3, [r3, #0]
 8012a9e:	4a41      	ldr	r2, [pc, #260]	; (8012ba4 <xTaskIncrementTick+0x15c>)
 8012aa0:	6013      	str	r3, [r2, #0]
 8012aa2:	4a41      	ldr	r2, [pc, #260]	; (8012ba8 <xTaskIncrementTick+0x160>)
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	6013      	str	r3, [r2, #0]
 8012aa8:	4b40      	ldr	r3, [pc, #256]	; (8012bac <xTaskIncrementTick+0x164>)
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	3301      	adds	r3, #1
 8012aae:	4a3f      	ldr	r2, [pc, #252]	; (8012bac <xTaskIncrementTick+0x164>)
 8012ab0:	6013      	str	r3, [r2, #0]
 8012ab2:	f000 faff 	bl	80130b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012ab6:	4b3e      	ldr	r3, [pc, #248]	; (8012bb0 <xTaskIncrementTick+0x168>)
 8012ab8:	681b      	ldr	r3, [r3, #0]
 8012aba:	693a      	ldr	r2, [r7, #16]
 8012abc:	429a      	cmp	r2, r3
 8012abe:	d34d      	bcc.n	8012b5c <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012ac0:	4b38      	ldr	r3, [pc, #224]	; (8012ba4 <xTaskIncrementTick+0x15c>)
 8012ac2:	681b      	ldr	r3, [r3, #0]
 8012ac4:	681b      	ldr	r3, [r3, #0]
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d101      	bne.n	8012ace <xTaskIncrementTick+0x86>
 8012aca:	2301      	movs	r3, #1
 8012acc:	e000      	b.n	8012ad0 <xTaskIncrementTick+0x88>
 8012ace:	2300      	movs	r3, #0
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d004      	beq.n	8012ade <xTaskIncrementTick+0x96>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012ad4:	4b36      	ldr	r3, [pc, #216]	; (8012bb0 <xTaskIncrementTick+0x168>)
 8012ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8012ada:	601a      	str	r2, [r3, #0]
					break;
 8012adc:	e03e      	b.n	8012b5c <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8012ade:	4b31      	ldr	r3, [pc, #196]	; (8012ba4 <xTaskIncrementTick+0x15c>)
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	68db      	ldr	r3, [r3, #12]
 8012ae4:	68db      	ldr	r3, [r3, #12]
 8012ae6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012ae8:	68bb      	ldr	r3, [r7, #8]
 8012aea:	685b      	ldr	r3, [r3, #4]
 8012aec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012aee:	693a      	ldr	r2, [r7, #16]
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	429a      	cmp	r2, r3
 8012af4:	d203      	bcs.n	8012afe <xTaskIncrementTick+0xb6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012af6:	4a2e      	ldr	r2, [pc, #184]	; (8012bb0 <xTaskIncrementTick+0x168>)
 8012af8:	687b      	ldr	r3, [r7, #4]
 8012afa:	6013      	str	r3, [r2, #0]
						break;
 8012afc:	e02e      	b.n	8012b5c <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012afe:	68bb      	ldr	r3, [r7, #8]
 8012b00:	3304      	adds	r3, #4
 8012b02:	4618      	mov	r0, r3
 8012b04:	f7fe fe0e 	bl	8011724 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012b08:	68bb      	ldr	r3, [r7, #8]
 8012b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b0c:	2b00      	cmp	r3, #0
 8012b0e:	d004      	beq.n	8012b1a <xTaskIncrementTick+0xd2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012b10:	68bb      	ldr	r3, [r7, #8]
 8012b12:	3318      	adds	r3, #24
 8012b14:	4618      	mov	r0, r3
 8012b16:	f7fe fe05 	bl	8011724 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012b1a:	68bb      	ldr	r3, [r7, #8]
 8012b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b1e:	2201      	movs	r2, #1
 8012b20:	409a      	lsls	r2, r3
 8012b22:	4b24      	ldr	r3, [pc, #144]	; (8012bb4 <xTaskIncrementTick+0x16c>)
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	4313      	orrs	r3, r2
 8012b28:	4a22      	ldr	r2, [pc, #136]	; (8012bb4 <xTaskIncrementTick+0x16c>)
 8012b2a:	6013      	str	r3, [r2, #0]
 8012b2c:	68bb      	ldr	r3, [r7, #8]
 8012b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b30:	4613      	mov	r3, r2
 8012b32:	009b      	lsls	r3, r3, #2
 8012b34:	4413      	add	r3, r2
 8012b36:	009b      	lsls	r3, r3, #2
 8012b38:	4a1f      	ldr	r2, [pc, #124]	; (8012bb8 <xTaskIncrementTick+0x170>)
 8012b3a:	441a      	add	r2, r3
 8012b3c:	68bb      	ldr	r3, [r7, #8]
 8012b3e:	3304      	adds	r3, #4
 8012b40:	4619      	mov	r1, r3
 8012b42:	4610      	mov	r0, r2
 8012b44:	f7fe fd91 	bl	801166a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012b48:	68bb      	ldr	r3, [r7, #8]
 8012b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b4c:	4b1b      	ldr	r3, [pc, #108]	; (8012bbc <xTaskIncrementTick+0x174>)
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b52:	429a      	cmp	r2, r3
 8012b54:	d3b4      	bcc.n	8012ac0 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8012b56:	2301      	movs	r3, #1
 8012b58:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012b5a:	e7b1      	b.n	8012ac0 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012b5c:	4b17      	ldr	r3, [pc, #92]	; (8012bbc <xTaskIncrementTick+0x174>)
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b62:	4915      	ldr	r1, [pc, #84]	; (8012bb8 <xTaskIncrementTick+0x170>)
 8012b64:	4613      	mov	r3, r2
 8012b66:	009b      	lsls	r3, r3, #2
 8012b68:	4413      	add	r3, r2
 8012b6a:	009b      	lsls	r3, r3, #2
 8012b6c:	440b      	add	r3, r1
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	2b01      	cmp	r3, #1
 8012b72:	d907      	bls.n	8012b84 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8012b74:	2301      	movs	r3, #1
 8012b76:	617b      	str	r3, [r7, #20]
 8012b78:	e004      	b.n	8012b84 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012b7a:	4b11      	ldr	r3, [pc, #68]	; (8012bc0 <xTaskIncrementTick+0x178>)
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	3301      	adds	r3, #1
 8012b80:	4a0f      	ldr	r2, [pc, #60]	; (8012bc0 <xTaskIncrementTick+0x178>)
 8012b82:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012b84:	4b0f      	ldr	r3, [pc, #60]	; (8012bc4 <xTaskIncrementTick+0x17c>)
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	d001      	beq.n	8012b90 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 8012b8c:	2301      	movs	r3, #1
 8012b8e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012b90:	697b      	ldr	r3, [r7, #20]
}
 8012b92:	4618      	mov	r0, r3
 8012b94:	3718      	adds	r7, #24
 8012b96:	46bd      	mov	sp, r7
 8012b98:	bd80      	pop	{r7, pc}
 8012b9a:	bf00      	nop
 8012b9c:	20000274 	.word	0x20000274
 8012ba0:	20000250 	.word	0x20000250
 8012ba4:	20000204 	.word	0x20000204
 8012ba8:	20000208 	.word	0x20000208
 8012bac:	20000264 	.word	0x20000264
 8012bb0:	2000026c 	.word	0x2000026c
 8012bb4:	20000254 	.word	0x20000254
 8012bb8:	20000150 	.word	0x20000150
 8012bbc:	2000014c 	.word	0x2000014c
 8012bc0:	2000025c 	.word	0x2000025c
 8012bc4:	20000260 	.word	0x20000260

08012bc8 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 8012bc8:	b580      	push	{r7, lr}
 8012bca:	b084      	sub	sp, #16
 8012bcc:	af00      	add	r7, sp, #0
 8012bce:	6078      	str	r0, [r7, #4]
 8012bd0:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 8012bd2:	687b      	ldr	r3, [r7, #4]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d103      	bne.n	8012be0 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8012bd8:	4b08      	ldr	r3, [pc, #32]	; (8012bfc <vTaskSetApplicationTaskTag+0x34>)
 8012bda:	681b      	ldr	r3, [r3, #0]
 8012bdc:	60fb      	str	r3, [r7, #12]
 8012bde:	e001      	b.n	8012be4 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 8012be4:	f000 fde2 	bl	80137ac <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8012be8:	68fb      	ldr	r3, [r7, #12]
 8012bea:	683a      	ldr	r2, [r7, #0]
 8012bec:	64da      	str	r2, [r3, #76]	; 0x4c
		taskEXIT_CRITICAL();
 8012bee:	f000 fe11 	bl	8013814 <vPortExitCritical>
	}
 8012bf2:	bf00      	nop
 8012bf4:	3710      	adds	r7, #16
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	bd80      	pop	{r7, pc}
 8012bfa:	bf00      	nop
 8012bfc:	2000014c 	.word	0x2000014c

08012c00 <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
	{
 8012c00:	b580      	push	{r7, lr}
 8012c02:	b084      	sub	sp, #16
 8012c04:	af00      	add	r7, sp, #0
 8012c06:	6078      	str	r0, [r7, #4]
 8012c08:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;
	BaseType_t xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d103      	bne.n	8012c18 <xTaskCallApplicationTaskHook+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8012c10:	4b0b      	ldr	r3, [pc, #44]	; (8012c40 <xTaskCallApplicationTaskHook+0x40>)
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	60fb      	str	r3, [r7, #12]
 8012c16:	e001      	b.n	8012c1c <xTaskCallApplicationTaskHook+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	60fb      	str	r3, [r7, #12]
		}

		if( xTCB->pxTaskTag != NULL )
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d005      	beq.n	8012c30 <xTaskCallApplicationTaskHook+0x30>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012c28:	6838      	ldr	r0, [r7, #0]
 8012c2a:	4798      	blx	r3
 8012c2c:	60b8      	str	r0, [r7, #8]
 8012c2e:	e001      	b.n	8012c34 <xTaskCallApplicationTaskHook+0x34>
		}
		else
		{
			xReturn = pdFAIL;
 8012c30:	2300      	movs	r3, #0
 8012c32:	60bb      	str	r3, [r7, #8]
		}

		return xReturn;
 8012c34:	68bb      	ldr	r3, [r7, #8]
	}
 8012c36:	4618      	mov	r0, r3
 8012c38:	3710      	adds	r7, #16
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	bd80      	pop	{r7, pc}
 8012c3e:	bf00      	nop
 8012c40:	2000014c 	.word	0x2000014c

08012c44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b088      	sub	sp, #32
 8012c48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012c4a:	4b40      	ldr	r3, [pc, #256]	; (8012d4c <vTaskSwitchContext+0x108>)
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d003      	beq.n	8012c5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012c52:	4b3f      	ldr	r3, [pc, #252]	; (8012d50 <vTaskSwitchContext+0x10c>)
 8012c54:	2201      	movs	r2, #1
 8012c56:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012c58:	e074      	b.n	8012d44 <vTaskSwitchContext+0x100>
		xYieldPending = pdFALSE;
 8012c5a:	4b3d      	ldr	r3, [pc, #244]	; (8012d50 <vTaskSwitchContext+0x10c>)
 8012c5c:	2200      	movs	r2, #0
 8012c5e:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8012c60:	4b3c      	ldr	r3, [pc, #240]	; (8012d54 <vTaskSwitchContext+0x110>)
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	2101      	movs	r1, #1
 8012c66:	4618      	mov	r0, r3
 8012c68:	f7ff ffca 	bl	8012c00 <xTaskCallApplicationTaskHook>
		taskCHECK_FOR_STACK_OVERFLOW();
 8012c6c:	4b39      	ldr	r3, [pc, #228]	; (8012d54 <vTaskSwitchContext+0x110>)
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c72:	61fb      	str	r3, [r7, #28]
 8012c74:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8012c78:	61bb      	str	r3, [r7, #24]
 8012c7a:	69fb      	ldr	r3, [r7, #28]
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	69ba      	ldr	r2, [r7, #24]
 8012c80:	429a      	cmp	r2, r3
 8012c82:	d111      	bne.n	8012ca8 <vTaskSwitchContext+0x64>
 8012c84:	69fb      	ldr	r3, [r7, #28]
 8012c86:	3304      	adds	r3, #4
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	69ba      	ldr	r2, [r7, #24]
 8012c8c:	429a      	cmp	r2, r3
 8012c8e:	d10b      	bne.n	8012ca8 <vTaskSwitchContext+0x64>
 8012c90:	69fb      	ldr	r3, [r7, #28]
 8012c92:	3308      	adds	r3, #8
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	69ba      	ldr	r2, [r7, #24]
 8012c98:	429a      	cmp	r2, r3
 8012c9a:	d105      	bne.n	8012ca8 <vTaskSwitchContext+0x64>
 8012c9c:	69fb      	ldr	r3, [r7, #28]
 8012c9e:	330c      	adds	r3, #12
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	69ba      	ldr	r2, [r7, #24]
 8012ca4:	429a      	cmp	r2, r3
 8012ca6:	d008      	beq.n	8012cba <vTaskSwitchContext+0x76>
 8012ca8:	4b2a      	ldr	r3, [pc, #168]	; (8012d54 <vTaskSwitchContext+0x110>)
 8012caa:	681a      	ldr	r2, [r3, #0]
 8012cac:	4b29      	ldr	r3, [pc, #164]	; (8012d54 <vTaskSwitchContext+0x110>)
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	3334      	adds	r3, #52	; 0x34
 8012cb2:	4619      	mov	r1, r3
 8012cb4:	4610      	mov	r0, r2
 8012cb6:	f7fe fa42 	bl	801113e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8012cba:	4b27      	ldr	r3, [pc, #156]	; (8012d58 <vTaskSwitchContext+0x114>)
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	fab3 f383 	clz	r3, r3
 8012cc6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012cc8:	7afb      	ldrb	r3, [r7, #11]
 8012cca:	f1c3 031f 	rsb	r3, r3, #31
 8012cce:	617b      	str	r3, [r7, #20]
 8012cd0:	4922      	ldr	r1, [pc, #136]	; (8012d5c <vTaskSwitchContext+0x118>)
 8012cd2:	697a      	ldr	r2, [r7, #20]
 8012cd4:	4613      	mov	r3, r2
 8012cd6:	009b      	lsls	r3, r3, #2
 8012cd8:	4413      	add	r3, r2
 8012cda:	009b      	lsls	r3, r3, #2
 8012cdc:	440b      	add	r3, r1
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d10c      	bne.n	8012cfe <vTaskSwitchContext+0xba>
	__asm volatile
 8012ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ce8:	b672      	cpsid	i
 8012cea:	f383 8811 	msr	BASEPRI, r3
 8012cee:	f3bf 8f6f 	isb	sy
 8012cf2:	f3bf 8f4f 	dsb	sy
 8012cf6:	b662      	cpsie	i
 8012cf8:	607b      	str	r3, [r7, #4]
}
 8012cfa:	bf00      	nop
 8012cfc:	e7fe      	b.n	8012cfc <vTaskSwitchContext+0xb8>
 8012cfe:	697a      	ldr	r2, [r7, #20]
 8012d00:	4613      	mov	r3, r2
 8012d02:	009b      	lsls	r3, r3, #2
 8012d04:	4413      	add	r3, r2
 8012d06:	009b      	lsls	r3, r3, #2
 8012d08:	4a14      	ldr	r2, [pc, #80]	; (8012d5c <vTaskSwitchContext+0x118>)
 8012d0a:	4413      	add	r3, r2
 8012d0c:	613b      	str	r3, [r7, #16]
 8012d0e:	693b      	ldr	r3, [r7, #16]
 8012d10:	685b      	ldr	r3, [r3, #4]
 8012d12:	685a      	ldr	r2, [r3, #4]
 8012d14:	693b      	ldr	r3, [r7, #16]
 8012d16:	605a      	str	r2, [r3, #4]
 8012d18:	693b      	ldr	r3, [r7, #16]
 8012d1a:	685a      	ldr	r2, [r3, #4]
 8012d1c:	693b      	ldr	r3, [r7, #16]
 8012d1e:	3308      	adds	r3, #8
 8012d20:	429a      	cmp	r2, r3
 8012d22:	d104      	bne.n	8012d2e <vTaskSwitchContext+0xea>
 8012d24:	693b      	ldr	r3, [r7, #16]
 8012d26:	685b      	ldr	r3, [r3, #4]
 8012d28:	685a      	ldr	r2, [r3, #4]
 8012d2a:	693b      	ldr	r3, [r7, #16]
 8012d2c:	605a      	str	r2, [r3, #4]
 8012d2e:	693b      	ldr	r3, [r7, #16]
 8012d30:	685b      	ldr	r3, [r3, #4]
 8012d32:	68db      	ldr	r3, [r3, #12]
 8012d34:	4a07      	ldr	r2, [pc, #28]	; (8012d54 <vTaskSwitchContext+0x110>)
 8012d36:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8012d38:	4b06      	ldr	r3, [pc, #24]	; (8012d54 <vTaskSwitchContext+0x110>)
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	2100      	movs	r1, #0
 8012d3e:	4618      	mov	r0, r3
 8012d40:	f7ff ff5e 	bl	8012c00 <xTaskCallApplicationTaskHook>
}
 8012d44:	bf00      	nop
 8012d46:	3720      	adds	r7, #32
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	bd80      	pop	{r7, pc}
 8012d4c:	20000274 	.word	0x20000274
 8012d50:	20000260 	.word	0x20000260
 8012d54:	2000014c 	.word	0x2000014c
 8012d58:	20000254 	.word	0x20000254
 8012d5c:	20000150 	.word	0x20000150

08012d60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012d60:	b580      	push	{r7, lr}
 8012d62:	b084      	sub	sp, #16
 8012d64:	af00      	add	r7, sp, #0
 8012d66:	6078      	str	r0, [r7, #4]
 8012d68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	2b00      	cmp	r3, #0
 8012d6e:	d10c      	bne.n	8012d8a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8012d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d74:	b672      	cpsid	i
 8012d76:	f383 8811 	msr	BASEPRI, r3
 8012d7a:	f3bf 8f6f 	isb	sy
 8012d7e:	f3bf 8f4f 	dsb	sy
 8012d82:	b662      	cpsie	i
 8012d84:	60fb      	str	r3, [r7, #12]
}
 8012d86:	bf00      	nop
 8012d88:	e7fe      	b.n	8012d88 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012d8a:	4b07      	ldr	r3, [pc, #28]	; (8012da8 <vTaskPlaceOnEventList+0x48>)
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	3318      	adds	r3, #24
 8012d90:	4619      	mov	r1, r3
 8012d92:	6878      	ldr	r0, [r7, #4]
 8012d94:	f7fe fc8d 	bl	80116b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012d98:	2101      	movs	r1, #1
 8012d9a:	6838      	ldr	r0, [r7, #0]
 8012d9c:	f000 fb96 	bl	80134cc <prvAddCurrentTaskToDelayedList>
}
 8012da0:	bf00      	nop
 8012da2:	3710      	adds	r7, #16
 8012da4:	46bd      	mov	sp, r7
 8012da6:	bd80      	pop	{r7, pc}
 8012da8:	2000014c 	.word	0x2000014c

08012dac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012dac:	b580      	push	{r7, lr}
 8012dae:	b086      	sub	sp, #24
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8012db4:	687b      	ldr	r3, [r7, #4]
 8012db6:	68db      	ldr	r3, [r3, #12]
 8012db8:	68db      	ldr	r3, [r3, #12]
 8012dba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012dbc:	693b      	ldr	r3, [r7, #16]
 8012dbe:	2b00      	cmp	r3, #0
 8012dc0:	d10c      	bne.n	8012ddc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8012dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dc6:	b672      	cpsid	i
 8012dc8:	f383 8811 	msr	BASEPRI, r3
 8012dcc:	f3bf 8f6f 	isb	sy
 8012dd0:	f3bf 8f4f 	dsb	sy
 8012dd4:	b662      	cpsie	i
 8012dd6:	60fb      	str	r3, [r7, #12]
}
 8012dd8:	bf00      	nop
 8012dda:	e7fe      	b.n	8012dda <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012ddc:	693b      	ldr	r3, [r7, #16]
 8012dde:	3318      	adds	r3, #24
 8012de0:	4618      	mov	r0, r3
 8012de2:	f7fe fc9f 	bl	8011724 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012de6:	4b1d      	ldr	r3, [pc, #116]	; (8012e5c <xTaskRemoveFromEventList+0xb0>)
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	2b00      	cmp	r3, #0
 8012dec:	d11c      	bne.n	8012e28 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012dee:	693b      	ldr	r3, [r7, #16]
 8012df0:	3304      	adds	r3, #4
 8012df2:	4618      	mov	r0, r3
 8012df4:	f7fe fc96 	bl	8011724 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012df8:	693b      	ldr	r3, [r7, #16]
 8012dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dfc:	2201      	movs	r2, #1
 8012dfe:	409a      	lsls	r2, r3
 8012e00:	4b17      	ldr	r3, [pc, #92]	; (8012e60 <xTaskRemoveFromEventList+0xb4>)
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	4313      	orrs	r3, r2
 8012e06:	4a16      	ldr	r2, [pc, #88]	; (8012e60 <xTaskRemoveFromEventList+0xb4>)
 8012e08:	6013      	str	r3, [r2, #0]
 8012e0a:	693b      	ldr	r3, [r7, #16]
 8012e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e0e:	4613      	mov	r3, r2
 8012e10:	009b      	lsls	r3, r3, #2
 8012e12:	4413      	add	r3, r2
 8012e14:	009b      	lsls	r3, r3, #2
 8012e16:	4a13      	ldr	r2, [pc, #76]	; (8012e64 <xTaskRemoveFromEventList+0xb8>)
 8012e18:	441a      	add	r2, r3
 8012e1a:	693b      	ldr	r3, [r7, #16]
 8012e1c:	3304      	adds	r3, #4
 8012e1e:	4619      	mov	r1, r3
 8012e20:	4610      	mov	r0, r2
 8012e22:	f7fe fc22 	bl	801166a <vListInsertEnd>
 8012e26:	e005      	b.n	8012e34 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012e28:	693b      	ldr	r3, [r7, #16]
 8012e2a:	3318      	adds	r3, #24
 8012e2c:	4619      	mov	r1, r3
 8012e2e:	480e      	ldr	r0, [pc, #56]	; (8012e68 <xTaskRemoveFromEventList+0xbc>)
 8012e30:	f7fe fc1b 	bl	801166a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012e34:	693b      	ldr	r3, [r7, #16]
 8012e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012e38:	4b0c      	ldr	r3, [pc, #48]	; (8012e6c <xTaskRemoveFromEventList+0xc0>)
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012e3e:	429a      	cmp	r2, r3
 8012e40:	d905      	bls.n	8012e4e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012e42:	2301      	movs	r3, #1
 8012e44:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012e46:	4b0a      	ldr	r3, [pc, #40]	; (8012e70 <xTaskRemoveFromEventList+0xc4>)
 8012e48:	2201      	movs	r2, #1
 8012e4a:	601a      	str	r2, [r3, #0]
 8012e4c:	e001      	b.n	8012e52 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8012e4e:	2300      	movs	r3, #0
 8012e50:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8012e52:	697b      	ldr	r3, [r7, #20]
}
 8012e54:	4618      	mov	r0, r3
 8012e56:	3718      	adds	r7, #24
 8012e58:	46bd      	mov	sp, r7
 8012e5a:	bd80      	pop	{r7, pc}
 8012e5c:	20000274 	.word	0x20000274
 8012e60:	20000254 	.word	0x20000254
 8012e64:	20000150 	.word	0x20000150
 8012e68:	2000020c 	.word	0x2000020c
 8012e6c:	2000014c 	.word	0x2000014c
 8012e70:	20000260 	.word	0x20000260

08012e74 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012e74:	b480      	push	{r7}
 8012e76:	b083      	sub	sp, #12
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012e7c:	4b06      	ldr	r3, [pc, #24]	; (8012e98 <vTaskInternalSetTimeOutState+0x24>)
 8012e7e:	681a      	ldr	r2, [r3, #0]
 8012e80:	687b      	ldr	r3, [r7, #4]
 8012e82:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012e84:	4b05      	ldr	r3, [pc, #20]	; (8012e9c <vTaskInternalSetTimeOutState+0x28>)
 8012e86:	681a      	ldr	r2, [r3, #0]
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	605a      	str	r2, [r3, #4]
}
 8012e8c:	bf00      	nop
 8012e8e:	370c      	adds	r7, #12
 8012e90:	46bd      	mov	sp, r7
 8012e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e96:	4770      	bx	lr
 8012e98:	20000264 	.word	0x20000264
 8012e9c:	20000250 	.word	0x20000250

08012ea0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012ea0:	b580      	push	{r7, lr}
 8012ea2:	b088      	sub	sp, #32
 8012ea4:	af00      	add	r7, sp, #0
 8012ea6:	6078      	str	r0, [r7, #4]
 8012ea8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	2b00      	cmp	r3, #0
 8012eae:	d10c      	bne.n	8012eca <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8012eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eb4:	b672      	cpsid	i
 8012eb6:	f383 8811 	msr	BASEPRI, r3
 8012eba:	f3bf 8f6f 	isb	sy
 8012ebe:	f3bf 8f4f 	dsb	sy
 8012ec2:	b662      	cpsie	i
 8012ec4:	613b      	str	r3, [r7, #16]
}
 8012ec6:	bf00      	nop
 8012ec8:	e7fe      	b.n	8012ec8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8012eca:	683b      	ldr	r3, [r7, #0]
 8012ecc:	2b00      	cmp	r3, #0
 8012ece:	d10c      	bne.n	8012eea <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8012ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ed4:	b672      	cpsid	i
 8012ed6:	f383 8811 	msr	BASEPRI, r3
 8012eda:	f3bf 8f6f 	isb	sy
 8012ede:	f3bf 8f4f 	dsb	sy
 8012ee2:	b662      	cpsie	i
 8012ee4:	60fb      	str	r3, [r7, #12]
}
 8012ee6:	bf00      	nop
 8012ee8:	e7fe      	b.n	8012ee8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8012eea:	f000 fc5f 	bl	80137ac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012eee:	4b1d      	ldr	r3, [pc, #116]	; (8012f64 <xTaskCheckForTimeOut+0xc4>)
 8012ef0:	681b      	ldr	r3, [r3, #0]
 8012ef2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	685b      	ldr	r3, [r3, #4]
 8012ef8:	69ba      	ldr	r2, [r7, #24]
 8012efa:	1ad3      	subs	r3, r2, r3
 8012efc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012efe:	683b      	ldr	r3, [r7, #0]
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012f06:	d102      	bne.n	8012f0e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012f08:	2300      	movs	r3, #0
 8012f0a:	61fb      	str	r3, [r7, #28]
 8012f0c:	e023      	b.n	8012f56 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	681a      	ldr	r2, [r3, #0]
 8012f12:	4b15      	ldr	r3, [pc, #84]	; (8012f68 <xTaskCheckForTimeOut+0xc8>)
 8012f14:	681b      	ldr	r3, [r3, #0]
 8012f16:	429a      	cmp	r2, r3
 8012f18:	d007      	beq.n	8012f2a <xTaskCheckForTimeOut+0x8a>
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	685b      	ldr	r3, [r3, #4]
 8012f1e:	69ba      	ldr	r2, [r7, #24]
 8012f20:	429a      	cmp	r2, r3
 8012f22:	d302      	bcc.n	8012f2a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012f24:	2301      	movs	r3, #1
 8012f26:	61fb      	str	r3, [r7, #28]
 8012f28:	e015      	b.n	8012f56 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012f2a:	683b      	ldr	r3, [r7, #0]
 8012f2c:	681b      	ldr	r3, [r3, #0]
 8012f2e:	697a      	ldr	r2, [r7, #20]
 8012f30:	429a      	cmp	r2, r3
 8012f32:	d20b      	bcs.n	8012f4c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012f34:	683b      	ldr	r3, [r7, #0]
 8012f36:	681a      	ldr	r2, [r3, #0]
 8012f38:	697b      	ldr	r3, [r7, #20]
 8012f3a:	1ad2      	subs	r2, r2, r3
 8012f3c:	683b      	ldr	r3, [r7, #0]
 8012f3e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012f40:	6878      	ldr	r0, [r7, #4]
 8012f42:	f7ff ff97 	bl	8012e74 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012f46:	2300      	movs	r3, #0
 8012f48:	61fb      	str	r3, [r7, #28]
 8012f4a:	e004      	b.n	8012f56 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8012f4c:	683b      	ldr	r3, [r7, #0]
 8012f4e:	2200      	movs	r2, #0
 8012f50:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012f52:	2301      	movs	r3, #1
 8012f54:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012f56:	f000 fc5d 	bl	8013814 <vPortExitCritical>

	return xReturn;
 8012f5a:	69fb      	ldr	r3, [r7, #28]
}
 8012f5c:	4618      	mov	r0, r3
 8012f5e:	3720      	adds	r7, #32
 8012f60:	46bd      	mov	sp, r7
 8012f62:	bd80      	pop	{r7, pc}
 8012f64:	20000250 	.word	0x20000250
 8012f68:	20000264 	.word	0x20000264

08012f6c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012f6c:	b480      	push	{r7}
 8012f6e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012f70:	4b03      	ldr	r3, [pc, #12]	; (8012f80 <vTaskMissedYield+0x14>)
 8012f72:	2201      	movs	r2, #1
 8012f74:	601a      	str	r2, [r3, #0]
}
 8012f76:	bf00      	nop
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f7e:	4770      	bx	lr
 8012f80:	20000260 	.word	0x20000260

08012f84 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012f84:	b580      	push	{r7, lr}
 8012f86:	b082      	sub	sp, #8
 8012f88:	af00      	add	r7, sp, #0
 8012f8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012f8c:	f000 f854 	bl	8013038 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012f90:	4b07      	ldr	r3, [pc, #28]	; (8012fb0 <prvIdleTask+0x2c>)
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	2b01      	cmp	r3, #1
 8012f96:	d907      	bls.n	8012fa8 <prvIdleTask+0x24>
			{
				taskYIELD();
 8012f98:	4b06      	ldr	r3, [pc, #24]	; (8012fb4 <prvIdleTask+0x30>)
 8012f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f9e:	601a      	str	r2, [r3, #0]
 8012fa0:	f3bf 8f4f 	dsb	sy
 8012fa4:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8012fa8:	f7fe f8d6 	bl	8011158 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8012fac:	e7ee      	b.n	8012f8c <prvIdleTask+0x8>
 8012fae:	bf00      	nop
 8012fb0:	20000150 	.word	0x20000150
 8012fb4:	e000ed04 	.word	0xe000ed04

08012fb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b082      	sub	sp, #8
 8012fbc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012fbe:	2300      	movs	r3, #0
 8012fc0:	607b      	str	r3, [r7, #4]
 8012fc2:	e00c      	b.n	8012fde <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012fc4:	687a      	ldr	r2, [r7, #4]
 8012fc6:	4613      	mov	r3, r2
 8012fc8:	009b      	lsls	r3, r3, #2
 8012fca:	4413      	add	r3, r2
 8012fcc:	009b      	lsls	r3, r3, #2
 8012fce:	4a12      	ldr	r2, [pc, #72]	; (8013018 <prvInitialiseTaskLists+0x60>)
 8012fd0:	4413      	add	r3, r2
 8012fd2:	4618      	mov	r0, r3
 8012fd4:	f7fe fb1c 	bl	8011610 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	3301      	adds	r3, #1
 8012fdc:	607b      	str	r3, [r7, #4]
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	2b06      	cmp	r3, #6
 8012fe2:	d9ef      	bls.n	8012fc4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012fe4:	480d      	ldr	r0, [pc, #52]	; (801301c <prvInitialiseTaskLists+0x64>)
 8012fe6:	f7fe fb13 	bl	8011610 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012fea:	480d      	ldr	r0, [pc, #52]	; (8013020 <prvInitialiseTaskLists+0x68>)
 8012fec:	f7fe fb10 	bl	8011610 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012ff0:	480c      	ldr	r0, [pc, #48]	; (8013024 <prvInitialiseTaskLists+0x6c>)
 8012ff2:	f7fe fb0d 	bl	8011610 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012ff6:	480c      	ldr	r0, [pc, #48]	; (8013028 <prvInitialiseTaskLists+0x70>)
 8012ff8:	f7fe fb0a 	bl	8011610 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012ffc:	480b      	ldr	r0, [pc, #44]	; (801302c <prvInitialiseTaskLists+0x74>)
 8012ffe:	f7fe fb07 	bl	8011610 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8013002:	4b0b      	ldr	r3, [pc, #44]	; (8013030 <prvInitialiseTaskLists+0x78>)
 8013004:	4a05      	ldr	r2, [pc, #20]	; (801301c <prvInitialiseTaskLists+0x64>)
 8013006:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8013008:	4b0a      	ldr	r3, [pc, #40]	; (8013034 <prvInitialiseTaskLists+0x7c>)
 801300a:	4a05      	ldr	r2, [pc, #20]	; (8013020 <prvInitialiseTaskLists+0x68>)
 801300c:	601a      	str	r2, [r3, #0]
}
 801300e:	bf00      	nop
 8013010:	3708      	adds	r7, #8
 8013012:	46bd      	mov	sp, r7
 8013014:	bd80      	pop	{r7, pc}
 8013016:	bf00      	nop
 8013018:	20000150 	.word	0x20000150
 801301c:	200001dc 	.word	0x200001dc
 8013020:	200001f0 	.word	0x200001f0
 8013024:	2000020c 	.word	0x2000020c
 8013028:	20000220 	.word	0x20000220
 801302c:	20000238 	.word	0x20000238
 8013030:	20000204 	.word	0x20000204
 8013034:	20000208 	.word	0x20000208

08013038 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8013038:	b580      	push	{r7, lr}
 801303a:	b082      	sub	sp, #8
 801303c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801303e:	e019      	b.n	8013074 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8013040:	f000 fbb4 	bl	80137ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8013044:	4b10      	ldr	r3, [pc, #64]	; (8013088 <prvCheckTasksWaitingTermination+0x50>)
 8013046:	68db      	ldr	r3, [r3, #12]
 8013048:	68db      	ldr	r3, [r3, #12]
 801304a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	3304      	adds	r3, #4
 8013050:	4618      	mov	r0, r3
 8013052:	f7fe fb67 	bl	8011724 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8013056:	4b0d      	ldr	r3, [pc, #52]	; (801308c <prvCheckTasksWaitingTermination+0x54>)
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	3b01      	subs	r3, #1
 801305c:	4a0b      	ldr	r2, [pc, #44]	; (801308c <prvCheckTasksWaitingTermination+0x54>)
 801305e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8013060:	4b0b      	ldr	r3, [pc, #44]	; (8013090 <prvCheckTasksWaitingTermination+0x58>)
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	3b01      	subs	r3, #1
 8013066:	4a0a      	ldr	r2, [pc, #40]	; (8013090 <prvCheckTasksWaitingTermination+0x58>)
 8013068:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801306a:	f000 fbd3 	bl	8013814 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801306e:	6878      	ldr	r0, [r7, #4]
 8013070:	f000 f810 	bl	8013094 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8013074:	4b06      	ldr	r3, [pc, #24]	; (8013090 <prvCheckTasksWaitingTermination+0x58>)
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	2b00      	cmp	r3, #0
 801307a:	d1e1      	bne.n	8013040 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801307c:	bf00      	nop
 801307e:	bf00      	nop
 8013080:	3708      	adds	r7, #8
 8013082:	46bd      	mov	sp, r7
 8013084:	bd80      	pop	{r7, pc}
 8013086:	bf00      	nop
 8013088:	20000220 	.word	0x20000220
 801308c:	2000024c 	.word	0x2000024c
 8013090:	20000234 	.word	0x20000234

08013094 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8013094:	b580      	push	{r7, lr}
 8013096:	b082      	sub	sp, #8
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80130a0:	4618      	mov	r0, r3
 80130a2:	f000 fd7f 	bl	8013ba4 <vPortFree>
			vPortFree( pxTCB );
 80130a6:	6878      	ldr	r0, [r7, #4]
 80130a8:	f000 fd7c 	bl	8013ba4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80130ac:	bf00      	nop
 80130ae:	3708      	adds	r7, #8
 80130b0:	46bd      	mov	sp, r7
 80130b2:	bd80      	pop	{r7, pc}

080130b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80130b4:	b480      	push	{r7}
 80130b6:	b083      	sub	sp, #12
 80130b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80130ba:	4b0f      	ldr	r3, [pc, #60]	; (80130f8 <prvResetNextTaskUnblockTime+0x44>)
 80130bc:	681b      	ldr	r3, [r3, #0]
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d101      	bne.n	80130c8 <prvResetNextTaskUnblockTime+0x14>
 80130c4:	2301      	movs	r3, #1
 80130c6:	e000      	b.n	80130ca <prvResetNextTaskUnblockTime+0x16>
 80130c8:	2300      	movs	r3, #0
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d004      	beq.n	80130d8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80130ce:	4b0b      	ldr	r3, [pc, #44]	; (80130fc <prvResetNextTaskUnblockTime+0x48>)
 80130d0:	f04f 32ff 	mov.w	r2, #4294967295
 80130d4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80130d6:	e008      	b.n	80130ea <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80130d8:	4b07      	ldr	r3, [pc, #28]	; (80130f8 <prvResetNextTaskUnblockTime+0x44>)
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	68db      	ldr	r3, [r3, #12]
 80130de:	68db      	ldr	r3, [r3, #12]
 80130e0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	685b      	ldr	r3, [r3, #4]
 80130e6:	4a05      	ldr	r2, [pc, #20]	; (80130fc <prvResetNextTaskUnblockTime+0x48>)
 80130e8:	6013      	str	r3, [r2, #0]
}
 80130ea:	bf00      	nop
 80130ec:	370c      	adds	r7, #12
 80130ee:	46bd      	mov	sp, r7
 80130f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f4:	4770      	bx	lr
 80130f6:	bf00      	nop
 80130f8:	20000204 	.word	0x20000204
 80130fc:	2000026c 	.word	0x2000026c

08013100 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013100:	b480      	push	{r7}
 8013102:	b083      	sub	sp, #12
 8013104:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8013106:	4b0b      	ldr	r3, [pc, #44]	; (8013134 <xTaskGetSchedulerState+0x34>)
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	2b00      	cmp	r3, #0
 801310c:	d102      	bne.n	8013114 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801310e:	2301      	movs	r3, #1
 8013110:	607b      	str	r3, [r7, #4]
 8013112:	e008      	b.n	8013126 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013114:	4b08      	ldr	r3, [pc, #32]	; (8013138 <xTaskGetSchedulerState+0x38>)
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	2b00      	cmp	r3, #0
 801311a:	d102      	bne.n	8013122 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801311c:	2302      	movs	r3, #2
 801311e:	607b      	str	r3, [r7, #4]
 8013120:	e001      	b.n	8013126 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8013122:	2300      	movs	r3, #0
 8013124:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8013126:	687b      	ldr	r3, [r7, #4]
	}
 8013128:	4618      	mov	r0, r3
 801312a:	370c      	adds	r7, #12
 801312c:	46bd      	mov	sp, r7
 801312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013132:	4770      	bx	lr
 8013134:	20000258 	.word	0x20000258
 8013138:	20000274 	.word	0x20000274

0801313c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801313c:	b580      	push	{r7, lr}
 801313e:	b084      	sub	sp, #16
 8013140:	af00      	add	r7, sp, #0
 8013142:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8013148:	2300      	movs	r3, #0
 801314a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	2b00      	cmp	r3, #0
 8013150:	d06e      	beq.n	8013230 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8013152:	68bb      	ldr	r3, [r7, #8]
 8013154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013156:	4b39      	ldr	r3, [pc, #228]	; (801323c <xTaskPriorityInherit+0x100>)
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801315c:	429a      	cmp	r2, r3
 801315e:	d25e      	bcs.n	801321e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013160:	68bb      	ldr	r3, [r7, #8]
 8013162:	699b      	ldr	r3, [r3, #24]
 8013164:	2b00      	cmp	r3, #0
 8013166:	db06      	blt.n	8013176 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013168:	4b34      	ldr	r3, [pc, #208]	; (801323c <xTaskPriorityInherit+0x100>)
 801316a:	681b      	ldr	r3, [r3, #0]
 801316c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801316e:	f1c3 0207 	rsb	r2, r3, #7
 8013172:	68bb      	ldr	r3, [r7, #8]
 8013174:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8013176:	68bb      	ldr	r3, [r7, #8]
 8013178:	6959      	ldr	r1, [r3, #20]
 801317a:	68bb      	ldr	r3, [r7, #8]
 801317c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801317e:	4613      	mov	r3, r2
 8013180:	009b      	lsls	r3, r3, #2
 8013182:	4413      	add	r3, r2
 8013184:	009b      	lsls	r3, r3, #2
 8013186:	4a2e      	ldr	r2, [pc, #184]	; (8013240 <xTaskPriorityInherit+0x104>)
 8013188:	4413      	add	r3, r2
 801318a:	4299      	cmp	r1, r3
 801318c:	d101      	bne.n	8013192 <xTaskPriorityInherit+0x56>
 801318e:	2301      	movs	r3, #1
 8013190:	e000      	b.n	8013194 <xTaskPriorityInherit+0x58>
 8013192:	2300      	movs	r3, #0
 8013194:	2b00      	cmp	r3, #0
 8013196:	d03a      	beq.n	801320e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013198:	68bb      	ldr	r3, [r7, #8]
 801319a:	3304      	adds	r3, #4
 801319c:	4618      	mov	r0, r3
 801319e:	f7fe fac1 	bl	8011724 <uxListRemove>
 80131a2:	4603      	mov	r3, r0
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d115      	bne.n	80131d4 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80131a8:	68bb      	ldr	r3, [r7, #8]
 80131aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131ac:	4924      	ldr	r1, [pc, #144]	; (8013240 <xTaskPriorityInherit+0x104>)
 80131ae:	4613      	mov	r3, r2
 80131b0:	009b      	lsls	r3, r3, #2
 80131b2:	4413      	add	r3, r2
 80131b4:	009b      	lsls	r3, r3, #2
 80131b6:	440b      	add	r3, r1
 80131b8:	681b      	ldr	r3, [r3, #0]
 80131ba:	2b00      	cmp	r3, #0
 80131bc:	d10a      	bne.n	80131d4 <xTaskPriorityInherit+0x98>
 80131be:	68bb      	ldr	r3, [r7, #8]
 80131c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131c2:	2201      	movs	r2, #1
 80131c4:	fa02 f303 	lsl.w	r3, r2, r3
 80131c8:	43da      	mvns	r2, r3
 80131ca:	4b1e      	ldr	r3, [pc, #120]	; (8013244 <xTaskPriorityInherit+0x108>)
 80131cc:	681b      	ldr	r3, [r3, #0]
 80131ce:	4013      	ands	r3, r2
 80131d0:	4a1c      	ldr	r2, [pc, #112]	; (8013244 <xTaskPriorityInherit+0x108>)
 80131d2:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80131d4:	4b19      	ldr	r3, [pc, #100]	; (801323c <xTaskPriorityInherit+0x100>)
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131da:	68bb      	ldr	r3, [r7, #8]
 80131dc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80131de:	68bb      	ldr	r3, [r7, #8]
 80131e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131e2:	2201      	movs	r2, #1
 80131e4:	409a      	lsls	r2, r3
 80131e6:	4b17      	ldr	r3, [pc, #92]	; (8013244 <xTaskPriorityInherit+0x108>)
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	4313      	orrs	r3, r2
 80131ec:	4a15      	ldr	r2, [pc, #84]	; (8013244 <xTaskPriorityInherit+0x108>)
 80131ee:	6013      	str	r3, [r2, #0]
 80131f0:	68bb      	ldr	r3, [r7, #8]
 80131f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80131f4:	4613      	mov	r3, r2
 80131f6:	009b      	lsls	r3, r3, #2
 80131f8:	4413      	add	r3, r2
 80131fa:	009b      	lsls	r3, r3, #2
 80131fc:	4a10      	ldr	r2, [pc, #64]	; (8013240 <xTaskPriorityInherit+0x104>)
 80131fe:	441a      	add	r2, r3
 8013200:	68bb      	ldr	r3, [r7, #8]
 8013202:	3304      	adds	r3, #4
 8013204:	4619      	mov	r1, r3
 8013206:	4610      	mov	r0, r2
 8013208:	f7fe fa2f 	bl	801166a <vListInsertEnd>
 801320c:	e004      	b.n	8013218 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801320e:	4b0b      	ldr	r3, [pc, #44]	; (801323c <xTaskPriorityInherit+0x100>)
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013214:	68bb      	ldr	r3, [r7, #8]
 8013216:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013218:	2301      	movs	r3, #1
 801321a:	60fb      	str	r3, [r7, #12]
 801321c:	e008      	b.n	8013230 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 801321e:	68bb      	ldr	r3, [r7, #8]
 8013220:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013222:	4b06      	ldr	r3, [pc, #24]	; (801323c <xTaskPriorityInherit+0x100>)
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013228:	429a      	cmp	r2, r3
 801322a:	d201      	bcs.n	8013230 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801322c:	2301      	movs	r3, #1
 801322e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013230:	68fb      	ldr	r3, [r7, #12]
	}
 8013232:	4618      	mov	r0, r3
 8013234:	3710      	adds	r7, #16
 8013236:	46bd      	mov	sp, r7
 8013238:	bd80      	pop	{r7, pc}
 801323a:	bf00      	nop
 801323c:	2000014c 	.word	0x2000014c
 8013240:	20000150 	.word	0x20000150
 8013244:	20000254 	.word	0x20000254

08013248 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8013248:	b580      	push	{r7, lr}
 801324a:	b086      	sub	sp, #24
 801324c:	af00      	add	r7, sp, #0
 801324e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8013254:	2300      	movs	r3, #0
 8013256:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	2b00      	cmp	r3, #0
 801325c:	d072      	beq.n	8013344 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801325e:	4b3c      	ldr	r3, [pc, #240]	; (8013350 <xTaskPriorityDisinherit+0x108>)
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	693a      	ldr	r2, [r7, #16]
 8013264:	429a      	cmp	r2, r3
 8013266:	d00c      	beq.n	8013282 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8013268:	f04f 0350 	mov.w	r3, #80	; 0x50
 801326c:	b672      	cpsid	i
 801326e:	f383 8811 	msr	BASEPRI, r3
 8013272:	f3bf 8f6f 	isb	sy
 8013276:	f3bf 8f4f 	dsb	sy
 801327a:	b662      	cpsie	i
 801327c:	60fb      	str	r3, [r7, #12]
}
 801327e:	bf00      	nop
 8013280:	e7fe      	b.n	8013280 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8013282:	693b      	ldr	r3, [r7, #16]
 8013284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013286:	2b00      	cmp	r3, #0
 8013288:	d10c      	bne.n	80132a4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 801328a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801328e:	b672      	cpsid	i
 8013290:	f383 8811 	msr	BASEPRI, r3
 8013294:	f3bf 8f6f 	isb	sy
 8013298:	f3bf 8f4f 	dsb	sy
 801329c:	b662      	cpsie	i
 801329e:	60bb      	str	r3, [r7, #8]
}
 80132a0:	bf00      	nop
 80132a2:	e7fe      	b.n	80132a2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80132a4:	693b      	ldr	r3, [r7, #16]
 80132a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80132a8:	1e5a      	subs	r2, r3, #1
 80132aa:	693b      	ldr	r3, [r7, #16]
 80132ac:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80132ae:	693b      	ldr	r3, [r7, #16]
 80132b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132b2:	693b      	ldr	r3, [r7, #16]
 80132b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80132b6:	429a      	cmp	r2, r3
 80132b8:	d044      	beq.n	8013344 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80132ba:	693b      	ldr	r3, [r7, #16]
 80132bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d140      	bne.n	8013344 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80132c2:	693b      	ldr	r3, [r7, #16]
 80132c4:	3304      	adds	r3, #4
 80132c6:	4618      	mov	r0, r3
 80132c8:	f7fe fa2c 	bl	8011724 <uxListRemove>
 80132cc:	4603      	mov	r3, r0
 80132ce:	2b00      	cmp	r3, #0
 80132d0:	d115      	bne.n	80132fe <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80132d2:	693b      	ldr	r3, [r7, #16]
 80132d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80132d6:	491f      	ldr	r1, [pc, #124]	; (8013354 <xTaskPriorityDisinherit+0x10c>)
 80132d8:	4613      	mov	r3, r2
 80132da:	009b      	lsls	r3, r3, #2
 80132dc:	4413      	add	r3, r2
 80132de:	009b      	lsls	r3, r3, #2
 80132e0:	440b      	add	r3, r1
 80132e2:	681b      	ldr	r3, [r3, #0]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d10a      	bne.n	80132fe <xTaskPriorityDisinherit+0xb6>
 80132e8:	693b      	ldr	r3, [r7, #16]
 80132ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132ec:	2201      	movs	r2, #1
 80132ee:	fa02 f303 	lsl.w	r3, r2, r3
 80132f2:	43da      	mvns	r2, r3
 80132f4:	4b18      	ldr	r3, [pc, #96]	; (8013358 <xTaskPriorityDisinherit+0x110>)
 80132f6:	681b      	ldr	r3, [r3, #0]
 80132f8:	4013      	ands	r3, r2
 80132fa:	4a17      	ldr	r2, [pc, #92]	; (8013358 <xTaskPriorityDisinherit+0x110>)
 80132fc:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80132fe:	693b      	ldr	r3, [r7, #16]
 8013300:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013302:	693b      	ldr	r3, [r7, #16]
 8013304:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013306:	693b      	ldr	r3, [r7, #16]
 8013308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801330a:	f1c3 0207 	rsb	r2, r3, #7
 801330e:	693b      	ldr	r3, [r7, #16]
 8013310:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013312:	693b      	ldr	r3, [r7, #16]
 8013314:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013316:	2201      	movs	r2, #1
 8013318:	409a      	lsls	r2, r3
 801331a:	4b0f      	ldr	r3, [pc, #60]	; (8013358 <xTaskPriorityDisinherit+0x110>)
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	4313      	orrs	r3, r2
 8013320:	4a0d      	ldr	r2, [pc, #52]	; (8013358 <xTaskPriorityDisinherit+0x110>)
 8013322:	6013      	str	r3, [r2, #0]
 8013324:	693b      	ldr	r3, [r7, #16]
 8013326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013328:	4613      	mov	r3, r2
 801332a:	009b      	lsls	r3, r3, #2
 801332c:	4413      	add	r3, r2
 801332e:	009b      	lsls	r3, r3, #2
 8013330:	4a08      	ldr	r2, [pc, #32]	; (8013354 <xTaskPriorityDisinherit+0x10c>)
 8013332:	441a      	add	r2, r3
 8013334:	693b      	ldr	r3, [r7, #16]
 8013336:	3304      	adds	r3, #4
 8013338:	4619      	mov	r1, r3
 801333a:	4610      	mov	r0, r2
 801333c:	f7fe f995 	bl	801166a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8013340:	2301      	movs	r3, #1
 8013342:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8013344:	697b      	ldr	r3, [r7, #20]
	}
 8013346:	4618      	mov	r0, r3
 8013348:	3718      	adds	r7, #24
 801334a:	46bd      	mov	sp, r7
 801334c:	bd80      	pop	{r7, pc}
 801334e:	bf00      	nop
 8013350:	2000014c 	.word	0x2000014c
 8013354:	20000150 	.word	0x20000150
 8013358:	20000254 	.word	0x20000254

0801335c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801335c:	b580      	push	{r7, lr}
 801335e:	b088      	sub	sp, #32
 8013360:	af00      	add	r7, sp, #0
 8013362:	6078      	str	r0, [r7, #4]
 8013364:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8013366:	687b      	ldr	r3, [r7, #4]
 8013368:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801336a:	2301      	movs	r3, #1
 801336c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	2b00      	cmp	r3, #0
 8013372:	f000 808c 	beq.w	801348e <vTaskPriorityDisinheritAfterTimeout+0x132>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8013376:	69bb      	ldr	r3, [r7, #24]
 8013378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801337a:	2b00      	cmp	r3, #0
 801337c:	d10c      	bne.n	8013398 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 801337e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013382:	b672      	cpsid	i
 8013384:	f383 8811 	msr	BASEPRI, r3
 8013388:	f3bf 8f6f 	isb	sy
 801338c:	f3bf 8f4f 	dsb	sy
 8013390:	b662      	cpsie	i
 8013392:	60fb      	str	r3, [r7, #12]
}
 8013394:	bf00      	nop
 8013396:	e7fe      	b.n	8013396 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8013398:	69bb      	ldr	r3, [r7, #24]
 801339a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801339c:	683a      	ldr	r2, [r7, #0]
 801339e:	429a      	cmp	r2, r3
 80133a0:	d902      	bls.n	80133a8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80133a2:	683b      	ldr	r3, [r7, #0]
 80133a4:	61fb      	str	r3, [r7, #28]
 80133a6:	e002      	b.n	80133ae <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80133a8:	69bb      	ldr	r3, [r7, #24]
 80133aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80133ac:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80133ae:	69bb      	ldr	r3, [r7, #24]
 80133b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133b2:	69fa      	ldr	r2, [r7, #28]
 80133b4:	429a      	cmp	r2, r3
 80133b6:	d06a      	beq.n	801348e <vTaskPriorityDisinheritAfterTimeout+0x132>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80133b8:	69bb      	ldr	r3, [r7, #24]
 80133ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80133bc:	697a      	ldr	r2, [r7, #20]
 80133be:	429a      	cmp	r2, r3
 80133c0:	d165      	bne.n	801348e <vTaskPriorityDisinheritAfterTimeout+0x132>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80133c2:	4b35      	ldr	r3, [pc, #212]	; (8013498 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	69ba      	ldr	r2, [r7, #24]
 80133c8:	429a      	cmp	r2, r3
 80133ca:	d10c      	bne.n	80133e6 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 80133cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80133d0:	b672      	cpsid	i
 80133d2:	f383 8811 	msr	BASEPRI, r3
 80133d6:	f3bf 8f6f 	isb	sy
 80133da:	f3bf 8f4f 	dsb	sy
 80133de:	b662      	cpsie	i
 80133e0:	60bb      	str	r3, [r7, #8]
}
 80133e2:	bf00      	nop
 80133e4:	e7fe      	b.n	80133e4 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80133e6:	69bb      	ldr	r3, [r7, #24]
 80133e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133ea:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80133ec:	69bb      	ldr	r3, [r7, #24]
 80133ee:	69fa      	ldr	r2, [r7, #28]
 80133f0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80133f2:	69bb      	ldr	r3, [r7, #24]
 80133f4:	699b      	ldr	r3, [r3, #24]
 80133f6:	2b00      	cmp	r3, #0
 80133f8:	db04      	blt.n	8013404 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80133fa:	69fb      	ldr	r3, [r7, #28]
 80133fc:	f1c3 0207 	rsb	r2, r3, #7
 8013400:	69bb      	ldr	r3, [r7, #24]
 8013402:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013404:	69bb      	ldr	r3, [r7, #24]
 8013406:	6959      	ldr	r1, [r3, #20]
 8013408:	693a      	ldr	r2, [r7, #16]
 801340a:	4613      	mov	r3, r2
 801340c:	009b      	lsls	r3, r3, #2
 801340e:	4413      	add	r3, r2
 8013410:	009b      	lsls	r3, r3, #2
 8013412:	4a22      	ldr	r2, [pc, #136]	; (801349c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8013414:	4413      	add	r3, r2
 8013416:	4299      	cmp	r1, r3
 8013418:	d101      	bne.n	801341e <vTaskPriorityDisinheritAfterTimeout+0xc2>
 801341a:	2301      	movs	r3, #1
 801341c:	e000      	b.n	8013420 <vTaskPriorityDisinheritAfterTimeout+0xc4>
 801341e:	2300      	movs	r3, #0
 8013420:	2b00      	cmp	r3, #0
 8013422:	d034      	beq.n	801348e <vTaskPriorityDisinheritAfterTimeout+0x132>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013424:	69bb      	ldr	r3, [r7, #24]
 8013426:	3304      	adds	r3, #4
 8013428:	4618      	mov	r0, r3
 801342a:	f7fe f97b 	bl	8011724 <uxListRemove>
 801342e:	4603      	mov	r3, r0
 8013430:	2b00      	cmp	r3, #0
 8013432:	d115      	bne.n	8013460 <vTaskPriorityDisinheritAfterTimeout+0x104>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013434:	69bb      	ldr	r3, [r7, #24]
 8013436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013438:	4918      	ldr	r1, [pc, #96]	; (801349c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 801343a:	4613      	mov	r3, r2
 801343c:	009b      	lsls	r3, r3, #2
 801343e:	4413      	add	r3, r2
 8013440:	009b      	lsls	r3, r3, #2
 8013442:	440b      	add	r3, r1
 8013444:	681b      	ldr	r3, [r3, #0]
 8013446:	2b00      	cmp	r3, #0
 8013448:	d10a      	bne.n	8013460 <vTaskPriorityDisinheritAfterTimeout+0x104>
 801344a:	69bb      	ldr	r3, [r7, #24]
 801344c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801344e:	2201      	movs	r2, #1
 8013450:	fa02 f303 	lsl.w	r3, r2, r3
 8013454:	43da      	mvns	r2, r3
 8013456:	4b12      	ldr	r3, [pc, #72]	; (80134a0 <vTaskPriorityDisinheritAfterTimeout+0x144>)
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	4013      	ands	r3, r2
 801345c:	4a10      	ldr	r2, [pc, #64]	; (80134a0 <vTaskPriorityDisinheritAfterTimeout+0x144>)
 801345e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8013460:	69bb      	ldr	r3, [r7, #24]
 8013462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013464:	2201      	movs	r2, #1
 8013466:	409a      	lsls	r2, r3
 8013468:	4b0d      	ldr	r3, [pc, #52]	; (80134a0 <vTaskPriorityDisinheritAfterTimeout+0x144>)
 801346a:	681b      	ldr	r3, [r3, #0]
 801346c:	4313      	orrs	r3, r2
 801346e:	4a0c      	ldr	r2, [pc, #48]	; (80134a0 <vTaskPriorityDisinheritAfterTimeout+0x144>)
 8013470:	6013      	str	r3, [r2, #0]
 8013472:	69bb      	ldr	r3, [r7, #24]
 8013474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013476:	4613      	mov	r3, r2
 8013478:	009b      	lsls	r3, r3, #2
 801347a:	4413      	add	r3, r2
 801347c:	009b      	lsls	r3, r3, #2
 801347e:	4a07      	ldr	r2, [pc, #28]	; (801349c <vTaskPriorityDisinheritAfterTimeout+0x140>)
 8013480:	441a      	add	r2, r3
 8013482:	69bb      	ldr	r3, [r7, #24]
 8013484:	3304      	adds	r3, #4
 8013486:	4619      	mov	r1, r3
 8013488:	4610      	mov	r0, r2
 801348a:	f7fe f8ee 	bl	801166a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801348e:	bf00      	nop
 8013490:	3720      	adds	r7, #32
 8013492:	46bd      	mov	sp, r7
 8013494:	bd80      	pop	{r7, pc}
 8013496:	bf00      	nop
 8013498:	2000014c 	.word	0x2000014c
 801349c:	20000150 	.word	0x20000150
 80134a0:	20000254 	.word	0x20000254

080134a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80134a4:	b480      	push	{r7}
 80134a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80134a8:	4b07      	ldr	r3, [pc, #28]	; (80134c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80134aa:	681b      	ldr	r3, [r3, #0]
 80134ac:	2b00      	cmp	r3, #0
 80134ae:	d004      	beq.n	80134ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80134b0:	4b05      	ldr	r3, [pc, #20]	; (80134c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80134b6:	3201      	adds	r2, #1
 80134b8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80134ba:	4b03      	ldr	r3, [pc, #12]	; (80134c8 <pvTaskIncrementMutexHeldCount+0x24>)
 80134bc:	681b      	ldr	r3, [r3, #0]
	}
 80134be:	4618      	mov	r0, r3
 80134c0:	46bd      	mov	sp, r7
 80134c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c6:	4770      	bx	lr
 80134c8:	2000014c 	.word	0x2000014c

080134cc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80134cc:	b580      	push	{r7, lr}
 80134ce:	b084      	sub	sp, #16
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	6078      	str	r0, [r7, #4]
 80134d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80134d6:	4b29      	ldr	r3, [pc, #164]	; (801357c <prvAddCurrentTaskToDelayedList+0xb0>)
 80134d8:	681b      	ldr	r3, [r3, #0]
 80134da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80134dc:	4b28      	ldr	r3, [pc, #160]	; (8013580 <prvAddCurrentTaskToDelayedList+0xb4>)
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	3304      	adds	r3, #4
 80134e2:	4618      	mov	r0, r3
 80134e4:	f7fe f91e 	bl	8011724 <uxListRemove>
 80134e8:	4603      	mov	r3, r0
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d10b      	bne.n	8013506 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80134ee:	4b24      	ldr	r3, [pc, #144]	; (8013580 <prvAddCurrentTaskToDelayedList+0xb4>)
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80134f4:	2201      	movs	r2, #1
 80134f6:	fa02 f303 	lsl.w	r3, r2, r3
 80134fa:	43da      	mvns	r2, r3
 80134fc:	4b21      	ldr	r3, [pc, #132]	; (8013584 <prvAddCurrentTaskToDelayedList+0xb8>)
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	4013      	ands	r3, r2
 8013502:	4a20      	ldr	r2, [pc, #128]	; (8013584 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013504:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	f1b3 3fff 	cmp.w	r3, #4294967295
 801350c:	d10a      	bne.n	8013524 <prvAddCurrentTaskToDelayedList+0x58>
 801350e:	683b      	ldr	r3, [r7, #0]
 8013510:	2b00      	cmp	r3, #0
 8013512:	d007      	beq.n	8013524 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013514:	4b1a      	ldr	r3, [pc, #104]	; (8013580 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013516:	681b      	ldr	r3, [r3, #0]
 8013518:	3304      	adds	r3, #4
 801351a:	4619      	mov	r1, r3
 801351c:	481a      	ldr	r0, [pc, #104]	; (8013588 <prvAddCurrentTaskToDelayedList+0xbc>)
 801351e:	f7fe f8a4 	bl	801166a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013522:	e026      	b.n	8013572 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013524:	68fa      	ldr	r2, [r7, #12]
 8013526:	687b      	ldr	r3, [r7, #4]
 8013528:	4413      	add	r3, r2
 801352a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801352c:	4b14      	ldr	r3, [pc, #80]	; (8013580 <prvAddCurrentTaskToDelayedList+0xb4>)
 801352e:	681b      	ldr	r3, [r3, #0]
 8013530:	68ba      	ldr	r2, [r7, #8]
 8013532:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013534:	68ba      	ldr	r2, [r7, #8]
 8013536:	68fb      	ldr	r3, [r7, #12]
 8013538:	429a      	cmp	r2, r3
 801353a:	d209      	bcs.n	8013550 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801353c:	4b13      	ldr	r3, [pc, #76]	; (801358c <prvAddCurrentTaskToDelayedList+0xc0>)
 801353e:	681a      	ldr	r2, [r3, #0]
 8013540:	4b0f      	ldr	r3, [pc, #60]	; (8013580 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	3304      	adds	r3, #4
 8013546:	4619      	mov	r1, r3
 8013548:	4610      	mov	r0, r2
 801354a:	f7fe f8b2 	bl	80116b2 <vListInsert>
}
 801354e:	e010      	b.n	8013572 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013550:	4b0f      	ldr	r3, [pc, #60]	; (8013590 <prvAddCurrentTaskToDelayedList+0xc4>)
 8013552:	681a      	ldr	r2, [r3, #0]
 8013554:	4b0a      	ldr	r3, [pc, #40]	; (8013580 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013556:	681b      	ldr	r3, [r3, #0]
 8013558:	3304      	adds	r3, #4
 801355a:	4619      	mov	r1, r3
 801355c:	4610      	mov	r0, r2
 801355e:	f7fe f8a8 	bl	80116b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013562:	4b0c      	ldr	r3, [pc, #48]	; (8013594 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	68ba      	ldr	r2, [r7, #8]
 8013568:	429a      	cmp	r2, r3
 801356a:	d202      	bcs.n	8013572 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801356c:	4a09      	ldr	r2, [pc, #36]	; (8013594 <prvAddCurrentTaskToDelayedList+0xc8>)
 801356e:	68bb      	ldr	r3, [r7, #8]
 8013570:	6013      	str	r3, [r2, #0]
}
 8013572:	bf00      	nop
 8013574:	3710      	adds	r7, #16
 8013576:	46bd      	mov	sp, r7
 8013578:	bd80      	pop	{r7, pc}
 801357a:	bf00      	nop
 801357c:	20000250 	.word	0x20000250
 8013580:	2000014c 	.word	0x2000014c
 8013584:	20000254 	.word	0x20000254
 8013588:	20000238 	.word	0x20000238
 801358c:	20000208 	.word	0x20000208
 8013590:	20000204 	.word	0x20000204
 8013594:	2000026c 	.word	0x2000026c

08013598 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013598:	b480      	push	{r7}
 801359a:	b085      	sub	sp, #20
 801359c:	af00      	add	r7, sp, #0
 801359e:	60f8      	str	r0, [r7, #12]
 80135a0:	60b9      	str	r1, [r7, #8]
 80135a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80135a4:	68fb      	ldr	r3, [r7, #12]
 80135a6:	3b04      	subs	r3, #4
 80135a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80135b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80135b2:	68fb      	ldr	r3, [r7, #12]
 80135b4:	3b04      	subs	r3, #4
 80135b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80135b8:	68bb      	ldr	r3, [r7, #8]
 80135ba:	f023 0201 	bic.w	r2, r3, #1
 80135be:	68fb      	ldr	r3, [r7, #12]
 80135c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80135c2:	68fb      	ldr	r3, [r7, #12]
 80135c4:	3b04      	subs	r3, #4
 80135c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80135c8:	4a0c      	ldr	r2, [pc, #48]	; (80135fc <pxPortInitialiseStack+0x64>)
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80135ce:	68fb      	ldr	r3, [r7, #12]
 80135d0:	3b14      	subs	r3, #20
 80135d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80135d4:	687a      	ldr	r2, [r7, #4]
 80135d6:	68fb      	ldr	r3, [r7, #12]
 80135d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	3b04      	subs	r3, #4
 80135de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80135e0:	68fb      	ldr	r3, [r7, #12]
 80135e2:	f06f 0202 	mvn.w	r2, #2
 80135e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	3b20      	subs	r3, #32
 80135ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80135ee:	68fb      	ldr	r3, [r7, #12]
}
 80135f0:	4618      	mov	r0, r3
 80135f2:	3714      	adds	r7, #20
 80135f4:	46bd      	mov	sp, r7
 80135f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135fa:	4770      	bx	lr
 80135fc:	08013601 	.word	0x08013601

08013600 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013600:	b480      	push	{r7}
 8013602:	b085      	sub	sp, #20
 8013604:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013606:	2300      	movs	r3, #0
 8013608:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801360a:	4b14      	ldr	r3, [pc, #80]	; (801365c <prvTaskExitError+0x5c>)
 801360c:	681b      	ldr	r3, [r3, #0]
 801360e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013612:	d00c      	beq.n	801362e <prvTaskExitError+0x2e>
	__asm volatile
 8013614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013618:	b672      	cpsid	i
 801361a:	f383 8811 	msr	BASEPRI, r3
 801361e:	f3bf 8f6f 	isb	sy
 8013622:	f3bf 8f4f 	dsb	sy
 8013626:	b662      	cpsie	i
 8013628:	60fb      	str	r3, [r7, #12]
}
 801362a:	bf00      	nop
 801362c:	e7fe      	b.n	801362c <prvTaskExitError+0x2c>
	__asm volatile
 801362e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013632:	b672      	cpsid	i
 8013634:	f383 8811 	msr	BASEPRI, r3
 8013638:	f3bf 8f6f 	isb	sy
 801363c:	f3bf 8f4f 	dsb	sy
 8013640:	b662      	cpsie	i
 8013642:	60bb      	str	r3, [r7, #8]
}
 8013644:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013646:	bf00      	nop
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	2b00      	cmp	r3, #0
 801364c:	d0fc      	beq.n	8013648 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801364e:	bf00      	nop
 8013650:	bf00      	nop
 8013652:	3714      	adds	r7, #20
 8013654:	46bd      	mov	sp, r7
 8013656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801365a:	4770      	bx	lr
 801365c:	20000050 	.word	0x20000050

08013660 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013660:	4b07      	ldr	r3, [pc, #28]	; (8013680 <pxCurrentTCBConst2>)
 8013662:	6819      	ldr	r1, [r3, #0]
 8013664:	6808      	ldr	r0, [r1, #0]
 8013666:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801366a:	f380 8809 	msr	PSP, r0
 801366e:	f3bf 8f6f 	isb	sy
 8013672:	f04f 0000 	mov.w	r0, #0
 8013676:	f380 8811 	msr	BASEPRI, r0
 801367a:	4770      	bx	lr
 801367c:	f3af 8000 	nop.w

08013680 <pxCurrentTCBConst2>:
 8013680:	2000014c 	.word	0x2000014c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013684:	bf00      	nop
 8013686:	bf00      	nop

08013688 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013688:	4808      	ldr	r0, [pc, #32]	; (80136ac <prvPortStartFirstTask+0x24>)
 801368a:	6800      	ldr	r0, [r0, #0]
 801368c:	6800      	ldr	r0, [r0, #0]
 801368e:	f380 8808 	msr	MSP, r0
 8013692:	f04f 0000 	mov.w	r0, #0
 8013696:	f380 8814 	msr	CONTROL, r0
 801369a:	b662      	cpsie	i
 801369c:	b661      	cpsie	f
 801369e:	f3bf 8f4f 	dsb	sy
 80136a2:	f3bf 8f6f 	isb	sy
 80136a6:	df00      	svc	0
 80136a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80136aa:	bf00      	nop
 80136ac:	e000ed08 	.word	0xe000ed08

080136b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b084      	sub	sp, #16
 80136b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80136b6:	4b37      	ldr	r3, [pc, #220]	; (8013794 <xPortStartScheduler+0xe4>)
 80136b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80136ba:	68fb      	ldr	r3, [r7, #12]
 80136bc:	781b      	ldrb	r3, [r3, #0]
 80136be:	b2db      	uxtb	r3, r3
 80136c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	22ff      	movs	r2, #255	; 0xff
 80136c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	781b      	ldrb	r3, [r3, #0]
 80136cc:	b2db      	uxtb	r3, r3
 80136ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80136d0:	78fb      	ldrb	r3, [r7, #3]
 80136d2:	b2db      	uxtb	r3, r3
 80136d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80136d8:	b2da      	uxtb	r2, r3
 80136da:	4b2f      	ldr	r3, [pc, #188]	; (8013798 <xPortStartScheduler+0xe8>)
 80136dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80136de:	4b2f      	ldr	r3, [pc, #188]	; (801379c <xPortStartScheduler+0xec>)
 80136e0:	2207      	movs	r2, #7
 80136e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80136e4:	e009      	b.n	80136fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80136e6:	4b2d      	ldr	r3, [pc, #180]	; (801379c <xPortStartScheduler+0xec>)
 80136e8:	681b      	ldr	r3, [r3, #0]
 80136ea:	3b01      	subs	r3, #1
 80136ec:	4a2b      	ldr	r2, [pc, #172]	; (801379c <xPortStartScheduler+0xec>)
 80136ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80136f0:	78fb      	ldrb	r3, [r7, #3]
 80136f2:	b2db      	uxtb	r3, r3
 80136f4:	005b      	lsls	r3, r3, #1
 80136f6:	b2db      	uxtb	r3, r3
 80136f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80136fa:	78fb      	ldrb	r3, [r7, #3]
 80136fc:	b2db      	uxtb	r3, r3
 80136fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013702:	2b80      	cmp	r3, #128	; 0x80
 8013704:	d0ef      	beq.n	80136e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013706:	4b25      	ldr	r3, [pc, #148]	; (801379c <xPortStartScheduler+0xec>)
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	f1c3 0307 	rsb	r3, r3, #7
 801370e:	2b04      	cmp	r3, #4
 8013710:	d00c      	beq.n	801372c <xPortStartScheduler+0x7c>
	__asm volatile
 8013712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013716:	b672      	cpsid	i
 8013718:	f383 8811 	msr	BASEPRI, r3
 801371c:	f3bf 8f6f 	isb	sy
 8013720:	f3bf 8f4f 	dsb	sy
 8013724:	b662      	cpsie	i
 8013726:	60bb      	str	r3, [r7, #8]
}
 8013728:	bf00      	nop
 801372a:	e7fe      	b.n	801372a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801372c:	4b1b      	ldr	r3, [pc, #108]	; (801379c <xPortStartScheduler+0xec>)
 801372e:	681b      	ldr	r3, [r3, #0]
 8013730:	021b      	lsls	r3, r3, #8
 8013732:	4a1a      	ldr	r2, [pc, #104]	; (801379c <xPortStartScheduler+0xec>)
 8013734:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013736:	4b19      	ldr	r3, [pc, #100]	; (801379c <xPortStartScheduler+0xec>)
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801373e:	4a17      	ldr	r2, [pc, #92]	; (801379c <xPortStartScheduler+0xec>)
 8013740:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	b2da      	uxtb	r2, r3
 8013746:	68fb      	ldr	r3, [r7, #12]
 8013748:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801374a:	4b15      	ldr	r3, [pc, #84]	; (80137a0 <xPortStartScheduler+0xf0>)
 801374c:	681b      	ldr	r3, [r3, #0]
 801374e:	4a14      	ldr	r2, [pc, #80]	; (80137a0 <xPortStartScheduler+0xf0>)
 8013750:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8013754:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013756:	4b12      	ldr	r3, [pc, #72]	; (80137a0 <xPortStartScheduler+0xf0>)
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	4a11      	ldr	r2, [pc, #68]	; (80137a0 <xPortStartScheduler+0xf0>)
 801375c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8013760:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013762:	f000 f8dd 	bl	8013920 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013766:	4b0f      	ldr	r3, [pc, #60]	; (80137a4 <xPortStartScheduler+0xf4>)
 8013768:	2200      	movs	r2, #0
 801376a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801376c:	f000 f8fc 	bl	8013968 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8013770:	4b0d      	ldr	r3, [pc, #52]	; (80137a8 <xPortStartScheduler+0xf8>)
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	4a0c      	ldr	r2, [pc, #48]	; (80137a8 <xPortStartScheduler+0xf8>)
 8013776:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801377a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801377c:	f7ff ff84 	bl	8013688 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8013780:	f7ff fa60 	bl	8012c44 <vTaskSwitchContext>
	prvTaskExitError();
 8013784:	f7ff ff3c 	bl	8013600 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8013788:	2300      	movs	r3, #0
}
 801378a:	4618      	mov	r0, r3
 801378c:	3710      	adds	r7, #16
 801378e:	46bd      	mov	sp, r7
 8013790:	bd80      	pop	{r7, pc}
 8013792:	bf00      	nop
 8013794:	e000e400 	.word	0xe000e400
 8013798:	20000278 	.word	0x20000278
 801379c:	2000027c 	.word	0x2000027c
 80137a0:	e000ed20 	.word	0xe000ed20
 80137a4:	20000050 	.word	0x20000050
 80137a8:	e000ef34 	.word	0xe000ef34

080137ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80137ac:	b480      	push	{r7}
 80137ae:	b083      	sub	sp, #12
 80137b0:	af00      	add	r7, sp, #0
	__asm volatile
 80137b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137b6:	b672      	cpsid	i
 80137b8:	f383 8811 	msr	BASEPRI, r3
 80137bc:	f3bf 8f6f 	isb	sy
 80137c0:	f3bf 8f4f 	dsb	sy
 80137c4:	b662      	cpsie	i
 80137c6:	607b      	str	r3, [r7, #4]
}
 80137c8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80137ca:	4b10      	ldr	r3, [pc, #64]	; (801380c <vPortEnterCritical+0x60>)
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	3301      	adds	r3, #1
 80137d0:	4a0e      	ldr	r2, [pc, #56]	; (801380c <vPortEnterCritical+0x60>)
 80137d2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80137d4:	4b0d      	ldr	r3, [pc, #52]	; (801380c <vPortEnterCritical+0x60>)
 80137d6:	681b      	ldr	r3, [r3, #0]
 80137d8:	2b01      	cmp	r3, #1
 80137da:	d111      	bne.n	8013800 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80137dc:	4b0c      	ldr	r3, [pc, #48]	; (8013810 <vPortEnterCritical+0x64>)
 80137de:	681b      	ldr	r3, [r3, #0]
 80137e0:	b2db      	uxtb	r3, r3
 80137e2:	2b00      	cmp	r3, #0
 80137e4:	d00c      	beq.n	8013800 <vPortEnterCritical+0x54>
	__asm volatile
 80137e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80137ea:	b672      	cpsid	i
 80137ec:	f383 8811 	msr	BASEPRI, r3
 80137f0:	f3bf 8f6f 	isb	sy
 80137f4:	f3bf 8f4f 	dsb	sy
 80137f8:	b662      	cpsie	i
 80137fa:	603b      	str	r3, [r7, #0]
}
 80137fc:	bf00      	nop
 80137fe:	e7fe      	b.n	80137fe <vPortEnterCritical+0x52>
	}
}
 8013800:	bf00      	nop
 8013802:	370c      	adds	r7, #12
 8013804:	46bd      	mov	sp, r7
 8013806:	f85d 7b04 	ldr.w	r7, [sp], #4
 801380a:	4770      	bx	lr
 801380c:	20000050 	.word	0x20000050
 8013810:	e000ed04 	.word	0xe000ed04

08013814 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8013814:	b480      	push	{r7}
 8013816:	b083      	sub	sp, #12
 8013818:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801381a:	4b13      	ldr	r3, [pc, #76]	; (8013868 <vPortExitCritical+0x54>)
 801381c:	681b      	ldr	r3, [r3, #0]
 801381e:	2b00      	cmp	r3, #0
 8013820:	d10c      	bne.n	801383c <vPortExitCritical+0x28>
	__asm volatile
 8013822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013826:	b672      	cpsid	i
 8013828:	f383 8811 	msr	BASEPRI, r3
 801382c:	f3bf 8f6f 	isb	sy
 8013830:	f3bf 8f4f 	dsb	sy
 8013834:	b662      	cpsie	i
 8013836:	607b      	str	r3, [r7, #4]
}
 8013838:	bf00      	nop
 801383a:	e7fe      	b.n	801383a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 801383c:	4b0a      	ldr	r3, [pc, #40]	; (8013868 <vPortExitCritical+0x54>)
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	3b01      	subs	r3, #1
 8013842:	4a09      	ldr	r2, [pc, #36]	; (8013868 <vPortExitCritical+0x54>)
 8013844:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8013846:	4b08      	ldr	r3, [pc, #32]	; (8013868 <vPortExitCritical+0x54>)
 8013848:	681b      	ldr	r3, [r3, #0]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d105      	bne.n	801385a <vPortExitCritical+0x46>
 801384e:	2300      	movs	r3, #0
 8013850:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013852:	683b      	ldr	r3, [r7, #0]
 8013854:	f383 8811 	msr	BASEPRI, r3
}
 8013858:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801385a:	bf00      	nop
 801385c:	370c      	adds	r7, #12
 801385e:	46bd      	mov	sp, r7
 8013860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013864:	4770      	bx	lr
 8013866:	bf00      	nop
 8013868:	20000050 	.word	0x20000050
 801386c:	00000000 	.word	0x00000000

08013870 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8013870:	f3ef 8009 	mrs	r0, PSP
 8013874:	f3bf 8f6f 	isb	sy
 8013878:	4b15      	ldr	r3, [pc, #84]	; (80138d0 <pxCurrentTCBConst>)
 801387a:	681a      	ldr	r2, [r3, #0]
 801387c:	f01e 0f10 	tst.w	lr, #16
 8013880:	bf08      	it	eq
 8013882:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8013886:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801388a:	6010      	str	r0, [r2, #0]
 801388c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8013890:	f04f 0050 	mov.w	r0, #80	; 0x50
 8013894:	b672      	cpsid	i
 8013896:	f380 8811 	msr	BASEPRI, r0
 801389a:	f3bf 8f4f 	dsb	sy
 801389e:	f3bf 8f6f 	isb	sy
 80138a2:	b662      	cpsie	i
 80138a4:	f7ff f9ce 	bl	8012c44 <vTaskSwitchContext>
 80138a8:	f04f 0000 	mov.w	r0, #0
 80138ac:	f380 8811 	msr	BASEPRI, r0
 80138b0:	bc09      	pop	{r0, r3}
 80138b2:	6819      	ldr	r1, [r3, #0]
 80138b4:	6808      	ldr	r0, [r1, #0]
 80138b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80138ba:	f01e 0f10 	tst.w	lr, #16
 80138be:	bf08      	it	eq
 80138c0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80138c4:	f380 8809 	msr	PSP, r0
 80138c8:	f3bf 8f6f 	isb	sy
 80138cc:	4770      	bx	lr
 80138ce:	bf00      	nop

080138d0 <pxCurrentTCBConst>:
 80138d0:	2000014c 	.word	0x2000014c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80138d4:	bf00      	nop
 80138d6:	bf00      	nop

080138d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80138d8:	b580      	push	{r7, lr}
 80138da:	b082      	sub	sp, #8
 80138dc:	af00      	add	r7, sp, #0
	__asm volatile
 80138de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138e2:	b672      	cpsid	i
 80138e4:	f383 8811 	msr	BASEPRI, r3
 80138e8:	f3bf 8f6f 	isb	sy
 80138ec:	f3bf 8f4f 	dsb	sy
 80138f0:	b662      	cpsie	i
 80138f2:	607b      	str	r3, [r7, #4]
}
 80138f4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80138f6:	f7ff f8a7 	bl	8012a48 <xTaskIncrementTick>
 80138fa:	4603      	mov	r3, r0
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d003      	beq.n	8013908 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8013900:	4b06      	ldr	r3, [pc, #24]	; (801391c <SysTick_Handler+0x44>)
 8013902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013906:	601a      	str	r2, [r3, #0]
 8013908:	2300      	movs	r3, #0
 801390a:	603b      	str	r3, [r7, #0]
	__asm volatile
 801390c:	683b      	ldr	r3, [r7, #0]
 801390e:	f383 8811 	msr	BASEPRI, r3
}
 8013912:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013914:	bf00      	nop
 8013916:	3708      	adds	r7, #8
 8013918:	46bd      	mov	sp, r7
 801391a:	bd80      	pop	{r7, pc}
 801391c:	e000ed04 	.word	0xe000ed04

08013920 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8013920:	b480      	push	{r7}
 8013922:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013924:	4b0b      	ldr	r3, [pc, #44]	; (8013954 <vPortSetupTimerInterrupt+0x34>)
 8013926:	2200      	movs	r2, #0
 8013928:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801392a:	4b0b      	ldr	r3, [pc, #44]	; (8013958 <vPortSetupTimerInterrupt+0x38>)
 801392c:	2200      	movs	r2, #0
 801392e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8013930:	4b0a      	ldr	r3, [pc, #40]	; (801395c <vPortSetupTimerInterrupt+0x3c>)
 8013932:	681b      	ldr	r3, [r3, #0]
 8013934:	4a0a      	ldr	r2, [pc, #40]	; (8013960 <vPortSetupTimerInterrupt+0x40>)
 8013936:	fba2 2303 	umull	r2, r3, r2, r3
 801393a:	099b      	lsrs	r3, r3, #6
 801393c:	4a09      	ldr	r2, [pc, #36]	; (8013964 <vPortSetupTimerInterrupt+0x44>)
 801393e:	3b01      	subs	r3, #1
 8013940:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8013942:	4b04      	ldr	r3, [pc, #16]	; (8013954 <vPortSetupTimerInterrupt+0x34>)
 8013944:	2207      	movs	r2, #7
 8013946:	601a      	str	r2, [r3, #0]
}
 8013948:	bf00      	nop
 801394a:	46bd      	mov	sp, r7
 801394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013950:	4770      	bx	lr
 8013952:	bf00      	nop
 8013954:	e000e010 	.word	0xe000e010
 8013958:	e000e018 	.word	0xe000e018
 801395c:	20000070 	.word	0x20000070
 8013960:	10624dd3 	.word	0x10624dd3
 8013964:	e000e014 	.word	0xe000e014

08013968 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013968:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013978 <vPortEnableVFP+0x10>
 801396c:	6801      	ldr	r1, [r0, #0]
 801396e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013972:	6001      	str	r1, [r0, #0]
 8013974:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013976:	bf00      	nop
 8013978:	e000ed88 	.word	0xe000ed88

0801397c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801397c:	b480      	push	{r7}
 801397e:	b085      	sub	sp, #20
 8013980:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013982:	f3ef 8305 	mrs	r3, IPSR
 8013986:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013988:	68fb      	ldr	r3, [r7, #12]
 801398a:	2b0f      	cmp	r3, #15
 801398c:	d916      	bls.n	80139bc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801398e:	4a19      	ldr	r2, [pc, #100]	; (80139f4 <vPortValidateInterruptPriority+0x78>)
 8013990:	68fb      	ldr	r3, [r7, #12]
 8013992:	4413      	add	r3, r2
 8013994:	781b      	ldrb	r3, [r3, #0]
 8013996:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013998:	4b17      	ldr	r3, [pc, #92]	; (80139f8 <vPortValidateInterruptPriority+0x7c>)
 801399a:	781b      	ldrb	r3, [r3, #0]
 801399c:	7afa      	ldrb	r2, [r7, #11]
 801399e:	429a      	cmp	r2, r3
 80139a0:	d20c      	bcs.n	80139bc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80139a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139a6:	b672      	cpsid	i
 80139a8:	f383 8811 	msr	BASEPRI, r3
 80139ac:	f3bf 8f6f 	isb	sy
 80139b0:	f3bf 8f4f 	dsb	sy
 80139b4:	b662      	cpsie	i
 80139b6:	607b      	str	r3, [r7, #4]
}
 80139b8:	bf00      	nop
 80139ba:	e7fe      	b.n	80139ba <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80139bc:	4b0f      	ldr	r3, [pc, #60]	; (80139fc <vPortValidateInterruptPriority+0x80>)
 80139be:	681b      	ldr	r3, [r3, #0]
 80139c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80139c4:	4b0e      	ldr	r3, [pc, #56]	; (8013a00 <vPortValidateInterruptPriority+0x84>)
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	429a      	cmp	r2, r3
 80139ca:	d90c      	bls.n	80139e6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 80139cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139d0:	b672      	cpsid	i
 80139d2:	f383 8811 	msr	BASEPRI, r3
 80139d6:	f3bf 8f6f 	isb	sy
 80139da:	f3bf 8f4f 	dsb	sy
 80139de:	b662      	cpsie	i
 80139e0:	603b      	str	r3, [r7, #0]
}
 80139e2:	bf00      	nop
 80139e4:	e7fe      	b.n	80139e4 <vPortValidateInterruptPriority+0x68>
	}
 80139e6:	bf00      	nop
 80139e8:	3714      	adds	r7, #20
 80139ea:	46bd      	mov	sp, r7
 80139ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139f0:	4770      	bx	lr
 80139f2:	bf00      	nop
 80139f4:	e000e3f0 	.word	0xe000e3f0
 80139f8:	20000278 	.word	0x20000278
 80139fc:	e000ed0c 	.word	0xe000ed0c
 8013a00:	2000027c 	.word	0x2000027c

08013a04 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b08a      	sub	sp, #40	; 0x28
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013a10:	f7fe ff4c 	bl	80128ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013a14:	4b5e      	ldr	r3, [pc, #376]	; (8013b90 <pvPortMalloc+0x18c>)
 8013a16:	681b      	ldr	r3, [r3, #0]
 8013a18:	2b00      	cmp	r3, #0
 8013a1a:	d101      	bne.n	8013a20 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013a1c:	f000 f920 	bl	8013c60 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013a20:	4b5c      	ldr	r3, [pc, #368]	; (8013b94 <pvPortMalloc+0x190>)
 8013a22:	681a      	ldr	r2, [r3, #0]
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	4013      	ands	r3, r2
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	f040 8092 	bne.w	8013b52 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013a2e:	687b      	ldr	r3, [r7, #4]
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d01f      	beq.n	8013a74 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8013a34:	2208      	movs	r2, #8
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	4413      	add	r3, r2
 8013a3a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	f003 0307 	and.w	r3, r3, #7
 8013a42:	2b00      	cmp	r3, #0
 8013a44:	d016      	beq.n	8013a74 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013a46:	687b      	ldr	r3, [r7, #4]
 8013a48:	f023 0307 	bic.w	r3, r3, #7
 8013a4c:	3308      	adds	r3, #8
 8013a4e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013a50:	687b      	ldr	r3, [r7, #4]
 8013a52:	f003 0307 	and.w	r3, r3, #7
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d00c      	beq.n	8013a74 <pvPortMalloc+0x70>
	__asm volatile
 8013a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a5e:	b672      	cpsid	i
 8013a60:	f383 8811 	msr	BASEPRI, r3
 8013a64:	f3bf 8f6f 	isb	sy
 8013a68:	f3bf 8f4f 	dsb	sy
 8013a6c:	b662      	cpsie	i
 8013a6e:	617b      	str	r3, [r7, #20]
}
 8013a70:	bf00      	nop
 8013a72:	e7fe      	b.n	8013a72 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d06b      	beq.n	8013b52 <pvPortMalloc+0x14e>
 8013a7a:	4b47      	ldr	r3, [pc, #284]	; (8013b98 <pvPortMalloc+0x194>)
 8013a7c:	681b      	ldr	r3, [r3, #0]
 8013a7e:	687a      	ldr	r2, [r7, #4]
 8013a80:	429a      	cmp	r2, r3
 8013a82:	d866      	bhi.n	8013b52 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013a84:	4b45      	ldr	r3, [pc, #276]	; (8013b9c <pvPortMalloc+0x198>)
 8013a86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013a88:	4b44      	ldr	r3, [pc, #272]	; (8013b9c <pvPortMalloc+0x198>)
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013a8e:	e004      	b.n	8013a9a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8013a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8013a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a9c:	685b      	ldr	r3, [r3, #4]
 8013a9e:	687a      	ldr	r2, [r7, #4]
 8013aa0:	429a      	cmp	r2, r3
 8013aa2:	d903      	bls.n	8013aac <pvPortMalloc+0xa8>
 8013aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d1f1      	bne.n	8013a90 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013aac:	4b38      	ldr	r3, [pc, #224]	; (8013b90 <pvPortMalloc+0x18c>)
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ab2:	429a      	cmp	r2, r3
 8013ab4:	d04d      	beq.n	8013b52 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013ab6:	6a3b      	ldr	r3, [r7, #32]
 8013ab8:	681b      	ldr	r3, [r3, #0]
 8013aba:	2208      	movs	r2, #8
 8013abc:	4413      	add	r3, r2
 8013abe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ac2:	681a      	ldr	r2, [r3, #0]
 8013ac4:	6a3b      	ldr	r3, [r7, #32]
 8013ac6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aca:	685a      	ldr	r2, [r3, #4]
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	1ad2      	subs	r2, r2, r3
 8013ad0:	2308      	movs	r3, #8
 8013ad2:	005b      	lsls	r3, r3, #1
 8013ad4:	429a      	cmp	r2, r3
 8013ad6:	d921      	bls.n	8013b1c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	4413      	add	r3, r2
 8013ade:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013ae0:	69bb      	ldr	r3, [r7, #24]
 8013ae2:	f003 0307 	and.w	r3, r3, #7
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d00c      	beq.n	8013b04 <pvPortMalloc+0x100>
	__asm volatile
 8013aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013aee:	b672      	cpsid	i
 8013af0:	f383 8811 	msr	BASEPRI, r3
 8013af4:	f3bf 8f6f 	isb	sy
 8013af8:	f3bf 8f4f 	dsb	sy
 8013afc:	b662      	cpsie	i
 8013afe:	613b      	str	r3, [r7, #16]
}
 8013b00:	bf00      	nop
 8013b02:	e7fe      	b.n	8013b02 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b06:	685a      	ldr	r2, [r3, #4]
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	1ad2      	subs	r2, r2, r3
 8013b0c:	69bb      	ldr	r3, [r7, #24]
 8013b0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b12:	687a      	ldr	r2, [r7, #4]
 8013b14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013b16:	69b8      	ldr	r0, [r7, #24]
 8013b18:	f000 f904 	bl	8013d24 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013b1c:	4b1e      	ldr	r3, [pc, #120]	; (8013b98 <pvPortMalloc+0x194>)
 8013b1e:	681a      	ldr	r2, [r3, #0]
 8013b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b22:	685b      	ldr	r3, [r3, #4]
 8013b24:	1ad3      	subs	r3, r2, r3
 8013b26:	4a1c      	ldr	r2, [pc, #112]	; (8013b98 <pvPortMalloc+0x194>)
 8013b28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013b2a:	4b1b      	ldr	r3, [pc, #108]	; (8013b98 <pvPortMalloc+0x194>)
 8013b2c:	681a      	ldr	r2, [r3, #0]
 8013b2e:	4b1c      	ldr	r3, [pc, #112]	; (8013ba0 <pvPortMalloc+0x19c>)
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	429a      	cmp	r2, r3
 8013b34:	d203      	bcs.n	8013b3e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013b36:	4b18      	ldr	r3, [pc, #96]	; (8013b98 <pvPortMalloc+0x194>)
 8013b38:	681b      	ldr	r3, [r3, #0]
 8013b3a:	4a19      	ldr	r2, [pc, #100]	; (8013ba0 <pvPortMalloc+0x19c>)
 8013b3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b40:	685a      	ldr	r2, [r3, #4]
 8013b42:	4b14      	ldr	r3, [pc, #80]	; (8013b94 <pvPortMalloc+0x190>)
 8013b44:	681b      	ldr	r3, [r3, #0]
 8013b46:	431a      	orrs	r2, r3
 8013b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013b4e:	2200      	movs	r2, #0
 8013b50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013b52:	f7fe feb9 	bl	80128c8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8013b56:	69fb      	ldr	r3, [r7, #28]
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d101      	bne.n	8013b60 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8013b5c:	f7fd faf5 	bl	801114a <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013b60:	69fb      	ldr	r3, [r7, #28]
 8013b62:	f003 0307 	and.w	r3, r3, #7
 8013b66:	2b00      	cmp	r3, #0
 8013b68:	d00c      	beq.n	8013b84 <pvPortMalloc+0x180>
	__asm volatile
 8013b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b6e:	b672      	cpsid	i
 8013b70:	f383 8811 	msr	BASEPRI, r3
 8013b74:	f3bf 8f6f 	isb	sy
 8013b78:	f3bf 8f4f 	dsb	sy
 8013b7c:	b662      	cpsie	i
 8013b7e:	60fb      	str	r3, [r7, #12]
}
 8013b80:	bf00      	nop
 8013b82:	e7fe      	b.n	8013b82 <pvPortMalloc+0x17e>
	return pvReturn;
 8013b84:	69fb      	ldr	r3, [r7, #28]
}
 8013b86:	4618      	mov	r0, r3
 8013b88:	3728      	adds	r7, #40	; 0x28
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	bd80      	pop	{r7, pc}
 8013b8e:	bf00      	nop
 8013b90:	20008288 	.word	0x20008288
 8013b94:	20008294 	.word	0x20008294
 8013b98:	2000828c 	.word	0x2000828c
 8013b9c:	20008280 	.word	0x20008280
 8013ba0:	20008290 	.word	0x20008290

08013ba4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013ba4:	b580      	push	{r7, lr}
 8013ba6:	b086      	sub	sp, #24
 8013ba8:	af00      	add	r7, sp, #0
 8013baa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d04c      	beq.n	8013c50 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013bb6:	2308      	movs	r3, #8
 8013bb8:	425b      	negs	r3, r3
 8013bba:	697a      	ldr	r2, [r7, #20]
 8013bbc:	4413      	add	r3, r2
 8013bbe:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013bc0:	697b      	ldr	r3, [r7, #20]
 8013bc2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013bc4:	693b      	ldr	r3, [r7, #16]
 8013bc6:	685a      	ldr	r2, [r3, #4]
 8013bc8:	4b23      	ldr	r3, [pc, #140]	; (8013c58 <vPortFree+0xb4>)
 8013bca:	681b      	ldr	r3, [r3, #0]
 8013bcc:	4013      	ands	r3, r2
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d10c      	bne.n	8013bec <vPortFree+0x48>
	__asm volatile
 8013bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bd6:	b672      	cpsid	i
 8013bd8:	f383 8811 	msr	BASEPRI, r3
 8013bdc:	f3bf 8f6f 	isb	sy
 8013be0:	f3bf 8f4f 	dsb	sy
 8013be4:	b662      	cpsie	i
 8013be6:	60fb      	str	r3, [r7, #12]
}
 8013be8:	bf00      	nop
 8013bea:	e7fe      	b.n	8013bea <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013bec:	693b      	ldr	r3, [r7, #16]
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	2b00      	cmp	r3, #0
 8013bf2:	d00c      	beq.n	8013c0e <vPortFree+0x6a>
	__asm volatile
 8013bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013bf8:	b672      	cpsid	i
 8013bfa:	f383 8811 	msr	BASEPRI, r3
 8013bfe:	f3bf 8f6f 	isb	sy
 8013c02:	f3bf 8f4f 	dsb	sy
 8013c06:	b662      	cpsie	i
 8013c08:	60bb      	str	r3, [r7, #8]
}
 8013c0a:	bf00      	nop
 8013c0c:	e7fe      	b.n	8013c0c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013c0e:	693b      	ldr	r3, [r7, #16]
 8013c10:	685a      	ldr	r2, [r3, #4]
 8013c12:	4b11      	ldr	r3, [pc, #68]	; (8013c58 <vPortFree+0xb4>)
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	4013      	ands	r3, r2
 8013c18:	2b00      	cmp	r3, #0
 8013c1a:	d019      	beq.n	8013c50 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013c1c:	693b      	ldr	r3, [r7, #16]
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d115      	bne.n	8013c50 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013c24:	693b      	ldr	r3, [r7, #16]
 8013c26:	685a      	ldr	r2, [r3, #4]
 8013c28:	4b0b      	ldr	r3, [pc, #44]	; (8013c58 <vPortFree+0xb4>)
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	43db      	mvns	r3, r3
 8013c2e:	401a      	ands	r2, r3
 8013c30:	693b      	ldr	r3, [r7, #16]
 8013c32:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013c34:	f7fe fe3a 	bl	80128ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013c38:	693b      	ldr	r3, [r7, #16]
 8013c3a:	685a      	ldr	r2, [r3, #4]
 8013c3c:	4b07      	ldr	r3, [pc, #28]	; (8013c5c <vPortFree+0xb8>)
 8013c3e:	681b      	ldr	r3, [r3, #0]
 8013c40:	4413      	add	r3, r2
 8013c42:	4a06      	ldr	r2, [pc, #24]	; (8013c5c <vPortFree+0xb8>)
 8013c44:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013c46:	6938      	ldr	r0, [r7, #16]
 8013c48:	f000 f86c 	bl	8013d24 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013c4c:	f7fe fe3c 	bl	80128c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013c50:	bf00      	nop
 8013c52:	3718      	adds	r7, #24
 8013c54:	46bd      	mov	sp, r7
 8013c56:	bd80      	pop	{r7, pc}
 8013c58:	20008294 	.word	0x20008294
 8013c5c:	2000828c 	.word	0x2000828c

08013c60 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013c60:	b480      	push	{r7}
 8013c62:	b085      	sub	sp, #20
 8013c64:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013c6a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013c6c:	4b27      	ldr	r3, [pc, #156]	; (8013d0c <prvHeapInit+0xac>)
 8013c6e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	f003 0307 	and.w	r3, r3, #7
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	d00c      	beq.n	8013c94 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	3307      	adds	r3, #7
 8013c7e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	f023 0307 	bic.w	r3, r3, #7
 8013c86:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013c88:	68ba      	ldr	r2, [r7, #8]
 8013c8a:	68fb      	ldr	r3, [r7, #12]
 8013c8c:	1ad3      	subs	r3, r2, r3
 8013c8e:	4a1f      	ldr	r2, [pc, #124]	; (8013d0c <prvHeapInit+0xac>)
 8013c90:	4413      	add	r3, r2
 8013c92:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013c94:	68fb      	ldr	r3, [r7, #12]
 8013c96:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013c98:	4a1d      	ldr	r2, [pc, #116]	; (8013d10 <prvHeapInit+0xb0>)
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013c9e:	4b1c      	ldr	r3, [pc, #112]	; (8013d10 <prvHeapInit+0xb0>)
 8013ca0:	2200      	movs	r2, #0
 8013ca2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	68ba      	ldr	r2, [r7, #8]
 8013ca8:	4413      	add	r3, r2
 8013caa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013cac:	2208      	movs	r2, #8
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	1a9b      	subs	r3, r3, r2
 8013cb2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	f023 0307 	bic.w	r3, r3, #7
 8013cba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	4a15      	ldr	r2, [pc, #84]	; (8013d14 <prvHeapInit+0xb4>)
 8013cc0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013cc2:	4b14      	ldr	r3, [pc, #80]	; (8013d14 <prvHeapInit+0xb4>)
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	2200      	movs	r2, #0
 8013cc8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013cca:	4b12      	ldr	r3, [pc, #72]	; (8013d14 <prvHeapInit+0xb4>)
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	2200      	movs	r2, #0
 8013cd0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013cd6:	683b      	ldr	r3, [r7, #0]
 8013cd8:	68fa      	ldr	r2, [r7, #12]
 8013cda:	1ad2      	subs	r2, r2, r3
 8013cdc:	683b      	ldr	r3, [r7, #0]
 8013cde:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013ce0:	4b0c      	ldr	r3, [pc, #48]	; (8013d14 <prvHeapInit+0xb4>)
 8013ce2:	681a      	ldr	r2, [r3, #0]
 8013ce4:	683b      	ldr	r3, [r7, #0]
 8013ce6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013ce8:	683b      	ldr	r3, [r7, #0]
 8013cea:	685b      	ldr	r3, [r3, #4]
 8013cec:	4a0a      	ldr	r2, [pc, #40]	; (8013d18 <prvHeapInit+0xb8>)
 8013cee:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013cf0:	683b      	ldr	r3, [r7, #0]
 8013cf2:	685b      	ldr	r3, [r3, #4]
 8013cf4:	4a09      	ldr	r2, [pc, #36]	; (8013d1c <prvHeapInit+0xbc>)
 8013cf6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013cf8:	4b09      	ldr	r3, [pc, #36]	; (8013d20 <prvHeapInit+0xc0>)
 8013cfa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013cfe:	601a      	str	r2, [r3, #0]
}
 8013d00:	bf00      	nop
 8013d02:	3714      	adds	r7, #20
 8013d04:	46bd      	mov	sp, r7
 8013d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d0a:	4770      	bx	lr
 8013d0c:	20000280 	.word	0x20000280
 8013d10:	20008280 	.word	0x20008280
 8013d14:	20008288 	.word	0x20008288
 8013d18:	20008290 	.word	0x20008290
 8013d1c:	2000828c 	.word	0x2000828c
 8013d20:	20008294 	.word	0x20008294

08013d24 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013d24:	b480      	push	{r7}
 8013d26:	b085      	sub	sp, #20
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013d2c:	4b28      	ldr	r3, [pc, #160]	; (8013dd0 <prvInsertBlockIntoFreeList+0xac>)
 8013d2e:	60fb      	str	r3, [r7, #12]
 8013d30:	e002      	b.n	8013d38 <prvInsertBlockIntoFreeList+0x14>
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	60fb      	str	r3, [r7, #12]
 8013d38:	68fb      	ldr	r3, [r7, #12]
 8013d3a:	681b      	ldr	r3, [r3, #0]
 8013d3c:	687a      	ldr	r2, [r7, #4]
 8013d3e:	429a      	cmp	r2, r3
 8013d40:	d8f7      	bhi.n	8013d32 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013d42:	68fb      	ldr	r3, [r7, #12]
 8013d44:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013d46:	68fb      	ldr	r3, [r7, #12]
 8013d48:	685b      	ldr	r3, [r3, #4]
 8013d4a:	68ba      	ldr	r2, [r7, #8]
 8013d4c:	4413      	add	r3, r2
 8013d4e:	687a      	ldr	r2, [r7, #4]
 8013d50:	429a      	cmp	r2, r3
 8013d52:	d108      	bne.n	8013d66 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013d54:	68fb      	ldr	r3, [r7, #12]
 8013d56:	685a      	ldr	r2, [r3, #4]
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	685b      	ldr	r3, [r3, #4]
 8013d5c:	441a      	add	r2, r3
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013d62:	68fb      	ldr	r3, [r7, #12]
 8013d64:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013d66:	687b      	ldr	r3, [r7, #4]
 8013d68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013d6a:	687b      	ldr	r3, [r7, #4]
 8013d6c:	685b      	ldr	r3, [r3, #4]
 8013d6e:	68ba      	ldr	r2, [r7, #8]
 8013d70:	441a      	add	r2, r3
 8013d72:	68fb      	ldr	r3, [r7, #12]
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	429a      	cmp	r2, r3
 8013d78:	d118      	bne.n	8013dac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013d7a:	68fb      	ldr	r3, [r7, #12]
 8013d7c:	681a      	ldr	r2, [r3, #0]
 8013d7e:	4b15      	ldr	r3, [pc, #84]	; (8013dd4 <prvInsertBlockIntoFreeList+0xb0>)
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	429a      	cmp	r2, r3
 8013d84:	d00d      	beq.n	8013da2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	685a      	ldr	r2, [r3, #4]
 8013d8a:	68fb      	ldr	r3, [r7, #12]
 8013d8c:	681b      	ldr	r3, [r3, #0]
 8013d8e:	685b      	ldr	r3, [r3, #4]
 8013d90:	441a      	add	r2, r3
 8013d92:	687b      	ldr	r3, [r7, #4]
 8013d94:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013d96:	68fb      	ldr	r3, [r7, #12]
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	681a      	ldr	r2, [r3, #0]
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	601a      	str	r2, [r3, #0]
 8013da0:	e008      	b.n	8013db4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013da2:	4b0c      	ldr	r3, [pc, #48]	; (8013dd4 <prvInsertBlockIntoFreeList+0xb0>)
 8013da4:	681a      	ldr	r2, [r3, #0]
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	601a      	str	r2, [r3, #0]
 8013daa:	e003      	b.n	8013db4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013dac:	68fb      	ldr	r3, [r7, #12]
 8013dae:	681a      	ldr	r2, [r3, #0]
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013db4:	68fa      	ldr	r2, [r7, #12]
 8013db6:	687b      	ldr	r3, [r7, #4]
 8013db8:	429a      	cmp	r2, r3
 8013dba:	d002      	beq.n	8013dc2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	687a      	ldr	r2, [r7, #4]
 8013dc0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013dc2:	bf00      	nop
 8013dc4:	3714      	adds	r7, #20
 8013dc6:	46bd      	mov	sp, r7
 8013dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dcc:	4770      	bx	lr
 8013dce:	bf00      	nop
 8013dd0:	20008280 	.word	0x20008280
 8013dd4:	20008288 	.word	0x20008288

08013dd8 <BSP_LED_On>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8013dd8:	b580      	push	{r7, lr}
 8013dda:	b084      	sub	sp, #16
 8013ddc:	af00      	add	r7, sp, #0
 8013dde:	4603      	mov	r3, r0
 8013de0:	71fb      	strb	r3, [r7, #7]
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)	/* Switch On LED connected to GPIO */
 8013de2:	79fb      	ldrb	r3, [r7, #7]
 8013de4:	2b00      	cmp	r3, #0
 8013de6:	d108      	bne.n	8013dfa <BSP_LED_On+0x22>
  {
    gpio_led = LED1_GPIO_PORT;
 8013de8:	4b06      	ldr	r3, [pc, #24]	; (8013e04 <BSP_LED_On+0x2c>)
 8013dea:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_SET);
 8013dec:	2302      	movs	r3, #2
 8013dee:	b29b      	uxth	r3, r3
 8013df0:	2201      	movs	r2, #1
 8013df2:	4619      	mov	r1, r3
 8013df4:	68f8      	ldr	r0, [r7, #12]
 8013df6:	f7ee ff79 	bl	8002cec <HAL_GPIO_WritePin>
  }
}
 8013dfa:	bf00      	nop
 8013dfc:	3710      	adds	r7, #16
 8013dfe:	46bd      	mov	sp, r7
 8013e00:	bd80      	pop	{r7, pc}
 8013e02:	bf00      	nop
 8013e04:	40022000 	.word	0x40022000

08013e08 <BSP_COM_Init>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  * @retval None
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b08a      	sub	sp, #40	; 0x28
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	4603      	mov	r3, r0
 8013e10:	6039      	str	r1, [r7, #0]
 8013e12:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8013e14:	79fb      	ldrb	r3, [r7, #7]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d10b      	bne.n	8013e32 <BSP_COM_Init+0x2a>
 8013e1a:	4b2e      	ldr	r3, [pc, #184]	; (8013ed4 <BSP_COM_Init+0xcc>)
 8013e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e1e:	4a2d      	ldr	r2, [pc, #180]	; (8013ed4 <BSP_COM_Init+0xcc>)
 8013e20:	f043 0301 	orr.w	r3, r3, #1
 8013e24:	6313      	str	r3, [r2, #48]	; 0x30
 8013e26:	4b2b      	ldr	r3, [pc, #172]	; (8013ed4 <BSP_COM_Init+0xcc>)
 8013e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e2a:	f003 0301 	and.w	r3, r3, #1
 8013e2e:	613b      	str	r3, [r7, #16]
 8013e30:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8013e32:	79fb      	ldrb	r3, [r7, #7]
 8013e34:	2b00      	cmp	r3, #0
 8013e36:	d10b      	bne.n	8013e50 <BSP_COM_Init+0x48>
 8013e38:	4b26      	ldr	r3, [pc, #152]	; (8013ed4 <BSP_COM_Init+0xcc>)
 8013e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e3c:	4a25      	ldr	r2, [pc, #148]	; (8013ed4 <BSP_COM_Init+0xcc>)
 8013e3e:	f043 0302 	orr.w	r3, r3, #2
 8013e42:	6313      	str	r3, [r2, #48]	; 0x30
 8013e44:	4b23      	ldr	r3, [pc, #140]	; (8013ed4 <BSP_COM_Init+0xcc>)
 8013e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e48:	f003 0302 	and.w	r3, r3, #2
 8013e4c:	60fb      	str	r3, [r7, #12]
 8013e4e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8013e50:	79fb      	ldrb	r3, [r7, #7]
 8013e52:	2b00      	cmp	r3, #0
 8013e54:	d10b      	bne.n	8013e6e <BSP_COM_Init+0x66>
 8013e56:	4b1f      	ldr	r3, [pc, #124]	; (8013ed4 <BSP_COM_Init+0xcc>)
 8013e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013e5a:	4a1e      	ldr	r2, [pc, #120]	; (8013ed4 <BSP_COM_Init+0xcc>)
 8013e5c:	f043 0310 	orr.w	r3, r3, #16
 8013e60:	6453      	str	r3, [r2, #68]	; 0x44
 8013e62:	4b1c      	ldr	r3, [pc, #112]	; (8013ed4 <BSP_COM_Init+0xcc>)
 8013e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013e66:	f003 0310 	and.w	r3, r3, #16
 8013e6a:	60bb      	str	r3, [r7, #8]
 8013e6c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8013e6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013e72:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8013e74:	2302      	movs	r3, #2
 8013e76:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8013e78:	2302      	movs	r3, #2
 8013e7a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8013e7c:	2301      	movs	r3, #1
 8013e7e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8013e80:	2307      	movs	r3, #7
 8013e82:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8013e84:	79fb      	ldrb	r3, [r7, #7]
 8013e86:	4a14      	ldr	r2, [pc, #80]	; (8013ed8 <BSP_COM_Init+0xd0>)
 8013e88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013e8c:	f107 0214 	add.w	r2, r7, #20
 8013e90:	4611      	mov	r1, r2
 8013e92:	4618      	mov	r0, r3
 8013e94:	f7ee fc5a 	bl	800274c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8013e98:	2380      	movs	r3, #128	; 0x80
 8013e9a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8013e9c:	2302      	movs	r3, #2
 8013e9e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8013ea0:	2307      	movs	r3, #7
 8013ea2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8013ea4:	79fb      	ldrb	r3, [r7, #7]
 8013ea6:	4a0d      	ldr	r2, [pc, #52]	; (8013edc <BSP_COM_Init+0xd4>)
 8013ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013eac:	f107 0214 	add.w	r2, r7, #20
 8013eb0:	4611      	mov	r1, r2
 8013eb2:	4618      	mov	r0, r3
 8013eb4:	f7ee fc4a 	bl	800274c <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8013eb8:	79fb      	ldrb	r3, [r7, #7]
 8013eba:	4a09      	ldr	r2, [pc, #36]	; (8013ee0 <BSP_COM_Init+0xd8>)
 8013ebc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8013ec0:	683b      	ldr	r3, [r7, #0]
 8013ec2:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 8013ec4:	6838      	ldr	r0, [r7, #0]
 8013ec6:	f7f6 f83d 	bl	8009f44 <HAL_UART_Init>
}
 8013eca:	bf00      	nop
 8013ecc:	3728      	adds	r7, #40	; 0x28
 8013ece:	46bd      	mov	sp, r7
 8013ed0:	bd80      	pop	{r7, pc}
 8013ed2:	bf00      	nop
 8013ed4:	40023800 	.word	0x40023800
 8013ed8:	20000058 	.word	0x20000058
 8013edc:	2000005c 	.word	0x2000005c
 8013ee0:	20000054 	.word	0x20000054

08013ee4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8013ee4:	b580      	push	{r7, lr}
 8013ee6:	b08c      	sub	sp, #48	; 0x30
 8013ee8:	af00      	add	r7, sp, #0
 8013eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	4a51      	ldr	r2, [pc, #324]	; (8014034 <I2Cx_MspInit+0x150>)
 8013ef0:	4293      	cmp	r3, r2
 8013ef2:	d14d      	bne.n	8013f90 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8013ef4:	4b50      	ldr	r3, [pc, #320]	; (8014038 <I2Cx_MspInit+0x154>)
 8013ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ef8:	4a4f      	ldr	r2, [pc, #316]	; (8014038 <I2Cx_MspInit+0x154>)
 8013efa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013efe:	6313      	str	r3, [r2, #48]	; 0x30
 8013f00:	4b4d      	ldr	r3, [pc, #308]	; (8014038 <I2Cx_MspInit+0x154>)
 8013f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013f08:	61bb      	str	r3, [r7, #24]
 8013f0a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8013f0c:	2380      	movs	r3, #128	; 0x80
 8013f0e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8013f10:	2312      	movs	r3, #18
 8013f12:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8013f14:	2300      	movs	r3, #0
 8013f16:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8013f18:	2302      	movs	r3, #2
 8013f1a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8013f1c:	2304      	movs	r3, #4
 8013f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8013f20:	f107 031c 	add.w	r3, r7, #28
 8013f24:	4619      	mov	r1, r3
 8013f26:	4845      	ldr	r0, [pc, #276]	; (801403c <I2Cx_MspInit+0x158>)
 8013f28:	f7ee fc10 	bl	800274c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8013f2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013f30:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8013f32:	f107 031c 	add.w	r3, r7, #28
 8013f36:	4619      	mov	r1, r3
 8013f38:	4840      	ldr	r0, [pc, #256]	; (801403c <I2Cx_MspInit+0x158>)
 8013f3a:	f7ee fc07 	bl	800274c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8013f3e:	4b3e      	ldr	r3, [pc, #248]	; (8014038 <I2Cx_MspInit+0x154>)
 8013f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f42:	4a3d      	ldr	r2, [pc, #244]	; (8014038 <I2Cx_MspInit+0x154>)
 8013f44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013f48:	6413      	str	r3, [r2, #64]	; 0x40
 8013f4a:	4b3b      	ldr	r3, [pc, #236]	; (8014038 <I2Cx_MspInit+0x154>)
 8013f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013f52:	617b      	str	r3, [r7, #20]
 8013f54:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8013f56:	4b38      	ldr	r3, [pc, #224]	; (8014038 <I2Cx_MspInit+0x154>)
 8013f58:	6a1b      	ldr	r3, [r3, #32]
 8013f5a:	4a37      	ldr	r2, [pc, #220]	; (8014038 <I2Cx_MspInit+0x154>)
 8013f5c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013f60:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8013f62:	4b35      	ldr	r3, [pc, #212]	; (8014038 <I2Cx_MspInit+0x154>)
 8013f64:	6a1b      	ldr	r3, [r3, #32]
 8013f66:	4a34      	ldr	r2, [pc, #208]	; (8014038 <I2Cx_MspInit+0x154>)
 8013f68:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8013f6c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8013f6e:	2200      	movs	r2, #0
 8013f70:	210f      	movs	r1, #15
 8013f72:	2048      	movs	r0, #72	; 0x48
 8013f74:	f7ed f95a 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8013f78:	2048      	movs	r0, #72	; 0x48
 8013f7a:	f7ed f973 	bl	8001264 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8013f7e:	2200      	movs	r2, #0
 8013f80:	210f      	movs	r1, #15
 8013f82:	2049      	movs	r0, #73	; 0x49
 8013f84:	f7ed f952 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8013f88:	2049      	movs	r0, #73	; 0x49
 8013f8a:	f7ed f96b 	bl	8001264 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8013f8e:	e04d      	b.n	801402c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8013f90:	4b29      	ldr	r3, [pc, #164]	; (8014038 <I2Cx_MspInit+0x154>)
 8013f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013f94:	4a28      	ldr	r2, [pc, #160]	; (8014038 <I2Cx_MspInit+0x154>)
 8013f96:	f043 0302 	orr.w	r3, r3, #2
 8013f9a:	6313      	str	r3, [r2, #48]	; 0x30
 8013f9c:	4b26      	ldr	r3, [pc, #152]	; (8014038 <I2Cx_MspInit+0x154>)
 8013f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013fa0:	f003 0302 	and.w	r3, r3, #2
 8013fa4:	613b      	str	r3, [r7, #16]
 8013fa6:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8013fa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013fac:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8013fae:	2312      	movs	r3, #18
 8013fb0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8013fb2:	2300      	movs	r3, #0
 8013fb4:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8013fb6:	2302      	movs	r3, #2
 8013fb8:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8013fba:	2304      	movs	r3, #4
 8013fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8013fbe:	f107 031c 	add.w	r3, r7, #28
 8013fc2:	4619      	mov	r1, r3
 8013fc4:	481e      	ldr	r0, [pc, #120]	; (8014040 <I2Cx_MspInit+0x15c>)
 8013fc6:	f7ee fbc1 	bl	800274c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8013fca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013fce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8013fd0:	f107 031c 	add.w	r3, r7, #28
 8013fd4:	4619      	mov	r1, r3
 8013fd6:	481a      	ldr	r0, [pc, #104]	; (8014040 <I2Cx_MspInit+0x15c>)
 8013fd8:	f7ee fbb8 	bl	800274c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8013fdc:	4b16      	ldr	r3, [pc, #88]	; (8014038 <I2Cx_MspInit+0x154>)
 8013fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fe0:	4a15      	ldr	r2, [pc, #84]	; (8014038 <I2Cx_MspInit+0x154>)
 8013fe2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8013fe8:	4b13      	ldr	r3, [pc, #76]	; (8014038 <I2Cx_MspInit+0x154>)
 8013fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013fec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013ff0:	60fb      	str	r3, [r7, #12]
 8013ff2:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8013ff4:	4b10      	ldr	r3, [pc, #64]	; (8014038 <I2Cx_MspInit+0x154>)
 8013ff6:	6a1b      	ldr	r3, [r3, #32]
 8013ff8:	4a0f      	ldr	r2, [pc, #60]	; (8014038 <I2Cx_MspInit+0x154>)
 8013ffa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013ffe:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8014000:	4b0d      	ldr	r3, [pc, #52]	; (8014038 <I2Cx_MspInit+0x154>)
 8014002:	6a1b      	ldr	r3, [r3, #32]
 8014004:	4a0c      	ldr	r2, [pc, #48]	; (8014038 <I2Cx_MspInit+0x154>)
 8014006:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801400a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 801400c:	2200      	movs	r2, #0
 801400e:	210f      	movs	r1, #15
 8014010:	201f      	movs	r0, #31
 8014012:	f7ed f90b 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8014016:	201f      	movs	r0, #31
 8014018:	f7ed f924 	bl	8001264 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 801401c:	2200      	movs	r2, #0
 801401e:	210f      	movs	r1, #15
 8014020:	2020      	movs	r0, #32
 8014022:	f7ed f903 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8014026:	2020      	movs	r0, #32
 8014028:	f7ed f91c 	bl	8001264 <HAL_NVIC_EnableIRQ>
}
 801402c:	bf00      	nop
 801402e:	3730      	adds	r7, #48	; 0x30
 8014030:	46bd      	mov	sp, r7
 8014032:	bd80      	pop	{r7, pc}
 8014034:	20008298 	.word	0x20008298
 8014038:	40023800 	.word	0x40023800
 801403c:	40021c00 	.word	0x40021c00
 8014040:	40020400 	.word	0x40020400

08014044 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8014044:	b580      	push	{r7, lr}
 8014046:	b082      	sub	sp, #8
 8014048:	af00      	add	r7, sp, #0
 801404a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 801404c:	6878      	ldr	r0, [r7, #4]
 801404e:	f7f0 fdb1 	bl	8004bb4 <HAL_I2C_GetState>
 8014052:	4603      	mov	r3, r0
 8014054:	2b00      	cmp	r3, #0
 8014056:	d125      	bne.n	80140a4 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8014058:	687b      	ldr	r3, [r7, #4]
 801405a:	4a14      	ldr	r2, [pc, #80]	; (80140ac <I2Cx_Init+0x68>)
 801405c:	4293      	cmp	r3, r2
 801405e:	d103      	bne.n	8014068 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8014060:	687b      	ldr	r3, [r7, #4]
 8014062:	4a13      	ldr	r2, [pc, #76]	; (80140b0 <I2Cx_Init+0x6c>)
 8014064:	601a      	str	r2, [r3, #0]
 8014066:	e002      	b.n	801406e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8014068:	687b      	ldr	r3, [r7, #4]
 801406a:	4a12      	ldr	r2, [pc, #72]	; (80140b4 <I2Cx_Init+0x70>)
 801406c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	4a11      	ldr	r2, [pc, #68]	; (80140b8 <I2Cx_Init+0x74>)
 8014072:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8014074:	687b      	ldr	r3, [r7, #4]
 8014076:	2200      	movs	r2, #0
 8014078:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 801407a:	687b      	ldr	r3, [r7, #4]
 801407c:	2201      	movs	r2, #1
 801407e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	2200      	movs	r2, #0
 8014084:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	2200      	movs	r2, #0
 801408a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	2200      	movs	r2, #0
 8014090:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8014092:	687b      	ldr	r3, [r7, #4]
 8014094:	2200      	movs	r2, #0
 8014096:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8014098:	6878      	ldr	r0, [r7, #4]
 801409a:	f7ff ff23 	bl	8013ee4 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 801409e:	6878      	ldr	r0, [r7, #4]
 80140a0:	f7f0 fa9a 	bl	80045d8 <HAL_I2C_Init>
  }
}
 80140a4:	bf00      	nop
 80140a6:	3708      	adds	r7, #8
 80140a8:	46bd      	mov	sp, r7
 80140aa:	bd80      	pop	{r7, pc}
 80140ac:	20008298 	.word	0x20008298
 80140b0:	40005c00 	.word	0x40005c00
 80140b4:	40005400 	.word	0x40005400
 80140b8:	40912732 	.word	0x40912732

080140bc <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80140bc:	b580      	push	{r7, lr}
 80140be:	b08a      	sub	sp, #40	; 0x28
 80140c0:	af04      	add	r7, sp, #16
 80140c2:	60f8      	str	r0, [r7, #12]
 80140c4:	4608      	mov	r0, r1
 80140c6:	4611      	mov	r1, r2
 80140c8:	461a      	mov	r2, r3
 80140ca:	4603      	mov	r3, r0
 80140cc:	72fb      	strb	r3, [r7, #11]
 80140ce:	460b      	mov	r3, r1
 80140d0:	813b      	strh	r3, [r7, #8]
 80140d2:	4613      	mov	r3, r2
 80140d4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80140d6:	2300      	movs	r3, #0
 80140d8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80140da:	7afb      	ldrb	r3, [r7, #11]
 80140dc:	b299      	uxth	r1, r3
 80140de:	88f8      	ldrh	r0, [r7, #6]
 80140e0:	893a      	ldrh	r2, [r7, #8]
 80140e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80140e6:	9302      	str	r3, [sp, #8]
 80140e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80140ea:	9301      	str	r3, [sp, #4]
 80140ec:	6a3b      	ldr	r3, [r7, #32]
 80140ee:	9300      	str	r3, [sp, #0]
 80140f0:	4603      	mov	r3, r0
 80140f2:	68f8      	ldr	r0, [r7, #12]
 80140f4:	f7f0 fc44 	bl	8004980 <HAL_I2C_Mem_Read>
 80140f8:	4603      	mov	r3, r0
 80140fa:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80140fc:	7dfb      	ldrb	r3, [r7, #23]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d004      	beq.n	801410c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8014102:	7afb      	ldrb	r3, [r7, #11]
 8014104:	4619      	mov	r1, r3
 8014106:	68f8      	ldr	r0, [r7, #12]
 8014108:	f000 f832 	bl	8014170 <I2Cx_Error>
  }
  return status;    
 801410c:	7dfb      	ldrb	r3, [r7, #23]
}
 801410e:	4618      	mov	r0, r3
 8014110:	3718      	adds	r7, #24
 8014112:	46bd      	mov	sp, r7
 8014114:	bd80      	pop	{r7, pc}

08014116 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8014116:	b580      	push	{r7, lr}
 8014118:	b08a      	sub	sp, #40	; 0x28
 801411a:	af04      	add	r7, sp, #16
 801411c:	60f8      	str	r0, [r7, #12]
 801411e:	4608      	mov	r0, r1
 8014120:	4611      	mov	r1, r2
 8014122:	461a      	mov	r2, r3
 8014124:	4603      	mov	r3, r0
 8014126:	72fb      	strb	r3, [r7, #11]
 8014128:	460b      	mov	r3, r1
 801412a:	813b      	strh	r3, [r7, #8]
 801412c:	4613      	mov	r3, r2
 801412e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8014130:	2300      	movs	r3, #0
 8014132:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8014134:	7afb      	ldrb	r3, [r7, #11]
 8014136:	b299      	uxth	r1, r3
 8014138:	88f8      	ldrh	r0, [r7, #6]
 801413a:	893a      	ldrh	r2, [r7, #8]
 801413c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014140:	9302      	str	r3, [sp, #8]
 8014142:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014144:	9301      	str	r3, [sp, #4]
 8014146:	6a3b      	ldr	r3, [r7, #32]
 8014148:	9300      	str	r3, [sp, #0]
 801414a:	4603      	mov	r3, r0
 801414c:	68f8      	ldr	r0, [r7, #12]
 801414e:	f7f0 fb03 	bl	8004758 <HAL_I2C_Mem_Write>
 8014152:	4603      	mov	r3, r0
 8014154:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8014156:	7dfb      	ldrb	r3, [r7, #23]
 8014158:	2b00      	cmp	r3, #0
 801415a:	d004      	beq.n	8014166 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 801415c:	7afb      	ldrb	r3, [r7, #11]
 801415e:	4619      	mov	r1, r3
 8014160:	68f8      	ldr	r0, [r7, #12]
 8014162:	f000 f805 	bl	8014170 <I2Cx_Error>
  }
  return status;
 8014166:	7dfb      	ldrb	r3, [r7, #23]
}
 8014168:	4618      	mov	r0, r3
 801416a:	3718      	adds	r7, #24
 801416c:	46bd      	mov	sp, r7
 801416e:	bd80      	pop	{r7, pc}

08014170 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8014170:	b580      	push	{r7, lr}
 8014172:	b082      	sub	sp, #8
 8014174:	af00      	add	r7, sp, #0
 8014176:	6078      	str	r0, [r7, #4]
 8014178:	460b      	mov	r3, r1
 801417a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 801417c:	6878      	ldr	r0, [r7, #4]
 801417e:	f7f0 fabb 	bl	80046f8 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8014182:	6878      	ldr	r0, [r7, #4]
 8014184:	f7ff ff5e 	bl	8014044 <I2Cx_Init>
}
 8014188:	bf00      	nop
 801418a:	3708      	adds	r7, #8
 801418c:	46bd      	mov	sp, r7
 801418e:	bd80      	pop	{r7, pc}

08014190 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8014190:	b580      	push	{r7, lr}
 8014192:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8014194:	4802      	ldr	r0, [pc, #8]	; (80141a0 <TS_IO_Init+0x10>)
 8014196:	f7ff ff55 	bl	8014044 <I2Cx_Init>
}
 801419a:	bf00      	nop
 801419c:	bd80      	pop	{r7, pc}
 801419e:	bf00      	nop
 80141a0:	20008298 	.word	0x20008298

080141a4 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80141a4:	b580      	push	{r7, lr}
 80141a6:	b084      	sub	sp, #16
 80141a8:	af02      	add	r7, sp, #8
 80141aa:	4603      	mov	r3, r0
 80141ac:	71fb      	strb	r3, [r7, #7]
 80141ae:	460b      	mov	r3, r1
 80141b0:	71bb      	strb	r3, [r7, #6]
 80141b2:	4613      	mov	r3, r2
 80141b4:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80141b6:	79bb      	ldrb	r3, [r7, #6]
 80141b8:	b29a      	uxth	r2, r3
 80141ba:	79f9      	ldrb	r1, [r7, #7]
 80141bc:	2301      	movs	r3, #1
 80141be:	9301      	str	r3, [sp, #4]
 80141c0:	1d7b      	adds	r3, r7, #5
 80141c2:	9300      	str	r3, [sp, #0]
 80141c4:	2301      	movs	r3, #1
 80141c6:	4803      	ldr	r0, [pc, #12]	; (80141d4 <TS_IO_Write+0x30>)
 80141c8:	f7ff ffa5 	bl	8014116 <I2Cx_WriteMultiple>
}
 80141cc:	bf00      	nop
 80141ce:	3708      	adds	r7, #8
 80141d0:	46bd      	mov	sp, r7
 80141d2:	bd80      	pop	{r7, pc}
 80141d4:	20008298 	.word	0x20008298

080141d8 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80141d8:	b580      	push	{r7, lr}
 80141da:	b086      	sub	sp, #24
 80141dc:	af02      	add	r7, sp, #8
 80141de:	4603      	mov	r3, r0
 80141e0:	460a      	mov	r2, r1
 80141e2:	71fb      	strb	r3, [r7, #7]
 80141e4:	4613      	mov	r3, r2
 80141e6:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80141e8:	2300      	movs	r3, #0
 80141ea:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80141ec:	79bb      	ldrb	r3, [r7, #6]
 80141ee:	b29a      	uxth	r2, r3
 80141f0:	79f9      	ldrb	r1, [r7, #7]
 80141f2:	2301      	movs	r3, #1
 80141f4:	9301      	str	r3, [sp, #4]
 80141f6:	f107 030f 	add.w	r3, r7, #15
 80141fa:	9300      	str	r3, [sp, #0]
 80141fc:	2301      	movs	r3, #1
 80141fe:	4804      	ldr	r0, [pc, #16]	; (8014210 <TS_IO_Read+0x38>)
 8014200:	f7ff ff5c 	bl	80140bc <I2Cx_ReadMultiple>

  return read_value;
 8014204:	7bfb      	ldrb	r3, [r7, #15]
}
 8014206:	4618      	mov	r0, r3
 8014208:	3710      	adds	r7, #16
 801420a:	46bd      	mov	sp, r7
 801420c:	bd80      	pop	{r7, pc}
 801420e:	bf00      	nop
 8014210:	20008298 	.word	0x20008298

08014214 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8014214:	b580      	push	{r7, lr}
 8014216:	b082      	sub	sp, #8
 8014218:	af00      	add	r7, sp, #0
 801421a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 801421c:	6878      	ldr	r0, [r7, #4]
 801421e:	f7ec fc93 	bl	8000b48 <HAL_Delay>
}
 8014222:	bf00      	nop
 8014224:	3708      	adds	r7, #8
 8014226:	46bd      	mov	sp, r7
 8014228:	bd80      	pop	{r7, pc}
	...

0801422c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 801422c:	b580      	push	{r7, lr}
 801422e:	b084      	sub	sp, #16
 8014230:	af00      	add	r7, sp, #0
 8014232:	4603      	mov	r3, r0
 8014234:	460a      	mov	r2, r1
 8014236:	80fb      	strh	r3, [r7, #6]
 8014238:	4613      	mov	r3, r2
 801423a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 801423c:	2300      	movs	r3, #0
 801423e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8014240:	4a14      	ldr	r2, [pc, #80]	; (8014294 <BSP_TS_Init+0x68>)
 8014242:	88fb      	ldrh	r3, [r7, #6]
 8014244:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8014246:	4a14      	ldr	r2, [pc, #80]	; (8014298 <BSP_TS_Init+0x6c>)
 8014248:	88bb      	ldrh	r3, [r7, #4]
 801424a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 801424c:	4b13      	ldr	r3, [pc, #76]	; (801429c <BSP_TS_Init+0x70>)
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	2070      	movs	r0, #112	; 0x70
 8014252:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8014254:	4b11      	ldr	r3, [pc, #68]	; (801429c <BSP_TS_Init+0x70>)
 8014256:	685b      	ldr	r3, [r3, #4]
 8014258:	2070      	movs	r0, #112	; 0x70
 801425a:	4798      	blx	r3
 801425c:	4603      	mov	r3, r0
 801425e:	2b51      	cmp	r3, #81	; 0x51
 8014260:	d111      	bne.n	8014286 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8014262:	4b0f      	ldr	r3, [pc, #60]	; (80142a0 <BSP_TS_Init+0x74>)
 8014264:	4a0d      	ldr	r2, [pc, #52]	; (801429c <BSP_TS_Init+0x70>)
 8014266:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8014268:	4b0e      	ldr	r3, [pc, #56]	; (80142a4 <BSP_TS_Init+0x78>)
 801426a:	2270      	movs	r2, #112	; 0x70
 801426c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 801426e:	4b0e      	ldr	r3, [pc, #56]	; (80142a8 <BSP_TS_Init+0x7c>)
 8014270:	2208      	movs	r2, #8
 8014272:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8014274:	4b0a      	ldr	r3, [pc, #40]	; (80142a0 <BSP_TS_Init+0x74>)
 8014276:	681b      	ldr	r3, [r3, #0]
 8014278:	68db      	ldr	r3, [r3, #12]
 801427a:	4a0a      	ldr	r2, [pc, #40]	; (80142a4 <BSP_TS_Init+0x78>)
 801427c:	7812      	ldrb	r2, [r2, #0]
 801427e:	b292      	uxth	r2, r2
 8014280:	4610      	mov	r0, r2
 8014282:	4798      	blx	r3
 8014284:	e001      	b.n	801428a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8014286:	2303      	movs	r3, #3
 8014288:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801428a:	7bfb      	ldrb	r3, [r7, #15]
}
 801428c:	4618      	mov	r0, r3
 801428e:	3710      	adds	r7, #16
 8014290:	46bd      	mov	sp, r7
 8014292:	bd80      	pop	{r7, pc}
 8014294:	200082e8 	.word	0x200082e8
 8014298:	200082ea 	.word	0x200082ea
 801429c:	20000000 	.word	0x20000000
 80142a0:	200082e4 	.word	0x200082e4
 80142a4:	200082ed 	.word	0x200082ed
 80142a8:	200082ec 	.word	0x200082ec

080142ac <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80142ac:	b590      	push	{r4, r7, lr}
 80142ae:	b097      	sub	sp, #92	; 0x5c
 80142b0:	af02      	add	r7, sp, #8
 80142b2:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 80142b4:	2300      	movs	r3, #0
 80142b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 80142ba:	2300      	movs	r3, #0
 80142bc:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 80142be:	2300      	movs	r3, #0
 80142c0:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 80142c2:	2300      	movs	r3, #0
 80142c4:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 80142c6:	4b97      	ldr	r3, [pc, #604]	; (8014524 <BSP_TS_GetState+0x278>)
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	691b      	ldr	r3, [r3, #16]
 80142cc:	4a96      	ldr	r2, [pc, #600]	; (8014528 <BSP_TS_GetState+0x27c>)
 80142ce:	7812      	ldrb	r2, [r2, #0]
 80142d0:	b292      	uxth	r2, r2
 80142d2:	4610      	mov	r0, r2
 80142d4:	4798      	blx	r3
 80142d6:	4603      	mov	r3, r0
 80142d8:	461a      	mov	r2, r3
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	781b      	ldrb	r3, [r3, #0]
 80142e2:	2b00      	cmp	r3, #0
 80142e4:	f000 81a8 	beq.w	8014638 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 80142e8:	2300      	movs	r3, #0
 80142ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80142ec:	e197      	b.n	801461e <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 80142ee:	4b8d      	ldr	r3, [pc, #564]	; (8014524 <BSP_TS_GetState+0x278>)
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	695b      	ldr	r3, [r3, #20]
 80142f4:	4a8c      	ldr	r2, [pc, #560]	; (8014528 <BSP_TS_GetState+0x27c>)
 80142f6:	7812      	ldrb	r2, [r2, #0]
 80142f8:	b290      	uxth	r0, r2
 80142fa:	f107 0120 	add.w	r1, r7, #32
 80142fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014300:	0052      	lsls	r2, r2, #1
 8014302:	188c      	adds	r4, r1, r2
 8014304:	f107 0114 	add.w	r1, r7, #20
 8014308:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801430a:	0052      	lsls	r2, r2, #1
 801430c:	440a      	add	r2, r1
 801430e:	4621      	mov	r1, r4
 8014310:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 8014312:	4b86      	ldr	r3, [pc, #536]	; (801452c <BSP_TS_GetState+0x280>)
 8014314:	781b      	ldrb	r3, [r3, #0]
 8014316:	2b01      	cmp	r3, #1
 8014318:	d11b      	bne.n	8014352 <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 801431a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801431c:	005b      	lsls	r3, r3, #1
 801431e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8014322:	4413      	add	r3, r2
 8014324:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8014328:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801432a:	005b      	lsls	r3, r3, #1
 801432c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8014330:	440b      	add	r3, r1
 8014332:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8014336:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014338:	005b      	lsls	r3, r3, #1
 801433a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801433e:	4413      	add	r3, r2
 8014340:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8014344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014346:	005b      	lsls	r3, r3, #1
 8014348:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801434c:	440b      	add	r3, r1
 801434e:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 8014352:	4b76      	ldr	r3, [pc, #472]	; (801452c <BSP_TS_GetState+0x280>)
 8014354:	781b      	ldrb	r3, [r3, #0]
 8014356:	f003 0302 	and.w	r3, r3, #2
 801435a:	2b00      	cmp	r3, #0
 801435c:	d010      	beq.n	8014380 <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 801435e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014360:	005b      	lsls	r3, r3, #1
 8014362:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8014366:	4413      	add	r3, r2
 8014368:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 801436c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8014370:	b29a      	uxth	r2, r3
 8014372:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014374:	005b      	lsls	r3, r3, #1
 8014376:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801437a:	440b      	add	r3, r1
 801437c:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 8014380:	4b6a      	ldr	r3, [pc, #424]	; (801452c <BSP_TS_GetState+0x280>)
 8014382:	781b      	ldrb	r3, [r3, #0]
 8014384:	f003 0304 	and.w	r3, r3, #4
 8014388:	2b00      	cmp	r3, #0
 801438a:	d010      	beq.n	80143ae <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 801438c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801438e:	005b      	lsls	r3, r3, #1
 8014390:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8014394:	4413      	add	r3, r2
 8014396:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 801439a:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 801439e:	b29a      	uxth	r2, r3
 80143a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80143a2:	005b      	lsls	r3, r3, #1
 80143a4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80143a8:	440b      	add	r3, r1
 80143aa:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 80143ae:	4b5f      	ldr	r3, [pc, #380]	; (801452c <BSP_TS_GetState+0x280>)
 80143b0:	781b      	ldrb	r3, [r3, #0]
 80143b2:	f003 0308 	and.w	r3, r3, #8
 80143b6:	2b00      	cmp	r3, #0
 80143b8:	d01b      	beq.n	80143f2 <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 80143ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80143bc:	005b      	lsls	r3, r3, #1
 80143be:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80143c2:	4413      	add	r3, r2
 80143c4:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 80143c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80143ca:	005b      	lsls	r3, r3, #1
 80143cc:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80143d0:	440b      	add	r3, r1
 80143d2:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 80143d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80143d8:	005b      	lsls	r3, r3, #1
 80143da:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80143de:	4413      	add	r3, r2
 80143e0:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 80143e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80143e6:	005b      	lsls	r3, r3, #1
 80143e8:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80143ec:	440b      	add	r3, r1
 80143ee:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 80143f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80143f4:	005b      	lsls	r3, r3, #1
 80143f6:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80143fa:	4413      	add	r3, r2
 80143fc:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8014400:	4619      	mov	r1, r3
 8014402:	4a4b      	ldr	r2, [pc, #300]	; (8014530 <BSP_TS_GetState+0x284>)
 8014404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014406:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801440a:	4299      	cmp	r1, r3
 801440c:	d90e      	bls.n	801442c <BSP_TS_GetState+0x180>
 801440e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014410:	005b      	lsls	r3, r3, #1
 8014412:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8014416:	4413      	add	r3, r2
 8014418:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 801441c:	4944      	ldr	r1, [pc, #272]	; (8014530 <BSP_TS_GetState+0x284>)
 801441e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014420:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014424:	b29b      	uxth	r3, r3
 8014426:	1ad3      	subs	r3, r2, r3
 8014428:	b29b      	uxth	r3, r3
 801442a:	e00d      	b.n	8014448 <BSP_TS_GetState+0x19c>
 801442c:	4a40      	ldr	r2, [pc, #256]	; (8014530 <BSP_TS_GetState+0x284>)
 801442e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014430:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014434:	b29a      	uxth	r2, r3
 8014436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014438:	005b      	lsls	r3, r3, #1
 801443a:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801443e:	440b      	add	r3, r1
 8014440:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8014444:	1ad3      	subs	r3, r2, r3
 8014446:	b29b      	uxth	r3, r3
 8014448:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 801444c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801444e:	005b      	lsls	r3, r3, #1
 8014450:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8014454:	4413      	add	r3, r2
 8014456:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 801445a:	4619      	mov	r1, r3
 801445c:	4a35      	ldr	r2, [pc, #212]	; (8014534 <BSP_TS_GetState+0x288>)
 801445e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014464:	4299      	cmp	r1, r3
 8014466:	d90e      	bls.n	8014486 <BSP_TS_GetState+0x1da>
 8014468:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801446a:	005b      	lsls	r3, r3, #1
 801446c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8014470:	4413      	add	r3, r2
 8014472:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 8014476:	492f      	ldr	r1, [pc, #188]	; (8014534 <BSP_TS_GetState+0x288>)
 8014478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801447a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801447e:	b29b      	uxth	r3, r3
 8014480:	1ad3      	subs	r3, r2, r3
 8014482:	b29b      	uxth	r3, r3
 8014484:	e00d      	b.n	80144a2 <BSP_TS_GetState+0x1f6>
 8014486:	4a2b      	ldr	r2, [pc, #172]	; (8014534 <BSP_TS_GetState+0x288>)
 8014488:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801448a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801448e:	b29a      	uxth	r2, r3
 8014490:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014492:	005b      	lsls	r3, r3, #1
 8014494:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8014498:	440b      	add	r3, r1
 801449a:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 801449e:	1ad3      	subs	r3, r2, r3
 80144a0:	b29b      	uxth	r3, r3
 80144a2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 80144a6:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80144aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80144ae:	4413      	add	r3, r2
 80144b0:	2b05      	cmp	r3, #5
 80144b2:	dd17      	ble.n	80144e4 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 80144b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80144b6:	005b      	lsls	r3, r3, #1
 80144b8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80144bc:	4413      	add	r3, r2
 80144be:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80144c2:	4619      	mov	r1, r3
 80144c4:	4a1a      	ldr	r2, [pc, #104]	; (8014530 <BSP_TS_GetState+0x284>)
 80144c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80144c8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 80144cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80144ce:	005b      	lsls	r3, r3, #1
 80144d0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80144d4:	4413      	add	r3, r2
 80144d6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80144da:	4619      	mov	r1, r3
 80144dc:	4a15      	ldr	r2, [pc, #84]	; (8014534 <BSP_TS_GetState+0x288>)
 80144de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80144e0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 80144e4:	4b10      	ldr	r3, [pc, #64]	; (8014528 <BSP_TS_GetState+0x27c>)
 80144e6:	781b      	ldrb	r3, [r3, #0]
 80144e8:	2b70      	cmp	r3, #112	; 0x70
 80144ea:	d125      	bne.n	8014538 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 80144ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80144ee:	005b      	lsls	r3, r3, #1
 80144f0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80144f4:	4413      	add	r3, r2
 80144f6:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 80144fa:	687a      	ldr	r2, [r7, #4]
 80144fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80144fe:	005b      	lsls	r3, r3, #1
 8014500:	4413      	add	r3, r2
 8014502:	460a      	mov	r2, r1
 8014504:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8014506:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014508:	005b      	lsls	r3, r3, #1
 801450a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801450e:	4413      	add	r3, r2
 8014510:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8014514:	687a      	ldr	r2, [r7, #4]
 8014516:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014518:	3304      	adds	r3, #4
 801451a:	005b      	lsls	r3, r3, #1
 801451c:	4413      	add	r3, r2
 801451e:	460a      	mov	r2, r1
 8014520:	809a      	strh	r2, [r3, #4]
 8014522:	e02c      	b.n	801457e <BSP_TS_GetState+0x2d2>
 8014524:	200082e4 	.word	0x200082e4
 8014528:	200082ed 	.word	0x200082ed
 801452c:	200082ec 	.word	0x200082ec
 8014530:	200082f0 	.word	0x200082f0
 8014534:	20008304 	.word	0x20008304
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8014538:	4b42      	ldr	r3, [pc, #264]	; (8014644 <BSP_TS_GetState+0x398>)
 801453a:	881b      	ldrh	r3, [r3, #0]
 801453c:	4619      	mov	r1, r3
 801453e:	4a42      	ldr	r2, [pc, #264]	; (8014648 <BSP_TS_GetState+0x39c>)
 8014540:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014542:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014546:	fb03 f301 	mul.w	r3, r3, r1
 801454a:	0b1b      	lsrs	r3, r3, #12
 801454c:	b299      	uxth	r1, r3
 801454e:	687a      	ldr	r2, [r7, #4]
 8014550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014552:	005b      	lsls	r3, r3, #1
 8014554:	4413      	add	r3, r2
 8014556:	460a      	mov	r2, r1
 8014558:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 801455a:	4b3c      	ldr	r3, [pc, #240]	; (801464c <BSP_TS_GetState+0x3a0>)
 801455c:	881b      	ldrh	r3, [r3, #0]
 801455e:	4619      	mov	r1, r3
 8014560:	4a3b      	ldr	r2, [pc, #236]	; (8014650 <BSP_TS_GetState+0x3a4>)
 8014562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014564:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014568:	fb03 f301 	mul.w	r3, r3, r1
 801456c:	0b1b      	lsrs	r3, r3, #12
 801456e:	b299      	uxth	r1, r3
 8014570:	687a      	ldr	r2, [r7, #4]
 8014572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014574:	3304      	adds	r3, #4
 8014576:	005b      	lsls	r3, r3, #1
 8014578:	4413      	add	r3, r2
 801457a:	460a      	mov	r2, r1
 801457c:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 801457e:	4b35      	ldr	r3, [pc, #212]	; (8014654 <BSP_TS_GetState+0x3a8>)
 8014580:	781b      	ldrb	r3, [r3, #0]
 8014582:	b298      	uxth	r0, r3
 8014584:	f107 010c 	add.w	r1, r7, #12
 8014588:	f107 0210 	add.w	r2, r7, #16
 801458c:	f107 0308 	add.w	r3, r7, #8
 8014590:	9300      	str	r3, [sp, #0]
 8014592:	460b      	mov	r3, r1
 8014594:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8014596:	f7ec f9d1 	bl	800093c <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 801459a:	693b      	ldr	r3, [r7, #16]
 801459c:	b2d9      	uxtb	r1, r3
 801459e:	687a      	ldr	r2, [r7, #4]
 80145a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80145a2:	4413      	add	r3, r2
 80145a4:	3316      	adds	r3, #22
 80145a6:	460a      	mov	r2, r1
 80145a8:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 80145aa:	68fb      	ldr	r3, [r7, #12]
 80145ac:	b2d9      	uxtb	r1, r3
 80145ae:	687a      	ldr	r2, [r7, #4]
 80145b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80145b2:	4413      	add	r3, r2
 80145b4:	3320      	adds	r3, #32
 80145b6:	460a      	mov	r2, r1
 80145b8:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 80145ba:	68bb      	ldr	r3, [r7, #8]
 80145bc:	2b03      	cmp	r3, #3
 80145be:	d827      	bhi.n	8014610 <BSP_TS_GetState+0x364>
 80145c0:	a201      	add	r2, pc, #4	; (adr r2, 80145c8 <BSP_TS_GetState+0x31c>)
 80145c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80145c6:	bf00      	nop
 80145c8:	080145d9 	.word	0x080145d9
 80145cc:	080145e7 	.word	0x080145e7
 80145d0:	080145f5 	.word	0x080145f5
 80145d4:	08014603 	.word	0x08014603
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 80145d8:	687a      	ldr	r2, [r7, #4]
 80145da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80145dc:	4413      	add	r3, r2
 80145de:	331b      	adds	r3, #27
 80145e0:	2201      	movs	r2, #1
 80145e2:	701a      	strb	r2, [r3, #0]
          break;
 80145e4:	e018      	b.n	8014618 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 80145e6:	687a      	ldr	r2, [r7, #4]
 80145e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80145ea:	4413      	add	r3, r2
 80145ec:	331b      	adds	r3, #27
 80145ee:	2202      	movs	r2, #2
 80145f0:	701a      	strb	r2, [r3, #0]
          break;
 80145f2:	e011      	b.n	8014618 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 80145f4:	687a      	ldr	r2, [r7, #4]
 80145f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80145f8:	4413      	add	r3, r2
 80145fa:	331b      	adds	r3, #27
 80145fc:	2203      	movs	r2, #3
 80145fe:	701a      	strb	r2, [r3, #0]
          break;
 8014600:	e00a      	b.n	8014618 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 8014602:	687a      	ldr	r2, [r7, #4]
 8014604:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014606:	4413      	add	r3, r2
 8014608:	331b      	adds	r3, #27
 801460a:	2200      	movs	r2, #0
 801460c:	701a      	strb	r2, [r3, #0]
          break;
 801460e:	e003      	b.n	8014618 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 8014610:	2301      	movs	r3, #1
 8014612:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8014616:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8014618:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801461a:	3301      	adds	r3, #1
 801461c:	64bb      	str	r3, [r7, #72]	; 0x48
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	781b      	ldrb	r3, [r3, #0]
 8014622:	461a      	mov	r2, r3
 8014624:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014626:	4293      	cmp	r3, r2
 8014628:	f4ff ae61 	bcc.w	80142ee <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 801462c:	6878      	ldr	r0, [r7, #4]
 801462e:	f000 f813 	bl	8014658 <BSP_TS_Get_GestureId>
 8014632:	4603      	mov	r3, r0
 8014634:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8014638:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 801463c:	4618      	mov	r0, r3
 801463e:	3754      	adds	r7, #84	; 0x54
 8014640:	46bd      	mov	sp, r7
 8014642:	bd90      	pop	{r4, r7, pc}
 8014644:	200082e8 	.word	0x200082e8
 8014648:	200082f0 	.word	0x200082f0
 801464c:	200082ea 	.word	0x200082ea
 8014650:	20008304 	.word	0x20008304
 8014654:	200082ed 	.word	0x200082ed

08014658 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 8014658:	b580      	push	{r7, lr}
 801465a:	b084      	sub	sp, #16
 801465c:	af00      	add	r7, sp, #0
 801465e:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 8014660:	2300      	movs	r3, #0
 8014662:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 8014664:	2300      	movs	r3, #0
 8014666:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 8014668:	4b3b      	ldr	r3, [pc, #236]	; (8014758 <BSP_TS_Get_GestureId+0x100>)
 801466a:	781b      	ldrb	r3, [r3, #0]
 801466c:	b29b      	uxth	r3, r3
 801466e:	f107 0208 	add.w	r2, r7, #8
 8014672:	4611      	mov	r1, r2
 8014674:	4618      	mov	r0, r3
 8014676:	f7ec f948 	bl	800090a <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 801467a:	68bb      	ldr	r3, [r7, #8]
 801467c:	2b49      	cmp	r3, #73	; 0x49
 801467e:	d05e      	beq.n	801473e <BSP_TS_Get_GestureId+0xe6>
 8014680:	2b49      	cmp	r3, #73	; 0x49
 8014682:	d860      	bhi.n	8014746 <BSP_TS_Get_GestureId+0xee>
 8014684:	2b1c      	cmp	r3, #28
 8014686:	d83f      	bhi.n	8014708 <BSP_TS_Get_GestureId+0xb0>
 8014688:	2b1c      	cmp	r3, #28
 801468a:	d85c      	bhi.n	8014746 <BSP_TS_Get_GestureId+0xee>
 801468c:	a201      	add	r2, pc, #4	; (adr r2, 8014694 <BSP_TS_Get_GestureId+0x3c>)
 801468e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014692:	bf00      	nop
 8014694:	0801470f 	.word	0x0801470f
 8014698:	08014747 	.word	0x08014747
 801469c:	08014747 	.word	0x08014747
 80146a0:	08014747 	.word	0x08014747
 80146a4:	08014747 	.word	0x08014747
 80146a8:	08014747 	.word	0x08014747
 80146ac:	08014747 	.word	0x08014747
 80146b0:	08014747 	.word	0x08014747
 80146b4:	08014747 	.word	0x08014747
 80146b8:	08014747 	.word	0x08014747
 80146bc:	08014747 	.word	0x08014747
 80146c0:	08014747 	.word	0x08014747
 80146c4:	08014747 	.word	0x08014747
 80146c8:	08014747 	.word	0x08014747
 80146cc:	08014747 	.word	0x08014747
 80146d0:	08014747 	.word	0x08014747
 80146d4:	08014717 	.word	0x08014717
 80146d8:	08014747 	.word	0x08014747
 80146dc:	08014747 	.word	0x08014747
 80146e0:	08014747 	.word	0x08014747
 80146e4:	0801471f 	.word	0x0801471f
 80146e8:	08014747 	.word	0x08014747
 80146ec:	08014747 	.word	0x08014747
 80146f0:	08014747 	.word	0x08014747
 80146f4:	08014727 	.word	0x08014727
 80146f8:	08014747 	.word	0x08014747
 80146fc:	08014747 	.word	0x08014747
 8014700:	08014747 	.word	0x08014747
 8014704:	0801472f 	.word	0x0801472f
 8014708:	2b40      	cmp	r3, #64	; 0x40
 801470a:	d014      	beq.n	8014736 <BSP_TS_Get_GestureId+0xde>
 801470c:	e01b      	b.n	8014746 <BSP_TS_Get_GestureId+0xee>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	2200      	movs	r2, #0
 8014712:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8014714:	e01a      	b.n	801474c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	2201      	movs	r2, #1
 801471a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 801471c:	e016      	b.n	801474c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	2202      	movs	r2, #2
 8014722:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8014724:	e012      	b.n	801474c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	2203      	movs	r2, #3
 801472a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 801472c:	e00e      	b.n	801474c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	2204      	movs	r2, #4
 8014732:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8014734:	e00a      	b.n	801474c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	2205      	movs	r2, #5
 801473a:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 801473c:	e006      	b.n	801474c <BSP_TS_Get_GestureId+0xf4>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 801473e:	687b      	ldr	r3, [r7, #4]
 8014740:	2206      	movs	r2, #6
 8014742:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8014744:	e002      	b.n	801474c <BSP_TS_Get_GestureId+0xf4>
    default :
      ts_status = TS_ERROR;
 8014746:	2301      	movs	r3, #1
 8014748:	73fb      	strb	r3, [r7, #15]
      break;
 801474a:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 801474c:	7bfb      	ldrb	r3, [r7, #15]
}
 801474e:	4618      	mov	r0, r3
 8014750:	3710      	adds	r7, #16
 8014752:	46bd      	mov	sp, r7
 8014754:	bd80      	pop	{r7, pc}
 8014756:	bf00      	nop
 8014758:	200082ed 	.word	0x200082ed

0801475c <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 801475c:	b480      	push	{r7}
 801475e:	b083      	sub	sp, #12
 8014760:	af00      	add	r7, sp, #0
 8014762:	6078      	str	r0, [r7, #4]
 8014764:	6039      	str	r1, [r7, #0]
    {
    }
 8014766:	bf00      	nop
 8014768:	370c      	adds	r7, #12
 801476a:	46bd      	mov	sp, r7
 801476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014770:	4770      	bx	lr

08014772 <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 8014772:	b480      	push	{r7}
 8014774:	b083      	sub	sp, #12
 8014776:	af00      	add	r7, sp, #0
 8014778:	6078      	str	r0, [r7, #4]
 801477a:	6039      	str	r1, [r7, #0]
    {
    }
 801477c:	bf00      	nop
 801477e:	370c      	adds	r7, #12
 8014780:	46bd      	mov	sp, r7
 8014782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014786:	4770      	bx	lr

08014788 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8014788:	b480      	push	{r7}
 801478a:	b083      	sub	sp, #12
 801478c:	af00      	add	r7, sp, #0
 801478e:	6078      	str	r0, [r7, #4]
 8014790:	6039      	str	r1, [r7, #0]
    {
    }
 8014792:	bf00      	nop
 8014794:	370c      	adds	r7, #12
 8014796:	46bd      	mov	sp, r7
 8014798:	f85d 7b04 	ldr.w	r7, [sp], #4
 801479c:	4770      	bx	lr

0801479e <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 801479e:	b480      	push	{r7}
 80147a0:	b083      	sub	sp, #12
 80147a2:	af00      	add	r7, sp, #0
 80147a4:	6078      	str	r0, [r7, #4]
 80147a6:	460b      	mov	r3, r1
 80147a8:	70fb      	strb	r3, [r7, #3]
    {
    }
 80147aa:	bf00      	nop
 80147ac:	370c      	adds	r7, #12
 80147ae:	46bd      	mov	sp, r7
 80147b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b4:	4770      	bx	lr

080147b6 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 80147b6:	b480      	push	{r7}
 80147b8:	b083      	sub	sp, #12
 80147ba:	af00      	add	r7, sp, #0
 80147bc:	6078      	str	r0, [r7, #4]
    {
    }
 80147be:	bf00      	nop
 80147c0:	370c      	adds	r7, #12
 80147c2:	46bd      	mov	sp, r7
 80147c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147c8:	4770      	bx	lr

080147ca <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 80147ca:	b480      	push	{r7}
 80147cc:	b083      	sub	sp, #12
 80147ce:	af00      	add	r7, sp, #0
 80147d0:	6078      	str	r0, [r7, #4]
    {
    }
 80147d2:	bf00      	nop
 80147d4:	370c      	adds	r7, #12
 80147d6:	46bd      	mov	sp, r7
 80147d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147dc:	4770      	bx	lr
	...

080147e0 <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 80147e0:	b480      	push	{r7}
 80147e2:	b083      	sub	sp, #12
 80147e4:	af00      	add	r7, sp, #0
 80147e6:	6078      	str	r0, [r7, #4]
    {
 80147e8:	4a04      	ldr	r2, [pc, #16]	; (80147fc <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	601a      	str	r2, [r3, #0]
    }
 80147ee:	687b      	ldr	r3, [r7, #4]
 80147f0:	4618      	mov	r0, r3
 80147f2:	370c      	adds	r7, #12
 80147f4:	46bd      	mov	sp, r7
 80147f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fa:	4770      	bx	lr
 80147fc:	080250a8 	.word	0x080250a8

08014800 <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 8014800:	b580      	push	{r7, lr}
 8014802:	b082      	sub	sp, #8
 8014804:	af00      	add	r7, sp, #0
 8014806:	6078      	str	r0, [r7, #4]
    }
 8014808:	6878      	ldr	r0, [r7, #4]
 801480a:	f7ff ffe9 	bl	80147e0 <_ZN8touchgfx15UIEventListenerD1Ev>
 801480e:	2104      	movs	r1, #4
 8014810:	6878      	ldr	r0, [r7, #4]
 8014812:	f00d febb 	bl	802258c <_ZdlPvj>
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	4618      	mov	r0, r3
 801481a:	3708      	adds	r7, #8
 801481c:	46bd      	mov	sp, r7
 801481e:	bd80      	pop	{r7, pc}

08014820 <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 8014820:	b480      	push	{r7}
 8014822:	b083      	sub	sp, #12
 8014824:	af00      	add	r7, sp, #0
 8014826:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	2200      	movs	r2, #0
 801482c:	801a      	strh	r2, [r3, #0]
 801482e:	687b      	ldr	r3, [r7, #4]
 8014830:	2200      	movs	r2, #0
 8014832:	805a      	strh	r2, [r3, #2]
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	2200      	movs	r2, #0
 8014838:	809a      	strh	r2, [r3, #4]
 801483a:	687b      	ldr	r3, [r7, #4]
 801483c:	2200      	movs	r2, #0
 801483e:	80da      	strh	r2, [r3, #6]
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	2200      	movs	r2, #0
 8014844:	811a      	strh	r2, [r3, #8]
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	2200      	movs	r2, #0
 801484a:	815a      	strh	r2, [r3, #10]
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	2200      	movs	r2, #0
 8014850:	819a      	strh	r2, [r3, #12]
 8014852:	687b      	ldr	r3, [r7, #4]
 8014854:	2200      	movs	r2, #0
 8014856:	739a      	strb	r2, [r3, #14]
        {
        }
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	4618      	mov	r0, r3
 801485c:	370c      	adds	r7, #12
 801485e:	46bd      	mov	sp, r7
 8014860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014864:	4770      	bx	lr

08014866 <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 8014866:	b580      	push	{r7, lr}
 8014868:	b082      	sub	sp, #8
 801486a:	af00      	add	r7, sp, #0
 801486c:	6078      	str	r0, [r7, #4]
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	4618      	mov	r0, r3
 8014872:	f7ff ffd5 	bl	8014820 <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	2200      	movs	r2, #0
 801487a:	611a      	str	r2, [r3, #16]
 801487c:	687b      	ldr	r3, [r7, #4]
 801487e:	2200      	movs	r2, #0
 8014880:	829a      	strh	r2, [r3, #20]
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	4618      	mov	r0, r3
 8014886:	3708      	adds	r7, #8
 8014888:	46bd      	mov	sp, r7
 801488a:	bd80      	pop	{r7, pc}

0801488c <_ZN8touchgfx18MCUInstrumentationC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructor. Initializes members.
     */
    MCUInstrumentation():
 801488c:	b480      	push	{r7}
 801488e:	b083      	sub	sp, #12
 8014890:	af00      	add	r7, sp, #0
 8014892:	6078      	str	r0, [r7, #4]
        cc_consumed(0),
        cc_in(0)
 8014894:	4a07      	ldr	r2, [pc, #28]	; (80148b4 <_ZN8touchgfx18MCUInstrumentationC1Ev+0x28>)
 8014896:	687b      	ldr	r3, [r7, #4]
 8014898:	601a      	str	r2, [r3, #0]
 801489a:	687b      	ldr	r3, [r7, #4]
 801489c:	2200      	movs	r2, #0
 801489e:	605a      	str	r2, [r3, #4]
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	2200      	movs	r2, #0
 80148a4:	609a      	str	r2, [r3, #8]
    {
    }
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	4618      	mov	r0, r3
 80148aa:	370c      	adds	r7, #12
 80148ac:	46bd      	mov	sp, r7
 80148ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b2:	4770      	bx	lr
 80148b4:	08025080 	.word	0x08025080

080148b8 <_ZN8touchgfx18MCUInstrumentationD1Ev>:
     *
     * @brief Virtual destructor.
     *
     *        Virtual destructor.
     */
    virtual ~MCUInstrumentation() {}
 80148b8:	b480      	push	{r7}
 80148ba:	b083      	sub	sp, #12
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
 80148c0:	4a04      	ldr	r2, [pc, #16]	; (80148d4 <_ZN8touchgfx18MCUInstrumentationD1Ev+0x1c>)
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	601a      	str	r2, [r3, #0]
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	4618      	mov	r0, r3
 80148ca:	370c      	adds	r7, #12
 80148cc:	46bd      	mov	sp, r7
 80148ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148d2:	4770      	bx	lr
 80148d4:	08025080 	.word	0x08025080

080148d8 <_ZN8touchgfx18MCUInstrumentationD0Ev>:
 80148d8:	b580      	push	{r7, lr}
 80148da:	b082      	sub	sp, #8
 80148dc:	af00      	add	r7, sp, #0
 80148de:	6078      	str	r0, [r7, #4]
 80148e0:	6878      	ldr	r0, [r7, #4]
 80148e2:	f7ff ffe9 	bl	80148b8 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 80148e6:	210c      	movs	r1, #12
 80148e8:	6878      	ldr	r0, [r7, #4]
 80148ea:	f00d fe4f 	bl	802258c <_ZdlPvj>
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	4618      	mov	r0, r3
 80148f2:	3708      	adds	r7, #8
 80148f4:	46bd      	mov	sp, r7
 80148f6:	bd80      	pop	{r7, pc}

080148f8 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb>:
     *
     *        Sets MCU activity high.
     *
     * @param active if True, inactive otherwise.
     */
    virtual void setMCUActive(bool active)
 80148f8:	b580      	push	{r7, lr}
 80148fa:	b084      	sub	sp, #16
 80148fc:	af00      	add	r7, sp, #0
 80148fe:	6078      	str	r0, [r7, #4]
 8014900:	460b      	mov	r3, r1
 8014902:	70fb      	strb	r3, [r7, #3]
    {
        if (active) //idle task sched out
 8014904:	78fb      	ldrb	r3, [r7, #3]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d011      	beq.n	801492e <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x36>
        {
            uint32_t cc_temp = getCPUCycles() - cc_in;
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	3310      	adds	r3, #16
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	6878      	ldr	r0, [r7, #4]
 8014914:	4798      	blx	r3
 8014916:	4602      	mov	r2, r0
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	689b      	ldr	r3, [r3, #8]
 801491c:	1ad3      	subs	r3, r2, r3
 801491e:	60fb      	str	r3, [r7, #12]
            cc_consumed += cc_temp;
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	685a      	ldr	r2, [r3, #4]
 8014924:	68fb      	ldr	r3, [r7, #12]
 8014926:	441a      	add	r2, r3
 8014928:	687b      	ldr	r3, [r7, #4]
 801492a:	605a      	str	r2, [r3, #4]
        }
        else //idle task sched in
        {
            cc_in = getCPUCycles();
        }
    }
 801492c:	e008      	b.n	8014940 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x48>
            cc_in = getCPUCycles();
 801492e:	687b      	ldr	r3, [r7, #4]
 8014930:	681b      	ldr	r3, [r3, #0]
 8014932:	3310      	adds	r3, #16
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	6878      	ldr	r0, [r7, #4]
 8014938:	4798      	blx	r3
 801493a:	4602      	mov	r2, r0
 801493c:	687b      	ldr	r3, [r7, #4]
 801493e:	609a      	str	r2, [r3, #8]
    }
 8014940:	bf00      	nop
 8014942:	3710      	adds	r7, #16
 8014944:	46bd      	mov	sp, r7
 8014946:	bd80      	pop	{r7, pc}

08014948 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     *        Gets number of consumed clock cycles.
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
 8014948:	b480      	push	{r7}
 801494a:	b083      	sub	sp, #12
 801494c:	af00      	add	r7, sp, #0
 801494e:	6078      	str	r0, [r7, #4]
    {
        return cc_consumed;
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	685b      	ldr	r3, [r3, #4]
    }
 8014954:	4618      	mov	r0, r3
 8014956:	370c      	adds	r7, #12
 8014958:	46bd      	mov	sp, r7
 801495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801495e:	4770      	bx	lr

08014960 <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     *        Sets number of consumed clock cycles.
     *
     * @param val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
 8014960:	b480      	push	{r7}
 8014962:	b083      	sub	sp, #12
 8014964:	af00      	add	r7, sp, #0
 8014966:	6078      	str	r0, [r7, #4]
 8014968:	6039      	str	r1, [r7, #0]
    {
        cc_consumed = val;
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	683a      	ldr	r2, [r7, #0]
 801496e:	605a      	str	r2, [r3, #4]
    }
 8014970:	bf00      	nop
 8014972:	370c      	adds	r7, #12
 8014974:	46bd      	mov	sp, r7
 8014976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801497a:	4770      	bx	lr

0801497c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 801497c:	b580      	push	{r7, lr}
 801497e:	b084      	sub	sp, #16
 8014980:	af00      	add	r7, sp, #0
 8014982:	60f8      	str	r0, [r7, #12]
 8014984:	60b9      	str	r1, [r7, #8]
 8014986:	607a      	str	r2, [r7, #4]
 8014988:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 801498a:	4a3f      	ldr	r2, [pc, #252]	; (8014a88 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>)
 801498c:	68fb      	ldr	r3, [r7, #12]
 801498e:	601a      	str	r2, [r3, #0]
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	68ba      	ldr	r2, [r7, #8]
 8014994:	605a      	str	r2, [r3, #4]
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	687a      	ldr	r2, [r7, #4]
 801499a:	609a      	str	r2, [r3, #8]
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	683a      	ldr	r2, [r7, #0]
 80149a0:	60da      	str	r2, [r3, #12]
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	2200      	movs	r2, #0
 80149a6:	611a      	str	r2, [r3, #16]
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	2200      	movs	r2, #0
 80149ac:	615a      	str	r2, [r3, #20]
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	3318      	adds	r3, #24
 80149b2:	4618      	mov	r0, r3
 80149b4:	f7ff ff57 	bl	8014866 <_ZN8touchgfx8GesturesC1Ev>
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	2200      	movs	r2, #0
 80149bc:	635a      	str	r2, [r3, #52]	; 0x34
 80149be:	68fb      	ldr	r3, [r7, #12]
 80149c0:	2200      	movs	r2, #0
 80149c2:	639a      	str	r2, [r3, #56]	; 0x38
 80149c4:	68fb      	ldr	r3, [r7, #12]
 80149c6:	2200      	movs	r2, #0
 80149c8:	63da      	str	r2, [r3, #60]	; 0x3c
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	2200      	movs	r2, #0
 80149ce:	641a      	str	r2, [r3, #64]	; 0x40
 80149d0:	68fb      	ldr	r3, [r7, #12]
 80149d2:	2200      	movs	r2, #0
 80149d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80149d8:	68fb      	ldr	r3, [r7, #12]
 80149da:	2201      	movs	r2, #1
 80149dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80149e0:	68fb      	ldr	r3, [r7, #12]
 80149e2:	2201      	movs	r2, #1
 80149e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80149e8:	68fb      	ldr	r3, [r7, #12]
 80149ea:	2201      	movs	r2, #1
 80149ec:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	2200      	movs	r2, #0
 80149f4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 80149f8:	68fb      	ldr	r3, [r7, #12]
 80149fa:	2200      	movs	r2, #0
 80149fc:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	2201      	movs	r2, #1
 8014a04:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 8014a08:	68fb      	ldr	r3, [r7, #12]
 8014a0a:	2200      	movs	r2, #0
 8014a0c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	2200      	movs	r2, #0
 8014a14:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 8014a18:	68fb      	ldr	r3, [r7, #12]
 8014a1a:	2200      	movs	r2, #0
 8014a1c:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 8014a20:	68fb      	ldr	r3, [r7, #12]
 8014a22:	2200      	movs	r2, #0
 8014a24:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 8014a28:	68fb      	ldr	r3, [r7, #12]
 8014a2a:	2200      	movs	r2, #0
 8014a2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	2200      	movs	r2, #0
 8014a34:	661a      	str	r2, [r3, #96]	; 0x60
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	2200      	movs	r2, #0
 8014a3a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        instance = this;
 8014a3e:	4a13      	ldr	r2, [pc, #76]	; (8014a8c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x110>)
 8014a40:	68fb      	ldr	r3, [r7, #12]
 8014a42:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8014a44:	4a12      	ldr	r2, [pc, #72]	; (8014a90 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x114>)
 8014a46:	8b3b      	ldrh	r3, [r7, #24]
 8014a48:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8014a4a:	4a12      	ldr	r2, [pc, #72]	; (8014a94 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x118>)
 8014a4c:	8bbb      	ldrh	r3, [r7, #28]
 8014a4e:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8014a50:	4b11      	ldr	r3, [pc, #68]	; (8014a98 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x11c>)
 8014a52:	2200      	movs	r2, #0
 8014a54:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8014a56:	4b0e      	ldr	r3, [pc, #56]	; (8014a90 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x114>)
 8014a58:	881a      	ldrh	r2, [r3, #0]
 8014a5a:	4b10      	ldr	r3, [pc, #64]	; (8014a9c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8014a5c:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8014a5e:	4b0d      	ldr	r3, [pc, #52]	; (8014a94 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x118>)
 8014a60:	881a      	ldrh	r2, [r3, #0]
 8014a62:	4b0f      	ldr	r3, [pc, #60]	; (8014aa0 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x124>)
 8014a64:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8014a66:	8b3a      	ldrh	r2, [r7, #24]
 8014a68:	8bbb      	ldrh	r3, [r7, #28]
 8014a6a:	429a      	cmp	r2, r3
 8014a6c:	bf34      	ite	cc
 8014a6e:	2301      	movcc	r3, #1
 8014a70:	2300      	movcs	r3, #0
 8014a72:	b2db      	uxtb	r3, r3
 8014a74:	461a      	mov	r2, r3
 8014a76:	68fb      	ldr	r3, [r7, #12]
 8014a78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }
 8014a7c:	68fb      	ldr	r3, [r7, #12]
 8014a7e:	4618      	mov	r0, r3
 8014a80:	3710      	adds	r7, #16
 8014a82:	46bd      	mov	sp, r7
 8014a84:	bd80      	pop	{r7, pc}
 8014a86:	bf00      	nop
 8014a88:	08025ab8 	.word	0x08025ab8
 8014a8c:	20009d38 	.word	0x20009d38
 8014a90:	20009d2c 	.word	0x20009d2c
 8014a94:	20009d2e 	.word	0x20009d2e
 8014a98:	20009d30 	.word	0x20009d30
 8014a9c:	20009d32 	.word	0x20009d32
 8014aa0:	20009d34 	.word	0x20009d34

08014aa4 <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL() { }
 8014aa4:	b480      	push	{r7}
 8014aa6:	b083      	sub	sp, #12
 8014aa8:	af00      	add	r7, sp, #0
 8014aaa:	6078      	str	r0, [r7, #4]
 8014aac:	4a04      	ldr	r2, [pc, #16]	; (8014ac0 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	601a      	str	r2, [r3, #0]
 8014ab2:	687b      	ldr	r3, [r7, #4]
 8014ab4:	4618      	mov	r0, r3
 8014ab6:	370c      	adds	r7, #12
 8014ab8:	46bd      	mov	sp, r7
 8014aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014abe:	4770      	bx	lr
 8014ac0:	08025ab8 	.word	0x08025ab8

08014ac4 <_ZN8touchgfx3HALD0Ev>:
 8014ac4:	b580      	push	{r7, lr}
 8014ac6:	b082      	sub	sp, #8
 8014ac8:	af00      	add	r7, sp, #0
 8014aca:	6078      	str	r0, [r7, #4]
 8014acc:	6878      	ldr	r0, [r7, #4]
 8014ace:	f7ff ffe9 	bl	8014aa4 <_ZN8touchgfx3HALD1Ev>
 8014ad2:	2168      	movs	r1, #104	; 0x68
 8014ad4:	6878      	ldr	r0, [r7, #4]
 8014ad6:	f00d fd59 	bl	802258c <_ZdlPvj>
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	4618      	mov	r0, r3
 8014ade:	3708      	adds	r7, #8
 8014ae0:	46bd      	mov	sp, r7
 8014ae2:	bd80      	pop	{r7, pc}

08014ae4 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
     *
     * @param enableLock True to lock DMA transfers to the front porch signal. Conservative,
     *                   default setting. False to disable, which will normally yield substantial
     *                   performance improvement.
     */
    void lockDMAToFrontPorch(bool enableLock)
 8014ae4:	b480      	push	{r7}
 8014ae6:	b083      	sub	sp, #12
 8014ae8:	af00      	add	r7, sp, #0
 8014aea:	6078      	str	r0, [r7, #4]
 8014aec:	460b      	mov	r3, r1
 8014aee:	70fb      	strb	r3, [r7, #3]
    {
        lockDMAToPorch = enableLock;
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	78fa      	ldrb	r2, [r7, #3]
 8014af4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    }
 8014af8:	bf00      	nop
 8014afa:	370c      	adds	r7, #12
 8014afc:	46bd      	mov	sp, r7
 8014afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b02:	4770      	bx	lr

08014b04 <_ZN8touchgfx3HAL24setFrameRateCompensationEb>:
     *
     *        Enables or disables compensation for lost frames. See knowledge base article.
     *
     * @param enabled true to enable, false to disable.
     */
    void setFrameRateCompensation(bool enabled)
 8014b04:	b480      	push	{r7}
 8014b06:	b083      	sub	sp, #12
 8014b08:	af00      	add	r7, sp, #0
 8014b0a:	6078      	str	r0, [r7, #4]
 8014b0c:	460b      	mov	r3, r1
 8014b0e:	70fb      	strb	r3, [r7, #3]
    {
        vSyncCompensationEnabled = enabled;
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	78fa      	ldrb	r2, [r7, #3]
 8014b14:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    };
 8014b18:	bf00      	nop
 8014b1a:	370c      	adds	r7, #12
 8014b1c:	46bd      	mov	sp, r7
 8014b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b22:	4770      	bx	lr

08014b24 <_ZN8touchgfx3HAL18setTouchSampleRateEa>:
     *
     *        Sets the number of ticks between each touch screen sample.
     *
     * @param sampleRateInTicks Sample rate. Default is 1 (every tick).
     */
    void setTouchSampleRate(int8_t sampleRateInTicks)
 8014b24:	b480      	push	{r7}
 8014b26:	b083      	sub	sp, #12
 8014b28:	af00      	add	r7, sp, #0
 8014b2a:	6078      	str	r0, [r7, #4]
 8014b2c:	460b      	mov	r3, r1
 8014b2e:	70fb      	strb	r3, [r7, #3]
    {
        if (sampleRateInTicks > 0)
 8014b30:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	dd03      	ble.n	8014b40 <_ZN8touchgfx3HAL18setTouchSampleRateEa+0x1c>
        {
            touchSampleRate = sampleRateInTicks;
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	78fa      	ldrb	r2, [r7, #3]
 8014b3c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
    }
 8014b40:	bf00      	nop
 8014b42:	370c      	adds	r7, #12
 8014b44:	46bd      	mov	sp, r7
 8014b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b4a:	4770      	bx	lr

08014b4c <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>:
     *
     *        Stores a pointer to an instance of an MCU specific instrumentation class.
     *
     * @param [in] mcuInstr pointer to MCU instrumentation.
     */
    void setMCUInstrumentation(MCUInstrumentation* mcuInstr)
 8014b4c:	b480      	push	{r7}
 8014b4e:	b083      	sub	sp, #12
 8014b50:	af00      	add	r7, sp, #0
 8014b52:	6078      	str	r0, [r7, #4]
 8014b54:	6039      	str	r1, [r7, #0]
    {
        mcuInstrumentation = mcuInstr;
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	683a      	ldr	r2, [r7, #0]
 8014b5a:	611a      	str	r2, [r3, #16]
    }
 8014b5c:	bf00      	nop
 8014b5e:	370c      	adds	r7, #12
 8014b60:	46bd      	mov	sp, r7
 8014b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b66:	4770      	bx	lr

08014b68 <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>:
     *        This method sets a flag that determines if generic HAL should calculate MCU load
     *        based on concrete MCU instrumentation.
     *
     * @param enabled If true, set flag to update MCU load.
     */
    void enableMCULoadCalculation(bool enabled)
 8014b68:	b480      	push	{r7}
 8014b6a:	b083      	sub	sp, #12
 8014b6c:	af00      	add	r7, sp, #0
 8014b6e:	6078      	str	r0, [r7, #4]
 8014b70:	460b      	mov	r3, r1
 8014b72:	70fb      	strb	r3, [r7, #3]
    {
        updateMCULoad = enabled;
 8014b74:	687b      	ldr	r3, [r7, #4]
 8014b76:	78fa      	ldrb	r2, [r7, #3]
 8014b78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    }
 8014b7c:	bf00      	nop
 8014b7e:	370c      	adds	r7, #12
 8014b80:	46bd      	mov	sp, r7
 8014b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b86:	4770      	bx	lr

08014b88 <_ZN8touchgfx3HAL13setFingerSizeEh>:
     *        algorithm will consider the size of the drawable and the distance from the touch
     *        point.
     *
     * @param [in] size the size of the finger.
     */
    void setFingerSize(uint8_t size)
 8014b88:	b480      	push	{r7}
 8014b8a:	b083      	sub	sp, #12
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
 8014b90:	460b      	mov	r3, r1
 8014b92:	70fb      	strb	r3, [r7, #3]
    {
        fingerSize = size;
 8014b94:	687b      	ldr	r3, [r7, #4]
 8014b96:	78fa      	ldrb	r2, [r7, #3]
 8014b98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
 8014b9c:	bf00      	nop
 8014b9e:	370c      	adds	r7, #12
 8014ba0:	46bd      	mov	sp, r7
 8014ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba6:	4770      	bx	lr

08014ba8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8014ba8:	b480      	push	{r7}
 8014baa:	b083      	sub	sp, #12
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	6078      	str	r0, [r7, #4]
        texts = t;
 8014bb0:	4a04      	ldr	r2, [pc, #16]	; (8014bc4 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8014bb2:	687b      	ldr	r3, [r7, #4]
 8014bb4:	6013      	str	r3, [r2, #0]
    }
 8014bb6:	bf00      	nop
 8014bb8:	370c      	adds	r7, #12
 8014bba:	46bd      	mov	sp, r7
 8014bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bc0:	4770      	bx	lr
 8014bc2:	bf00      	nop
 8014bc4:	20009da4 	.word	0x20009da4

08014bc8 <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 8014bc8:	b480      	push	{r7}
 8014bca:	b083      	sub	sp, #12
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	6078      	str	r0, [r7, #4]
    {
 8014bd0:	4a04      	ldr	r2, [pc, #16]	; (8014be4 <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	601a      	str	r2, [r3, #0]
    }
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	4618      	mov	r0, r3
 8014bda:	370c      	adds	r7, #12
 8014bdc:	46bd      	mov	sp, r7
 8014bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be2:	4770      	bx	lr
 8014be4:	0802506c 	.word	0x0802506c

08014be8 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8014be8:	b580      	push	{r7, lr}
 8014bea:	b082      	sub	sp, #8
 8014bec:	af00      	add	r7, sp, #0
 8014bee:	6078      	str	r0, [r7, #4]
    }
 8014bf0:	6878      	ldr	r0, [r7, #4]
 8014bf2:	f7ff ffe9 	bl	8014bc8 <_ZN8touchgfx12FontProviderD1Ev>
 8014bf6:	2104      	movs	r1, #4
 8014bf8:	6878      	ldr	r0, [r7, #4]
 8014bfa:	f00d fcc7 	bl	802258c <_ZdlPvj>
 8014bfe:	687b      	ldr	r3, [r7, #4]
 8014c00:	4618      	mov	r0, r3
 8014c02:	3708      	adds	r7, #8
 8014c04:	46bd      	mov	sp, r7
 8014c06:	bd80      	pop	{r7, pc}

08014c08 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8014c08:	b480      	push	{r7}
 8014c0a:	b085      	sub	sp, #20
 8014c0c:	af00      	add	r7, sp, #0
 8014c0e:	60f8      	str	r0, [r7, #12]
 8014c10:	60b9      	str	r1, [r7, #8]
 8014c12:	607a      	str	r2, [r7, #4]
 8014c14:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 8014c16:	4a0b      	ldr	r2, [pc, #44]	; (8014c44 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	601a      	str	r2, [r3, #0]
 8014c1c:	68fb      	ldr	r3, [r7, #12]
 8014c1e:	68ba      	ldr	r2, [r7, #8]
 8014c20:	605a      	str	r2, [r3, #4]
 8014c22:	68fb      	ldr	r3, [r7, #12]
 8014c24:	687a      	ldr	r2, [r7, #4]
 8014c26:	609a      	str	r2, [r3, #8]
 8014c28:	68fb      	ldr	r3, [r7, #12]
 8014c2a:	683a      	ldr	r2, [r7, #0]
 8014c2c:	60da      	str	r2, [r3, #12]
 8014c2e:	68fb      	ldr	r3, [r7, #12]
 8014c30:	69ba      	ldr	r2, [r7, #24]
 8014c32:	611a      	str	r2, [r3, #16]
    {
    }
 8014c34:	68fb      	ldr	r3, [r7, #12]
 8014c36:	4618      	mov	r0, r3
 8014c38:	3714      	adds	r7, #20
 8014c3a:	46bd      	mov	sp, r7
 8014c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c40:	4770      	bx	lr
 8014c42:	bf00      	nop
 8014c44:	0802505c 	.word	0x0802505c

08014c48 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 8014c48:	b480      	push	{r7}
 8014c4a:	b083      	sub	sp, #12
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	6078      	str	r0, [r7, #4]
    {
 8014c50:	4a04      	ldr	r2, [pc, #16]	; (8014c64 <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	601a      	str	r2, [r3, #0]
    }
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	4618      	mov	r0, r3
 8014c5a:	370c      	adds	r7, #12
 8014c5c:	46bd      	mov	sp, r7
 8014c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c62:	4770      	bx	lr
 8014c64:	0802505c 	.word	0x0802505c

08014c68 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8014c68:	b580      	push	{r7, lr}
 8014c6a:	b082      	sub	sp, #8
 8014c6c:	af00      	add	r7, sp, #0
 8014c6e:	6078      	str	r0, [r7, #4]
    }
 8014c70:	6878      	ldr	r0, [r7, #4]
 8014c72:	f7ff ffe9 	bl	8014c48 <_ZN8touchgfx7MVPHeapD1Ev>
 8014c76:	2114      	movs	r1, #20
 8014c78:	6878      	ldr	r0, [r7, #4]
 8014c7a:	f00d fc87 	bl	802258c <_ZdlPvj>
 8014c7e:	687b      	ldr	r3, [r7, #4]
 8014c80:	4618      	mov	r0, r3
 8014c82:	3708      	adds	r7, #8
 8014c84:	46bd      	mov	sp, r7
 8014c86:	bd80      	pop	{r7, pc}

08014c88 <_ZN8touchgfx3LCDD1Ev>:
    virtual ~LCD() { }
 8014c88:	b480      	push	{r7}
 8014c8a:	b083      	sub	sp, #12
 8014c8c:	af00      	add	r7, sp, #0
 8014c8e:	6078      	str	r0, [r7, #4]
 8014c90:	4a04      	ldr	r2, [pc, #16]	; (8014ca4 <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8014c92:	687b      	ldr	r3, [r7, #4]
 8014c94:	601a      	str	r2, [r3, #0]
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	4618      	mov	r0, r3
 8014c9a:	370c      	adds	r7, #12
 8014c9c:	46bd      	mov	sp, r7
 8014c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ca2:	4770      	bx	lr
 8014ca4:	08025028 	.word	0x08025028

08014ca8 <_ZN8touchgfx3LCDD0Ev>:
 8014ca8:	b580      	push	{r7, lr}
 8014caa:	b082      	sub	sp, #8
 8014cac:	af00      	add	r7, sp, #0
 8014cae:	6078      	str	r0, [r7, #4]
 8014cb0:	6878      	ldr	r0, [r7, #4]
 8014cb2:	f7ff ffe9 	bl	8014c88 <_ZN8touchgfx3LCDD1Ev>
 8014cb6:	2104      	movs	r1, #4
 8014cb8:	6878      	ldr	r0, [r7, #4]
 8014cba:	f00d fc67 	bl	802258c <_ZdlPvj>
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	4618      	mov	r0, r3
 8014cc2:	3708      	adds	r7, #8
 8014cc4:	46bd      	mov	sp, r7
 8014cc6:	bd80      	pop	{r7, pc}

08014cc8 <_ZN8touchgfx3LCD4initEv>:
    virtual void init() { }
 8014cc8:	b480      	push	{r7}
 8014cca:	b083      	sub	sp, #12
 8014ccc:	af00      	add	r7, sp, #0
 8014cce:	6078      	str	r0, [r7, #4]
 8014cd0:	bf00      	nop
 8014cd2:	370c      	adds	r7, #12
 8014cd4:	46bd      	mov	sp, r7
 8014cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cda:	4770      	bx	lr

08014cdc <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8014cdc:	b480      	push	{r7}
 8014cde:	b083      	sub	sp, #12
 8014ce0:	af00      	add	r7, sp, #0
 8014ce2:	6078      	str	r0, [r7, #4]
 8014ce4:	460b      	mov	r3, r1
 8014ce6:	70fb      	strb	r3, [r7, #3]
    {
    }
 8014ce8:	bf00      	nop
 8014cea:	370c      	adds	r7, #12
 8014cec:	46bd      	mov	sp, r7
 8014cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf2:	4770      	bx	lr

08014cf4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 8014cf4:	b480      	push	{r7}
 8014cf6:	b083      	sub	sp, #12
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	6078      	str	r0, [r7, #4]
    {
 8014cfc:	4a04      	ldr	r2, [pc, #16]	; (8014d10 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	601a      	str	r2, [r3, #0]
    }
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	4618      	mov	r0, r3
 8014d06:	370c      	adds	r7, #12
 8014d08:	46bd      	mov	sp, r7
 8014d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d0e:	4770      	bx	lr
 8014d10:	08025010 	.word	0x08025010

08014d14 <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8014d14:	b580      	push	{r7, lr}
 8014d16:	b082      	sub	sp, #8
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	6078      	str	r0, [r7, #4]
    }
 8014d1c:	6878      	ldr	r0, [r7, #4]
 8014d1e:	f7ff ffe9 	bl	8014cf4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8014d22:	2104      	movs	r1, #4
 8014d24:	6878      	ldr	r0, [r7, #4]
 8014d26:	f00d fc31 	bl	802258c <_ZdlPvj>
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	3708      	adds	r7, #8
 8014d30:	46bd      	mov	sp, r7
 8014d32:	bd80      	pop	{r7, pc}

08014d34 <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8014d34:	b580      	push	{r7, lr}
 8014d36:	b082      	sub	sp, #8
 8014d38:	af00      	add	r7, sp, #0
 8014d3a:	6078      	str	r0, [r7, #4]
 8014d3c:	4a05      	ldr	r2, [pc, #20]	; (8014d54 <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8014d3e:	687b      	ldr	r3, [r7, #4]
 8014d40:	601a      	str	r2, [r3, #0]
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	4618      	mov	r0, r3
 8014d46:	f7ff fd4b 	bl	80147e0 <_ZN8touchgfx15UIEventListenerD1Ev>
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	4618      	mov	r0, r3
 8014d4e:	3708      	adds	r7, #8
 8014d50:	46bd      	mov	sp, r7
 8014d52:	bd80      	pop	{r7, pc}
 8014d54:	08025fec 	.word	0x08025fec

08014d58 <_ZN8touchgfx11ApplicationD0Ev>:
 8014d58:	b580      	push	{r7, lr}
 8014d5a:	b082      	sub	sp, #8
 8014d5c:	af00      	add	r7, sp, #0
 8014d5e:	6078      	str	r0, [r7, #4]
 8014d60:	6878      	ldr	r0, [r7, #4]
 8014d62:	f7ff ffe7 	bl	8014d34 <_ZN8touchgfx11ApplicationD1Ev>
 8014d66:	f44f 7198 	mov.w	r1, #304	; 0x130
 8014d6a:	6878      	ldr	r0, [r7, #4]
 8014d6c:	f00d fc0e 	bl	802258c <_ZdlPvj>
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	4618      	mov	r0, r3
 8014d74:	3708      	adds	r7, #8
 8014d76:	46bd      	mov	sp, r7
 8014d78:	bd80      	pop	{r7, pc}
	...

08014d7c <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	b082      	sub	sp, #8
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	6078      	str	r0, [r7, #4]
 8014d84:	4a05      	ldr	r2, [pc, #20]	; (8014d9c <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8014d86:	687b      	ldr	r3, [r7, #4]
 8014d88:	601a      	str	r2, [r3, #0]
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	4618      	mov	r0, r3
 8014d8e:	f7ff ffd1 	bl	8014d34 <_ZN8touchgfx11ApplicationD1Ev>
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	4618      	mov	r0, r3
 8014d96:	3708      	adds	r7, #8
 8014d98:	46bd      	mov	sp, r7
 8014d9a:	bd80      	pop	{r7, pc}
 8014d9c:	08024fd4 	.word	0x08024fd4

08014da0 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8014da0:	b580      	push	{r7, lr}
 8014da2:	b082      	sub	sp, #8
 8014da4:	af00      	add	r7, sp, #0
 8014da6:	6078      	str	r0, [r7, #4]
 8014da8:	6878      	ldr	r0, [r7, #4]
 8014daa:	f7ff ffe7 	bl	8014d7c <_ZN8touchgfx14MVPApplicationD1Ev>
 8014dae:	f44f 719c 	mov.w	r1, #312	; 0x138
 8014db2:	6878      	ldr	r0, [r7, #4]
 8014db4:	f00d fbea 	bl	802258c <_ZdlPvj>
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	4618      	mov	r0, r3
 8014dbc:	3708      	adds	r7, #8
 8014dbe:	46bd      	mov	sp, r7
 8014dc0:	bd80      	pop	{r7, pc}

08014dc2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8014dc2:	b580      	push	{r7, lr}
 8014dc4:	b082      	sub	sp, #8
 8014dc6:	af00      	add	r7, sp, #0
 8014dc8:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8014dca:	6878      	ldr	r0, [r7, #4]
 8014dcc:	f000 f804 	bl	8014dd8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8014dd0:	bf00      	nop
 8014dd2:	3708      	adds	r7, #8
 8014dd4:	46bd      	mov	sp, r7
 8014dd6:	bd80      	pop	{r7, pc}

08014dd8 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8014dd8:	b580      	push	{r7, lr}
 8014dda:	b082      	sub	sp, #8
 8014ddc:	af00      	add	r7, sp, #0
 8014dde:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8014de0:	687b      	ldr	r3, [r7, #4]
 8014de2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d00f      	beq.n	8014e0a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8014dea:	687b      	ldr	r3, [r7, #4]
 8014dec:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	330c      	adds	r3, #12
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	4610      	mov	r0, r2
 8014dfe:	4798      	blx	r3
 8014e00:	4603      	mov	r3, r0
 8014e02:	2b00      	cmp	r3, #0
 8014e04:	d001      	beq.n	8014e0a <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8014e06:	2301      	movs	r3, #1
 8014e08:	e000      	b.n	8014e0c <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8014e0a:	2300      	movs	r3, #0
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d00e      	beq.n	8014e2e <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8014e10:	687b      	ldr	r3, [r7, #4]
 8014e12:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8014e16:	687b      	ldr	r3, [r7, #4]
 8014e18:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8014e1c:	681b      	ldr	r3, [r3, #0]
 8014e1e:	3308      	adds	r3, #8
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	4610      	mov	r0, r2
 8014e24:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	2200      	movs	r2, #0
 8014e2a:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 8014e2e:	bf00      	nop
 8014e30:	3708      	adds	r7, #8
 8014e32:	46bd      	mov	sp, r7
 8014e34:	bd80      	pop	{r7, pc}
	...

08014e38 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8014e38:	b580      	push	{r7, lr}
 8014e3a:	b082      	sub	sp, #8
 8014e3c:	af00      	add	r7, sp, #0
 8014e3e:	6078      	str	r0, [r7, #4]
 8014e40:	4a08      	ldr	r2, [pc, #32]	; (8014e64 <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	601a      	str	r2, [r3, #0]
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8014e4c:	4618      	mov	r0, r3
 8014e4e:	f000 fc17 	bl	8015680 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	4618      	mov	r0, r3
 8014e56:	f7ff ff91 	bl	8014d7c <_ZN8touchgfx14MVPApplicationD1Ev>
 8014e5a:	687b      	ldr	r3, [r7, #4]
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	3708      	adds	r7, #8
 8014e60:	46bd      	mov	sp, r7
 8014e62:	bd80      	pop	{r7, pc}
 8014e64:	08024f80 	.word	0x08024f80

08014e68 <_ZN23FrontendApplicationBaseD0Ev>:
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b082      	sub	sp, #8
 8014e6c:	af00      	add	r7, sp, #0
 8014e6e:	6078      	str	r0, [r7, #4]
 8014e70:	6878      	ldr	r0, [r7, #4]
 8014e72:	f7ff ffe1 	bl	8014e38 <_ZN23FrontendApplicationBaseD1Ev>
 8014e76:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8014e7a:	6878      	ldr	r0, [r7, #4]
 8014e7c:	f00d fb86 	bl	802258c <_ZdlPvj>
 8014e80:	687b      	ldr	r3, [r7, #4]
 8014e82:	4618      	mov	r0, r3
 8014e84:	3708      	adds	r7, #8
 8014e86:	46bd      	mov	sp, r7
 8014e88:	bd80      	pop	{r7, pc}
	...

08014e8c <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8014e8c:	b580      	push	{r7, lr}
 8014e8e:	b082      	sub	sp, #8
 8014e90:	af00      	add	r7, sp, #0
 8014e92:	6078      	str	r0, [r7, #4]
 8014e94:	4a05      	ldr	r2, [pc, #20]	; (8014eac <_ZN19FrontendApplicationD1Ev+0x20>)
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	601a      	str	r2, [r3, #0]
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	f7ff ffcb 	bl	8014e38 <_ZN23FrontendApplicationBaseD1Ev>
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	4618      	mov	r0, r3
 8014ea6:	3708      	adds	r7, #8
 8014ea8:	46bd      	mov	sp, r7
 8014eaa:	bd80      	pop	{r7, pc}
 8014eac:	08024f44 	.word	0x08024f44

08014eb0 <_ZN19FrontendApplicationD0Ev>:
 8014eb0:	b580      	push	{r7, lr}
 8014eb2:	b082      	sub	sp, #8
 8014eb4:	af00      	add	r7, sp, #0
 8014eb6:	6078      	str	r0, [r7, #4]
 8014eb8:	6878      	ldr	r0, [r7, #4]
 8014eba:	f7ff ffe7 	bl	8014e8c <_ZN19FrontendApplicationD1Ev>
 8014ebe:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8014ec2:	6878      	ldr	r0, [r7, #4]
 8014ec4:	f00d fb62 	bl	802258c <_ZdlPvj>
 8014ec8:	687b      	ldr	r3, [r7, #4]
 8014eca:	4618      	mov	r0, r3
 8014ecc:	3708      	adds	r7, #8
 8014ece:	46bd      	mov	sp, r7
 8014ed0:	bd80      	pop	{r7, pc}

08014ed2 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8014ed2:	b580      	push	{r7, lr}
 8014ed4:	b082      	sub	sp, #8
 8014ed6:	af00      	add	r7, sp, #0
 8014ed8:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8014ee0:	4618      	mov	r0, r3
 8014ee2:	f007 feb1 	bl	801cc48 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8014ee6:	687b      	ldr	r3, [r7, #4]
 8014ee8:	4618      	mov	r0, r3
 8014eea:	f009 fc6d 	bl	801e7c8 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8014eee:	bf00      	nop
 8014ef0:	3708      	adds	r7, #8
 8014ef2:	46bd      	mov	sp, r7
 8014ef4:	bd80      	pop	{r7, pc}

08014ef6 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8014ef6:	b580      	push	{r7, lr}
 8014ef8:	b082      	sub	sp, #8
 8014efa:	af00      	add	r7, sp, #0
 8014efc:	6078      	str	r0, [r7, #4]
 8014efe:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8014f00:	683b      	ldr	r3, [r7, #0]
 8014f02:	4618      	mov	r0, r3
 8014f04:	f005 fb92 	bl	801a62c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8014f08:	bf00      	nop
 8014f0a:	3708      	adds	r7, #8
 8014f0c:	46bd      	mov	sp, r7
 8014f0e:	bd80      	pop	{r7, pc}

08014f10 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(AbstractPartition& presenters, AbstractPartition& views, AbstractPartition& transitions, FrontendApplication& app)
 8014f10:	b580      	push	{r7, lr}
 8014f12:	b086      	sub	sp, #24
 8014f14:	af02      	add	r7, sp, #8
 8014f16:	60f8      	str	r0, [r7, #12]
 8014f18:	60b9      	str	r1, [r7, #8]
 8014f1a:	607a      	str	r2, [r7, #4]
 8014f1c:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8014f1e:	68f8      	ldr	r0, [r7, #12]
 8014f20:	69bb      	ldr	r3, [r7, #24]
 8014f22:	9300      	str	r3, [sp, #0]
 8014f24:	683b      	ldr	r3, [r7, #0]
 8014f26:	687a      	ldr	r2, [r7, #4]
 8014f28:	68b9      	ldr	r1, [r7, #8]
 8014f2a:	f7ff fe6d 	bl	8014c08 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8014f2e:	4a04      	ldr	r2, [pc, #16]	; (8014f40 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8014f30:	68fb      	ldr	r3, [r7, #12]
 8014f32:	601a      	str	r2, [r3, #0]
    {

    }
 8014f34:	68fb      	ldr	r3, [r7, #12]
 8014f36:	4618      	mov	r0, r3
 8014f38:	3710      	adds	r7, #16
 8014f3a:	46bd      	mov	sp, r7
 8014f3c:	bd80      	pop	{r7, pc}
 8014f3e:	bf00      	nop
 8014f40:	08024f30 	.word	0x08024f30

08014f44 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8014f44:	b580      	push	{r7, lr}
 8014f46:	af00      	add	r7, sp, #0
 8014f48:	4801      	ldr	r0, [pc, #4]	; (8014f50 <__tcf_0+0xc>)
 8014f4a:	f000 fadf 	bl	801550c <_ZN12FrontendHeapD1Ev>
 8014f4e:	bd80      	pop	{r7, pc}
 8014f50:	20008318 	.word	0x20008318

08014f54 <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8014f54:	b580      	push	{r7, lr}
 8014f56:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8014f58:	4b12      	ldr	r3, [pc, #72]	; (8014fa4 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8014f5a:	781b      	ldrb	r3, [r3, #0]
 8014f5c:	f3bf 8f5b 	dmb	ish
 8014f60:	b2db      	uxtb	r3, r3
 8014f62:	f003 0301 	and.w	r3, r3, #1
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	bf0c      	ite	eq
 8014f6a:	2301      	moveq	r3, #1
 8014f6c:	2300      	movne	r3, #0
 8014f6e:	b2db      	uxtb	r3, r3
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d013      	beq.n	8014f9c <_ZN12FrontendHeap11getInstanceEv+0x48>
 8014f74:	480b      	ldr	r0, [pc, #44]	; (8014fa4 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8014f76:	f00d fb0b 	bl	8022590 <__cxa_guard_acquire>
 8014f7a:	4603      	mov	r3, r0
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	bf14      	ite	ne
 8014f80:	2301      	movne	r3, #1
 8014f82:	2300      	moveq	r3, #0
 8014f84:	b2db      	uxtb	r3, r3
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	d008      	beq.n	8014f9c <_ZN12FrontendHeap11getInstanceEv+0x48>
 8014f8a:	4807      	ldr	r0, [pc, #28]	; (8014fa8 <_ZN12FrontendHeap11getInstanceEv+0x54>)
 8014f8c:	f000 f832 	bl	8014ff4 <_ZN12FrontendHeapC1Ev>
 8014f90:	4804      	ldr	r0, [pc, #16]	; (8014fa4 <_ZN12FrontendHeap11getInstanceEv+0x50>)
 8014f92:	f00d fb09 	bl	80225a8 <__cxa_guard_release>
 8014f96:	4805      	ldr	r0, [pc, #20]	; (8014fac <_ZN12FrontendHeap11getInstanceEv+0x58>)
 8014f98:	f00d fb44 	bl	8022624 <atexit>
        return instance;
 8014f9c:	4b02      	ldr	r3, [pc, #8]	; (8014fa8 <_ZN12FrontendHeap11getInstanceEv+0x54>)
    }
 8014f9e:	4618      	mov	r0, r3
 8014fa0:	bd80      	pop	{r7, pc}
 8014fa2:	bf00      	nop
 8014fa4:	20008724 	.word	0x20008724
 8014fa8:	20008318 	.word	0x20008318
 8014fac:	08014f45 	.word	0x08014f45

08014fb0 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public MVPHeap
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	b082      	sub	sp, #8
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
 8014fb8:	4a05      	ldr	r2, [pc, #20]	; (8014fd0 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	601a      	str	r2, [r3, #0]
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	f7ff fe41 	bl	8014c48 <_ZN8touchgfx7MVPHeapD1Ev>
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	4618      	mov	r0, r3
 8014fca:	3708      	adds	r7, #8
 8014fcc:	46bd      	mov	sp, r7
 8014fce:	bd80      	pop	{r7, pc}
 8014fd0:	08024f30 	.word	0x08024f30

08014fd4 <_ZN16FrontendHeapBaseD0Ev>:
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	b082      	sub	sp, #8
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	6078      	str	r0, [r7, #4]
 8014fdc:	6878      	ldr	r0, [r7, #4]
 8014fde:	f7ff ffe7 	bl	8014fb0 <_ZN16FrontendHeapBaseD1Ev>
 8014fe2:	2114      	movs	r1, #20
 8014fe4:	6878      	ldr	r0, [r7, #4]
 8014fe6:	f00d fad1 	bl	802258c <_ZdlPvj>
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	4618      	mov	r0, r3
 8014fee:	3708      	adds	r7, #8
 8014ff0:	46bd      	mov	sp, r7
 8014ff2:	bd80      	pop	{r7, pc}

08014ff4 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8014ff4:	b590      	push	{r4, r7, lr}
 8014ff6:	b085      	sub	sp, #20
 8014ff8:	af02      	add	r7, sp, #8
 8014ffa:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8014ffc:	6878      	ldr	r0, [r7, #4]
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	f103 0114 	add.w	r1, r3, #20
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 801500a:	687b      	ldr	r3, [r7, #4]
 801500c:	f503 7416 	add.w	r4, r3, #600	; 0x258
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8015010:	687b      	ldr	r3, [r7, #4]
 8015012:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
                     app(model, *this)
 8015016:	9300      	str	r3, [sp, #0]
 8015018:	4623      	mov	r3, r4
 801501a:	f7ff ff79 	bl	8014f10 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 801501e:	4a18      	ldr	r2, [pc, #96]	; (8015080 <_ZN12FrontendHeapC1Ev+0x8c>)
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	601a      	str	r2, [r3, #0]
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	3314      	adds	r3, #20
 8015028:	4618      	mov	r0, r3
 801502a:	f000 f927 	bl	801527c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 801502e:	687b      	ldr	r3, [r7, #4]
 8015030:	332c      	adds	r3, #44	; 0x2c
 8015032:	4618      	mov	r0, r3
 8015034:	f000 f956 	bl	80152e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8015038:	687b      	ldr	r3, [r7, #4]
 801503a:	f503 7316 	add.w	r3, r3, #600	; 0x258
 801503e:	4618      	mov	r0, r3
 8015040:	f000 f986 	bl	8015350 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	f503 702e 	add.w	r0, r3, #696	; 0x2b8
 801504a:	687b      	ldr	r3, [r7, #4]
 801504c:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8015050:	687a      	ldr	r2, [r7, #4]
 8015052:	4619      	mov	r1, r3
 8015054:	f007 fdd4 	bl	801cc00 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8015058:	687b      	ldr	r3, [r7, #4]
 801505a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 801505e:	4618      	mov	r0, r3
 8015060:	f007 fde4 	bl	801cc2c <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8015064:	687a      	ldr	r2, [r7, #4]
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 801506c:	4619      	mov	r1, r3
 801506e:	4610      	mov	r0, r2
 8015070:	f7ff ff41 	bl	8014ef6 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	4618      	mov	r0, r3
 8015078:	370c      	adds	r7, #12
 801507a:	46bd      	mov	sp, r7
 801507c:	bd90      	pop	{r4, r7, pc}
 801507e:	bf00      	nop
 8015080:	08024e80 	.word	0x08024e80

08015084 <_ZN8touchgfx8LCD16bppD1Ev>:
 */
class LCD16bpp : public LCD
{
public:

    virtual ~LCD16bpp() {}
 8015084:	b580      	push	{r7, lr}
 8015086:	b082      	sub	sp, #8
 8015088:	af00      	add	r7, sp, #0
 801508a:	6078      	str	r0, [r7, #4]
 801508c:	4a05      	ldr	r2, [pc, #20]	; (80150a4 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	601a      	str	r2, [r3, #0]
 8015092:	687b      	ldr	r3, [r7, #4]
 8015094:	4618      	mov	r0, r3
 8015096:	f7ff fdf7 	bl	8014c88 <_ZN8touchgfx3LCDD1Ev>
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	4618      	mov	r0, r3
 801509e:	3708      	adds	r7, #8
 80150a0:	46bd      	mov	sp, r7
 80150a2:	bd80      	pop	{r7, pc}
 80150a4:	08026708 	.word	0x08026708

080150a8 <_ZN8touchgfx8LCD16bppD0Ev>:
 80150a8:	b580      	push	{r7, lr}
 80150aa:	b082      	sub	sp, #8
 80150ac:	af00      	add	r7, sp, #0
 80150ae:	6078      	str	r0, [r7, #4]
 80150b0:	6878      	ldr	r0, [r7, #4]
 80150b2:	f7ff ffe7 	bl	8015084 <_ZN8touchgfx8LCD16bppD1Ev>
 80150b6:	2104      	movs	r1, #4
 80150b8:	6878      	ldr	r0, [r7, #4]
 80150ba:	f00d fa67 	bl	802258c <_ZdlPvj>
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	4618      	mov	r0, r3
 80150c2:	3708      	adds	r7, #8
 80150c4:	46bd      	mov	sp, r7
 80150c6:	bd80      	pop	{r7, pc}

080150c8 <_ZN10STM32F7HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    STM32F7HAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b086      	sub	sp, #24
 80150cc:	af02      	add	r7, sp, #8
 80150ce:	60f8      	str	r0, [r7, #12]
 80150d0:	60b9      	str	r1, [r7, #8]
 80150d2:	607a      	str	r2, [r7, #4]
 80150d4:	603b      	str	r3, [r7, #0]
 80150d6:	68f8      	ldr	r0, [r7, #12]
 80150d8:	8bbb      	ldrh	r3, [r7, #28]
 80150da:	9301      	str	r3, [sp, #4]
 80150dc:	8b3b      	ldrh	r3, [r7, #24]
 80150de:	9300      	str	r3, [sp, #0]
 80150e0:	683b      	ldr	r3, [r7, #0]
 80150e2:	687a      	ldr	r2, [r7, #4]
 80150e4:	68b9      	ldr	r1, [r7, #8]
 80150e6:	f7ff fc49 	bl	801497c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 80150ea:	4a04      	ldr	r2, [pc, #16]	; (80150fc <_ZN10STM32F7HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 80150ec:	68fb      	ldr	r3, [r7, #12]
 80150ee:	601a      	str	r2, [r3, #0]
    {
    }
 80150f0:	68fb      	ldr	r3, [r7, #12]
 80150f2:	4618      	mov	r0, r3
 80150f4:	3710      	adds	r7, #16
 80150f6:	46bd      	mov	sp, r7
 80150f8:	bd80      	pop	{r7, pc}
 80150fa:	bf00      	nop
 80150fc:	08025140 	.word	0x08025140

08015100 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8015100:	b480      	push	{r7}
 8015102:	b083      	sub	sp, #12
 8015104:	af00      	add	r7, sp, #0
 8015106:	6078      	str	r0, [r7, #4]
 8015108:	4a04      	ldr	r2, [pc, #16]	; (801511c <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	601a      	str	r2, [r3, #0]
 801510e:	687b      	ldr	r3, [r7, #4]
 8015110:	4618      	mov	r0, r3
 8015112:	370c      	adds	r7, #12
 8015114:	46bd      	mov	sp, r7
 8015116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801511a:	4770      	bx	lr
 801511c:	08024800 	.word	0x08024800

08015120 <_ZN8touchgfx22STM32F7TouchControllerC1Ev>:
namespace touchgfx
{
class STM32F7TouchController: public TouchController
{
public:
    STM32F7TouchController() {}
 8015120:	b580      	push	{r7, lr}
 8015122:	b082      	sub	sp, #8
 8015124:	af00      	add	r7, sp, #0
 8015126:	6078      	str	r0, [r7, #4]
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	4618      	mov	r0, r3
 801512c:	f7ff ffe8 	bl	8015100 <_ZN8touchgfx15TouchControllerC1Ev>
 8015130:	4a03      	ldr	r2, [pc, #12]	; (8015140 <_ZN8touchgfx22STM32F7TouchControllerC1Ev+0x20>)
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	601a      	str	r2, [r3, #0]
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	4618      	mov	r0, r3
 801513a:	3708      	adds	r7, #8
 801513c:	46bd      	mov	sp, r7
 801513e:	bd80      	pop	{r7, pc}
 8015140:	08025210 	.word	0x08025210

08015144 <LCD_GetXSize>:

static uint32_t frameBuf0 = (uint32_t)(0xc0000000);
extern "C" {

uint32_t LCD_GetXSize(void)
{
 8015144:	b480      	push	{r7}
 8015146:	af00      	add	r7, sp, #0
  return 480;
 8015148:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 801514c:	4618      	mov	r0, r3
 801514e:	46bd      	mov	sp, r7
 8015150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015154:	4770      	bx	lr

08015156 <LCD_GetYSize>:

uint32_t LCD_GetYSize(void)
{
 8015156:	b480      	push	{r7}
 8015158:	af00      	add	r7, sp, #0
  return 272;
 801515a:	f44f 7388 	mov.w	r3, #272	; 0x110
}
 801515e:	4618      	mov	r0, r3
 8015160:	46bd      	mov	sp, r7
 8015162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015166:	4770      	bx	lr

08015168 <_Z16GRAPHICS_HW_Initv>:
}

void GRAPHICS_HW_Init()
{
 8015168:	b580      	push	{r7, lr}
 801516a:	af00      	add	r7, sp, #0
    

    /* Initialize the SDRAM */
    MX_FMC_Init();
 801516c:	f000 fc8c 	bl	8015a88 <_Z11MX_FMC_Initv>
    MX_SDRAM_InitEx();
 8015170:	f000 fce0 	bl	8015b34 <_Z15MX_SDRAM_InitExv>

    /* Configure LCD */
    MX_LCD_Init();
 8015174:	f000 fbf8 	bl	8015968 <_Z11MX_LCD_Initv>
    GPIO::init();
 8015178:	f000 fbcd 	bl	8015916 <_ZN8touchgfx4GPIO4initEv>

//Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 801517c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8015180:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8015184:	601a      	str	r2, [r3, #0]
}
 8015186:	bf00      	nop
 8015188:	bd80      	pop	{r7, pc}
	...

0801518c <_ZN8touchgfx22STM32F7InstrumentationC1Ev>:
#include <stdint.h>
#include <main.h>
    
namespace touchgfx
{
class STM32F7Instrumentation: public MCUInstrumentation
 801518c:	b580      	push	{r7, lr}
 801518e:	b082      	sub	sp, #8
 8015190:	af00      	add	r7, sp, #0
 8015192:	6078      	str	r0, [r7, #4]
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	4618      	mov	r0, r3
 8015198:	f7ff fb78 	bl	801488c <_ZN8touchgfx18MCUInstrumentationC1Ev>
 801519c:	4a03      	ldr	r2, [pc, #12]	; (80151ac <_ZN8touchgfx22STM32F7InstrumentationC1Ev+0x20>)
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	601a      	str	r2, [r3, #0]
 80151a2:	687b      	ldr	r3, [r7, #4]
 80151a4:	4618      	mov	r0, r3
 80151a6:	3708      	adds	r7, #8
 80151a8:	46bd      	mov	sp, r7
 80151aa:	bd80      	pop	{r7, pc}
 80151ac:	080251e8 	.word	0x080251e8

080151b0 <_ZN8touchgfx13touchgfx_initEv>:
static uint16_t bitdepth = 16;

namespace touchgfx
{
void touchgfx_init()
{
 80151b0:	b590      	push	{r4, r7, lr}
 80151b2:	b087      	sub	sp, #28
 80151b4:	af04      	add	r7, sp, #16
  uint16_t dispWidth = 480;
 80151b6:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80151ba:	80fb      	strh	r3, [r7, #6]
  uint16_t dispHeight = 272;  
 80151bc:	f44f 7388 	mov.w	r3, #272	; 0x110
 80151c0:	80bb      	strh	r3, [r7, #4]
  
    HAL& hal = touchgfx_generic_init<STM32F7HAL>(dma, display, tc, dispWidth, dispHeight,(uint16_t*) 0, 
                                               0, 0);
 80151c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80151c6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80151ca:	2100      	movs	r1, #0
 80151cc:	9103      	str	r1, [sp, #12]
 80151ce:	2100      	movs	r1, #0
 80151d0:	9102      	str	r1, [sp, #8]
 80151d2:	2100      	movs	r1, #0
 80151d4:	9101      	str	r1, [sp, #4]
 80151d6:	9300      	str	r3, [sp, #0]
 80151d8:	4613      	mov	r3, r2
 80151da:	4a19      	ldr	r2, [pc, #100]	; (8015240 <_ZN8touchgfx13touchgfx_initEv+0x90>)
 80151dc:	4919      	ldr	r1, [pc, #100]	; (8015244 <_ZN8touchgfx13touchgfx_initEv+0x94>)
 80151de:	481a      	ldr	r0, [pc, #104]	; (8015248 <_ZN8touchgfx13touchgfx_initEv+0x98>)
 80151e0:	f000 f8ea 	bl	80153b8 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm>
 80151e4:	6038      	str	r0, [r7, #0]

    hal.setFrameBufferStartAddress((uint16_t*)frameBuf0, bitdepth ,true , true);
 80151e6:	683b      	ldr	r3, [r7, #0]
 80151e8:	681b      	ldr	r3, [r3, #0]
 80151ea:	3374      	adds	r3, #116	; 0x74
 80151ec:	681c      	ldr	r4, [r3, #0]
 80151ee:	4b17      	ldr	r3, [pc, #92]	; (801524c <_ZN8touchgfx13touchgfx_initEv+0x9c>)
 80151f0:	681b      	ldr	r3, [r3, #0]
 80151f2:	4619      	mov	r1, r3
 80151f4:	4b16      	ldr	r3, [pc, #88]	; (8015250 <_ZN8touchgfx13touchgfx_initEv+0xa0>)
 80151f6:	881a      	ldrh	r2, [r3, #0]
 80151f8:	2301      	movs	r3, #1
 80151fa:	9300      	str	r3, [sp, #0]
 80151fc:	2301      	movs	r3, #1
 80151fe:	6838      	ldr	r0, [r7, #0]
 8015200:	47a0      	blx	r4

    hal.setTouchSampleRate(2);
 8015202:	2102      	movs	r1, #2
 8015204:	6838      	ldr	r0, [r7, #0]
 8015206:	f7ff fc8d 	bl	8014b24 <_ZN8touchgfx3HAL18setTouchSampleRateEa>
    hal.setFingerSize(1);
 801520a:	2101      	movs	r1, #1
 801520c:	6838      	ldr	r0, [r7, #0]
 801520e:	f7ff fcbb 	bl	8014b88 <_ZN8touchgfx3HAL13setFingerSizeEh>

    // By default frame rate compensation is off.
    // Enable frame rate compensation to smooth out animations in case there is periodic slow frame rates.
    hal.setFrameRateCompensation(false);
 8015212:	2100      	movs	r1, #0
 8015214:	6838      	ldr	r0, [r7, #0]
 8015216:	f7ff fc75 	bl	8014b04 <_ZN8touchgfx3HAL24setFrameRateCompensationEb>

    // This platform can handle simultaneous DMA and TFT accesses to SDRAM, so disable lock to increase performance.
    hal.lockDMAToFrontPorch(false);
 801521a:	2100      	movs	r1, #0
 801521c:	6838      	ldr	r0, [r7, #0]
 801521e:	f7ff fc61 	bl	8014ae4 <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>

    mcuInstr.init();
 8015222:	480c      	ldr	r0, [pc, #48]	; (8015254 <_ZN8touchgfx13touchgfx_initEv+0xa4>)
 8015224:	f001 fe1a 	bl	8016e5c <_ZN8touchgfx22STM32F7Instrumentation4initEv>

    //Set MCU instrumentation and Load calculation
    hal.setMCUInstrumentation(&mcuInstr);
 8015228:	490a      	ldr	r1, [pc, #40]	; (8015254 <_ZN8touchgfx13touchgfx_initEv+0xa4>)
 801522a:	6838      	ldr	r0, [r7, #0]
 801522c:	f7ff fc8e 	bl	8014b4c <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>
    hal.enableMCULoadCalculation(true);
 8015230:	2101      	movs	r1, #1
 8015232:	6838      	ldr	r0, [r7, #0]
 8015234:	f7ff fc98 	bl	8014b68 <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>
}
 8015238:	bf00      	nop
 801523a:	370c      	adds	r7, #12
 801523c:	46bd      	mov	sp, r7
 801523e:	bd90      	pop	{r4, r7, pc}
 8015240:	200091cc 	.word	0x200091cc
 8015244:	20000068 	.word	0x20000068
 8015248:	2000872c 	.word	0x2000872c
 801524c:	20000064 	.word	0x20000064
 8015250:	2000006c 	.word	0x2000006c
 8015254:	200091d0 	.word	0x200091d0

08015258 <_Z13GRAPHICS_Initv>:
}

void GRAPHICS_Init()
{
 8015258:	b580      	push	{r7, lr}
 801525a:	af00      	add	r7, sp, #0
   touchgfx::touchgfx_init();
 801525c:	f7ff ffa8 	bl	80151b0 <_ZN8touchgfx13touchgfx_initEv>
}
 8015260:	bf00      	nop
 8015262:	bd80      	pop	{r7, pc}

08015264 <_Z17GRAPHICS_MainTaskv>:

void GRAPHICS_MainTask(void)
{
 8015264:	b580      	push	{r7, lr}
 8015266:	af00      	add	r7, sp, #0
    touchgfx::HAL::getInstance()->taskEntry();
 8015268:	f7fa f92a 	bl	800f4c0 <_ZN8touchgfx3HAL11getInstanceEv>
 801526c:	4603      	mov	r3, r0
 801526e:	681a      	ldr	r2, [r3, #0]
 8015270:	320c      	adds	r2, #12
 8015272:	6812      	ldr	r2, [r2, #0]
 8015274:	4618      	mov	r0, r3
 8015276:	4790      	blx	r2
}
 8015278:	bf00      	nop
 801527a:	bd80      	pop	{r7, pc}

0801527c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 801527c:	b580      	push	{r7, lr}
 801527e:	b082      	sub	sp, #8
 8015280:	af00      	add	r7, sp, #0
 8015282:	6078      	str	r0, [r7, #4]
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	4618      	mov	r0, r3
 8015288:	f007 fff0 	bl	801d26c <_ZN8touchgfx17AbstractPartitionC1Ev>
 801528c:	4a03      	ldr	r2, [pc, #12]	; (801529c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	601a      	str	r2, [r3, #0]
    {
    }
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	4618      	mov	r0, r3
 8015296:	3708      	adds	r7, #8
 8015298:	46bd      	mov	sp, r7
 801529a:	bd80      	pop	{r7, pc}
 801529c:	08024efc 	.word	0x08024efc

080152a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 80152a0:	b580      	push	{r7, lr}
 80152a2:	b082      	sub	sp, #8
 80152a4:	af00      	add	r7, sp, #0
 80152a6:	6078      	str	r0, [r7, #4]
    {
    }
 80152a8:	4a05      	ldr	r2, [pc, #20]	; (80152c0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	601a      	str	r2, [r3, #0]
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	4618      	mov	r0, r3
 80152b2:	f007 ffd9 	bl	801d268 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	4618      	mov	r0, r3
 80152ba:	3708      	adds	r7, #8
 80152bc:	46bd      	mov	sp, r7
 80152be:	bd80      	pop	{r7, pc}
 80152c0:	08024efc 	.word	0x08024efc

080152c4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80152c4:	b580      	push	{r7, lr}
 80152c6:	b082      	sub	sp, #8
 80152c8:	af00      	add	r7, sp, #0
 80152ca:	6078      	str	r0, [r7, #4]
    }
 80152cc:	6878      	ldr	r0, [r7, #4]
 80152ce:	f7ff ffe7 	bl	80152a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80152d2:	2118      	movs	r1, #24
 80152d4:	6878      	ldr	r0, [r7, #4]
 80152d6:	f00d f959 	bl	802258c <_ZdlPvj>
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	4618      	mov	r0, r3
 80152de:	3708      	adds	r7, #8
 80152e0:	46bd      	mov	sp, r7
 80152e2:	bd80      	pop	{r7, pc}

080152e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 80152e4:	b580      	push	{r7, lr}
 80152e6:	b082      	sub	sp, #8
 80152e8:	af00      	add	r7, sp, #0
 80152ea:	6078      	str	r0, [r7, #4]
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	4618      	mov	r0, r3
 80152f0:	f007 ffbc 	bl	801d26c <_ZN8touchgfx17AbstractPartitionC1Ev>
 80152f4:	4a03      	ldr	r2, [pc, #12]	; (8015304 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	601a      	str	r2, [r3, #0]
    }
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	4618      	mov	r0, r3
 80152fe:	3708      	adds	r7, #8
 8015300:	46bd      	mov	sp, r7
 8015302:	bd80      	pop	{r7, pc}
 8015304:	08024ec8 	.word	0x08024ec8

08015308 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 8015308:	b580      	push	{r7, lr}
 801530a:	b082      	sub	sp, #8
 801530c:	af00      	add	r7, sp, #0
 801530e:	6078      	str	r0, [r7, #4]
    }
 8015310:	4a05      	ldr	r2, [pc, #20]	; (8015328 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 8015312:	687b      	ldr	r3, [r7, #4]
 8015314:	601a      	str	r2, [r3, #0]
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	4618      	mov	r0, r3
 801531a:	f007 ffa5 	bl	801d268 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801531e:	687b      	ldr	r3, [r7, #4]
 8015320:	4618      	mov	r0, r3
 8015322:	3708      	adds	r7, #8
 8015324:	46bd      	mov	sp, r7
 8015326:	bd80      	pop	{r7, pc}
 8015328:	08024ec8 	.word	0x08024ec8

0801532c <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 801532c:	b580      	push	{r7, lr}
 801532e:	b082      	sub	sp, #8
 8015330:	af00      	add	r7, sp, #0
 8015332:	6078      	str	r0, [r7, #4]
    }
 8015334:	6878      	ldr	r0, [r7, #4]
 8015336:	f7ff ffe7 	bl	8015308 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801533a:	f44f 710b 	mov.w	r1, #556	; 0x22c
 801533e:	6878      	ldr	r0, [r7, #4]
 8015340:	f00d f924 	bl	802258c <_ZdlPvj>
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	4618      	mov	r0, r3
 8015348:	3708      	adds	r7, #8
 801534a:	46bd      	mov	sp, r7
 801534c:	bd80      	pop	{r7, pc}
	...

08015350 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8015350:	b580      	push	{r7, lr}
 8015352:	b082      	sub	sp, #8
 8015354:	af00      	add	r7, sp, #0
 8015356:	6078      	str	r0, [r7, #4]
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	4618      	mov	r0, r3
 801535c:	f007 ff86 	bl	801d26c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8015360:	4a03      	ldr	r2, [pc, #12]	; (8015370 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	601a      	str	r2, [r3, #0]
    }
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	4618      	mov	r0, r3
 801536a:	3708      	adds	r7, #8
 801536c:	46bd      	mov	sp, r7
 801536e:	bd80      	pop	{r7, pc}
 8015370:	08024e94 	.word	0x08024e94

08015374 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
    virtual ~Partition()
 8015374:	b580      	push	{r7, lr}
 8015376:	b082      	sub	sp, #8
 8015378:	af00      	add	r7, sp, #0
 801537a:	6078      	str	r0, [r7, #4]
    }
 801537c:	4a05      	ldr	r2, [pc, #20]	; (8015394 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 801537e:	687b      	ldr	r3, [r7, #4]
 8015380:	601a      	str	r2, [r3, #0]
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	4618      	mov	r0, r3
 8015386:	f007 ff6f 	bl	801d268 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	4618      	mov	r0, r3
 801538e:	3708      	adds	r7, #8
 8015390:	46bd      	mov	sp, r7
 8015392:	bd80      	pop	{r7, pc}
 8015394:	08024e94 	.word	0x08024e94

08015398 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
    virtual ~Partition()
 8015398:	b580      	push	{r7, lr}
 801539a:	b082      	sub	sp, #8
 801539c:	af00      	add	r7, sp, #0
 801539e:	6078      	str	r0, [r7, #4]
    }
 80153a0:	6878      	ldr	r0, [r7, #4]
 80153a2:	f7ff ffe7 	bl	8015374 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80153a6:	2160      	movs	r1, #96	; 0x60
 80153a8:	6878      	ldr	r0, [r7, #4]
 80153aa:	f00d f8ef 	bl	802258c <_ZdlPvj>
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	4618      	mov	r0, r3
 80153b2:	3708      	adds	r7, #8
 80153b4:	46bd      	mov	sp, r7
 80153b6:	bd80      	pop	{r7, pc}

080153b8 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm>:
 * @param numberOfDynamicBitmaps Number of dynamic bitmaps.
 *
 * @return A reference to the allocated (and initialized) HAL object.
 */
template <class HALType>
HAL& touchgfx_generic_init(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height,
 80153b8:	b590      	push	{r4, r7, lr}
 80153ba:	b089      	sub	sp, #36	; 0x24
 80153bc:	af02      	add	r7, sp, #8
 80153be:	60f8      	str	r0, [r7, #12]
 80153c0:	60b9      	str	r1, [r7, #8]
 80153c2:	607a      	str	r2, [r7, #4]
 80153c4:	807b      	strh	r3, [r7, #2]
                           uint16_t* bitmapCache, uint32_t bitmapCacheSize, uint32_t numberOfDynamicBitmaps = 0)
{
    HAL& hal = getHAL<HALType>(dma, display, tc, width, height);
 80153c6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80153ca:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80153ce:	9300      	str	r3, [sp, #0]
 80153d0:	4613      	mov	r3, r2
 80153d2:	687a      	ldr	r2, [r7, #4]
 80153d4:	68b9      	ldr	r1, [r7, #8]
 80153d6:	68f8      	ldr	r0, [r7, #12]
 80153d8:	f000 f85c 	bl	8015494 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss>
 80153dc:	6178      	str	r0, [r7, #20]
    hal.initialize();
 80153de:	6978      	ldr	r0, [r7, #20]
 80153e0:	f008 f916 	bl	801d610 <_ZN8touchgfx3HAL10initializeEv>

    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(),
 80153e4:	f007 fb4c 	bl	801ca80 <_ZN14BitmapDatabase11getInstanceEv>
 80153e8:	4604      	mov	r4, r0
 80153ea:	f007 fb53 	bl	801ca94 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80153ee:	4603      	mov	r3, r0
 80153f0:	4619      	mov	r1, r3
 80153f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80153f4:	9300      	str	r3, [sp, #0]
 80153f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80153fa:	4620      	mov	r0, r4
 80153fc:	f00a ffe6 	bl	80203cc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
                                   BitmapDatabase::getInstanceSize(),
                                   bitmapCache,
                                   bitmapCacheSize,
                                   numberOfDynamicBitmaps);

    TypedText::registerTexts(&texts);
 8015400:	480d      	ldr	r0, [pc, #52]	; (8015438 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x80>)
 8015402:	f7ff fbd1 	bl	8014ba8 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 8015406:	2000      	movs	r0, #0
 8015408:	f007 fb68 	bl	801cadc <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 801540c:	480b      	ldr	r0, [pc, #44]	; (801543c <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x84>)
 801540e:	f00a ff47 	bl	80202a0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 8015412:	f7ff fd9f 	bl	8014f54 <_ZN12FrontendHeap11getInstanceEv>
 8015416:	6138      	str	r0, [r7, #16]
    (void)heap; // we need to obtain the reference above to initialize the frontend heap.

    hal.registerEventListener(*(Application::getInstance()));
 8015418:	697b      	ldr	r3, [r7, #20]
 801541a:	681b      	ldr	r3, [r3, #0]
 801541c:	3350      	adds	r3, #80	; 0x50
 801541e:	681c      	ldr	r4, [r3, #0]
 8015420:	f009 fa9c 	bl	801e95c <_ZN8touchgfx11Application11getInstanceEv>
 8015424:	4603      	mov	r3, r0
 8015426:	4619      	mov	r1, r3
 8015428:	6978      	ldr	r0, [r7, #20]
 801542a:	47a0      	blx	r4

    return hal;
 801542c:	697b      	ldr	r3, [r7, #20]
}
 801542e:	4618      	mov	r0, r3
 8015430:	371c      	adds	r7, #28
 8015432:	46bd      	mov	sp, r7
 8015434:	bd90      	pop	{r4, r7, pc}
 8015436:	bf00      	nop
 8015438:	20008728 	.word	0x20008728
 801543c:	20000060 	.word	0x20000060

08015440 <_ZN10STM32F7HALD1Ev>:
class STM32F7HAL : public touchgfx::HAL
 8015440:	b580      	push	{r7, lr}
 8015442:	b082      	sub	sp, #8
 8015444:	af00      	add	r7, sp, #0
 8015446:	6078      	str	r0, [r7, #4]
 8015448:	4a05      	ldr	r2, [pc, #20]	; (8015460 <_ZN10STM32F7HALD1Ev+0x20>)
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	601a      	str	r2, [r3, #0]
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	4618      	mov	r0, r3
 8015452:	f7ff fb27 	bl	8014aa4 <_ZN8touchgfx3HALD1Ev>
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	4618      	mov	r0, r3
 801545a:	3708      	adds	r7, #8
 801545c:	46bd      	mov	sp, r7
 801545e:	bd80      	pop	{r7, pc}
 8015460:	08025140 	.word	0x08025140

08015464 <_ZN10STM32F7HALD0Ev>:
 8015464:	b580      	push	{r7, lr}
 8015466:	b082      	sub	sp, #8
 8015468:	af00      	add	r7, sp, #0
 801546a:	6078      	str	r0, [r7, #4]
 801546c:	6878      	ldr	r0, [r7, #4]
 801546e:	f7ff ffe7 	bl	8015440 <_ZN10STM32F7HALD1Ev>
 8015472:	2168      	movs	r1, #104	; 0x68
 8015474:	6878      	ldr	r0, [r7, #4]
 8015476:	f00d f889 	bl	802258c <_ZdlPvj>
 801547a:	687b      	ldr	r3, [r7, #4]
 801547c:	4618      	mov	r0, r3
 801547e:	3708      	adds	r7, #8
 8015480:	46bd      	mov	sp, r7
 8015482:	bd80      	pop	{r7, pc}

08015484 <__tcf_1>:
    static T hal(dma, display, tc, width, height);
 8015484:	b580      	push	{r7, lr}
 8015486:	af00      	add	r7, sp, #0
 8015488:	4801      	ldr	r0, [pc, #4]	; (8015490 <__tcf_1+0xc>)
 801548a:	f7ff ffd9 	bl	8015440 <_ZN10STM32F7HALD1Ev>
 801548e:	bd80      	pop	{r7, pc}
 8015490:	200091e0 	.word	0x200091e0

08015494 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss>:
HAL& getHAL(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height)
 8015494:	b580      	push	{r7, lr}
 8015496:	b086      	sub	sp, #24
 8015498:	af02      	add	r7, sp, #8
 801549a:	60f8      	str	r0, [r7, #12]
 801549c:	60b9      	str	r1, [r7, #8]
 801549e:	607a      	str	r2, [r7, #4]
 80154a0:	807b      	strh	r3, [r7, #2]
    static T hal(dma, display, tc, width, height);
 80154a2:	4b17      	ldr	r3, [pc, #92]	; (8015500 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x6c>)
 80154a4:	781b      	ldrb	r3, [r3, #0]
 80154a6:	f3bf 8f5b 	dmb	ish
 80154aa:	b2db      	uxtb	r3, r3
 80154ac:	f003 0301 	and.w	r3, r3, #1
 80154b0:	2b00      	cmp	r3, #0
 80154b2:	bf0c      	ite	eq
 80154b4:	2301      	moveq	r3, #1
 80154b6:	2300      	movne	r3, #0
 80154b8:	b2db      	uxtb	r3, r3
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	d01a      	beq.n	80154f4 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x60>
 80154be:	4810      	ldr	r0, [pc, #64]	; (8015500 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x6c>)
 80154c0:	f00d f866 	bl	8022590 <__cxa_guard_acquire>
 80154c4:	4603      	mov	r3, r0
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	bf14      	ite	ne
 80154ca:	2301      	movne	r3, #1
 80154cc:	2300      	moveq	r3, #0
 80154ce:	b2db      	uxtb	r3, r3
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d00f      	beq.n	80154f4 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x60>
 80154d4:	887b      	ldrh	r3, [r7, #2]
 80154d6:	8b3a      	ldrh	r2, [r7, #24]
 80154d8:	9201      	str	r2, [sp, #4]
 80154da:	9300      	str	r3, [sp, #0]
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	68ba      	ldr	r2, [r7, #8]
 80154e0:	68f9      	ldr	r1, [r7, #12]
 80154e2:	4808      	ldr	r0, [pc, #32]	; (8015504 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x70>)
 80154e4:	f7ff fdf0 	bl	80150c8 <_ZN10STM32F7HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 80154e8:	4805      	ldr	r0, [pc, #20]	; (8015500 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x6c>)
 80154ea:	f00d f85d 	bl	80225a8 <__cxa_guard_release>
 80154ee:	4806      	ldr	r0, [pc, #24]	; (8015508 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x74>)
 80154f0:	f00d f898 	bl	8022624 <atexit>
    return hal;
 80154f4:	4b03      	ldr	r3, [pc, #12]	; (8015504 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x70>)
}
 80154f6:	4618      	mov	r0, r3
 80154f8:	3710      	adds	r7, #16
 80154fa:	46bd      	mov	sp, r7
 80154fc:	bd80      	pop	{r7, pc}
 80154fe:	bf00      	nop
 8015500:	20009248 	.word	0x20009248
 8015504:	200091e0 	.word	0x200091e0
 8015508:	08015485 	.word	0x08015485

0801550c <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 801550c:	b580      	push	{r7, lr}
 801550e:	b082      	sub	sp, #8
 8015510:	af00      	add	r7, sp, #0
 8015512:	6078      	str	r0, [r7, #4]
 8015514:	4a10      	ldr	r2, [pc, #64]	; (8015558 <_ZN12FrontendHeapD1Ev+0x4c>)
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	601a      	str	r2, [r3, #0]
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8015520:	4618      	mov	r0, r3
 8015522:	f7ff fcb3 	bl	8014e8c <_ZN19FrontendApplicationD1Ev>
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	f503 7316 	add.w	r3, r3, #600	; 0x258
 801552c:	4618      	mov	r0, r3
 801552e:	f7ff ff21 	bl	8015374 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	332c      	adds	r3, #44	; 0x2c
 8015536:	4618      	mov	r0, r3
 8015538:	f7ff fee6 	bl	8015308 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 801553c:	687b      	ldr	r3, [r7, #4]
 801553e:	3314      	adds	r3, #20
 8015540:	4618      	mov	r0, r3
 8015542:	f7ff fead 	bl	80152a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015546:	687b      	ldr	r3, [r7, #4]
 8015548:	4618      	mov	r0, r3
 801554a:	f7ff fd31 	bl	8014fb0 <_ZN16FrontendHeapBaseD1Ev>
 801554e:	687b      	ldr	r3, [r7, #4]
 8015550:	4618      	mov	r0, r3
 8015552:	3708      	adds	r7, #8
 8015554:	46bd      	mov	sp, r7
 8015556:	bd80      	pop	{r7, pc}
 8015558:	08024e80 	.word	0x08024e80

0801555c <_ZN12FrontendHeapD0Ev>:
 801555c:	b580      	push	{r7, lr}
 801555e:	b082      	sub	sp, #8
 8015560:	af00      	add	r7, sp, #0
 8015562:	6078      	str	r0, [r7, #4]
 8015564:	6878      	ldr	r0, [r7, #4]
 8015566:	f7ff ffd1 	bl	801550c <_ZN12FrontendHeapD1Ev>
 801556a:	f240 410c 	movw	r1, #1036	; 0x40c
 801556e:	6878      	ldr	r0, [r7, #4]
 8015570:	f00d f80c 	bl	802258c <_ZdlPvj>
 8015574:	687b      	ldr	r3, [r7, #4]
 8015576:	4618      	mov	r0, r3
 8015578:	3708      	adds	r7, #8
 801557a:	46bd      	mov	sp, r7
 801557c:	bd80      	pop	{r7, pc}
	...

08015580 <_ZN8touchgfx22STM32F7InstrumentationD1Ev>:
 8015580:	b580      	push	{r7, lr}
 8015582:	b082      	sub	sp, #8
 8015584:	af00      	add	r7, sp, #0
 8015586:	6078      	str	r0, [r7, #4]
 8015588:	4a05      	ldr	r2, [pc, #20]	; (80155a0 <_ZN8touchgfx22STM32F7InstrumentationD1Ev+0x20>)
 801558a:	687b      	ldr	r3, [r7, #4]
 801558c:	601a      	str	r2, [r3, #0]
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	4618      	mov	r0, r3
 8015592:	f7ff f991 	bl	80148b8 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	4618      	mov	r0, r3
 801559a:	3708      	adds	r7, #8
 801559c:	46bd      	mov	sp, r7
 801559e:	bd80      	pop	{r7, pc}
 80155a0:	080251e8 	.word	0x080251e8

080155a4 <_ZN8touchgfx22STM32F7InstrumentationD0Ev>:
 80155a4:	b580      	push	{r7, lr}
 80155a6:	b082      	sub	sp, #8
 80155a8:	af00      	add	r7, sp, #0
 80155aa:	6078      	str	r0, [r7, #4]
 80155ac:	6878      	ldr	r0, [r7, #4]
 80155ae:	f7ff ffe7 	bl	8015580 <_ZN8touchgfx22STM32F7InstrumentationD1Ev>
 80155b2:	2110      	movs	r1, #16
 80155b4:	6878      	ldr	r0, [r7, #4]
 80155b6:	f00c ffe9 	bl	802258c <_ZdlPvj>
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	4618      	mov	r0, r3
 80155be:	3708      	adds	r7, #8
 80155c0:	46bd      	mov	sp, r7
 80155c2:	bd80      	pop	{r7, pc}

080155c4 <_ZN8touchgfx22STM32F7TouchControllerD1Ev>:
class STM32F7TouchController: public TouchController
 80155c4:	b580      	push	{r7, lr}
 80155c6:	b082      	sub	sp, #8
 80155c8:	af00      	add	r7, sp, #0
 80155ca:	6078      	str	r0, [r7, #4]
 80155cc:	4a05      	ldr	r2, [pc, #20]	; (80155e4 <_ZN8touchgfx22STM32F7TouchControllerD1Ev+0x20>)
 80155ce:	687b      	ldr	r3, [r7, #4]
 80155d0:	601a      	str	r2, [r3, #0]
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	4618      	mov	r0, r3
 80155d6:	f7f8 fed5 	bl	800e384 <_ZN8touchgfx15TouchControllerD1Ev>
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	4618      	mov	r0, r3
 80155de:	3708      	adds	r7, #8
 80155e0:	46bd      	mov	sp, r7
 80155e2:	bd80      	pop	{r7, pc}
 80155e4:	08025210 	.word	0x08025210

080155e8 <_ZN8touchgfx22STM32F7TouchControllerD0Ev>:
 80155e8:	b580      	push	{r7, lr}
 80155ea:	b082      	sub	sp, #8
 80155ec:	af00      	add	r7, sp, #0
 80155ee:	6078      	str	r0, [r7, #4]
 80155f0:	6878      	ldr	r0, [r7, #4]
 80155f2:	f7ff ffe7 	bl	80155c4 <_ZN8touchgfx22STM32F7TouchControllerD1Ev>
 80155f6:	2104      	movs	r1, #4
 80155f8:	6878      	ldr	r0, [r7, #4]
 80155fa:	f00c ffc7 	bl	802258c <_ZdlPvj>
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	4618      	mov	r0, r3
 8015602:	3708      	adds	r7, #8
 8015604:	46bd      	mov	sp, r7
 8015606:	bd80      	pop	{r7, pc}

08015608 <_Z41__static_initialization_and_destruction_0ii>:
 8015608:	b580      	push	{r7, lr}
 801560a:	b082      	sub	sp, #8
 801560c:	af00      	add	r7, sp, #0
 801560e:	6078      	str	r0, [r7, #4]
 8015610:	6039      	str	r1, [r7, #0]
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	2b01      	cmp	r3, #1
 8015616:	d10d      	bne.n	8015634 <_Z41__static_initialization_and_destruction_0ii+0x2c>
 8015618:	683b      	ldr	r3, [r7, #0]
 801561a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801561e:	4293      	cmp	r3, r2
 8015620:	d108      	bne.n	8015634 <_Z41__static_initialization_and_destruction_0ii+0x2c>
STM32F7DMA dma;
 8015622:	4812      	ldr	r0, [pc, #72]	; (801566c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8015624:	f000 fde2 	bl	80161ec <_ZN10STM32F7DMAC1Ev>
STM32F7TouchController tc;
 8015628:	4811      	ldr	r0, [pc, #68]	; (8015670 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 801562a:	f7ff fd79 	bl	8015120 <_ZN8touchgfx22STM32F7TouchControllerC1Ev>
STM32F7Instrumentation mcuInstr;
 801562e:	4811      	ldr	r0, [pc, #68]	; (8015674 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8015630:	f7ff fdac 	bl	801518c <_ZN8touchgfx22STM32F7InstrumentationC1Ev>
static LCD16bpp display;
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	2b00      	cmp	r3, #0
 8015638:	d113      	bne.n	8015662 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 801563a:	683b      	ldr	r3, [r7, #0]
 801563c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015640:	4293      	cmp	r3, r2
 8015642:	d10e      	bne.n	8015662 <_Z41__static_initialization_and_destruction_0ii+0x5a>
 8015644:	480c      	ldr	r0, [pc, #48]	; (8015678 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8015646:	f7ff fd1d 	bl	8015084 <_ZN8touchgfx8LCD16bppD1Ev>
STM32F7Instrumentation mcuInstr;
 801564a:	480a      	ldr	r0, [pc, #40]	; (8015674 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 801564c:	f7ff ff98 	bl	8015580 <_ZN8touchgfx22STM32F7InstrumentationD1Ev>
STM32F7TouchController tc;
 8015650:	4807      	ldr	r0, [pc, #28]	; (8015670 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8015652:	f7ff ffb7 	bl	80155c4 <_ZN8touchgfx22STM32F7TouchControllerD1Ev>
STM32F7DMA dma;
 8015656:	4805      	ldr	r0, [pc, #20]	; (801566c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 8015658:	f000 fdf2 	bl	8016240 <_ZN10STM32F7DMAD1Ev>
static ApplicationFontProvider fontProvider;
 801565c:	4807      	ldr	r0, [pc, #28]	; (801567c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 801565e:	f000 f831 	bl	80156c4 <_ZN23ApplicationFontProviderD1Ev>
}
 8015662:	bf00      	nop
 8015664:	3708      	adds	r7, #8
 8015666:	46bd      	mov	sp, r7
 8015668:	bd80      	pop	{r7, pc}
 801566a:	bf00      	nop
 801566c:	2000872c 	.word	0x2000872c
 8015670:	200091cc 	.word	0x200091cc
 8015674:	200091d0 	.word	0x200091d0
 8015678:	20000068 	.word	0x20000068
 801567c:	20000060 	.word	0x20000060

08015680 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8015680:	b580      	push	{r7, lr}
 8015682:	b082      	sub	sp, #8
 8015684:	af00      	add	r7, sp, #0
 8015686:	6078      	str	r0, [r7, #4]
 8015688:	4a05      	ldr	r2, [pc, #20]	; (80156a0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 801568a:	687b      	ldr	r3, [r7, #4]
 801568c:	601a      	str	r2, [r3, #0]
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	4618      	mov	r0, r3
 8015692:	f7ff fb2f 	bl	8014cf4 <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8015696:	687b      	ldr	r3, [r7, #4]
 8015698:	4618      	mov	r0, r3
 801569a:	3708      	adds	r7, #8
 801569c:	46bd      	mov	sp, r7
 801569e:	bd80      	pop	{r7, pc}
 80156a0:	08024fbc 	.word	0x08024fbc

080156a4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 80156a4:	b580      	push	{r7, lr}
 80156a6:	b082      	sub	sp, #8
 80156a8:	af00      	add	r7, sp, #0
 80156aa:	6078      	str	r0, [r7, #4]
 80156ac:	6878      	ldr	r0, [r7, #4]
 80156ae:	f7ff ffe7 	bl	8015680 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 80156b2:	2110      	movs	r1, #16
 80156b4:	6878      	ldr	r0, [r7, #4]
 80156b6:	f00c ff69 	bl	802258c <_ZdlPvj>
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	4618      	mov	r0, r3
 80156be:	3708      	adds	r7, #8
 80156c0:	46bd      	mov	sp, r7
 80156c2:	bd80      	pop	{r7, pc}

080156c4 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId DEFAULT = 0;
    static const touchgfx::FontId LARGE = 1;
    static const touchgfx::FontId SMALL = 2;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 80156c4:	b580      	push	{r7, lr}
 80156c6:	b082      	sub	sp, #8
 80156c8:	af00      	add	r7, sp, #0
 80156ca:	6078      	str	r0, [r7, #4]
 80156cc:	4a05      	ldr	r2, [pc, #20]	; (80156e4 <_ZN23ApplicationFontProviderD1Ev+0x20>)
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	601a      	str	r2, [r3, #0]
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	4618      	mov	r0, r3
 80156d6:	f7ff fa77 	bl	8014bc8 <_ZN8touchgfx12FontProviderD1Ev>
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	4618      	mov	r0, r3
 80156de:	3708      	adds	r7, #8
 80156e0:	46bd      	mov	sp, r7
 80156e2:	bd80      	pop	{r7, pc}
 80156e4:	08025254 	.word	0x08025254

080156e8 <_ZN23ApplicationFontProviderD0Ev>:
 80156e8:	b580      	push	{r7, lr}
 80156ea:	b082      	sub	sp, #8
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	6078      	str	r0, [r7, #4]
 80156f0:	6878      	ldr	r0, [r7, #4]
 80156f2:	f7ff ffe7 	bl	80156c4 <_ZN23ApplicationFontProviderD1Ev>
 80156f6:	2104      	movs	r1, #4
 80156f8:	6878      	ldr	r0, [r7, #4]
 80156fa:	f00c ff47 	bl	802258c <_ZdlPvj>
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	4618      	mov	r0, r3
 8015702:	3708      	adds	r7, #8
 8015704:	46bd      	mov	sp, r7
 8015706:	bd80      	pop	{r7, pc}

08015708 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8015708:	b480      	push	{r7}
 801570a:	b083      	sub	sp, #12
 801570c:	af00      	add	r7, sp, #0
 801570e:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8015710:	2301      	movs	r3, #1
    }
 8015712:	4618      	mov	r0, r3
 8015714:	370c      	adds	r7, #12
 8015716:	46bd      	mov	sp, r7
 8015718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801571c:	4770      	bx	lr

0801571e <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 801571e:	b480      	push	{r7}
 8015720:	b083      	sub	sp, #12
 8015722:	af00      	add	r7, sp, #0
 8015724:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 8015726:	2358      	movs	r3, #88	; 0x58
    }
 8015728:	4618      	mov	r0, r3
 801572a:	370c      	adds	r7, #12
 801572c:	46bd      	mov	sp, r7
 801572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015732:	4770      	bx	lr

08015734 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 8015734:	b480      	push	{r7}
 8015736:	b083      	sub	sp, #12
 8015738:	af00      	add	r7, sp, #0
 801573a:	6078      	str	r0, [r7, #4]
 801573c:	460b      	mov	r3, r1
 801573e:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8015740:	887b      	ldrh	r3, [r7, #2]
 8015742:	2258      	movs	r2, #88	; 0x58
 8015744:	fb02 f303 	mul.w	r3, r2, r3
 8015748:	3308      	adds	r3, #8
 801574a:	687a      	ldr	r2, [r7, #4]
 801574c:	4413      	add	r3, r2
    }
 801574e:	4618      	mov	r0, r3
 8015750:	370c      	adds	r7, #12
 8015752:	46bd      	mov	sp, r7
 8015754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015758:	4770      	bx	lr

0801575a <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 801575a:	b480      	push	{r7}
 801575c:	b083      	sub	sp, #12
 801575e:	af00      	add	r7, sp, #0
 8015760:	6078      	str	r0, [r7, #4]
 8015762:	460b      	mov	r3, r1
 8015764:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 8015766:	887b      	ldrh	r3, [r7, #2]
 8015768:	2258      	movs	r2, #88	; 0x58
 801576a:	fb02 f303 	mul.w	r3, r2, r3
 801576e:	3308      	adds	r3, #8
 8015770:	687a      	ldr	r2, [r7, #4]
 8015772:	4413      	add	r3, r2
    }
 8015774:	4618      	mov	r0, r3
 8015776:	370c      	adds	r7, #12
 8015778:	46bd      	mov	sp, r7
 801577a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577e:	4770      	bx	lr

08015780 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8015780:	b480      	push	{r7}
 8015782:	b083      	sub	sp, #12
 8015784:	af00      	add	r7, sp, #0
 8015786:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8015788:	2301      	movs	r3, #1
    }
 801578a:	4618      	mov	r0, r3
 801578c:	370c      	adds	r7, #12
 801578e:	46bd      	mov	sp, r7
 8015790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015794:	4770      	bx	lr

08015796 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8015796:	b480      	push	{r7}
 8015798:	b083      	sub	sp, #12
 801579a:	af00      	add	r7, sp, #0
 801579c:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801579e:	f44f 7309 	mov.w	r3, #548	; 0x224
    }
 80157a2:	4618      	mov	r0, r3
 80157a4:	370c      	adds	r7, #12
 80157a6:	46bd      	mov	sp, r7
 80157a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ac:	4770      	bx	lr

080157ae <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80157ae:	b480      	push	{r7}
 80157b0:	b083      	sub	sp, #12
 80157b2:	af00      	add	r7, sp, #0
 80157b4:	6078      	str	r0, [r7, #4]
 80157b6:	460b      	mov	r3, r1
 80157b8:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80157ba:	887b      	ldrh	r3, [r7, #2]
 80157bc:	f44f 7209 	mov.w	r2, #548	; 0x224
 80157c0:	fb02 f303 	mul.w	r3, r2, r3
 80157c4:	3308      	adds	r3, #8
 80157c6:	687a      	ldr	r2, [r7, #4]
 80157c8:	4413      	add	r3, r2
    }
 80157ca:	4618      	mov	r0, r3
 80157cc:	370c      	adds	r7, #12
 80157ce:	46bd      	mov	sp, r7
 80157d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d4:	4770      	bx	lr

080157d6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80157d6:	b480      	push	{r7}
 80157d8:	b083      	sub	sp, #12
 80157da:	af00      	add	r7, sp, #0
 80157dc:	6078      	str	r0, [r7, #4]
 80157de:	460b      	mov	r3, r1
 80157e0:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80157e2:	887b      	ldrh	r3, [r7, #2]
 80157e4:	f44f 7209 	mov.w	r2, #548	; 0x224
 80157e8:	fb02 f303 	mul.w	r3, r2, r3
 80157ec:	3308      	adds	r3, #8
 80157ee:	687a      	ldr	r2, [r7, #4]
 80157f0:	4413      	add	r3, r2
    }
 80157f2:	4618      	mov	r0, r3
 80157f4:	370c      	adds	r7, #12
 80157f6:	46bd      	mov	sp, r7
 80157f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157fc:	4770      	bx	lr

080157fe <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 80157fe:	b480      	push	{r7}
 8015800:	b083      	sub	sp, #12
 8015802:	af00      	add	r7, sp, #0
 8015804:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8015806:	2301      	movs	r3, #1
    }
 8015808:	4618      	mov	r0, r3
 801580a:	370c      	adds	r7, #12
 801580c:	46bd      	mov	sp, r7
 801580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015812:	4770      	bx	lr

08015814 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 8015814:	b480      	push	{r7}
 8015816:	b083      	sub	sp, #12
 8015818:	af00      	add	r7, sp, #0
 801581a:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 801581c:	2310      	movs	r3, #16
    }
 801581e:	4618      	mov	r0, r3
 8015820:	370c      	adds	r7, #12
 8015822:	46bd      	mov	sp, r7
 8015824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015828:	4770      	bx	lr

0801582a <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 801582a:	b480      	push	{r7}
 801582c:	b083      	sub	sp, #12
 801582e:	af00      	add	r7, sp, #0
 8015830:	6078      	str	r0, [r7, #4]
 8015832:	460b      	mov	r3, r1
 8015834:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015836:	887b      	ldrh	r3, [r7, #2]
 8015838:	011b      	lsls	r3, r3, #4
 801583a:	3308      	adds	r3, #8
 801583c:	687a      	ldr	r2, [r7, #4]
 801583e:	4413      	add	r3, r2
    }
 8015840:	4618      	mov	r0, r3
 8015842:	370c      	adds	r7, #12
 8015844:	46bd      	mov	sp, r7
 8015846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801584a:	4770      	bx	lr

0801584c <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801584c:	b480      	push	{r7}
 801584e:	b083      	sub	sp, #12
 8015850:	af00      	add	r7, sp, #0
 8015852:	6078      	str	r0, [r7, #4]
 8015854:	460b      	mov	r3, r1
 8015856:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015858:	887b      	ldrh	r3, [r7, #2]
 801585a:	011b      	lsls	r3, r3, #4
 801585c:	3308      	adds	r3, #8
 801585e:	687a      	ldr	r2, [r7, #4]
 8015860:	4413      	add	r3, r2
    }
 8015862:	4618      	mov	r0, r3
 8015864:	370c      	adds	r7, #12
 8015866:	46bd      	mov	sp, r7
 8015868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801586c:	4770      	bx	lr

0801586e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 801586e:	b580      	push	{r7, lr}
 8015870:	b082      	sub	sp, #8
 8015872:	af00      	add	r7, sp, #0
 8015874:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 8015876:	687b      	ldr	r3, [r7, #4]
 8015878:	685b      	ldr	r3, [r3, #4]
 801587a:	687a      	ldr	r2, [r7, #4]
 801587c:	68d2      	ldr	r2, [r2, #12]
 801587e:	1052      	asrs	r2, r2, #1
 8015880:	1899      	adds	r1, r3, r2
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	68db      	ldr	r3, [r3, #12]
 8015886:	f003 0301 	and.w	r3, r3, #1
 801588a:	2b00      	cmp	r3, #0
 801588c:	d102      	bne.n	8015894 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	689b      	ldr	r3, [r3, #8]
 8015892:	e00a      	b.n	80158aa <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	685b      	ldr	r3, [r3, #4]
 8015898:	687a      	ldr	r2, [r7, #4]
 801589a:	68d2      	ldr	r2, [r2, #12]
 801589c:	1052      	asrs	r2, r2, #1
 801589e:	4413      	add	r3, r2
 80158a0:	681b      	ldr	r3, [r3, #0]
 80158a2:	687a      	ldr	r2, [r7, #4]
 80158a4:	6892      	ldr	r2, [r2, #8]
 80158a6:	4413      	add	r3, r2
 80158a8:	681b      	ldr	r3, [r3, #0]
 80158aa:	4608      	mov	r0, r1
 80158ac:	4798      	blx	r3
    }
 80158ae:	bf00      	nop
 80158b0:	3708      	adds	r7, #8
 80158b2:	46bd      	mov	sp, r7
 80158b4:	bd80      	pop	{r7, pc}

080158b6 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 80158b6:	b480      	push	{r7}
 80158b8:	b083      	sub	sp, #12
 80158ba:	af00      	add	r7, sp, #0
 80158bc:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 80158be:	687b      	ldr	r3, [r7, #4]
 80158c0:	685b      	ldr	r3, [r3, #4]
 80158c2:	2b00      	cmp	r3, #0
 80158c4:	d010      	beq.n	80158e8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	689b      	ldr	r3, [r3, #8]
 80158ca:	2b00      	cmp	r3, #0
 80158cc:	d107      	bne.n	80158de <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	68db      	ldr	r3, [r3, #12]
 80158d2:	f003 0301 	and.w	r3, r3, #1
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d101      	bne.n	80158de <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 80158da:	2301      	movs	r3, #1
 80158dc:	e000      	b.n	80158e0 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 80158de:	2300      	movs	r3, #0
 80158e0:	2b01      	cmp	r3, #1
 80158e2:	d001      	beq.n	80158e8 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 80158e4:	2301      	movs	r3, #1
 80158e6:	e000      	b.n	80158ea <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 80158e8:	2300      	movs	r3, #0
    }
 80158ea:	4618      	mov	r0, r3
 80158ec:	370c      	adds	r7, #12
 80158ee:	46bd      	mov	sp, r7
 80158f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80158f4:	4770      	bx	lr

080158f6 <_GLOBAL__sub_I_LCD_GetXSize>:
 80158f6:	b580      	push	{r7, lr}
 80158f8:	af00      	add	r7, sp, #0
 80158fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80158fe:	2001      	movs	r0, #1
 8015900:	f7ff fe82 	bl	8015608 <_Z41__static_initialization_and_destruction_0ii>
 8015904:	bd80      	pop	{r7, pc}

08015906 <_GLOBAL__sub_D_LCD_GetXSize>:
 8015906:	b580      	push	{r7, lr}
 8015908:	af00      	add	r7, sp, #0
 801590a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801590e:	2000      	movs	r0, #0
 8015910:	f7ff fe7a 	bl	8015608 <_Z41__static_initialization_and_destruction_0ii>
 8015914:	bd80      	pop	{r7, pc}

08015916 <_ZN8touchgfx4GPIO4initEv>:
/* USER CODE END user includes */

using namespace touchgfx;

void GPIO::init()
{
 8015916:	b480      	push	{r7}
 8015918:	af00      	add	r7, sp, #0
}
 801591a:	bf00      	nop
 801591c:	46bd      	mov	sp, r7
 801591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015922:	4770      	bx	lr

08015924 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

void GPIO::set(GPIO_ID id)
{
 8015924:	b480      	push	{r7}
 8015926:	b083      	sub	sp, #12
 8015928:	af00      	add	r7, sp, #0
 801592a:	4603      	mov	r3, r0
 801592c:	71fb      	strb	r3, [r7, #7]
}
 801592e:	bf00      	nop
 8015930:	370c      	adds	r7, #12
 8015932:	46bd      	mov	sp, r7
 8015934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015938:	4770      	bx	lr

0801593a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

void GPIO::clear(GPIO_ID id)
{
 801593a:	b480      	push	{r7}
 801593c:	b083      	sub	sp, #12
 801593e:	af00      	add	r7, sp, #0
 8015940:	4603      	mov	r3, r0
 8015942:	71fb      	strb	r3, [r7, #7]
}
 8015944:	bf00      	nop
 8015946:	370c      	adds	r7, #12
 8015948:	46bd      	mov	sp, r7
 801594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801594e:	4770      	bx	lr

08015950 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

void GPIO::toggle(GPIO_ID id)
{
 8015950:	b480      	push	{r7}
 8015952:	b083      	sub	sp, #12
 8015954:	af00      	add	r7, sp, #0
 8015956:	4603      	mov	r3, r0
 8015958:	71fb      	strb	r3, [r7, #7]
}
 801595a:	bf00      	nop
 801595c:	370c      	adds	r7, #12
 801595e:	46bd      	mov	sp, r7
 8015960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015964:	4770      	bx	lr
	...

08015968 <_Z11MX_LCD_Initv>:
  * @param  LayerIndex : layer Index.
  * @retval None
  */

void MX_LCD_Init(void) 
{ 
 8015968:	b580      	push	{r7, lr}
 801596a:	b08e      	sub	sp, #56	; 0x38
 801596c:	af00      	add	r7, sp, #0
 LTDC_LayerCfgTypeDef pLayerCfg;

/* De-Initialize LTDC */
  HAL_LTDC_DeInit(&hltdc);
 801596e:	4844      	ldr	r0, [pc, #272]	; (8015a80 <_Z11MX_LCD_Initv+0x118>)
 8015970:	f7ef fcb2 	bl	80052d8 <HAL_LTDC_DeInit>
/* Configure LTDC */

  hltdc.Instance = LTDC;
 8015974:	4b42      	ldr	r3, [pc, #264]	; (8015a80 <_Z11MX_LCD_Initv+0x118>)
 8015976:	4a43      	ldr	r2, [pc, #268]	; (8015a84 <_Z11MX_LCD_Initv+0x11c>)
 8015978:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 801597a:	4b41      	ldr	r3, [pc, #260]	; (8015a80 <_Z11MX_LCD_Initv+0x118>)
 801597c:	2200      	movs	r2, #0
 801597e:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8015980:	4b3f      	ldr	r3, [pc, #252]	; (8015a80 <_Z11MX_LCD_Initv+0x118>)
 8015982:	2200      	movs	r2, #0
 8015984:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8015986:	4b3e      	ldr	r3, [pc, #248]	; (8015a80 <_Z11MX_LCD_Initv+0x118>)
 8015988:	2200      	movs	r2, #0
 801598a:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 801598c:	4b3c      	ldr	r3, [pc, #240]	; (8015a80 <_Z11MX_LCD_Initv+0x118>)
 801598e:	2200      	movs	r2, #0
 8015990:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8015992:	4b3b      	ldr	r3, [pc, #236]	; (8015a80 <_Z11MX_LCD_Initv+0x118>)
 8015994:	2228      	movs	r2, #40	; 0x28
 8015996:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8015998:	4b39      	ldr	r3, [pc, #228]	; (8015a80 <_Z11MX_LCD_Initv+0x118>)
 801599a:	2209      	movs	r2, #9
 801599c:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 801599e:	4b38      	ldr	r3, [pc, #224]	; (8015a80 <_Z11MX_LCD_Initv+0x118>)
 80159a0:	2235      	movs	r2, #53	; 0x35
 80159a2:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80159a4:	4b36      	ldr	r3, [pc, #216]	; (8015a80 <_Z11MX_LCD_Initv+0x118>)
 80159a6:	220b      	movs	r2, #11
 80159a8:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80159aa:	4b35      	ldr	r3, [pc, #212]	; (8015a80 <_Z11MX_LCD_Initv+0x118>)
 80159ac:	f240 2215 	movw	r2, #533	; 0x215
 80159b0:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80159b2:	4b33      	ldr	r3, [pc, #204]	; (8015a80 <_Z11MX_LCD_Initv+0x118>)
 80159b4:	f240 121b 	movw	r2, #283	; 0x11b
 80159b8:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80159ba:	4b31      	ldr	r3, [pc, #196]	; (8015a80 <_Z11MX_LCD_Initv+0x118>)
 80159bc:	f240 2235 	movw	r2, #565	; 0x235
 80159c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80159c2:	4b2f      	ldr	r3, [pc, #188]	; (8015a80 <_Z11MX_LCD_Initv+0x118>)
 80159c4:	f240 121d 	movw	r2, #285	; 0x11d
 80159c8:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80159ca:	4b2d      	ldr	r3, [pc, #180]	; (8015a80 <_Z11MX_LCD_Initv+0x118>)
 80159cc:	2200      	movs	r2, #0
 80159ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80159d2:	4b2b      	ldr	r3, [pc, #172]	; (8015a80 <_Z11MX_LCD_Initv+0x118>)
 80159d4:	2200      	movs	r2, #0
 80159d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80159da:	4b29      	ldr	r3, [pc, #164]	; (8015a80 <_Z11MX_LCD_Initv+0x118>)
 80159dc:	2200      	movs	r2, #0
 80159de:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80159e2:	4827      	ldr	r0, [pc, #156]	; (8015a80 <_Z11MX_LCD_Initv+0x118>)
 80159e4:	f7ef fba8 	bl	8005138 <HAL_LTDC_Init>
 80159e8:	4603      	mov	r3, r0
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	bf14      	ite	ne
 80159ee:	2301      	movne	r3, #1
 80159f0:	2300      	moveq	r3, #0
 80159f2:	b2db      	uxtb	r3, r3
 80159f4:	2b00      	cmp	r3, #0
 80159f6:	d001      	beq.n	80159fc <_Z11MX_LCD_Initv+0x94>
  {
    Error_Handler( );
 80159f8:	f002 fda6 	bl	8018548 <Error_Handler>
  }

  pLayerCfg.WindowX0 = 0;
 80159fc:	2300      	movs	r3, #0
 80159fe:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8015a00:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8015a04:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8015a06:	2300      	movs	r3, #0
 8015a08:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8015a0a:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015a0e:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8015a10:	2302      	movs	r3, #2
 8015a12:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8015a14:	23ff      	movs	r3, #255	; 0xff
 8015a16:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8015a18:	2300      	movs	r3, #0
 8015a1a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8015a1c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8015a20:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8015a22:	2307      	movs	r3, #7
 8015a24:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8015a26:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8015a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8015a2c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8015a30:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8015a32:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015a36:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8015a38:	2300      	movs	r3, #0
 8015a3a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8015a3e:	2300      	movs	r3, #0
 8015a40:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8015a44:	2300      	movs	r3, #0
 8015a46:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8015a4a:	1d3b      	adds	r3, r7, #4
 8015a4c:	2200      	movs	r2, #0
 8015a4e:	4619      	mov	r1, r3
 8015a50:	480b      	ldr	r0, [pc, #44]	; (8015a80 <_Z11MX_LCD_Initv+0x118>)
 8015a52:	f7ef fd11 	bl	8005478 <HAL_LTDC_ConfigLayer>
 8015a56:	4603      	mov	r3, r0
 8015a58:	2b00      	cmp	r3, #0
 8015a5a:	bf14      	ite	ne
 8015a5c:	2301      	movne	r3, #1
 8015a5e:	2300      	moveq	r3, #0
 8015a60:	b2db      	uxtb	r3, r3
 8015a62:	2b00      	cmp	r3, #0
 8015a64:	d001      	beq.n	8015a6a <_Z11MX_LCD_Initv+0x102>
  {
    Error_Handler( );
 8015a66:	f002 fd6f 	bl	8018548 <Error_Handler>
  }

 HAL_LTDC_SetPitch(&hltdc, 480, 0);
 8015a6a:	2200      	movs	r2, #0
 8015a6c:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 8015a70:	4803      	ldr	r0, [pc, #12]	; (8015a80 <_Z11MX_LCD_Initv+0x118>)
 8015a72:	f7ef fd3f 	bl	80054f4 <HAL_LTDC_SetPitch>

}
 8015a76:	bf00      	nop
 8015a78:	3738      	adds	r7, #56	; 0x38
 8015a7a:	46bd      	mov	sp, r7
 8015a7c:	bd80      	pop	{r7, pc}
 8015a7e:	bf00      	nop
 8015a80:	2000924c 	.word	0x2000924c
 8015a84:	40016800 	.word	0x40016800

08015a88 <_Z11MX_FMC_Initv>:

/**
  * @brief  Initializes LCD IO.
  */ 
void MX_FMC_Init(void) 
{  
 8015a88:	b580      	push	{r7, lr}
 8015a8a:	b088      	sub	sp, #32
 8015a8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8015a8e:	1d3b      	adds	r3, r7, #4
 8015a90:	2200      	movs	r2, #0
 8015a92:	601a      	str	r2, [r3, #0]
 8015a94:	605a      	str	r2, [r3, #4]
 8015a96:	609a      	str	r2, [r3, #8]
 8015a98:	60da      	str	r2, [r3, #12]
 8015a9a:	611a      	str	r2, [r3, #16]
 8015a9c:	615a      	str	r2, [r3, #20]
 8015a9e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8015aa0:	4b22      	ldr	r3, [pc, #136]	; (8015b2c <_Z11MX_FMC_Initv+0xa4>)
 8015aa2:	4a23      	ldr	r2, [pc, #140]	; (8015b30 <_Z11MX_FMC_Initv+0xa8>)
 8015aa4:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8015aa6:	4b21      	ldr	r3, [pc, #132]	; (8015b2c <_Z11MX_FMC_Initv+0xa4>)
 8015aa8:	2200      	movs	r2, #0
 8015aaa:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8015aac:	4b1f      	ldr	r3, [pc, #124]	; (8015b2c <_Z11MX_FMC_Initv+0xa4>)
 8015aae:	2200      	movs	r2, #0
 8015ab0:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8015ab2:	4b1e      	ldr	r3, [pc, #120]	; (8015b2c <_Z11MX_FMC_Initv+0xa4>)
 8015ab4:	2204      	movs	r2, #4
 8015ab6:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8015ab8:	4b1c      	ldr	r3, [pc, #112]	; (8015b2c <_Z11MX_FMC_Initv+0xa4>)
 8015aba:	2210      	movs	r2, #16
 8015abc:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8015abe:	4b1b      	ldr	r3, [pc, #108]	; (8015b2c <_Z11MX_FMC_Initv+0xa4>)
 8015ac0:	2240      	movs	r2, #64	; 0x40
 8015ac2:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8015ac4:	4b19      	ldr	r3, [pc, #100]	; (8015b2c <_Z11MX_FMC_Initv+0xa4>)
 8015ac6:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8015aca:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8015acc:	4b17      	ldr	r3, [pc, #92]	; (8015b2c <_Z11MX_FMC_Initv+0xa4>)
 8015ace:	2200      	movs	r2, #0
 8015ad0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8015ad2:	4b16      	ldr	r3, [pc, #88]	; (8015b2c <_Z11MX_FMC_Initv+0xa4>)
 8015ad4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015ad8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8015ada:	4b14      	ldr	r3, [pc, #80]	; (8015b2c <_Z11MX_FMC_Initv+0xa4>)
 8015adc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015ae0:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8015ae2:	4b12      	ldr	r3, [pc, #72]	; (8015b2c <_Z11MX_FMC_Initv+0xa4>)
 8015ae4:	2200      	movs	r2, #0
 8015ae6:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8015ae8:	2302      	movs	r3, #2
 8015aea:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8015aec:	2307      	movs	r3, #7
 8015aee:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8015af0:	2304      	movs	r3, #4
 8015af2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8015af4:	2307      	movs	r3, #7
 8015af6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8015af8:	2303      	movs	r3, #3
 8015afa:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8015afc:	2302      	movs	r3, #2
 8015afe:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8015b00:	2302      	movs	r3, #2
 8015b02:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8015b04:	1d3b      	adds	r3, r7, #4
 8015b06:	4619      	mov	r1, r3
 8015b08:	4808      	ldr	r0, [pc, #32]	; (8015b2c <_Z11MX_FMC_Initv+0xa4>)
 8015b0a:	f7f3 f84e 	bl	8008baa <HAL_SDRAM_Init>
 8015b0e:	4603      	mov	r3, r0
 8015b10:	2b00      	cmp	r3, #0
 8015b12:	bf14      	ite	ne
 8015b14:	2301      	movne	r3, #1
 8015b16:	2300      	moveq	r3, #0
 8015b18:	b2db      	uxtb	r3, r3
 8015b1a:	2b00      	cmp	r3, #0
 8015b1c:	d001      	beq.n	8015b22 <_Z11MX_FMC_Initv+0x9a>
  {
    Error_Handler( );
 8015b1e:	f002 fd13 	bl	8018548 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8015b22:	bf00      	nop
 8015b24:	3720      	adds	r7, #32
 8015b26:	46bd      	mov	sp, r7
 8015b28:	bd80      	pop	{r7, pc}
 8015b2a:	bf00      	nop
 8015b2c:	20009334 	.word	0x20009334
 8015b30:	a0000140 	.word	0xa0000140

08015b34 <_Z15MX_SDRAM_InitExv>:
/**
  * @brief  Programs the SDRAM device.
  * @retval None
  */
void MX_SDRAM_InitEx(void)
{
 8015b34:	b580      	push	{r7, lr}
 8015b36:	b082      	sub	sp, #8
 8015b38:	af00      	add	r7, sp, #0
  __IO uint32_t tmpmrd = 0;
 8015b3a:	2300      	movs	r3, #0
 8015b3c:	607b      	str	r3, [r7, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8015b3e:	4b2b      	ldr	r3, [pc, #172]	; (8015bec <_Z15MX_SDRAM_InitExv+0xb8>)
 8015b40:	2201      	movs	r2, #1
 8015b42:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 8015b44:	4b29      	ldr	r3, [pc, #164]	; (8015bec <_Z15MX_SDRAM_InitExv+0xb8>)
 8015b46:	2210      	movs	r2, #16
 8015b48:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8015b4a:	4b28      	ldr	r3, [pc, #160]	; (8015bec <_Z15MX_SDRAM_InitExv+0xb8>)
 8015b4c:	2201      	movs	r2, #1
 8015b4e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8015b50:	4b26      	ldr	r3, [pc, #152]	; (8015bec <_Z15MX_SDRAM_InitExv+0xb8>)
 8015b52:	2200      	movs	r2, #0
 8015b54:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8015b56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015b5a:	4924      	ldr	r1, [pc, #144]	; (8015bec <_Z15MX_SDRAM_InitExv+0xb8>)
 8015b5c:	4824      	ldr	r0, [pc, #144]	; (8015bf0 <_Z15MX_SDRAM_InitExv+0xbc>)
 8015b5e:	f7f3 f858 	bl	8008c12 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8015b62:	2001      	movs	r0, #1
 8015b64:	f7ea fff0 	bl	8000b48 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8015b68:	4b20      	ldr	r3, [pc, #128]	; (8015bec <_Z15MX_SDRAM_InitExv+0xb8>)
 8015b6a:	2202      	movs	r2, #2
 8015b6c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8015b6e:	4b1f      	ldr	r3, [pc, #124]	; (8015bec <_Z15MX_SDRAM_InitExv+0xb8>)
 8015b70:	2210      	movs	r2, #16
 8015b72:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8015b74:	4b1d      	ldr	r3, [pc, #116]	; (8015bec <_Z15MX_SDRAM_InitExv+0xb8>)
 8015b76:	2201      	movs	r2, #1
 8015b78:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8015b7a:	4b1c      	ldr	r3, [pc, #112]	; (8015bec <_Z15MX_SDRAM_InitExv+0xb8>)
 8015b7c:	2200      	movs	r2, #0
 8015b7e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);  
 8015b80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015b84:	4919      	ldr	r1, [pc, #100]	; (8015bec <_Z15MX_SDRAM_InitExv+0xb8>)
 8015b86:	481a      	ldr	r0, [pc, #104]	; (8015bf0 <_Z15MX_SDRAM_InitExv+0xbc>)
 8015b88:	f7f3 f843 	bl	8008c12 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8015b8c:	4b17      	ldr	r3, [pc, #92]	; (8015bec <_Z15MX_SDRAM_InitExv+0xb8>)
 8015b8e:	2203      	movs	r2, #3
 8015b90:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8015b92:	4b16      	ldr	r3, [pc, #88]	; (8015bec <_Z15MX_SDRAM_InitExv+0xb8>)
 8015b94:	2210      	movs	r2, #16
 8015b96:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8015b98:	4b14      	ldr	r3, [pc, #80]	; (8015bec <_Z15MX_SDRAM_InitExv+0xb8>)
 8015b9a:	2208      	movs	r2, #8
 8015b9c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8015b9e:	4b13      	ldr	r3, [pc, #76]	; (8015bec <_Z15MX_SDRAM_InitExv+0xb8>)
 8015ba0:	2200      	movs	r2, #0
 8015ba2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8015ba4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015ba8:	4910      	ldr	r1, [pc, #64]	; (8015bec <_Z15MX_SDRAM_InitExv+0xb8>)
 8015baa:	4811      	ldr	r0, [pc, #68]	; (8015bf0 <_Z15MX_SDRAM_InitExv+0xbc>)
 8015bac:	f7f3 f831 	bl	8008c12 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8015bb0:	f44f 730c 	mov.w	r3, #560	; 0x230
 8015bb4:	607b      	str	r3, [r7, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8015bb6:	4b0d      	ldr	r3, [pc, #52]	; (8015bec <_Z15MX_SDRAM_InitExv+0xb8>)
 8015bb8:	2204      	movs	r2, #4
 8015bba:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8015bbc:	4b0b      	ldr	r3, [pc, #44]	; (8015bec <_Z15MX_SDRAM_InitExv+0xb8>)
 8015bbe:	2210      	movs	r2, #16
 8015bc0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8015bc2:	4b0a      	ldr	r3, [pc, #40]	; (8015bec <_Z15MX_SDRAM_InitExv+0xb8>)
 8015bc4:	2201      	movs	r2, #1
 8015bc6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	4a08      	ldr	r2, [pc, #32]	; (8015bec <_Z15MX_SDRAM_InitExv+0xb8>)
 8015bcc:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8015bce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015bd2:	4906      	ldr	r1, [pc, #24]	; (8015bec <_Z15MX_SDRAM_InitExv+0xb8>)
 8015bd4:	4806      	ldr	r0, [pc, #24]	; (8015bf0 <_Z15MX_SDRAM_InitExv+0xbc>)
 8015bd6:	f7f3 f81c 	bl	8008c12 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT); 
 8015bda:	f240 6173 	movw	r1, #1651	; 0x673
 8015bde:	4804      	ldr	r0, [pc, #16]	; (8015bf0 <_Z15MX_SDRAM_InitExv+0xbc>)
 8015be0:	f7f3 f842 	bl	8008c68 <HAL_SDRAM_ProgramRefreshRate>
}
 8015be4:	bf00      	nop
 8015be6:	3708      	adds	r7, #8
 8015be8:	46bd      	mov	sp, r7
 8015bea:	bd80      	pop	{r7, pc}
 8015bec:	20009368 	.word	0x20009368
 8015bf0:	20009334 	.word	0x20009334

08015bf4 <HAL_LTDC_MspInit>:
}

/*  MSPInit/deInit Implementation */

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8015bf4:	b580      	push	{r7, lr}
 8015bf6:	b08e      	sub	sp, #56	; 0x38
 8015bf8:	af00      	add	r7, sp, #0
 8015bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015bfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015c00:	2200      	movs	r2, #0
 8015c02:	601a      	str	r2, [r3, #0]
 8015c04:	605a      	str	r2, [r3, #4]
 8015c06:	609a      	str	r2, [r3, #8]
 8015c08:	60da      	str	r2, [r3, #12]
 8015c0a:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	681b      	ldr	r3, [r3, #0]
 8015c10:	4a55      	ldr	r2, [pc, #340]	; (8015d68 <HAL_LTDC_MspInit+0x174>)
 8015c12:	4293      	cmp	r3, r2
 8015c14:	f040 80a3 	bne.w	8015d5e <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8015c18:	4b54      	ldr	r3, [pc, #336]	; (8015d6c <HAL_LTDC_MspInit+0x178>)
 8015c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c1c:	4a53      	ldr	r2, [pc, #332]	; (8015d6c <HAL_LTDC_MspInit+0x178>)
 8015c1e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8015c22:	6453      	str	r3, [r2, #68]	; 0x44
 8015c24:	4b51      	ldr	r3, [pc, #324]	; (8015d6c <HAL_LTDC_MspInit+0x178>)
 8015c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c28:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8015c2c:	623b      	str	r3, [r7, #32]
 8015c2e:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8015c30:	4b4e      	ldr	r3, [pc, #312]	; (8015d6c <HAL_LTDC_MspInit+0x178>)
 8015c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c34:	4a4d      	ldr	r2, [pc, #308]	; (8015d6c <HAL_LTDC_MspInit+0x178>)
 8015c36:	f043 0310 	orr.w	r3, r3, #16
 8015c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8015c3c:	4b4b      	ldr	r3, [pc, #300]	; (8015d6c <HAL_LTDC_MspInit+0x178>)
 8015c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c40:	f003 0310 	and.w	r3, r3, #16
 8015c44:	61fb      	str	r3, [r7, #28]
 8015c46:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8015c48:	4b48      	ldr	r3, [pc, #288]	; (8015d6c <HAL_LTDC_MspInit+0x178>)
 8015c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c4c:	4a47      	ldr	r2, [pc, #284]	; (8015d6c <HAL_LTDC_MspInit+0x178>)
 8015c4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015c52:	6313      	str	r3, [r2, #48]	; 0x30
 8015c54:	4b45      	ldr	r3, [pc, #276]	; (8015d6c <HAL_LTDC_MspInit+0x178>)
 8015c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015c5c:	61bb      	str	r3, [r7, #24]
 8015c5e:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8015c60:	4b42      	ldr	r3, [pc, #264]	; (8015d6c <HAL_LTDC_MspInit+0x178>)
 8015c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c64:	4a41      	ldr	r2, [pc, #260]	; (8015d6c <HAL_LTDC_MspInit+0x178>)
 8015c66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8015c6a:	6313      	str	r3, [r2, #48]	; 0x30
 8015c6c:	4b3f      	ldr	r3, [pc, #252]	; (8015d6c <HAL_LTDC_MspInit+0x178>)
 8015c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015c74:	617b      	str	r3, [r7, #20]
 8015c76:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8015c78:	4b3c      	ldr	r3, [pc, #240]	; (8015d6c <HAL_LTDC_MspInit+0x178>)
 8015c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c7c:	4a3b      	ldr	r2, [pc, #236]	; (8015d6c <HAL_LTDC_MspInit+0x178>)
 8015c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015c82:	6313      	str	r3, [r2, #48]	; 0x30
 8015c84:	4b39      	ldr	r3, [pc, #228]	; (8015d6c <HAL_LTDC_MspInit+0x178>)
 8015c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015c8c:	613b      	str	r3, [r7, #16]
 8015c8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8015c90:	4b36      	ldr	r3, [pc, #216]	; (8015d6c <HAL_LTDC_MspInit+0x178>)
 8015c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015c94:	4a35      	ldr	r2, [pc, #212]	; (8015d6c <HAL_LTDC_MspInit+0x178>)
 8015c96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015c9a:	6313      	str	r3, [r2, #48]	; 0x30
 8015c9c:	4b33      	ldr	r3, [pc, #204]	; (8015d6c <HAL_LTDC_MspInit+0x178>)
 8015c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015ca4:	60fb      	str	r3, [r7, #12]
 8015ca6:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8015ca8:	2310      	movs	r3, #16
 8015caa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015cac:	2302      	movs	r3, #2
 8015cae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015cb0:	2300      	movs	r3, #0
 8015cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015cb4:	2300      	movs	r3, #0
 8015cb6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8015cb8:	230e      	movs	r3, #14
 8015cba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8015cbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015cc0:	4619      	mov	r1, r3
 8015cc2:	482b      	ldr	r0, [pc, #172]	; (8015d70 <HAL_LTDC_MspInit+0x17c>)
 8015cc4:	f7ec fd42 	bl	800274c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8015cc8:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8015ccc:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015cce:	2302      	movs	r3, #2
 8015cd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015cd2:	2300      	movs	r3, #0
 8015cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015cd6:	2300      	movs	r3, #0
 8015cd8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8015cda:	230e      	movs	r3, #14
 8015cdc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8015cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015ce2:	4619      	mov	r1, r3
 8015ce4:	4823      	ldr	r0, [pc, #140]	; (8015d74 <HAL_LTDC_MspInit+0x180>)
 8015ce6:	f7ec fd31 	bl	800274c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8015cea:	23f7      	movs	r3, #247	; 0xf7
 8015cec:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015cee:	2302      	movs	r3, #2
 8015cf0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015cf2:	2300      	movs	r3, #0
 8015cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015cf6:	2300      	movs	r3, #0
 8015cf8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8015cfa:	230e      	movs	r3, #14
 8015cfc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8015cfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015d02:	4619      	mov	r1, r3
 8015d04:	481c      	ldr	r0, [pc, #112]	; (8015d78 <HAL_LTDC_MspInit+0x184>)
 8015d06:	f7ec fd21 	bl	800274c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8015d0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015d0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015d10:	2302      	movs	r3, #2
 8015d12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015d14:	2300      	movs	r3, #0
 8015d16:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015d18:	2300      	movs	r3, #0
 8015d1a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8015d1c:	2309      	movs	r3, #9
 8015d1e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8015d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015d24:	4619      	mov	r1, r3
 8015d26:	4815      	ldr	r0, [pc, #84]	; (8015d7c <HAL_LTDC_MspInit+0x188>)
 8015d28:	f7ec fd10 	bl	800274c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8015d2c:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8015d30:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015d32:	2302      	movs	r3, #2
 8015d34:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015d36:	2300      	movs	r3, #0
 8015d38:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015d3a:	2300      	movs	r3, #0
 8015d3c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8015d3e:	230e      	movs	r3, #14
 8015d40:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8015d42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015d46:	4619      	mov	r1, r3
 8015d48:	480d      	ldr	r0, [pc, #52]	; (8015d80 <HAL_LTDC_MspInit+0x18c>)
 8015d4a:	f7ec fcff 	bl	800274c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8015d4e:	2200      	movs	r2, #0
 8015d50:	2105      	movs	r1, #5
 8015d52:	2058      	movs	r0, #88	; 0x58
 8015d54:	f7eb fa6a 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8015d58:	2058      	movs	r0, #88	; 0x58
 8015d5a:	f7eb fa83 	bl	8001264 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8015d5e:	bf00      	nop
 8015d60:	3738      	adds	r7, #56	; 0x38
 8015d62:	46bd      	mov	sp, r7
 8015d64:	bd80      	pop	{r7, pc}
 8015d66:	bf00      	nop
 8015d68:	40016800 	.word	0x40016800
 8015d6c:	40023800 	.word	0x40023800
 8015d70:	40021000 	.word	0x40021000
 8015d74:	40022400 	.word	0x40022400
 8015d78:	40022800 	.word	0x40022800
 8015d7c:	40021800 	.word	0x40021800
 8015d80:	40022000 	.word	0x40022000

08015d84 <HAL_LTDC_MspDeInit>:

void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8015d84:	b580      	push	{r7, lr}
 8015d86:	b082      	sub	sp, #8
 8015d88:	af00      	add	r7, sp, #0
 8015d8a:	6078      	str	r0, [r7, #4]
  if(ltdcHandle->Instance==LTDC)
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	681b      	ldr	r3, [r3, #0]
 8015d90:	4a13      	ldr	r2, [pc, #76]	; (8015de0 <HAL_LTDC_MspDeInit+0x5c>)
 8015d92:	4293      	cmp	r3, r2
 8015d94:	d11f      	bne.n	8015dd6 <HAL_LTDC_MspDeInit+0x52>
  {
  /* USER CODE BEGIN LTDC_MspDeInit 0 */

  /* USER CODE END LTDC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LTDC_CLK_DISABLE();
 8015d96:	4b13      	ldr	r3, [pc, #76]	; (8015de4 <HAL_LTDC_MspDeInit+0x60>)
 8015d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015d9a:	4a12      	ldr	r2, [pc, #72]	; (8015de4 <HAL_LTDC_MspDeInit+0x60>)
 8015d9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015da0:	6453      	str	r3, [r2, #68]	; 0x44
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    HAL_GPIO_DeInit(LCD_B0_GPIO_Port, LCD_B0_Pin);
 8015da2:	2110      	movs	r1, #16
 8015da4:	4810      	ldr	r0, [pc, #64]	; (8015de8 <HAL_LTDC_MspDeInit+0x64>)
 8015da6:	f7ec fe7d 	bl	8002aa4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOJ, LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8015daa:	f64e 71ff 	movw	r1, #61439	; 0xefff
 8015dae:	480f      	ldr	r0, [pc, #60]	; (8015dec <HAL_LTDC_MspDeInit+0x68>)
 8015db0:	f7ec fe78 	bl	8002aa4 <HAL_GPIO_DeInit>
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin);

    HAL_GPIO_DeInit(GPIOK, LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8015db4:	21f7      	movs	r1, #247	; 0xf7
 8015db6:	480e      	ldr	r0, [pc, #56]	; (8015df0 <HAL_LTDC_MspDeInit+0x6c>)
 8015db8:	f7ec fe74 	bl	8002aa4 <HAL_GPIO_DeInit>
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin);

    HAL_GPIO_DeInit(LCD_B4_GPIO_Port, LCD_B4_Pin);
 8015dbc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8015dc0:	480c      	ldr	r0, [pc, #48]	; (8015df4 <HAL_LTDC_MspDeInit+0x70>)
 8015dc2:	f7ec fe6f 	bl	8002aa4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOI, LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin);
 8015dc6:	f44f 4146 	mov.w	r1, #50688	; 0xc600
 8015dca:	480b      	ldr	r0, [pc, #44]	; (8015df8 <HAL_LTDC_MspDeInit+0x74>)
 8015dcc:	f7ec fe6a 	bl	8002aa4 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(LTDC_IRQn);
 8015dd0:	2058      	movs	r0, #88	; 0x58
 8015dd2:	f7eb fa55 	bl	8001280 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN LTDC_MspDeInit 1 */

  /* USER CODE END LTDC_MspDeInit 1 */
  }
}
 8015dd6:	bf00      	nop
 8015dd8:	3708      	adds	r7, #8
 8015dda:	46bd      	mov	sp, r7
 8015ddc:	bd80      	pop	{r7, pc}
 8015dde:	bf00      	nop
 8015de0:	40016800 	.word	0x40016800
 8015de4:	40023800 	.word	0x40023800
 8015de8:	40021000 	.word	0x40021000
 8015dec:	40022400 	.word	0x40022400
 8015df0:	40022800 	.word	0x40022800
 8015df4:	40021800 	.word	0x40021800
 8015df8:	40022000 	.word	0x40022000

08015dfc <_ZL15HAL_FMC_MspInitv>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8015dfc:	b580      	push	{r7, lr}
 8015dfe:	b086      	sub	sp, #24
 8015e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8015e02:	1d3b      	adds	r3, r7, #4
 8015e04:	2200      	movs	r2, #0
 8015e06:	601a      	str	r2, [r3, #0]
 8015e08:	605a      	str	r2, [r3, #4]
 8015e0a:	609a      	str	r2, [r3, #8]
 8015e0c:	60da      	str	r2, [r3, #12]
 8015e0e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8015e10:	4b3a      	ldr	r3, [pc, #232]	; (8015efc <_ZL15HAL_FMC_MspInitv+0x100>)
 8015e12:	681b      	ldr	r3, [r3, #0]
 8015e14:	2b00      	cmp	r3, #0
 8015e16:	d16d      	bne.n	8015ef4 <_ZL15HAL_FMC_MspInitv+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8015e18:	4b38      	ldr	r3, [pc, #224]	; (8015efc <_ZL15HAL_FMC_MspInitv+0x100>)
 8015e1a:	2201      	movs	r2, #1
 8015e1c:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8015e1e:	4b38      	ldr	r3, [pc, #224]	; (8015f00 <_ZL15HAL_FMC_MspInitv+0x104>)
 8015e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e22:	4a37      	ldr	r2, [pc, #220]	; (8015f00 <_ZL15HAL_FMC_MspInitv+0x104>)
 8015e24:	f043 0301 	orr.w	r3, r3, #1
 8015e28:	6393      	str	r3, [r2, #56]	; 0x38
 8015e2a:	4b35      	ldr	r3, [pc, #212]	; (8015f00 <_ZL15HAL_FMC_MspInitv+0x104>)
 8015e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015e2e:	f003 0301 	and.w	r3, r3, #1
 8015e32:	603b      	str	r3, [r7, #0]
 8015e34:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8015e36:	f64f 7383 	movw	r3, #65411	; 0xff83
 8015e3a:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015e3c:	2302      	movs	r3, #2
 8015e3e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015e40:	2300      	movs	r3, #0
 8015e42:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015e44:	2303      	movs	r3, #3
 8015e46:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8015e48:	230c      	movs	r3, #12
 8015e4a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8015e4c:	1d3b      	adds	r3, r7, #4
 8015e4e:	4619      	mov	r1, r3
 8015e50:	482c      	ldr	r0, [pc, #176]	; (8015f04 <_ZL15HAL_FMC_MspInitv+0x108>)
 8015e52:	f7ec fc7b 	bl	800274c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8015e56:	f248 1333 	movw	r3, #33075	; 0x8133
 8015e5a:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015e5c:	2302      	movs	r3, #2
 8015e5e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015e60:	2300      	movs	r3, #0
 8015e62:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015e64:	2303      	movs	r3, #3
 8015e66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8015e68:	230c      	movs	r3, #12
 8015e6a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8015e6c:	1d3b      	adds	r3, r7, #4
 8015e6e:	4619      	mov	r1, r3
 8015e70:	4825      	ldr	r0, [pc, #148]	; (8015f08 <_ZL15HAL_FMC_MspInitv+0x10c>)
 8015e72:	f7ec fc6b 	bl	800274c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8015e76:	f24c 7303 	movw	r3, #50947	; 0xc703
 8015e7a:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015e7c:	2302      	movs	r3, #2
 8015e7e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015e80:	2300      	movs	r3, #0
 8015e82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015e84:	2303      	movs	r3, #3
 8015e86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8015e88:	230c      	movs	r3, #12
 8015e8a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8015e8c:	1d3b      	adds	r3, r7, #4
 8015e8e:	4619      	mov	r1, r3
 8015e90:	481e      	ldr	r0, [pc, #120]	; (8015f0c <_ZL15HAL_FMC_MspInitv+0x110>)
 8015e92:	f7ec fc5b 	bl	800274c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8015e96:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8015e9a:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015e9c:	2302      	movs	r3, #2
 8015e9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015ea0:	2300      	movs	r3, #0
 8015ea2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015ea4:	2303      	movs	r3, #3
 8015ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8015ea8:	230c      	movs	r3, #12
 8015eaa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8015eac:	1d3b      	adds	r3, r7, #4
 8015eae:	4619      	mov	r1, r3
 8015eb0:	4817      	ldr	r0, [pc, #92]	; (8015f10 <_ZL15HAL_FMC_MspInitv+0x114>)
 8015eb2:	f7ec fc4b 	bl	800274c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8015eb6:	2328      	movs	r3, #40	; 0x28
 8015eb8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015eba:	2302      	movs	r3, #2
 8015ebc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015ebe:	2300      	movs	r3, #0
 8015ec0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015ec2:	2303      	movs	r3, #3
 8015ec4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8015ec6:	230c      	movs	r3, #12
 8015ec8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8015eca:	1d3b      	adds	r3, r7, #4
 8015ecc:	4619      	mov	r1, r3
 8015ece:	4811      	ldr	r0, [pc, #68]	; (8015f14 <_ZL15HAL_FMC_MspInitv+0x118>)
 8015ed0:	f7ec fc3c 	bl	800274c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8015ed4:	2308      	movs	r3, #8
 8015ed6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015ed8:	2302      	movs	r3, #2
 8015eda:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015edc:	2300      	movs	r3, #0
 8015ede:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015ee0:	2303      	movs	r3, #3
 8015ee2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8015ee4:	230c      	movs	r3, #12
 8015ee6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8015ee8:	1d3b      	adds	r3, r7, #4
 8015eea:	4619      	mov	r1, r3
 8015eec:	480a      	ldr	r0, [pc, #40]	; (8015f18 <_ZL15HAL_FMC_MspInitv+0x11c>)
 8015eee:	f7ec fc2d 	bl	800274c <HAL_GPIO_Init>
 8015ef2:	e000      	b.n	8015ef6 <_ZL15HAL_FMC_MspInitv+0xfa>
    return;
 8015ef4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8015ef6:	3718      	adds	r7, #24
 8015ef8:	46bd      	mov	sp, r7
 8015efa:	bd80      	pop	{r7, pc}
 8015efc:	20009378 	.word	0x20009378
 8015f00:	40023800 	.word	0x40023800
 8015f04:	40021000 	.word	0x40021000
 8015f08:	40021800 	.word	0x40021800
 8015f0c:	40020c00 	.word	0x40020c00
 8015f10:	40021400 	.word	0x40021400
 8015f14:	40021c00 	.word	0x40021c00
 8015f18:	40020800 	.word	0x40020800

08015f1c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b082      	sub	sp, #8
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8015f24:	f7ff ff6a 	bl	8015dfc <_ZL15HAL_FMC_MspInitv>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8015f28:	bf00      	nop
 8015f2a:	3708      	adds	r7, #8
 8015f2c:	46bd      	mov	sp, r7
 8015f2e:	bd80      	pop	{r7, pc}

08015f30 <HAL_DMA2D_MspInit>:

  /* USER CODE END SDRAM_MspDeInit 1 */
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8015f30:	b580      	push	{r7, lr}
 8015f32:	b084      	sub	sp, #16
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	6078      	str	r0, [r7, #4]
  if(dma2dHandle->Instance==DMA2D)
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	4a0d      	ldr	r2, [pc, #52]	; (8015f74 <HAL_DMA2D_MspInit+0x44>)
 8015f3e:	4293      	cmp	r3, r2
 8015f40:	d113      	bne.n	8015f6a <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8015f42:	4b0d      	ldr	r3, [pc, #52]	; (8015f78 <HAL_DMA2D_MspInit+0x48>)
 8015f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f46:	4a0c      	ldr	r2, [pc, #48]	; (8015f78 <HAL_DMA2D_MspInit+0x48>)
 8015f48:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8015f4e:	4b0a      	ldr	r3, [pc, #40]	; (8015f78 <HAL_DMA2D_MspInit+0x48>)
 8015f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f52:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015f56:	60fb      	str	r3, [r7, #12]
 8015f58:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	2105      	movs	r1, #5
 8015f5e:	205a      	movs	r0, #90	; 0x5a
 8015f60:	f7eb f964 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8015f64:	205a      	movs	r0, #90	; 0x5a
 8015f66:	f7eb f97d 	bl	8001264 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8015f6a:	bf00      	nop
 8015f6c:	3710      	adds	r7, #16
 8015f6e:	46bd      	mov	sp, r7
 8015f70:	bd80      	pop	{r7, pc}
 8015f72:	bf00      	nop
 8015f74:	4002b000 	.word	0x4002b000
 8015f78:	40023800 	.word	0x40023800

08015f7c <HAL_DMA2D_MspDeInit>:

void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8015f7c:	b580      	push	{r7, lr}
 8015f7e:	b082      	sub	sp, #8
 8015f80:	af00      	add	r7, sp, #0
 8015f82:	6078      	str	r0, [r7, #4]
  if(dma2dHandle->Instance==DMA2D)
 8015f84:	687b      	ldr	r3, [r7, #4]
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	4a07      	ldr	r2, [pc, #28]	; (8015fa8 <HAL_DMA2D_MspDeInit+0x2c>)
 8015f8a:	4293      	cmp	r3, r2
 8015f8c:	d108      	bne.n	8015fa0 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8015f8e:	4b07      	ldr	r3, [pc, #28]	; (8015fac <HAL_DMA2D_MspDeInit+0x30>)
 8015f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015f92:	4a06      	ldr	r2, [pc, #24]	; (8015fac <HAL_DMA2D_MspDeInit+0x30>)
 8015f94:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8015f98:	6313      	str	r3, [r2, #48]	; 0x30

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8015f9a:	205a      	movs	r0, #90	; 0x5a
 8015f9c:	f7eb f970 	bl	8001280 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }
}
 8015fa0:	bf00      	nop
 8015fa2:	3708      	adds	r7, #8
 8015fa4:	46bd      	mov	sp, r7
 8015fa6:	bd80      	pop	{r7, pc}
 8015fa8:	4002b000 	.word	0x4002b000
 8015fac:	40023800 	.word	0x40023800

08015fb0 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 8015fb0:	b480      	push	{r7}
 8015fb2:	b083      	sub	sp, #12
 8015fb4:	af00      	add	r7, sp, #0
 8015fb6:	6078      	str	r0, [r7, #4]
    {
 8015fb8:	4a04      	ldr	r2, [pc, #16]	; (8015fcc <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	601a      	str	r2, [r3, #0]
    }
 8015fbe:	687b      	ldr	r3, [r7, #4]
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	370c      	adds	r7, #12
 8015fc4:	46bd      	mov	sp, r7
 8015fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fca:	4770      	bx	lr
 8015fcc:	0802511c 	.word	0x0802511c

08015fd0 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8015fd0:	b580      	push	{r7, lr}
 8015fd2:	b082      	sub	sp, #8
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	6078      	str	r0, [r7, #4]
    }
 8015fd8:	6878      	ldr	r0, [r7, #4]
 8015fda:	f7ff ffe9 	bl	8015fb0 <_ZN8touchgfx9DMA_QueueD1Ev>
 8015fde:	2104      	movs	r1, #4
 8015fe0:	6878      	ldr	r0, [r7, #4]
 8015fe2:	f00c fad3 	bl	802258c <_ZdlPvj>
 8015fe6:	687b      	ldr	r3, [r7, #4]
 8015fe8:	4618      	mov	r0, r3
 8015fea:	3708      	adds	r7, #8
 8015fec:	46bd      	mov	sp, r7
 8015fee:	bd80      	pop	{r7, pc}

08015ff0 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 8015ff0:	b580      	push	{r7, lr}
 8015ff2:	b082      	sub	sp, #8
 8015ff4:	af00      	add	r7, sp, #0
 8015ff6:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8015ff8:	687b      	ldr	r3, [r7, #4]
 8015ffa:	681b      	ldr	r3, [r3, #0]
 8015ffc:	3340      	adds	r3, #64	; 0x40
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	6878      	ldr	r0, [r7, #4]
 8016002:	4798      	blx	r3
    }
 8016004:	bf00      	nop
 8016006:	3708      	adds	r7, #8
 8016008:	46bd      	mov	sp, r7
 801600a:	bd80      	pop	{r7, pc}

0801600c <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 801600c:	b480      	push	{r7}
 801600e:	b083      	sub	sp, #12
 8016010:	af00      	add	r7, sp, #0
 8016012:	6078      	str	r0, [r7, #4]
    {
 8016014:	4a04      	ldr	r2, [pc, #16]	; (8016028 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	601a      	str	r2, [r3, #0]
    }
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	4618      	mov	r0, r3
 801601e:	370c      	adds	r7, #12
 8016020:	46bd      	mov	sp, r7
 8016022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016026:	4770      	bx	lr
 8016028:	08025e40 	.word	0x08025e40

0801602c <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 801602c:	b580      	push	{r7, lr}
 801602e:	b082      	sub	sp, #8
 8016030:	af00      	add	r7, sp, #0
 8016032:	6078      	str	r0, [r7, #4]
    }
 8016034:	6878      	ldr	r0, [r7, #4]
 8016036:	f7ff ffe9 	bl	801600c <_ZN8touchgfx13DMA_InterfaceD1Ev>
 801603a:	210c      	movs	r1, #12
 801603c:	6878      	ldr	r0, [r7, #4]
 801603e:	f00c faa5 	bl	802258c <_ZdlPvj>
 8016042:	687b      	ldr	r3, [r7, #4]
 8016044:	4618      	mov	r0, r3
 8016046:	3708      	adds	r7, #8
 8016048:	46bd      	mov	sp, r7
 801604a:	bd80      	pop	{r7, pc}

0801604c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 801604c:	b480      	push	{r7}
 801604e:	b083      	sub	sp, #12
 8016050:	af00      	add	r7, sp, #0
 8016052:	6078      	str	r0, [r7, #4]
 8016054:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8016056:	4a09      	ldr	r2, [pc, #36]	; (801607c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	601a      	str	r2, [r3, #0]
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	683a      	ldr	r2, [r7, #0]
 8016060:	605a      	str	r2, [r3, #4]
 8016062:	687b      	ldr	r3, [r7, #4]
 8016064:	2200      	movs	r2, #0
 8016066:	721a      	strb	r2, [r3, #8]
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	2200      	movs	r2, #0
 801606c:	725a      	strb	r2, [r3, #9]
    {
    }
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	4618      	mov	r0, r3
 8016072:	370c      	adds	r7, #12
 8016074:	46bd      	mov	sp, r7
 8016076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801607a:	4770      	bx	lr
 801607c:	08025e40 	.word	0x08025e40

08016080 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8016080:	b580      	push	{r7, lr}
 8016082:	b082      	sub	sp, #8
 8016084:	af00      	add	r7, sp, #0
 8016086:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	685a      	ldr	r2, [r3, #4]
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	685b      	ldr	r3, [r3, #4]
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	3314      	adds	r3, #20
 8016094:	681b      	ldr	r3, [r3, #0]
 8016096:	4610      	mov	r0, r2
 8016098:	4798      	blx	r3
    }
 801609a:	bf00      	nop
 801609c:	3708      	adds	r7, #8
 801609e:	46bd      	mov	sp, r7
 80160a0:	bd80      	pop	{r7, pc}

080160a2 <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 80160a2:	b580      	push	{r7, lr}
 80160a4:	b082      	sub	sp, #8
 80160a6:	af00      	add	r7, sp, #0
 80160a8:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 80160aa:	687a      	ldr	r2, [r7, #4]
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	681b      	ldr	r3, [r3, #0]
 80160b0:	3324      	adds	r3, #36	; 0x24
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	4610      	mov	r0, r2
 80160b6:	4798      	blx	r3
    }
 80160b8:	bf00      	nop
 80160ba:	3708      	adds	r7, #8
 80160bc:	46bd      	mov	sp, r7
 80160be:	bd80      	pop	{r7, pc}

080160c0 <__NVIC_EnableIRQ>:
{
 80160c0:	b480      	push	{r7}
 80160c2:	b083      	sub	sp, #12
 80160c4:	af00      	add	r7, sp, #0
 80160c6:	4603      	mov	r3, r0
 80160c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80160ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	db0b      	blt.n	80160ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80160d2:	79fb      	ldrb	r3, [r7, #7]
 80160d4:	f003 021f 	and.w	r2, r3, #31
 80160d8:	4907      	ldr	r1, [pc, #28]	; (80160f8 <__NVIC_EnableIRQ+0x38>)
 80160da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80160de:	095b      	lsrs	r3, r3, #5
 80160e0:	2001      	movs	r0, #1
 80160e2:	fa00 f202 	lsl.w	r2, r0, r2
 80160e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80160ea:	bf00      	nop
 80160ec:	370c      	adds	r7, #12
 80160ee:	46bd      	mov	sp, r7
 80160f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160f4:	4770      	bx	lr
 80160f6:	bf00      	nop
 80160f8:	e000e100 	.word	0xe000e100

080160fc <__NVIC_DisableIRQ>:
{
 80160fc:	b480      	push	{r7}
 80160fe:	b083      	sub	sp, #12
 8016100:	af00      	add	r7, sp, #0
 8016102:	4603      	mov	r3, r0
 8016104:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801610a:	2b00      	cmp	r3, #0
 801610c:	db12      	blt.n	8016134 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801610e:	79fb      	ldrb	r3, [r7, #7]
 8016110:	f003 021f 	and.w	r2, r3, #31
 8016114:	490a      	ldr	r1, [pc, #40]	; (8016140 <__NVIC_DisableIRQ+0x44>)
 8016116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801611a:	095b      	lsrs	r3, r3, #5
 801611c:	2001      	movs	r0, #1
 801611e:	fa00 f202 	lsl.w	r2, r0, r2
 8016122:	3320      	adds	r3, #32
 8016124:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8016128:	f3bf 8f4f 	dsb	sy
}
 801612c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801612e:	f3bf 8f6f 	isb	sy
}
 8016132:	bf00      	nop
}
 8016134:	bf00      	nop
 8016136:	370c      	adds	r7, #12
 8016138:	46bd      	mov	sp, r7
 801613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801613e:	4770      	bx	lr
 8016140:	e000e100 	.word	0xe000e100

08016144 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8016144:	b480      	push	{r7}
 8016146:	b085      	sub	sp, #20
 8016148:	af00      	add	r7, sp, #0
 801614a:	60f8      	str	r0, [r7, #12]
 801614c:	60b9      	str	r1, [r7, #8]
 801614e:	607a      	str	r2, [r7, #4]
 8016150:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8016152:	68fb      	ldr	r3, [r7, #12]
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 801615c:	68fb      	ldr	r3, [r7, #12]
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	68ba      	ldr	r2, [r7, #8]
 8016162:	430a      	orrs	r2, r1
 8016164:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8016166:	68fb      	ldr	r3, [r7, #12]
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801616c:	f023 0107 	bic.w	r1, r3, #7
 8016170:	68fb      	ldr	r3, [r7, #12]
 8016172:	681b      	ldr	r3, [r3, #0]
 8016174:	687a      	ldr	r2, [r7, #4]
 8016176:	430a      	orrs	r2, r1
 8016178:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 801617a:	68fb      	ldr	r3, [r7, #12]
 801617c:	681b      	ldr	r3, [r3, #0]
 801617e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8016180:	4b06      	ldr	r3, [pc, #24]	; (801619c <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 8016182:	4013      	ands	r3, r2
 8016184:	68fa      	ldr	r2, [r7, #12]
 8016186:	6812      	ldr	r2, [r2, #0]
 8016188:	6839      	ldr	r1, [r7, #0]
 801618a:	430b      	orrs	r3, r1
 801618c:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 801618e:	2300      	movs	r3, #0
}
 8016190:	4618      	mov	r0, r3
 8016192:	3714      	adds	r7, #20
 8016194:	46bd      	mov	sp, r7
 8016196:	f85d 7b04 	ldr.w	r7, [sp], #4
 801619a:	4770      	bx	lr
 801619c:	ffffc000 	.word	0xffffc000

080161a0 <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 80161a0:	b580      	push	{r7, lr}
 80161a2:	b082      	sub	sp, #8
 80161a4:	af00      	add	r7, sp, #0
 80161a6:	6078      	str	r0, [r7, #4]
    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 80161a8:	f7f9 f98a 	bl	800f4c0 <_ZN8touchgfx3HAL11getInstanceEv>
 80161ac:	4603      	mov	r3, r0
 80161ae:	4618      	mov	r0, r3
 80161b0:	f7ff ff66 	bl	8016080 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 80161b4:	bf00      	nop
 80161b6:	3708      	adds	r7, #8
 80161b8:	46bd      	mov	sp, r7
 80161ba:	bd80      	pop	{r7, pc}

080161bc <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 80161bc:	b480      	push	{r7}
 80161be:	b083      	sub	sp, #12
 80161c0:	af00      	add	r7, sp, #0
 80161c2:	6078      	str	r0, [r7, #4]
    //assert(0);
}
 80161c4:	bf00      	nop
 80161c6:	370c      	adds	r7, #12
 80161c8:	46bd      	mov	sp, r7
 80161ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161ce:	4770      	bx	lr

080161d0 <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 80161d0:	b580      	push	{r7, lr}
 80161d2:	b082      	sub	sp, #8
 80161d4:	af00      	add	r7, sp, #0
 80161d6:	6078      	str	r0, [r7, #4]
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	3314      	adds	r3, #20
 80161dc:	4618      	mov	r0, r3
 80161de:	f7f9 fa6b 	bl	800f6b8 <_ZN8touchgfx9colortypeC1Ev>
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	4618      	mov	r0, r3
 80161e6:	3708      	adds	r7, #8
 80161e8:	46bd      	mov	sp, r7
 80161ea:	bd80      	pop	{r7, pc}

080161ec <_ZN10STM32F7DMAC1Ev>:

}

STM32F7DMA::STM32F7DMA()
 80161ec:	b5b0      	push	{r4, r5, r7, lr}
 80161ee:	b082      	sub	sp, #8
 80161f0:	af00      	add	r7, sp, #0
 80161f2:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 80161f4:	687a      	ldr	r2, [r7, #4]
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	330c      	adds	r3, #12
 80161fa:	4619      	mov	r1, r3
 80161fc:	4610      	mov	r0, r2
 80161fe:	f7ff ff25 	bl	801604c <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 8016202:	4a0e      	ldr	r2, [pc, #56]	; (801623c <_ZN10STM32F7DMAC1Ev+0x50>)
 8016204:	687b      	ldr	r3, [r7, #4]
 8016206:	601a      	str	r2, [r3, #0]
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	f103 000c 	add.w	r0, r3, #12
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	3320      	adds	r3, #32
 8016212:	2260      	movs	r2, #96	; 0x60
 8016214:	4619      	mov	r1, r3
 8016216:	f007 fd23 	bl	801dc60 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	3320      	adds	r3, #32
 801621e:	245f      	movs	r4, #95	; 0x5f
 8016220:	461d      	mov	r5, r3
 8016222:	2c00      	cmp	r4, #0
 8016224:	db05      	blt.n	8016232 <_ZN10STM32F7DMAC1Ev+0x46>
 8016226:	4628      	mov	r0, r5
 8016228:	f7ff ffd2 	bl	80161d0 <_ZN8touchgfx6BlitOpC1Ev>
 801622c:	351c      	adds	r5, #28
 801622e:	3c01      	subs	r4, #1
 8016230:	e7f7      	b.n	8016222 <_ZN10STM32F7DMAC1Ev+0x36>
{}
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	4618      	mov	r0, r3
 8016236:	3708      	adds	r7, #8
 8016238:	46bd      	mov	sp, r7
 801623a:	bdb0      	pop	{r4, r5, r7, pc}
 801623c:	080250d0 	.word	0x080250d0

08016240 <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 8016240:	b580      	push	{r7, lr}
 8016242:	b082      	sub	sp, #8
 8016244:	af00      	add	r7, sp, #0
 8016246:	6078      	str	r0, [r7, #4]
 8016248:	4a0b      	ldr	r2, [pc, #44]	; (8016278 <_ZN10STM32F7DMAD1Ev+0x38>)
 801624a:	687b      	ldr	r3, [r7, #4]
 801624c:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 801624e:	480b      	ldr	r0, [pc, #44]	; (801627c <_ZN10STM32F7DMAD1Ev+0x3c>)
 8016250:	f7eb fa64 	bl	800171c <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8016254:	205a      	movs	r0, #90	; 0x5a
 8016256:	f7ff ff51 	bl	80160fc <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	330c      	adds	r3, #12
 801625e:	4618      	mov	r0, r3
 8016260:	f000 faba 	bl	80167d8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 8016264:	687b      	ldr	r3, [r7, #4]
 8016266:	4618      	mov	r0, r3
 8016268:	f7ff fed0 	bl	801600c <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	4618      	mov	r0, r3
 8016270:	3708      	adds	r7, #8
 8016272:	46bd      	mov	sp, r7
 8016274:	bd80      	pop	{r7, pc}
 8016276:	bf00      	nop
 8016278:	080250d0 	.word	0x080250d0
 801627c:	200092f4 	.word	0x200092f4

08016280 <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 8016280:	b580      	push	{r7, lr}
 8016282:	b082      	sub	sp, #8
 8016284:	af00      	add	r7, sp, #0
 8016286:	6078      	str	r0, [r7, #4]
}
 8016288:	6878      	ldr	r0, [r7, #4]
 801628a:	f7ff ffd9 	bl	8016240 <_ZN10STM32F7DMAD1Ev>
 801628e:	f44f 612a 	mov.w	r1, #2720	; 0xaa0
 8016292:	6878      	ldr	r0, [r7, #4]
 8016294:	f00c f97a 	bl	802258c <_ZdlPvj>
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	4618      	mov	r0, r3
 801629c:	3708      	adds	r7, #8
 801629e:	46bd      	mov	sp, r7
 80162a0:	bd80      	pop	{r7, pc}
	...

080162a4 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 80162a4:	b580      	push	{r7, lr}
 80162a6:	b082      	sub	sp, #8
 80162a8:	af00      	add	r7, sp, #0
 80162aa:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 80162ac:	4b09      	ldr	r3, [pc, #36]	; (80162d4 <_ZN10STM32F7DMA10initializeEv+0x30>)
 80162ae:	4a0a      	ldr	r2, [pc, #40]	; (80162d8 <_ZN10STM32F7DMA10initializeEv+0x34>)
 80162b0:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 80162b2:	4808      	ldr	r0, [pc, #32]	; (80162d4 <_ZN10STM32F7DMA10initializeEv+0x30>)
 80162b4:	f7eb f9e8 	bl	8001688 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 80162b8:	4b06      	ldr	r3, [pc, #24]	; (80162d4 <_ZN10STM32F7DMA10initializeEv+0x30>)
 80162ba:	4a08      	ldr	r2, [pc, #32]	; (80162dc <_ZN10STM32F7DMA10initializeEv+0x38>)
 80162bc:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 80162be:	4b05      	ldr	r3, [pc, #20]	; (80162d4 <_ZN10STM32F7DMA10initializeEv+0x30>)
 80162c0:	4a07      	ldr	r2, [pc, #28]	; (80162e0 <_ZN10STM32F7DMA10initializeEv+0x3c>)
 80162c2:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 80162c4:	205a      	movs	r0, #90	; 0x5a
 80162c6:	f7ff fefb 	bl	80160c0 <__NVIC_EnableIRQ>
}
 80162ca:	bf00      	nop
 80162cc:	3708      	adds	r7, #8
 80162ce:	46bd      	mov	sp, r7
 80162d0:	bd80      	pop	{r7, pc}
 80162d2:	bf00      	nop
 80162d4:	200092f4 	.word	0x200092f4
 80162d8:	4002b000 	.word	0x4002b000
 80162dc:	080161a1 	.word	0x080161a1
 80162e0:	080161bd 	.word	0x080161bd

080162e4 <_ZN10STM32F7DMA11getBlitCapsEv>:

volatile bool disableChromArt = false;

BlitOperations STM32F7DMA::getBlitCaps()
{
 80162e4:	b480      	push	{r7}
 80162e6:	b083      	sub	sp, #12
 80162e8:	af00      	add	r7, sp, #0
 80162ea:	6078      	str	r0, [r7, #4]
    if (disableChromArt)
 80162ec:	4b07      	ldr	r3, [pc, #28]	; (801630c <_ZN10STM32F7DMA11getBlitCapsEv+0x28>)
 80162ee:	781b      	ldrb	r3, [r3, #0]
 80162f0:	b2db      	uxtb	r3, r3
 80162f2:	2b00      	cmp	r3, #0
 80162f4:	d001      	beq.n	80162fa <_ZN10STM32F7DMA11getBlitCapsEv+0x16>
    {
        return static_cast<BlitOperations>(0);
 80162f6:	2300      	movs	r3, #0
 80162f8:	e001      	b.n	80162fe <_ZN10STM32F7DMA11getBlitCapsEv+0x1a>
                                           | BLIT_OP_COPY
                                           | BLIT_OP_COPY_WITH_ALPHA
                                           | BLIT_OP_COPY_ARGB8888
                                           | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                           | BLIT_OP_COPY_A4
                                           | BLIT_OP_COPY_A8);
 80162fa:	f240 13ef 	movw	r3, #495	; 0x1ef
    }
}
 80162fe:	4618      	mov	r0, r3
 8016300:	370c      	adds	r7, #12
 8016302:	46bd      	mov	sp, r7
 8016304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016308:	4770      	bx	lr
 801630a:	bf00      	nop
 801630c:	2000937c 	.word	0x2000937c

08016310 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 8016310:	b590      	push	{r4, r7, lr}
 8016312:	b08d      	sub	sp, #52	; 0x34
 8016314:	af02      	add	r7, sp, #8
 8016316:	6078      	str	r0, [r7, #4]
 8016318:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 801631a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801631e:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 8016320:	2300      	movs	r3, #0
 8016322:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8016324:	683b      	ldr	r3, [r7, #0]
 8016326:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8016328:	2b20      	cmp	r3, #32
 801632a:	d007      	beq.n	801633c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 801632c:	683b      	ldr	r3, [r7, #0]
 801632e:	681b      	ldr	r3, [r3, #0]
 8016330:	2b40      	cmp	r3, #64	; 0x40
 8016332:	d003      	beq.n	801633c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 8016334:	683b      	ldr	r3, [r7, #0]
 8016336:	681b      	ldr	r3, [r3, #0]
 8016338:	2b04      	cmp	r3, #4
 801633a:	d101      	bne.n	8016340 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 801633c:	2301      	movs	r3, #1
 801633e:	e000      	b.n	8016342 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 8016340:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 8016342:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 8016344:	683b      	ldr	r3, [r7, #0]
 8016346:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 8016348:	2b80      	cmp	r3, #128	; 0x80
 801634a:	d004      	beq.n	8016356 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 801634c:	683b      	ldr	r3, [r7, #0]
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016354:	d101      	bne.n	801635a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 8016356:	2301      	movs	r3, #1
 8016358:	e000      	b.n	801635c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 801635a:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 801635c:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 801635e:	f7f9 f9b9 	bl	800f6d4 <_ZN8touchgfx3HAL3lcdEv>
 8016362:	4603      	mov	r3, r0
 8016364:	681a      	ldr	r2, [r3, #0]
 8016366:	3220      	adds	r2, #32
 8016368:	6812      	ldr	r2, [r2, #0]
 801636a:	4618      	mov	r0, r3
 801636c:	4790      	blx	r2
 801636e:	4603      	mov	r3, r0
 8016370:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 8016372:	683b      	ldr	r3, [r7, #0]
 8016374:	681b      	ldr	r3, [r3, #0]
 8016376:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801637a:	d012      	beq.n	80163a2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
 801637c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016380:	d820      	bhi.n	80163c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
 8016382:	2b80      	cmp	r3, #128	; 0x80
 8016384:	d00a      	beq.n	801639c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8c>
 8016386:	2b80      	cmp	r3, #128	; 0x80
 8016388:	d81c      	bhi.n	80163c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
 801638a:	2b40      	cmp	r3, #64	; 0x40
 801638c:	d017      	beq.n	80163be <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
 801638e:	2b40      	cmp	r3, #64	; 0x40
 8016390:	d818      	bhi.n	80163c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
 8016392:	2b04      	cmp	r3, #4
 8016394:	d008      	beq.n	80163a8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x98>
 8016396:	2b20      	cmp	r3, #32
 8016398:	d011      	beq.n	80163be <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xae>
 801639a:	e013      	b.n	80163c4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xb4>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 801639c:	230a      	movs	r3, #10
 801639e:	623b      	str	r3, [r7, #32]
        break;
 80163a0:	e01a      	b.n	80163d8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 80163a2:	2309      	movs	r3, #9
 80163a4:	623b      	str	r3, [r7, #32]
        break;
 80163a6:	e017      	b.n	80163d8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 80163a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80163ac:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80163ae:	7f7b      	ldrb	r3, [r7, #29]
 80163b0:	2b10      	cmp	r3, #16
 80163b2:	d101      	bne.n	80163b8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa8>
 80163b4:	2302      	movs	r3, #2
 80163b6:	e000      	b.n	80163ba <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xaa>
 80163b8:	2301      	movs	r3, #1
 80163ba:	623b      	str	r3, [r7, #32]
        break;
 80163bc:	e00c      	b.n	80163d8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 80163be:	2300      	movs	r3, #0
 80163c0:	623b      	str	r3, [r7, #32]
        break;
 80163c2:	e009      	b.n	80163d8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc8>
    default:
        dma2dTransferMode = DMA2D_M2M;
 80163c4:	2300      	movs	r3, #0
 80163c6:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80163c8:	7f7b      	ldrb	r3, [r7, #29]
 80163ca:	2b10      	cmp	r3, #16
 80163cc:	d101      	bne.n	80163d2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc2>
 80163ce:	2302      	movs	r3, #2
 80163d0:	e000      	b.n	80163d4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc4>
 80163d2:	2301      	movs	r3, #1
 80163d4:	623b      	str	r3, [r7, #32]
        break;
 80163d6:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 80163d8:	4a76      	ldr	r2, [pc, #472]	; (80165b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80163da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163dc:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 80163de:	7f7b      	ldrb	r3, [r7, #29]
 80163e0:	2b10      	cmp	r3, #16
 80163e2:	d101      	bne.n	80163e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd8>
 80163e4:	2302      	movs	r3, #2
 80163e6:	e000      	b.n	80163ea <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xda>
 80163e8:	2301      	movs	r3, #1
 80163ea:	4a72      	ldr	r2, [pc, #456]	; (80165b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80163ec:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80163ee:	683b      	ldr	r3, [r7, #0]
 80163f0:	8a5b      	ldrh	r3, [r3, #18]
 80163f2:	461a      	mov	r2, r3
 80163f4:	683b      	ldr	r3, [r7, #0]
 80163f6:	899b      	ldrh	r3, [r3, #12]
 80163f8:	1ad3      	subs	r3, r2, r3
 80163fa:	461a      	mov	r2, r3
 80163fc:	4b6d      	ldr	r3, [pc, #436]	; (80165b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80163fe:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8016400:	7f7b      	ldrb	r3, [r7, #29]
 8016402:	2b10      	cmp	r3, #16
 8016404:	d101      	bne.n	801640a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfa>
 8016406:	2202      	movs	r2, #2
 8016408:	e000      	b.n	801640c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfc>
 801640a:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 801640c:	683b      	ldr	r3, [r7, #0]
 801640e:	8a5b      	ldrh	r3, [r3, #18]
 8016410:	4619      	mov	r1, r3
 8016412:	683b      	ldr	r3, [r7, #0]
 8016414:	899b      	ldrh	r3, [r3, #12]
 8016416:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8016418:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801641a:	4866      	ldr	r0, [pc, #408]	; (80165b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801641c:	f7ff fe92 	bl	8016144 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8016420:	4a64      	ldr	r2, [pc, #400]	; (80165b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8016422:	6a3b      	ldr	r3, [r7, #32]
 8016424:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 8016426:	683b      	ldr	r3, [r7, #0]
 8016428:	8a1b      	ldrh	r3, [r3, #16]
 801642a:	461a      	mov	r2, r3
 801642c:	683b      	ldr	r3, [r7, #0]
 801642e:	899b      	ldrh	r3, [r3, #12]
 8016430:	1ad3      	subs	r3, r2, r3
 8016432:	461a      	mov	r2, r3
 8016434:	4b5f      	ldr	r3, [pc, #380]	; (80165b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8016436:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 8016438:	7ffb      	ldrb	r3, [r7, #31]
 801643a:	2b00      	cmp	r3, #0
 801643c:	d103      	bne.n	8016446 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x136>
 801643e:	7fbb      	ldrb	r3, [r7, #30]
 8016440:	2b00      	cmp	r3, #0
 8016442:	f000 8082 	beq.w	801654a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x23a>
    {
        if (blitOp.alpha < 255)
 8016446:	683b      	ldr	r3, [r7, #0]
 8016448:	7e1b      	ldrb	r3, [r3, #24]
 801644a:	2bff      	cmp	r3, #255	; 0xff
 801644c:	d008      	beq.n	8016460 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 801644e:	4b59      	ldr	r3, [pc, #356]	; (80165b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8016450:	2202      	movs	r2, #2
 8016452:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 8016454:	683b      	ldr	r3, [r7, #0]
 8016456:	7e1b      	ldrb	r3, [r3, #24]
 8016458:	461a      	mov	r2, r3
 801645a:	4b56      	ldr	r3, [pc, #344]	; (80165b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801645c:	635a      	str	r2, [r3, #52]	; 0x34
 801645e:	e002      	b.n	8016466 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x156>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8016460:	4b54      	ldr	r3, [pc, #336]	; (80165b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8016462:	2200      	movs	r2, #0
 8016464:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 8016466:	7fbb      	ldrb	r3, [r7, #30]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d059      	beq.n	8016520 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
        {
            if (bitDepth == 16)
 801646c:	7f7b      	ldrb	r3, [r7, #29]
 801646e:	2b10      	cmp	r3, #16
 8016470:	d14a      	bne.n	8016508 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f8>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 8016472:	683b      	ldr	r3, [r7, #0]
 8016474:	3314      	adds	r3, #20
 8016476:	4618      	mov	r0, r3
 8016478:	f7fa fd5b 	bl	8010f32 <_ZNK8touchgfx9colortypecvtEv>
 801647c:	4603      	mov	r3, r0
 801647e:	12db      	asrs	r3, r3, #11
 8016480:	f003 021f 	and.w	r2, r3, #31
 8016484:	4613      	mov	r3, r2
 8016486:	021b      	lsls	r3, r3, #8
 8016488:	1a9b      	subs	r3, r3, r2
 801648a:	4a4b      	ldr	r2, [pc, #300]	; (80165b8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 801648c:	fb82 1203 	smull	r1, r2, r2, r3
 8016490:	441a      	add	r2, r3
 8016492:	1112      	asrs	r2, r2, #4
 8016494:	17db      	asrs	r3, r3, #31
 8016496:	1ad3      	subs	r3, r2, r3
 8016498:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 801649a:	683b      	ldr	r3, [r7, #0]
 801649c:	3314      	adds	r3, #20
 801649e:	4618      	mov	r0, r3
 80164a0:	f7fa fd47 	bl	8010f32 <_ZNK8touchgfx9colortypecvtEv>
 80164a4:	4603      	mov	r3, r0
 80164a6:	115b      	asrs	r3, r3, #5
 80164a8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80164ac:	4613      	mov	r3, r2
 80164ae:	021b      	lsls	r3, r3, #8
 80164b0:	1a9b      	subs	r3, r3, r2
 80164b2:	4a42      	ldr	r2, [pc, #264]	; (80165bc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2ac>)
 80164b4:	fb82 1203 	smull	r1, r2, r2, r3
 80164b8:	441a      	add	r2, r3
 80164ba:	1152      	asrs	r2, r2, #5
 80164bc:	17db      	asrs	r3, r3, #31
 80164be:	1ad3      	subs	r3, r2, r3
 80164c0:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 80164c2:	683b      	ldr	r3, [r7, #0]
 80164c4:	3314      	adds	r3, #20
 80164c6:	4618      	mov	r0, r3
 80164c8:	f7fa fd33 	bl	8010f32 <_ZNK8touchgfx9colortypecvtEv>
 80164cc:	4603      	mov	r3, r0
 80164ce:	f003 021f 	and.w	r2, r3, #31
 80164d2:	4613      	mov	r3, r2
 80164d4:	021b      	lsls	r3, r3, #8
 80164d6:	1a9b      	subs	r3, r3, r2
 80164d8:	4a37      	ldr	r2, [pc, #220]	; (80165b8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a8>)
 80164da:	fb82 1203 	smull	r1, r2, r2, r3
 80164de:	441a      	add	r2, r3
 80164e0:	1112      	asrs	r2, r2, #4
 80164e2:	17db      	asrs	r3, r3, #31
 80164e4:	1ad3      	subs	r3, r2, r3
 80164e6:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 80164e8:	683b      	ldr	r3, [r7, #0]
 80164ea:	7e1b      	ldrb	r3, [r3, #24]
 80164ec:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 80164ee:	68fb      	ldr	r3, [r7, #12]
 80164f0:	061a      	lsls	r2, r3, #24
 80164f2:	69bb      	ldr	r3, [r7, #24]
 80164f4:	041b      	lsls	r3, r3, #16
 80164f6:	431a      	orrs	r2, r3
 80164f8:	697b      	ldr	r3, [r7, #20]
 80164fa:	021b      	lsls	r3, r3, #8
 80164fc:	431a      	orrs	r2, r3
 80164fe:	693b      	ldr	r3, [r7, #16]
 8016500:	4313      	orrs	r3, r2
 8016502:	4a2c      	ldr	r2, [pc, #176]	; (80165b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8016504:	6353      	str	r3, [r2, #52]	; 0x34
 8016506:	e00b      	b.n	8016520 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x210>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 8016508:	683b      	ldr	r3, [r7, #0]
 801650a:	3314      	adds	r3, #20
 801650c:	4618      	mov	r0, r3
 801650e:	f7fa fd1d 	bl	8010f4c <_ZNK8touchgfx9colortype10getColor32Ev>
 8016512:	4602      	mov	r2, r0
 8016514:	683b      	ldr	r3, [r7, #0]
 8016516:	7e1b      	ldrb	r3, [r3, #24]
 8016518:	061b      	lsls	r3, r3, #24
 801651a:	4313      	orrs	r3, r2
 801651c:	4a25      	ldr	r2, [pc, #148]	; (80165b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801651e:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8016520:	683b      	ldr	r3, [r7, #0]
 8016522:	8a5b      	ldrh	r3, [r3, #18]
 8016524:	461a      	mov	r2, r3
 8016526:	683b      	ldr	r3, [r7, #0]
 8016528:	899b      	ldrh	r3, [r3, #12]
 801652a:	1ad3      	subs	r3, r2, r3
 801652c:	461a      	mov	r2, r3
 801652e:	4b21      	ldr	r3, [pc, #132]	; (80165b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8016530:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016532:	7f7b      	ldrb	r3, [r7, #29]
 8016534:	2b10      	cmp	r3, #16
 8016536:	d101      	bne.n	801653c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22c>
 8016538:	2302      	movs	r3, #2
 801653a:	e000      	b.n	801653e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x22e>
 801653c:	2301      	movs	r3, #1
 801653e:	4a1d      	ldr	r2, [pc, #116]	; (80165b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8016540:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 8016542:	2100      	movs	r1, #0
 8016544:	481b      	ldr	r0, [pc, #108]	; (80165b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8016546:	f7eb fb69 	bl	8001c1c <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 801654a:	2101      	movs	r1, #1
 801654c:	4819      	ldr	r0, [pc, #100]	; (80165b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 801654e:	f7eb fb65 	bl	8001c1c <HAL_DMA2D_ConfigLayer>

    if (blendingImage || blendingText)
 8016552:	7ffb      	ldrb	r3, [r7, #31]
 8016554:	2b00      	cmp	r3, #0
 8016556:	d102      	bne.n	801655e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x24e>
 8016558:	7fbb      	ldrb	r3, [r7, #30]
 801655a:	2b00      	cmp	r3, #0
 801655c:	d015      	beq.n	801658a <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x27a>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 801655e:	683b      	ldr	r3, [r7, #0]
 8016560:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016562:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 8016564:	683b      	ldr	r3, [r7, #0]
 8016566:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016568:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 801656a:	683b      	ldr	r3, [r7, #0]
 801656c:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801656e:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8016570:	683b      	ldr	r3, [r7, #0]
 8016572:	899b      	ldrh	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016574:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8016576:	683b      	ldr	r3, [r7, #0]
 8016578:	89db      	ldrh	r3, [r3, #14]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801657a:	9301      	str	r3, [sp, #4]
 801657c:	9200      	str	r2, [sp, #0]
 801657e:	4623      	mov	r3, r4
 8016580:	4602      	mov	r2, r0
 8016582:	480c      	ldr	r0, [pc, #48]	; (80165b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8016584:	f7eb f96d 	bl	8001862 <HAL_DMA2D_BlendingStart_IT>
 8016588:	e010      	b.n	80165ac <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 801658a:	683b      	ldr	r3, [r7, #0]
 801658c:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 801658e:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8016590:	683b      	ldr	r3, [r7, #0]
 8016592:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016594:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8016596:	683b      	ldr	r3, [r7, #0]
 8016598:	899b      	ldrh	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 801659a:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 801659c:	683b      	ldr	r3, [r7, #0]
 801659e:	89db      	ldrh	r3, [r3, #14]
        HAL_DMA2D_Start_IT(&hdma2d,
 80165a0:	9300      	str	r3, [sp, #0]
 80165a2:	4603      	mov	r3, r0
 80165a4:	4803      	ldr	r0, [pc, #12]	; (80165b4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 80165a6:	f7eb f929 	bl	80017fc <HAL_DMA2D_Start_IT>
    }
}
 80165aa:	bf00      	nop
 80165ac:	bf00      	nop
 80165ae:	372c      	adds	r7, #44	; 0x2c
 80165b0:	46bd      	mov	sp, r7
 80165b2:	bd90      	pop	{r4, r7, pc}
 80165b4:	200092f4 	.word	0x200092f4
 80165b8:	84210843 	.word	0x84210843
 80165bc:	82082083 	.word	0x82082083

080165c0 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 80165c0:	b590      	push	{r4, r7, lr}
 80165c2:	b08d      	sub	sp, #52	; 0x34
 80165c4:	af02      	add	r7, sp, #8
 80165c6:	6078      	str	r0, [r7, #4]
 80165c8:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 80165ca:	f7f9 f883 	bl	800f6d4 <_ZN8touchgfx3HAL3lcdEv>
 80165ce:	4603      	mov	r3, r0
 80165d0:	681a      	ldr	r2, [r3, #0]
 80165d2:	3220      	adds	r2, #32
 80165d4:	6812      	ldr	r2, [r2, #0]
 80165d6:	4618      	mov	r0, r3
 80165d8:	4790      	blx	r2
 80165da:	4603      	mov	r3, r0
 80165dc:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80165de:	7ffb      	ldrb	r3, [r7, #31]
 80165e0:	2b10      	cmp	r3, #16
 80165e2:	d101      	bne.n	80165e8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 80165e4:	2302      	movs	r3, #2
 80165e6:	e000      	b.n	80165ea <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 80165e8:	2301      	movs	r3, #1
 80165ea:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 80165ec:	2300      	movs	r3, #0
 80165ee:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 80165f0:	7ffb      	ldrb	r3, [r7, #31]
 80165f2:	2b10      	cmp	r3, #16
 80165f4:	d149      	bne.n	801668a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80165f6:	683b      	ldr	r3, [r7, #0]
 80165f8:	3314      	adds	r3, #20
 80165fa:	4618      	mov	r0, r3
 80165fc:	f7fa fc99 	bl	8010f32 <_ZNK8touchgfx9colortypecvtEv>
 8016600:	4603      	mov	r3, r0
 8016602:	12db      	asrs	r3, r3, #11
 8016604:	f003 021f 	and.w	r2, r3, #31
 8016608:	4613      	mov	r3, r2
 801660a:	021b      	lsls	r3, r3, #8
 801660c:	1a9b      	subs	r3, r3, r2
 801660e:	4a69      	ldr	r2, [pc, #420]	; (80167b4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8016610:	fb82 1203 	smull	r1, r2, r2, r3
 8016614:	441a      	add	r2, r3
 8016616:	1112      	asrs	r2, r2, #4
 8016618:	17db      	asrs	r3, r3, #31
 801661a:	1ad3      	subs	r3, r2, r3
 801661c:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 801661e:	683b      	ldr	r3, [r7, #0]
 8016620:	3314      	adds	r3, #20
 8016622:	4618      	mov	r0, r3
 8016624:	f7fa fc85 	bl	8010f32 <_ZNK8touchgfx9colortypecvtEv>
 8016628:	4603      	mov	r3, r0
 801662a:	115b      	asrs	r3, r3, #5
 801662c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8016630:	4613      	mov	r3, r2
 8016632:	021b      	lsls	r3, r3, #8
 8016634:	1a9b      	subs	r3, r3, r2
 8016636:	4a60      	ldr	r2, [pc, #384]	; (80167b8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 8016638:	fb82 1203 	smull	r1, r2, r2, r3
 801663c:	441a      	add	r2, r3
 801663e:	1152      	asrs	r2, r2, #5
 8016640:	17db      	asrs	r3, r3, #31
 8016642:	1ad3      	subs	r3, r2, r3
 8016644:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8016646:	683b      	ldr	r3, [r7, #0]
 8016648:	3314      	adds	r3, #20
 801664a:	4618      	mov	r0, r3
 801664c:	f7fa fc71 	bl	8010f32 <_ZNK8touchgfx9colortypecvtEv>
 8016650:	4603      	mov	r3, r0
 8016652:	f003 021f 	and.w	r2, r3, #31
 8016656:	4613      	mov	r3, r2
 8016658:	021b      	lsls	r3, r3, #8
 801665a:	1a9b      	subs	r3, r3, r2
 801665c:	4a55      	ldr	r2, [pc, #340]	; (80167b4 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 801665e:	fb82 1203 	smull	r1, r2, r2, r3
 8016662:	441a      	add	r2, r3
 8016664:	1112      	asrs	r2, r2, #4
 8016666:	17db      	asrs	r3, r3, #31
 8016668:	1ad3      	subs	r3, r2, r3
 801666a:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 801666c:	683b      	ldr	r3, [r7, #0]
 801666e:	7e1b      	ldrb	r3, [r3, #24]
 8016670:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8016672:	68bb      	ldr	r3, [r7, #8]
 8016674:	061a      	lsls	r2, r3, #24
 8016676:	697b      	ldr	r3, [r7, #20]
 8016678:	041b      	lsls	r3, r3, #16
 801667a:	431a      	orrs	r2, r3
 801667c:	693b      	ldr	r3, [r7, #16]
 801667e:	021b      	lsls	r3, r3, #8
 8016680:	4313      	orrs	r3, r2
 8016682:	68fa      	ldr	r2, [r7, #12]
 8016684:	4313      	orrs	r3, r2
 8016686:	623b      	str	r3, [r7, #32]
 8016688:	e00b      	b.n	80166a2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 801668a:	683b      	ldr	r3, [r7, #0]
 801668c:	7e1b      	ldrb	r3, [r3, #24]
 801668e:	061b      	lsls	r3, r3, #24
 8016690:	461c      	mov	r4, r3
 8016692:	683b      	ldr	r3, [r7, #0]
 8016694:	3314      	adds	r3, #20
 8016696:	4618      	mov	r0, r3
 8016698:	f7fa fc58 	bl	8010f4c <_ZNK8touchgfx9colortype10getColor32Ev>
 801669c:	4603      	mov	r3, r0
 801669e:	4323      	orrs	r3, r4
 80166a0:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 80166a2:	683b      	ldr	r3, [r7, #0]
 80166a4:	681b      	ldr	r3, [r3, #0]
 80166a6:	2b08      	cmp	r3, #8
 80166a8:	d103      	bne.n	80166b2 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 80166aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80166ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80166b0:	e003      	b.n	80166ba <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 80166b2:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80166b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80166b8:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 80166ba:	4a40      	ldr	r2, [pc, #256]	; (80167bc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80166bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80166be:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 80166c0:	7ffb      	ldrb	r3, [r7, #31]
 80166c2:	2b10      	cmp	r3, #16
 80166c4:	d101      	bne.n	80166ca <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 80166c6:	2302      	movs	r3, #2
 80166c8:	e000      	b.n	80166cc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 80166ca:	2301      	movs	r3, #1
 80166cc:	4a3b      	ldr	r2, [pc, #236]	; (80167bc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80166ce:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80166d0:	683b      	ldr	r3, [r7, #0]
 80166d2:	8a5b      	ldrh	r3, [r3, #18]
 80166d4:	461a      	mov	r2, r3
 80166d6:	683b      	ldr	r3, [r7, #0]
 80166d8:	899b      	ldrh	r3, [r3, #12]
 80166da:	1ad3      	subs	r3, r2, r3
 80166dc:	461a      	mov	r2, r3
 80166de:	4b37      	ldr	r3, [pc, #220]	; (80167bc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80166e0:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80166e2:	7ffb      	ldrb	r3, [r7, #31]
 80166e4:	2b10      	cmp	r3, #16
 80166e6:	d101      	bne.n	80166ec <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 80166e8:	2202      	movs	r2, #2
 80166ea:	e000      	b.n	80166ee <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 80166ec:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 80166ee:	683b      	ldr	r3, [r7, #0]
 80166f0:	8a5b      	ldrh	r3, [r3, #18]
 80166f2:	4619      	mov	r1, r3
 80166f4:	683b      	ldr	r3, [r7, #0]
 80166f6:	899b      	ldrh	r3, [r3, #12]
 80166f8:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 80166fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80166fc:	482f      	ldr	r0, [pc, #188]	; (80167bc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80166fe:	f7ff fd21 	bl	8016144 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8016702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016704:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016708:	d11e      	bne.n	8016748 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 801670a:	4b2c      	ldr	r3, [pc, #176]	; (80167bc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801670c:	2201      	movs	r2, #1
 801670e:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8016710:	4a2a      	ldr	r2, [pc, #168]	; (80167bc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016712:	6a3b      	ldr	r3, [r7, #32]
 8016714:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 8016716:	4b29      	ldr	r3, [pc, #164]	; (80167bc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016718:	2209      	movs	r2, #9
 801671a:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 801671c:	683b      	ldr	r3, [r7, #0]
 801671e:	8a5b      	ldrh	r3, [r3, #18]
 8016720:	461a      	mov	r2, r3
 8016722:	683b      	ldr	r3, [r7, #0]
 8016724:	899b      	ldrh	r3, [r3, #12]
 8016726:	1ad3      	subs	r3, r2, r3
 8016728:	461a      	mov	r2, r3
 801672a:	4b24      	ldr	r3, [pc, #144]	; (80167bc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801672c:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801672e:	7ffb      	ldrb	r3, [r7, #31]
 8016730:	2b10      	cmp	r3, #16
 8016732:	d101      	bne.n	8016738 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 8016734:	2302      	movs	r3, #2
 8016736:	e000      	b.n	801673a <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 8016738:	2301      	movs	r3, #1
 801673a:	4a20      	ldr	r2, [pc, #128]	; (80167bc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801673c:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 801673e:	2100      	movs	r1, #0
 8016740:	481e      	ldr	r0, [pc, #120]	; (80167bc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016742:	f7eb fa6b 	bl	8001c1c <HAL_DMA2D_ConfigLayer>
 8016746:	e005      	b.n	8016754 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 8016748:	4a1c      	ldr	r2, [pc, #112]	; (80167bc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801674a:	69bb      	ldr	r3, [r7, #24]
 801674c:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 801674e:	4b1b      	ldr	r3, [pc, #108]	; (80167bc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016750:	2200      	movs	r2, #0
 8016752:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 8016754:	2101      	movs	r1, #1
 8016756:	4819      	ldr	r0, [pc, #100]	; (80167bc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016758:	f7eb fa60 	bl	8001c1c <HAL_DMA2D_ConfigLayer>

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 801675c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801675e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8016762:	d115      	bne.n	8016790 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 8016764:	683b      	ldr	r3, [r7, #0]
 8016766:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016768:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 801676a:	683b      	ldr	r3, [r7, #0]
 801676c:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801676e:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 8016770:	683b      	ldr	r3, [r7, #0]
 8016772:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016774:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8016776:	683b      	ldr	r3, [r7, #0]
 8016778:	899b      	ldrh	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 801677a:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 801677c:	683b      	ldr	r3, [r7, #0]
 801677e:	89db      	ldrh	r3, [r3, #14]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016780:	9301      	str	r3, [sp, #4]
 8016782:	9200      	str	r2, [sp, #0]
 8016784:	4623      	mov	r3, r4
 8016786:	4602      	mov	r2, r0
 8016788:	480c      	ldr	r0, [pc, #48]	; (80167bc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801678a:	f7eb f86a 	bl	8001862 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 801678e:	e00d      	b.n	80167ac <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8016790:	683b      	ldr	r3, [r7, #0]
 8016792:	689b      	ldr	r3, [r3, #8]
 8016794:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 8016796:	683b      	ldr	r3, [r7, #0]
 8016798:	899b      	ldrh	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 801679a:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 801679c:	683b      	ldr	r3, [r7, #0]
 801679e:	89db      	ldrh	r3, [r3, #14]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 80167a0:	9300      	str	r3, [sp, #0]
 80167a2:	460b      	mov	r3, r1
 80167a4:	6a39      	ldr	r1, [r7, #32]
 80167a6:	4805      	ldr	r0, [pc, #20]	; (80167bc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80167a8:	f7eb f828 	bl	80017fc <HAL_DMA2D_Start_IT>
}
 80167ac:	bf00      	nop
 80167ae:	372c      	adds	r7, #44	; 0x2c
 80167b0:	46bd      	mov	sp, r7
 80167b2:	bd90      	pop	{r4, r7, pc}
 80167b4:	84210843 	.word	0x84210843
 80167b8:	82082083 	.word	0x82082083
 80167bc:	200092f4 	.word	0x200092f4

080167c0 <_ZN10STM32F7DMA5startEv>:

void STM32F7DMA::start()
{
 80167c0:	b580      	push	{r7, lr}
 80167c2:	b082      	sub	sp, #8
 80167c4:	af00      	add	r7, sp, #0
 80167c6:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in cached memory (e.g. SRAM) then we need
    // to flush the Dcache prior to letting DMA2D accessing it. That's done
    // using SCB_CleanDCache() or SCB_CleanDCache_by_Addr().
    DMA_Interface::start();
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	4618      	mov	r0, r3
 80167cc:	f007 fa36 	bl	801dc3c <_ZN8touchgfx13DMA_Interface5startEv>
}
 80167d0:	bf00      	nop
 80167d2:	3708      	adds	r7, #8
 80167d4:	46bd      	mov	sp, r7
 80167d6:	bd80      	pop	{r7, pc}

080167d8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 80167d8:	b580      	push	{r7, lr}
 80167da:	b082      	sub	sp, #8
 80167dc:	af00      	add	r7, sp, #0
 80167de:	6078      	str	r0, [r7, #4]
 80167e0:	4a05      	ldr	r2, [pc, #20]	; (80167f8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 80167e2:	687b      	ldr	r3, [r7, #4]
 80167e4:	601a      	str	r2, [r3, #0]
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	4618      	mov	r0, r3
 80167ea:	f7ff fbe1 	bl	8015fb0 <_ZN8touchgfx9DMA_QueueD1Ev>
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	4618      	mov	r0, r3
 80167f2:	3708      	adds	r7, #8
 80167f4:	46bd      	mov	sp, r7
 80167f6:	bd80      	pop	{r7, pc}
 80167f8:	08025e8c 	.word	0x08025e8c

080167fc <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 80167fc:	b580      	push	{r7, lr}
 80167fe:	b082      	sub	sp, #8
 8016800:	af00      	add	r7, sp, #0
 8016802:	6078      	str	r0, [r7, #4]
 8016804:	6878      	ldr	r0, [r7, #4]
 8016806:	f7ff ffe7 	bl	80167d8 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801680a:	2114      	movs	r1, #20
 801680c:	6878      	ldr	r0, [r7, #4]
 801680e:	f00b febd 	bl	802258c <_ZdlPvj>
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	4618      	mov	r0, r3
 8016816:	3708      	adds	r7, #8
 8016818:	46bd      	mov	sp, r7
 801681a:	bd80      	pop	{r7, pc}

0801681c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 801681c:	b480      	push	{r7}
 801681e:	b083      	sub	sp, #12
 8016820:	af00      	add	r7, sp, #0
 8016822:	6078      	str	r0, [r7, #4]
 8016824:	460b      	mov	r3, r1
 8016826:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	78fa      	ldrb	r2, [r7, #3]
 801682c:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        displayOrientationChangeRequested = true;
 8016830:	687b      	ldr	r3, [r7, #4]
 8016832:	2201      	movs	r2, #1
 8016834:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    }
 8016838:	bf00      	nop
 801683a:	370c      	adds	r7, #12
 801683c:	46bd      	mov	sp, r7
 801683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016842:	4770      	bx	lr

08016844 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 8016844:	b580      	push	{r7, lr}
 8016846:	b082      	sub	sp, #8
 8016848:	af00      	add	r7, sp, #0
 801684a:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 801684c:	687b      	ldr	r3, [r7, #4]
 801684e:	681b      	ldr	r3, [r3, #0]
 8016850:	3318      	adds	r3, #24
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	6878      	ldr	r0, [r7, #4]
 8016856:	4798      	blx	r3
    }
 8016858:	bf00      	nop
 801685a:	3708      	adds	r7, #8
 801685c:	46bd      	mov	sp, r7
 801685e:	bd80      	pop	{r7, pc}

08016860 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8016860:	b580      	push	{r7, lr}
 8016862:	b082      	sub	sp, #8
 8016864:	af00      	add	r7, sp, #0
 8016866:	6078      	str	r0, [r7, #4]
        return dma.getBlitCaps();
 8016868:	687b      	ldr	r3, [r7, #4]
 801686a:	685a      	ldr	r2, [r3, #4]
 801686c:	687b      	ldr	r3, [r7, #4]
 801686e:	685b      	ldr	r3, [r3, #4]
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	681b      	ldr	r3, [r3, #0]
 8016874:	4610      	mov	r0, r2
 8016876:	4798      	blx	r3
 8016878:	4603      	mov	r3, r0
    };
 801687a:	4618      	mov	r0, r3
 801687c:	3708      	adds	r7, #8
 801687e:	46bd      	mov	sp, r7
 8016880:	bd80      	pop	{r7, pc}

08016882 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8016882:	b480      	push	{r7}
 8016884:	b083      	sub	sp, #12
 8016886:	af00      	add	r7, sp, #0
 8016888:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 801688a:	687b      	ldr	r3, [r7, #4]
 801688c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016890:	3301      	adds	r3, #1
 8016892:	b2da      	uxtb	r2, r3
 8016894:	687b      	ldr	r3, [r7, #4]
 8016896:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    };
 801689a:	bf00      	nop
 801689c:	370c      	adds	r7, #12
 801689e:	46bd      	mov	sp, r7
 80168a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168a4:	4770      	bx	lr

080168a6 <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 80168a6:	b580      	push	{r7, lr}
 80168a8:	b082      	sub	sp, #8
 80168aa:	af00      	add	r7, sp, #0
 80168ac:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 80168ae:	6878      	ldr	r0, [r7, #4]
 80168b0:	f007 f89a 	bl	801d9e8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	681b      	ldr	r3, [r3, #0]
 80168b8:	3384      	adds	r3, #132	; 0x84
 80168ba:	681b      	ldr	r3, [r3, #0]
 80168bc:	6878      	ldr	r0, [r7, #4]
 80168be:	4798      	blx	r3
    }
 80168c0:	bf00      	nop
 80168c2:	3708      	adds	r7, #8
 80168c4:	46bd      	mov	sp, r7
 80168c6:	bd80      	pop	{r7, pc}

080168c8 <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 80168c8:	b480      	push	{r7}
 80168ca:	b083      	sub	sp, #12
 80168cc:	af00      	add	r7, sp, #0
 80168ce:	6078      	str	r0, [r7, #4]
 80168d0:	6039      	str	r1, [r7, #0]
        return false;
 80168d2:	2300      	movs	r3, #0
    }
 80168d4:	4618      	mov	r0, r3
 80168d6:	370c      	adds	r7, #12
 80168d8:	46bd      	mov	sp, r7
 80168da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168de:	4770      	bx	lr

080168e0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 80168e0:	b580      	push	{r7, lr}
 80168e2:	b086      	sub	sp, #24
 80168e4:	af00      	add	r7, sp, #0
 80168e6:	60f8      	str	r0, [r7, #12]
 80168e8:	60b9      	str	r1, [r7, #8]
 80168ea:	4611      	mov	r1, r2
 80168ec:	461a      	mov	r2, r3
 80168ee:	460b      	mov	r3, r1
 80168f0:	80fb      	strh	r3, [r7, #6]
 80168f2:	4613      	mov	r3, r2
 80168f4:	717b      	strb	r3, [r7, #5]
        uint32_t bufferSizeInBytes = 0;
 80168f6:	2300      	movs	r3, #0
 80168f8:	617b      	str	r3, [r7, #20]
        switch (depth)
 80168fa:	88fb      	ldrh	r3, [r7, #6]
 80168fc:	3b01      	subs	r3, #1
 80168fe:	2b1f      	cmp	r3, #31
 8016900:	d862      	bhi.n	80169c8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xe8>
 8016902:	a201      	add	r2, pc, #4	; (adr r2, 8016908 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x28>)
 8016904:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016908:	080169a5 	.word	0x080169a5
 801690c:	080169a5 	.word	0x080169a5
 8016910:	080169c9 	.word	0x080169c9
 8016914:	080169a5 	.word	0x080169a5
 8016918:	080169c9 	.word	0x080169c9
 801691c:	080169c9 	.word	0x080169c9
 8016920:	080169c9 	.word	0x080169c9
 8016924:	08016989 	.word	0x08016989
 8016928:	080169c9 	.word	0x080169c9
 801692c:	080169c9 	.word	0x080169c9
 8016930:	080169c9 	.word	0x080169c9
 8016934:	080169c9 	.word	0x080169c9
 8016938:	080169c9 	.word	0x080169c9
 801693c:	080169c9 	.word	0x080169c9
 8016940:	080169c9 	.word	0x080169c9
 8016944:	08016989 	.word	0x08016989
 8016948:	080169c9 	.word	0x080169c9
 801694c:	080169c9 	.word	0x080169c9
 8016950:	080169c9 	.word	0x080169c9
 8016954:	080169c9 	.word	0x080169c9
 8016958:	080169c9 	.word	0x080169c9
 801695c:	080169c9 	.word	0x080169c9
 8016960:	080169c9 	.word	0x080169c9
 8016964:	08016989 	.word	0x08016989
 8016968:	080169c9 	.word	0x080169c9
 801696c:	080169c9 	.word	0x080169c9
 8016970:	080169c9 	.word	0x080169c9
 8016974:	080169c9 	.word	0x080169c9
 8016978:	080169c9 	.word	0x080169c9
 801697c:	080169c9 	.word	0x080169c9
 8016980:	080169c9 	.word	0x080169c9
 8016984:	08016989 	.word	0x08016989
            bufferSizeInBytes = (DISPLAY_WIDTH * DISPLAY_HEIGHT) * (depth / 8);
 8016988:	4b29      	ldr	r3, [pc, #164]	; (8016a30 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x150>)
 801698a:	881b      	ldrh	r3, [r3, #0]
 801698c:	461a      	mov	r2, r3
 801698e:	4b29      	ldr	r3, [pc, #164]	; (8016a34 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x154>)
 8016990:	881b      	ldrh	r3, [r3, #0]
 8016992:	fb03 f302 	mul.w	r3, r3, r2
 8016996:	88fa      	ldrh	r2, [r7, #6]
 8016998:	08d2      	lsrs	r2, r2, #3
 801699a:	b292      	uxth	r2, r2
 801699c:	fb02 f303 	mul.w	r3, r2, r3
 80169a0:	617b      	str	r3, [r7, #20]
            break;
 80169a2:	e018      	b.n	80169d6 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xf6>
            bufferSizeInBytes = ((DISPLAY_WIDTH * depth + 7) / 8) * DISPLAY_HEIGHT;
 80169a4:	4b22      	ldr	r3, [pc, #136]	; (8016a30 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x150>)
 80169a6:	881b      	ldrh	r3, [r3, #0]
 80169a8:	461a      	mov	r2, r3
 80169aa:	88fb      	ldrh	r3, [r7, #6]
 80169ac:	fb03 f302 	mul.w	r3, r3, r2
 80169b0:	3307      	adds	r3, #7
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	da00      	bge.n	80169b8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xd8>
 80169b6:	3307      	adds	r3, #7
 80169b8:	10db      	asrs	r3, r3, #3
 80169ba:	461a      	mov	r2, r3
 80169bc:	4b1d      	ldr	r3, [pc, #116]	; (8016a34 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x154>)
 80169be:	881b      	ldrh	r3, [r3, #0]
 80169c0:	fb03 f302 	mul.w	r3, r3, r2
 80169c4:	617b      	str	r3, [r7, #20]
            break;
 80169c6:	e006      	b.n	80169d6 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xf6>
            assert(0 && "Unsupported bit depth"); // Must be power of two
 80169c8:	4b1b      	ldr	r3, [pc, #108]	; (8016a38 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x158>)
 80169ca:	4a1c      	ldr	r2, [pc, #112]	; (8016a3c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x15c>)
 80169cc:	f44f 7139 	mov.w	r1, #740	; 0x2e4
 80169d0:	481b      	ldr	r0, [pc, #108]	; (8016a40 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x160>)
 80169d2:	f00b fe09 	bl	80225e8 <__assert_func>
        uint8_t* buffer = static_cast<uint8_t*>(adr);
 80169d6:	68bb      	ldr	r3, [r7, #8]
 80169d8:	613b      	str	r3, [r7, #16]
        frameBuffer0 = reinterpret_cast<uint16_t*>(buffer);
 80169da:	68fb      	ldr	r3, [r7, #12]
 80169dc:	693a      	ldr	r2, [r7, #16]
 80169de:	639a      	str	r2, [r3, #56]	; 0x38
        if (useDoubleBuffering)
 80169e0:	797b      	ldrb	r3, [r7, #5]
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d007      	beq.n	80169f6 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x116>
            buffer += bufferSizeInBytes;
 80169e6:	693a      	ldr	r2, [r7, #16]
 80169e8:	697b      	ldr	r3, [r7, #20]
 80169ea:	4413      	add	r3, r2
 80169ec:	613b      	str	r3, [r7, #16]
            frameBuffer1 = reinterpret_cast<uint16_t*>(buffer);
 80169ee:	68fb      	ldr	r3, [r7, #12]
 80169f0:	693a      	ldr	r2, [r7, #16]
 80169f2:	63da      	str	r2, [r3, #60]	; 0x3c
 80169f4:	e002      	b.n	80169fc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11c>
            frameBuffer1 = 0;
 80169f6:	68fb      	ldr	r3, [r7, #12]
 80169f8:	2200      	movs	r2, #0
 80169fa:	63da      	str	r2, [r3, #60]	; 0x3c
        if (useAnimationStorage)
 80169fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016a00:	2b00      	cmp	r3, #0
 8016a02:	d007      	beq.n	8016a14 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x134>
            buffer += bufferSizeInBytes;
 8016a04:	693a      	ldr	r2, [r7, #16]
 8016a06:	697b      	ldr	r3, [r7, #20]
 8016a08:	4413      	add	r3, r2
 8016a0a:	613b      	str	r3, [r7, #16]
            frameBuffer2 = reinterpret_cast<uint16_t*>(buffer);
 8016a0c:	68fb      	ldr	r3, [r7, #12]
 8016a0e:	693a      	ldr	r2, [r7, #16]
 8016a10:	641a      	str	r2, [r3, #64]	; 0x40
 8016a12:	e002      	b.n	8016a1a <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x13a>
            frameBuffer2 = 0;
 8016a14:	68fb      	ldr	r3, [r7, #12]
 8016a16:	2200      	movs	r2, #0
 8016a18:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = useDoubleBuffering;
 8016a1a:	4a0a      	ldr	r2, [pc, #40]	; (8016a44 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x164>)
 8016a1c:	797b      	ldrb	r3, [r7, #5]
 8016a1e:	7013      	strb	r3, [r2, #0]
        USE_ANIMATION_STORAGE = useAnimationStorage;
 8016a20:	4a09      	ldr	r2, [pc, #36]	; (8016a48 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x168>)
 8016a22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016a26:	7013      	strb	r3, [r2, #0]
    }
 8016a28:	bf00      	nop
 8016a2a:	3718      	adds	r7, #24
 8016a2c:	46bd      	mov	sp, r7
 8016a2e:	bd80      	pop	{r7, pc}
 8016a30:	20009d2c 	.word	0x20009d2c
 8016a34:	20009d2e 	.word	0x20009d2e
 8016a38:	08023df8 	.word	0x08023df8
 8016a3c:	08023e18 	.word	0x08023e18
 8016a40:	08023e6c 	.word	0x08023e6c
 8016a44:	20009d36 	.word	0x20009d36
 8016a48:	20009d37 	.word	0x20009d37

08016a4c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 8016a4c:	b580      	push	{r7, lr}
 8016a4e:	b084      	sub	sp, #16
 8016a50:	af00      	add	r7, sp, #0
 8016a52:	60f8      	str	r0, [r7, #12]
 8016a54:	60b9      	str	r1, [r7, #8]
 8016a56:	607a      	str	r2, [r7, #4]
 8016a58:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8016a5a:	68bb      	ldr	r3, [r7, #8]
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d106      	bne.n	8016a6e <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 8016a60:	4b11      	ldr	r3, [pc, #68]	; (8016aa8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 8016a62:	4a12      	ldr	r2, [pc, #72]	; (8016aac <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 8016a64:	f44f 7143 	mov.w	r1, #780	; 0x30c
 8016a68:	4811      	ldr	r0, [pc, #68]	; (8016ab0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 8016a6a:	f00b fdbd 	bl	80225e8 <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 8016a6e:	68fb      	ldr	r3, [r7, #12]
 8016a70:	68ba      	ldr	r2, [r7, #8]
 8016a72:	639a      	str	r2, [r3, #56]	; 0x38
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	687a      	ldr	r2, [r7, #4]
 8016a78:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8016a7a:	68fb      	ldr	r3, [r7, #12]
 8016a7c:	683a      	ldr	r2, [r7, #0]
 8016a7e:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	bf14      	ite	ne
 8016a86:	2301      	movne	r3, #1
 8016a88:	2300      	moveq	r3, #0
 8016a8a:	b2da      	uxtb	r2, r3
 8016a8c:	4b09      	ldr	r3, [pc, #36]	; (8016ab4 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8016a8e:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8016a90:	683b      	ldr	r3, [r7, #0]
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	bf14      	ite	ne
 8016a96:	2301      	movne	r3, #1
 8016a98:	2300      	moveq	r3, #0
 8016a9a:	b2da      	uxtb	r2, r3
 8016a9c:	4b06      	ldr	r3, [pc, #24]	; (8016ab8 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8016a9e:	701a      	strb	r2, [r3, #0]
    }
 8016aa0:	bf00      	nop
 8016aa2:	3710      	adds	r7, #16
 8016aa4:	46bd      	mov	sp, r7
 8016aa6:	bd80      	pop	{r7, pc}
 8016aa8:	08023edc 	.word	0x08023edc
 8016aac:	08023f14 	.word	0x08023f14
 8016ab0:	08023e6c 	.word	0x08023e6c
 8016ab4:	20009d36 	.word	0x20009d36
 8016ab8:	20009d37 	.word	0x20009d37

08016abc <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 8016abc:	b580      	push	{r7, lr}
 8016abe:	b082      	sub	sp, #8
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	6078      	str	r0, [r7, #4]
 8016ac4:	460b      	mov	r3, r1
 8016ac6:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d004      	beq.n	8016ada <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016ad4:	887a      	ldrh	r2, [r7, #2]
 8016ad6:	4610      	mov	r0, r2
 8016ad8:	4798      	blx	r3
        }
    }
 8016ada:	bf00      	nop
 8016adc:	3708      	adds	r7, #8
 8016ade:	46bd      	mov	sp, r7
 8016ae0:	bd80      	pop	{r7, pc}
	...

08016ae4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 8016ae4:	b480      	push	{r7}
 8016ae6:	b083      	sub	sp, #12
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016af8:	429a      	cmp	r2, r3
 8016afa:	d017      	beq.n	8016b2c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8016afc:	4b1a      	ldr	r3, [pc, #104]	; (8016b68 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8016afe:	781b      	ldrb	r3, [r3, #0]
 8016b00:	2b00      	cmp	r3, #0
 8016b02:	d12a      	bne.n	8016b5a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8016b04:	4b19      	ldr	r3, [pc, #100]	; (8016b6c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8016b06:	881a      	ldrh	r2, [r3, #0]
 8016b08:	4b19      	ldr	r3, [pc, #100]	; (8016b70 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8016b0a:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8016b0c:	4b19      	ldr	r3, [pc, #100]	; (8016b74 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8016b0e:	881a      	ldrh	r2, [r3, #0]
 8016b10:	4b19      	ldr	r3, [pc, #100]	; (8016b78 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8016b12:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8016b14:	4b16      	ldr	r3, [pc, #88]	; (8016b70 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8016b16:	881a      	ldrh	r2, [r3, #0]
 8016b18:	4b16      	ldr	r3, [pc, #88]	; (8016b74 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8016b1a:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 8016b1c:	4b16      	ldr	r3, [pc, #88]	; (8016b78 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8016b1e:	881a      	ldrh	r2, [r3, #0]
 8016b20:	4b12      	ldr	r3, [pc, #72]	; (8016b6c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8016b22:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 8016b24:	4b10      	ldr	r3, [pc, #64]	; (8016b68 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8016b26:	2201      	movs	r2, #1
 8016b28:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 8016b2a:	e016      	b.n	8016b5a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 8016b2c:	4b0e      	ldr	r3, [pc, #56]	; (8016b68 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8016b2e:	781b      	ldrb	r3, [r3, #0]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d012      	beq.n	8016b5a <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 8016b34:	4b0f      	ldr	r3, [pc, #60]	; (8016b74 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8016b36:	881a      	ldrh	r2, [r3, #0]
 8016b38:	4b0d      	ldr	r3, [pc, #52]	; (8016b70 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8016b3a:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 8016b3c:	4b0b      	ldr	r3, [pc, #44]	; (8016b6c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8016b3e:	881a      	ldrh	r2, [r3, #0]
 8016b40:	4b0d      	ldr	r3, [pc, #52]	; (8016b78 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8016b42:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 8016b44:	4b0c      	ldr	r3, [pc, #48]	; (8016b78 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8016b46:	881a      	ldrh	r2, [r3, #0]
 8016b48:	4b0a      	ldr	r3, [pc, #40]	; (8016b74 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8016b4a:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 8016b4c:	4b08      	ldr	r3, [pc, #32]	; (8016b70 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 8016b4e:	881a      	ldrh	r2, [r3, #0]
 8016b50:	4b06      	ldr	r3, [pc, #24]	; (8016b6c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 8016b52:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 8016b54:	4b04      	ldr	r3, [pc, #16]	; (8016b68 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8016b56:	2200      	movs	r2, #0
 8016b58:	701a      	strb	r2, [r3, #0]
    }
 8016b5a:	bf00      	nop
 8016b5c:	370c      	adds	r7, #12
 8016b5e:	46bd      	mov	sp, r7
 8016b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b64:	4770      	bx	lr
 8016b66:	bf00      	nop
 8016b68:	20009d30 	.word	0x20009d30
 8016b6c:	20009d2c 	.word	0x20009d2c
 8016b70:	20009d32 	.word	0x20009d32
 8016b74:	20009d2e 	.word	0x20009d2e
 8016b78:	20009d34 	.word	0x20009d34

08016b7c <__NVIC_EnableIRQ>:
{
 8016b7c:	b480      	push	{r7}
 8016b7e:	b083      	sub	sp, #12
 8016b80:	af00      	add	r7, sp, #0
 8016b82:	4603      	mov	r3, r0
 8016b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016b8a:	2b00      	cmp	r3, #0
 8016b8c:	db0b      	blt.n	8016ba6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016b8e:	79fb      	ldrb	r3, [r7, #7]
 8016b90:	f003 021f 	and.w	r2, r3, #31
 8016b94:	4907      	ldr	r1, [pc, #28]	; (8016bb4 <__NVIC_EnableIRQ+0x38>)
 8016b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016b9a:	095b      	lsrs	r3, r3, #5
 8016b9c:	2001      	movs	r0, #1
 8016b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8016ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8016ba6:	bf00      	nop
 8016ba8:	370c      	adds	r7, #12
 8016baa:	46bd      	mov	sp, r7
 8016bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bb0:	4770      	bx	lr
 8016bb2:	bf00      	nop
 8016bb4:	e000e100 	.word	0xe000e100

08016bb8 <__NVIC_DisableIRQ>:
{
 8016bb8:	b480      	push	{r7}
 8016bba:	b083      	sub	sp, #12
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	4603      	mov	r3, r0
 8016bc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	db12      	blt.n	8016bf0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016bca:	79fb      	ldrb	r3, [r7, #7]
 8016bcc:	f003 021f 	and.w	r2, r3, #31
 8016bd0:	490a      	ldr	r1, [pc, #40]	; (8016bfc <__NVIC_DisableIRQ+0x44>)
 8016bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016bd6:	095b      	lsrs	r3, r3, #5
 8016bd8:	2001      	movs	r0, #1
 8016bda:	fa00 f202 	lsl.w	r2, r0, r2
 8016bde:	3320      	adds	r3, #32
 8016be0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8016be4:	f3bf 8f4f 	dsb	sy
}
 8016be8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8016bea:	f3bf 8f6f 	isb	sy
}
 8016bee:	bf00      	nop
}
 8016bf0:	bf00      	nop
 8016bf2:	370c      	adds	r7, #12
 8016bf4:	46bd      	mov	sp, r7
 8016bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bfa:	4770      	bx	lr
 8016bfc:	e000e100 	.word	0xe000e100

08016c00 <__NVIC_SetPriority>:
{
 8016c00:	b480      	push	{r7}
 8016c02:	b083      	sub	sp, #12
 8016c04:	af00      	add	r7, sp, #0
 8016c06:	4603      	mov	r3, r0
 8016c08:	6039      	str	r1, [r7, #0]
 8016c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016c10:	2b00      	cmp	r3, #0
 8016c12:	db0a      	blt.n	8016c2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016c14:	683b      	ldr	r3, [r7, #0]
 8016c16:	b2da      	uxtb	r2, r3
 8016c18:	490c      	ldr	r1, [pc, #48]	; (8016c4c <__NVIC_SetPriority+0x4c>)
 8016c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016c1e:	0112      	lsls	r2, r2, #4
 8016c20:	b2d2      	uxtb	r2, r2
 8016c22:	440b      	add	r3, r1
 8016c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016c28:	e00a      	b.n	8016c40 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016c2a:	683b      	ldr	r3, [r7, #0]
 8016c2c:	b2da      	uxtb	r2, r3
 8016c2e:	4908      	ldr	r1, [pc, #32]	; (8016c50 <__NVIC_SetPriority+0x50>)
 8016c30:	79fb      	ldrb	r3, [r7, #7]
 8016c32:	f003 030f 	and.w	r3, r3, #15
 8016c36:	3b04      	subs	r3, #4
 8016c38:	0112      	lsls	r2, r2, #4
 8016c3a:	b2d2      	uxtb	r2, r2
 8016c3c:	440b      	add	r3, r1
 8016c3e:	761a      	strb	r2, [r3, #24]
}
 8016c40:	bf00      	nop
 8016c42:	370c      	adds	r7, #12
 8016c44:	46bd      	mov	sp, r7
 8016c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c4a:	4770      	bx	lr
 8016c4c:	e000e100 	.word	0xe000e100
 8016c50:	e000ed00 	.word	0xe000ed00

08016c54 <_ZN10STM32F7HAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8016c54:	b580      	push	{r7, lr}
 8016c56:	b082      	sub	sp, #8
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	4618      	mov	r0, r3
 8016c60:	f006 fb0f 	bl	801d282 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8016c64:	bf00      	nop
 8016c66:	3708      	adds	r7, #8
 8016c68:	46bd      	mov	sp, r7
 8016c6a:	bd80      	pop	{r7, pc}

08016c6c <_ZNK10STM32F7HAL17getTFTFrameBufferEv>:
/* USER CODE END user includes */

extern LTDC_HandleTypeDef hltdc;

uint16_t* STM32F7HAL::getTFTFrameBuffer() const
{
 8016c6c:	b480      	push	{r7}
 8016c6e:	b083      	sub	sp, #12
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8016c74:	4b03      	ldr	r3, [pc, #12]	; (8016c84 <_ZNK10STM32F7HAL17getTFTFrameBufferEv+0x18>)
 8016c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8016c78:	4618      	mov	r0, r3
 8016c7a:	370c      	adds	r7, #12
 8016c7c:	46bd      	mov	sp, r7
 8016c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c82:	4770      	bx	lr
 8016c84:	40016884 	.word	0x40016884

08016c88 <_ZN10STM32F7HAL17setTFTFrameBufferEPt>:

void STM32F7HAL::setTFTFrameBuffer(uint16_t* adr)
{
 8016c88:	b480      	push	{r7}
 8016c8a:	b083      	sub	sp, #12
 8016c8c:	af00      	add	r7, sp, #0
 8016c8e:	6078      	str	r0, [r7, #4]
 8016c90:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8016c92:	4a06      	ldr	r2, [pc, #24]	; (8016cac <_ZN10STM32F7HAL17setTFTFrameBufferEPt+0x24>)
 8016c94:	683b      	ldr	r3, [r7, #0]
 8016c96:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8016c98:	4b05      	ldr	r3, [pc, #20]	; (8016cb0 <_ZN10STM32F7HAL17setTFTFrameBufferEPt+0x28>)
 8016c9a:	2201      	movs	r2, #1
 8016c9c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8016c9e:	bf00      	nop
 8016ca0:	370c      	adds	r7, #12
 8016ca2:	46bd      	mov	sp, r7
 8016ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca8:	4770      	bx	lr
 8016caa:	bf00      	nop
 8016cac:	40016884 	.word	0x40016884
 8016cb0:	40016800 	.word	0x40016800

08016cb4 <_ZN10STM32F7HAL17getTFTCurrentLineEv>:

uint16_t STM32F7HAL::getTFTCurrentLine()
{
 8016cb4:	b480      	push	{r7}
 8016cb6:	b085      	sub	sp, #20
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8016cbc:	4b0d      	ldr	r3, [pc, #52]	; (8016cf4 <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x40>)
 8016cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016cc0:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8016cc2:	4b0c      	ldr	r3, [pc, #48]	; (8016cf4 <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x40>)
 8016cc4:	68db      	ldr	r3, [r3, #12]
 8016cc6:	b29b      	uxth	r3, r3
 8016cc8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016ccc:	b29b      	uxth	r3, r3
 8016cce:	3301      	adds	r3, #1
 8016cd0:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 8016cd2:	89fa      	ldrh	r2, [r7, #14]
 8016cd4:	89bb      	ldrh	r3, [r7, #12]
 8016cd6:	429a      	cmp	r2, r3
 8016cd8:	d201      	bcs.n	8016cde <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 8016cda:	2300      	movs	r3, #0
 8016cdc:	e003      	b.n	8016ce6 <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 8016cde:	89fa      	ldrh	r2, [r7, #14]
 8016ce0:	89bb      	ldrh	r3, [r7, #12]
 8016ce2:	1ad3      	subs	r3, r2, r3
 8016ce4:	b29b      	uxth	r3, r3
    }
}
 8016ce6:	4618      	mov	r0, r3
 8016ce8:	3714      	adds	r7, #20
 8016cea:	46bd      	mov	sp, r7
 8016cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cf0:	4770      	bx	lr
 8016cf2:	bf00      	nop
 8016cf4:	40016800 	.word	0x40016800

08016cf8 <_ZN10STM32F7HAL19configureInterruptsEv>:

void STM32F7HAL::configureInterrupts()
{
 8016cf8:	b580      	push	{r7, lr}
 8016cfa:	b082      	sub	sp, #8
 8016cfc:	af00      	add	r7, sp, #0
 8016cfe:	6078      	str	r0, [r7, #4]
    // These two priorities MUST be EQUAL, and MUST be functionally lower than RTOS scheduler interrupts.
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8016d00:	2109      	movs	r1, #9
 8016d02:	205a      	movs	r0, #90	; 0x5a
 8016d04:	f7ff ff7c 	bl	8016c00 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8016d08:	2109      	movs	r1, #9
 8016d0a:	2058      	movs	r0, #88	; 0x58
 8016d0c:	f7ff ff78 	bl	8016c00 <__NVIC_SetPriority>
}
 8016d10:	bf00      	nop
 8016d12:	3708      	adds	r7, #8
 8016d14:	46bd      	mov	sp, r7
 8016d16:	bd80      	pop	{r7, pc}

08016d18 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;

/* Enable LCD line interrupt, when entering video (active) area */
void STM32F7HAL::enableLCDControllerInterrupt()
{
 8016d18:	b580      	push	{r7, lr}
 8016d1a:	b082      	sub	sp, #8
 8016d1c:	af00      	add	r7, sp, #0
 8016d1e:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8016d20:	4b12      	ldr	r3, [pc, #72]	; (8016d6c <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x54>)
 8016d22:	68db      	ldr	r3, [r3, #12]
 8016d24:	b29b      	uxth	r3, r3
 8016d26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016d2a:	b29b      	uxth	r3, r3
 8016d2c:	3b01      	subs	r3, #1
 8016d2e:	b29a      	uxth	r2, r3
 8016d30:	4b0f      	ldr	r3, [pc, #60]	; (8016d70 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x58>)
 8016d32:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8016d34:	4b0d      	ldr	r3, [pc, #52]	; (8016d6c <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x54>)
 8016d36:	691b      	ldr	r3, [r3, #16]
 8016d38:	b29b      	uxth	r3, r3
 8016d3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016d3e:	b29b      	uxth	r3, r3
 8016d40:	3b01      	subs	r3, #1
 8016d42:	b29a      	uxth	r2, r3
 8016d44:	4b0b      	ldr	r3, [pc, #44]	; (8016d74 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x5c>)
 8016d46:	801a      	strh	r2, [r3, #0]

    HAL_LTDC_ProgramLineEvent(&hltdc, lcd_int_active_line);
 8016d48:	4b09      	ldr	r3, [pc, #36]	; (8016d70 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x58>)
 8016d4a:	881b      	ldrh	r3, [r3, #0]
 8016d4c:	4619      	mov	r1, r3
 8016d4e:	480a      	ldr	r0, [pc, #40]	; (8016d78 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x60>)
 8016d50:	f7ee fc56 	bl	8005600 <HAL_LTDC_ProgramLineEvent>
    __HAL_LTDC_ENABLE_IT(&hltdc, LTDC_IT_LI|LTDC_IT_FU); /* Enable line and FIFO underrun interrupts */
 8016d54:	4b08      	ldr	r3, [pc, #32]	; (8016d78 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x60>)
 8016d56:	681b      	ldr	r3, [r3, #0]
 8016d58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016d5a:	4b07      	ldr	r3, [pc, #28]	; (8016d78 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x60>)
 8016d5c:	681b      	ldr	r3, [r3, #0]
 8016d5e:	f042 0203 	orr.w	r2, r2, #3
 8016d62:	635a      	str	r2, [r3, #52]	; 0x34
}
 8016d64:	bf00      	nop
 8016d66:	3708      	adds	r7, #8
 8016d68:	46bd      	mov	sp, r7
 8016d6a:	bd80      	pop	{r7, pc}
 8016d6c:	40016800 	.word	0x40016800
 8016d70:	2000937e 	.word	0x2000937e
 8016d74:	20009380 	.word	0x20009380
 8016d78:	2000924c 	.word	0x2000924c

08016d7c <_ZN10STM32F7HAL17disableInterruptsEv>:

void STM32F7HAL::disableInterrupts()
{
 8016d7c:	b580      	push	{r7, lr}
 8016d7e:	b082      	sub	sp, #8
 8016d80:	af00      	add	r7, sp, #0
 8016d82:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(LTDC_IRQn);
 8016d84:	2058      	movs	r0, #88	; 0x58
 8016d86:	f7ff ff17 	bl	8016bb8 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8016d8a:	205a      	movs	r0, #90	; 0x5a
 8016d8c:	f7ff ff14 	bl	8016bb8 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_ER_IRQn);
 8016d90:	2059      	movs	r0, #89	; 0x59
 8016d92:	f7ff ff11 	bl	8016bb8 <__NVIC_DisableIRQ>
}
 8016d96:	bf00      	nop
 8016d98:	3708      	adds	r7, #8
 8016d9a:	46bd      	mov	sp, r7
 8016d9c:	bd80      	pop	{r7, pc}

08016d9e <_ZN10STM32F7HAL16enableInterruptsEv>:

void STM32F7HAL::enableInterrupts()
{
 8016d9e:	b580      	push	{r7, lr}
 8016da0:	b082      	sub	sp, #8
 8016da2:	af00      	add	r7, sp, #0
 8016da4:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(LTDC_IRQn);
 8016da6:	2058      	movs	r0, #88	; 0x58
 8016da8:	f7ff fee8 	bl	8016b7c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(DMA2D_IRQn);
 8016dac:	205a      	movs	r0, #90	; 0x5a
 8016dae:	f7ff fee5 	bl	8016b7c <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_ER_IRQn);
 8016db2:	2059      	movs	r0, #89	; 0x59
 8016db4:	f7ff fee2 	bl	8016b7c <__NVIC_EnableIRQ>
}
 8016db8:	bf00      	nop
 8016dba:	3708      	adds	r7, #8
 8016dbc:	46bd      	mov	sp, r7
 8016dbe:	bd80      	pop	{r7, pc}

08016dc0 <_ZN10STM32F7HAL16flushFrameBufferERKN8touchgfx4RectE>:

void STM32F7HAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8016dc0:	b580      	push	{r7, lr}
 8016dc2:	b082      	sub	sp, #8
 8016dc4:	af00      	add	r7, sp, #0
 8016dc6:	6078      	str	r0, [r7, #4]
 8016dc8:	6039      	str	r1, [r7, #0]
    // If the framebuffer is placed in cached memory (e.g. SRAM) then we need
    // the CPU to read back the latest pixels produced by the h/w accelerator
    // thus we have to both flush and invalidate the Dcache prior to letting
    // DMA2D accessing it. That's done using SCB_CleanInvalidateDCache().
    HAL::flushFrameBuffer(rect);
 8016dca:	687b      	ldr	r3, [r7, #4]
 8016dcc:	6839      	ldr	r1, [r7, #0]
 8016dce:	4618      	mov	r0, r3
 8016dd0:	f006 fa5d 	bl	801d28e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8016dd4:	bf00      	nop
 8016dd6:	3708      	adds	r7, #8
 8016dd8:	46bd      	mov	sp, r7
 8016dda:	bd80      	pop	{r7, pc}

08016ddc <HAL_LTDC_LineEventCallback>:

extern "C"
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc)
{
 8016ddc:	b580      	push	{r7, lr}
 8016dde:	b082      	sub	sp, #8
 8016de0:	af00      	add	r7, sp, #0
 8016de2:	6078      	str	r0, [r7, #4]
    if (LTDC->LIPCR == lcd_int_active_line)
 8016de4:	4b1a      	ldr	r3, [pc, #104]	; (8016e50 <HAL_LTDC_LineEventCallback+0x74>)
 8016de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016de8:	4a1a      	ldr	r2, [pc, #104]	; (8016e54 <HAL_LTDC_LineEventCallback+0x78>)
 8016dea:	8812      	ldrh	r2, [r2, #0]
 8016dec:	4293      	cmp	r3, r2
 8016dee:	bf0c      	ite	eq
 8016df0:	2301      	moveq	r3, #1
 8016df2:	2300      	movne	r3, #0
 8016df4:	b2db      	uxtb	r3, r3
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d017      	beq.n	8016e2a <HAL_LTDC_LineEventCallback+0x4e>
    {
        //entering active area
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8016dfa:	4b17      	ldr	r3, [pc, #92]	; (8016e58 <HAL_LTDC_LineEventCallback+0x7c>)
 8016dfc:	881b      	ldrh	r3, [r3, #0]
 8016dfe:	4619      	mov	r1, r3
 8016e00:	6878      	ldr	r0, [r7, #4]
 8016e02:	f7ee fbfd 	bl	8005600 <HAL_LTDC_ProgramLineEvent>
        HAL::getInstance()->vSync();
 8016e06:	f7f8 fb5b 	bl	800f4c0 <_ZN8touchgfx3HAL11getInstanceEv>
 8016e0a:	4603      	mov	r3, r0
 8016e0c:	4618      	mov	r0, r3
 8016e0e:	f7ff fd38 	bl	8016882 <_ZN8touchgfx3HAL5vSyncEv>
        OSWrappers::signalVSync();
 8016e12:	f7fa f947 	bl	80110a4 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
        // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
        // Note: task will also swap when it wakes up, but that operation is guarded and will not have
        // any effect if already swapped.
        HAL::getInstance()->swapFrameBuffers();
 8016e16:	f7f8 fb53 	bl	800f4c0 <_ZN8touchgfx3HAL11getInstanceEv>
 8016e1a:	4603      	mov	r3, r0
 8016e1c:	4618      	mov	r0, r3
 8016e1e:	f006 fde3 	bl	801d9e8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        GPIO::set(GPIO::VSYNC_FREQ);
 8016e22:	2000      	movs	r0, #0
 8016e24:	f7fe fd7e 	bl	8015924 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
        //exiting active area
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
        GPIO::clear(GPIO::VSYNC_FREQ);
        HAL::getInstance()->frontPorchEntered();
    }
}
 8016e28:	e00e      	b.n	8016e48 <HAL_LTDC_LineEventCallback+0x6c>
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8016e2a:	4b0a      	ldr	r3, [pc, #40]	; (8016e54 <HAL_LTDC_LineEventCallback+0x78>)
 8016e2c:	881b      	ldrh	r3, [r3, #0]
 8016e2e:	4619      	mov	r1, r3
 8016e30:	6878      	ldr	r0, [r7, #4]
 8016e32:	f7ee fbe5 	bl	8005600 <HAL_LTDC_ProgramLineEvent>
        GPIO::clear(GPIO::VSYNC_FREQ);
 8016e36:	2000      	movs	r0, #0
 8016e38:	f7fe fd7f 	bl	801593a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        HAL::getInstance()->frontPorchEntered();
 8016e3c:	f7f8 fb40 	bl	800f4c0 <_ZN8touchgfx3HAL11getInstanceEv>
 8016e40:	4603      	mov	r3, r0
 8016e42:	4618      	mov	r0, r3
 8016e44:	f7ff fcfe 	bl	8016844 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
}
 8016e48:	bf00      	nop
 8016e4a:	3708      	adds	r7, #8
 8016e4c:	46bd      	mov	sp, r7
 8016e4e:	bd80      	pop	{r7, pc}
 8016e50:	40016800 	.word	0x40016800
 8016e54:	2000937e 	.word	0x2000937e
 8016e58:	20009380 	.word	0x20009380

08016e5c <_ZN8touchgfx22STM32F7Instrumentation4initEv>:
namespace touchgfx
{
static TIM_HandleTypeDef htim1;

void STM32F7Instrumentation::init()
{
 8016e5c:	b580      	push	{r7, lr}
 8016e5e:	b0a4      	sub	sp, #144	; 0x90
 8016e60:	af00      	add	r7, sp, #0
 8016e62:	6078      	str	r0, [r7, #4]
   RCC_ClkInitTypeDef clkconfig;
    uint32_t uwTimclock, uwAPB1Prescaler = 0U;
 8016e64:	2300      	movs	r3, #0
 8016e66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    uint32_t pFLatency;

    __TIM2_CLK_ENABLE();
 8016e6a:	4b84      	ldr	r3, [pc, #528]	; (801707c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x220>)
 8016e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e6e:	4a83      	ldr	r2, [pc, #524]	; (801707c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x220>)
 8016e70:	f043 0301 	orr.w	r3, r3, #1
 8016e74:	6413      	str	r3, [r2, #64]	; 0x40
 8016e76:	4b81      	ldr	r3, [pc, #516]	; (801707c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x220>)
 8016e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016e7a:	f003 0301 	and.w	r3, r3, #1
 8016e7e:	60bb      	str	r3, [r7, #8]
 8016e80:	68bb      	ldr	r3, [r7, #8]

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8016e82:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016e86:	2200      	movs	r2, #0
 8016e88:	601a      	str	r2, [r3, #0]
 8016e8a:	605a      	str	r2, [r3, #4]
 8016e8c:	609a      	str	r2, [r3, #8]
 8016e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8016e90:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016e94:	2200      	movs	r2, #0
 8016e96:	601a      	str	r2, [r3, #0]
 8016e98:	605a      	str	r2, [r3, #4]
 8016e9a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8016e9c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016ea0:	2200      	movs	r2, #0
 8016ea2:	601a      	str	r2, [r3, #0]
 8016ea4:	605a      	str	r2, [r3, #4]
 8016ea6:	609a      	str	r2, [r3, #8]
 8016ea8:	60da      	str	r2, [r3, #12]
 8016eaa:	611a      	str	r2, [r3, #16]
 8016eac:	615a      	str	r2, [r3, #20]
 8016eae:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8016eb0:	f107 030c 	add.w	r3, r7, #12
 8016eb4:	222c      	movs	r2, #44	; 0x2c
 8016eb6:	2100      	movs	r1, #0
 8016eb8:	4618      	mov	r0, r3
 8016eba:	f00b fc13 	bl	80226e4 <memset>
  htim1.Instance = TIM1;
 8016ebe:	4b70      	ldr	r3, [pc, #448]	; (8017080 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016ec0:	4a70      	ldr	r2, [pc, #448]	; (8017084 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x228>)
 8016ec2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8016ec4:	4b6e      	ldr	r3, [pc, #440]	; (8017080 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016ec6:	2200      	movs	r2, #0
 8016ec8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016eca:	4b6d      	ldr	r3, [pc, #436]	; (8017080 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016ecc:	2200      	movs	r2, #0
 8016ece:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8016ed0:	4b6b      	ldr	r3, [pc, #428]	; (8017080 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016ed2:	2200      	movs	r2, #0
 8016ed4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8016ed6:	4b6a      	ldr	r3, [pc, #424]	; (8017080 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016ed8:	2200      	movs	r2, #0
 8016eda:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8016edc:	4b68      	ldr	r3, [pc, #416]	; (8017080 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016ede:	2200      	movs	r2, #0
 8016ee0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016ee2:	4b67      	ldr	r3, [pc, #412]	; (8017080 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016ee4:	2200      	movs	r2, #0
 8016ee6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8016ee8:	4865      	ldr	r0, [pc, #404]	; (8017080 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016eea:	f7f1 ffcb 	bl	8008e84 <HAL_TIM_Base_Init>
 8016eee:	4603      	mov	r3, r0
 8016ef0:	2b00      	cmp	r3, #0
 8016ef2:	bf14      	ite	ne
 8016ef4:	2301      	movne	r3, #1
 8016ef6:	2300      	moveq	r3, #0
 8016ef8:	b2db      	uxtb	r3, r3
 8016efa:	2b00      	cmp	r3, #0
 8016efc:	d001      	beq.n	8016f02 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xa6>
  {
    Error_Handler( );
 8016efe:	f001 fb23 	bl	8018548 <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8016f02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016f06:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8016f08:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016f0c:	4619      	mov	r1, r3
 8016f0e:	485c      	ldr	r0, [pc, #368]	; (8017080 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016f10:	f7f2 fa9a 	bl	8009448 <HAL_TIM_ConfigClockSource>
 8016f14:	4603      	mov	r3, r0
 8016f16:	2b00      	cmp	r3, #0
 8016f18:	bf14      	ite	ne
 8016f1a:	2301      	movne	r3, #1
 8016f1c:	2300      	moveq	r3, #0
 8016f1e:	b2db      	uxtb	r3, r3
 8016f20:	2b00      	cmp	r3, #0
 8016f22:	d001      	beq.n	8016f28 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xcc>
  {
    Error_Handler( );
 8016f24:	f001 fb10 	bl	8018548 <Error_Handler>
  }

  htim1.Instance = TIM1;
 8016f28:	4b55      	ldr	r3, [pc, #340]	; (8017080 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016f2a:	4a56      	ldr	r2, [pc, #344]	; (8017084 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x228>)
 8016f2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8016f2e:	4b54      	ldr	r3, [pc, #336]	; (8017080 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016f30:	2200      	movs	r2, #0
 8016f32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016f34:	4b52      	ldr	r3, [pc, #328]	; (8017080 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016f36:	2200      	movs	r2, #0
 8016f38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8016f3a:	4b51      	ldr	r3, [pc, #324]	; (8017080 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016f3c:	2200      	movs	r2, #0
 8016f3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8016f40:	4b4f      	ldr	r3, [pc, #316]	; (8017080 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016f42:	2200      	movs	r2, #0
 8016f44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8016f46:	4b4e      	ldr	r3, [pc, #312]	; (8017080 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016f48:	2200      	movs	r2, #0
 8016f4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016f4c:	4b4c      	ldr	r3, [pc, #304]	; (8017080 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016f4e:	2200      	movs	r2, #0
 8016f50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8016f52:	484b      	ldr	r0, [pc, #300]	; (8017080 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016f54:	f7f2 f816 	bl	8008f84 <HAL_TIM_PWM_Init>
 8016f58:	4603      	mov	r3, r0
 8016f5a:	2b00      	cmp	r3, #0
 8016f5c:	bf14      	ite	ne
 8016f5e:	2301      	movne	r3, #1
 8016f60:	2300      	moveq	r3, #0
 8016f62:	b2db      	uxtb	r3, r3
 8016f64:	2b00      	cmp	r3, #0
 8016f66:	d001      	beq.n	8016f6c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x110>
  {
    Error_Handler( );
 8016f68:	f001 faee 	bl	8018548 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8016f6c:	2300      	movs	r3, #0
 8016f6e:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8016f70:	2300      	movs	r3, #0
 8016f72:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8016f74:	2300      	movs	r3, #0
 8016f76:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8016f78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016f7c:	4619      	mov	r1, r3
 8016f7e:	4840      	ldr	r0, [pc, #256]	; (8017080 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016f80:	f7f2 fee8 	bl	8009d54 <HAL_TIMEx_MasterConfigSynchronization>
 8016f84:	4603      	mov	r3, r0
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	bf14      	ite	ne
 8016f8a:	2301      	movne	r3, #1
 8016f8c:	2300      	moveq	r3, #0
 8016f8e:	b2db      	uxtb	r3, r3
 8016f90:	2b00      	cmp	r3, #0
 8016f92:	d001      	beq.n	8016f98 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x13c>
  {
    Error_Handler( );
 8016f94:	f001 fad8 	bl	8018548 <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8016f98:	2360      	movs	r3, #96	; 0x60
 8016f9a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8016f9c:	2300      	movs	r3, #0
 8016f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8016fa0:	2300      	movs	r3, #0
 8016fa2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8016fa4:	2300      	movs	r3, #0
 8016fa6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8016fa8:	2300      	movs	r3, #0
 8016faa:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8016fac:	2300      	movs	r3, #0
 8016fae:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8016fb0:	2300      	movs	r3, #0
 8016fb2:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8016fb4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016fb8:	2200      	movs	r2, #0
 8016fba:	4619      	mov	r1, r3
 8016fbc:	4830      	ldr	r0, [pc, #192]	; (8017080 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016fbe:	f7f2 f92b 	bl	8009218 <HAL_TIM_PWM_ConfigChannel>
 8016fc2:	4603      	mov	r3, r0
 8016fc4:	2b00      	cmp	r3, #0
 8016fc6:	bf14      	ite	ne
 8016fc8:	2301      	movne	r3, #1
 8016fca:	2300      	moveq	r3, #0
 8016fcc:	b2db      	uxtb	r3, r3
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d001      	beq.n	8016fd6 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x17a>
  {
    Error_Handler( );
 8016fd2:	f001 fab9 	bl	8018548 <Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8016fd6:	2300      	movs	r3, #0
 8016fd8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8016fda:	2300      	movs	r3, #0
 8016fdc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8016fde:	2300      	movs	r3, #0
 8016fe0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.DeadTime = 0;
 8016fe2:	2300      	movs	r3, #0
 8016fe4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8016fe6:	2300      	movs	r3, #0
 8016fe8:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8016fea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016fee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8016ff0:	2300      	movs	r3, #0
 8016ff2:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8016ff4:	2300      	movs	r3, #0
 8016ff6:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8016ff8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016ffc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2Filter = 0;
 8016ffe:	2300      	movs	r3, #0
 8017000:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8017002:	2300      	movs	r3, #0
 8017004:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8017006:	f107 030c 	add.w	r3, r7, #12
 801700a:	4619      	mov	r1, r3
 801700c:	481c      	ldr	r0, [pc, #112]	; (8017080 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 801700e:	f7f2 fefd 	bl	8009e0c <HAL_TIMEx_ConfigBreakDeadTime>
 8017012:	4603      	mov	r3, r0
 8017014:	2b00      	cmp	r3, #0
 8017016:	bf14      	ite	ne
 8017018:	2301      	movne	r3, #1
 801701a:	2300      	moveq	r3, #0
 801701c:	b2db      	uxtb	r3, r3
 801701e:	2b00      	cmp	r3, #0
 8017020:	d001      	beq.n	8017026 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x1ca>
  {
    Error_Handler( );
 8017022:	f001 fa91 	bl	8018548 <Error_Handler>
  }

    /* Get clock configuration */
    HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8017026:	f107 0270 	add.w	r2, r7, #112	; 0x70
 801702a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 801702e:	4611      	mov	r1, r2
 8017030:	4618      	mov	r0, r3
 8017032:	f7ef fa29 	bl	8006488 <HAL_RCC_GetClockConfig>

    /* TIM2 is on APB1 bus */
    uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8017036:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801703a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 801703e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8017042:	2b00      	cmp	r3, #0
 8017044:	d104      	bne.n	8017050 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x1f4>
        uwTimclock = HAL_RCC_GetPCLK1Freq();
 8017046:	f7ef f9f7 	bl	8006438 <HAL_RCC_GetPCLK1Freq>
 801704a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 801704e:	e005      	b.n	801705c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x200>
    else
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8017050:	f7ef f9f2 	bl	8006438 <HAL_RCC_GetPCLK1Freq>
 8017054:	4603      	mov	r3, r0
 8017056:	005b      	lsls	r3, r3, #1
 8017058:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    m_sysclkRatio = HAL_RCC_GetHCLKFreq() / uwTimclock;
 801705c:	f7ef f9e0 	bl	8006420 <HAL_RCC_GetHCLKFreq>
 8017060:	4602      	mov	r2, r0
 8017062:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8017066:	fbb2 f2f3 	udiv	r2, r2, r3
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	60da      	str	r2, [r3, #12]

    HAL_TIM_Base_Start(&htim1);
 801706e:	4804      	ldr	r0, [pc, #16]	; (8017080 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8017070:	f7f1 ff34 	bl	8008edc <HAL_TIM_Base_Start>
}
 8017074:	bf00      	nop
 8017076:	3790      	adds	r7, #144	; 0x90
 8017078:	46bd      	mov	sp, r7
 801707a:	bd80      	pop	{r7, pc}
 801707c:	40023800 	.word	0x40023800
 8017080:	20009384 	.word	0x20009384
 8017084:	40010000 	.word	0x40010000

08017088 <_ZN8touchgfx22STM32F7Instrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int STM32F7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
 8017088:	b480      	push	{r7}
 801708a:	b085      	sub	sp, #20
 801708c:	af00      	add	r7, sp, #0
 801708e:	60f8      	str	r0, [r7, #12]
 8017090:	60b9      	str	r1, [r7, #8]
 8017092:	607a      	str	r2, [r7, #4]
 8017094:	603b      	str	r3, [r7, #0]
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8017096:	687a      	ldr	r2, [r7, #4]
 8017098:	68bb      	ldr	r3, [r7, #8]
 801709a:	1ad2      	subs	r2, r2, r3
 801709c:	683b      	ldr	r3, [r7, #0]
 801709e:	085b      	lsrs	r3, r3, #1
 80170a0:	441a      	add	r2, r3
 80170a2:	683b      	ldr	r3, [r7, #0]
 80170a4:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80170a8:	4618      	mov	r0, r3
 80170aa:	3714      	adds	r7, #20
 80170ac:	46bd      	mov	sp, r7
 80170ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170b2:	4770      	bx	lr

080170b4 <_ZN8touchgfx22STM32F7Instrumentation12getCPUCyclesEv>:

unsigned int STM32F7Instrumentation::getCPUCycles()
{
 80170b4:	b480      	push	{r7}
 80170b6:	b083      	sub	sp, #12
 80170b8:	af00      	add	r7, sp, #0
 80170ba:	6078      	str	r0, [r7, #4]
    return __HAL_TIM_GET_COUNTER(&htim1) * m_sysclkRatio;
 80170bc:	4b06      	ldr	r3, [pc, #24]	; (80170d8 <_ZN8touchgfx22STM32F7Instrumentation12getCPUCyclesEv+0x24>)
 80170be:	681b      	ldr	r3, [r3, #0]
 80170c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170c2:	687a      	ldr	r2, [r7, #4]
 80170c4:	68d2      	ldr	r2, [r2, #12]
 80170c6:	fb02 f303 	mul.w	r3, r2, r3
}
 80170ca:	4618      	mov	r0, r3
 80170cc:	370c      	adds	r7, #12
 80170ce:	46bd      	mov	sp, r7
 80170d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170d4:	4770      	bx	lr
 80170d6:	bf00      	nop
 80170d8:	20009384 	.word	0x20009384

080170dc <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb>:

void STM32F7Instrumentation::setMCUActive(bool active)
{
 80170dc:	b580      	push	{r7, lr}
 80170de:	b082      	sub	sp, #8
 80170e0:	af00      	add	r7, sp, #0
 80170e2:	6078      	str	r0, [r7, #4]
 80170e4:	460b      	mov	r3, r1
 80170e6:	70fb      	strb	r3, [r7, #3]
    if (active) //idle task sched out
 80170e8:	78fb      	ldrb	r3, [r7, #3]
 80170ea:	2b00      	cmp	r3, #0
 80170ec:	d00f      	beq.n	801710e <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb+0x32>
    {
        cc_consumed += getCPUCycles() - cc_in;
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	681b      	ldr	r3, [r3, #0]
 80170f2:	3310      	adds	r3, #16
 80170f4:	681b      	ldr	r3, [r3, #0]
 80170f6:	6878      	ldr	r0, [r7, #4]
 80170f8:	4798      	blx	r3
 80170fa:	4602      	mov	r2, r0
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	689b      	ldr	r3, [r3, #8]
 8017100:	1ad2      	subs	r2, r2, r3
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	685b      	ldr	r3, [r3, #4]
 8017106:	441a      	add	r2, r3
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	605a      	str	r2, [r3, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 801710c:	e008      	b.n	8017120 <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb+0x44>
        cc_in = getCPUCycles();
 801710e:	687b      	ldr	r3, [r7, #4]
 8017110:	681b      	ldr	r3, [r3, #0]
 8017112:	3310      	adds	r3, #16
 8017114:	681b      	ldr	r3, [r3, #0]
 8017116:	6878      	ldr	r0, [r7, #4]
 8017118:	4798      	blx	r3
 801711a:	4602      	mov	r2, r0
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	609a      	str	r2, [r3, #8]
}
 8017120:	bf00      	nop
 8017122:	3708      	adds	r7, #8
 8017124:	46bd      	mov	sp, r7
 8017126:	bd80      	pop	{r7, pc}

08017128 <_ZN8touchgfx22STM32F7TouchController4initEv>:
}

using namespace touchgfx;

void STM32F7TouchController::init()
{
 8017128:	b590      	push	{r4, r7, lr}
 801712a:	b083      	sub	sp, #12
 801712c:	af00      	add	r7, sp, #0
 801712e:	6078      	str	r0, [r7, #4]
 /* USER CODE BEGIN F4TouchController_init */

  /* Add code for touch controller Initialization */
  BSP_TS_Init(LCD_GetXSize(), LCD_GetYSize());
 8017130:	f7fe f808 	bl	8015144 <LCD_GetXSize>
 8017134:	4603      	mov	r3, r0
 8017136:	b29c      	uxth	r4, r3
 8017138:	f7fe f80d 	bl	8015156 <LCD_GetYSize>
 801713c:	4603      	mov	r3, r0
 801713e:	b29b      	uxth	r3, r3
 8017140:	4619      	mov	r1, r3
 8017142:	4620      	mov	r0, r4
 8017144:	f7fd f872 	bl	801422c <BSP_TS_Init>

/* USER CODE END F4TouchController_init */
}
 8017148:	bf00      	nop
 801714a:	370c      	adds	r7, #12
 801714c:	46bd      	mov	sp, r7
 801714e:	bd90      	pop	{r4, r7, pc}

08017150 <_ZN8touchgfx22STM32F7TouchController11sampleTouchERlS1_>:

bool STM32F7TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8017150:	b580      	push	{r7, lr}
 8017152:	b090      	sub	sp, #64	; 0x40
 8017154:	af00      	add	r7, sp, #0
 8017156:	60f8      	str	r0, [r7, #12]
 8017158:	60b9      	str	r1, [r7, #8]
 801715a:	607a      	str	r2, [r7, #4]
/* USER CODE BEGIN  F4TouchController_sampleTouch  */

 TS_StateTypeDef state = { 0 };
 801715c:	f107 0314 	add.w	r3, r7, #20
 8017160:	222c      	movs	r2, #44	; 0x2c
 8017162:	2100      	movs	r1, #0
 8017164:	4618      	mov	r0, r3
 8017166:	f00b fabd 	bl	80226e4 <memset>
    BSP_TS_GetState(&state);
 801716a:	f107 0314 	add.w	r3, r7, #20
 801716e:	4618      	mov	r0, r3
 8017170:	f7fd f89c 	bl	80142ac <BSP_TS_GetState>
    if (state.touchDetected)
 8017174:	7d3b      	ldrb	r3, [r7, #20]
 8017176:	2b00      	cmp	r3, #0
 8017178:	d009      	beq.n	801718e <_ZN8touchgfx22STM32F7TouchController11sampleTouchERlS1_+0x3e>
    {
        x = state.touchX[0];
 801717a:	8afb      	ldrh	r3, [r7, #22]
 801717c:	461a      	mov	r2, r3
 801717e:	68bb      	ldr	r3, [r7, #8]
 8017180:	601a      	str	r2, [r3, #0]
        y = state.touchY[0];
 8017182:	8c3b      	ldrh	r3, [r7, #32]
 8017184:	461a      	mov	r2, r3
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	601a      	str	r2, [r3, #0]

        return true;
 801718a:	2301      	movs	r3, #1
 801718c:	e000      	b.n	8017190 <_ZN8touchgfx22STM32F7TouchController11sampleTouchERlS1_+0x40>
    }
    return false; 
 801718e:	2300      	movs	r3, #0

/* USER CODE END F4TouchController_sampleTouch  */
}
 8017190:	4618      	mov	r0, r3
 8017192:	3740      	adds	r7, #64	; 0x40
 8017194:	46bd      	mov	sp, r7
 8017196:	bd80      	pop	{r7, pc}

08017198 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8017198:	b580      	push	{r7, lr}
 801719a:	b082      	sub	sp, #8
 801719c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801719e:	2300      	movs	r3, #0
 80171a0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80171a2:	f000 f87b 	bl	801729c <BSP_SD_IsDetected>
 80171a6:	4603      	mov	r3, r0
 80171a8:	2b01      	cmp	r3, #1
 80171aa:	d001      	beq.n	80171b0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80171ac:	2302      	movs	r3, #2
 80171ae:	e012      	b.n	80171d6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80171b0:	480b      	ldr	r0, [pc, #44]	; (80171e0 <BSP_SD_Init+0x48>)
 80171b2:	f7f0 fc3b 	bl	8007a2c <HAL_SD_Init>
 80171b6:	4603      	mov	r3, r0
 80171b8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80171ba:	79fb      	ldrb	r3, [r7, #7]
 80171bc:	2b00      	cmp	r3, #0
 80171be:	d109      	bne.n	80171d4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80171c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80171c4:	4806      	ldr	r0, [pc, #24]	; (80171e0 <BSP_SD_Init+0x48>)
 80171c6:	f7f1 f8bb 	bl	8008340 <HAL_SD_ConfigWideBusOperation>
 80171ca:	4603      	mov	r3, r0
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d001      	beq.n	80171d4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 80171d0:	2301      	movs	r3, #1
 80171d2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 80171d4:	79fb      	ldrb	r3, [r7, #7]
}
 80171d6:	4618      	mov	r0, r3
 80171d8:	3708      	adds	r7, #8
 80171da:	46bd      	mov	sp, r7
 80171dc:	bd80      	pop	{r7, pc}
 80171de:	bf00      	nop
 80171e0:	200096d4 	.word	0x200096d4

080171e4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 80171e4:	b580      	push	{r7, lr}
 80171e6:	b086      	sub	sp, #24
 80171e8:	af00      	add	r7, sp, #0
 80171ea:	60f8      	str	r0, [r7, #12]
 80171ec:	60b9      	str	r1, [r7, #8]
 80171ee:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80171f0:	2300      	movs	r3, #0
 80171f2:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	68ba      	ldr	r2, [r7, #8]
 80171f8:	68f9      	ldr	r1, [r7, #12]
 80171fa:	4806      	ldr	r0, [pc, #24]	; (8017214 <BSP_SD_ReadBlocks_DMA+0x30>)
 80171fc:	f7f0 fca6 	bl	8007b4c <HAL_SD_ReadBlocks_DMA>
 8017200:	4603      	mov	r3, r0
 8017202:	2b00      	cmp	r3, #0
 8017204:	d001      	beq.n	801720a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8017206:	2301      	movs	r3, #1
 8017208:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 801720a:	7dfb      	ldrb	r3, [r7, #23]
}
 801720c:	4618      	mov	r0, r3
 801720e:	3718      	adds	r7, #24
 8017210:	46bd      	mov	sp, r7
 8017212:	bd80      	pop	{r7, pc}
 8017214:	200096d4 	.word	0x200096d4

08017218 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8017218:	b580      	push	{r7, lr}
 801721a:	b086      	sub	sp, #24
 801721c:	af00      	add	r7, sp, #0
 801721e:	60f8      	str	r0, [r7, #12]
 8017220:	60b9      	str	r1, [r7, #8]
 8017222:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8017224:	2300      	movs	r3, #0
 8017226:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	68ba      	ldr	r2, [r7, #8]
 801722c:	68f9      	ldr	r1, [r7, #12]
 801722e:	4806      	ldr	r0, [pc, #24]	; (8017248 <BSP_SD_WriteBlocks_DMA+0x30>)
 8017230:	f7f0 fd5a 	bl	8007ce8 <HAL_SD_WriteBlocks_DMA>
 8017234:	4603      	mov	r3, r0
 8017236:	2b00      	cmp	r3, #0
 8017238:	d001      	beq.n	801723e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801723a:	2301      	movs	r3, #1
 801723c:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 801723e:	7dfb      	ldrb	r3, [r7, #23]
}
 8017240:	4618      	mov	r0, r3
 8017242:	3718      	adds	r7, #24
 8017244:	46bd      	mov	sp, r7
 8017246:	bd80      	pop	{r7, pc}
 8017248:	200096d4 	.word	0x200096d4

0801724c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 801724c:	b580      	push	{r7, lr}
 801724e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8017250:	4805      	ldr	r0, [pc, #20]	; (8017268 <BSP_SD_GetCardState+0x1c>)
 8017252:	f7f1 f8f1 	bl	8008438 <HAL_SD_GetCardState>
 8017256:	4603      	mov	r3, r0
 8017258:	2b04      	cmp	r3, #4
 801725a:	bf14      	ite	ne
 801725c:	2301      	movne	r3, #1
 801725e:	2300      	moveq	r3, #0
 8017260:	b2db      	uxtb	r3, r3
}
 8017262:	4618      	mov	r0, r3
 8017264:	bd80      	pop	{r7, pc}
 8017266:	bf00      	nop
 8017268:	200096d4 	.word	0x200096d4

0801726c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 801726c:	b580      	push	{r7, lr}
 801726e:	b082      	sub	sp, #8
 8017270:	af00      	add	r7, sp, #0
 8017272:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8017274:	6879      	ldr	r1, [r7, #4]
 8017276:	4803      	ldr	r0, [pc, #12]	; (8017284 <BSP_SD_GetCardInfo+0x18>)
 8017278:	f7f1 f836 	bl	80082e8 <HAL_SD_GetCardInfo>
}
 801727c:	bf00      	nop
 801727e:	3708      	adds	r7, #8
 8017280:	46bd      	mov	sp, r7
 8017282:	bd80      	pop	{r7, pc}
 8017284:	200096d4 	.word	0x200096d4

08017288 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8017288:	b580      	push	{r7, lr}
 801728a:	b082      	sub	sp, #8
 801728c:	af00      	add	r7, sp, #0
 801728e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8017290:	f001 fb66 	bl	8018960 <BSP_SD_ReadCpltCallback>
}
 8017294:	bf00      	nop
 8017296:	3708      	adds	r7, #8
 8017298:	46bd      	mov	sp, r7
 801729a:	bd80      	pop	{r7, pc}

0801729c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 801729c:	b580      	push	{r7, lr}
 801729e:	b082      	sub	sp, #8
 80172a0:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80172a2:	2301      	movs	r3, #1
 80172a4:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 80172a6:	f000 f81d 	bl	80172e4 <BSP_PlatformIsDetected>
 80172aa:	4603      	mov	r3, r0
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d101      	bne.n	80172b4 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80172b0:	2300      	movs	r3, #0
 80172b2:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80172b4:	79fb      	ldrb	r3, [r7, #7]
 80172b6:	b2db      	uxtb	r3, r3
}
 80172b8:	4618      	mov	r0, r3
 80172ba:	3708      	adds	r7, #8
 80172bc:	46bd      	mov	sp, r7
 80172be:	bd80      	pop	{r7, pc}

080172c0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 80172c0:	b580      	push	{r7, lr}
 80172c2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80172c4:	4904      	ldr	r1, [pc, #16]	; (80172d8 <MX_FATFS_Init+0x18>)
 80172c6:	4805      	ldr	r0, [pc, #20]	; (80172dc <MX_FATFS_Init+0x1c>)
 80172c8:	f7f9 ff9c 	bl	8011204 <FATFS_LinkDriver>
 80172cc:	4603      	mov	r3, r0
 80172ce:	461a      	mov	r2, r3
 80172d0:	4b03      	ldr	r3, [pc, #12]	; (80172e0 <MX_FATFS_Init+0x20>)
 80172d2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80172d4:	bf00      	nop
 80172d6:	bd80      	pop	{r7, pc}
 80172d8:	2000a2d4 	.word	0x2000a2d4
 80172dc:	08025220 	.word	0x08025220
 80172e0:	2000a2d8 	.word	0x2000a2d8

080172e4 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 80172e4:	b580      	push	{r7, lr}
 80172e6:	b082      	sub	sp, #8
 80172e8:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80172ea:	2301      	movs	r3, #1
 80172ec:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80172ee:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80172f2:	4806      	ldr	r0, [pc, #24]	; (801730c <BSP_PlatformIsDetected+0x28>)
 80172f4:	f7eb fce2 	bl	8002cbc <HAL_GPIO_ReadPin>
 80172f8:	4603      	mov	r3, r0
 80172fa:	2b00      	cmp	r3, #0
 80172fc:	d001      	beq.n	8017302 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 80172fe:	2300      	movs	r3, #0
 8017300:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8017302:	79fb      	ldrb	r3, [r7, #7]
}  
 8017304:	4618      	mov	r0, r3
 8017306:	3708      	adds	r7, #8
 8017308:	46bd      	mov	sp, r7
 801730a:	bd80      	pop	{r7, pc}
 801730c:	40020800 	.word	0x40020800

08017310 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8017310:	b5b0      	push	{r4, r5, r7, lr}
 8017312:	b086      	sub	sp, #24
 8017314:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8017316:	f7e9 fbe9 	bl	8000aec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 801731a:	f000 f841 	bl	80173a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 801731e:	f000 ff1f 	bl	8018160 <_ZL12MX_GPIO_Initv>
  MX_ADC3_Init();
 8017322:	f000 f911 	bl	8017548 <_ZL12MX_ADC3_Initv>
  MX_CRC_Init();
 8017326:	f000 f96b 	bl	8017600 <_ZL11MX_CRC_Initv>
  MX_DCMI_Init();
 801732a:	f000 f991 	bl	8017650 <_ZL12MX_DCMI_Initv>
  MX_ETH_Init();
 801732e:	f000 f9c9 	bl	80176c4 <_ZL11MX_ETH_Initv>
  MX_I2C1_Init();
 8017332:	f000 fa01 	bl	8017738 <_ZL12MX_I2C1_Initv>
  MX_I2C3_Init();
 8017336:	f000 fa4d 	bl	80177d4 <_ZL12MX_I2C3_Initv>
  MX_QUADSPI_Init();
 801733a:	f000 fa99 	bl	8017870 <_ZL15MX_QUADSPI_Initv>
  MX_RTC_Init();
 801733e:	f000 fac7 	bl	80178d0 <_ZL11MX_RTC_Initv>
  MX_SAI2_Init();
 8017342:	f000 fb8b 	bl	8017a5c <_ZL12MX_SAI2_Initv>
  MX_SDMMC1_SD_Init();
 8017346:	f000 fc3b 	bl	8017bc0 <_ZL17MX_SDMMC1_SD_Initv>
  MX_SPDIFRX_Init();
 801734a:	f000 fc59 	bl	8017c00 <_ZL15MX_SPDIFRX_Initv>
  MX_SPI2_Init();
 801734e:	f000 fc8d 	bl	8017c6c <_ZL12MX_SPI2_Initv>
  MX_TIM3_Init();
 8017352:	f000 fccd 	bl	8017cf0 <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 8017356:	f000 fd5b 	bl	8017e10 <_ZL12MX_TIM5_Initv>
  MX_TIM8_Init();
 801735a:	f000 fde9 	bl	8017f30 <_ZL12MX_TIM8_Initv>
  MX_TIM12_Init();
 801735e:	f000 fe49 	bl	8017ff4 <_ZL13MX_TIM12_Initv>
  MX_USART1_UART_Init();
 8017362:	f000 fe95 	bl	8018090 <_ZL19MX_USART1_UART_Initv>
  MX_USART6_UART_Init();
 8017366:	f000 fec7 	bl	80180f8 <_ZL19MX_USART6_UART_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

/* Initialise the graphical hardware */
  GRAPHICS_HW_Init();
 801736a:	f7fd fefd 	bl	8015168 <_Z16GRAPHICS_HW_Initv>

  /* Initialise the graphical stack engine */
  GRAPHICS_Init();
 801736e:	f7fd ff73 	bl	8015258 <_Z13GRAPHICS_Initv>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8017372:	4b09      	ldr	r3, [pc, #36]	; (8017398 <main+0x88>)
 8017374:	1d3c      	adds	r4, r7, #4
 8017376:	461d      	mov	r5, r3
 8017378:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801737a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801737c:	682b      	ldr	r3, [r5, #0]
 801737e:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8017380:	1d3b      	adds	r3, r7, #4
 8017382:	2100      	movs	r1, #0
 8017384:	4618      	mov	r0, r3
 8017386:	f7f9 ff99 	bl	80112bc <osThreadCreate>
 801738a:	4603      	mov	r3, r0
 801738c:	4a03      	ldr	r2, [pc, #12]	; (801739c <main+0x8c>)
 801738e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8017390:	f7f9 ff71 	bl	8011276 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8017394:	e7fe      	b.n	8017394 <main+0x84>
 8017396:	bf00      	nop
 8017398:	08023f70 	.word	0x08023f70
 801739c:	20009a08 	.word	0x20009a08

080173a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80173a0:	b580      	push	{r7, lr}
 80173a2:	b0b4      	sub	sp, #208	; 0xd0
 80173a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80173a6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80173aa:	2230      	movs	r2, #48	; 0x30
 80173ac:	2100      	movs	r1, #0
 80173ae:	4618      	mov	r0, r3
 80173b0:	f00b f998 	bl	80226e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80173b4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80173b8:	2200      	movs	r2, #0
 80173ba:	601a      	str	r2, [r3, #0]
 80173bc:	605a      	str	r2, [r3, #4]
 80173be:	609a      	str	r2, [r3, #8]
 80173c0:	60da      	str	r2, [r3, #12]
 80173c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80173c4:	f107 0308 	add.w	r3, r7, #8
 80173c8:	2284      	movs	r2, #132	; 0x84
 80173ca:	2100      	movs	r1, #0
 80173cc:	4618      	mov	r0, r3
 80173ce:	f00b f989 	bl	80226e4 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 80173d2:	f7ee fae7 	bl	80059a4 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80173d6:	4b59      	ldr	r3, [pc, #356]	; (801753c <SystemClock_Config+0x19c>)
 80173d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80173da:	4a58      	ldr	r2, [pc, #352]	; (801753c <SystemClock_Config+0x19c>)
 80173dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80173e0:	6413      	str	r3, [r2, #64]	; 0x40
 80173e2:	4b56      	ldr	r3, [pc, #344]	; (801753c <SystemClock_Config+0x19c>)
 80173e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80173e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80173ea:	607b      	str	r3, [r7, #4]
 80173ec:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80173ee:	4b54      	ldr	r3, [pc, #336]	; (8017540 <SystemClock_Config+0x1a0>)
 80173f0:	681b      	ldr	r3, [r3, #0]
 80173f2:	4a53      	ldr	r2, [pc, #332]	; (8017540 <SystemClock_Config+0x1a0>)
 80173f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80173f8:	6013      	str	r3, [r2, #0]
 80173fa:	4b51      	ldr	r3, [pc, #324]	; (8017540 <SystemClock_Config+0x1a0>)
 80173fc:	681b      	ldr	r3, [r3, #0]
 80173fe:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8017402:	603b      	str	r3, [r7, #0]
 8017404:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8017406:	2309      	movs	r3, #9
 8017408:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801740c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8017410:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8017414:	2301      	movs	r3, #1
 8017416:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 801741a:	2302      	movs	r3, #2
 801741c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8017420:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8017424:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8017428:	2319      	movs	r3, #25
 801742a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 801742e:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8017432:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8017436:	2302      	movs	r3, #2
 8017438:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 801743c:	2309      	movs	r3, #9
 801743e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8017442:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8017446:	4618      	mov	r0, r3
 8017448:	f7ee fbdc 	bl	8005c04 <HAL_RCC_OscConfig>
 801744c:	4603      	mov	r3, r0
 801744e:	2b00      	cmp	r3, #0
 8017450:	bf14      	ite	ne
 8017452:	2301      	movne	r3, #1
 8017454:	2300      	moveq	r3, #0
 8017456:	b2db      	uxtb	r3, r3
 8017458:	2b00      	cmp	r3, #0
 801745a:	d001      	beq.n	8017460 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 801745c:	f001 f874 	bl	8018548 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8017460:	f7ee fab0 	bl	80059c4 <HAL_PWREx_EnableOverDrive>
 8017464:	4603      	mov	r3, r0
 8017466:	2b00      	cmp	r3, #0
 8017468:	bf14      	ite	ne
 801746a:	2301      	movne	r3, #1
 801746c:	2300      	moveq	r3, #0
 801746e:	b2db      	uxtb	r3, r3
 8017470:	2b00      	cmp	r3, #0
 8017472:	d001      	beq.n	8017478 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8017474:	f001 f868 	bl	8018548 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8017478:	230f      	movs	r3, #15
 801747a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801747e:	2302      	movs	r3, #2
 8017480:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8017484:	2300      	movs	r3, #0
 8017486:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801748a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801748e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8017492:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017496:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 801749a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801749e:	2106      	movs	r1, #6
 80174a0:	4618      	mov	r0, r3
 80174a2:	f7ee fe1f 	bl	80060e4 <HAL_RCC_ClockConfig>
 80174a6:	4603      	mov	r3, r0
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	bf14      	ite	ne
 80174ac:	2301      	movne	r3, #1
 80174ae:	2300      	moveq	r3, #0
 80174b0:	b2db      	uxtb	r3, r3
 80174b2:	2b00      	cmp	r3, #0
 80174b4:	d001      	beq.n	80174ba <SystemClock_Config+0x11a>
  {
    Error_Handler();
 80174b6:	f001 f847 	bl	8018548 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 80174ba:	4b22      	ldr	r3, [pc, #136]	; (8017544 <SystemClock_Config+0x1a4>)
 80174bc:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 80174be:	2364      	movs	r3, #100	; 0x64
 80174c0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 80174c2:	2302      	movs	r3, #2
 80174c4:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80174c6:	2302      	movs	r3, #2
 80174c8:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 80174ca:	2302      	movs	r3, #2
 80174cc:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80174ce:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80174d2:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 80174d4:	2305      	movs	r3, #5
 80174d6:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 80174d8:	2302      	movs	r3, #2
 80174da:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 80174dc:	2303      	movs	r3, #3
 80174de:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 80174e0:	2301      	movs	r3, #1
 80174e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80174e4:	2301      	movs	r3, #1
 80174e6:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 80174e8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80174ec:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80174ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80174f2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 80174f4:	2300      	movs	r3, #0
 80174f6:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80174f8:	2300      	movs	r3, #0
 80174fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80174fc:	2300      	movs	r3, #0
 80174fe:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8017500:	2300      	movs	r3, #0
 8017502:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8017504:	2300      	movs	r3, #0
 8017506:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8017508:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801750c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 8017510:	2300      	movs	r3, #0
 8017512:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8017516:	f107 0308 	add.w	r3, r7, #8
 801751a:	4618      	mov	r0, r3
 801751c:	f7ee ffe6 	bl	80064ec <HAL_RCCEx_PeriphCLKConfig>
 8017520:	4603      	mov	r3, r0
 8017522:	2b00      	cmp	r3, #0
 8017524:	bf14      	ite	ne
 8017526:	2301      	movne	r3, #1
 8017528:	2300      	moveq	r3, #0
 801752a:	b2db      	uxtb	r3, r3
 801752c:	2b00      	cmp	r3, #0
 801752e:	d001      	beq.n	8017534 <SystemClock_Config+0x194>
  {
    Error_Handler();
 8017530:	f001 f80a 	bl	8018548 <Error_Handler>
  }
}
 8017534:	bf00      	nop
 8017536:	37d0      	adds	r7, #208	; 0xd0
 8017538:	46bd      	mov	sp, r7
 801753a:	bd80      	pop	{r7, pc}
 801753c:	40023800 	.word	0x40023800
 8017540:	40007000 	.word	0x40007000
 8017544:	01b14868 	.word	0x01b14868

08017548 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8017548:	b580      	push	{r7, lr}
 801754a:	b084      	sub	sp, #16
 801754c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 801754e:	463b      	mov	r3, r7
 8017550:	2200      	movs	r2, #0
 8017552:	601a      	str	r2, [r3, #0]
 8017554:	605a      	str	r2, [r3, #4]
 8017556:	609a      	str	r2, [r3, #8]
 8017558:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 801755a:	4b26      	ldr	r3, [pc, #152]	; (80175f4 <_ZL12MX_ADC3_Initv+0xac>)
 801755c:	4a26      	ldr	r2, [pc, #152]	; (80175f8 <_ZL12MX_ADC3_Initv+0xb0>)
 801755e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8017560:	4b24      	ldr	r3, [pc, #144]	; (80175f4 <_ZL12MX_ADC3_Initv+0xac>)
 8017562:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8017566:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8017568:	4b22      	ldr	r3, [pc, #136]	; (80175f4 <_ZL12MX_ADC3_Initv+0xac>)
 801756a:	2200      	movs	r2, #0
 801756c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 801756e:	4b21      	ldr	r3, [pc, #132]	; (80175f4 <_ZL12MX_ADC3_Initv+0xac>)
 8017570:	2200      	movs	r2, #0
 8017572:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8017574:	4b1f      	ldr	r3, [pc, #124]	; (80175f4 <_ZL12MX_ADC3_Initv+0xac>)
 8017576:	2200      	movs	r2, #0
 8017578:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 801757a:	4b1e      	ldr	r3, [pc, #120]	; (80175f4 <_ZL12MX_ADC3_Initv+0xac>)
 801757c:	2200      	movs	r2, #0
 801757e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8017582:	4b1c      	ldr	r3, [pc, #112]	; (80175f4 <_ZL12MX_ADC3_Initv+0xac>)
 8017584:	2200      	movs	r2, #0
 8017586:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8017588:	4b1a      	ldr	r3, [pc, #104]	; (80175f4 <_ZL12MX_ADC3_Initv+0xac>)
 801758a:	4a1c      	ldr	r2, [pc, #112]	; (80175fc <_ZL12MX_ADC3_Initv+0xb4>)
 801758c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801758e:	4b19      	ldr	r3, [pc, #100]	; (80175f4 <_ZL12MX_ADC3_Initv+0xac>)
 8017590:	2200      	movs	r2, #0
 8017592:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8017594:	4b17      	ldr	r3, [pc, #92]	; (80175f4 <_ZL12MX_ADC3_Initv+0xac>)
 8017596:	2201      	movs	r2, #1
 8017598:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 801759a:	4b16      	ldr	r3, [pc, #88]	; (80175f4 <_ZL12MX_ADC3_Initv+0xac>)
 801759c:	2200      	movs	r2, #0
 801759e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80175a2:	4b14      	ldr	r3, [pc, #80]	; (80175f4 <_ZL12MX_ADC3_Initv+0xac>)
 80175a4:	2201      	movs	r2, #1
 80175a6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80175a8:	4812      	ldr	r0, [pc, #72]	; (80175f4 <_ZL12MX_ADC3_Initv+0xac>)
 80175aa:	f7e9 faf1 	bl	8000b90 <HAL_ADC_Init>
 80175ae:	4603      	mov	r3, r0
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	bf14      	ite	ne
 80175b4:	2301      	movne	r3, #1
 80175b6:	2300      	moveq	r3, #0
 80175b8:	b2db      	uxtb	r3, r3
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	d001      	beq.n	80175c2 <_ZL12MX_ADC3_Initv+0x7a>
  {
    Error_Handler();
 80175be:	f000 ffc3 	bl	8018548 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80175c2:	2304      	movs	r3, #4
 80175c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80175c6:	2301      	movs	r3, #1
 80175c8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80175ca:	2300      	movs	r3, #0
 80175cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80175ce:	463b      	mov	r3, r7
 80175d0:	4619      	mov	r1, r3
 80175d2:	4808      	ldr	r0, [pc, #32]	; (80175f4 <_ZL12MX_ADC3_Initv+0xac>)
 80175d4:	f7e9 fb20 	bl	8000c18 <HAL_ADC_ConfigChannel>
 80175d8:	4603      	mov	r3, r0
 80175da:	2b00      	cmp	r3, #0
 80175dc:	bf14      	ite	ne
 80175de:	2301      	movne	r3, #1
 80175e0:	2300      	moveq	r3, #0
 80175e2:	b2db      	uxtb	r3, r3
 80175e4:	2b00      	cmp	r3, #0
 80175e6:	d001      	beq.n	80175ec <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 80175e8:	f000 ffae 	bl	8018548 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 80175ec:	bf00      	nop
 80175ee:	3710      	adds	r7, #16
 80175f0:	46bd      	mov	sp, r7
 80175f2:	bd80      	pop	{r7, pc}
 80175f4:	200093c4 	.word	0x200093c4
 80175f8:	40012200 	.word	0x40012200
 80175fc:	0f000001 	.word	0x0f000001

08017600 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8017600:	b580      	push	{r7, lr}
 8017602:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8017604:	4b10      	ldr	r3, [pc, #64]	; (8017648 <_ZL11MX_CRC_Initv+0x48>)
 8017606:	4a11      	ldr	r2, [pc, #68]	; (801764c <_ZL11MX_CRC_Initv+0x4c>)
 8017608:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 801760a:	4b0f      	ldr	r3, [pc, #60]	; (8017648 <_ZL11MX_CRC_Initv+0x48>)
 801760c:	2200      	movs	r2, #0
 801760e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8017610:	4b0d      	ldr	r3, [pc, #52]	; (8017648 <_ZL11MX_CRC_Initv+0x48>)
 8017612:	2200      	movs	r2, #0
 8017614:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8017616:	4b0c      	ldr	r3, [pc, #48]	; (8017648 <_ZL11MX_CRC_Initv+0x48>)
 8017618:	2200      	movs	r2, #0
 801761a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 801761c:	4b0a      	ldr	r3, [pc, #40]	; (8017648 <_ZL11MX_CRC_Initv+0x48>)
 801761e:	2200      	movs	r2, #0
 8017620:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8017622:	4b09      	ldr	r3, [pc, #36]	; (8017648 <_ZL11MX_CRC_Initv+0x48>)
 8017624:	2201      	movs	r2, #1
 8017626:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8017628:	4807      	ldr	r0, [pc, #28]	; (8017648 <_ZL11MX_CRC_Initv+0x48>)
 801762a:	f7e9 fe37 	bl	800129c <HAL_CRC_Init>
 801762e:	4603      	mov	r3, r0
 8017630:	2b00      	cmp	r3, #0
 8017632:	bf14      	ite	ne
 8017634:	2301      	movne	r3, #1
 8017636:	2300      	moveq	r3, #0
 8017638:	b2db      	uxtb	r3, r3
 801763a:	2b00      	cmp	r3, #0
 801763c:	d001      	beq.n	8017642 <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 801763e:	f000 ff83 	bl	8018548 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8017642:	bf00      	nop
 8017644:	bd80      	pop	{r7, pc}
 8017646:	bf00      	nop
 8017648:	2000940c 	.word	0x2000940c
 801764c:	40023000 	.word	0x40023000

08017650 <_ZL12MX_DCMI_Initv>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8017650:	b580      	push	{r7, lr}
 8017652:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8017654:	4b19      	ldr	r3, [pc, #100]	; (80176bc <_ZL12MX_DCMI_Initv+0x6c>)
 8017656:	4a1a      	ldr	r2, [pc, #104]	; (80176c0 <_ZL12MX_DCMI_Initv+0x70>)
 8017658:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 801765a:	4b18      	ldr	r3, [pc, #96]	; (80176bc <_ZL12MX_DCMI_Initv+0x6c>)
 801765c:	2200      	movs	r2, #0
 801765e:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 8017660:	4b16      	ldr	r3, [pc, #88]	; (80176bc <_ZL12MX_DCMI_Initv+0x6c>)
 8017662:	2200      	movs	r2, #0
 8017664:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8017666:	4b15      	ldr	r3, [pc, #84]	; (80176bc <_ZL12MX_DCMI_Initv+0x6c>)
 8017668:	2200      	movs	r2, #0
 801766a:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 801766c:	4b13      	ldr	r3, [pc, #76]	; (80176bc <_ZL12MX_DCMI_Initv+0x6c>)
 801766e:	2200      	movs	r2, #0
 8017670:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8017672:	4b12      	ldr	r3, [pc, #72]	; (80176bc <_ZL12MX_DCMI_Initv+0x6c>)
 8017674:	2200      	movs	r2, #0
 8017676:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8017678:	4b10      	ldr	r3, [pc, #64]	; (80176bc <_ZL12MX_DCMI_Initv+0x6c>)
 801767a:	2200      	movs	r2, #0
 801767c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 801767e:	4b0f      	ldr	r3, [pc, #60]	; (80176bc <_ZL12MX_DCMI_Initv+0x6c>)
 8017680:	2200      	movs	r2, #0
 8017682:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8017684:	4b0d      	ldr	r3, [pc, #52]	; (80176bc <_ZL12MX_DCMI_Initv+0x6c>)
 8017686:	2200      	movs	r2, #0
 8017688:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 801768a:	4b0c      	ldr	r3, [pc, #48]	; (80176bc <_ZL12MX_DCMI_Initv+0x6c>)
 801768c:	2200      	movs	r2, #0
 801768e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8017690:	4b0a      	ldr	r3, [pc, #40]	; (80176bc <_ZL12MX_DCMI_Initv+0x6c>)
 8017692:	2200      	movs	r2, #0
 8017694:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8017696:	4b09      	ldr	r3, [pc, #36]	; (80176bc <_ZL12MX_DCMI_Initv+0x6c>)
 8017698:	2200      	movs	r2, #0
 801769a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 801769c:	4807      	ldr	r0, [pc, #28]	; (80176bc <_ZL12MX_DCMI_Initv+0x6c>)
 801769e:	f7e9 fee7 	bl	8001470 <HAL_DCMI_Init>
 80176a2:	4603      	mov	r3, r0
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	bf14      	ite	ne
 80176a8:	2301      	movne	r3, #1
 80176aa:	2300      	moveq	r3, #0
 80176ac:	b2db      	uxtb	r3, r3
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	d001      	beq.n	80176b6 <_ZL12MX_DCMI_Initv+0x66>
  {
    Error_Handler();
 80176b2:	f000 ff49 	bl	8018548 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80176b6:	bf00      	nop
 80176b8:	bd80      	pop	{r7, pc}
 80176ba:	bf00      	nop
 80176bc:	20009430 	.word	0x20009430
 80176c0:	50050000 	.word	0x50050000

080176c4 <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80176c4:	b580      	push	{r7, lr}
 80176c6:	b082      	sub	sp, #8
 80176c8:	af00      	add	r7, sp, #0
   uint8_t MACAddr[6] ;

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80176ca:	4b19      	ldr	r3, [pc, #100]	; (8017730 <_ZL11MX_ETH_Initv+0x6c>)
 80176cc:	4a19      	ldr	r2, [pc, #100]	; (8017734 <_ZL11MX_ETH_Initv+0x70>)
 80176ce:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 80176d0:	4b17      	ldr	r3, [pc, #92]	; (8017730 <_ZL11MX_ETH_Initv+0x6c>)
 80176d2:	2201      	movs	r2, #1
 80176d4:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80176d6:	4b16      	ldr	r3, [pc, #88]	; (8017730 <_ZL11MX_ETH_Initv+0x6c>)
 80176d8:	2200      	movs	r2, #0
 80176da:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80176dc:	2300      	movs	r3, #0
 80176de:	703b      	strb	r3, [r7, #0]
  MACAddr[1] = 0x80;
 80176e0:	2380      	movs	r3, #128	; 0x80
 80176e2:	707b      	strb	r3, [r7, #1]
  MACAddr[2] = 0xE1;
 80176e4:	23e1      	movs	r3, #225	; 0xe1
 80176e6:	70bb      	strb	r3, [r7, #2]
  MACAddr[3] = 0x00;
 80176e8:	2300      	movs	r3, #0
 80176ea:	70fb      	strb	r3, [r7, #3]
  MACAddr[4] = 0x00;
 80176ec:	2300      	movs	r3, #0
 80176ee:	713b      	strb	r3, [r7, #4]
  MACAddr[5] = 0x00;
 80176f0:	2300      	movs	r3, #0
 80176f2:	717b      	strb	r3, [r7, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80176f4:	4a0e      	ldr	r2, [pc, #56]	; (8017730 <_ZL11MX_ETH_Initv+0x6c>)
 80176f6:	463b      	mov	r3, r7
 80176f8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80176fa:	4b0d      	ldr	r3, [pc, #52]	; (8017730 <_ZL11MX_ETH_Initv+0x6c>)
 80176fc:	2200      	movs	r2, #0
 80176fe:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8017700:	4b0b      	ldr	r3, [pc, #44]	; (8017730 <_ZL11MX_ETH_Initv+0x6c>)
 8017702:	2200      	movs	r2, #0
 8017704:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8017706:	4b0a      	ldr	r3, [pc, #40]	; (8017730 <_ZL11MX_ETH_Initv+0x6c>)
 8017708:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801770c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 801770e:	4808      	ldr	r0, [pc, #32]	; (8017730 <_ZL11MX_ETH_Initv+0x6c>)
 8017710:	f7ea fbb2 	bl	8001e78 <HAL_ETH_Init>
 8017714:	4603      	mov	r3, r0
 8017716:	2b00      	cmp	r3, #0
 8017718:	bf14      	ite	ne
 801771a:	2301      	movne	r3, #1
 801771c:	2300      	moveq	r3, #0
 801771e:	b2db      	uxtb	r3, r3
 8017720:	2b00      	cmp	r3, #0
 8017722:	d001      	beq.n	8017728 <_ZL11MX_ETH_Initv+0x64>
  {
    Error_Handler();
 8017724:	f000 ff10 	bl	8018548 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8017728:	bf00      	nop
 801772a:	3708      	adds	r7, #8
 801772c:	46bd      	mov	sp, r7
 801772e:	bd80      	pop	{r7, pc}
 8017730:	20009480 	.word	0x20009480
 8017734:	40028000 	.word	0x40028000

08017738 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8017738:	b580      	push	{r7, lr}
 801773a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 801773c:	4b22      	ldr	r3, [pc, #136]	; (80177c8 <_ZL12MX_I2C1_Initv+0x90>)
 801773e:	4a23      	ldr	r2, [pc, #140]	; (80177cc <_ZL12MX_I2C1_Initv+0x94>)
 8017740:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8017742:	4b21      	ldr	r3, [pc, #132]	; (80177c8 <_ZL12MX_I2C1_Initv+0x90>)
 8017744:	4a22      	ldr	r2, [pc, #136]	; (80177d0 <_ZL12MX_I2C1_Initv+0x98>)
 8017746:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8017748:	4b1f      	ldr	r3, [pc, #124]	; (80177c8 <_ZL12MX_I2C1_Initv+0x90>)
 801774a:	2200      	movs	r2, #0
 801774c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801774e:	4b1e      	ldr	r3, [pc, #120]	; (80177c8 <_ZL12MX_I2C1_Initv+0x90>)
 8017750:	2201      	movs	r2, #1
 8017752:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8017754:	4b1c      	ldr	r3, [pc, #112]	; (80177c8 <_ZL12MX_I2C1_Initv+0x90>)
 8017756:	2200      	movs	r2, #0
 8017758:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 801775a:	4b1b      	ldr	r3, [pc, #108]	; (80177c8 <_ZL12MX_I2C1_Initv+0x90>)
 801775c:	2200      	movs	r2, #0
 801775e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8017760:	4b19      	ldr	r3, [pc, #100]	; (80177c8 <_ZL12MX_I2C1_Initv+0x90>)
 8017762:	2200      	movs	r2, #0
 8017764:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8017766:	4b18      	ldr	r3, [pc, #96]	; (80177c8 <_ZL12MX_I2C1_Initv+0x90>)
 8017768:	2200      	movs	r2, #0
 801776a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 801776c:	4b16      	ldr	r3, [pc, #88]	; (80177c8 <_ZL12MX_I2C1_Initv+0x90>)
 801776e:	2200      	movs	r2, #0
 8017770:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8017772:	4815      	ldr	r0, [pc, #84]	; (80177c8 <_ZL12MX_I2C1_Initv+0x90>)
 8017774:	f7ec ff30 	bl	80045d8 <HAL_I2C_Init>
 8017778:	4603      	mov	r3, r0
 801777a:	2b00      	cmp	r3, #0
 801777c:	bf14      	ite	ne
 801777e:	2301      	movne	r3, #1
 8017780:	2300      	moveq	r3, #0
 8017782:	b2db      	uxtb	r3, r3
 8017784:	2b00      	cmp	r3, #0
 8017786:	d001      	beq.n	801778c <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8017788:	f000 fede 	bl	8018548 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801778c:	2100      	movs	r1, #0
 801778e:	480e      	ldr	r0, [pc, #56]	; (80177c8 <_ZL12MX_I2C1_Initv+0x90>)
 8017790:	f7ed fc3a 	bl	8005008 <HAL_I2CEx_ConfigAnalogFilter>
 8017794:	4603      	mov	r3, r0
 8017796:	2b00      	cmp	r3, #0
 8017798:	bf14      	ite	ne
 801779a:	2301      	movne	r3, #1
 801779c:	2300      	moveq	r3, #0
 801779e:	b2db      	uxtb	r3, r3
 80177a0:	2b00      	cmp	r3, #0
 80177a2:	d001      	beq.n	80177a8 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 80177a4:	f000 fed0 	bl	8018548 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80177a8:	2100      	movs	r1, #0
 80177aa:	4807      	ldr	r0, [pc, #28]	; (80177c8 <_ZL12MX_I2C1_Initv+0x90>)
 80177ac:	f7ed fc77 	bl	800509e <HAL_I2CEx_ConfigDigitalFilter>
 80177b0:	4603      	mov	r3, r0
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	bf14      	ite	ne
 80177b6:	2301      	movne	r3, #1
 80177b8:	2300      	moveq	r3, #0
 80177ba:	b2db      	uxtb	r3, r3
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d001      	beq.n	80177c4 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 80177c0:	f000 fec2 	bl	8018548 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80177c4:	bf00      	nop
 80177c6:	bd80      	pop	{r7, pc}
 80177c8:	200094c8 	.word	0x200094c8
 80177cc:	40005400 	.word	0x40005400
 80177d0:	00c0eaff 	.word	0x00c0eaff

080177d4 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80177d4:	b580      	push	{r7, lr}
 80177d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80177d8:	4b22      	ldr	r3, [pc, #136]	; (8017864 <_ZL12MX_I2C3_Initv+0x90>)
 80177da:	4a23      	ldr	r2, [pc, #140]	; (8017868 <_ZL12MX_I2C3_Initv+0x94>)
 80177dc:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80177de:	4b21      	ldr	r3, [pc, #132]	; (8017864 <_ZL12MX_I2C3_Initv+0x90>)
 80177e0:	4a22      	ldr	r2, [pc, #136]	; (801786c <_ZL12MX_I2C3_Initv+0x98>)
 80177e2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80177e4:	4b1f      	ldr	r3, [pc, #124]	; (8017864 <_ZL12MX_I2C3_Initv+0x90>)
 80177e6:	2200      	movs	r2, #0
 80177e8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80177ea:	4b1e      	ldr	r3, [pc, #120]	; (8017864 <_ZL12MX_I2C3_Initv+0x90>)
 80177ec:	2201      	movs	r2, #1
 80177ee:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80177f0:	4b1c      	ldr	r3, [pc, #112]	; (8017864 <_ZL12MX_I2C3_Initv+0x90>)
 80177f2:	2200      	movs	r2, #0
 80177f4:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80177f6:	4b1b      	ldr	r3, [pc, #108]	; (8017864 <_ZL12MX_I2C3_Initv+0x90>)
 80177f8:	2200      	movs	r2, #0
 80177fa:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80177fc:	4b19      	ldr	r3, [pc, #100]	; (8017864 <_ZL12MX_I2C3_Initv+0x90>)
 80177fe:	2200      	movs	r2, #0
 8017800:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8017802:	4b18      	ldr	r3, [pc, #96]	; (8017864 <_ZL12MX_I2C3_Initv+0x90>)
 8017804:	2200      	movs	r2, #0
 8017806:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8017808:	4b16      	ldr	r3, [pc, #88]	; (8017864 <_ZL12MX_I2C3_Initv+0x90>)
 801780a:	2200      	movs	r2, #0
 801780c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 801780e:	4815      	ldr	r0, [pc, #84]	; (8017864 <_ZL12MX_I2C3_Initv+0x90>)
 8017810:	f7ec fee2 	bl	80045d8 <HAL_I2C_Init>
 8017814:	4603      	mov	r3, r0
 8017816:	2b00      	cmp	r3, #0
 8017818:	bf14      	ite	ne
 801781a:	2301      	movne	r3, #1
 801781c:	2300      	moveq	r3, #0
 801781e:	b2db      	uxtb	r3, r3
 8017820:	2b00      	cmp	r3, #0
 8017822:	d001      	beq.n	8017828 <_ZL12MX_I2C3_Initv+0x54>
  {
    Error_Handler();
 8017824:	f000 fe90 	bl	8018548 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8017828:	2100      	movs	r1, #0
 801782a:	480e      	ldr	r0, [pc, #56]	; (8017864 <_ZL12MX_I2C3_Initv+0x90>)
 801782c:	f7ed fbec 	bl	8005008 <HAL_I2CEx_ConfigAnalogFilter>
 8017830:	4603      	mov	r3, r0
 8017832:	2b00      	cmp	r3, #0
 8017834:	bf14      	ite	ne
 8017836:	2301      	movne	r3, #1
 8017838:	2300      	moveq	r3, #0
 801783a:	b2db      	uxtb	r3, r3
 801783c:	2b00      	cmp	r3, #0
 801783e:	d001      	beq.n	8017844 <_ZL12MX_I2C3_Initv+0x70>
  {
    Error_Handler();
 8017840:	f000 fe82 	bl	8018548 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8017844:	2100      	movs	r1, #0
 8017846:	4807      	ldr	r0, [pc, #28]	; (8017864 <_ZL12MX_I2C3_Initv+0x90>)
 8017848:	f7ed fc29 	bl	800509e <HAL_I2CEx_ConfigDigitalFilter>
 801784c:	4603      	mov	r3, r0
 801784e:	2b00      	cmp	r3, #0
 8017850:	bf14      	ite	ne
 8017852:	2301      	movne	r3, #1
 8017854:	2300      	moveq	r3, #0
 8017856:	b2db      	uxtb	r3, r3
 8017858:	2b00      	cmp	r3, #0
 801785a:	d001      	beq.n	8017860 <_ZL12MX_I2C3_Initv+0x8c>
  {
    Error_Handler();
 801785c:	f000 fe74 	bl	8018548 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8017860:	bf00      	nop
 8017862:	bd80      	pop	{r7, pc}
 8017864:	20009514 	.word	0x20009514
 8017868:	40005c00 	.word	0x40005c00
 801786c:	00c0eaff 	.word	0x00c0eaff

08017870 <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8017870:	b580      	push	{r7, lr}
 8017872:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8017874:	4b14      	ldr	r3, [pc, #80]	; (80178c8 <_ZL15MX_QUADSPI_Initv+0x58>)
 8017876:	4a15      	ldr	r2, [pc, #84]	; (80178cc <_ZL15MX_QUADSPI_Initv+0x5c>)
 8017878:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 801787a:	4b13      	ldr	r3, [pc, #76]	; (80178c8 <_ZL15MX_QUADSPI_Initv+0x58>)
 801787c:	22ff      	movs	r2, #255	; 0xff
 801787e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8017880:	4b11      	ldr	r3, [pc, #68]	; (80178c8 <_ZL15MX_QUADSPI_Initv+0x58>)
 8017882:	2201      	movs	r2, #1
 8017884:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8017886:	4b10      	ldr	r3, [pc, #64]	; (80178c8 <_ZL15MX_QUADSPI_Initv+0x58>)
 8017888:	2200      	movs	r2, #0
 801788a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 801788c:	4b0e      	ldr	r3, [pc, #56]	; (80178c8 <_ZL15MX_QUADSPI_Initv+0x58>)
 801788e:	2201      	movs	r2, #1
 8017890:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8017892:	4b0d      	ldr	r3, [pc, #52]	; (80178c8 <_ZL15MX_QUADSPI_Initv+0x58>)
 8017894:	2200      	movs	r2, #0
 8017896:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8017898:	4b0b      	ldr	r3, [pc, #44]	; (80178c8 <_ZL15MX_QUADSPI_Initv+0x58>)
 801789a:	2200      	movs	r2, #0
 801789c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 801789e:	4b0a      	ldr	r3, [pc, #40]	; (80178c8 <_ZL15MX_QUADSPI_Initv+0x58>)
 80178a0:	2200      	movs	r2, #0
 80178a2:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 80178a4:	4b08      	ldr	r3, [pc, #32]	; (80178c8 <_ZL15MX_QUADSPI_Initv+0x58>)
 80178a6:	2200      	movs	r2, #0
 80178a8:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80178aa:	4807      	ldr	r0, [pc, #28]	; (80178c8 <_ZL15MX_QUADSPI_Initv+0x58>)
 80178ac:	f7ee f8da 	bl	8005a64 <HAL_QSPI_Init>
 80178b0:	4603      	mov	r3, r0
 80178b2:	2b00      	cmp	r3, #0
 80178b4:	bf14      	ite	ne
 80178b6:	2301      	movne	r3, #1
 80178b8:	2300      	moveq	r3, #0
 80178ba:	b2db      	uxtb	r3, r3
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d001      	beq.n	80178c4 <_ZL15MX_QUADSPI_Initv+0x54>
  {
    Error_Handler();
 80178c0:	f000 fe42 	bl	8018548 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80178c4:	bf00      	nop
 80178c6:	bd80      	pop	{r7, pc}
 80178c8:	20009560 	.word	0x20009560
 80178cc:	a0001000 	.word	0xa0001000

080178d0 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80178d0:	b580      	push	{r7, lr}
 80178d2:	b092      	sub	sp, #72	; 0x48
 80178d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80178d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80178da:	2200      	movs	r2, #0
 80178dc:	601a      	str	r2, [r3, #0]
 80178de:	605a      	str	r2, [r3, #4]
 80178e0:	609a      	str	r2, [r3, #8]
 80178e2:	60da      	str	r2, [r3, #12]
 80178e4:	611a      	str	r2, [r3, #16]
 80178e6:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 80178e8:	2300      	movs	r3, #0
 80178ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 80178ec:	463b      	mov	r3, r7
 80178ee:	222c      	movs	r2, #44	; 0x2c
 80178f0:	2100      	movs	r1, #0
 80178f2:	4618      	mov	r0, r3
 80178f4:	f00a fef6 	bl	80226e4 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 80178f8:	4b56      	ldr	r3, [pc, #344]	; (8017a54 <_ZL11MX_RTC_Initv+0x184>)
 80178fa:	4a57      	ldr	r2, [pc, #348]	; (8017a58 <_ZL11MX_RTC_Initv+0x188>)
 80178fc:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80178fe:	4b55      	ldr	r3, [pc, #340]	; (8017a54 <_ZL11MX_RTC_Initv+0x184>)
 8017900:	2200      	movs	r2, #0
 8017902:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8017904:	4b53      	ldr	r3, [pc, #332]	; (8017a54 <_ZL11MX_RTC_Initv+0x184>)
 8017906:	227f      	movs	r2, #127	; 0x7f
 8017908:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 801790a:	4b52      	ldr	r3, [pc, #328]	; (8017a54 <_ZL11MX_RTC_Initv+0x184>)
 801790c:	22ff      	movs	r2, #255	; 0xff
 801790e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8017910:	4b50      	ldr	r3, [pc, #320]	; (8017a54 <_ZL11MX_RTC_Initv+0x184>)
 8017912:	2200      	movs	r2, #0
 8017914:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8017916:	4b4f      	ldr	r3, [pc, #316]	; (8017a54 <_ZL11MX_RTC_Initv+0x184>)
 8017918:	2200      	movs	r2, #0
 801791a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 801791c:	4b4d      	ldr	r3, [pc, #308]	; (8017a54 <_ZL11MX_RTC_Initv+0x184>)
 801791e:	2200      	movs	r2, #0
 8017920:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8017922:	484c      	ldr	r0, [pc, #304]	; (8017a54 <_ZL11MX_RTC_Initv+0x184>)
 8017924:	f7ef fb14 	bl	8006f50 <HAL_RTC_Init>
 8017928:	4603      	mov	r3, r0
 801792a:	2b00      	cmp	r3, #0
 801792c:	bf14      	ite	ne
 801792e:	2301      	movne	r3, #1
 8017930:	2300      	moveq	r3, #0
 8017932:	b2db      	uxtb	r3, r3
 8017934:	2b00      	cmp	r3, #0
 8017936:	d001      	beq.n	801793c <_ZL11MX_RTC_Initv+0x6c>
  {
    Error_Handler();
 8017938:	f000 fe06 	bl	8018548 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 801793c:	2300      	movs	r3, #0
 801793e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8017942:	2300      	movs	r3, #0
 8017944:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8017948:	2300      	movs	r3, #0
 801794a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 801794e:	2300      	movs	r3, #0
 8017950:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8017952:	2300      	movs	r3, #0
 8017954:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8017956:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801795a:	2201      	movs	r2, #1
 801795c:	4619      	mov	r1, r3
 801795e:	483d      	ldr	r0, [pc, #244]	; (8017a54 <_ZL11MX_RTC_Initv+0x184>)
 8017960:	f7ef fb72 	bl	8007048 <HAL_RTC_SetTime>
 8017964:	4603      	mov	r3, r0
 8017966:	2b00      	cmp	r3, #0
 8017968:	bf14      	ite	ne
 801796a:	2301      	movne	r3, #1
 801796c:	2300      	moveq	r3, #0
 801796e:	b2db      	uxtb	r3, r3
 8017970:	2b00      	cmp	r3, #0
 8017972:	d001      	beq.n	8017978 <_ZL11MX_RTC_Initv+0xa8>
  {
    Error_Handler();
 8017974:	f000 fde8 	bl	8018548 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8017978:	2301      	movs	r3, #1
 801797a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 801797e:	2301      	movs	r3, #1
 8017980:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8017984:	2301      	movs	r3, #1
 8017986:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 801798a:	2300      	movs	r3, #0
 801798c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8017990:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017994:	2201      	movs	r2, #1
 8017996:	4619      	mov	r1, r3
 8017998:	482e      	ldr	r0, [pc, #184]	; (8017a54 <_ZL11MX_RTC_Initv+0x184>)
 801799a:	f7ef fc13 	bl	80071c4 <HAL_RTC_SetDate>
 801799e:	4603      	mov	r3, r0
 80179a0:	2b00      	cmp	r3, #0
 80179a2:	bf14      	ite	ne
 80179a4:	2301      	movne	r3, #1
 80179a6:	2300      	moveq	r3, #0
 80179a8:	b2db      	uxtb	r3, r3
 80179aa:	2b00      	cmp	r3, #0
 80179ac:	d001      	beq.n	80179b2 <_ZL11MX_RTC_Initv+0xe2>
  {
    Error_Handler();
 80179ae:	f000 fdcb 	bl	8018548 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80179b2:	2300      	movs	r3, #0
 80179b4:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80179b6:	2300      	movs	r3, #0
 80179b8:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80179ba:	2300      	movs	r3, #0
 80179bc:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80179be:	2300      	movs	r3, #0
 80179c0:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80179c2:	2300      	movs	r3, #0
 80179c4:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80179c6:	2300      	movs	r3, #0
 80179c8:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80179ca:	2300      	movs	r3, #0
 80179cc:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80179ce:	2300      	movs	r3, #0
 80179d0:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80179d2:	2300      	movs	r3, #0
 80179d4:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 80179d6:	2301      	movs	r3, #1
 80179d8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 80179dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80179e0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80179e2:	463b      	mov	r3, r7
 80179e4:	2201      	movs	r2, #1
 80179e6:	4619      	mov	r1, r3
 80179e8:	481a      	ldr	r0, [pc, #104]	; (8017a54 <_ZL11MX_RTC_Initv+0x184>)
 80179ea:	f7ef fc93 	bl	8007314 <HAL_RTC_SetAlarm>
 80179ee:	4603      	mov	r3, r0
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	bf14      	ite	ne
 80179f4:	2301      	movne	r3, #1
 80179f6:	2300      	moveq	r3, #0
 80179f8:	b2db      	uxtb	r3, r3
 80179fa:	2b00      	cmp	r3, #0
 80179fc:	d001      	beq.n	8017a02 <_ZL11MX_RTC_Initv+0x132>
  {
    Error_Handler();
 80179fe:	f000 fda3 	bl	8018548 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8017a02:	2301      	movs	r3, #1
 8017a04:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8017a08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8017a0e:	463b      	mov	r3, r7
 8017a10:	2201      	movs	r2, #1
 8017a12:	4619      	mov	r1, r3
 8017a14:	480f      	ldr	r0, [pc, #60]	; (8017a54 <_ZL11MX_RTC_Initv+0x184>)
 8017a16:	f7ef fc7d 	bl	8007314 <HAL_RTC_SetAlarm>
 8017a1a:	4603      	mov	r3, r0
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	bf14      	ite	ne
 8017a20:	2301      	movne	r3, #1
 8017a22:	2300      	moveq	r3, #0
 8017a24:	b2db      	uxtb	r3, r3
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d001      	beq.n	8017a2e <_ZL11MX_RTC_Initv+0x15e>
  {
    Error_Handler();
 8017a2a:	f000 fd8d 	bl	8018548 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8017a2e:	2202      	movs	r2, #2
 8017a30:	2100      	movs	r1, #0
 8017a32:	4808      	ldr	r0, [pc, #32]	; (8017a54 <_ZL11MX_RTC_Initv+0x184>)
 8017a34:	f7ef fdf8 	bl	8007628 <HAL_RTCEx_SetTimeStamp>
 8017a38:	4603      	mov	r3, r0
 8017a3a:	2b00      	cmp	r3, #0
 8017a3c:	bf14      	ite	ne
 8017a3e:	2301      	movne	r3, #1
 8017a40:	2300      	moveq	r3, #0
 8017a42:	b2db      	uxtb	r3, r3
 8017a44:	2b00      	cmp	r3, #0
 8017a46:	d001      	beq.n	8017a4c <_ZL11MX_RTC_Initv+0x17c>
  {
    Error_Handler();
 8017a48:	f000 fd7e 	bl	8018548 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8017a4c:	bf00      	nop
 8017a4e:	3748      	adds	r7, #72	; 0x48
 8017a50:	46bd      	mov	sp, r7
 8017a52:	bd80      	pop	{r7, pc}
 8017a54:	200095ac 	.word	0x200095ac
 8017a58:	40002800 	.word	0x40002800

08017a5c <_ZL12MX_SAI2_Initv>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 8017a5c:	b580      	push	{r7, lr}
 8017a5e:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 8017a60:	4b52      	ldr	r3, [pc, #328]	; (8017bac <_ZL12MX_SAI2_Initv+0x150>)
 8017a62:	4a53      	ldr	r2, [pc, #332]	; (8017bb0 <_ZL12MX_SAI2_Initv+0x154>)
 8017a64:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 8017a66:	4b51      	ldr	r3, [pc, #324]	; (8017bac <_ZL12MX_SAI2_Initv+0x150>)
 8017a68:	2200      	movs	r2, #0
 8017a6a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8017a6c:	4b4f      	ldr	r3, [pc, #316]	; (8017bac <_ZL12MX_SAI2_Initv+0x150>)
 8017a6e:	2200      	movs	r2, #0
 8017a70:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8017a72:	4b4e      	ldr	r3, [pc, #312]	; (8017bac <_ZL12MX_SAI2_Initv+0x150>)
 8017a74:	2240      	movs	r2, #64	; 0x40
 8017a76:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8017a78:	4b4c      	ldr	r3, [pc, #304]	; (8017bac <_ZL12MX_SAI2_Initv+0x150>)
 8017a7a:	2200      	movs	r2, #0
 8017a7c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8017a7e:	4b4b      	ldr	r3, [pc, #300]	; (8017bac <_ZL12MX_SAI2_Initv+0x150>)
 8017a80:	2200      	movs	r2, #0
 8017a82:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8017a84:	4b49      	ldr	r3, [pc, #292]	; (8017bac <_ZL12MX_SAI2_Initv+0x150>)
 8017a86:	2200      	movs	r2, #0
 8017a88:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8017a8a:	4b48      	ldr	r3, [pc, #288]	; (8017bac <_ZL12MX_SAI2_Initv+0x150>)
 8017a8c:	2200      	movs	r2, #0
 8017a8e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8017a90:	4b46      	ldr	r3, [pc, #280]	; (8017bac <_ZL12MX_SAI2_Initv+0x150>)
 8017a92:	2200      	movs	r2, #0
 8017a94:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8017a96:	4b45      	ldr	r3, [pc, #276]	; (8017bac <_ZL12MX_SAI2_Initv+0x150>)
 8017a98:	2200      	movs	r2, #0
 8017a9a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8017a9c:	4b43      	ldr	r3, [pc, #268]	; (8017bac <_ZL12MX_SAI2_Initv+0x150>)
 8017a9e:	4a45      	ldr	r2, [pc, #276]	; (8017bb4 <_ZL12MX_SAI2_Initv+0x158>)
 8017aa0:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8017aa2:	4b42      	ldr	r3, [pc, #264]	; (8017bac <_ZL12MX_SAI2_Initv+0x150>)
 8017aa4:	2200      	movs	r2, #0
 8017aa6:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8017aa8:	4b40      	ldr	r3, [pc, #256]	; (8017bac <_ZL12MX_SAI2_Initv+0x150>)
 8017aaa:	2200      	movs	r2, #0
 8017aac:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8017aae:	4b3f      	ldr	r3, [pc, #252]	; (8017bac <_ZL12MX_SAI2_Initv+0x150>)
 8017ab0:	2200      	movs	r2, #0
 8017ab2:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8017ab4:	4b3d      	ldr	r3, [pc, #244]	; (8017bac <_ZL12MX_SAI2_Initv+0x150>)
 8017ab6:	2200      	movs	r2, #0
 8017ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 8017aba:	4b3c      	ldr	r3, [pc, #240]	; (8017bac <_ZL12MX_SAI2_Initv+0x150>)
 8017abc:	2208      	movs	r2, #8
 8017abe:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8017ac0:	4b3a      	ldr	r3, [pc, #232]	; (8017bac <_ZL12MX_SAI2_Initv+0x150>)
 8017ac2:	2201      	movs	r2, #1
 8017ac4:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8017ac6:	4b39      	ldr	r3, [pc, #228]	; (8017bac <_ZL12MX_SAI2_Initv+0x150>)
 8017ac8:	2200      	movs	r2, #0
 8017aca:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8017acc:	4b37      	ldr	r3, [pc, #220]	; (8017bac <_ZL12MX_SAI2_Initv+0x150>)
 8017ace:	2200      	movs	r2, #0
 8017ad0:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8017ad2:	4b36      	ldr	r3, [pc, #216]	; (8017bac <_ZL12MX_SAI2_Initv+0x150>)
 8017ad4:	2200      	movs	r2, #0
 8017ad6:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8017ad8:	4b34      	ldr	r3, [pc, #208]	; (8017bac <_ZL12MX_SAI2_Initv+0x150>)
 8017ada:	2200      	movs	r2, #0
 8017adc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8017ade:	4b33      	ldr	r3, [pc, #204]	; (8017bac <_ZL12MX_SAI2_Initv+0x150>)
 8017ae0:	2200      	movs	r2, #0
 8017ae2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8017ae4:	4b31      	ldr	r3, [pc, #196]	; (8017bac <_ZL12MX_SAI2_Initv+0x150>)
 8017ae6:	2201      	movs	r2, #1
 8017ae8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8017aea:	4b30      	ldr	r3, [pc, #192]	; (8017bac <_ZL12MX_SAI2_Initv+0x150>)
 8017aec:	2200      	movs	r2, #0
 8017aee:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8017af0:	482e      	ldr	r0, [pc, #184]	; (8017bac <_ZL12MX_SAI2_Initv+0x150>)
 8017af2:	f7ef fdef 	bl	80076d4 <HAL_SAI_Init>
 8017af6:	4603      	mov	r3, r0
 8017af8:	2b00      	cmp	r3, #0
 8017afa:	bf14      	ite	ne
 8017afc:	2301      	movne	r3, #1
 8017afe:	2300      	moveq	r3, #0
 8017b00:	b2db      	uxtb	r3, r3
 8017b02:	2b00      	cmp	r3, #0
 8017b04:	d001      	beq.n	8017b0a <_ZL12MX_SAI2_Initv+0xae>
  {
    Error_Handler();
 8017b06:	f000 fd1f 	bl	8018548 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 8017b0a:	4b2b      	ldr	r3, [pc, #172]	; (8017bb8 <_ZL12MX_SAI2_Initv+0x15c>)
 8017b0c:	4a2b      	ldr	r2, [pc, #172]	; (8017bbc <_ZL12MX_SAI2_Initv+0x160>)
 8017b0e:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 8017b10:	4b29      	ldr	r3, [pc, #164]	; (8017bb8 <_ZL12MX_SAI2_Initv+0x15c>)
 8017b12:	2200      	movs	r2, #0
 8017b14:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8017b16:	4b28      	ldr	r3, [pc, #160]	; (8017bb8 <_ZL12MX_SAI2_Initv+0x15c>)
 8017b18:	2203      	movs	r2, #3
 8017b1a:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8017b1c:	4b26      	ldr	r3, [pc, #152]	; (8017bb8 <_ZL12MX_SAI2_Initv+0x15c>)
 8017b1e:	2240      	movs	r2, #64	; 0x40
 8017b20:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8017b22:	4b25      	ldr	r3, [pc, #148]	; (8017bb8 <_ZL12MX_SAI2_Initv+0x15c>)
 8017b24:	2200      	movs	r2, #0
 8017b26:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8017b28:	4b23      	ldr	r3, [pc, #140]	; (8017bb8 <_ZL12MX_SAI2_Initv+0x15c>)
 8017b2a:	2200      	movs	r2, #0
 8017b2c:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8017b2e:	4b22      	ldr	r3, [pc, #136]	; (8017bb8 <_ZL12MX_SAI2_Initv+0x15c>)
 8017b30:	2201      	movs	r2, #1
 8017b32:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8017b34:	4b20      	ldr	r3, [pc, #128]	; (8017bb8 <_ZL12MX_SAI2_Initv+0x15c>)
 8017b36:	2200      	movs	r2, #0
 8017b38:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8017b3a:	4b1f      	ldr	r3, [pc, #124]	; (8017bb8 <_ZL12MX_SAI2_Initv+0x15c>)
 8017b3c:	2200      	movs	r2, #0
 8017b3e:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8017b40:	4b1d      	ldr	r3, [pc, #116]	; (8017bb8 <_ZL12MX_SAI2_Initv+0x15c>)
 8017b42:	2200      	movs	r2, #0
 8017b44:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8017b46:	4b1c      	ldr	r3, [pc, #112]	; (8017bb8 <_ZL12MX_SAI2_Initv+0x15c>)
 8017b48:	2200      	movs	r2, #0
 8017b4a:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8017b4c:	4b1a      	ldr	r3, [pc, #104]	; (8017bb8 <_ZL12MX_SAI2_Initv+0x15c>)
 8017b4e:	2200      	movs	r2, #0
 8017b50:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8017b52:	4b19      	ldr	r3, [pc, #100]	; (8017bb8 <_ZL12MX_SAI2_Initv+0x15c>)
 8017b54:	2200      	movs	r2, #0
 8017b56:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 24;
 8017b58:	4b17      	ldr	r3, [pc, #92]	; (8017bb8 <_ZL12MX_SAI2_Initv+0x15c>)
 8017b5a:	2218      	movs	r2, #24
 8017b5c:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 8017b5e:	4b16      	ldr	r3, [pc, #88]	; (8017bb8 <_ZL12MX_SAI2_Initv+0x15c>)
 8017b60:	2201      	movs	r2, #1
 8017b62:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8017b64:	4b14      	ldr	r3, [pc, #80]	; (8017bb8 <_ZL12MX_SAI2_Initv+0x15c>)
 8017b66:	2200      	movs	r2, #0
 8017b68:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8017b6a:	4b13      	ldr	r3, [pc, #76]	; (8017bb8 <_ZL12MX_SAI2_Initv+0x15c>)
 8017b6c:	2200      	movs	r2, #0
 8017b6e:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8017b70:	4b11      	ldr	r3, [pc, #68]	; (8017bb8 <_ZL12MX_SAI2_Initv+0x15c>)
 8017b72:	2200      	movs	r2, #0
 8017b74:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8017b76:	4b10      	ldr	r3, [pc, #64]	; (8017bb8 <_ZL12MX_SAI2_Initv+0x15c>)
 8017b78:	2200      	movs	r2, #0
 8017b7a:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8017b7c:	4b0e      	ldr	r3, [pc, #56]	; (8017bb8 <_ZL12MX_SAI2_Initv+0x15c>)
 8017b7e:	2200      	movs	r2, #0
 8017b80:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8017b82:	4b0d      	ldr	r3, [pc, #52]	; (8017bb8 <_ZL12MX_SAI2_Initv+0x15c>)
 8017b84:	2201      	movs	r2, #1
 8017b86:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8017b88:	4b0b      	ldr	r3, [pc, #44]	; (8017bb8 <_ZL12MX_SAI2_Initv+0x15c>)
 8017b8a:	2200      	movs	r2, #0
 8017b8c:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8017b8e:	480a      	ldr	r0, [pc, #40]	; (8017bb8 <_ZL12MX_SAI2_Initv+0x15c>)
 8017b90:	f7ef fda0 	bl	80076d4 <HAL_SAI_Init>
 8017b94:	4603      	mov	r3, r0
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	bf14      	ite	ne
 8017b9a:	2301      	movne	r3, #1
 8017b9c:	2300      	moveq	r3, #0
 8017b9e:	b2db      	uxtb	r3, r3
 8017ba0:	2b00      	cmp	r3, #0
 8017ba2:	d001      	beq.n	8017ba8 <_ZL12MX_SAI2_Initv+0x14c>
  {
    Error_Handler();
 8017ba4:	f000 fcd0 	bl	8018548 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8017ba8:	bf00      	nop
 8017baa:	bd80      	pop	{r7, pc}
 8017bac:	200095cc 	.word	0x200095cc
 8017bb0:	40015c04 	.word	0x40015c04
 8017bb4:	0002ee00 	.word	0x0002ee00
 8017bb8:	20009650 	.word	0x20009650
 8017bbc:	40015c24 	.word	0x40015c24

08017bc0 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8017bc0:	b480      	push	{r7}
 8017bc2:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8017bc4:	4b0c      	ldr	r3, [pc, #48]	; (8017bf8 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8017bc6:	4a0d      	ldr	r2, [pc, #52]	; (8017bfc <_ZL17MX_SDMMC1_SD_Initv+0x3c>)
 8017bc8:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8017bca:	4b0b      	ldr	r3, [pc, #44]	; (8017bf8 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8017bcc:	2200      	movs	r2, #0
 8017bce:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8017bd0:	4b09      	ldr	r3, [pc, #36]	; (8017bf8 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8017bd2:	2200      	movs	r2, #0
 8017bd4:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8017bd6:	4b08      	ldr	r3, [pc, #32]	; (8017bf8 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8017bd8:	2200      	movs	r2, #0
 8017bda:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8017bdc:	4b06      	ldr	r3, [pc, #24]	; (8017bf8 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8017bde:	2200      	movs	r2, #0
 8017be0:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8017be2:	4b05      	ldr	r3, [pc, #20]	; (8017bf8 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8017be4:	2200      	movs	r2, #0
 8017be6:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8017be8:	4b03      	ldr	r3, [pc, #12]	; (8017bf8 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8017bea:	2200      	movs	r2, #0
 8017bec:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8017bee:	bf00      	nop
 8017bf0:	46bd      	mov	sp, r7
 8017bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bf6:	4770      	bx	lr
 8017bf8:	200096d4 	.word	0x200096d4
 8017bfc:	40012c00 	.word	0x40012c00

08017c00 <_ZL15MX_SPDIFRX_Initv>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8017c00:	b580      	push	{r7, lr}
 8017c02:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8017c04:	4b18      	ldr	r3, [pc, #96]	; (8017c68 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8017c06:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8017c0a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8017c0c:	4b16      	ldr	r3, [pc, #88]	; (8017c68 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8017c0e:	2200      	movs	r2, #0
 8017c10:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8017c12:	4b15      	ldr	r3, [pc, #84]	; (8017c68 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8017c14:	2200      	movs	r2, #0
 8017c16:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8017c18:	4b13      	ldr	r3, [pc, #76]	; (8017c68 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8017c1a:	2200      	movs	r2, #0
 8017c1c:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8017c1e:	4b12      	ldr	r3, [pc, #72]	; (8017c68 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8017c20:	2200      	movs	r2, #0
 8017c22:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8017c24:	4b10      	ldr	r3, [pc, #64]	; (8017c68 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8017c26:	2200      	movs	r2, #0
 8017c28:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8017c2a:	4b0f      	ldr	r3, [pc, #60]	; (8017c68 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8017c2c:	2200      	movs	r2, #0
 8017c2e:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8017c30:	4b0d      	ldr	r3, [pc, #52]	; (8017c68 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8017c32:	2200      	movs	r2, #0
 8017c34:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8017c36:	4b0c      	ldr	r3, [pc, #48]	; (8017c68 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8017c38:	2200      	movs	r2, #0
 8017c3a:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8017c3c:	4b0a      	ldr	r3, [pc, #40]	; (8017c68 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8017c3e:	2200      	movs	r2, #0
 8017c40:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8017c42:	4b09      	ldr	r3, [pc, #36]	; (8017c68 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8017c44:	2200      	movs	r2, #0
 8017c46:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8017c48:	4807      	ldr	r0, [pc, #28]	; (8017c68 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8017c4a:	f7f1 f82d 	bl	8008ca8 <HAL_SPDIFRX_Init>
 8017c4e:	4603      	mov	r3, r0
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	bf14      	ite	ne
 8017c54:	2301      	movne	r3, #1
 8017c56:	2300      	moveq	r3, #0
 8017c58:	b2db      	uxtb	r3, r3
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d001      	beq.n	8017c62 <_ZL15MX_SPDIFRX_Initv+0x62>
  {
    Error_Handler();
 8017c5e:	f000 fc73 	bl	8018548 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8017c62:	bf00      	nop
 8017c64:	bd80      	pop	{r7, pc}
 8017c66:	bf00      	nop
 8017c68:	20009758 	.word	0x20009758

08017c6c <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8017c6c:	b580      	push	{r7, lr}
 8017c6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8017c70:	4b1d      	ldr	r3, [pc, #116]	; (8017ce8 <_ZL12MX_SPI2_Initv+0x7c>)
 8017c72:	4a1e      	ldr	r2, [pc, #120]	; (8017cec <_ZL12MX_SPI2_Initv+0x80>)
 8017c74:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8017c76:	4b1c      	ldr	r3, [pc, #112]	; (8017ce8 <_ZL12MX_SPI2_Initv+0x7c>)
 8017c78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017c7c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8017c7e:	4b1a      	ldr	r3, [pc, #104]	; (8017ce8 <_ZL12MX_SPI2_Initv+0x7c>)
 8017c80:	2200      	movs	r2, #0
 8017c82:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8017c84:	4b18      	ldr	r3, [pc, #96]	; (8017ce8 <_ZL12MX_SPI2_Initv+0x7c>)
 8017c86:	f44f 7240 	mov.w	r2, #768	; 0x300
 8017c8a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017c8c:	4b16      	ldr	r3, [pc, #88]	; (8017ce8 <_ZL12MX_SPI2_Initv+0x7c>)
 8017c8e:	2200      	movs	r2, #0
 8017c90:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8017c92:	4b15      	ldr	r3, [pc, #84]	; (8017ce8 <_ZL12MX_SPI2_Initv+0x7c>)
 8017c94:	2200      	movs	r2, #0
 8017c96:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8017c98:	4b13      	ldr	r3, [pc, #76]	; (8017ce8 <_ZL12MX_SPI2_Initv+0x7c>)
 8017c9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017c9e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8017ca0:	4b11      	ldr	r3, [pc, #68]	; (8017ce8 <_ZL12MX_SPI2_Initv+0x7c>)
 8017ca2:	2200      	movs	r2, #0
 8017ca4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8017ca6:	4b10      	ldr	r3, [pc, #64]	; (8017ce8 <_ZL12MX_SPI2_Initv+0x7c>)
 8017ca8:	2200      	movs	r2, #0
 8017caa:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8017cac:	4b0e      	ldr	r3, [pc, #56]	; (8017ce8 <_ZL12MX_SPI2_Initv+0x7c>)
 8017cae:	2200      	movs	r2, #0
 8017cb0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017cb2:	4b0d      	ldr	r3, [pc, #52]	; (8017ce8 <_ZL12MX_SPI2_Initv+0x7c>)
 8017cb4:	2200      	movs	r2, #0
 8017cb6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8017cb8:	4b0b      	ldr	r3, [pc, #44]	; (8017ce8 <_ZL12MX_SPI2_Initv+0x7c>)
 8017cba:	2207      	movs	r2, #7
 8017cbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8017cbe:	4b0a      	ldr	r3, [pc, #40]	; (8017ce8 <_ZL12MX_SPI2_Initv+0x7c>)
 8017cc0:	2200      	movs	r2, #0
 8017cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8017cc4:	4b08      	ldr	r3, [pc, #32]	; (8017ce8 <_ZL12MX_SPI2_Initv+0x7c>)
 8017cc6:	2208      	movs	r2, #8
 8017cc8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8017cca:	4807      	ldr	r0, [pc, #28]	; (8017ce8 <_ZL12MX_SPI2_Initv+0x7c>)
 8017ccc:	f7f1 f848 	bl	8008d60 <HAL_SPI_Init>
 8017cd0:	4603      	mov	r3, r0
 8017cd2:	2b00      	cmp	r3, #0
 8017cd4:	bf14      	ite	ne
 8017cd6:	2301      	movne	r3, #1
 8017cd8:	2300      	moveq	r3, #0
 8017cda:	b2db      	uxtb	r3, r3
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d001      	beq.n	8017ce4 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8017ce0:	f000 fc32 	bl	8018548 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8017ce4:	bf00      	nop
 8017ce6:	bd80      	pop	{r7, pc}
 8017ce8:	200097a4 	.word	0x200097a4
 8017cec:	40003800 	.word	0x40003800

08017cf0 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8017cf0:	b580      	push	{r7, lr}
 8017cf2:	b08e      	sub	sp, #56	; 0x38
 8017cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017cf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017cfa:	2200      	movs	r2, #0
 8017cfc:	601a      	str	r2, [r3, #0]
 8017cfe:	605a      	str	r2, [r3, #4]
 8017d00:	609a      	str	r2, [r3, #8]
 8017d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017d04:	f107 031c 	add.w	r3, r7, #28
 8017d08:	2200      	movs	r2, #0
 8017d0a:	601a      	str	r2, [r3, #0]
 8017d0c:	605a      	str	r2, [r3, #4]
 8017d0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8017d10:	463b      	mov	r3, r7
 8017d12:	2200      	movs	r2, #0
 8017d14:	601a      	str	r2, [r3, #0]
 8017d16:	605a      	str	r2, [r3, #4]
 8017d18:	609a      	str	r2, [r3, #8]
 8017d1a:	60da      	str	r2, [r3, #12]
 8017d1c:	611a      	str	r2, [r3, #16]
 8017d1e:	615a      	str	r2, [r3, #20]
 8017d20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8017d22:	4b39      	ldr	r3, [pc, #228]	; (8017e08 <_ZL12MX_TIM3_Initv+0x118>)
 8017d24:	4a39      	ldr	r2, [pc, #228]	; (8017e0c <_ZL12MX_TIM3_Initv+0x11c>)
 8017d26:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8017d28:	4b37      	ldr	r3, [pc, #220]	; (8017e08 <_ZL12MX_TIM3_Initv+0x118>)
 8017d2a:	2200      	movs	r2, #0
 8017d2c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017d2e:	4b36      	ldr	r3, [pc, #216]	; (8017e08 <_ZL12MX_TIM3_Initv+0x118>)
 8017d30:	2200      	movs	r2, #0
 8017d32:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8017d34:	4b34      	ldr	r3, [pc, #208]	; (8017e08 <_ZL12MX_TIM3_Initv+0x118>)
 8017d36:	2200      	movs	r2, #0
 8017d38:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017d3a:	4b33      	ldr	r3, [pc, #204]	; (8017e08 <_ZL12MX_TIM3_Initv+0x118>)
 8017d3c:	2200      	movs	r2, #0
 8017d3e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017d40:	4b31      	ldr	r3, [pc, #196]	; (8017e08 <_ZL12MX_TIM3_Initv+0x118>)
 8017d42:	2200      	movs	r2, #0
 8017d44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8017d46:	4830      	ldr	r0, [pc, #192]	; (8017e08 <_ZL12MX_TIM3_Initv+0x118>)
 8017d48:	f7f1 f89c 	bl	8008e84 <HAL_TIM_Base_Init>
 8017d4c:	4603      	mov	r3, r0
 8017d4e:	2b00      	cmp	r3, #0
 8017d50:	bf14      	ite	ne
 8017d52:	2301      	movne	r3, #1
 8017d54:	2300      	moveq	r3, #0
 8017d56:	b2db      	uxtb	r3, r3
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d001      	beq.n	8017d60 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8017d5c:	f000 fbf4 	bl	8018548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017d64:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8017d66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017d6a:	4619      	mov	r1, r3
 8017d6c:	4826      	ldr	r0, [pc, #152]	; (8017e08 <_ZL12MX_TIM3_Initv+0x118>)
 8017d6e:	f7f1 fb6b 	bl	8009448 <HAL_TIM_ConfigClockSource>
 8017d72:	4603      	mov	r3, r0
 8017d74:	2b00      	cmp	r3, #0
 8017d76:	bf14      	ite	ne
 8017d78:	2301      	movne	r3, #1
 8017d7a:	2300      	moveq	r3, #0
 8017d7c:	b2db      	uxtb	r3, r3
 8017d7e:	2b00      	cmp	r3, #0
 8017d80:	d001      	beq.n	8017d86 <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8017d82:	f000 fbe1 	bl	8018548 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8017d86:	4820      	ldr	r0, [pc, #128]	; (8017e08 <_ZL12MX_TIM3_Initv+0x118>)
 8017d88:	f7f1 f8fc 	bl	8008f84 <HAL_TIM_PWM_Init>
 8017d8c:	4603      	mov	r3, r0
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	bf14      	ite	ne
 8017d92:	2301      	movne	r3, #1
 8017d94:	2300      	moveq	r3, #0
 8017d96:	b2db      	uxtb	r3, r3
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d001      	beq.n	8017da0 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8017d9c:	f000 fbd4 	bl	8018548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017da0:	2300      	movs	r3, #0
 8017da2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017da4:	2300      	movs	r3, #0
 8017da6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8017da8:	f107 031c 	add.w	r3, r7, #28
 8017dac:	4619      	mov	r1, r3
 8017dae:	4816      	ldr	r0, [pc, #88]	; (8017e08 <_ZL12MX_TIM3_Initv+0x118>)
 8017db0:	f7f1 ffd0 	bl	8009d54 <HAL_TIMEx_MasterConfigSynchronization>
 8017db4:	4603      	mov	r3, r0
 8017db6:	2b00      	cmp	r3, #0
 8017db8:	bf14      	ite	ne
 8017dba:	2301      	movne	r3, #1
 8017dbc:	2300      	moveq	r3, #0
 8017dbe:	b2db      	uxtb	r3, r3
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d001      	beq.n	8017dc8 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8017dc4:	f000 fbc0 	bl	8018548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8017dc8:	2360      	movs	r3, #96	; 0x60
 8017dca:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8017dcc:	2300      	movs	r3, #0
 8017dce:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8017dd0:	2300      	movs	r3, #0
 8017dd2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8017dd4:	2300      	movs	r3, #0
 8017dd6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8017dd8:	463b      	mov	r3, r7
 8017dda:	2200      	movs	r2, #0
 8017ddc:	4619      	mov	r1, r3
 8017dde:	480a      	ldr	r0, [pc, #40]	; (8017e08 <_ZL12MX_TIM3_Initv+0x118>)
 8017de0:	f7f1 fa1a 	bl	8009218 <HAL_TIM_PWM_ConfigChannel>
 8017de4:	4603      	mov	r3, r0
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	bf14      	ite	ne
 8017dea:	2301      	movne	r3, #1
 8017dec:	2300      	moveq	r3, #0
 8017dee:	b2db      	uxtb	r3, r3
 8017df0:	2b00      	cmp	r3, #0
 8017df2:	d001      	beq.n	8017df8 <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 8017df4:	f000 fba8 	bl	8018548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8017df8:	4803      	ldr	r0, [pc, #12]	; (8017e08 <_ZL12MX_TIM3_Initv+0x118>)
 8017dfa:	f001 fa8f 	bl	801931c <HAL_TIM_MspPostInit>

}
 8017dfe:	bf00      	nop
 8017e00:	3738      	adds	r7, #56	; 0x38
 8017e02:	46bd      	mov	sp, r7
 8017e04:	bd80      	pop	{r7, pc}
 8017e06:	bf00      	nop
 8017e08:	20009808 	.word	0x20009808
 8017e0c:	40000400 	.word	0x40000400

08017e10 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8017e10:	b580      	push	{r7, lr}
 8017e12:	b08e      	sub	sp, #56	; 0x38
 8017e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017e16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017e1a:	2200      	movs	r2, #0
 8017e1c:	601a      	str	r2, [r3, #0]
 8017e1e:	605a      	str	r2, [r3, #4]
 8017e20:	609a      	str	r2, [r3, #8]
 8017e22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017e24:	f107 031c 	add.w	r3, r7, #28
 8017e28:	2200      	movs	r2, #0
 8017e2a:	601a      	str	r2, [r3, #0]
 8017e2c:	605a      	str	r2, [r3, #4]
 8017e2e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8017e30:	463b      	mov	r3, r7
 8017e32:	2200      	movs	r2, #0
 8017e34:	601a      	str	r2, [r3, #0]
 8017e36:	605a      	str	r2, [r3, #4]
 8017e38:	609a      	str	r2, [r3, #8]
 8017e3a:	60da      	str	r2, [r3, #12]
 8017e3c:	611a      	str	r2, [r3, #16]
 8017e3e:	615a      	str	r2, [r3, #20]
 8017e40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8017e42:	4b39      	ldr	r3, [pc, #228]	; (8017f28 <_ZL12MX_TIM5_Initv+0x118>)
 8017e44:	4a39      	ldr	r2, [pc, #228]	; (8017f2c <_ZL12MX_TIM5_Initv+0x11c>)
 8017e46:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8017e48:	4b37      	ldr	r3, [pc, #220]	; (8017f28 <_ZL12MX_TIM5_Initv+0x118>)
 8017e4a:	2200      	movs	r2, #0
 8017e4c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017e4e:	4b36      	ldr	r3, [pc, #216]	; (8017f28 <_ZL12MX_TIM5_Initv+0x118>)
 8017e50:	2200      	movs	r2, #0
 8017e52:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8017e54:	4b34      	ldr	r3, [pc, #208]	; (8017f28 <_ZL12MX_TIM5_Initv+0x118>)
 8017e56:	2200      	movs	r2, #0
 8017e58:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017e5a:	4b33      	ldr	r3, [pc, #204]	; (8017f28 <_ZL12MX_TIM5_Initv+0x118>)
 8017e5c:	2200      	movs	r2, #0
 8017e5e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017e60:	4b31      	ldr	r3, [pc, #196]	; (8017f28 <_ZL12MX_TIM5_Initv+0x118>)
 8017e62:	2200      	movs	r2, #0
 8017e64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8017e66:	4830      	ldr	r0, [pc, #192]	; (8017f28 <_ZL12MX_TIM5_Initv+0x118>)
 8017e68:	f7f1 f80c 	bl	8008e84 <HAL_TIM_Base_Init>
 8017e6c:	4603      	mov	r3, r0
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	bf14      	ite	ne
 8017e72:	2301      	movne	r3, #1
 8017e74:	2300      	moveq	r3, #0
 8017e76:	b2db      	uxtb	r3, r3
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	d001      	beq.n	8017e80 <_ZL12MX_TIM5_Initv+0x70>
  {
    Error_Handler();
 8017e7c:	f000 fb64 	bl	8018548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017e84:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8017e86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017e8a:	4619      	mov	r1, r3
 8017e8c:	4826      	ldr	r0, [pc, #152]	; (8017f28 <_ZL12MX_TIM5_Initv+0x118>)
 8017e8e:	f7f1 fadb 	bl	8009448 <HAL_TIM_ConfigClockSource>
 8017e92:	4603      	mov	r3, r0
 8017e94:	2b00      	cmp	r3, #0
 8017e96:	bf14      	ite	ne
 8017e98:	2301      	movne	r3, #1
 8017e9a:	2300      	moveq	r3, #0
 8017e9c:	b2db      	uxtb	r3, r3
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d001      	beq.n	8017ea6 <_ZL12MX_TIM5_Initv+0x96>
  {
    Error_Handler();
 8017ea2:	f000 fb51 	bl	8018548 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8017ea6:	4820      	ldr	r0, [pc, #128]	; (8017f28 <_ZL12MX_TIM5_Initv+0x118>)
 8017ea8:	f7f1 f86c 	bl	8008f84 <HAL_TIM_PWM_Init>
 8017eac:	4603      	mov	r3, r0
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	bf14      	ite	ne
 8017eb2:	2301      	movne	r3, #1
 8017eb4:	2300      	moveq	r3, #0
 8017eb6:	b2db      	uxtb	r3, r3
 8017eb8:	2b00      	cmp	r3, #0
 8017eba:	d001      	beq.n	8017ec0 <_ZL12MX_TIM5_Initv+0xb0>
  {
    Error_Handler();
 8017ebc:	f000 fb44 	bl	8018548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017ec0:	2300      	movs	r3, #0
 8017ec2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017ec4:	2300      	movs	r3, #0
 8017ec6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8017ec8:	f107 031c 	add.w	r3, r7, #28
 8017ecc:	4619      	mov	r1, r3
 8017ece:	4816      	ldr	r0, [pc, #88]	; (8017f28 <_ZL12MX_TIM5_Initv+0x118>)
 8017ed0:	f7f1 ff40 	bl	8009d54 <HAL_TIMEx_MasterConfigSynchronization>
 8017ed4:	4603      	mov	r3, r0
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	bf14      	ite	ne
 8017eda:	2301      	movne	r3, #1
 8017edc:	2300      	moveq	r3, #0
 8017ede:	b2db      	uxtb	r3, r3
 8017ee0:	2b00      	cmp	r3, #0
 8017ee2:	d001      	beq.n	8017ee8 <_ZL12MX_TIM5_Initv+0xd8>
  {
    Error_Handler();
 8017ee4:	f000 fb30 	bl	8018548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8017ee8:	2360      	movs	r3, #96	; 0x60
 8017eea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8017eec:	2300      	movs	r3, #0
 8017eee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8017ef0:	2300      	movs	r3, #0
 8017ef2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8017ef4:	2300      	movs	r3, #0
 8017ef6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8017ef8:	463b      	mov	r3, r7
 8017efa:	220c      	movs	r2, #12
 8017efc:	4619      	mov	r1, r3
 8017efe:	480a      	ldr	r0, [pc, #40]	; (8017f28 <_ZL12MX_TIM5_Initv+0x118>)
 8017f00:	f7f1 f98a 	bl	8009218 <HAL_TIM_PWM_ConfigChannel>
 8017f04:	4603      	mov	r3, r0
 8017f06:	2b00      	cmp	r3, #0
 8017f08:	bf14      	ite	ne
 8017f0a:	2301      	movne	r3, #1
 8017f0c:	2300      	moveq	r3, #0
 8017f0e:	b2db      	uxtb	r3, r3
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d001      	beq.n	8017f18 <_ZL12MX_TIM5_Initv+0x108>
  {
    Error_Handler();
 8017f14:	f000 fb18 	bl	8018548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8017f18:	4803      	ldr	r0, [pc, #12]	; (8017f28 <_ZL12MX_TIM5_Initv+0x118>)
 8017f1a:	f001 f9ff 	bl	801931c <HAL_TIM_MspPostInit>

}
 8017f1e:	bf00      	nop
 8017f20:	3738      	adds	r7, #56	; 0x38
 8017f22:	46bd      	mov	sp, r7
 8017f24:	bd80      	pop	{r7, pc}
 8017f26:	bf00      	nop
 8017f28:	20009848 	.word	0x20009848
 8017f2c:	40000c00 	.word	0x40000c00

08017f30 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8017f30:	b580      	push	{r7, lr}
 8017f32:	b088      	sub	sp, #32
 8017f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017f36:	f107 0310 	add.w	r3, r7, #16
 8017f3a:	2200      	movs	r2, #0
 8017f3c:	601a      	str	r2, [r3, #0]
 8017f3e:	605a      	str	r2, [r3, #4]
 8017f40:	609a      	str	r2, [r3, #8]
 8017f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017f44:	1d3b      	adds	r3, r7, #4
 8017f46:	2200      	movs	r2, #0
 8017f48:	601a      	str	r2, [r3, #0]
 8017f4a:	605a      	str	r2, [r3, #4]
 8017f4c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8017f4e:	4b27      	ldr	r3, [pc, #156]	; (8017fec <_ZL12MX_TIM8_Initv+0xbc>)
 8017f50:	4a27      	ldr	r2, [pc, #156]	; (8017ff0 <_ZL12MX_TIM8_Initv+0xc0>)
 8017f52:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8017f54:	4b25      	ldr	r3, [pc, #148]	; (8017fec <_ZL12MX_TIM8_Initv+0xbc>)
 8017f56:	2200      	movs	r2, #0
 8017f58:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017f5a:	4b24      	ldr	r3, [pc, #144]	; (8017fec <_ZL12MX_TIM8_Initv+0xbc>)
 8017f5c:	2200      	movs	r2, #0
 8017f5e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8017f60:	4b22      	ldr	r3, [pc, #136]	; (8017fec <_ZL12MX_TIM8_Initv+0xbc>)
 8017f62:	2200      	movs	r2, #0
 8017f64:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017f66:	4b21      	ldr	r3, [pc, #132]	; (8017fec <_ZL12MX_TIM8_Initv+0xbc>)
 8017f68:	2200      	movs	r2, #0
 8017f6a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8017f6c:	4b1f      	ldr	r3, [pc, #124]	; (8017fec <_ZL12MX_TIM8_Initv+0xbc>)
 8017f6e:	2200      	movs	r2, #0
 8017f70:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017f72:	4b1e      	ldr	r3, [pc, #120]	; (8017fec <_ZL12MX_TIM8_Initv+0xbc>)
 8017f74:	2200      	movs	r2, #0
 8017f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8017f78:	481c      	ldr	r0, [pc, #112]	; (8017fec <_ZL12MX_TIM8_Initv+0xbc>)
 8017f7a:	f7f0 ff83 	bl	8008e84 <HAL_TIM_Base_Init>
 8017f7e:	4603      	mov	r3, r0
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	bf14      	ite	ne
 8017f84:	2301      	movne	r3, #1
 8017f86:	2300      	moveq	r3, #0
 8017f88:	b2db      	uxtb	r3, r3
 8017f8a:	2b00      	cmp	r3, #0
 8017f8c:	d001      	beq.n	8017f92 <_ZL12MX_TIM8_Initv+0x62>
  {
    Error_Handler();
 8017f8e:	f000 fadb 	bl	8018548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017f92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017f96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8017f98:	f107 0310 	add.w	r3, r7, #16
 8017f9c:	4619      	mov	r1, r3
 8017f9e:	4813      	ldr	r0, [pc, #76]	; (8017fec <_ZL12MX_TIM8_Initv+0xbc>)
 8017fa0:	f7f1 fa52 	bl	8009448 <HAL_TIM_ConfigClockSource>
 8017fa4:	4603      	mov	r3, r0
 8017fa6:	2b00      	cmp	r3, #0
 8017fa8:	bf14      	ite	ne
 8017faa:	2301      	movne	r3, #1
 8017fac:	2300      	moveq	r3, #0
 8017fae:	b2db      	uxtb	r3, r3
 8017fb0:	2b00      	cmp	r3, #0
 8017fb2:	d001      	beq.n	8017fb8 <_ZL12MX_TIM8_Initv+0x88>
  {
    Error_Handler();
 8017fb4:	f000 fac8 	bl	8018548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017fb8:	2300      	movs	r3, #0
 8017fba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8017fbc:	2300      	movs	r3, #0
 8017fbe:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017fc0:	2300      	movs	r3, #0
 8017fc2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8017fc4:	1d3b      	adds	r3, r7, #4
 8017fc6:	4619      	mov	r1, r3
 8017fc8:	4808      	ldr	r0, [pc, #32]	; (8017fec <_ZL12MX_TIM8_Initv+0xbc>)
 8017fca:	f7f1 fec3 	bl	8009d54 <HAL_TIMEx_MasterConfigSynchronization>
 8017fce:	4603      	mov	r3, r0
 8017fd0:	2b00      	cmp	r3, #0
 8017fd2:	bf14      	ite	ne
 8017fd4:	2301      	movne	r3, #1
 8017fd6:	2300      	moveq	r3, #0
 8017fd8:	b2db      	uxtb	r3, r3
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	d001      	beq.n	8017fe2 <_ZL12MX_TIM8_Initv+0xb2>
  {
    Error_Handler();
 8017fde:	f000 fab3 	bl	8018548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8017fe2:	bf00      	nop
 8017fe4:	3720      	adds	r7, #32
 8017fe6:	46bd      	mov	sp, r7
 8017fe8:	bd80      	pop	{r7, pc}
 8017fea:	bf00      	nop
 8017fec:	20009888 	.word	0x20009888
 8017ff0:	40010400 	.word	0x40010400

08017ff4 <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8017ff4:	b580      	push	{r7, lr}
 8017ff6:	b088      	sub	sp, #32
 8017ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8017ffa:	1d3b      	adds	r3, r7, #4
 8017ffc:	2200      	movs	r2, #0
 8017ffe:	601a      	str	r2, [r3, #0]
 8018000:	605a      	str	r2, [r3, #4]
 8018002:	609a      	str	r2, [r3, #8]
 8018004:	60da      	str	r2, [r3, #12]
 8018006:	611a      	str	r2, [r3, #16]
 8018008:	615a      	str	r2, [r3, #20]
 801800a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 801800c:	4b1e      	ldr	r3, [pc, #120]	; (8018088 <_ZL13MX_TIM12_Initv+0x94>)
 801800e:	4a1f      	ldr	r2, [pc, #124]	; (801808c <_ZL13MX_TIM12_Initv+0x98>)
 8018010:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8018012:	4b1d      	ldr	r3, [pc, #116]	; (8018088 <_ZL13MX_TIM12_Initv+0x94>)
 8018014:	2200      	movs	r2, #0
 8018016:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8018018:	4b1b      	ldr	r3, [pc, #108]	; (8018088 <_ZL13MX_TIM12_Initv+0x94>)
 801801a:	2200      	movs	r2, #0
 801801c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 801801e:	4b1a      	ldr	r3, [pc, #104]	; (8018088 <_ZL13MX_TIM12_Initv+0x94>)
 8018020:	2200      	movs	r2, #0
 8018022:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8018024:	4b18      	ldr	r3, [pc, #96]	; (8018088 <_ZL13MX_TIM12_Initv+0x94>)
 8018026:	2200      	movs	r2, #0
 8018028:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 801802a:	4b17      	ldr	r3, [pc, #92]	; (8018088 <_ZL13MX_TIM12_Initv+0x94>)
 801802c:	2200      	movs	r2, #0
 801802e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8018030:	4815      	ldr	r0, [pc, #84]	; (8018088 <_ZL13MX_TIM12_Initv+0x94>)
 8018032:	f7f0 ffa7 	bl	8008f84 <HAL_TIM_PWM_Init>
 8018036:	4603      	mov	r3, r0
 8018038:	2b00      	cmp	r3, #0
 801803a:	bf14      	ite	ne
 801803c:	2301      	movne	r3, #1
 801803e:	2300      	moveq	r3, #0
 8018040:	b2db      	uxtb	r3, r3
 8018042:	2b00      	cmp	r3, #0
 8018044:	d001      	beq.n	801804a <_ZL13MX_TIM12_Initv+0x56>
  {
    Error_Handler();
 8018046:	f000 fa7f 	bl	8018548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 801804a:	2360      	movs	r3, #96	; 0x60
 801804c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 801804e:	2300      	movs	r3, #0
 8018050:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8018052:	2300      	movs	r3, #0
 8018054:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8018056:	2300      	movs	r3, #0
 8018058:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 801805a:	1d3b      	adds	r3, r7, #4
 801805c:	2200      	movs	r2, #0
 801805e:	4619      	mov	r1, r3
 8018060:	4809      	ldr	r0, [pc, #36]	; (8018088 <_ZL13MX_TIM12_Initv+0x94>)
 8018062:	f7f1 f8d9 	bl	8009218 <HAL_TIM_PWM_ConfigChannel>
 8018066:	4603      	mov	r3, r0
 8018068:	2b00      	cmp	r3, #0
 801806a:	bf14      	ite	ne
 801806c:	2301      	movne	r3, #1
 801806e:	2300      	moveq	r3, #0
 8018070:	b2db      	uxtb	r3, r3
 8018072:	2b00      	cmp	r3, #0
 8018074:	d001      	beq.n	801807a <_ZL13MX_TIM12_Initv+0x86>
  {
    Error_Handler();
 8018076:	f000 fa67 	bl	8018548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 801807a:	4803      	ldr	r0, [pc, #12]	; (8018088 <_ZL13MX_TIM12_Initv+0x94>)
 801807c:	f001 f94e 	bl	801931c <HAL_TIM_MspPostInit>

}
 8018080:	bf00      	nop
 8018082:	3720      	adds	r7, #32
 8018084:	46bd      	mov	sp, r7
 8018086:	bd80      	pop	{r7, pc}
 8018088:	200098c8 	.word	0x200098c8
 801808c:	40001800 	.word	0x40001800

08018090 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8018090:	b580      	push	{r7, lr}
 8018092:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8018094:	4b16      	ldr	r3, [pc, #88]	; (80180f0 <_ZL19MX_USART1_UART_Initv+0x60>)
 8018096:	4a17      	ldr	r2, [pc, #92]	; (80180f4 <_ZL19MX_USART1_UART_Initv+0x64>)
 8018098:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 801809a:	4b15      	ldr	r3, [pc, #84]	; (80180f0 <_ZL19MX_USART1_UART_Initv+0x60>)
 801809c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80180a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80180a2:	4b13      	ldr	r3, [pc, #76]	; (80180f0 <_ZL19MX_USART1_UART_Initv+0x60>)
 80180a4:	2200      	movs	r2, #0
 80180a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80180a8:	4b11      	ldr	r3, [pc, #68]	; (80180f0 <_ZL19MX_USART1_UART_Initv+0x60>)
 80180aa:	2200      	movs	r2, #0
 80180ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80180ae:	4b10      	ldr	r3, [pc, #64]	; (80180f0 <_ZL19MX_USART1_UART_Initv+0x60>)
 80180b0:	2200      	movs	r2, #0
 80180b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80180b4:	4b0e      	ldr	r3, [pc, #56]	; (80180f0 <_ZL19MX_USART1_UART_Initv+0x60>)
 80180b6:	220c      	movs	r2, #12
 80180b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80180ba:	4b0d      	ldr	r3, [pc, #52]	; (80180f0 <_ZL19MX_USART1_UART_Initv+0x60>)
 80180bc:	2200      	movs	r2, #0
 80180be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80180c0:	4b0b      	ldr	r3, [pc, #44]	; (80180f0 <_ZL19MX_USART1_UART_Initv+0x60>)
 80180c2:	2200      	movs	r2, #0
 80180c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80180c6:	4b0a      	ldr	r3, [pc, #40]	; (80180f0 <_ZL19MX_USART1_UART_Initv+0x60>)
 80180c8:	2200      	movs	r2, #0
 80180ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80180cc:	4b08      	ldr	r3, [pc, #32]	; (80180f0 <_ZL19MX_USART1_UART_Initv+0x60>)
 80180ce:	2200      	movs	r2, #0
 80180d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80180d2:	4807      	ldr	r0, [pc, #28]	; (80180f0 <_ZL19MX_USART1_UART_Initv+0x60>)
 80180d4:	f7f1 ff36 	bl	8009f44 <HAL_UART_Init>
 80180d8:	4603      	mov	r3, r0
 80180da:	2b00      	cmp	r3, #0
 80180dc:	bf14      	ite	ne
 80180de:	2301      	movne	r3, #1
 80180e0:	2300      	moveq	r3, #0
 80180e2:	b2db      	uxtb	r3, r3
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d001      	beq.n	80180ec <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 80180e8:	f000 fa2e 	bl	8018548 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80180ec:	bf00      	nop
 80180ee:	bd80      	pop	{r7, pc}
 80180f0:	20009908 	.word	0x20009908
 80180f4:	40011000 	.word	0x40011000

080180f8 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80180f8:	b580      	push	{r7, lr}
 80180fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80180fc:	4b16      	ldr	r3, [pc, #88]	; (8018158 <_ZL19MX_USART6_UART_Initv+0x60>)
 80180fe:	4a17      	ldr	r2, [pc, #92]	; (801815c <_ZL19MX_USART6_UART_Initv+0x64>)
 8018100:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8018102:	4b15      	ldr	r3, [pc, #84]	; (8018158 <_ZL19MX_USART6_UART_Initv+0x60>)
 8018104:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8018108:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 801810a:	4b13      	ldr	r3, [pc, #76]	; (8018158 <_ZL19MX_USART6_UART_Initv+0x60>)
 801810c:	2200      	movs	r2, #0
 801810e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8018110:	4b11      	ldr	r3, [pc, #68]	; (8018158 <_ZL19MX_USART6_UART_Initv+0x60>)
 8018112:	2200      	movs	r2, #0
 8018114:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8018116:	4b10      	ldr	r3, [pc, #64]	; (8018158 <_ZL19MX_USART6_UART_Initv+0x60>)
 8018118:	2200      	movs	r2, #0
 801811a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 801811c:	4b0e      	ldr	r3, [pc, #56]	; (8018158 <_ZL19MX_USART6_UART_Initv+0x60>)
 801811e:	220c      	movs	r2, #12
 8018120:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8018122:	4b0d      	ldr	r3, [pc, #52]	; (8018158 <_ZL19MX_USART6_UART_Initv+0x60>)
 8018124:	2200      	movs	r2, #0
 8018126:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8018128:	4b0b      	ldr	r3, [pc, #44]	; (8018158 <_ZL19MX_USART6_UART_Initv+0x60>)
 801812a:	2200      	movs	r2, #0
 801812c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801812e:	4b0a      	ldr	r3, [pc, #40]	; (8018158 <_ZL19MX_USART6_UART_Initv+0x60>)
 8018130:	2200      	movs	r2, #0
 8018132:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8018134:	4b08      	ldr	r3, [pc, #32]	; (8018158 <_ZL19MX_USART6_UART_Initv+0x60>)
 8018136:	2200      	movs	r2, #0
 8018138:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 801813a:	4807      	ldr	r0, [pc, #28]	; (8018158 <_ZL19MX_USART6_UART_Initv+0x60>)
 801813c:	f7f1 ff02 	bl	8009f44 <HAL_UART_Init>
 8018140:	4603      	mov	r3, r0
 8018142:	2b00      	cmp	r3, #0
 8018144:	bf14      	ite	ne
 8018146:	2301      	movne	r3, #1
 8018148:	2300      	moveq	r3, #0
 801814a:	b2db      	uxtb	r3, r3
 801814c:	2b00      	cmp	r3, #0
 801814e:	d001      	beq.n	8018154 <_ZL19MX_USART6_UART_Initv+0x5c>
  {
    Error_Handler();
 8018150:	f000 f9fa 	bl	8018548 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8018154:	bf00      	nop
 8018156:	bd80      	pop	{r7, pc}
 8018158:	20009988 	.word	0x20009988
 801815c:	40011400 	.word	0x40011400

08018160 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8018160:	b580      	push	{r7, lr}
 8018162:	b090      	sub	sp, #64	; 0x40
 8018164:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018166:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801816a:	2200      	movs	r2, #0
 801816c:	601a      	str	r2, [r3, #0]
 801816e:	605a      	str	r2, [r3, #4]
 8018170:	609a      	str	r2, [r3, #8]
 8018172:	60da      	str	r2, [r3, #12]
 8018174:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8018176:	4baf      	ldr	r3, [pc, #700]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 8018178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801817a:	4aae      	ldr	r2, [pc, #696]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 801817c:	f043 0310 	orr.w	r3, r3, #16
 8018180:	6313      	str	r3, [r2, #48]	; 0x30
 8018182:	4bac      	ldr	r3, [pc, #688]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 8018184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018186:	f003 0310 	and.w	r3, r3, #16
 801818a:	62bb      	str	r3, [r7, #40]	; 0x28
 801818c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 801818e:	4ba9      	ldr	r3, [pc, #676]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 8018190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018192:	4aa8      	ldr	r2, [pc, #672]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 8018194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018198:	6313      	str	r3, [r2, #48]	; 0x30
 801819a:	4ba6      	ldr	r3, [pc, #664]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 801819c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801819e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80181a2:	627b      	str	r3, [r7, #36]	; 0x24
 80181a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80181a6:	4ba3      	ldr	r3, [pc, #652]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 80181a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181aa:	4aa2      	ldr	r2, [pc, #648]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 80181ac:	f043 0302 	orr.w	r3, r3, #2
 80181b0:	6313      	str	r3, [r2, #48]	; 0x30
 80181b2:	4ba0      	ldr	r3, [pc, #640]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 80181b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181b6:	f003 0302 	and.w	r3, r3, #2
 80181ba:	623b      	str	r3, [r7, #32]
 80181bc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80181be:	4b9d      	ldr	r3, [pc, #628]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 80181c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181c2:	4a9c      	ldr	r2, [pc, #624]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 80181c4:	f043 0308 	orr.w	r3, r3, #8
 80181c8:	6313      	str	r3, [r2, #48]	; 0x30
 80181ca:	4b9a      	ldr	r3, [pc, #616]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 80181cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181ce:	f003 0308 	and.w	r3, r3, #8
 80181d2:	61fb      	str	r3, [r7, #28]
 80181d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80181d6:	4b97      	ldr	r3, [pc, #604]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 80181d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181da:	4a96      	ldr	r2, [pc, #600]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 80181dc:	f043 0304 	orr.w	r3, r3, #4
 80181e0:	6313      	str	r3, [r2, #48]	; 0x30
 80181e2:	4b94      	ldr	r3, [pc, #592]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 80181e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181e6:	f003 0304 	and.w	r3, r3, #4
 80181ea:	61bb      	str	r3, [r7, #24]
 80181ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80181ee:	4b91      	ldr	r3, [pc, #580]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 80181f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181f2:	4a90      	ldr	r2, [pc, #576]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 80181f4:	f043 0301 	orr.w	r3, r3, #1
 80181f8:	6313      	str	r3, [r2, #48]	; 0x30
 80181fa:	4b8e      	ldr	r3, [pc, #568]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 80181fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80181fe:	f003 0301 	and.w	r3, r3, #1
 8018202:	617b      	str	r3, [r7, #20]
 8018204:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8018206:	4b8b      	ldr	r3, [pc, #556]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 8018208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801820a:	4a8a      	ldr	r2, [pc, #552]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 801820c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8018210:	6313      	str	r3, [r2, #48]	; 0x30
 8018212:	4b88      	ldr	r3, [pc, #544]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 8018214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018216:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801821a:	613b      	str	r3, [r7, #16]
 801821c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 801821e:	4b85      	ldr	r3, [pc, #532]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 8018220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018222:	4a84      	ldr	r2, [pc, #528]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 8018224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018228:	6313      	str	r3, [r2, #48]	; 0x30
 801822a:	4b82      	ldr	r3, [pc, #520]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 801822c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801822e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018232:	60fb      	str	r3, [r7, #12]
 8018234:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8018236:	4b7f      	ldr	r3, [pc, #508]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 8018238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801823a:	4a7e      	ldr	r2, [pc, #504]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 801823c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8018240:	6313      	str	r3, [r2, #48]	; 0x30
 8018242:	4b7c      	ldr	r3, [pc, #496]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 8018244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 801824a:	60bb      	str	r3, [r7, #8]
 801824c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 801824e:	4b79      	ldr	r3, [pc, #484]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 8018250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018252:	4a78      	ldr	r2, [pc, #480]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 8018254:	f043 0320 	orr.w	r3, r3, #32
 8018258:	6313      	str	r3, [r2, #48]	; 0x30
 801825a:	4b76      	ldr	r3, [pc, #472]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 801825c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801825e:	f003 0320 	and.w	r3, r3, #32
 8018262:	607b      	str	r3, [r7, #4]
 8018264:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8018266:	4b73      	ldr	r3, [pc, #460]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 8018268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801826a:	4a72      	ldr	r2, [pc, #456]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 801826c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018270:	6313      	str	r3, [r2, #48]	; 0x30
 8018272:	4b70      	ldr	r3, [pc, #448]	; (8018434 <_ZL12MX_GPIO_Initv+0x2d4>)
 8018274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801827a:	603b      	str	r3, [r7, #0]
 801827c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 801827e:	2201      	movs	r2, #1
 8018280:	2120      	movs	r1, #32
 8018282:	486d      	ldr	r0, [pc, #436]	; (8018438 <_ZL12MX_GPIO_Initv+0x2d8>)
 8018284:	f7ea fd32 	bl	8002cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8018288:	2200      	movs	r2, #0
 801828a:	210c      	movs	r1, #12
 801828c:	486b      	ldr	r0, [pc, #428]	; (801843c <_ZL12MX_GPIO_Initv+0x2dc>)
 801828e:	f7ea fd2d 	bl	8002cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8018292:	2201      	movs	r2, #1
 8018294:	2108      	movs	r1, #8
 8018296:	486a      	ldr	r0, [pc, #424]	; (8018440 <_ZL12MX_GPIO_Initv+0x2e0>)
 8018298:	f7ea fd28 	bl	8002cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 801829c:	2201      	movs	r2, #1
 801829e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80182a2:	4866      	ldr	r0, [pc, #408]	; (801843c <_ZL12MX_GPIO_Initv+0x2dc>)
 80182a4:	f7ea fd22 	bl	8002cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80182a8:	2200      	movs	r2, #0
 80182aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80182ae:	4865      	ldr	r0, [pc, #404]	; (8018444 <_ZL12MX_GPIO_Initv+0x2e4>)
 80182b0:	f7ea fd1c 	bl	8002cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 80182b4:	2200      	movs	r2, #0
 80182b6:	21c8      	movs	r1, #200	; 0xc8
 80182b8:	4863      	ldr	r0, [pc, #396]	; (8018448 <_ZL12MX_GPIO_Initv+0x2e8>)
 80182ba:	f7ea fd17 	bl	8002cec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 80182be:	2308      	movs	r3, #8
 80182c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80182c2:	2300      	movs	r3, #0
 80182c4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80182c6:	2300      	movs	r3, #0
 80182c8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80182ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80182ce:	4619      	mov	r1, r3
 80182d0:	485e      	ldr	r0, [pc, #376]	; (801844c <_ZL12MX_GPIO_Initv+0x2ec>)
 80182d2:	f7ea fa3b 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 80182d6:	f643 4323 	movw	r3, #15395	; 0x3c23
 80182da:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80182dc:	2302      	movs	r3, #2
 80182de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80182e0:	2300      	movs	r3, #0
 80182e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80182e4:	2303      	movs	r3, #3
 80182e6:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80182e8:	230a      	movs	r3, #10
 80182ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80182ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80182f0:	4619      	mov	r1, r3
 80182f2:	4857      	ldr	r0, [pc, #348]	; (8018450 <_ZL12MX_GPIO_Initv+0x2f0>)
 80182f4:	f7ea fa2a 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80182f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80182fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80182fe:	2302      	movs	r3, #2
 8018300:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018302:	2300      	movs	r3, #0
 8018304:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018306:	2300      	movs	r3, #0
 8018308:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 801830a:	2301      	movs	r3, #1
 801830c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 801830e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018312:	4619      	mov	r1, r3
 8018314:	484f      	ldr	r0, [pc, #316]	; (8018454 <_ZL12MX_GPIO_Initv+0x2f4>)
 8018316:	f7ea fa19 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 801831a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801831e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018320:	2300      	movs	r3, #0
 8018322:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018324:	2300      	movs	r3, #0
 8018326:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8018328:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801832c:	4619      	mov	r1, r3
 801832e:	484a      	ldr	r0, [pc, #296]	; (8018458 <_ZL12MX_GPIO_Initv+0x2f8>)
 8018330:	f7ea fa0c 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8018334:	2340      	movs	r3, #64	; 0x40
 8018336:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8018338:	4b48      	ldr	r3, [pc, #288]	; (801845c <_ZL12MX_GPIO_Initv+0x2fc>)
 801833a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801833c:	2300      	movs	r3, #0
 801833e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8018340:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018344:	4619      	mov	r1, r3
 8018346:	483c      	ldr	r0, [pc, #240]	; (8018438 <_ZL12MX_GPIO_Initv+0x2d8>)
 8018348:	f7ea fa00 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 801834c:	2320      	movs	r3, #32
 801834e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8018350:	2301      	movs	r3, #1
 8018352:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018354:	2300      	movs	r3, #0
 8018356:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018358:	2300      	movs	r3, #0
 801835a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 801835c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018360:	4619      	mov	r1, r3
 8018362:	4835      	ldr	r0, [pc, #212]	; (8018438 <_ZL12MX_GPIO_Initv+0x2d8>)
 8018364:	f7ea f9f2 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 8018368:	f241 030c 	movw	r3, #4108	; 0x100c
 801836c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801836e:	2301      	movs	r3, #1
 8018370:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018372:	2300      	movs	r3, #0
 8018374:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018376:	2300      	movs	r3, #0
 8018378:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801837a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801837e:	4619      	mov	r1, r3
 8018380:	482e      	ldr	r0, [pc, #184]	; (801843c <_ZL12MX_GPIO_Initv+0x2dc>)
 8018382:	f7ea f9e3 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8018386:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801838a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801838c:	2300      	movs	r3, #0
 801838e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018390:	2300      	movs	r3, #0
 8018392:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8018394:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018398:	4619      	mov	r1, r3
 801839a:	4831      	ldr	r0, [pc, #196]	; (8018460 <_ZL12MX_GPIO_Initv+0x300>)
 801839c:	f7ea f9d6 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80183a0:	2308      	movs	r3, #8
 80183a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80183a4:	2301      	movs	r3, #1
 80183a6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80183a8:	2300      	movs	r3, #0
 80183aa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80183ac:	2300      	movs	r3, #0
 80183ae:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80183b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80183b4:	4619      	mov	r1, r3
 80183b6:	4822      	ldr	r0, [pc, #136]	; (8018440 <_ZL12MX_GPIO_Initv+0x2e0>)
 80183b8:	f7ea f9c8 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80183bc:	2310      	movs	r3, #16
 80183be:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80183c0:	2300      	movs	r3, #0
 80183c2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80183c4:	2300      	movs	r3, #0
 80183c6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80183c8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80183cc:	4619      	mov	r1, r3
 80183ce:	481a      	ldr	r0, [pc, #104]	; (8018438 <_ZL12MX_GPIO_Initv+0x2d8>)
 80183d0:	f7ea f9bc 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80183d4:	f248 0304 	movw	r3, #32772	; 0x8004
 80183d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80183da:	2300      	movs	r3, #0
 80183dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80183de:	2300      	movs	r3, #0
 80183e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80183e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80183e6:	4619      	mov	r1, r3
 80183e8:	4816      	ldr	r0, [pc, #88]	; (8018444 <_ZL12MX_GPIO_Initv+0x2e4>)
 80183ea:	f7ea f9af 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 80183ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80183f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80183f4:	2301      	movs	r3, #1
 80183f6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80183f8:	2300      	movs	r3, #0
 80183fa:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80183fc:	2300      	movs	r3, #0
 80183fe:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8018400:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018404:	4619      	mov	r1, r3
 8018406:	480f      	ldr	r0, [pc, #60]	; (8018444 <_ZL12MX_GPIO_Initv+0x2e4>)
 8018408:	f7ea f9a0 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 801840c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018410:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8018412:	4b12      	ldr	r3, [pc, #72]	; (801845c <_ZL12MX_GPIO_Initv+0x2fc>)
 8018414:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018416:	2300      	movs	r3, #0
 8018418:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 801841a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801841e:	4619      	mov	r1, r3
 8018420:	4806      	ldr	r0, [pc, #24]	; (801843c <_ZL12MX_GPIO_Initv+0x2dc>)
 8018422:	f7ea f993 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8018426:	2310      	movs	r3, #16
 8018428:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801842a:	2302      	movs	r3, #2
 801842c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801842e:	2300      	movs	r3, #0
 8018430:	e018      	b.n	8018464 <_ZL12MX_GPIO_Initv+0x304>
 8018432:	bf00      	nop
 8018434:	40023800 	.word	0x40023800
 8018438:	40020c00 	.word	0x40020c00
 801843c:	40022000 	.word	0x40022000
 8018440:	40022800 	.word	0x40022800
 8018444:	40021c00 	.word	0x40021c00
 8018448:	40021800 	.word	0x40021800
 801844c:	40021000 	.word	0x40021000
 8018450:	40020400 	.word	0x40020400
 8018454:	40020000 	.word	0x40020000
 8018458:	40022400 	.word	0x40022400
 801845c:	10120000 	.word	0x10120000
 8018460:	40020800 	.word	0x40020800
 8018464:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018466:	2303      	movs	r3, #3
 8018468:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 801846a:	230a      	movs	r3, #10
 801846c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 801846e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018472:	4619      	mov	r1, r3
 8018474:	4820      	ldr	r0, [pc, #128]	; (80184f8 <_ZL12MX_GPIO_Initv+0x398>)
 8018476:	f7ea f969 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 801847a:	23c8      	movs	r3, #200	; 0xc8
 801847c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801847e:	2301      	movs	r3, #1
 8018480:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018482:	2300      	movs	r3, #0
 8018484:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018486:	2300      	movs	r3, #0
 8018488:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801848a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801848e:	4619      	mov	r1, r3
 8018490:	481a      	ldr	r0, [pc, #104]	; (80184fc <_ZL12MX_GPIO_Initv+0x39c>)
 8018492:	f7ea f95b 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8018496:	2305      	movs	r3, #5
 8018498:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801849a:	2302      	movs	r3, #2
 801849c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801849e:	2300      	movs	r3, #0
 80184a0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80184a2:	2303      	movs	r3, #3
 80184a4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80184a6:	230a      	movs	r3, #10
 80184a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80184aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80184ae:	4619      	mov	r1, r3
 80184b0:	4813      	ldr	r0, [pc, #76]	; (8018500 <_ZL12MX_GPIO_Initv+0x3a0>)
 80184b2:	f7ea f94b 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 80184b6:	2304      	movs	r3, #4
 80184b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80184ba:	2300      	movs	r3, #0
 80184bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80184be:	2300      	movs	r3, #0
 80184c0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 80184c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80184c6:	4619      	mov	r1, r3
 80184c8:	480c      	ldr	r0, [pc, #48]	; (80184fc <_ZL12MX_GPIO_Initv+0x39c>)
 80184ca:	f7ea f93f 	bl	800274c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80184ce:	2328      	movs	r3, #40	; 0x28
 80184d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80184d2:	2302      	movs	r3, #2
 80184d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80184d6:	2300      	movs	r3, #0
 80184d8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80184da:	2303      	movs	r3, #3
 80184dc:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80184de:	230a      	movs	r3, #10
 80184e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80184e2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80184e6:	4619      	mov	r1, r3
 80184e8:	4806      	ldr	r0, [pc, #24]	; (8018504 <_ZL12MX_GPIO_Initv+0x3a4>)
 80184ea:	f7ea f92f 	bl	800274c <HAL_GPIO_Init>

}
 80184ee:	bf00      	nop
 80184f0:	3740      	adds	r7, #64	; 0x40
 80184f2:	46bd      	mov	sp, r7
 80184f4:	bd80      	pop	{r7, pc}
 80184f6:	bf00      	nop
 80184f8:	40021c00 	.word	0x40021c00
 80184fc:	40021800 	.word	0x40021800
 8018500:	40020800 	.word	0x40020800
 8018504:	40020000 	.word	0x40020000

08018508 <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8018508:	b580      	push	{r7, lr}
 801850a:	b082      	sub	sp, #8
 801850c:	af00      	add	r7, sp, #0
 801850e:	6078      	str	r0, [r7, #4]
  /* init code for FATFS */
  MX_FATFS_Init();
 8018510:	f7fe fed6 	bl	80172c0 <MX_FATFS_Init>

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 8018514:	f001 fa36 	bl	8019984 <MX_USB_HOST_Init>

/* Graphic application */  
  GRAPHICS_MainTask();
 8018518:	f7fc fea4 	bl	8015264 <_Z17GRAPHICS_MainTaskv>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 801851c:	2001      	movs	r0, #1
 801851e:	f7f8 fef4 	bl	801130a <osDelay>
 8018522:	e7fb      	b.n	801851c <_Z16StartDefaultTaskPKv+0x14>

08018524 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8018524:	b580      	push	{r7, lr}
 8018526:	b082      	sub	sp, #8
 8018528:	af00      	add	r7, sp, #0
 801852a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	681b      	ldr	r3, [r3, #0]
 8018530:	4a04      	ldr	r2, [pc, #16]	; (8018544 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8018532:	4293      	cmp	r3, r2
 8018534:	d101      	bne.n	801853a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8018536:	f7e8 fae7 	bl	8000b08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 801853a:	bf00      	nop
 801853c:	3708      	adds	r7, #8
 801853e:	46bd      	mov	sp, r7
 8018540:	bd80      	pop	{r7, pc}
 8018542:	bf00      	nop
 8018544:	40001000 	.word	0x40001000

08018548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8018548:	b480      	push	{r7}
 801854a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 801854c:	bf00      	nop
 801854e:	46bd      	mov	sp, r7
 8018550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018554:	4770      	bx	lr

08018556 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8018556:	b580      	push	{r7, lr}
 8018558:	b084      	sub	sp, #16
 801855a:	af00      	add	r7, sp, #0
 801855c:	6078      	str	r0, [r7, #4]
  uint32_t timer = osKernelSysTick();
 801855e:	f7f8 fe9d 	bl	801129c <osKernelSysTick>
 8018562:	60f8      	str	r0, [r7, #12]
  /* block until SDIO peripherial is ready again or a timeout occur */
  while( osKernelSysTick() - timer < timeout)
 8018564:	e006      	b.n	8018574 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8018566:	f7fe fe71 	bl	801724c <BSP_SD_GetCardState>
 801856a:	4603      	mov	r3, r0
 801856c:	2b00      	cmp	r3, #0
 801856e:	d101      	bne.n	8018574 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8018570:	2300      	movs	r3, #0
 8018572:	e009      	b.n	8018588 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8018574:	f7f8 fe92 	bl	801129c <osKernelSysTick>
 8018578:	4602      	mov	r2, r0
 801857a:	68fb      	ldr	r3, [r7, #12]
 801857c:	1ad3      	subs	r3, r2, r3
 801857e:	687a      	ldr	r2, [r7, #4]
 8018580:	429a      	cmp	r2, r3
 8018582:	d8f0      	bhi.n	8018566 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8018584:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018588:	4618      	mov	r0, r3
 801858a:	3710      	adds	r7, #16
 801858c:	46bd      	mov	sp, r7
 801858e:	bd80      	pop	{r7, pc}

08018590 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8018590:	b580      	push	{r7, lr}
 8018592:	b082      	sub	sp, #8
 8018594:	af00      	add	r7, sp, #0
 8018596:	4603      	mov	r3, r0
 8018598:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801859a:	4b0b      	ldr	r3, [pc, #44]	; (80185c8 <SD_CheckStatus+0x38>)
 801859c:	2201      	movs	r2, #1
 801859e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80185a0:	f7fe fe54 	bl	801724c <BSP_SD_GetCardState>
 80185a4:	4603      	mov	r3, r0
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d107      	bne.n	80185ba <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80185aa:	4b07      	ldr	r3, [pc, #28]	; (80185c8 <SD_CheckStatus+0x38>)
 80185ac:	781b      	ldrb	r3, [r3, #0]
 80185ae:	b2db      	uxtb	r3, r3
 80185b0:	f023 0301 	bic.w	r3, r3, #1
 80185b4:	b2da      	uxtb	r2, r3
 80185b6:	4b04      	ldr	r3, [pc, #16]	; (80185c8 <SD_CheckStatus+0x38>)
 80185b8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80185ba:	4b03      	ldr	r3, [pc, #12]	; (80185c8 <SD_CheckStatus+0x38>)
 80185bc:	781b      	ldrb	r3, [r3, #0]
 80185be:	b2db      	uxtb	r3, r3
}
 80185c0:	4618      	mov	r0, r3
 80185c2:	3708      	adds	r7, #8
 80185c4:	46bd      	mov	sp, r7
 80185c6:	bd80      	pop	{r7, pc}
 80185c8:	2000006e 	.word	0x2000006e

080185cc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80185cc:	b580      	push	{r7, lr}
 80185ce:	b084      	sub	sp, #16
 80185d0:	af00      	add	r7, sp, #0
 80185d2:	4603      	mov	r3, r0
 80185d4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 80185d6:	4b1a      	ldr	r3, [pc, #104]	; (8018640 <SD_initialize+0x74>)
 80185d8:	2201      	movs	r2, #1
 80185da:	701a      	strb	r2, [r3, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 80185dc:	f7f8 fe52 	bl	8011284 <osKernelRunning>
 80185e0:	4603      	mov	r3, r0
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	d025      	beq.n	8018632 <SD_initialize+0x66>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 80185e6:	f7fe fdd7 	bl	8017198 <BSP_SD_Init>
 80185ea:	4603      	mov	r3, r0
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d107      	bne.n	8018600 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 80185f0:	79fb      	ldrb	r3, [r7, #7]
 80185f2:	4618      	mov	r0, r3
 80185f4:	f7ff ffcc 	bl	8018590 <SD_CheckStatus>
 80185f8:	4603      	mov	r3, r0
 80185fa:	461a      	mov	r2, r3
 80185fc:	4b10      	ldr	r3, [pc, #64]	; (8018640 <SD_initialize+0x74>)
 80185fe:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 8018600:	4b0f      	ldr	r3, [pc, #60]	; (8018640 <SD_initialize+0x74>)
 8018602:	781b      	ldrb	r3, [r3, #0]
 8018604:	b2db      	uxtb	r3, r3
 8018606:	2b01      	cmp	r3, #1
 8018608:	d013      	beq.n	8018632 <SD_initialize+0x66>
 801860a:	4b0e      	ldr	r3, [pc, #56]	; (8018644 <SD_initialize+0x78>)
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	2b00      	cmp	r3, #0
 8018610:	d10f      	bne.n	8018632 <SD_initialize+0x66>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 8018612:	4a0d      	ldr	r2, [pc, #52]	; (8018648 <SD_initialize+0x7c>)
 8018614:	f107 0308 	add.w	r3, r7, #8
 8018618:	e892 0003 	ldmia.w	r2, {r0, r1}
 801861c:	e883 0003 	stmia.w	r3, {r0, r1}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 8018620:	f107 0308 	add.w	r3, r7, #8
 8018624:	2100      	movs	r1, #0
 8018626:	4618      	mov	r0, r3
 8018628:	f7f8 ff2c 	bl	8011484 <osMessageCreate>
 801862c:	4603      	mov	r3, r0
 801862e:	4a05      	ldr	r2, [pc, #20]	; (8018644 <SD_initialize+0x78>)
 8018630:	6013      	str	r3, [r2, #0]
    }
  }
  return Stat;
 8018632:	4b03      	ldr	r3, [pc, #12]	; (8018640 <SD_initialize+0x74>)
 8018634:	781b      	ldrb	r3, [r3, #0]
 8018636:	b2db      	uxtb	r3, r3
}
 8018638:	4618      	mov	r0, r3
 801863a:	3710      	adds	r7, #16
 801863c:	46bd      	mov	sp, r7
 801863e:	bd80      	pop	{r7, pc}
 8018640:	2000006e 	.word	0x2000006e
 8018644:	20009c0c 	.word	0x20009c0c
 8018648:	08023f84 	.word	0x08023f84

0801864c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 801864c:	b580      	push	{r7, lr}
 801864e:	b082      	sub	sp, #8
 8018650:	af00      	add	r7, sp, #0
 8018652:	4603      	mov	r3, r0
 8018654:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8018656:	79fb      	ldrb	r3, [r7, #7]
 8018658:	4618      	mov	r0, r3
 801865a:	f7ff ff99 	bl	8018590 <SD_CheckStatus>
 801865e:	4603      	mov	r3, r0
}
 8018660:	4618      	mov	r0, r3
 8018662:	3708      	adds	r7, #8
 8018664:	46bd      	mov	sp, r7
 8018666:	bd80      	pop	{r7, pc}

08018668 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8018668:	b580      	push	{r7, lr}
 801866a:	b08e      	sub	sp, #56	; 0x38
 801866c:	af00      	add	r7, sp, #0
 801866e:	61b9      	str	r1, [r7, #24]
 8018670:	617a      	str	r2, [r7, #20]
 8018672:	613b      	str	r3, [r7, #16]
 8018674:	4603      	mov	r3, r0
 8018676:	77fb      	strb	r3, [r7, #31]
  DRESULT res = RES_ERROR;
 8018678:	2301      	movs	r3, #1
 801867a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801867e:	f247 5030 	movw	r0, #30000	; 0x7530
 8018682:	f7ff ff68 	bl	8018556 <SD_CheckStatusWithTimeout>
 8018686:	4603      	mov	r3, r0
 8018688:	2b00      	cmp	r3, #0
 801868a:	da02      	bge.n	8018692 <SD_read+0x2a>
  {
    return res;
 801868c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018690:	e06c      	b.n	801876c <SD_read+0x104>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8018692:	69bb      	ldr	r3, [r7, #24]
 8018694:	f003 0303 	and.w	r3, r3, #3
 8018698:	2b00      	cmp	r3, #0
 801869a:	d11e      	bne.n	80186da <SD_read+0x72>
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 801869c:	693a      	ldr	r2, [r7, #16]
 801869e:	6979      	ldr	r1, [r7, #20]
 80186a0:	69b8      	ldr	r0, [r7, #24]
 80186a2:	f7fe fd9f 	bl	80171e4 <BSP_SD_ReadBlocks_DMA>
 80186a6:	4603      	mov	r3, r0
 80186a8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    if (ret == MSD_OK) {
 80186ac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80186b0:	2b00      	cmp	r3, #0
 80186b2:	d159      	bne.n	8018768 <SD_read+0x100>
      /* wait for a message from the queue or a timeout */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80186b4:	4b2f      	ldr	r3, [pc, #188]	; (8018774 <SD_read+0x10c>)
 80186b6:	6819      	ldr	r1, [r3, #0]
 80186b8:	f107 0320 	add.w	r3, r7, #32
 80186bc:	f247 5230 	movw	r2, #30000	; 0x7530
 80186c0:	4618      	mov	r0, r3
 80186c2:	f7f8 ff31 	bl	8011528 <osMessageGet>
      if (event.status == osEventMessage) {
 80186c6:	6a3b      	ldr	r3, [r7, #32]
 80186c8:	2b10      	cmp	r3, #16
 80186ca:	d14d      	bne.n	8018768 <SD_read+0x100>
        if (event.value.v == READ_CPLT_MSG) {
 80186cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186ce:	2b01      	cmp	r3, #1
 80186d0:	d14a      	bne.n	8018768 <SD_read+0x100>
          res = RES_OK;
 80186d2:	2300      	movs	r3, #0
 80186d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80186d8:	e046      	b.n	8018768 <SD_read+0x100>
#if defined(ENABLE_SCRATCH_BUFFER)
  } else {
    /* Slow path, fetch each sector a part and memcpy to destination buffer */
    int i;
    uint8_t ret;
    for (i = 0; i < count; i++) {
 80186da:	2300      	movs	r3, #0
 80186dc:	633b      	str	r3, [r7, #48]	; 0x30
 80186de:	e032      	b.n	8018746 <SD_read+0xde>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80186e0:	697b      	ldr	r3, [r7, #20]
 80186e2:	1c5a      	adds	r2, r3, #1
 80186e4:	617a      	str	r2, [r7, #20]
 80186e6:	2201      	movs	r2, #1
 80186e8:	4619      	mov	r1, r3
 80186ea:	4823      	ldr	r0, [pc, #140]	; (8018778 <SD_read+0x110>)
 80186ec:	f7fe fd7a 	bl	80171e4 <BSP_SD_ReadBlocks_DMA>
 80186f0:	4603      	mov	r3, r0
 80186f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (ret == MSD_OK) {
 80186f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d128      	bne.n	8018750 <SD_read+0xe8>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80186fe:	4b1d      	ldr	r3, [pc, #116]	; (8018774 <SD_read+0x10c>)
 8018700:	6819      	ldr	r1, [r3, #0]
 8018702:	463b      	mov	r3, r7
 8018704:	f247 5230 	movw	r2, #30000	; 0x7530
 8018708:	4618      	mov	r0, r3
 801870a:	f7f8 ff0d 	bl	8011528 <osMessageGet>
 801870e:	f107 0320 	add.w	r3, r7, #32
 8018712:	463a      	mov	r2, r7
 8018714:	ca07      	ldmia	r2, {r0, r1, r2}
 8018716:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 801871a:	6a3b      	ldr	r3, [r7, #32]
 801871c:	2b10      	cmp	r3, #16
 801871e:	d10f      	bne.n	8018740 <SD_read+0xd8>
          if (event.value.v == READ_CPLT_MSG) {
 8018720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018722:	2b01      	cmp	r3, #1
 8018724:	d10c      	bne.n	8018740 <SD_read+0xd8>
            *
            * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
            */
            SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
            memcpy(buff, scratch, BLOCKSIZE);
 8018726:	69bb      	ldr	r3, [r7, #24]
 8018728:	4a13      	ldr	r2, [pc, #76]	; (8018778 <SD_read+0x110>)
 801872a:	4618      	mov	r0, r3
 801872c:	4611      	mov	r1, r2
 801872e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018732:	461a      	mov	r2, r3
 8018734:	f009 ffc8 	bl	80226c8 <memcpy>
            buff += BLOCKSIZE;
 8018738:	69bb      	ldr	r3, [r7, #24]
 801873a:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801873e:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 8018740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018742:	3301      	adds	r3, #1
 8018744:	633b      	str	r3, [r7, #48]	; 0x30
 8018746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018748:	693a      	ldr	r2, [r7, #16]
 801874a:	429a      	cmp	r2, r3
 801874c:	d8c8      	bhi.n	80186e0 <SD_read+0x78>
 801874e:	e000      	b.n	8018752 <SD_read+0xea>
          }
        }
      }
      else
      {
        break;
 8018750:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 8018752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018754:	693a      	ldr	r2, [r7, #16]
 8018756:	429a      	cmp	r2, r3
 8018758:	d106      	bne.n	8018768 <SD_read+0x100>
 801875a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801875e:	2b00      	cmp	r3, #0
 8018760:	d102      	bne.n	8018768 <SD_read+0x100>
      res = RES_OK;
 8018762:	2300      	movs	r3, #0
 8018764:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

#endif

  return res;
 8018768:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
} 
 801876c:	4618      	mov	r0, r3
 801876e:	3738      	adds	r7, #56	; 0x38
 8018770:	46bd      	mov	sp, r7
 8018772:	bd80      	pop	{r7, pc}
 8018774:	20009c0c 	.word	0x20009c0c
 8018778:	20009a0c 	.word	0x20009a0c

0801877c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801877c:	b580      	push	{r7, lr}
 801877e:	b090      	sub	sp, #64	; 0x40
 8018780:	af00      	add	r7, sp, #0
 8018782:	61b9      	str	r1, [r7, #24]
 8018784:	617a      	str	r2, [r7, #20]
 8018786:	613b      	str	r3, [r7, #16]
 8018788:	4603      	mov	r3, r0
 801878a:	77fb      	strb	r3, [r7, #31]
  osEvent event;
  DRESULT res = RES_ERROR;
 801878c:	2301      	movs	r3, #1
 801878e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8018792:	f247 5030 	movw	r0, #30000	; 0x7530
 8018796:	f7ff fede 	bl	8018556 <SD_CheckStatusWithTimeout>
 801879a:	4603      	mov	r3, r0
 801879c:	2b00      	cmp	r3, #0
 801879e:	da02      	bge.n	80187a6 <SD_write+0x2a>
  {
    return res;
 80187a0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80187a4:	e07c      	b.n	80188a0 <SD_write+0x124>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 80187a6:	69bb      	ldr	r3, [r7, #24]
 80187a8:	f003 0303 	and.w	r3, r3, #3
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	d12e      	bne.n	801880e <SD_write+0x92>
    * This is not needed if the memory region is configured as W/T.
    */
    alignedAddr = (uint32_t)buff & ~0x1F;
    SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80187b0:	693a      	ldr	r2, [r7, #16]
 80187b2:	6979      	ldr	r1, [r7, #20]
 80187b4:	69b8      	ldr	r0, [r7, #24]
 80187b6:	f7fe fd2f 	bl	8017218 <BSP_SD_WriteBlocks_DMA>
 80187ba:	4603      	mov	r3, r0
 80187bc:	2b00      	cmp	r3, #0
 80187be:	d16d      	bne.n	801889c <SD_write+0x120>
                              (uint32_t) (sector),
                              count) == MSD_OK)
    {
      /* Get the message from the queue */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80187c0:	4b39      	ldr	r3, [pc, #228]	; (80188a8 <SD_write+0x12c>)
 80187c2:	6819      	ldr	r1, [r3, #0]
 80187c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80187c8:	f247 5230 	movw	r2, #30000	; 0x7530
 80187cc:	4618      	mov	r0, r3
 80187ce:	f7f8 feab 	bl	8011528 <osMessageGet>

      if (event.status == osEventMessage)
 80187d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187d4:	2b10      	cmp	r3, #16
 80187d6:	d161      	bne.n	801889c <SD_write+0x120>
      {
        if (event.value.v == WRITE_CPLT_MSG)
 80187d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187da:	2b02      	cmp	r3, #2
 80187dc:	d15e      	bne.n	801889c <SD_write+0x120>
        {
          timer = osKernelSysTick() + SD_TIMEOUT;
 80187de:	f7f8 fd5d 	bl	801129c <osKernelSysTick>
 80187e2:	4602      	mov	r2, r0
 80187e4:	f247 5330 	movw	r3, #30000	; 0x7530
 80187e8:	4413      	add	r3, r2
 80187ea:	633b      	str	r3, [r7, #48]	; 0x30
          /* block until SDIO IP is ready or a timeout occur */
          while(timer > osKernelSysTick())
 80187ec:	e008      	b.n	8018800 <SD_write+0x84>
          {
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80187ee:	f7fe fd2d 	bl	801724c <BSP_SD_GetCardState>
 80187f2:	4603      	mov	r3, r0
 80187f4:	2b00      	cmp	r3, #0
 80187f6:	d103      	bne.n	8018800 <SD_write+0x84>
            {
              res = RES_OK;
 80187f8:	2300      	movs	r3, #0
 80187fa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 80187fe:	e04d      	b.n	801889c <SD_write+0x120>
          while(timer > osKernelSysTick())
 8018800:	f7f8 fd4c 	bl	801129c <osKernelSysTick>
 8018804:	4602      	mov	r2, r0
 8018806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018808:	4293      	cmp	r3, r2
 801880a:	d8f0      	bhi.n	80187ee <SD_write+0x72>
 801880c:	e046      	b.n	801889c <SD_write+0x120>
    * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
    */
    SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

    for (i = 0; i < count; i++) {
 801880e:	2300      	movs	r3, #0
 8018810:	63bb      	str	r3, [r7, #56]	; 0x38
 8018812:	e032      	b.n	801887a <SD_write+0xfe>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8018814:	697b      	ldr	r3, [r7, #20]
 8018816:	1c5a      	adds	r2, r3, #1
 8018818:	617a      	str	r2, [r7, #20]
 801881a:	2201      	movs	r2, #1
 801881c:	4619      	mov	r1, r3
 801881e:	4823      	ldr	r0, [pc, #140]	; (80188ac <SD_write+0x130>)
 8018820:	f7fe fcfa 	bl	8017218 <BSP_SD_WriteBlocks_DMA>
 8018824:	4603      	mov	r3, r0
 8018826:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (ret == MSD_OK) {
 801882a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801882e:	2b00      	cmp	r3, #0
 8018830:	d128      	bne.n	8018884 <SD_write+0x108>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8018832:	4b1d      	ldr	r3, [pc, #116]	; (80188a8 <SD_write+0x12c>)
 8018834:	6819      	ldr	r1, [r3, #0]
 8018836:	463b      	mov	r3, r7
 8018838:	f247 5230 	movw	r2, #30000	; 0x7530
 801883c:	4618      	mov	r0, r3
 801883e:	f7f8 fe73 	bl	8011528 <osMessageGet>
 8018842:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018846:	463a      	mov	r2, r7
 8018848:	ca07      	ldmia	r2, {r0, r1, r2}
 801884a:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 801884e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018850:	2b10      	cmp	r3, #16
 8018852:	d10f      	bne.n	8018874 <SD_write+0xf8>
          if (event.value.v == WRITE_CPLT_MSG) {
 8018854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018856:	2b02      	cmp	r3, #2
 8018858:	d10c      	bne.n	8018874 <SD_write+0xf8>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 801885a:	69bb      	ldr	r3, [r7, #24]
 801885c:	4a13      	ldr	r2, [pc, #76]	; (80188ac <SD_write+0x130>)
 801885e:	4618      	mov	r0, r3
 8018860:	4611      	mov	r1, r2
 8018862:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018866:	461a      	mov	r2, r3
 8018868:	f009 ff2e 	bl	80226c8 <memcpy>
            buff += BLOCKSIZE;
 801886c:	69bb      	ldr	r3, [r7, #24]
 801886e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8018872:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 8018874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018876:	3301      	adds	r3, #1
 8018878:	63bb      	str	r3, [r7, #56]	; 0x38
 801887a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801887c:	693a      	ldr	r2, [r7, #16]
 801887e:	429a      	cmp	r2, r3
 8018880:	d8c8      	bhi.n	8018814 <SD_write+0x98>
 8018882:	e000      	b.n	8018886 <SD_write+0x10a>
          }
        }
      }
      else
      {
        break;
 8018884:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 8018886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018888:	693a      	ldr	r2, [r7, #16]
 801888a:	429a      	cmp	r2, r3
 801888c:	d106      	bne.n	801889c <SD_write+0x120>
 801888e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018892:	2b00      	cmp	r3, #0
 8018894:	d102      	bne.n	801889c <SD_write+0x120>
      res = RES_OK;
 8018896:	2300      	movs	r3, #0
 8018898:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
#endif
  return res;
 801889c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 80188a0:	4618      	mov	r0, r3
 80188a2:	3740      	adds	r7, #64	; 0x40
 80188a4:	46bd      	mov	sp, r7
 80188a6:	bd80      	pop	{r7, pc}
 80188a8:	20009c0c 	.word	0x20009c0c
 80188ac:	20009a0c 	.word	0x20009a0c

080188b0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80188b0:	b580      	push	{r7, lr}
 80188b2:	b08c      	sub	sp, #48	; 0x30
 80188b4:	af00      	add	r7, sp, #0
 80188b6:	4603      	mov	r3, r0
 80188b8:	603a      	str	r2, [r7, #0]
 80188ba:	71fb      	strb	r3, [r7, #7]
 80188bc:	460b      	mov	r3, r1
 80188be:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80188c0:	2301      	movs	r3, #1
 80188c2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80188c6:	4b25      	ldr	r3, [pc, #148]	; (801895c <SD_ioctl+0xac>)
 80188c8:	781b      	ldrb	r3, [r3, #0]
 80188ca:	b2db      	uxtb	r3, r3
 80188cc:	f003 0301 	and.w	r3, r3, #1
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	d001      	beq.n	80188d8 <SD_ioctl+0x28>
 80188d4:	2303      	movs	r3, #3
 80188d6:	e03c      	b.n	8018952 <SD_ioctl+0xa2>

  switch (cmd)
 80188d8:	79bb      	ldrb	r3, [r7, #6]
 80188da:	2b03      	cmp	r3, #3
 80188dc:	d834      	bhi.n	8018948 <SD_ioctl+0x98>
 80188de:	a201      	add	r2, pc, #4	; (adr r2, 80188e4 <SD_ioctl+0x34>)
 80188e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80188e4:	080188f5 	.word	0x080188f5
 80188e8:	080188fd 	.word	0x080188fd
 80188ec:	08018915 	.word	0x08018915
 80188f0:	0801892f 	.word	0x0801892f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80188f4:	2300      	movs	r3, #0
 80188f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80188fa:	e028      	b.n	801894e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80188fc:	f107 030c 	add.w	r3, r7, #12
 8018900:	4618      	mov	r0, r3
 8018902:	f7fe fcb3 	bl	801726c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8018906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018908:	683b      	ldr	r3, [r7, #0]
 801890a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801890c:	2300      	movs	r3, #0
 801890e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8018912:	e01c      	b.n	801894e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8018914:	f107 030c 	add.w	r3, r7, #12
 8018918:	4618      	mov	r0, r3
 801891a:	f7fe fca7 	bl	801726c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 801891e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018920:	b29a      	uxth	r2, r3
 8018922:	683b      	ldr	r3, [r7, #0]
 8018924:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8018926:	2300      	movs	r3, #0
 8018928:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801892c:	e00f      	b.n	801894e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 801892e:	f107 030c 	add.w	r3, r7, #12
 8018932:	4618      	mov	r0, r3
 8018934:	f7fe fc9a 	bl	801726c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8018938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801893a:	0a5a      	lsrs	r2, r3, #9
 801893c:	683b      	ldr	r3, [r7, #0]
 801893e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8018940:	2300      	movs	r3, #0
 8018942:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8018946:	e002      	b.n	801894e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8018948:	2304      	movs	r3, #4
 801894a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 801894e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8018952:	4618      	mov	r0, r3
 8018954:	3730      	adds	r7, #48	; 0x30
 8018956:	46bd      	mov	sp, r7
 8018958:	bd80      	pop	{r7, pc}
 801895a:	bf00      	nop
 801895c:	2000006e 	.word	0x2000006e

08018960 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8018960:	b580      	push	{r7, lr}
 8018962:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 8018964:	4b04      	ldr	r3, [pc, #16]	; (8018978 <BSP_SD_ReadCpltCallback+0x18>)
 8018966:	681b      	ldr	r3, [r3, #0]
 8018968:	f04f 32ff 	mov.w	r2, #4294967295
 801896c:	2101      	movs	r1, #1
 801896e:	4618      	mov	r0, r3
 8018970:	f7f8 fd9a 	bl	80114a8 <osMessagePut>
}
 8018974:	bf00      	nop
 8018976:	bd80      	pop	{r7, pc}
 8018978:	20009c0c 	.word	0x20009c0c

0801897c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801897c:	b580      	push	{r7, lr}
 801897e:	b082      	sub	sp, #8
 8018980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8018982:	4b11      	ldr	r3, [pc, #68]	; (80189c8 <HAL_MspInit+0x4c>)
 8018984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018986:	4a10      	ldr	r2, [pc, #64]	; (80189c8 <HAL_MspInit+0x4c>)
 8018988:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801898c:	6413      	str	r3, [r2, #64]	; 0x40
 801898e:	4b0e      	ldr	r3, [pc, #56]	; (80189c8 <HAL_MspInit+0x4c>)
 8018990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018996:	607b      	str	r3, [r7, #4]
 8018998:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801899a:	4b0b      	ldr	r3, [pc, #44]	; (80189c8 <HAL_MspInit+0x4c>)
 801899c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801899e:	4a0a      	ldr	r2, [pc, #40]	; (80189c8 <HAL_MspInit+0x4c>)
 80189a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80189a4:	6453      	str	r3, [r2, #68]	; 0x44
 80189a6:	4b08      	ldr	r3, [pc, #32]	; (80189c8 <HAL_MspInit+0x4c>)
 80189a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80189aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80189ae:	603b      	str	r3, [r7, #0]
 80189b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80189b2:	2200      	movs	r2, #0
 80189b4:	210f      	movs	r1, #15
 80189b6:	f06f 0001 	mvn.w	r0, #1
 80189ba:	f7e8 fc37 	bl	800122c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80189be:	bf00      	nop
 80189c0:	3708      	adds	r7, #8
 80189c2:	46bd      	mov	sp, r7
 80189c4:	bd80      	pop	{r7, pc}
 80189c6:	bf00      	nop
 80189c8:	40023800 	.word	0x40023800

080189cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80189cc:	b580      	push	{r7, lr}
 80189ce:	b08a      	sub	sp, #40	; 0x28
 80189d0:	af00      	add	r7, sp, #0
 80189d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80189d4:	f107 0314 	add.w	r3, r7, #20
 80189d8:	2200      	movs	r2, #0
 80189da:	601a      	str	r2, [r3, #0]
 80189dc:	605a      	str	r2, [r3, #4]
 80189de:	609a      	str	r2, [r3, #8]
 80189e0:	60da      	str	r2, [r3, #12]
 80189e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	681b      	ldr	r3, [r3, #0]
 80189e8:	4a21      	ldr	r2, [pc, #132]	; (8018a70 <HAL_ADC_MspInit+0xa4>)
 80189ea:	4293      	cmp	r3, r2
 80189ec:	d13c      	bne.n	8018a68 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80189ee:	4b21      	ldr	r3, [pc, #132]	; (8018a74 <HAL_ADC_MspInit+0xa8>)
 80189f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80189f2:	4a20      	ldr	r2, [pc, #128]	; (8018a74 <HAL_ADC_MspInit+0xa8>)
 80189f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80189f8:	6453      	str	r3, [r2, #68]	; 0x44
 80189fa:	4b1e      	ldr	r3, [pc, #120]	; (8018a74 <HAL_ADC_MspInit+0xa8>)
 80189fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80189fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018a02:	613b      	str	r3, [r7, #16]
 8018a04:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8018a06:	4b1b      	ldr	r3, [pc, #108]	; (8018a74 <HAL_ADC_MspInit+0xa8>)
 8018a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a0a:	4a1a      	ldr	r2, [pc, #104]	; (8018a74 <HAL_ADC_MspInit+0xa8>)
 8018a0c:	f043 0320 	orr.w	r3, r3, #32
 8018a10:	6313      	str	r3, [r2, #48]	; 0x30
 8018a12:	4b18      	ldr	r3, [pc, #96]	; (8018a74 <HAL_ADC_MspInit+0xa8>)
 8018a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a16:	f003 0320 	and.w	r3, r3, #32
 8018a1a:	60fb      	str	r3, [r7, #12]
 8018a1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018a1e:	4b15      	ldr	r3, [pc, #84]	; (8018a74 <HAL_ADC_MspInit+0xa8>)
 8018a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a22:	4a14      	ldr	r2, [pc, #80]	; (8018a74 <HAL_ADC_MspInit+0xa8>)
 8018a24:	f043 0301 	orr.w	r3, r3, #1
 8018a28:	6313      	str	r3, [r2, #48]	; 0x30
 8018a2a:	4b12      	ldr	r3, [pc, #72]	; (8018a74 <HAL_ADC_MspInit+0xa8>)
 8018a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a2e:	f003 0301 	and.w	r3, r3, #1
 8018a32:	60bb      	str	r3, [r7, #8]
 8018a34:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 8018a36:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8018a3a:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8018a3c:	2303      	movs	r3, #3
 8018a3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018a40:	2300      	movs	r3, #0
 8018a42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8018a44:	f107 0314 	add.w	r3, r7, #20
 8018a48:	4619      	mov	r1, r3
 8018a4a:	480b      	ldr	r0, [pc, #44]	; (8018a78 <HAL_ADC_MspInit+0xac>)
 8018a4c:	f7e9 fe7e 	bl	800274c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8018a50:	2301      	movs	r3, #1
 8018a52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8018a54:	2303      	movs	r3, #3
 8018a56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018a58:	2300      	movs	r3, #0
 8018a5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8018a5c:	f107 0314 	add.w	r3, r7, #20
 8018a60:	4619      	mov	r1, r3
 8018a62:	4806      	ldr	r0, [pc, #24]	; (8018a7c <HAL_ADC_MspInit+0xb0>)
 8018a64:	f7e9 fe72 	bl	800274c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8018a68:	bf00      	nop
 8018a6a:	3728      	adds	r7, #40	; 0x28
 8018a6c:	46bd      	mov	sp, r7
 8018a6e:	bd80      	pop	{r7, pc}
 8018a70:	40012200 	.word	0x40012200
 8018a74:	40023800 	.word	0x40023800
 8018a78:	40021400 	.word	0x40021400
 8018a7c:	40020000 	.word	0x40020000

08018a80 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8018a80:	b480      	push	{r7}
 8018a82:	b085      	sub	sp, #20
 8018a84:	af00      	add	r7, sp, #0
 8018a86:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	4a0a      	ldr	r2, [pc, #40]	; (8018ab8 <HAL_CRC_MspInit+0x38>)
 8018a8e:	4293      	cmp	r3, r2
 8018a90:	d10b      	bne.n	8018aaa <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8018a92:	4b0a      	ldr	r3, [pc, #40]	; (8018abc <HAL_CRC_MspInit+0x3c>)
 8018a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018a96:	4a09      	ldr	r2, [pc, #36]	; (8018abc <HAL_CRC_MspInit+0x3c>)
 8018a98:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8018a9c:	6313      	str	r3, [r2, #48]	; 0x30
 8018a9e:	4b07      	ldr	r3, [pc, #28]	; (8018abc <HAL_CRC_MspInit+0x3c>)
 8018aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018aa2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8018aa6:	60fb      	str	r3, [r7, #12]
 8018aa8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8018aaa:	bf00      	nop
 8018aac:	3714      	adds	r7, #20
 8018aae:	46bd      	mov	sp, r7
 8018ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ab4:	4770      	bx	lr
 8018ab6:	bf00      	nop
 8018ab8:	40023000 	.word	0x40023000
 8018abc:	40023800 	.word	0x40023800

08018ac0 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8018ac0:	b580      	push	{r7, lr}
 8018ac2:	b08e      	sub	sp, #56	; 0x38
 8018ac4:	af00      	add	r7, sp, #0
 8018ac6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018ac8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018acc:	2200      	movs	r2, #0
 8018ace:	601a      	str	r2, [r3, #0]
 8018ad0:	605a      	str	r2, [r3, #4]
 8018ad2:	609a      	str	r2, [r3, #8]
 8018ad4:	60da      	str	r2, [r3, #12]
 8018ad6:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8018ad8:	687b      	ldr	r3, [r7, #4]
 8018ada:	681b      	ldr	r3, [r3, #0]
 8018adc:	4a50      	ldr	r2, [pc, #320]	; (8018c20 <HAL_DCMI_MspInit+0x160>)
 8018ade:	4293      	cmp	r3, r2
 8018ae0:	f040 809a 	bne.w	8018c18 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8018ae4:	4b4f      	ldr	r3, [pc, #316]	; (8018c24 <HAL_DCMI_MspInit+0x164>)
 8018ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018ae8:	4a4e      	ldr	r2, [pc, #312]	; (8018c24 <HAL_DCMI_MspInit+0x164>)
 8018aea:	f043 0301 	orr.w	r3, r3, #1
 8018aee:	6353      	str	r3, [r2, #52]	; 0x34
 8018af0:	4b4c      	ldr	r3, [pc, #304]	; (8018c24 <HAL_DCMI_MspInit+0x164>)
 8018af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018af4:	f003 0301 	and.w	r3, r3, #1
 8018af8:	623b      	str	r3, [r7, #32]
 8018afa:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8018afc:	4b49      	ldr	r3, [pc, #292]	; (8018c24 <HAL_DCMI_MspInit+0x164>)
 8018afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b00:	4a48      	ldr	r2, [pc, #288]	; (8018c24 <HAL_DCMI_MspInit+0x164>)
 8018b02:	f043 0310 	orr.w	r3, r3, #16
 8018b06:	6313      	str	r3, [r2, #48]	; 0x30
 8018b08:	4b46      	ldr	r3, [pc, #280]	; (8018c24 <HAL_DCMI_MspInit+0x164>)
 8018b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b0c:	f003 0310 	and.w	r3, r3, #16
 8018b10:	61fb      	str	r3, [r7, #28]
 8018b12:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8018b14:	4b43      	ldr	r3, [pc, #268]	; (8018c24 <HAL_DCMI_MspInit+0x164>)
 8018b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b18:	4a42      	ldr	r2, [pc, #264]	; (8018c24 <HAL_DCMI_MspInit+0x164>)
 8018b1a:	f043 0308 	orr.w	r3, r3, #8
 8018b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8018b20:	4b40      	ldr	r3, [pc, #256]	; (8018c24 <HAL_DCMI_MspInit+0x164>)
 8018b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b24:	f003 0308 	and.w	r3, r3, #8
 8018b28:	61bb      	str	r3, [r7, #24]
 8018b2a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8018b2c:	4b3d      	ldr	r3, [pc, #244]	; (8018c24 <HAL_DCMI_MspInit+0x164>)
 8018b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b30:	4a3c      	ldr	r2, [pc, #240]	; (8018c24 <HAL_DCMI_MspInit+0x164>)
 8018b32:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018b36:	6313      	str	r3, [r2, #48]	; 0x30
 8018b38:	4b3a      	ldr	r3, [pc, #232]	; (8018c24 <HAL_DCMI_MspInit+0x164>)
 8018b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018b40:	617b      	str	r3, [r7, #20]
 8018b42:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8018b44:	4b37      	ldr	r3, [pc, #220]	; (8018c24 <HAL_DCMI_MspInit+0x164>)
 8018b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b48:	4a36      	ldr	r2, [pc, #216]	; (8018c24 <HAL_DCMI_MspInit+0x164>)
 8018b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018b4e:	6313      	str	r3, [r2, #48]	; 0x30
 8018b50:	4b34      	ldr	r3, [pc, #208]	; (8018c24 <HAL_DCMI_MspInit+0x164>)
 8018b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018b58:	613b      	str	r3, [r7, #16]
 8018b5a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018b5c:	4b31      	ldr	r3, [pc, #196]	; (8018c24 <HAL_DCMI_MspInit+0x164>)
 8018b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b60:	4a30      	ldr	r2, [pc, #192]	; (8018c24 <HAL_DCMI_MspInit+0x164>)
 8018b62:	f043 0301 	orr.w	r3, r3, #1
 8018b66:	6313      	str	r3, [r2, #48]	; 0x30
 8018b68:	4b2e      	ldr	r3, [pc, #184]	; (8018c24 <HAL_DCMI_MspInit+0x164>)
 8018b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b6c:	f003 0301 	and.w	r3, r3, #1
 8018b70:	60fb      	str	r3, [r7, #12]
 8018b72:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8018b74:	2360      	movs	r3, #96	; 0x60
 8018b76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018b78:	2302      	movs	r3, #2
 8018b7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018b7c:	2300      	movs	r3, #0
 8018b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018b80:	2300      	movs	r3, #0
 8018b82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8018b84:	230d      	movs	r3, #13
 8018b86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8018b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018b8c:	4619      	mov	r1, r3
 8018b8e:	4826      	ldr	r0, [pc, #152]	; (8018c28 <HAL_DCMI_MspInit+0x168>)
 8018b90:	f7e9 fddc 	bl	800274c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8018b94:	2308      	movs	r3, #8
 8018b96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018b98:	2302      	movs	r3, #2
 8018b9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018b9c:	2300      	movs	r3, #0
 8018b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018ba0:	2300      	movs	r3, #0
 8018ba2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8018ba4:	230d      	movs	r3, #13
 8018ba6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8018ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018bac:	4619      	mov	r1, r3
 8018bae:	481f      	ldr	r0, [pc, #124]	; (8018c2c <HAL_DCMI_MspInit+0x16c>)
 8018bb0:	f7e9 fdcc 	bl	800274c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8018bb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018bb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018bba:	2302      	movs	r3, #2
 8018bbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018bbe:	2300      	movs	r3, #0
 8018bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018bc2:	2300      	movs	r3, #0
 8018bc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8018bc6:	230d      	movs	r3, #13
 8018bc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8018bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018bce:	4619      	mov	r1, r3
 8018bd0:	4817      	ldr	r0, [pc, #92]	; (8018c30 <HAL_DCMI_MspInit+0x170>)
 8018bd2:	f7e9 fdbb 	bl	800274c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8018bd6:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8018bda:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018bdc:	2302      	movs	r3, #2
 8018bde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018be0:	2300      	movs	r3, #0
 8018be2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018be4:	2300      	movs	r3, #0
 8018be6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8018be8:	230d      	movs	r3, #13
 8018bea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8018bec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018bf0:	4619      	mov	r1, r3
 8018bf2:	4810      	ldr	r0, [pc, #64]	; (8018c34 <HAL_DCMI_MspInit+0x174>)
 8018bf4:	f7e9 fdaa 	bl	800274c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8018bf8:	2350      	movs	r3, #80	; 0x50
 8018bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018bfc:	2302      	movs	r3, #2
 8018bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018c00:	2300      	movs	r3, #0
 8018c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018c04:	2300      	movs	r3, #0
 8018c06:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8018c08:	230d      	movs	r3, #13
 8018c0a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018c0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018c10:	4619      	mov	r1, r3
 8018c12:	4809      	ldr	r0, [pc, #36]	; (8018c38 <HAL_DCMI_MspInit+0x178>)
 8018c14:	f7e9 fd9a 	bl	800274c <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8018c18:	bf00      	nop
 8018c1a:	3738      	adds	r7, #56	; 0x38
 8018c1c:	46bd      	mov	sp, r7
 8018c1e:	bd80      	pop	{r7, pc}
 8018c20:	50050000 	.word	0x50050000
 8018c24:	40023800 	.word	0x40023800
 8018c28:	40021000 	.word	0x40021000
 8018c2c:	40020c00 	.word	0x40020c00
 8018c30:	40021800 	.word	0x40021800
 8018c34:	40021c00 	.word	0x40021c00
 8018c38:	40020000 	.word	0x40020000

08018c3c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8018c3c:	b580      	push	{r7, lr}
 8018c3e:	b08e      	sub	sp, #56	; 0x38
 8018c40:	af00      	add	r7, sp, #0
 8018c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018c48:	2200      	movs	r2, #0
 8018c4a:	601a      	str	r2, [r3, #0]
 8018c4c:	605a      	str	r2, [r3, #4]
 8018c4e:	609a      	str	r2, [r3, #8]
 8018c50:	60da      	str	r2, [r3, #12]
 8018c52:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	681b      	ldr	r3, [r3, #0]
 8018c58:	4a3f      	ldr	r2, [pc, #252]	; (8018d58 <HAL_ETH_MspInit+0x11c>)
 8018c5a:	4293      	cmp	r3, r2
 8018c5c:	d178      	bne.n	8018d50 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8018c5e:	4b3f      	ldr	r3, [pc, #252]	; (8018d5c <HAL_ETH_MspInit+0x120>)
 8018c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018c62:	4a3e      	ldr	r2, [pc, #248]	; (8018d5c <HAL_ETH_MspInit+0x120>)
 8018c64:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8018c68:	6313      	str	r3, [r2, #48]	; 0x30
 8018c6a:	4b3c      	ldr	r3, [pc, #240]	; (8018d5c <HAL_ETH_MspInit+0x120>)
 8018c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018c72:	623b      	str	r3, [r7, #32]
 8018c74:	6a3b      	ldr	r3, [r7, #32]
 8018c76:	4b39      	ldr	r3, [pc, #228]	; (8018d5c <HAL_ETH_MspInit+0x120>)
 8018c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018c7a:	4a38      	ldr	r2, [pc, #224]	; (8018d5c <HAL_ETH_MspInit+0x120>)
 8018c7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8018c80:	6313      	str	r3, [r2, #48]	; 0x30
 8018c82:	4b36      	ldr	r3, [pc, #216]	; (8018d5c <HAL_ETH_MspInit+0x120>)
 8018c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018c86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8018c8a:	61fb      	str	r3, [r7, #28]
 8018c8c:	69fb      	ldr	r3, [r7, #28]
 8018c8e:	4b33      	ldr	r3, [pc, #204]	; (8018d5c <HAL_ETH_MspInit+0x120>)
 8018c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018c92:	4a32      	ldr	r2, [pc, #200]	; (8018d5c <HAL_ETH_MspInit+0x120>)
 8018c94:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8018c98:	6313      	str	r3, [r2, #48]	; 0x30
 8018c9a:	4b30      	ldr	r3, [pc, #192]	; (8018d5c <HAL_ETH_MspInit+0x120>)
 8018c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018c9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018ca2:	61bb      	str	r3, [r7, #24]
 8018ca4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8018ca6:	4b2d      	ldr	r3, [pc, #180]	; (8018d5c <HAL_ETH_MspInit+0x120>)
 8018ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018caa:	4a2c      	ldr	r2, [pc, #176]	; (8018d5c <HAL_ETH_MspInit+0x120>)
 8018cac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8018cb2:	4b2a      	ldr	r3, [pc, #168]	; (8018d5c <HAL_ETH_MspInit+0x120>)
 8018cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018cba:	617b      	str	r3, [r7, #20]
 8018cbc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8018cbe:	4b27      	ldr	r3, [pc, #156]	; (8018d5c <HAL_ETH_MspInit+0x120>)
 8018cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018cc2:	4a26      	ldr	r2, [pc, #152]	; (8018d5c <HAL_ETH_MspInit+0x120>)
 8018cc4:	f043 0304 	orr.w	r3, r3, #4
 8018cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8018cca:	4b24      	ldr	r3, [pc, #144]	; (8018d5c <HAL_ETH_MspInit+0x120>)
 8018ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018cce:	f003 0304 	and.w	r3, r3, #4
 8018cd2:	613b      	str	r3, [r7, #16]
 8018cd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018cd6:	4b21      	ldr	r3, [pc, #132]	; (8018d5c <HAL_ETH_MspInit+0x120>)
 8018cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018cda:	4a20      	ldr	r2, [pc, #128]	; (8018d5c <HAL_ETH_MspInit+0x120>)
 8018cdc:	f043 0301 	orr.w	r3, r3, #1
 8018ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8018ce2:	4b1e      	ldr	r3, [pc, #120]	; (8018d5c <HAL_ETH_MspInit+0x120>)
 8018ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ce6:	f003 0301 	and.w	r3, r3, #1
 8018cea:	60fb      	str	r3, [r7, #12]
 8018cec:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV 
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8018cee:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8018cf2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018cf4:	2302      	movs	r3, #2
 8018cf6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018cf8:	2300      	movs	r3, #0
 8018cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018cfc:	2303      	movs	r3, #3
 8018cfe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8018d00:	230b      	movs	r3, #11
 8018d02:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8018d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018d08:	4619      	mov	r1, r3
 8018d0a:	4815      	ldr	r0, [pc, #84]	; (8018d60 <HAL_ETH_MspInit+0x124>)
 8018d0c:	f7e9 fd1e 	bl	800274c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8018d10:	2332      	movs	r3, #50	; 0x32
 8018d12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018d14:	2302      	movs	r3, #2
 8018d16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018d18:	2300      	movs	r3, #0
 8018d1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018d1c:	2303      	movs	r3, #3
 8018d1e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8018d20:	230b      	movs	r3, #11
 8018d22:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8018d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018d28:	4619      	mov	r1, r3
 8018d2a:	480e      	ldr	r0, [pc, #56]	; (8018d64 <HAL_ETH_MspInit+0x128>)
 8018d2c:	f7e9 fd0e 	bl	800274c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8018d30:	2386      	movs	r3, #134	; 0x86
 8018d32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018d34:	2302      	movs	r3, #2
 8018d36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018d38:	2300      	movs	r3, #0
 8018d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018d3c:	2303      	movs	r3, #3
 8018d3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8018d40:	230b      	movs	r3, #11
 8018d42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018d48:	4619      	mov	r1, r3
 8018d4a:	4807      	ldr	r0, [pc, #28]	; (8018d68 <HAL_ETH_MspInit+0x12c>)
 8018d4c:	f7e9 fcfe 	bl	800274c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8018d50:	bf00      	nop
 8018d52:	3738      	adds	r7, #56	; 0x38
 8018d54:	46bd      	mov	sp, r7
 8018d56:	bd80      	pop	{r7, pc}
 8018d58:	40028000 	.word	0x40028000
 8018d5c:	40023800 	.word	0x40023800
 8018d60:	40021800 	.word	0x40021800
 8018d64:	40020800 	.word	0x40020800
 8018d68:	40020000 	.word	0x40020000

08018d6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8018d6c:	b580      	push	{r7, lr}
 8018d6e:	b08c      	sub	sp, #48	; 0x30
 8018d70:	af00      	add	r7, sp, #0
 8018d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018d74:	f107 031c 	add.w	r3, r7, #28
 8018d78:	2200      	movs	r2, #0
 8018d7a:	601a      	str	r2, [r3, #0]
 8018d7c:	605a      	str	r2, [r3, #4]
 8018d7e:	609a      	str	r2, [r3, #8]
 8018d80:	60da      	str	r2, [r3, #12]
 8018d82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	681b      	ldr	r3, [r3, #0]
 8018d88:	4a2f      	ldr	r2, [pc, #188]	; (8018e48 <HAL_I2C_MspInit+0xdc>)
 8018d8a:	4293      	cmp	r3, r2
 8018d8c:	d129      	bne.n	8018de2 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8018d8e:	4b2f      	ldr	r3, [pc, #188]	; (8018e4c <HAL_I2C_MspInit+0xe0>)
 8018d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018d92:	4a2e      	ldr	r2, [pc, #184]	; (8018e4c <HAL_I2C_MspInit+0xe0>)
 8018d94:	f043 0302 	orr.w	r3, r3, #2
 8018d98:	6313      	str	r3, [r2, #48]	; 0x30
 8018d9a:	4b2c      	ldr	r3, [pc, #176]	; (8018e4c <HAL_I2C_MspInit+0xe0>)
 8018d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018d9e:	f003 0302 	and.w	r3, r3, #2
 8018da2:	61bb      	str	r3, [r7, #24]
 8018da4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8018da6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8018daa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8018dac:	2312      	movs	r3, #18
 8018dae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8018db0:	2301      	movs	r3, #1
 8018db2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018db4:	2300      	movs	r3, #0
 8018db6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8018db8:	2304      	movs	r3, #4
 8018dba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8018dbc:	f107 031c 	add.w	r3, r7, #28
 8018dc0:	4619      	mov	r1, r3
 8018dc2:	4823      	ldr	r0, [pc, #140]	; (8018e50 <HAL_I2C_MspInit+0xe4>)
 8018dc4:	f7e9 fcc2 	bl	800274c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8018dc8:	4b20      	ldr	r3, [pc, #128]	; (8018e4c <HAL_I2C_MspInit+0xe0>)
 8018dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018dcc:	4a1f      	ldr	r2, [pc, #124]	; (8018e4c <HAL_I2C_MspInit+0xe0>)
 8018dce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8018dd2:	6413      	str	r3, [r2, #64]	; 0x40
 8018dd4:	4b1d      	ldr	r3, [pc, #116]	; (8018e4c <HAL_I2C_MspInit+0xe0>)
 8018dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018dd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8018ddc:	617b      	str	r3, [r7, #20]
 8018dde:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8018de0:	e02d      	b.n	8018e3e <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	681b      	ldr	r3, [r3, #0]
 8018de6:	4a1b      	ldr	r2, [pc, #108]	; (8018e54 <HAL_I2C_MspInit+0xe8>)
 8018de8:	4293      	cmp	r3, r2
 8018dea:	d128      	bne.n	8018e3e <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8018dec:	4b17      	ldr	r3, [pc, #92]	; (8018e4c <HAL_I2C_MspInit+0xe0>)
 8018dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018df0:	4a16      	ldr	r2, [pc, #88]	; (8018e4c <HAL_I2C_MspInit+0xe0>)
 8018df2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018df6:	6313      	str	r3, [r2, #48]	; 0x30
 8018df8:	4b14      	ldr	r3, [pc, #80]	; (8018e4c <HAL_I2C_MspInit+0xe0>)
 8018dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018e00:	613b      	str	r3, [r7, #16]
 8018e02:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8018e04:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8018e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8018e0a:	2312      	movs	r3, #18
 8018e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8018e0e:	2301      	movs	r3, #1
 8018e10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018e12:	2303      	movs	r3, #3
 8018e14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8018e16:	2304      	movs	r3, #4
 8018e18:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8018e1a:	f107 031c 	add.w	r3, r7, #28
 8018e1e:	4619      	mov	r1, r3
 8018e20:	480d      	ldr	r0, [pc, #52]	; (8018e58 <HAL_I2C_MspInit+0xec>)
 8018e22:	f7e9 fc93 	bl	800274c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8018e26:	4b09      	ldr	r3, [pc, #36]	; (8018e4c <HAL_I2C_MspInit+0xe0>)
 8018e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018e2a:	4a08      	ldr	r2, [pc, #32]	; (8018e4c <HAL_I2C_MspInit+0xe0>)
 8018e2c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8018e30:	6413      	str	r3, [r2, #64]	; 0x40
 8018e32:	4b06      	ldr	r3, [pc, #24]	; (8018e4c <HAL_I2C_MspInit+0xe0>)
 8018e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018e36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8018e3a:	60fb      	str	r3, [r7, #12]
 8018e3c:	68fb      	ldr	r3, [r7, #12]
}
 8018e3e:	bf00      	nop
 8018e40:	3730      	adds	r7, #48	; 0x30
 8018e42:	46bd      	mov	sp, r7
 8018e44:	bd80      	pop	{r7, pc}
 8018e46:	bf00      	nop
 8018e48:	40005400 	.word	0x40005400
 8018e4c:	40023800 	.word	0x40023800
 8018e50:	40020400 	.word	0x40020400
 8018e54:	40005c00 	.word	0x40005c00
 8018e58:	40021c00 	.word	0x40021c00

08018e5c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8018e5c:	b580      	push	{r7, lr}
 8018e5e:	b082      	sub	sp, #8
 8018e60:	af00      	add	r7, sp, #0
 8018e62:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	681b      	ldr	r3, [r3, #0]
 8018e68:	4a11      	ldr	r2, [pc, #68]	; (8018eb0 <HAL_I2C_MspDeInit+0x54>)
 8018e6a:	4293      	cmp	r3, r2
 8018e6c:	d10b      	bne.n	8018e86 <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8018e6e:	4b11      	ldr	r3, [pc, #68]	; (8018eb4 <HAL_I2C_MspDeInit+0x58>)
 8018e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018e72:	4a10      	ldr	r2, [pc, #64]	; (8018eb4 <HAL_I2C_MspDeInit+0x58>)
 8018e74:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8018e78:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin);
 8018e7a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8018e7e:	480e      	ldr	r0, [pc, #56]	; (8018eb8 <HAL_I2C_MspDeInit+0x5c>)
 8018e80:	f7e9 fe10 	bl	8002aa4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8018e84:	e00f      	b.n	8018ea6 <HAL_I2C_MspDeInit+0x4a>
  else if(hi2c->Instance==I2C3)
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	681b      	ldr	r3, [r3, #0]
 8018e8a:	4a0c      	ldr	r2, [pc, #48]	; (8018ebc <HAL_I2C_MspDeInit+0x60>)
 8018e8c:	4293      	cmp	r3, r2
 8018e8e:	d10a      	bne.n	8018ea6 <HAL_I2C_MspDeInit+0x4a>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8018e90:	4b08      	ldr	r3, [pc, #32]	; (8018eb4 <HAL_I2C_MspDeInit+0x58>)
 8018e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018e94:	4a07      	ldr	r2, [pc, #28]	; (8018eb4 <HAL_I2C_MspDeInit+0x58>)
 8018e96:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8018e9a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 8018e9c:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8018ea0:	4807      	ldr	r0, [pc, #28]	; (8018ec0 <HAL_I2C_MspDeInit+0x64>)
 8018ea2:	f7e9 fdff 	bl	8002aa4 <HAL_GPIO_DeInit>
}
 8018ea6:	bf00      	nop
 8018ea8:	3708      	adds	r7, #8
 8018eaa:	46bd      	mov	sp, r7
 8018eac:	bd80      	pop	{r7, pc}
 8018eae:	bf00      	nop
 8018eb0:	40005400 	.word	0x40005400
 8018eb4:	40023800 	.word	0x40023800
 8018eb8:	40020400 	.word	0x40020400
 8018ebc:	40005c00 	.word	0x40005c00
 8018ec0:	40021c00 	.word	0x40021c00

08018ec4 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8018ec4:	b580      	push	{r7, lr}
 8018ec6:	b08c      	sub	sp, #48	; 0x30
 8018ec8:	af00      	add	r7, sp, #0
 8018eca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018ecc:	f107 031c 	add.w	r3, r7, #28
 8018ed0:	2200      	movs	r2, #0
 8018ed2:	601a      	str	r2, [r3, #0]
 8018ed4:	605a      	str	r2, [r3, #4]
 8018ed6:	609a      	str	r2, [r3, #8]
 8018ed8:	60da      	str	r2, [r3, #12]
 8018eda:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	4a3b      	ldr	r2, [pc, #236]	; (8018fd0 <HAL_QSPI_MspInit+0x10c>)
 8018ee2:	4293      	cmp	r3, r2
 8018ee4:	d170      	bne.n	8018fc8 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8018ee6:	4b3b      	ldr	r3, [pc, #236]	; (8018fd4 <HAL_QSPI_MspInit+0x110>)
 8018ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018eea:	4a3a      	ldr	r2, [pc, #232]	; (8018fd4 <HAL_QSPI_MspInit+0x110>)
 8018eec:	f043 0302 	orr.w	r3, r3, #2
 8018ef0:	6393      	str	r3, [r2, #56]	; 0x38
 8018ef2:	4b38      	ldr	r3, [pc, #224]	; (8018fd4 <HAL_QSPI_MspInit+0x110>)
 8018ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018ef6:	f003 0302 	and.w	r3, r3, #2
 8018efa:	61bb      	str	r3, [r7, #24]
 8018efc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8018efe:	4b35      	ldr	r3, [pc, #212]	; (8018fd4 <HAL_QSPI_MspInit+0x110>)
 8018f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f02:	4a34      	ldr	r2, [pc, #208]	; (8018fd4 <HAL_QSPI_MspInit+0x110>)
 8018f04:	f043 0310 	orr.w	r3, r3, #16
 8018f08:	6313      	str	r3, [r2, #48]	; 0x30
 8018f0a:	4b32      	ldr	r3, [pc, #200]	; (8018fd4 <HAL_QSPI_MspInit+0x110>)
 8018f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f0e:	f003 0310 	and.w	r3, r3, #16
 8018f12:	617b      	str	r3, [r7, #20]
 8018f14:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8018f16:	4b2f      	ldr	r3, [pc, #188]	; (8018fd4 <HAL_QSPI_MspInit+0x110>)
 8018f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f1a:	4a2e      	ldr	r2, [pc, #184]	; (8018fd4 <HAL_QSPI_MspInit+0x110>)
 8018f1c:	f043 0302 	orr.w	r3, r3, #2
 8018f20:	6313      	str	r3, [r2, #48]	; 0x30
 8018f22:	4b2c      	ldr	r3, [pc, #176]	; (8018fd4 <HAL_QSPI_MspInit+0x110>)
 8018f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f26:	f003 0302 	and.w	r3, r3, #2
 8018f2a:	613b      	str	r3, [r7, #16]
 8018f2c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8018f2e:	4b29      	ldr	r3, [pc, #164]	; (8018fd4 <HAL_QSPI_MspInit+0x110>)
 8018f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f32:	4a28      	ldr	r2, [pc, #160]	; (8018fd4 <HAL_QSPI_MspInit+0x110>)
 8018f34:	f043 0308 	orr.w	r3, r3, #8
 8018f38:	6313      	str	r3, [r2, #48]	; 0x30
 8018f3a:	4b26      	ldr	r3, [pc, #152]	; (8018fd4 <HAL_QSPI_MspInit+0x110>)
 8018f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f3e:	f003 0308 	and.w	r3, r3, #8
 8018f42:	60fb      	str	r3, [r7, #12]
 8018f44:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8018f46:	2304      	movs	r3, #4
 8018f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018f4a:	2302      	movs	r3, #2
 8018f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018f4e:	2300      	movs	r3, #0
 8018f50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018f52:	2303      	movs	r3, #3
 8018f54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8018f56:	2309      	movs	r3, #9
 8018f58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8018f5a:	f107 031c 	add.w	r3, r7, #28
 8018f5e:	4619      	mov	r1, r3
 8018f60:	481d      	ldr	r0, [pc, #116]	; (8018fd8 <HAL_QSPI_MspInit+0x114>)
 8018f62:	f7e9 fbf3 	bl	800274c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8018f66:	2340      	movs	r3, #64	; 0x40
 8018f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018f6a:	2302      	movs	r3, #2
 8018f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018f6e:	2300      	movs	r3, #0
 8018f70:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018f72:	2303      	movs	r3, #3
 8018f74:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8018f76:	230a      	movs	r3, #10
 8018f78:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8018f7a:	f107 031c 	add.w	r3, r7, #28
 8018f7e:	4619      	mov	r1, r3
 8018f80:	4816      	ldr	r0, [pc, #88]	; (8018fdc <HAL_QSPI_MspInit+0x118>)
 8018f82:	f7e9 fbe3 	bl	800274c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8018f86:	2304      	movs	r3, #4
 8018f88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018f8a:	2302      	movs	r3, #2
 8018f8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018f8e:	2300      	movs	r3, #0
 8018f90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018f92:	2303      	movs	r3, #3
 8018f94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8018f96:	2309      	movs	r3, #9
 8018f98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8018f9a:	f107 031c 	add.w	r3, r7, #28
 8018f9e:	4619      	mov	r1, r3
 8018fa0:	480e      	ldr	r0, [pc, #56]	; (8018fdc <HAL_QSPI_MspInit+0x118>)
 8018fa2:	f7e9 fbd3 	bl	800274c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8018fa6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8018faa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018fac:	2302      	movs	r3, #2
 8018fae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018fb0:	2300      	movs	r3, #0
 8018fb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018fb4:	2303      	movs	r3, #3
 8018fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8018fb8:	2309      	movs	r3, #9
 8018fba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8018fbc:	f107 031c 	add.w	r3, r7, #28
 8018fc0:	4619      	mov	r1, r3
 8018fc2:	4807      	ldr	r0, [pc, #28]	; (8018fe0 <HAL_QSPI_MspInit+0x11c>)
 8018fc4:	f7e9 fbc2 	bl	800274c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8018fc8:	bf00      	nop
 8018fca:	3730      	adds	r7, #48	; 0x30
 8018fcc:	46bd      	mov	sp, r7
 8018fce:	bd80      	pop	{r7, pc}
 8018fd0:	a0001000 	.word	0xa0001000
 8018fd4:	40023800 	.word	0x40023800
 8018fd8:	40021000 	.word	0x40021000
 8018fdc:	40020400 	.word	0x40020400
 8018fe0:	40020c00 	.word	0x40020c00

08018fe4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8018fe4:	b480      	push	{r7}
 8018fe6:	b083      	sub	sp, #12
 8018fe8:	af00      	add	r7, sp, #0
 8018fea:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	681b      	ldr	r3, [r3, #0]
 8018ff0:	4a07      	ldr	r2, [pc, #28]	; (8019010 <HAL_RTC_MspInit+0x2c>)
 8018ff2:	4293      	cmp	r3, r2
 8018ff4:	d105      	bne.n	8019002 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8018ff6:	4b07      	ldr	r3, [pc, #28]	; (8019014 <HAL_RTC_MspInit+0x30>)
 8018ff8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018ffa:	4a06      	ldr	r2, [pc, #24]	; (8019014 <HAL_RTC_MspInit+0x30>)
 8018ffc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8019000:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8019002:	bf00      	nop
 8019004:	370c      	adds	r7, #12
 8019006:	46bd      	mov	sp, r7
 8019008:	f85d 7b04 	ldr.w	r7, [sp], #4
 801900c:	4770      	bx	lr
 801900e:	bf00      	nop
 8019010:	40002800 	.word	0x40002800
 8019014:	40023800 	.word	0x40023800

08019018 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8019018:	b580      	push	{r7, lr}
 801901a:	b08a      	sub	sp, #40	; 0x28
 801901c:	af00      	add	r7, sp, #0
 801901e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019020:	f107 0314 	add.w	r3, r7, #20
 8019024:	2200      	movs	r2, #0
 8019026:	601a      	str	r2, [r3, #0]
 8019028:	605a      	str	r2, [r3, #4]
 801902a:	609a      	str	r2, [r3, #8]
 801902c:	60da      	str	r2, [r3, #12]
 801902e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8019030:	687b      	ldr	r3, [r7, #4]
 8019032:	681b      	ldr	r3, [r3, #0]
 8019034:	4a25      	ldr	r2, [pc, #148]	; (80190cc <HAL_SD_MspInit+0xb4>)
 8019036:	4293      	cmp	r3, r2
 8019038:	d144      	bne.n	80190c4 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 801903a:	4b25      	ldr	r3, [pc, #148]	; (80190d0 <HAL_SD_MspInit+0xb8>)
 801903c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801903e:	4a24      	ldr	r2, [pc, #144]	; (80190d0 <HAL_SD_MspInit+0xb8>)
 8019040:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8019044:	6453      	str	r3, [r2, #68]	; 0x44
 8019046:	4b22      	ldr	r3, [pc, #136]	; (80190d0 <HAL_SD_MspInit+0xb8>)
 8019048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801904a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801904e:	613b      	str	r3, [r7, #16]
 8019050:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8019052:	4b1f      	ldr	r3, [pc, #124]	; (80190d0 <HAL_SD_MspInit+0xb8>)
 8019054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019056:	4a1e      	ldr	r2, [pc, #120]	; (80190d0 <HAL_SD_MspInit+0xb8>)
 8019058:	f043 0304 	orr.w	r3, r3, #4
 801905c:	6313      	str	r3, [r2, #48]	; 0x30
 801905e:	4b1c      	ldr	r3, [pc, #112]	; (80190d0 <HAL_SD_MspInit+0xb8>)
 8019060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019062:	f003 0304 	and.w	r3, r3, #4
 8019066:	60fb      	str	r3, [r7, #12]
 8019068:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801906a:	4b19      	ldr	r3, [pc, #100]	; (80190d0 <HAL_SD_MspInit+0xb8>)
 801906c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801906e:	4a18      	ldr	r2, [pc, #96]	; (80190d0 <HAL_SD_MspInit+0xb8>)
 8019070:	f043 0308 	orr.w	r3, r3, #8
 8019074:	6313      	str	r3, [r2, #48]	; 0x30
 8019076:	4b16      	ldr	r3, [pc, #88]	; (80190d0 <HAL_SD_MspInit+0xb8>)
 8019078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801907a:	f003 0308 	and.w	r3, r3, #8
 801907e:	60bb      	str	r3, [r7, #8]
 8019080:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8019082:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8019086:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019088:	2302      	movs	r3, #2
 801908a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801908c:	2300      	movs	r3, #0
 801908e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019090:	2303      	movs	r3, #3
 8019092:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8019094:	230c      	movs	r3, #12
 8019096:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8019098:	f107 0314 	add.w	r3, r7, #20
 801909c:	4619      	mov	r1, r3
 801909e:	480d      	ldr	r0, [pc, #52]	; (80190d4 <HAL_SD_MspInit+0xbc>)
 80190a0:	f7e9 fb54 	bl	800274c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 80190a4:	2304      	movs	r3, #4
 80190a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80190a8:	2302      	movs	r3, #2
 80190aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80190ac:	2300      	movs	r3, #0
 80190ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80190b0:	2303      	movs	r3, #3
 80190b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80190b4:	230c      	movs	r3, #12
 80190b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 80190b8:	f107 0314 	add.w	r3, r7, #20
 80190bc:	4619      	mov	r1, r3
 80190be:	4806      	ldr	r0, [pc, #24]	; (80190d8 <HAL_SD_MspInit+0xc0>)
 80190c0:	f7e9 fb44 	bl	800274c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80190c4:	bf00      	nop
 80190c6:	3728      	adds	r7, #40	; 0x28
 80190c8:	46bd      	mov	sp, r7
 80190ca:	bd80      	pop	{r7, pc}
 80190cc:	40012c00 	.word	0x40012c00
 80190d0:	40023800 	.word	0x40023800
 80190d4:	40020800 	.word	0x40020800
 80190d8:	40020c00 	.word	0x40020c00

080190dc <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 80190dc:	b580      	push	{r7, lr}
 80190de:	b08a      	sub	sp, #40	; 0x28
 80190e0:	af00      	add	r7, sp, #0
 80190e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80190e4:	f107 0314 	add.w	r3, r7, #20
 80190e8:	2200      	movs	r2, #0
 80190ea:	601a      	str	r2, [r3, #0]
 80190ec:	605a      	str	r2, [r3, #4]
 80190ee:	609a      	str	r2, [r3, #8]
 80190f0:	60da      	str	r2, [r3, #12]
 80190f2:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 80190fc:	d127      	bne.n	801914e <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 80190fe:	4b16      	ldr	r3, [pc, #88]	; (8019158 <HAL_SPDIFRX_MspInit+0x7c>)
 8019100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019102:	4a15      	ldr	r2, [pc, #84]	; (8019158 <HAL_SPDIFRX_MspInit+0x7c>)
 8019104:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019108:	6413      	str	r3, [r2, #64]	; 0x40
 801910a:	4b13      	ldr	r3, [pc, #76]	; (8019158 <HAL_SPDIFRX_MspInit+0x7c>)
 801910c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801910e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019112:	613b      	str	r3, [r7, #16]
 8019114:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8019116:	4b10      	ldr	r3, [pc, #64]	; (8019158 <HAL_SPDIFRX_MspInit+0x7c>)
 8019118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801911a:	4a0f      	ldr	r2, [pc, #60]	; (8019158 <HAL_SPDIFRX_MspInit+0x7c>)
 801911c:	f043 0308 	orr.w	r3, r3, #8
 8019120:	6313      	str	r3, [r2, #48]	; 0x30
 8019122:	4b0d      	ldr	r3, [pc, #52]	; (8019158 <HAL_SPDIFRX_MspInit+0x7c>)
 8019124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019126:	f003 0308 	and.w	r3, r3, #8
 801912a:	60fb      	str	r3, [r7, #12]
 801912c:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 801912e:	2380      	movs	r3, #128	; 0x80
 8019130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019132:	2302      	movs	r3, #2
 8019134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019136:	2300      	movs	r3, #0
 8019138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801913a:	2300      	movs	r3, #0
 801913c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 801913e:	2308      	movs	r3, #8
 8019140:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8019142:	f107 0314 	add.w	r3, r7, #20
 8019146:	4619      	mov	r1, r3
 8019148:	4804      	ldr	r0, [pc, #16]	; (801915c <HAL_SPDIFRX_MspInit+0x80>)
 801914a:	f7e9 faff 	bl	800274c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 801914e:	bf00      	nop
 8019150:	3728      	adds	r7, #40	; 0x28
 8019152:	46bd      	mov	sp, r7
 8019154:	bd80      	pop	{r7, pc}
 8019156:	bf00      	nop
 8019158:	40023800 	.word	0x40023800
 801915c:	40020c00 	.word	0x40020c00

08019160 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8019160:	b580      	push	{r7, lr}
 8019162:	b08a      	sub	sp, #40	; 0x28
 8019164:	af00      	add	r7, sp, #0
 8019166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019168:	f107 0314 	add.w	r3, r7, #20
 801916c:	2200      	movs	r2, #0
 801916e:	601a      	str	r2, [r3, #0]
 8019170:	605a      	str	r2, [r3, #4]
 8019172:	609a      	str	r2, [r3, #8]
 8019174:	60da      	str	r2, [r3, #12]
 8019176:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8019178:	687b      	ldr	r3, [r7, #4]
 801917a:	681b      	ldr	r3, [r3, #0]
 801917c:	4a25      	ldr	r2, [pc, #148]	; (8019214 <HAL_SPI_MspInit+0xb4>)
 801917e:	4293      	cmp	r3, r2
 8019180:	d144      	bne.n	801920c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8019182:	4b25      	ldr	r3, [pc, #148]	; (8019218 <HAL_SPI_MspInit+0xb8>)
 8019184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019186:	4a24      	ldr	r2, [pc, #144]	; (8019218 <HAL_SPI_MspInit+0xb8>)
 8019188:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801918c:	6413      	str	r3, [r2, #64]	; 0x40
 801918e:	4b22      	ldr	r3, [pc, #136]	; (8019218 <HAL_SPI_MspInit+0xb8>)
 8019190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019192:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019196:	613b      	str	r3, [r7, #16]
 8019198:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 801919a:	4b1f      	ldr	r3, [pc, #124]	; (8019218 <HAL_SPI_MspInit+0xb8>)
 801919c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801919e:	4a1e      	ldr	r2, [pc, #120]	; (8019218 <HAL_SPI_MspInit+0xb8>)
 80191a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80191a4:	6313      	str	r3, [r2, #48]	; 0x30
 80191a6:	4b1c      	ldr	r3, [pc, #112]	; (8019218 <HAL_SPI_MspInit+0xb8>)
 80191a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80191aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80191ae:	60fb      	str	r3, [r7, #12]
 80191b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80191b2:	4b19      	ldr	r3, [pc, #100]	; (8019218 <HAL_SPI_MspInit+0xb8>)
 80191b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80191b6:	4a18      	ldr	r2, [pc, #96]	; (8019218 <HAL_SPI_MspInit+0xb8>)
 80191b8:	f043 0302 	orr.w	r3, r3, #2
 80191bc:	6313      	str	r3, [r2, #48]	; 0x30
 80191be:	4b16      	ldr	r3, [pc, #88]	; (8019218 <HAL_SPI_MspInit+0xb8>)
 80191c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80191c2:	f003 0302 	and.w	r3, r3, #2
 80191c6:	60bb      	str	r3, [r7, #8]
 80191c8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80191ca:	2302      	movs	r3, #2
 80191cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80191ce:	2302      	movs	r3, #2
 80191d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80191d2:	2300      	movs	r3, #0
 80191d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80191d6:	2300      	movs	r3, #0
 80191d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80191da:	2305      	movs	r3, #5
 80191dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80191de:	f107 0314 	add.w	r3, r7, #20
 80191e2:	4619      	mov	r1, r3
 80191e4:	480d      	ldr	r0, [pc, #52]	; (801921c <HAL_SPI_MspInit+0xbc>)
 80191e6:	f7e9 fab1 	bl	800274c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 80191ea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80191ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80191f0:	2302      	movs	r3, #2
 80191f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80191f4:	2300      	movs	r3, #0
 80191f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80191f8:	2300      	movs	r3, #0
 80191fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80191fc:	2305      	movs	r3, #5
 80191fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019200:	f107 0314 	add.w	r3, r7, #20
 8019204:	4619      	mov	r1, r3
 8019206:	4806      	ldr	r0, [pc, #24]	; (8019220 <HAL_SPI_MspInit+0xc0>)
 8019208:	f7e9 faa0 	bl	800274c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 801920c:	bf00      	nop
 801920e:	3728      	adds	r7, #40	; 0x28
 8019210:	46bd      	mov	sp, r7
 8019212:	bd80      	pop	{r7, pc}
 8019214:	40003800 	.word	0x40003800
 8019218:	40023800 	.word	0x40023800
 801921c:	40022000 	.word	0x40022000
 8019220:	40020400 	.word	0x40020400

08019224 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8019224:	b480      	push	{r7}
 8019226:	b087      	sub	sp, #28
 8019228:	af00      	add	r7, sp, #0
 801922a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 801922c:	687b      	ldr	r3, [r7, #4]
 801922e:	681b      	ldr	r3, [r3, #0]
 8019230:	4a25      	ldr	r2, [pc, #148]	; (80192c8 <HAL_TIM_Base_MspInit+0xa4>)
 8019232:	4293      	cmp	r3, r2
 8019234:	d10c      	bne.n	8019250 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8019236:	4b25      	ldr	r3, [pc, #148]	; (80192cc <HAL_TIM_Base_MspInit+0xa8>)
 8019238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801923a:	4a24      	ldr	r2, [pc, #144]	; (80192cc <HAL_TIM_Base_MspInit+0xa8>)
 801923c:	f043 0301 	orr.w	r3, r3, #1
 8019240:	6453      	str	r3, [r2, #68]	; 0x44
 8019242:	4b22      	ldr	r3, [pc, #136]	; (80192cc <HAL_TIM_Base_MspInit+0xa8>)
 8019244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019246:	f003 0301 	and.w	r3, r3, #1
 801924a:	617b      	str	r3, [r7, #20]
 801924c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 801924e:	e034      	b.n	80192ba <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	681b      	ldr	r3, [r3, #0]
 8019254:	4a1e      	ldr	r2, [pc, #120]	; (80192d0 <HAL_TIM_Base_MspInit+0xac>)
 8019256:	4293      	cmp	r3, r2
 8019258:	d10c      	bne.n	8019274 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 801925a:	4b1c      	ldr	r3, [pc, #112]	; (80192cc <HAL_TIM_Base_MspInit+0xa8>)
 801925c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801925e:	4a1b      	ldr	r2, [pc, #108]	; (80192cc <HAL_TIM_Base_MspInit+0xa8>)
 8019260:	f043 0302 	orr.w	r3, r3, #2
 8019264:	6413      	str	r3, [r2, #64]	; 0x40
 8019266:	4b19      	ldr	r3, [pc, #100]	; (80192cc <HAL_TIM_Base_MspInit+0xa8>)
 8019268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801926a:	f003 0302 	and.w	r3, r3, #2
 801926e:	613b      	str	r3, [r7, #16]
 8019270:	693b      	ldr	r3, [r7, #16]
}
 8019272:	e022      	b.n	80192ba <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM5)
 8019274:	687b      	ldr	r3, [r7, #4]
 8019276:	681b      	ldr	r3, [r3, #0]
 8019278:	4a16      	ldr	r2, [pc, #88]	; (80192d4 <HAL_TIM_Base_MspInit+0xb0>)
 801927a:	4293      	cmp	r3, r2
 801927c:	d10c      	bne.n	8019298 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM5_CLK_ENABLE();
 801927e:	4b13      	ldr	r3, [pc, #76]	; (80192cc <HAL_TIM_Base_MspInit+0xa8>)
 8019280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019282:	4a12      	ldr	r2, [pc, #72]	; (80192cc <HAL_TIM_Base_MspInit+0xa8>)
 8019284:	f043 0308 	orr.w	r3, r3, #8
 8019288:	6413      	str	r3, [r2, #64]	; 0x40
 801928a:	4b10      	ldr	r3, [pc, #64]	; (80192cc <HAL_TIM_Base_MspInit+0xa8>)
 801928c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801928e:	f003 0308 	and.w	r3, r3, #8
 8019292:	60fb      	str	r3, [r7, #12]
 8019294:	68fb      	ldr	r3, [r7, #12]
}
 8019296:	e010      	b.n	80192ba <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM8)
 8019298:	687b      	ldr	r3, [r7, #4]
 801929a:	681b      	ldr	r3, [r3, #0]
 801929c:	4a0e      	ldr	r2, [pc, #56]	; (80192d8 <HAL_TIM_Base_MspInit+0xb4>)
 801929e:	4293      	cmp	r3, r2
 80192a0:	d10b      	bne.n	80192ba <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80192a2:	4b0a      	ldr	r3, [pc, #40]	; (80192cc <HAL_TIM_Base_MspInit+0xa8>)
 80192a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80192a6:	4a09      	ldr	r2, [pc, #36]	; (80192cc <HAL_TIM_Base_MspInit+0xa8>)
 80192a8:	f043 0302 	orr.w	r3, r3, #2
 80192ac:	6453      	str	r3, [r2, #68]	; 0x44
 80192ae:	4b07      	ldr	r3, [pc, #28]	; (80192cc <HAL_TIM_Base_MspInit+0xa8>)
 80192b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80192b2:	f003 0302 	and.w	r3, r3, #2
 80192b6:	60bb      	str	r3, [r7, #8]
 80192b8:	68bb      	ldr	r3, [r7, #8]
}
 80192ba:	bf00      	nop
 80192bc:	371c      	adds	r7, #28
 80192be:	46bd      	mov	sp, r7
 80192c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192c4:	4770      	bx	lr
 80192c6:	bf00      	nop
 80192c8:	40010000 	.word	0x40010000
 80192cc:	40023800 	.word	0x40023800
 80192d0:	40000400 	.word	0x40000400
 80192d4:	40000c00 	.word	0x40000c00
 80192d8:	40010400 	.word	0x40010400

080192dc <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80192dc:	b480      	push	{r7}
 80192de:	b085      	sub	sp, #20
 80192e0:	af00      	add	r7, sp, #0
 80192e2:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	681b      	ldr	r3, [r3, #0]
 80192e8:	4a0a      	ldr	r2, [pc, #40]	; (8019314 <HAL_TIM_PWM_MspInit+0x38>)
 80192ea:	4293      	cmp	r3, r2
 80192ec:	d10b      	bne.n	8019306 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 80192ee:	4b0a      	ldr	r3, [pc, #40]	; (8019318 <HAL_TIM_PWM_MspInit+0x3c>)
 80192f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80192f2:	4a09      	ldr	r2, [pc, #36]	; (8019318 <HAL_TIM_PWM_MspInit+0x3c>)
 80192f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80192f8:	6413      	str	r3, [r2, #64]	; 0x40
 80192fa:	4b07      	ldr	r3, [pc, #28]	; (8019318 <HAL_TIM_PWM_MspInit+0x3c>)
 80192fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80192fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019302:	60fb      	str	r3, [r7, #12]
 8019304:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8019306:	bf00      	nop
 8019308:	3714      	adds	r7, #20
 801930a:	46bd      	mov	sp, r7
 801930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019310:	4770      	bx	lr
 8019312:	bf00      	nop
 8019314:	40001800 	.word	0x40001800
 8019318:	40023800 	.word	0x40023800

0801931c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 801931c:	b580      	push	{r7, lr}
 801931e:	b08c      	sub	sp, #48	; 0x30
 8019320:	af00      	add	r7, sp, #0
 8019322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019324:	f107 031c 	add.w	r3, r7, #28
 8019328:	2200      	movs	r2, #0
 801932a:	601a      	str	r2, [r3, #0]
 801932c:	605a      	str	r2, [r3, #4]
 801932e:	609a      	str	r2, [r3, #8]
 8019330:	60da      	str	r2, [r3, #12]
 8019332:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8019334:	687b      	ldr	r3, [r7, #4]
 8019336:	681b      	ldr	r3, [r3, #0]
 8019338:	4a44      	ldr	r2, [pc, #272]	; (801944c <HAL_TIM_MspPostInit+0x130>)
 801933a:	4293      	cmp	r3, r2
 801933c:	d11d      	bne.n	801937a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801933e:	4b44      	ldr	r3, [pc, #272]	; (8019450 <HAL_TIM_MspPostInit+0x134>)
 8019340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019342:	4a43      	ldr	r2, [pc, #268]	; (8019450 <HAL_TIM_MspPostInit+0x134>)
 8019344:	f043 0301 	orr.w	r3, r3, #1
 8019348:	6313      	str	r3, [r2, #48]	; 0x30
 801934a:	4b41      	ldr	r3, [pc, #260]	; (8019450 <HAL_TIM_MspPostInit+0x134>)
 801934c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801934e:	f003 0301 	and.w	r3, r3, #1
 8019352:	61bb      	str	r3, [r7, #24]
 8019354:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8019356:	f44f 7380 	mov.w	r3, #256	; 0x100
 801935a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801935c:	2302      	movs	r3, #2
 801935e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019360:	2300      	movs	r3, #0
 8019362:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8019364:	2300      	movs	r3, #0
 8019366:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8019368:	2301      	movs	r3, #1
 801936a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 801936c:	f107 031c 	add.w	r3, r7, #28
 8019370:	4619      	mov	r1, r3
 8019372:	4838      	ldr	r0, [pc, #224]	; (8019454 <HAL_TIM_MspPostInit+0x138>)
 8019374:	f7e9 f9ea 	bl	800274c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8019378:	e064      	b.n	8019444 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM3)
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	681b      	ldr	r3, [r3, #0]
 801937e:	4a36      	ldr	r2, [pc, #216]	; (8019458 <HAL_TIM_MspPostInit+0x13c>)
 8019380:	4293      	cmp	r3, r2
 8019382:	d11c      	bne.n	80193be <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8019384:	4b32      	ldr	r3, [pc, #200]	; (8019450 <HAL_TIM_MspPostInit+0x134>)
 8019386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019388:	4a31      	ldr	r2, [pc, #196]	; (8019450 <HAL_TIM_MspPostInit+0x134>)
 801938a:	f043 0302 	orr.w	r3, r3, #2
 801938e:	6313      	str	r3, [r2, #48]	; 0x30
 8019390:	4b2f      	ldr	r3, [pc, #188]	; (8019450 <HAL_TIM_MspPostInit+0x134>)
 8019392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019394:	f003 0302 	and.w	r3, r3, #2
 8019398:	617b      	str	r3, [r7, #20]
 801939a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 801939c:	2310      	movs	r3, #16
 801939e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80193a0:	2302      	movs	r3, #2
 80193a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80193a4:	2300      	movs	r3, #0
 80193a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80193a8:	2300      	movs	r3, #0
 80193aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80193ac:	2302      	movs	r3, #2
 80193ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80193b0:	f107 031c 	add.w	r3, r7, #28
 80193b4:	4619      	mov	r1, r3
 80193b6:	4829      	ldr	r0, [pc, #164]	; (801945c <HAL_TIM_MspPostInit+0x140>)
 80193b8:	f7e9 f9c8 	bl	800274c <HAL_GPIO_Init>
}
 80193bc:	e042      	b.n	8019444 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM5)
 80193be:	687b      	ldr	r3, [r7, #4]
 80193c0:	681b      	ldr	r3, [r3, #0]
 80193c2:	4a27      	ldr	r2, [pc, #156]	; (8019460 <HAL_TIM_MspPostInit+0x144>)
 80193c4:	4293      	cmp	r3, r2
 80193c6:	d11c      	bne.n	8019402 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80193c8:	4b21      	ldr	r3, [pc, #132]	; (8019450 <HAL_TIM_MspPostInit+0x134>)
 80193ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80193cc:	4a20      	ldr	r2, [pc, #128]	; (8019450 <HAL_TIM_MspPostInit+0x134>)
 80193ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80193d2:	6313      	str	r3, [r2, #48]	; 0x30
 80193d4:	4b1e      	ldr	r3, [pc, #120]	; (8019450 <HAL_TIM_MspPostInit+0x134>)
 80193d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80193d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80193dc:	613b      	str	r3, [r7, #16]
 80193de:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 80193e0:	2301      	movs	r3, #1
 80193e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80193e4:	2302      	movs	r3, #2
 80193e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80193e8:	2300      	movs	r3, #0
 80193ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80193ec:	2300      	movs	r3, #0
 80193ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80193f0:	2302      	movs	r3, #2
 80193f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 80193f4:	f107 031c 	add.w	r3, r7, #28
 80193f8:	4619      	mov	r1, r3
 80193fa:	481a      	ldr	r0, [pc, #104]	; (8019464 <HAL_TIM_MspPostInit+0x148>)
 80193fc:	f7e9 f9a6 	bl	800274c <HAL_GPIO_Init>
}
 8019400:	e020      	b.n	8019444 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM12)
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	681b      	ldr	r3, [r3, #0]
 8019406:	4a18      	ldr	r2, [pc, #96]	; (8019468 <HAL_TIM_MspPostInit+0x14c>)
 8019408:	4293      	cmp	r3, r2
 801940a:	d11b      	bne.n	8019444 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 801940c:	4b10      	ldr	r3, [pc, #64]	; (8019450 <HAL_TIM_MspPostInit+0x134>)
 801940e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019410:	4a0f      	ldr	r2, [pc, #60]	; (8019450 <HAL_TIM_MspPostInit+0x134>)
 8019412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019416:	6313      	str	r3, [r2, #48]	; 0x30
 8019418:	4b0d      	ldr	r3, [pc, #52]	; (8019450 <HAL_TIM_MspPostInit+0x134>)
 801941a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801941c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019420:	60fb      	str	r3, [r7, #12]
 8019422:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8019424:	2340      	movs	r3, #64	; 0x40
 8019426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019428:	2302      	movs	r3, #2
 801942a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801942c:	2300      	movs	r3, #0
 801942e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8019430:	2300      	movs	r3, #0
 8019432:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8019434:	2309      	movs	r3, #9
 8019436:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8019438:	f107 031c 	add.w	r3, r7, #28
 801943c:	4619      	mov	r1, r3
 801943e:	480b      	ldr	r0, [pc, #44]	; (801946c <HAL_TIM_MspPostInit+0x150>)
 8019440:	f7e9 f984 	bl	800274c <HAL_GPIO_Init>
}
 8019444:	bf00      	nop
 8019446:	3730      	adds	r7, #48	; 0x30
 8019448:	46bd      	mov	sp, r7
 801944a:	bd80      	pop	{r7, pc}
 801944c:	40010000 	.word	0x40010000
 8019450:	40023800 	.word	0x40023800
 8019454:	40020000 	.word	0x40020000
 8019458:	40000400 	.word	0x40000400
 801945c:	40020400 	.word	0x40020400
 8019460:	40000c00 	.word	0x40000c00
 8019464:	40022000 	.word	0x40022000
 8019468:	40001800 	.word	0x40001800
 801946c:	40021c00 	.word	0x40021c00

08019470 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8019470:	b580      	push	{r7, lr}
 8019472:	b08c      	sub	sp, #48	; 0x30
 8019474:	af00      	add	r7, sp, #0
 8019476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019478:	f107 031c 	add.w	r3, r7, #28
 801947c:	2200      	movs	r2, #0
 801947e:	601a      	str	r2, [r3, #0]
 8019480:	605a      	str	r2, [r3, #4]
 8019482:	609a      	str	r2, [r3, #8]
 8019484:	60da      	str	r2, [r3, #12]
 8019486:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	681b      	ldr	r3, [r3, #0]
 801948c:	4a3c      	ldr	r2, [pc, #240]	; (8019580 <HAL_UART_MspInit+0x110>)
 801948e:	4293      	cmp	r3, r2
 8019490:	d145      	bne.n	801951e <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8019492:	4b3c      	ldr	r3, [pc, #240]	; (8019584 <HAL_UART_MspInit+0x114>)
 8019494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019496:	4a3b      	ldr	r2, [pc, #236]	; (8019584 <HAL_UART_MspInit+0x114>)
 8019498:	f043 0310 	orr.w	r3, r3, #16
 801949c:	6453      	str	r3, [r2, #68]	; 0x44
 801949e:	4b39      	ldr	r3, [pc, #228]	; (8019584 <HAL_UART_MspInit+0x114>)
 80194a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80194a2:	f003 0310 	and.w	r3, r3, #16
 80194a6:	61bb      	str	r3, [r7, #24]
 80194a8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80194aa:	4b36      	ldr	r3, [pc, #216]	; (8019584 <HAL_UART_MspInit+0x114>)
 80194ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80194ae:	4a35      	ldr	r2, [pc, #212]	; (8019584 <HAL_UART_MspInit+0x114>)
 80194b0:	f043 0302 	orr.w	r3, r3, #2
 80194b4:	6313      	str	r3, [r2, #48]	; 0x30
 80194b6:	4b33      	ldr	r3, [pc, #204]	; (8019584 <HAL_UART_MspInit+0x114>)
 80194b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80194ba:	f003 0302 	and.w	r3, r3, #2
 80194be:	617b      	str	r3, [r7, #20]
 80194c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80194c2:	4b30      	ldr	r3, [pc, #192]	; (8019584 <HAL_UART_MspInit+0x114>)
 80194c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80194c6:	4a2f      	ldr	r2, [pc, #188]	; (8019584 <HAL_UART_MspInit+0x114>)
 80194c8:	f043 0301 	orr.w	r3, r3, #1
 80194cc:	6313      	str	r3, [r2, #48]	; 0x30
 80194ce:	4b2d      	ldr	r3, [pc, #180]	; (8019584 <HAL_UART_MspInit+0x114>)
 80194d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80194d2:	f003 0301 	and.w	r3, r3, #1
 80194d6:	613b      	str	r3, [r7, #16]
 80194d8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80194da:	2380      	movs	r3, #128	; 0x80
 80194dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80194de:	2302      	movs	r3, #2
 80194e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80194e2:	2300      	movs	r3, #0
 80194e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80194e6:	2300      	movs	r3, #0
 80194e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80194ea:	2307      	movs	r3, #7
 80194ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80194ee:	f107 031c 	add.w	r3, r7, #28
 80194f2:	4619      	mov	r1, r3
 80194f4:	4824      	ldr	r0, [pc, #144]	; (8019588 <HAL_UART_MspInit+0x118>)
 80194f6:	f7e9 f929 	bl	800274c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80194fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80194fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019500:	2302      	movs	r3, #2
 8019502:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019504:	2300      	movs	r3, #0
 8019506:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8019508:	2300      	movs	r3, #0
 801950a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801950c:	2307      	movs	r3, #7
 801950e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8019510:	f107 031c 	add.w	r3, r7, #28
 8019514:	4619      	mov	r1, r3
 8019516:	481d      	ldr	r0, [pc, #116]	; (801958c <HAL_UART_MspInit+0x11c>)
 8019518:	f7e9 f918 	bl	800274c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 801951c:	e02c      	b.n	8019578 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	681b      	ldr	r3, [r3, #0]
 8019522:	4a1b      	ldr	r2, [pc, #108]	; (8019590 <HAL_UART_MspInit+0x120>)
 8019524:	4293      	cmp	r3, r2
 8019526:	d127      	bne.n	8019578 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 8019528:	4b16      	ldr	r3, [pc, #88]	; (8019584 <HAL_UART_MspInit+0x114>)
 801952a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801952c:	4a15      	ldr	r2, [pc, #84]	; (8019584 <HAL_UART_MspInit+0x114>)
 801952e:	f043 0320 	orr.w	r3, r3, #32
 8019532:	6453      	str	r3, [r2, #68]	; 0x44
 8019534:	4b13      	ldr	r3, [pc, #76]	; (8019584 <HAL_UART_MspInit+0x114>)
 8019536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019538:	f003 0320 	and.w	r3, r3, #32
 801953c:	60fb      	str	r3, [r7, #12]
 801953e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8019540:	4b10      	ldr	r3, [pc, #64]	; (8019584 <HAL_UART_MspInit+0x114>)
 8019542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019544:	4a0f      	ldr	r2, [pc, #60]	; (8019584 <HAL_UART_MspInit+0x114>)
 8019546:	f043 0304 	orr.w	r3, r3, #4
 801954a:	6313      	str	r3, [r2, #48]	; 0x30
 801954c:	4b0d      	ldr	r3, [pc, #52]	; (8019584 <HAL_UART_MspInit+0x114>)
 801954e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019550:	f003 0304 	and.w	r3, r3, #4
 8019554:	60bb      	str	r3, [r7, #8]
 8019556:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 8019558:	23c0      	movs	r3, #192	; 0xc0
 801955a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801955c:	2302      	movs	r3, #2
 801955e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019560:	2300      	movs	r3, #0
 8019562:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019564:	2303      	movs	r3, #3
 8019566:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8019568:	2308      	movs	r3, #8
 801956a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801956c:	f107 031c 	add.w	r3, r7, #28
 8019570:	4619      	mov	r1, r3
 8019572:	4808      	ldr	r0, [pc, #32]	; (8019594 <HAL_UART_MspInit+0x124>)
 8019574:	f7e9 f8ea 	bl	800274c <HAL_GPIO_Init>
}
 8019578:	bf00      	nop
 801957a:	3730      	adds	r7, #48	; 0x30
 801957c:	46bd      	mov	sp, r7
 801957e:	bd80      	pop	{r7, pc}
 8019580:	40011000 	.word	0x40011000
 8019584:	40023800 	.word	0x40023800
 8019588:	40020400 	.word	0x40020400
 801958c:	40020000 	.word	0x40020000
 8019590:	40011400 	.word	0x40011400
 8019594:	40020800 	.word	0x40020800

08019598 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8019598:	b580      	push	{r7, lr}
 801959a:	b08a      	sub	sp, #40	; 0x28
 801959c:	af00      	add	r7, sp, #0
 801959e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	4a2b      	ldr	r2, [pc, #172]	; (8019654 <HAL_SAI_MspInit+0xbc>)
 80195a6:	4293      	cmp	r3, r2
 80195a8:	d124      	bne.n	80195f4 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 80195aa:	4b2b      	ldr	r3, [pc, #172]	; (8019658 <HAL_SAI_MspInit+0xc0>)
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	d10b      	bne.n	80195ca <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80195b2:	4b2a      	ldr	r3, [pc, #168]	; (801965c <HAL_SAI_MspInit+0xc4>)
 80195b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80195b6:	4a29      	ldr	r2, [pc, #164]	; (801965c <HAL_SAI_MspInit+0xc4>)
 80195b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80195bc:	6453      	str	r3, [r2, #68]	; 0x44
 80195be:	4b27      	ldr	r3, [pc, #156]	; (801965c <HAL_SAI_MspInit+0xc4>)
 80195c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80195c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80195c6:	613b      	str	r3, [r7, #16]
 80195c8:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 80195ca:	4b23      	ldr	r3, [pc, #140]	; (8019658 <HAL_SAI_MspInit+0xc0>)
 80195cc:	681b      	ldr	r3, [r3, #0]
 80195ce:	3301      	adds	r3, #1
 80195d0:	4a21      	ldr	r2, [pc, #132]	; (8019658 <HAL_SAI_MspInit+0xc0>)
 80195d2:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80195d4:	23f0      	movs	r3, #240	; 0xf0
 80195d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80195d8:	2302      	movs	r3, #2
 80195da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80195dc:	2300      	movs	r3, #0
 80195de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80195e0:	2300      	movs	r3, #0
 80195e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80195e4:	230a      	movs	r3, #10
 80195e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80195e8:	f107 0314 	add.w	r3, r7, #20
 80195ec:	4619      	mov	r1, r3
 80195ee:	481c      	ldr	r0, [pc, #112]	; (8019660 <HAL_SAI_MspInit+0xc8>)
 80195f0:	f7e9 f8ac 	bl	800274c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 80195f4:	687b      	ldr	r3, [r7, #4]
 80195f6:	681b      	ldr	r3, [r3, #0]
 80195f8:	4a1a      	ldr	r2, [pc, #104]	; (8019664 <HAL_SAI_MspInit+0xcc>)
 80195fa:	4293      	cmp	r3, r2
 80195fc:	d125      	bne.n	801964a <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80195fe:	4b16      	ldr	r3, [pc, #88]	; (8019658 <HAL_SAI_MspInit+0xc0>)
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	2b00      	cmp	r3, #0
 8019604:	d10b      	bne.n	801961e <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8019606:	4b15      	ldr	r3, [pc, #84]	; (801965c <HAL_SAI_MspInit+0xc4>)
 8019608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801960a:	4a14      	ldr	r2, [pc, #80]	; (801965c <HAL_SAI_MspInit+0xc4>)
 801960c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8019610:	6453      	str	r3, [r2, #68]	; 0x44
 8019612:	4b12      	ldr	r3, [pc, #72]	; (801965c <HAL_SAI_MspInit+0xc4>)
 8019614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019616:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801961a:	60fb      	str	r3, [r7, #12]
 801961c:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 801961e:	4b0e      	ldr	r3, [pc, #56]	; (8019658 <HAL_SAI_MspInit+0xc0>)
 8019620:	681b      	ldr	r3, [r3, #0]
 8019622:	3301      	adds	r3, #1
 8019624:	4a0c      	ldr	r2, [pc, #48]	; (8019658 <HAL_SAI_MspInit+0xc0>)
 8019626:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8019628:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801962c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801962e:	2302      	movs	r3, #2
 8019630:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019632:	2300      	movs	r3, #0
 8019634:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8019636:	2300      	movs	r3, #0
 8019638:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 801963a:	230a      	movs	r3, #10
 801963c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 801963e:	f107 0314 	add.w	r3, r7, #20
 8019642:	4619      	mov	r1, r3
 8019644:	4808      	ldr	r0, [pc, #32]	; (8019668 <HAL_SAI_MspInit+0xd0>)
 8019646:	f7e9 f881 	bl	800274c <HAL_GPIO_Init>

    }
}
 801964a:	bf00      	nop
 801964c:	3728      	adds	r7, #40	; 0x28
 801964e:	46bd      	mov	sp, r7
 8019650:	bd80      	pop	{r7, pc}
 8019652:	bf00      	nop
 8019654:	40015c04 	.word	0x40015c04
 8019658:	20009c10 	.word	0x20009c10
 801965c:	40023800 	.word	0x40023800
 8019660:	40022000 	.word	0x40022000
 8019664:	40015c24 	.word	0x40015c24
 8019668:	40021800 	.word	0x40021800

0801966c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801966c:	b580      	push	{r7, lr}
 801966e:	b08c      	sub	sp, #48	; 0x30
 8019670:	af00      	add	r7, sp, #0
 8019672:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8019674:	2300      	movs	r3, #0
 8019676:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8019678:	2300      	movs	r3, #0
 801967a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 801967c:	2200      	movs	r2, #0
 801967e:	6879      	ldr	r1, [r7, #4]
 8019680:	2036      	movs	r0, #54	; 0x36
 8019682:	f7e7 fdd3 	bl	800122c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8019686:	2036      	movs	r0, #54	; 0x36
 8019688:	f7e7 fdec 	bl	8001264 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 801968c:	4b1f      	ldr	r3, [pc, #124]	; (801970c <HAL_InitTick+0xa0>)
 801968e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019690:	4a1e      	ldr	r2, [pc, #120]	; (801970c <HAL_InitTick+0xa0>)
 8019692:	f043 0310 	orr.w	r3, r3, #16
 8019696:	6413      	str	r3, [r2, #64]	; 0x40
 8019698:	4b1c      	ldr	r3, [pc, #112]	; (801970c <HAL_InitTick+0xa0>)
 801969a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801969c:	f003 0310 	and.w	r3, r3, #16
 80196a0:	60fb      	str	r3, [r7, #12]
 80196a2:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80196a4:	f107 0210 	add.w	r2, r7, #16
 80196a8:	f107 0314 	add.w	r3, r7, #20
 80196ac:	4611      	mov	r1, r2
 80196ae:	4618      	mov	r0, r3
 80196b0:	f7ec feea 	bl	8006488 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80196b4:	f7ec fec0 	bl	8006438 <HAL_RCC_GetPCLK1Freq>
 80196b8:	4603      	mov	r3, r0
 80196ba:	005b      	lsls	r3, r3, #1
 80196bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80196be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80196c0:	4a13      	ldr	r2, [pc, #76]	; (8019710 <HAL_InitTick+0xa4>)
 80196c2:	fba2 2303 	umull	r2, r3, r2, r3
 80196c6:	0c9b      	lsrs	r3, r3, #18
 80196c8:	3b01      	subs	r3, #1
 80196ca:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80196cc:	4b11      	ldr	r3, [pc, #68]	; (8019714 <HAL_InitTick+0xa8>)
 80196ce:	4a12      	ldr	r2, [pc, #72]	; (8019718 <HAL_InitTick+0xac>)
 80196d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 80196d2:	4b10      	ldr	r3, [pc, #64]	; (8019714 <HAL_InitTick+0xa8>)
 80196d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80196d8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80196da:	4a0e      	ldr	r2, [pc, #56]	; (8019714 <HAL_InitTick+0xa8>)
 80196dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196de:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80196e0:	4b0c      	ldr	r3, [pc, #48]	; (8019714 <HAL_InitTick+0xa8>)
 80196e2:	2200      	movs	r2, #0
 80196e4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80196e6:	4b0b      	ldr	r3, [pc, #44]	; (8019714 <HAL_InitTick+0xa8>)
 80196e8:	2200      	movs	r2, #0
 80196ea:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80196ec:	4809      	ldr	r0, [pc, #36]	; (8019714 <HAL_InitTick+0xa8>)
 80196ee:	f7ef fbc9 	bl	8008e84 <HAL_TIM_Base_Init>
 80196f2:	4603      	mov	r3, r0
 80196f4:	2b00      	cmp	r3, #0
 80196f6:	d104      	bne.n	8019702 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80196f8:	4806      	ldr	r0, [pc, #24]	; (8019714 <HAL_InitTick+0xa8>)
 80196fa:	f7ef fc19 	bl	8008f30 <HAL_TIM_Base_Start_IT>
 80196fe:	4603      	mov	r3, r0
 8019700:	e000      	b.n	8019704 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8019702:	2301      	movs	r3, #1
}
 8019704:	4618      	mov	r0, r3
 8019706:	3730      	adds	r7, #48	; 0x30
 8019708:	46bd      	mov	sp, r7
 801970a:	bd80      	pop	{r7, pc}
 801970c:	40023800 	.word	0x40023800
 8019710:	431bde83 	.word	0x431bde83
 8019714:	2000a2dc 	.word	0x2000a2dc
 8019718:	40001000 	.word	0x40001000

0801971c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801971c:	b480      	push	{r7}
 801971e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8019720:	bf00      	nop
 8019722:	46bd      	mov	sp, r7
 8019724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019728:	4770      	bx	lr

0801972a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801972a:	b480      	push	{r7}
 801972c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801972e:	e7fe      	b.n	801972e <HardFault_Handler+0x4>

08019730 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8019730:	b480      	push	{r7}
 8019732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8019734:	e7fe      	b.n	8019734 <MemManage_Handler+0x4>

08019736 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8019736:	b480      	push	{r7}
 8019738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801973a:	e7fe      	b.n	801973a <BusFault_Handler+0x4>

0801973c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801973c:	b480      	push	{r7}
 801973e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8019740:	e7fe      	b.n	8019740 <UsageFault_Handler+0x4>

08019742 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8019742:	b480      	push	{r7}
 8019744:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8019746:	bf00      	nop
 8019748:	46bd      	mov	sp, r7
 801974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801974e:	4770      	bx	lr

08019750 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8019750:	b580      	push	{r7, lr}
 8019752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8019754:	4802      	ldr	r0, [pc, #8]	; (8019760 <TIM6_DAC_IRQHandler+0x10>)
 8019756:	f7ef fc40 	bl	8008fda <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 801975a:	bf00      	nop
 801975c:	bd80      	pop	{r7, pc}
 801975e:	bf00      	nop
 8019760:	2000a2dc 	.word	0x2000a2dc

08019764 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8019764:	b580      	push	{r7, lr}
 8019766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8019768:	4802      	ldr	r0, [pc, #8]	; (8019774 <OTG_FS_IRQHandler+0x10>)
 801976a:	f7e9 fd51 	bl	8003210 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 801976e:	bf00      	nop
 8019770:	bd80      	pop	{r7, pc}
 8019772:	bf00      	nop
 8019774:	2000a6f4 	.word	0x2000a6f4

08019778 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8019778:	b580      	push	{r7, lr}
 801977a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 801977c:	4802      	ldr	r0, [pc, #8]	; (8019788 <LTDC_IRQHandler+0x10>)
 801977e:	f7eb fdc3 	bl	8005308 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8019782:	bf00      	nop
 8019784:	bd80      	pop	{r7, pc}
 8019786:	bf00      	nop
 8019788:	2000924c 	.word	0x2000924c

0801978c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 801978c:	b580      	push	{r7, lr}
 801978e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8019790:	4802      	ldr	r0, [pc, #8]	; (801979c <DMA2D_IRQHandler+0x10>)
 8019792:	f7e8 f932 	bl	80019fa <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8019796:	bf00      	nop
 8019798:	bd80      	pop	{r7, pc}
 801979a:	bf00      	nop
 801979c:	200092f4 	.word	0x200092f4

080197a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80197a0:	b480      	push	{r7}
 80197a2:	af00      	add	r7, sp, #0
	return 1;
 80197a4:	2301      	movs	r3, #1
}
 80197a6:	4618      	mov	r0, r3
 80197a8:	46bd      	mov	sp, r7
 80197aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197ae:	4770      	bx	lr

080197b0 <_kill>:

int _kill(int pid, int sig)
{
 80197b0:	b580      	push	{r7, lr}
 80197b2:	b082      	sub	sp, #8
 80197b4:	af00      	add	r7, sp, #0
 80197b6:	6078      	str	r0, [r7, #4]
 80197b8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80197ba:	f008 ff39 	bl	8022630 <__errno>
 80197be:	4603      	mov	r3, r0
 80197c0:	2216      	movs	r2, #22
 80197c2:	601a      	str	r2, [r3, #0]
	return -1;
 80197c4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80197c8:	4618      	mov	r0, r3
 80197ca:	3708      	adds	r7, #8
 80197cc:	46bd      	mov	sp, r7
 80197ce:	bd80      	pop	{r7, pc}

080197d0 <_exit>:

void _exit (int status)
{
 80197d0:	b580      	push	{r7, lr}
 80197d2:	b082      	sub	sp, #8
 80197d4:	af00      	add	r7, sp, #0
 80197d6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80197d8:	f04f 31ff 	mov.w	r1, #4294967295
 80197dc:	6878      	ldr	r0, [r7, #4]
 80197de:	f7ff ffe7 	bl	80197b0 <_kill>
	while (1) {}		/* Make sure we hang here */
 80197e2:	e7fe      	b.n	80197e2 <_exit+0x12>

080197e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80197e4:	b580      	push	{r7, lr}
 80197e6:	b086      	sub	sp, #24
 80197e8:	af00      	add	r7, sp, #0
 80197ea:	60f8      	str	r0, [r7, #12]
 80197ec:	60b9      	str	r1, [r7, #8]
 80197ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80197f0:	2300      	movs	r3, #0
 80197f2:	617b      	str	r3, [r7, #20]
 80197f4:	e00a      	b.n	801980c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80197f6:	f3af 8000 	nop.w
 80197fa:	4601      	mov	r1, r0
 80197fc:	68bb      	ldr	r3, [r7, #8]
 80197fe:	1c5a      	adds	r2, r3, #1
 8019800:	60ba      	str	r2, [r7, #8]
 8019802:	b2ca      	uxtb	r2, r1
 8019804:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8019806:	697b      	ldr	r3, [r7, #20]
 8019808:	3301      	adds	r3, #1
 801980a:	617b      	str	r3, [r7, #20]
 801980c:	697a      	ldr	r2, [r7, #20]
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	429a      	cmp	r2, r3
 8019812:	dbf0      	blt.n	80197f6 <_read+0x12>
	}

return len;
 8019814:	687b      	ldr	r3, [r7, #4]
}
 8019816:	4618      	mov	r0, r3
 8019818:	3718      	adds	r7, #24
 801981a:	46bd      	mov	sp, r7
 801981c:	bd80      	pop	{r7, pc}

0801981e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 801981e:	b580      	push	{r7, lr}
 8019820:	b086      	sub	sp, #24
 8019822:	af00      	add	r7, sp, #0
 8019824:	60f8      	str	r0, [r7, #12]
 8019826:	60b9      	str	r1, [r7, #8]
 8019828:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801982a:	2300      	movs	r3, #0
 801982c:	617b      	str	r3, [r7, #20]
 801982e:	e009      	b.n	8019844 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8019830:	68bb      	ldr	r3, [r7, #8]
 8019832:	1c5a      	adds	r2, r3, #1
 8019834:	60ba      	str	r2, [r7, #8]
 8019836:	781b      	ldrb	r3, [r3, #0]
 8019838:	4618      	mov	r0, r3
 801983a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801983e:	697b      	ldr	r3, [r7, #20]
 8019840:	3301      	adds	r3, #1
 8019842:	617b      	str	r3, [r7, #20]
 8019844:	697a      	ldr	r2, [r7, #20]
 8019846:	687b      	ldr	r3, [r7, #4]
 8019848:	429a      	cmp	r2, r3
 801984a:	dbf1      	blt.n	8019830 <_write+0x12>
	}
	return len;
 801984c:	687b      	ldr	r3, [r7, #4]
}
 801984e:	4618      	mov	r0, r3
 8019850:	3718      	adds	r7, #24
 8019852:	46bd      	mov	sp, r7
 8019854:	bd80      	pop	{r7, pc}

08019856 <_close>:

int _close(int file)
{
 8019856:	b480      	push	{r7}
 8019858:	b083      	sub	sp, #12
 801985a:	af00      	add	r7, sp, #0
 801985c:	6078      	str	r0, [r7, #4]
	return -1;
 801985e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019862:	4618      	mov	r0, r3
 8019864:	370c      	adds	r7, #12
 8019866:	46bd      	mov	sp, r7
 8019868:	f85d 7b04 	ldr.w	r7, [sp], #4
 801986c:	4770      	bx	lr

0801986e <_fstat>:


int _fstat(int file, struct stat *st)
{
 801986e:	b480      	push	{r7}
 8019870:	b083      	sub	sp, #12
 8019872:	af00      	add	r7, sp, #0
 8019874:	6078      	str	r0, [r7, #4]
 8019876:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8019878:	683b      	ldr	r3, [r7, #0]
 801987a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801987e:	605a      	str	r2, [r3, #4]
	return 0;
 8019880:	2300      	movs	r3, #0
}
 8019882:	4618      	mov	r0, r3
 8019884:	370c      	adds	r7, #12
 8019886:	46bd      	mov	sp, r7
 8019888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801988c:	4770      	bx	lr

0801988e <_isatty>:

int _isatty(int file)
{
 801988e:	b480      	push	{r7}
 8019890:	b083      	sub	sp, #12
 8019892:	af00      	add	r7, sp, #0
 8019894:	6078      	str	r0, [r7, #4]
	return 1;
 8019896:	2301      	movs	r3, #1
}
 8019898:	4618      	mov	r0, r3
 801989a:	370c      	adds	r7, #12
 801989c:	46bd      	mov	sp, r7
 801989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198a2:	4770      	bx	lr

080198a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80198a4:	b480      	push	{r7}
 80198a6:	b085      	sub	sp, #20
 80198a8:	af00      	add	r7, sp, #0
 80198aa:	60f8      	str	r0, [r7, #12]
 80198ac:	60b9      	str	r1, [r7, #8]
 80198ae:	607a      	str	r2, [r7, #4]
	return 0;
 80198b0:	2300      	movs	r3, #0
}
 80198b2:	4618      	mov	r0, r3
 80198b4:	3714      	adds	r7, #20
 80198b6:	46bd      	mov	sp, r7
 80198b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198bc:	4770      	bx	lr
	...

080198c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80198c0:	b580      	push	{r7, lr}
 80198c2:	b084      	sub	sp, #16
 80198c4:	af00      	add	r7, sp, #0
 80198c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80198c8:	4b11      	ldr	r3, [pc, #68]	; (8019910 <_sbrk+0x50>)
 80198ca:	681b      	ldr	r3, [r3, #0]
 80198cc:	2b00      	cmp	r3, #0
 80198ce:	d102      	bne.n	80198d6 <_sbrk+0x16>
		heap_end = &end;
 80198d0:	4b0f      	ldr	r3, [pc, #60]	; (8019910 <_sbrk+0x50>)
 80198d2:	4a10      	ldr	r2, [pc, #64]	; (8019914 <_sbrk+0x54>)
 80198d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80198d6:	4b0e      	ldr	r3, [pc, #56]	; (8019910 <_sbrk+0x50>)
 80198d8:	681b      	ldr	r3, [r3, #0]
 80198da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80198dc:	4b0c      	ldr	r3, [pc, #48]	; (8019910 <_sbrk+0x50>)
 80198de:	681a      	ldr	r2, [r3, #0]
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	4413      	add	r3, r2
 80198e4:	466a      	mov	r2, sp
 80198e6:	4293      	cmp	r3, r2
 80198e8:	d907      	bls.n	80198fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80198ea:	f008 fea1 	bl	8022630 <__errno>
 80198ee:	4603      	mov	r3, r0
 80198f0:	220c      	movs	r2, #12
 80198f2:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 80198f4:	f04f 33ff 	mov.w	r3, #4294967295
 80198f8:	e006      	b.n	8019908 <_sbrk+0x48>
	}

	heap_end += incr;
 80198fa:	4b05      	ldr	r3, [pc, #20]	; (8019910 <_sbrk+0x50>)
 80198fc:	681a      	ldr	r2, [r3, #0]
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	4413      	add	r3, r2
 8019902:	4a03      	ldr	r2, [pc, #12]	; (8019910 <_sbrk+0x50>)
 8019904:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8019906:	68fb      	ldr	r3, [r7, #12]
}
 8019908:	4618      	mov	r0, r3
 801990a:	3710      	adds	r7, #16
 801990c:	46bd      	mov	sp, r7
 801990e:	bd80      	pop	{r7, pc}
 8019910:	20009c14 	.word	0x20009c14
 8019914:	2000a9c8 	.word	0x2000a9c8

08019918 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8019918:	b480      	push	{r7}
 801991a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801991c:	4b15      	ldr	r3, [pc, #84]	; (8019974 <SystemInit+0x5c>)
 801991e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019922:	4a14      	ldr	r2, [pc, #80]	; (8019974 <SystemInit+0x5c>)
 8019924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8019928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 801992c:	4b12      	ldr	r3, [pc, #72]	; (8019978 <SystemInit+0x60>)
 801992e:	681b      	ldr	r3, [r3, #0]
 8019930:	4a11      	ldr	r2, [pc, #68]	; (8019978 <SystemInit+0x60>)
 8019932:	f043 0301 	orr.w	r3, r3, #1
 8019936:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8019938:	4b0f      	ldr	r3, [pc, #60]	; (8019978 <SystemInit+0x60>)
 801993a:	2200      	movs	r2, #0
 801993c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 801993e:	4b0e      	ldr	r3, [pc, #56]	; (8019978 <SystemInit+0x60>)
 8019940:	681a      	ldr	r2, [r3, #0]
 8019942:	490d      	ldr	r1, [pc, #52]	; (8019978 <SystemInit+0x60>)
 8019944:	4b0d      	ldr	r3, [pc, #52]	; (801997c <SystemInit+0x64>)
 8019946:	4013      	ands	r3, r2
 8019948:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 801994a:	4b0b      	ldr	r3, [pc, #44]	; (8019978 <SystemInit+0x60>)
 801994c:	4a0c      	ldr	r2, [pc, #48]	; (8019980 <SystemInit+0x68>)
 801994e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8019950:	4b09      	ldr	r3, [pc, #36]	; (8019978 <SystemInit+0x60>)
 8019952:	681b      	ldr	r3, [r3, #0]
 8019954:	4a08      	ldr	r2, [pc, #32]	; (8019978 <SystemInit+0x60>)
 8019956:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 801995a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 801995c:	4b06      	ldr	r3, [pc, #24]	; (8019978 <SystemInit+0x60>)
 801995e:	2200      	movs	r2, #0
 8019960:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8019962:	4b04      	ldr	r3, [pc, #16]	; (8019974 <SystemInit+0x5c>)
 8019964:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8019968:	609a      	str	r2, [r3, #8]
#endif
}
 801996a:	bf00      	nop
 801996c:	46bd      	mov	sp, r7
 801996e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019972:	4770      	bx	lr
 8019974:	e000ed00 	.word	0xe000ed00
 8019978:	40023800 	.word	0x40023800
 801997c:	fef6ffff 	.word	0xfef6ffff
 8019980:	24003010 	.word	0x24003010

08019984 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8019984:	b580      	push	{r7, lr}
 8019986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8019988:	2201      	movs	r2, #1
 801998a:	490e      	ldr	r1, [pc, #56]	; (80199c4 <MX_USB_HOST_Init+0x40>)
 801998c:	480e      	ldr	r0, [pc, #56]	; (80199c8 <MX_USB_HOST_Init+0x44>)
 801998e:	f7f3 f8d9 	bl	800cb44 <USBH_Init>
 8019992:	4603      	mov	r3, r0
 8019994:	2b00      	cmp	r3, #0
 8019996:	d001      	beq.n	801999c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8019998:	f7fe fdd6 	bl	8018548 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801999c:	490b      	ldr	r1, [pc, #44]	; (80199cc <MX_USB_HOST_Init+0x48>)
 801999e:	480a      	ldr	r0, [pc, #40]	; (80199c8 <MX_USB_HOST_Init+0x44>)
 80199a0:	f7f3 f96b 	bl	800cc7a <USBH_RegisterClass>
 80199a4:	4603      	mov	r3, r0
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	d001      	beq.n	80199ae <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80199aa:	f7fe fdcd 	bl	8018548 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80199ae:	4806      	ldr	r0, [pc, #24]	; (80199c8 <MX_USB_HOST_Init+0x44>)
 80199b0:	f7f3 f9f0 	bl	800cd94 <USBH_Start>
 80199b4:	4603      	mov	r3, r0
 80199b6:	2b00      	cmp	r3, #0
 80199b8:	d001      	beq.n	80199be <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80199ba:	f7fe fdc5 	bl	8018548 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80199be:	bf00      	nop
 80199c0:	bd80      	pop	{r7, pc}
 80199c2:	bf00      	nop
 80199c4:	080199d1 	.word	0x080199d1
 80199c8:	2000a31c 	.word	0x2000a31c
 80199cc:	2000002c 	.word	0x2000002c

080199d0 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80199d0:	b480      	push	{r7}
 80199d2:	b083      	sub	sp, #12
 80199d4:	af00      	add	r7, sp, #0
 80199d6:	6078      	str	r0, [r7, #4]
 80199d8:	460b      	mov	r3, r1
 80199da:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80199dc:	78fb      	ldrb	r3, [r7, #3]
 80199de:	3b01      	subs	r3, #1
 80199e0:	2b04      	cmp	r3, #4
 80199e2:	d819      	bhi.n	8019a18 <USBH_UserProcess+0x48>
 80199e4:	a201      	add	r2, pc, #4	; (adr r2, 80199ec <USBH_UserProcess+0x1c>)
 80199e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80199ea:	bf00      	nop
 80199ec:	08019a19 	.word	0x08019a19
 80199f0:	08019a09 	.word	0x08019a09
 80199f4:	08019a19 	.word	0x08019a19
 80199f8:	08019a11 	.word	0x08019a11
 80199fc:	08019a01 	.word	0x08019a01
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8019a00:	4b09      	ldr	r3, [pc, #36]	; (8019a28 <USBH_UserProcess+0x58>)
 8019a02:	2203      	movs	r2, #3
 8019a04:	701a      	strb	r2, [r3, #0]
  break;
 8019a06:	e008      	b.n	8019a1a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8019a08:	4b07      	ldr	r3, [pc, #28]	; (8019a28 <USBH_UserProcess+0x58>)
 8019a0a:	2202      	movs	r2, #2
 8019a0c:	701a      	strb	r2, [r3, #0]
  break;
 8019a0e:	e004      	b.n	8019a1a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8019a10:	4b05      	ldr	r3, [pc, #20]	; (8019a28 <USBH_UserProcess+0x58>)
 8019a12:	2201      	movs	r2, #1
 8019a14:	701a      	strb	r2, [r3, #0]
  break;
 8019a16:	e000      	b.n	8019a1a <USBH_UserProcess+0x4a>

  default:
  break;
 8019a18:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8019a1a:	bf00      	nop
 8019a1c:	370c      	adds	r7, #12
 8019a1e:	46bd      	mov	sp, r7
 8019a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a24:	4770      	bx	lr
 8019a26:	bf00      	nop
 8019a28:	20009c18 	.word	0x20009c18

08019a2c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8019a2c:	b580      	push	{r7, lr}
 8019a2e:	b08a      	sub	sp, #40	; 0x28
 8019a30:	af00      	add	r7, sp, #0
 8019a32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019a34:	f107 0314 	add.w	r3, r7, #20
 8019a38:	2200      	movs	r2, #0
 8019a3a:	601a      	str	r2, [r3, #0]
 8019a3c:	605a      	str	r2, [r3, #4]
 8019a3e:	609a      	str	r2, [r3, #8]
 8019a40:	60da      	str	r2, [r3, #12]
 8019a42:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8019a44:	687b      	ldr	r3, [r7, #4]
 8019a46:	681b      	ldr	r3, [r3, #0]
 8019a48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8019a4c:	d13c      	bne.n	8019ac8 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019a4e:	4b20      	ldr	r3, [pc, #128]	; (8019ad0 <HAL_HCD_MspInit+0xa4>)
 8019a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019a52:	4a1f      	ldr	r2, [pc, #124]	; (8019ad0 <HAL_HCD_MspInit+0xa4>)
 8019a54:	f043 0301 	orr.w	r3, r3, #1
 8019a58:	6313      	str	r3, [r2, #48]	; 0x30
 8019a5a:	4b1d      	ldr	r3, [pc, #116]	; (8019ad0 <HAL_HCD_MspInit+0xa4>)
 8019a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019a5e:	f003 0301 	and.w	r3, r3, #1
 8019a62:	613b      	str	r3, [r7, #16]
 8019a64:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 8019a66:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8019a6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019a6c:	2302      	movs	r3, #2
 8019a6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019a70:	2300      	movs	r3, #0
 8019a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019a74:	2303      	movs	r3, #3
 8019a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8019a78:	230a      	movs	r3, #10
 8019a7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019a7c:	f107 0314 	add.w	r3, r7, #20
 8019a80:	4619      	mov	r1, r3
 8019a82:	4814      	ldr	r0, [pc, #80]	; (8019ad4 <HAL_HCD_MspInit+0xa8>)
 8019a84:	f7e8 fe62 	bl	800274c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8019a88:	4b11      	ldr	r3, [pc, #68]	; (8019ad0 <HAL_HCD_MspInit+0xa4>)
 8019a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019a8c:	4a10      	ldr	r2, [pc, #64]	; (8019ad0 <HAL_HCD_MspInit+0xa4>)
 8019a8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019a92:	6353      	str	r3, [r2, #52]	; 0x34
 8019a94:	4b0e      	ldr	r3, [pc, #56]	; (8019ad0 <HAL_HCD_MspInit+0xa4>)
 8019a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019a9c:	60fb      	str	r3, [r7, #12]
 8019a9e:	68fb      	ldr	r3, [r7, #12]
 8019aa0:	4b0b      	ldr	r3, [pc, #44]	; (8019ad0 <HAL_HCD_MspInit+0xa4>)
 8019aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019aa4:	4a0a      	ldr	r2, [pc, #40]	; (8019ad0 <HAL_HCD_MspInit+0xa4>)
 8019aa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8019aaa:	6453      	str	r3, [r2, #68]	; 0x44
 8019aac:	4b08      	ldr	r3, [pc, #32]	; (8019ad0 <HAL_HCD_MspInit+0xa4>)
 8019aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019ab4:	60bb      	str	r3, [r7, #8]
 8019ab6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8019ab8:	2200      	movs	r2, #0
 8019aba:	2105      	movs	r1, #5
 8019abc:	2043      	movs	r0, #67	; 0x43
 8019abe:	f7e7 fbb5 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8019ac2:	2043      	movs	r0, #67	; 0x43
 8019ac4:	f7e7 fbce 	bl	8001264 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019ac8:	bf00      	nop
 8019aca:	3728      	adds	r7, #40	; 0x28
 8019acc:	46bd      	mov	sp, r7
 8019ace:	bd80      	pop	{r7, pc}
 8019ad0:	40023800 	.word	0x40023800
 8019ad4:	40020000 	.word	0x40020000

08019ad8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8019ad8:	b580      	push	{r7, lr}
 8019ada:	b082      	sub	sp, #8
 8019adc:	af00      	add	r7, sp, #0
 8019ade:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019ae6:	4618      	mov	r0, r3
 8019ae8:	f7f3 fca7 	bl	800d43a <USBH_LL_IncTimer>
}
 8019aec:	bf00      	nop
 8019aee:	3708      	adds	r7, #8
 8019af0:	46bd      	mov	sp, r7
 8019af2:	bd80      	pop	{r7, pc}

08019af4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8019af4:	b580      	push	{r7, lr}
 8019af6:	b082      	sub	sp, #8
 8019af8:	af00      	add	r7, sp, #0
 8019afa:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8019afc:	687b      	ldr	r3, [r7, #4]
 8019afe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019b02:	4618      	mov	r0, r3
 8019b04:	f7f3 fcec 	bl	800d4e0 <USBH_LL_Connect>
}
 8019b08:	bf00      	nop
 8019b0a:	3708      	adds	r7, #8
 8019b0c:	46bd      	mov	sp, r7
 8019b0e:	bd80      	pop	{r7, pc}

08019b10 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8019b10:	b580      	push	{r7, lr}
 8019b12:	b082      	sub	sp, #8
 8019b14:	af00      	add	r7, sp, #0
 8019b16:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019b1e:	4618      	mov	r0, r3
 8019b20:	f7f3 fd12 	bl	800d548 <USBH_LL_Disconnect>
}
 8019b24:	bf00      	nop
 8019b26:	3708      	adds	r7, #8
 8019b28:	46bd      	mov	sp, r7
 8019b2a:	bd80      	pop	{r7, pc}

08019b2c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8019b2c:	b580      	push	{r7, lr}
 8019b2e:	b082      	sub	sp, #8
 8019b30:	af00      	add	r7, sp, #0
 8019b32:	6078      	str	r0, [r7, #4]
 8019b34:	460b      	mov	r3, r1
 8019b36:	70fb      	strb	r3, [r7, #3]
 8019b38:	4613      	mov	r3, r2
 8019b3a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 8019b3c:	687b      	ldr	r3, [r7, #4]
 8019b3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019b42:	4618      	mov	r0, r3
 8019b44:	f7f3 fd50 	bl	800d5e8 <USBH_LL_NotifyURBChange>
#endif
}
 8019b48:	bf00      	nop
 8019b4a:	3708      	adds	r7, #8
 8019b4c:	46bd      	mov	sp, r7
 8019b4e:	bd80      	pop	{r7, pc}

08019b50 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8019b50:	b580      	push	{r7, lr}
 8019b52:	b082      	sub	sp, #8
 8019b54:	af00      	add	r7, sp, #0
 8019b56:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019b5e:	4618      	mov	r0, r3
 8019b60:	f7f3 fc95 	bl	800d48e <USBH_LL_PortEnabled>
} 
 8019b64:	bf00      	nop
 8019b66:	3708      	adds	r7, #8
 8019b68:	46bd      	mov	sp, r7
 8019b6a:	bd80      	pop	{r7, pc}

08019b6c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8019b6c:	b580      	push	{r7, lr}
 8019b6e:	b082      	sub	sp, #8
 8019b70:	af00      	add	r7, sp, #0
 8019b72:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8019b74:	687b      	ldr	r3, [r7, #4]
 8019b76:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019b7a:	4618      	mov	r0, r3
 8019b7c:	f7f3 fc95 	bl	800d4aa <USBH_LL_PortDisabled>
} 
 8019b80:	bf00      	nop
 8019b82:	3708      	adds	r7, #8
 8019b84:	46bd      	mov	sp, r7
 8019b86:	bd80      	pop	{r7, pc}

08019b88 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8019b88:	b580      	push	{r7, lr}
 8019b8a:	b082      	sub	sp, #8
 8019b8c:	af00      	add	r7, sp, #0
 8019b8e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8019b90:	687b      	ldr	r3, [r7, #4]
 8019b92:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8019b96:	2b01      	cmp	r3, #1
 8019b98:	d12a      	bne.n	8019bf0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8019b9a:	4a18      	ldr	r2, [pc, #96]	; (8019bfc <USBH_LL_Init+0x74>)
 8019b9c:	687b      	ldr	r3, [r7, #4]
 8019b9e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8019ba2:	687b      	ldr	r3, [r7, #4]
 8019ba4:	4a15      	ldr	r2, [pc, #84]	; (8019bfc <USBH_LL_Init+0x74>)
 8019ba6:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019baa:	4b14      	ldr	r3, [pc, #80]	; (8019bfc <USBH_LL_Init+0x74>)
 8019bac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8019bb0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8019bb2:	4b12      	ldr	r3, [pc, #72]	; (8019bfc <USBH_LL_Init+0x74>)
 8019bb4:	2208      	movs	r2, #8
 8019bb6:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8019bb8:	4b10      	ldr	r3, [pc, #64]	; (8019bfc <USBH_LL_Init+0x74>)
 8019bba:	2203      	movs	r2, #3
 8019bbc:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8019bbe:	4b0f      	ldr	r3, [pc, #60]	; (8019bfc <USBH_LL_Init+0x74>)
 8019bc0:	2200      	movs	r2, #0
 8019bc2:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8019bc4:	4b0d      	ldr	r3, [pc, #52]	; (8019bfc <USBH_LL_Init+0x74>)
 8019bc6:	2202      	movs	r2, #2
 8019bc8:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8019bca:	4b0c      	ldr	r3, [pc, #48]	; (8019bfc <USBH_LL_Init+0x74>)
 8019bcc:	2200      	movs	r2, #0
 8019bce:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8019bd0:	480a      	ldr	r0, [pc, #40]	; (8019bfc <USBH_LL_Init+0x74>)
 8019bd2:	f7e9 f8a4 	bl	8002d1e <HAL_HCD_Init>
 8019bd6:	4603      	mov	r3, r0
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	d001      	beq.n	8019be0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8019bdc:	f7fe fcb4 	bl	8018548 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8019be0:	4806      	ldr	r0, [pc, #24]	; (8019bfc <USBH_LL_Init+0x74>)
 8019be2:	f7e9 fc93 	bl	800350c <HAL_HCD_GetCurrentFrame>
 8019be6:	4603      	mov	r3, r0
 8019be8:	4619      	mov	r1, r3
 8019bea:	6878      	ldr	r0, [r7, #4]
 8019bec:	f7f3 fc16 	bl	800d41c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8019bf0:	2300      	movs	r3, #0
}
 8019bf2:	4618      	mov	r0, r3
 8019bf4:	3708      	adds	r7, #8
 8019bf6:	46bd      	mov	sp, r7
 8019bf8:	bd80      	pop	{r7, pc}
 8019bfa:	bf00      	nop
 8019bfc:	2000a6f4 	.word	0x2000a6f4

08019c00 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8019c00:	b580      	push	{r7, lr}
 8019c02:	b084      	sub	sp, #16
 8019c04:	af00      	add	r7, sp, #0
 8019c06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019c08:	2300      	movs	r3, #0
 8019c0a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019c0c:	2300      	movs	r3, #0
 8019c0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8019c10:	687b      	ldr	r3, [r7, #4]
 8019c12:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8019c16:	4618      	mov	r0, r3
 8019c18:	f7e9 fc00 	bl	800341c <HAL_HCD_Start>
 8019c1c:	4603      	mov	r3, r0
 8019c1e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019c20:	7bfb      	ldrb	r3, [r7, #15]
 8019c22:	4618      	mov	r0, r3
 8019c24:	f000 f95e 	bl	8019ee4 <USBH_Get_USB_Status>
 8019c28:	4603      	mov	r3, r0
 8019c2a:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8019c2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8019c2e:	4618      	mov	r0, r3
 8019c30:	3710      	adds	r7, #16
 8019c32:	46bd      	mov	sp, r7
 8019c34:	bd80      	pop	{r7, pc}

08019c36 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8019c36:	b580      	push	{r7, lr}
 8019c38:	b084      	sub	sp, #16
 8019c3a:	af00      	add	r7, sp, #0
 8019c3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019c3e:	2300      	movs	r3, #0
 8019c40:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019c42:	2300      	movs	r3, #0
 8019c44:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8019c46:	687b      	ldr	r3, [r7, #4]
 8019c48:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8019c4c:	4618      	mov	r0, r3
 8019c4e:	f7e9 fc08 	bl	8003462 <HAL_HCD_Stop>
 8019c52:	4603      	mov	r3, r0
 8019c54:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019c56:	7bfb      	ldrb	r3, [r7, #15]
 8019c58:	4618      	mov	r0, r3
 8019c5a:	f000 f943 	bl	8019ee4 <USBH_Get_USB_Status>
 8019c5e:	4603      	mov	r3, r0
 8019c60:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8019c62:	7bbb      	ldrb	r3, [r7, #14]
}
 8019c64:	4618      	mov	r0, r3
 8019c66:	3710      	adds	r7, #16
 8019c68:	46bd      	mov	sp, r7
 8019c6a:	bd80      	pop	{r7, pc}

08019c6c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8019c6c:	b580      	push	{r7, lr}
 8019c6e:	b084      	sub	sp, #16
 8019c70:	af00      	add	r7, sp, #0
 8019c72:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8019c74:	2301      	movs	r3, #1
 8019c76:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8019c78:	687b      	ldr	r3, [r7, #4]
 8019c7a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8019c7e:	4618      	mov	r0, r3
 8019c80:	f7e9 fc52 	bl	8003528 <HAL_HCD_GetCurrentSpeed>
 8019c84:	4603      	mov	r3, r0
 8019c86:	2b02      	cmp	r3, #2
 8019c88:	d00c      	beq.n	8019ca4 <USBH_LL_GetSpeed+0x38>
 8019c8a:	2b02      	cmp	r3, #2
 8019c8c:	d80d      	bhi.n	8019caa <USBH_LL_GetSpeed+0x3e>
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	d002      	beq.n	8019c98 <USBH_LL_GetSpeed+0x2c>
 8019c92:	2b01      	cmp	r3, #1
 8019c94:	d003      	beq.n	8019c9e <USBH_LL_GetSpeed+0x32>
 8019c96:	e008      	b.n	8019caa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8019c98:	2300      	movs	r3, #0
 8019c9a:	73fb      	strb	r3, [r7, #15]
    break;
 8019c9c:	e008      	b.n	8019cb0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8019c9e:	2301      	movs	r3, #1
 8019ca0:	73fb      	strb	r3, [r7, #15]
    break;
 8019ca2:	e005      	b.n	8019cb0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8019ca4:	2302      	movs	r3, #2
 8019ca6:	73fb      	strb	r3, [r7, #15]
    break;
 8019ca8:	e002      	b.n	8019cb0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8019caa:	2301      	movs	r3, #1
 8019cac:	73fb      	strb	r3, [r7, #15]
    break;
 8019cae:	bf00      	nop
  }
  return  speed;
 8019cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8019cb2:	4618      	mov	r0, r3
 8019cb4:	3710      	adds	r7, #16
 8019cb6:	46bd      	mov	sp, r7
 8019cb8:	bd80      	pop	{r7, pc}

08019cba <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8019cba:	b580      	push	{r7, lr}
 8019cbc:	b084      	sub	sp, #16
 8019cbe:	af00      	add	r7, sp, #0
 8019cc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019cc2:	2300      	movs	r3, #0
 8019cc4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019cc6:	2300      	movs	r3, #0
 8019cc8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8019cca:	687b      	ldr	r3, [r7, #4]
 8019ccc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8019cd0:	4618      	mov	r0, r3
 8019cd2:	f7e9 fbe3 	bl	800349c <HAL_HCD_ResetPort>
 8019cd6:	4603      	mov	r3, r0
 8019cd8:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8019cda:	7bfb      	ldrb	r3, [r7, #15]
 8019cdc:	4618      	mov	r0, r3
 8019cde:	f000 f901 	bl	8019ee4 <USBH_Get_USB_Status>
 8019ce2:	4603      	mov	r3, r0
 8019ce4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8019ce6:	7bbb      	ldrb	r3, [r7, #14]
}
 8019ce8:	4618      	mov	r0, r3
 8019cea:	3710      	adds	r7, #16
 8019cec:	46bd      	mov	sp, r7
 8019cee:	bd80      	pop	{r7, pc}

08019cf0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019cf0:	b580      	push	{r7, lr}
 8019cf2:	b082      	sub	sp, #8
 8019cf4:	af00      	add	r7, sp, #0
 8019cf6:	6078      	str	r0, [r7, #4]
 8019cf8:	460b      	mov	r3, r1
 8019cfa:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8019cfc:	687b      	ldr	r3, [r7, #4]
 8019cfe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8019d02:	78fa      	ldrb	r2, [r7, #3]
 8019d04:	4611      	mov	r1, r2
 8019d06:	4618      	mov	r0, r3
 8019d08:	f7e9 fbeb 	bl	80034e2 <HAL_HCD_HC_GetXferCount>
 8019d0c:	4603      	mov	r3, r0
}
 8019d0e:	4618      	mov	r0, r3
 8019d10:	3708      	adds	r7, #8
 8019d12:	46bd      	mov	sp, r7
 8019d14:	bd80      	pop	{r7, pc}

08019d16 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8019d16:	b590      	push	{r4, r7, lr}
 8019d18:	b089      	sub	sp, #36	; 0x24
 8019d1a:	af04      	add	r7, sp, #16
 8019d1c:	6078      	str	r0, [r7, #4]
 8019d1e:	4608      	mov	r0, r1
 8019d20:	4611      	mov	r1, r2
 8019d22:	461a      	mov	r2, r3
 8019d24:	4603      	mov	r3, r0
 8019d26:	70fb      	strb	r3, [r7, #3]
 8019d28:	460b      	mov	r3, r1
 8019d2a:	70bb      	strb	r3, [r7, #2]
 8019d2c:	4613      	mov	r3, r2
 8019d2e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019d30:	2300      	movs	r3, #0
 8019d32:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019d34:	2300      	movs	r3, #0
 8019d36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8019d3e:	787c      	ldrb	r4, [r7, #1]
 8019d40:	78ba      	ldrb	r2, [r7, #2]
 8019d42:	78f9      	ldrb	r1, [r7, #3]
 8019d44:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019d46:	9302      	str	r3, [sp, #8]
 8019d48:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019d4c:	9301      	str	r3, [sp, #4]
 8019d4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019d52:	9300      	str	r3, [sp, #0]
 8019d54:	4623      	mov	r3, r4
 8019d56:	f7e9 f838 	bl	8002dca <HAL_HCD_HC_Init>
 8019d5a:	4603      	mov	r3, r0
 8019d5c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8019d5e:	7bfb      	ldrb	r3, [r7, #15]
 8019d60:	4618      	mov	r0, r3
 8019d62:	f000 f8bf 	bl	8019ee4 <USBH_Get_USB_Status>
 8019d66:	4603      	mov	r3, r0
 8019d68:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8019d6a:	7bbb      	ldrb	r3, [r7, #14]
}
 8019d6c:	4618      	mov	r0, r3
 8019d6e:	3714      	adds	r7, #20
 8019d70:	46bd      	mov	sp, r7
 8019d72:	bd90      	pop	{r4, r7, pc}

08019d74 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019d74:	b580      	push	{r7, lr}
 8019d76:	b084      	sub	sp, #16
 8019d78:	af00      	add	r7, sp, #0
 8019d7a:	6078      	str	r0, [r7, #4]
 8019d7c:	460b      	mov	r3, r1
 8019d7e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019d80:	2300      	movs	r3, #0
 8019d82:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019d84:	2300      	movs	r3, #0
 8019d86:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8019d8e:	78fa      	ldrb	r2, [r7, #3]
 8019d90:	4611      	mov	r1, r2
 8019d92:	4618      	mov	r0, r3
 8019d94:	f7e9 f8b1 	bl	8002efa <HAL_HCD_HC_Halt>
 8019d98:	4603      	mov	r3, r0
 8019d9a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019d9c:	7bfb      	ldrb	r3, [r7, #15]
 8019d9e:	4618      	mov	r0, r3
 8019da0:	f000 f8a0 	bl	8019ee4 <USBH_Get_USB_Status>
 8019da4:	4603      	mov	r3, r0
 8019da6:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8019da8:	7bbb      	ldrb	r3, [r7, #14]
}
 8019daa:	4618      	mov	r0, r3
 8019dac:	3710      	adds	r7, #16
 8019dae:	46bd      	mov	sp, r7
 8019db0:	bd80      	pop	{r7, pc}

08019db2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8019db2:	b590      	push	{r4, r7, lr}
 8019db4:	b089      	sub	sp, #36	; 0x24
 8019db6:	af04      	add	r7, sp, #16
 8019db8:	6078      	str	r0, [r7, #4]
 8019dba:	4608      	mov	r0, r1
 8019dbc:	4611      	mov	r1, r2
 8019dbe:	461a      	mov	r2, r3
 8019dc0:	4603      	mov	r3, r0
 8019dc2:	70fb      	strb	r3, [r7, #3]
 8019dc4:	460b      	mov	r3, r1
 8019dc6:	70bb      	strb	r3, [r7, #2]
 8019dc8:	4613      	mov	r3, r2
 8019dca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019dcc:	2300      	movs	r3, #0
 8019dce:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019dd0:	2300      	movs	r3, #0
 8019dd2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8019dd4:	687b      	ldr	r3, [r7, #4]
 8019dd6:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8019dda:	787c      	ldrb	r4, [r7, #1]
 8019ddc:	78ba      	ldrb	r2, [r7, #2]
 8019dde:	78f9      	ldrb	r1, [r7, #3]
 8019de0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019de4:	9303      	str	r3, [sp, #12]
 8019de6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019de8:	9302      	str	r3, [sp, #8]
 8019dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dec:	9301      	str	r3, [sp, #4]
 8019dee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019df2:	9300      	str	r3, [sp, #0]
 8019df4:	4623      	mov	r3, r4
 8019df6:	f7e9 f8a3 	bl	8002f40 <HAL_HCD_HC_SubmitRequest>
 8019dfa:	4603      	mov	r3, r0
 8019dfc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8019dfe:	7bfb      	ldrb	r3, [r7, #15]
 8019e00:	4618      	mov	r0, r3
 8019e02:	f000 f86f 	bl	8019ee4 <USBH_Get_USB_Status>
 8019e06:	4603      	mov	r3, r0
 8019e08:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8019e0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8019e0c:	4618      	mov	r0, r3
 8019e0e:	3714      	adds	r7, #20
 8019e10:	46bd      	mov	sp, r7
 8019e12:	bd90      	pop	{r4, r7, pc}

08019e14 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019e14:	b580      	push	{r7, lr}
 8019e16:	b082      	sub	sp, #8
 8019e18:	af00      	add	r7, sp, #0
 8019e1a:	6078      	str	r0, [r7, #4]
 8019e1c:	460b      	mov	r3, r1
 8019e1e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8019e20:	687b      	ldr	r3, [r7, #4]
 8019e22:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8019e26:	78fa      	ldrb	r2, [r7, #3]
 8019e28:	4611      	mov	r1, r2
 8019e2a:	4618      	mov	r0, r3
 8019e2c:	f7e9 fb44 	bl	80034b8 <HAL_HCD_HC_GetURBState>
 8019e30:	4603      	mov	r3, r0
}
 8019e32:	4618      	mov	r0, r3
 8019e34:	3708      	adds	r7, #8
 8019e36:	46bd      	mov	sp, r7
 8019e38:	bd80      	pop	{r7, pc}

08019e3a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8019e3a:	b580      	push	{r7, lr}
 8019e3c:	b082      	sub	sp, #8
 8019e3e:	af00      	add	r7, sp, #0
 8019e40:	6078      	str	r0, [r7, #4]
 8019e42:	460b      	mov	r3, r1
 8019e44:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8019e46:	687b      	ldr	r3, [r7, #4]
 8019e48:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8019e4c:	2b01      	cmp	r3, #1
 8019e4e:	d103      	bne.n	8019e58 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8019e50:	78fb      	ldrb	r3, [r7, #3]
 8019e52:	4618      	mov	r0, r3
 8019e54:	f000 f872 	bl	8019f3c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8019e58:	20c8      	movs	r0, #200	; 0xc8
 8019e5a:	f7e6 fe75 	bl	8000b48 <HAL_Delay>
  return USBH_OK;
 8019e5e:	2300      	movs	r3, #0
}
 8019e60:	4618      	mov	r0, r3
 8019e62:	3708      	adds	r7, #8
 8019e64:	46bd      	mov	sp, r7
 8019e66:	bd80      	pop	{r7, pc}

08019e68 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8019e68:	b480      	push	{r7}
 8019e6a:	b085      	sub	sp, #20
 8019e6c:	af00      	add	r7, sp, #0
 8019e6e:	6078      	str	r0, [r7, #4]
 8019e70:	460b      	mov	r3, r1
 8019e72:	70fb      	strb	r3, [r7, #3]
 8019e74:	4613      	mov	r3, r2
 8019e76:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8019e7e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8019e80:	78fa      	ldrb	r2, [r7, #3]
 8019e82:	68f9      	ldr	r1, [r7, #12]
 8019e84:	4613      	mov	r3, r2
 8019e86:	009b      	lsls	r3, r3, #2
 8019e88:	4413      	add	r3, r2
 8019e8a:	00db      	lsls	r3, r3, #3
 8019e8c:	440b      	add	r3, r1
 8019e8e:	333b      	adds	r3, #59	; 0x3b
 8019e90:	781b      	ldrb	r3, [r3, #0]
 8019e92:	2b00      	cmp	r3, #0
 8019e94:	d00a      	beq.n	8019eac <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8019e96:	78fa      	ldrb	r2, [r7, #3]
 8019e98:	68f9      	ldr	r1, [r7, #12]
 8019e9a:	4613      	mov	r3, r2
 8019e9c:	009b      	lsls	r3, r3, #2
 8019e9e:	4413      	add	r3, r2
 8019ea0:	00db      	lsls	r3, r3, #3
 8019ea2:	440b      	add	r3, r1
 8019ea4:	3350      	adds	r3, #80	; 0x50
 8019ea6:	78ba      	ldrb	r2, [r7, #2]
 8019ea8:	701a      	strb	r2, [r3, #0]
 8019eaa:	e009      	b.n	8019ec0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8019eac:	78fa      	ldrb	r2, [r7, #3]
 8019eae:	68f9      	ldr	r1, [r7, #12]
 8019eb0:	4613      	mov	r3, r2
 8019eb2:	009b      	lsls	r3, r3, #2
 8019eb4:	4413      	add	r3, r2
 8019eb6:	00db      	lsls	r3, r3, #3
 8019eb8:	440b      	add	r3, r1
 8019eba:	3351      	adds	r3, #81	; 0x51
 8019ebc:	78ba      	ldrb	r2, [r7, #2]
 8019ebe:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8019ec0:	2300      	movs	r3, #0
}
 8019ec2:	4618      	mov	r0, r3
 8019ec4:	3714      	adds	r7, #20
 8019ec6:	46bd      	mov	sp, r7
 8019ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ecc:	4770      	bx	lr

08019ece <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8019ece:	b580      	push	{r7, lr}
 8019ed0:	b082      	sub	sp, #8
 8019ed2:	af00      	add	r7, sp, #0
 8019ed4:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8019ed6:	6878      	ldr	r0, [r7, #4]
 8019ed8:	f7e6 fe36 	bl	8000b48 <HAL_Delay>
}
 8019edc:	bf00      	nop
 8019ede:	3708      	adds	r7, #8
 8019ee0:	46bd      	mov	sp, r7
 8019ee2:	bd80      	pop	{r7, pc}

08019ee4 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019ee4:	b480      	push	{r7}
 8019ee6:	b085      	sub	sp, #20
 8019ee8:	af00      	add	r7, sp, #0
 8019eea:	4603      	mov	r3, r0
 8019eec:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019eee:	2300      	movs	r3, #0
 8019ef0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019ef2:	79fb      	ldrb	r3, [r7, #7]
 8019ef4:	2b03      	cmp	r3, #3
 8019ef6:	d817      	bhi.n	8019f28 <USBH_Get_USB_Status+0x44>
 8019ef8:	a201      	add	r2, pc, #4	; (adr r2, 8019f00 <USBH_Get_USB_Status+0x1c>)
 8019efa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019efe:	bf00      	nop
 8019f00:	08019f11 	.word	0x08019f11
 8019f04:	08019f17 	.word	0x08019f17
 8019f08:	08019f1d 	.word	0x08019f1d
 8019f0c:	08019f23 	.word	0x08019f23
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8019f10:	2300      	movs	r3, #0
 8019f12:	73fb      	strb	r3, [r7, #15]
    break;
 8019f14:	e00b      	b.n	8019f2e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8019f16:	2302      	movs	r3, #2
 8019f18:	73fb      	strb	r3, [r7, #15]
    break;
 8019f1a:	e008      	b.n	8019f2e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8019f1c:	2301      	movs	r3, #1
 8019f1e:	73fb      	strb	r3, [r7, #15]
    break;
 8019f20:	e005      	b.n	8019f2e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8019f22:	2302      	movs	r3, #2
 8019f24:	73fb      	strb	r3, [r7, #15]
    break;
 8019f26:	e002      	b.n	8019f2e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8019f28:	2302      	movs	r3, #2
 8019f2a:	73fb      	strb	r3, [r7, #15]
    break;
 8019f2c:	bf00      	nop
  }
  return usb_status;
 8019f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019f30:	4618      	mov	r0, r3
 8019f32:	3714      	adds	r7, #20
 8019f34:	46bd      	mov	sp, r7
 8019f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f3a:	4770      	bx	lr

08019f3c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8019f3c:	b580      	push	{r7, lr}
 8019f3e:	b084      	sub	sp, #16
 8019f40:	af00      	add	r7, sp, #0
 8019f42:	4603      	mov	r3, r0
 8019f44:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8019f46:	79fb      	ldrb	r3, [r7, #7]
 8019f48:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8019f4a:	79fb      	ldrb	r3, [r7, #7]
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	d102      	bne.n	8019f56 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8019f50:	2301      	movs	r3, #1
 8019f52:	73fb      	strb	r3, [r7, #15]
 8019f54:	e001      	b.n	8019f5a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8019f56:	2300      	movs	r3, #0
 8019f58:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8019f5a:	7bfb      	ldrb	r3, [r7, #15]
 8019f5c:	461a      	mov	r2, r3
 8019f5e:	2120      	movs	r1, #32
 8019f60:	4803      	ldr	r0, [pc, #12]	; (8019f70 <MX_DriverVbusFS+0x34>)
 8019f62:	f7e8 fec3 	bl	8002cec <HAL_GPIO_WritePin>
}
 8019f66:	bf00      	nop
 8019f68:	3710      	adds	r7, #16
 8019f6a:	46bd      	mov	sp, r7
 8019f6c:	bd80      	pop	{r7, pc}
 8019f6e:	bf00      	nop
 8019f70:	40020c00 	.word	0x40020c00

08019f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8019f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8019fac <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8019f78:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8019f7a:	e003      	b.n	8019f84 <LoopCopyDataInit>

08019f7c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8019f7c:	4b0c      	ldr	r3, [pc, #48]	; (8019fb0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8019f7e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8019f80:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8019f82:	3104      	adds	r1, #4

08019f84 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8019f84:	480b      	ldr	r0, [pc, #44]	; (8019fb4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8019f86:	4b0c      	ldr	r3, [pc, #48]	; (8019fb8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8019f88:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8019f8a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8019f8c:	d3f6      	bcc.n	8019f7c <CopyDataInit>
  ldr  r2, =_sbss
 8019f8e:	4a0b      	ldr	r2, [pc, #44]	; (8019fbc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8019f90:	e002      	b.n	8019f98 <LoopFillZerobss>

08019f92 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8019f92:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8019f94:	f842 3b04 	str.w	r3, [r2], #4

08019f98 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8019f98:	4b09      	ldr	r3, [pc, #36]	; (8019fc0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8019f9a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8019f9c:	d3f9      	bcc.n	8019f92 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8019f9e:	f7ff fcbb 	bl	8019918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8019fa2:	f008 fb5d 	bl	8022660 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8019fa6:	f7fd f9b3 	bl	8017310 <main>
  bx  lr    
 8019faa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8019fac:	2004ffff 	.word	0x2004ffff
  ldr  r3, =_sidata
 8019fb0:	0804fe90 	.word	0x0804fe90
  ldr  r0, =_sdata
 8019fb4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8019fb8:	20000110 	.word	0x20000110
  ldr  r2, =_sbss
 8019fbc:	20000110 	.word	0x20000110
  ldr  r3, = _ebss
 8019fc0:	2000a9c8 	.word	0x2000a9c8

08019fc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8019fc4:	e7fe      	b.n	8019fc4 <ADC_IRQHandler>

08019fc6 <_ZN23ApplicationFontProvider7getFontEt>:
extern touchgfx::InternalFlashFont& getFont_verdana_20_4bpp();
extern touchgfx::InternalFlashFont& getFont_verdana_40_4bpp();
extern touchgfx::InternalFlashFont& getFont_verdana_10_4bpp();

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId fontId)
{
 8019fc6:	b580      	push	{r7, lr}
 8019fc8:	b082      	sub	sp, #8
 8019fca:	af00      	add	r7, sp, #0
 8019fcc:	6078      	str	r0, [r7, #4]
 8019fce:	460b      	mov	r3, r1
 8019fd0:	807b      	strh	r3, [r7, #2]
    switch (fontId)
 8019fd2:	887b      	ldrh	r3, [r7, #2]
 8019fd4:	2b02      	cmp	r3, #2
 8019fd6:	d00e      	beq.n	8019ff6 <_ZN23ApplicationFontProvider7getFontEt+0x30>
 8019fd8:	2b02      	cmp	r3, #2
 8019fda:	dc10      	bgt.n	8019ffe <_ZN23ApplicationFontProvider7getFontEt+0x38>
 8019fdc:	2b00      	cmp	r3, #0
 8019fde:	d002      	beq.n	8019fe6 <_ZN23ApplicationFontProvider7getFontEt+0x20>
 8019fe0:	2b01      	cmp	r3, #1
 8019fe2:	d004      	beq.n	8019fee <_ZN23ApplicationFontProvider7getFontEt+0x28>
 8019fe4:	e00b      	b.n	8019ffe <_ZN23ApplicationFontProvider7getFontEt+0x38>
    {
    case Typography::DEFAULT:
        return &(getFont_verdana_20_4bpp());
 8019fe6:	f000 f8a9 	bl	801a13c <_Z23getFont_verdana_20_4bppv>
 8019fea:	4603      	mov	r3, r0
 8019fec:	e008      	b.n	801a000 <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::LARGE:
        return &(getFont_verdana_40_4bpp());
 8019fee:	f000 f8f5 	bl	801a1dc <_Z23getFont_verdana_40_4bppv>
 8019ff2:	4603      	mov	r3, r0
 8019ff4:	e004      	b.n	801a000 <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    case Typography::SMALL:
        return &(getFont_verdana_10_4bpp());
 8019ff6:	f000 f851 	bl	801a09c <_Z23getFont_verdana_10_4bppv>
 8019ffa:	4603      	mov	r3, r0
 8019ffc:	e000      	b.n	801a000 <_ZN23ApplicationFontProvider7getFontEt+0x3a>
    default:
        return 0;
 8019ffe:	2300      	movs	r3, #0
    }
}
 801a000:	4618      	mov	r0, r3
 801a002:	3708      	adds	r7, #8
 801a004:	46bd      	mov	sp, r7
 801a006:	bd80      	pop	{r7, pc}

0801a008 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 801a008:	b480      	push	{r7}
 801a00a:	b083      	sub	sp, #12
 801a00c:	af00      	add	r7, sp, #0
 801a00e:	6078      	str	r0, [r7, #4]
 801a010:	4a04      	ldr	r2, [pc, #16]	; (801a024 <_ZN8touchgfx4FontD1Ev+0x1c>)
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	601a      	str	r2, [r3, #0]
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	4618      	mov	r0, r3
 801a01a:	370c      	adds	r7, #12
 801a01c:	46bd      	mov	sp, r7
 801a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a022:	4770      	bx	lr
 801a024:	080260d4 	.word	0x080260d4

0801a028 <_ZN8touchgfx4FontD0Ev>:
 801a028:	b580      	push	{r7, lr}
 801a02a:	b082      	sub	sp, #8
 801a02c:	af00      	add	r7, sp, #0
 801a02e:	6078      	str	r0, [r7, #4]
 801a030:	6878      	ldr	r0, [r7, #4]
 801a032:	f7ff ffe9 	bl	801a008 <_ZN8touchgfx4FontD1Ev>
 801a036:	2110      	movs	r1, #16
 801a038:	6878      	ldr	r0, [r7, #4]
 801a03a:	f008 faa7 	bl	802258c <_ZdlPvj>
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	4618      	mov	r0, r3
 801a042:	3708      	adds	r7, #8
 801a044:	46bd      	mov	sp, r7
 801a046:	bd80      	pop	{r7, pc}

0801a048 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 801a048:	b580      	push	{r7, lr}
 801a04a:	b082      	sub	sp, #8
 801a04c:	af00      	add	r7, sp, #0
 801a04e:	6078      	str	r0, [r7, #4]
 801a050:	4a05      	ldr	r2, [pc, #20]	; (801a068 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	601a      	str	r2, [r3, #0]
 801a056:	687b      	ldr	r3, [r7, #4]
 801a058:	4618      	mov	r0, r3
 801a05a:	f7ff ffd5 	bl	801a008 <_ZN8touchgfx4FontD1Ev>
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	4618      	mov	r0, r3
 801a062:	3708      	adds	r7, #8
 801a064:	46bd      	mov	sp, r7
 801a066:	bd80      	pop	{r7, pc}
 801a068:	08026188 	.word	0x08026188

0801a06c <_ZN8touchgfx9ConstFontD0Ev>:
 801a06c:	b580      	push	{r7, lr}
 801a06e:	b082      	sub	sp, #8
 801a070:	af00      	add	r7, sp, #0
 801a072:	6078      	str	r0, [r7, #4]
 801a074:	6878      	ldr	r0, [r7, #4]
 801a076:	f7ff ffe7 	bl	801a048 <_ZN8touchgfx9ConstFontD1Ev>
 801a07a:	2118      	movs	r1, #24
 801a07c:	6878      	ldr	r0, [r7, #4]
 801a07e:	f008 fa85 	bl	802258c <_ZdlPvj>
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	4618      	mov	r0, r3
 801a086:	3708      	adds	r7, #8
 801a088:	46bd      	mov	sp, r7
 801a08a:	bd80      	pop	{r7, pc}

0801a08c <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_10_4bpp[];
touchgfx::InternalFlashFont& getFont_verdana_10_4bpp();

touchgfx::InternalFlashFont& getFont_verdana_10_4bpp()
{
    static touchgfx::InternalFlashFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 65, 10, 2, 4, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0);
 801a08c:	b580      	push	{r7, lr}
 801a08e:	af00      	add	r7, sp, #0
 801a090:	4801      	ldr	r0, [pc, #4]	; (801a098 <__tcf_0+0xc>)
 801a092:	f000 f8eb 	bl	801a26c <_ZN8touchgfx17InternalFlashFontD1Ev>
 801a096:	bd80      	pop	{r7, pc}
 801a098:	20009c1c 	.word	0x20009c1c

0801a09c <_Z23getFont_verdana_10_4bppv>:
{
 801a09c:	b580      	push	{r7, lr}
 801a09e:	b088      	sub	sp, #32
 801a0a0:	af08      	add	r7, sp, #32
    static touchgfx::InternalFlashFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 65, 10, 2, 4, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0);
 801a0a2:	4b1c      	ldr	r3, [pc, #112]	; (801a114 <_Z23getFont_verdana_10_4bppv+0x78>)
 801a0a4:	781b      	ldrb	r3, [r3, #0]
 801a0a6:	f3bf 8f5b 	dmb	ish
 801a0aa:	b2db      	uxtb	r3, r3
 801a0ac:	f003 0301 	and.w	r3, r3, #1
 801a0b0:	2b00      	cmp	r3, #0
 801a0b2:	bf0c      	ite	eq
 801a0b4:	2301      	moveq	r3, #1
 801a0b6:	2300      	movne	r3, #0
 801a0b8:	b2db      	uxtb	r3, r3
 801a0ba:	2b00      	cmp	r3, #0
 801a0bc:	d026      	beq.n	801a10c <_Z23getFont_verdana_10_4bppv+0x70>
 801a0be:	4815      	ldr	r0, [pc, #84]	; (801a114 <_Z23getFont_verdana_10_4bppv+0x78>)
 801a0c0:	f008 fa66 	bl	8022590 <__cxa_guard_acquire>
 801a0c4:	4603      	mov	r3, r0
 801a0c6:	2b00      	cmp	r3, #0
 801a0c8:	bf14      	ite	ne
 801a0ca:	2301      	movne	r3, #1
 801a0cc:	2300      	moveq	r3, #0
 801a0ce:	b2db      	uxtb	r3, r3
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	d01b      	beq.n	801a10c <_Z23getFont_verdana_10_4bppv+0x70>
 801a0d4:	2300      	movs	r3, #0
 801a0d6:	9307      	str	r3, [sp, #28]
 801a0d8:	233f      	movs	r3, #63	; 0x3f
 801a0da:	9306      	str	r3, [sp, #24]
 801a0dc:	4b0e      	ldr	r3, [pc, #56]	; (801a118 <_Z23getFont_verdana_10_4bppv+0x7c>)
 801a0de:	9305      	str	r3, [sp, #20]
 801a0e0:	4b0e      	ldr	r3, [pc, #56]	; (801a11c <_Z23getFont_verdana_10_4bppv+0x80>)
 801a0e2:	9304      	str	r3, [sp, #16]
 801a0e4:	2301      	movs	r3, #1
 801a0e6:	9303      	str	r3, [sp, #12]
 801a0e8:	2301      	movs	r3, #1
 801a0ea:	9302      	str	r3, [sp, #8]
 801a0ec:	2304      	movs	r3, #4
 801a0ee:	9301      	str	r3, [sp, #4]
 801a0f0:	2302      	movs	r3, #2
 801a0f2:	9300      	str	r3, [sp, #0]
 801a0f4:	230a      	movs	r3, #10
 801a0f6:	2241      	movs	r2, #65	; 0x41
 801a0f8:	4909      	ldr	r1, [pc, #36]	; (801a120 <_Z23getFont_verdana_10_4bppv+0x84>)
 801a0fa:	480a      	ldr	r0, [pc, #40]	; (801a124 <_Z23getFont_verdana_10_4bppv+0x88>)
 801a0fc:	f005 fc9a 	bl	801fa34 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 801a100:	4804      	ldr	r0, [pc, #16]	; (801a114 <_Z23getFont_verdana_10_4bppv+0x78>)
 801a102:	f008 fa51 	bl	80225a8 <__cxa_guard_release>
 801a106:	4808      	ldr	r0, [pc, #32]	; (801a128 <_Z23getFont_verdana_10_4bppv+0x8c>)
 801a108:	f008 fa8c 	bl	8022624 <atexit>
    return verdana_10_4bpp;
 801a10c:	4b05      	ldr	r3, [pc, #20]	; (801a124 <_Z23getFont_verdana_10_4bppv+0x88>)
}
 801a10e:	4618      	mov	r0, r3
 801a110:	46bd      	mov	sp, r7
 801a112:	bd80      	pop	{r7, pc}
 801a114:	20009c3c 	.word	0x20009c3c
 801a118:	08039888 	.word	0x08039888
 801a11c:	08026994 	.word	0x08026994
 801a120:	08039eb8 	.word	0x08039eb8
 801a124:	20009c1c 	.word	0x20009c1c
 801a128:	0801a08d 	.word	0x0801a08d

0801a12c <__tcf_1>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::InternalFlashFont& getFont_verdana_20_4bpp();

touchgfx::InternalFlashFont& getFont_verdana_20_4bpp()
{
    static touchgfx::InternalFlashFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 190, 20, 4, 4, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0);
 801a12c:	b580      	push	{r7, lr}
 801a12e:	af00      	add	r7, sp, #0
 801a130:	4801      	ldr	r0, [pc, #4]	; (801a138 <__tcf_1+0xc>)
 801a132:	f000 f89b 	bl	801a26c <_ZN8touchgfx17InternalFlashFontD1Ev>
 801a136:	bd80      	pop	{r7, pc}
 801a138:	20009c40 	.word	0x20009c40

0801a13c <_Z23getFont_verdana_20_4bppv>:
{
 801a13c:	b580      	push	{r7, lr}
 801a13e:	b088      	sub	sp, #32
 801a140:	af08      	add	r7, sp, #32
    static touchgfx::InternalFlashFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 190, 20, 4, 4, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0);
 801a142:	4b1c      	ldr	r3, [pc, #112]	; (801a1b4 <_Z23getFont_verdana_20_4bppv+0x78>)
 801a144:	781b      	ldrb	r3, [r3, #0]
 801a146:	f3bf 8f5b 	dmb	ish
 801a14a:	b2db      	uxtb	r3, r3
 801a14c:	f003 0301 	and.w	r3, r3, #1
 801a150:	2b00      	cmp	r3, #0
 801a152:	bf0c      	ite	eq
 801a154:	2301      	moveq	r3, #1
 801a156:	2300      	movne	r3, #0
 801a158:	b2db      	uxtb	r3, r3
 801a15a:	2b00      	cmp	r3, #0
 801a15c:	d026      	beq.n	801a1ac <_Z23getFont_verdana_20_4bppv+0x70>
 801a15e:	4815      	ldr	r0, [pc, #84]	; (801a1b4 <_Z23getFont_verdana_20_4bppv+0x78>)
 801a160:	f008 fa16 	bl	8022590 <__cxa_guard_acquire>
 801a164:	4603      	mov	r3, r0
 801a166:	2b00      	cmp	r3, #0
 801a168:	bf14      	ite	ne
 801a16a:	2301      	movne	r3, #1
 801a16c:	2300      	moveq	r3, #0
 801a16e:	b2db      	uxtb	r3, r3
 801a170:	2b00      	cmp	r3, #0
 801a172:	d01b      	beq.n	801a1ac <_Z23getFont_verdana_20_4bppv+0x70>
 801a174:	2300      	movs	r3, #0
 801a176:	9307      	str	r3, [sp, #28]
 801a178:	233f      	movs	r3, #63	; 0x3f
 801a17a:	9306      	str	r3, [sp, #24]
 801a17c:	4b0e      	ldr	r3, [pc, #56]	; (801a1b8 <_Z23getFont_verdana_20_4bppv+0x7c>)
 801a17e:	9305      	str	r3, [sp, #20]
 801a180:	4b0e      	ldr	r3, [pc, #56]	; (801a1bc <_Z23getFont_verdana_20_4bppv+0x80>)
 801a182:	9304      	str	r3, [sp, #16]
 801a184:	2301      	movs	r3, #1
 801a186:	9303      	str	r3, [sp, #12]
 801a188:	2301      	movs	r3, #1
 801a18a:	9302      	str	r3, [sp, #8]
 801a18c:	2304      	movs	r3, #4
 801a18e:	9301      	str	r3, [sp, #4]
 801a190:	2304      	movs	r3, #4
 801a192:	9300      	str	r3, [sp, #0]
 801a194:	2314      	movs	r3, #20
 801a196:	22be      	movs	r2, #190	; 0xbe
 801a198:	4909      	ldr	r1, [pc, #36]	; (801a1c0 <_Z23getFont_verdana_20_4bppv+0x84>)
 801a19a:	480a      	ldr	r0, [pc, #40]	; (801a1c4 <_Z23getFont_verdana_20_4bppv+0x88>)
 801a19c:	f005 fc4a 	bl	801fa34 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 801a1a0:	4804      	ldr	r0, [pc, #16]	; (801a1b4 <_Z23getFont_verdana_20_4bppv+0x78>)
 801a1a2:	f008 fa01 	bl	80225a8 <__cxa_guard_release>
 801a1a6:	4808      	ldr	r0, [pc, #32]	; (801a1c8 <_Z23getFont_verdana_20_4bppv+0x8c>)
 801a1a8:	f008 fa3c 	bl	8022624 <atexit>
    return verdana_20_4bpp;
 801a1ac:	4b05      	ldr	r3, [pc, #20]	; (801a1c4 <_Z23getFont_verdana_20_4bppv+0x88>)
}
 801a1ae:	4618      	mov	r0, r3
 801a1b0:	46bd      	mov	sp, r7
 801a1b2:	bd80      	pop	{r7, pc}
 801a1b4:	20009c60 	.word	0x20009c60
 801a1b8:	080398a4 	.word	0x080398a4
 801a1bc:	08026fb0 	.word	0x08026fb0
 801a1c0:	0803a248 	.word	0x0803a248
 801a1c4:	20009c40 	.word	0x20009c40
 801a1c8:	0801a12d 	.word	0x0801a12d

0801a1cc <__tcf_2>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::InternalFlashFont& getFont_verdana_40_4bpp();

touchgfx::InternalFlashFont& getFont_verdana_40_4bpp()
{
    static touchgfx::InternalFlashFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 190, 40, 8, 4, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0);
 801a1cc:	b580      	push	{r7, lr}
 801a1ce:	af00      	add	r7, sp, #0
 801a1d0:	4801      	ldr	r0, [pc, #4]	; (801a1d8 <__tcf_2+0xc>)
 801a1d2:	f000 f84b 	bl	801a26c <_ZN8touchgfx17InternalFlashFontD1Ev>
 801a1d6:	bd80      	pop	{r7, pc}
 801a1d8:	20009c64 	.word	0x20009c64

0801a1dc <_Z23getFont_verdana_40_4bppv>:
{
 801a1dc:	b580      	push	{r7, lr}
 801a1de:	b088      	sub	sp, #32
 801a1e0:	af08      	add	r7, sp, #32
    static touchgfx::InternalFlashFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 190, 40, 8, 4, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0);
 801a1e2:	4b1c      	ldr	r3, [pc, #112]	; (801a254 <_Z23getFont_verdana_40_4bppv+0x78>)
 801a1e4:	781b      	ldrb	r3, [r3, #0]
 801a1e6:	f3bf 8f5b 	dmb	ish
 801a1ea:	b2db      	uxtb	r3, r3
 801a1ec:	f003 0301 	and.w	r3, r3, #1
 801a1f0:	2b00      	cmp	r3, #0
 801a1f2:	bf0c      	ite	eq
 801a1f4:	2301      	moveq	r3, #1
 801a1f6:	2300      	movne	r3, #0
 801a1f8:	b2db      	uxtb	r3, r3
 801a1fa:	2b00      	cmp	r3, #0
 801a1fc:	d026      	beq.n	801a24c <_Z23getFont_verdana_40_4bppv+0x70>
 801a1fe:	4815      	ldr	r0, [pc, #84]	; (801a254 <_Z23getFont_verdana_40_4bppv+0x78>)
 801a200:	f008 f9c6 	bl	8022590 <__cxa_guard_acquire>
 801a204:	4603      	mov	r3, r0
 801a206:	2b00      	cmp	r3, #0
 801a208:	bf14      	ite	ne
 801a20a:	2301      	movne	r3, #1
 801a20c:	2300      	moveq	r3, #0
 801a20e:	b2db      	uxtb	r3, r3
 801a210:	2b00      	cmp	r3, #0
 801a212:	d01b      	beq.n	801a24c <_Z23getFont_verdana_40_4bppv+0x70>
 801a214:	2300      	movs	r3, #0
 801a216:	9307      	str	r3, [sp, #28]
 801a218:	233f      	movs	r3, #63	; 0x3f
 801a21a:	9306      	str	r3, [sp, #24]
 801a21c:	4b0e      	ldr	r3, [pc, #56]	; (801a258 <_Z23getFont_verdana_40_4bppv+0x7c>)
 801a21e:	9305      	str	r3, [sp, #20]
 801a220:	4b0e      	ldr	r3, [pc, #56]	; (801a25c <_Z23getFont_verdana_40_4bppv+0x80>)
 801a222:	9304      	str	r3, [sp, #16]
 801a224:	2302      	movs	r3, #2
 801a226:	9303      	str	r3, [sp, #12]
 801a228:	2302      	movs	r3, #2
 801a22a:	9302      	str	r3, [sp, #8]
 801a22c:	2304      	movs	r3, #4
 801a22e:	9301      	str	r3, [sp, #4]
 801a230:	2308      	movs	r3, #8
 801a232:	9300      	str	r3, [sp, #0]
 801a234:	2328      	movs	r3, #40	; 0x28
 801a236:	22be      	movs	r2, #190	; 0xbe
 801a238:	4909      	ldr	r1, [pc, #36]	; (801a260 <_Z23getFont_verdana_40_4bppv+0x84>)
 801a23a:	480a      	ldr	r0, [pc, #40]	; (801a264 <_Z23getFont_verdana_40_4bppv+0x88>)
 801a23c:	f005 fbfa 	bl	801fa34 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 801a240:	4804      	ldr	r0, [pc, #16]	; (801a254 <_Z23getFont_verdana_40_4bppv+0x78>)
 801a242:	f008 f9b1 	bl	80225a8 <__cxa_guard_release>
 801a246:	4808      	ldr	r0, [pc, #32]	; (801a268 <_Z23getFont_verdana_40_4bppv+0x8c>)
 801a248:	f008 f9ec 	bl	8022624 <atexit>
    return verdana_40_4bpp;
 801a24c:	4b05      	ldr	r3, [pc, #20]	; (801a264 <_Z23getFont_verdana_40_4bppv+0x88>)
}
 801a24e:	4618      	mov	r0, r3
 801a250:	46bd      	mov	sp, r7
 801a252:	bd80      	pop	{r7, pc}
 801a254:	20009c84 	.word	0x20009c84
 801a258:	08039ab8 	.word	0x08039ab8
 801a25c:	0802ab68 	.word	0x0802ab68
 801a260:	0803acac 	.word	0x0803acac
 801a264:	20009c64 	.word	0x20009c64
 801a268:	0801a1cd 	.word	0x0801a1cd

0801a26c <_ZN8touchgfx17InternalFlashFontD1Ev>:
 *        An InternalFlashFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class InternalFlashFont : public ConstFont
 801a26c:	b580      	push	{r7, lr}
 801a26e:	b082      	sub	sp, #8
 801a270:	af00      	add	r7, sp, #0
 801a272:	6078      	str	r0, [r7, #4]
 801a274:	4a05      	ldr	r2, [pc, #20]	; (801a28c <_ZN8touchgfx17InternalFlashFontD1Ev+0x20>)
 801a276:	687b      	ldr	r3, [r7, #4]
 801a278:	601a      	str	r2, [r3, #0]
 801a27a:	687b      	ldr	r3, [r7, #4]
 801a27c:	4618      	mov	r0, r3
 801a27e:	f7ff fee3 	bl	801a048 <_ZN8touchgfx9ConstFontD1Ev>
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	4618      	mov	r0, r3
 801a286:	3708      	adds	r7, #8
 801a288:	46bd      	mov	sp, r7
 801a28a:	bd80      	pop	{r7, pc}
 801a28c:	0802621c 	.word	0x0802621c

0801a290 <_ZN8touchgfx17InternalFlashFontD0Ev>:
 801a290:	b580      	push	{r7, lr}
 801a292:	b082      	sub	sp, #8
 801a294:	af00      	add	r7, sp, #0
 801a296:	6078      	str	r0, [r7, #4]
 801a298:	6878      	ldr	r0, [r7, #4]
 801a29a:	f7ff ffe7 	bl	801a26c <_ZN8touchgfx17InternalFlashFontD1Ev>
 801a29e:	2120      	movs	r1, #32
 801a2a0:	6878      	ldr	r0, [r7, #4]
 801a2a2:	f008 f973 	bl	802258c <_ZdlPvj>
 801a2a6:	687b      	ldr	r3, [r7, #4]
 801a2a8:	4618      	mov	r0, r3
 801a2aa:	3708      	adds	r7, #8
 801a2ac:	46bd      	mov	sp, r7
 801a2ae:	bd80      	pop	{r7, pc}

0801a2b0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 801a2b0:	b480      	push	{r7}
 801a2b2:	b083      	sub	sp, #12
 801a2b4:	af00      	add	r7, sp, #0
 801a2b6:	6078      	str	r0, [r7, #4]
 801a2b8:	6039      	str	r1, [r7, #0]
 801a2ba:	683b      	ldr	r3, [r7, #0]
 801a2bc:	4618      	mov	r0, r3
 801a2be:	370c      	adds	r7, #12
 801a2c0:	46bd      	mov	sp, r7
 801a2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2c6:	4770      	bx	lr

0801a2c8 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 801a2c8:	b480      	push	{r7}
 801a2ca:	b083      	sub	sp, #12
 801a2cc:	af00      	add	r7, sp, #0
 801a2ce:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 801a2d0:	4a07      	ldr	r2, [pc, #28]	; (801a2f0 <_ZN8touchgfx10TransitionC1Ev+0x28>)
 801a2d2:	687b      	ldr	r3, [r7, #4]
 801a2d4:	601a      	str	r2, [r3, #0]
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	2200      	movs	r2, #0
 801a2da:	605a      	str	r2, [r3, #4]
 801a2dc:	687b      	ldr	r3, [r7, #4]
 801a2de:	2200      	movs	r2, #0
 801a2e0:	721a      	strb	r2, [r3, #8]
    {
    }
 801a2e2:	687b      	ldr	r3, [r7, #4]
 801a2e4:	4618      	mov	r0, r3
 801a2e6:	370c      	adds	r7, #12
 801a2e8:	46bd      	mov	sp, r7
 801a2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a2ee:	4770      	bx	lr
 801a2f0:	080252c8 	.word	0x080252c8

0801a2f4 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 801a2f4:	b480      	push	{r7}
 801a2f6:	b083      	sub	sp, #12
 801a2f8:	af00      	add	r7, sp, #0
 801a2fa:	6078      	str	r0, [r7, #4]
    {
 801a2fc:	4a04      	ldr	r2, [pc, #16]	; (801a310 <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	601a      	str	r2, [r3, #0]
    }
 801a302:	687b      	ldr	r3, [r7, #4]
 801a304:	4618      	mov	r0, r3
 801a306:	370c      	adds	r7, #12
 801a308:	46bd      	mov	sp, r7
 801a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a30e:	4770      	bx	lr
 801a310:	080252c8 	.word	0x080252c8

0801a314 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 801a314:	b580      	push	{r7, lr}
 801a316:	b082      	sub	sp, #8
 801a318:	af00      	add	r7, sp, #0
 801a31a:	6078      	str	r0, [r7, #4]
    }
 801a31c:	6878      	ldr	r0, [r7, #4]
 801a31e:	f7ff ffe9 	bl	801a2f4 <_ZN8touchgfx10TransitionD1Ev>
 801a322:	210c      	movs	r1, #12
 801a324:	6878      	ldr	r0, [r7, #4]
 801a326:	f008 f931 	bl	802258c <_ZdlPvj>
 801a32a:	687b      	ldr	r3, [r7, #4]
 801a32c:	4618      	mov	r0, r3
 801a32e:	3708      	adds	r7, #8
 801a330:	46bd      	mov	sp, r7
 801a332:	bd80      	pop	{r7, pc}

0801a334 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 801a334:	b480      	push	{r7}
 801a336:	b083      	sub	sp, #12
 801a338:	af00      	add	r7, sp, #0
 801a33a:	6078      	str	r0, [r7, #4]
 801a33c:	bf00      	nop
 801a33e:	370c      	adds	r7, #12
 801a340:	46bd      	mov	sp, r7
 801a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a346:	4770      	bx	lr

0801a348 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 801a348:	b480      	push	{r7}
 801a34a:	b083      	sub	sp, #12
 801a34c:	af00      	add	r7, sp, #0
 801a34e:	6078      	str	r0, [r7, #4]
 801a350:	bf00      	nop
 801a352:	370c      	adds	r7, #12
 801a354:	46bd      	mov	sp, r7
 801a356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a35a:	4770      	bx	lr

0801a35c <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 801a35c:	b480      	push	{r7}
 801a35e:	b083      	sub	sp, #12
 801a360:	af00      	add	r7, sp, #0
 801a362:	6078      	str	r0, [r7, #4]
 801a364:	bf00      	nop
 801a366:	370c      	adds	r7, #12
 801a368:	46bd      	mov	sp, r7
 801a36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a36e:	4770      	bx	lr

0801a370 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 801a370:	b480      	push	{r7}
 801a372:	b083      	sub	sp, #12
 801a374:	af00      	add	r7, sp, #0
 801a376:	6078      	str	r0, [r7, #4]
 801a378:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 801a37a:	687b      	ldr	r3, [r7, #4]
 801a37c:	683a      	ldr	r2, [r7, #0]
 801a37e:	605a      	str	r2, [r3, #4]
    }
 801a380:	bf00      	nop
 801a382:	370c      	adds	r7, #12
 801a384:	46bd      	mov	sp, r7
 801a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a38a:	4770      	bx	lr

0801a38c <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication() :
 801a38c:	b580      	push	{r7, lr}
 801a38e:	b082      	sub	sp, #8
 801a390:	af00      	add	r7, sp, #0
 801a392:	6078      	str	r0, [r7, #4]
        pendingScreenTransitionCallback(0)
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	4618      	mov	r0, r3
 801a398:	f004 fb02 	bl	801e9a0 <_ZN8touchgfx11ApplicationC1Ev>
 801a39c:	4a09      	ldr	r2, [pc, #36]	; (801a3c4 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	601a      	str	r2, [r3, #0]
 801a3a2:	687b      	ldr	r3, [r7, #4]
 801a3a4:	2200      	movs	r2, #0
 801a3a6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 801a3aa:	687b      	ldr	r3, [r7, #4]
 801a3ac:	2200      	movs	r2, #0
 801a3ae:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        instance = this;
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	4a04      	ldr	r2, [pc, #16]	; (801a3c8 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 801a3b6:	6013      	str	r3, [r2, #0]
    }
 801a3b8:	687b      	ldr	r3, [r7, #4]
 801a3ba:	4618      	mov	r0, r3
 801a3bc:	3708      	adds	r7, #8
 801a3be:	46bd      	mov	sp, r7
 801a3c0:	bd80      	pop	{r7, pc}
 801a3c2:	bf00      	nop
 801a3c4:	08024fd4 	.word	0x08024fd4
 801a3c8:	20009d94 	.word	0x20009d94

0801a3cc <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 801a3cc:	b580      	push	{r7, lr}
 801a3ce:	b084      	sub	sp, #16
 801a3d0:	af00      	add	r7, sp, #0
 801a3d2:	60f8      	str	r0, [r7, #12]
 801a3d4:	60b9      	str	r1, [r7, #8]
 801a3d6:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 801a3d8:	f004 fac0 	bl	801e95c <_ZN8touchgfx11Application11getInstanceEv>
 801a3dc:	4603      	mov	r3, r0
 801a3de:	4618      	mov	r0, r3
 801a3e0:	f004 fac2 	bl	801e968 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	681b      	ldr	r3, [r3, #0]
 801a3e8:	2b00      	cmp	r3, #0
 801a3ea:	d008      	beq.n	801a3fe <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 801a3ec:	687b      	ldr	r3, [r7, #4]
 801a3ee:	681a      	ldr	r2, [r3, #0]
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	681b      	ldr	r3, [r3, #0]
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	330c      	adds	r3, #12
 801a3f8:	681b      	ldr	r3, [r3, #0]
 801a3fa:	4610      	mov	r0, r2
 801a3fc:	4798      	blx	r3
    }
    if (*currentTrans)
 801a3fe:	687b      	ldr	r3, [r7, #4]
 801a400:	681b      	ldr	r3, [r3, #0]
 801a402:	2b00      	cmp	r3, #0
 801a404:	d007      	beq.n	801a416 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	681a      	ldr	r2, [r3, #0]
 801a40a:	687b      	ldr	r3, [r7, #4]
 801a40c:	681b      	ldr	r3, [r3, #0]
 801a40e:	681b      	ldr	r3, [r3, #0]
 801a410:	681b      	ldr	r3, [r3, #0]
 801a412:	4610      	mov	r0, r2
 801a414:	4798      	blx	r3
    }
    if (*currentScreen)
 801a416:	68fb      	ldr	r3, [r7, #12]
 801a418:	681b      	ldr	r3, [r3, #0]
 801a41a:	2b00      	cmp	r3, #0
 801a41c:	d008      	beq.n	801a430 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 801a41e:	68fb      	ldr	r3, [r7, #12]
 801a420:	681a      	ldr	r2, [r3, #0]
 801a422:	68fb      	ldr	r3, [r7, #12]
 801a424:	681b      	ldr	r3, [r3, #0]
 801a426:	681b      	ldr	r3, [r3, #0]
 801a428:	3314      	adds	r3, #20
 801a42a:	681b      	ldr	r3, [r3, #0]
 801a42c:	4610      	mov	r0, r2
 801a42e:	4798      	blx	r3
    }
    if (*currentPresenter)
 801a430:	68bb      	ldr	r3, [r7, #8]
 801a432:	681b      	ldr	r3, [r3, #0]
 801a434:	2b00      	cmp	r3, #0
 801a436:	d008      	beq.n	801a44a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 801a438:	68bb      	ldr	r3, [r7, #8]
 801a43a:	681a      	ldr	r2, [r3, #0]
 801a43c:	68bb      	ldr	r3, [r7, #8]
 801a43e:	681b      	ldr	r3, [r3, #0]
 801a440:	681b      	ldr	r3, [r3, #0]
 801a442:	3304      	adds	r3, #4
 801a444:	681b      	ldr	r3, [r3, #0]
 801a446:	4610      	mov	r0, r2
 801a448:	4798      	blx	r3
    }
    if (*currentScreen)
 801a44a:	68fb      	ldr	r3, [r7, #12]
 801a44c:	681b      	ldr	r3, [r3, #0]
 801a44e:	2b00      	cmp	r3, #0
 801a450:	d007      	beq.n	801a462 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 801a452:	68fb      	ldr	r3, [r7, #12]
 801a454:	681a      	ldr	r2, [r3, #0]
 801a456:	68fb      	ldr	r3, [r7, #12]
 801a458:	681b      	ldr	r3, [r3, #0]
 801a45a:	681b      	ldr	r3, [r3, #0]
 801a45c:	681b      	ldr	r3, [r3, #0]
 801a45e:	4610      	mov	r0, r2
 801a460:	4798      	blx	r3
    }
    if (*currentPresenter)
 801a462:	68bb      	ldr	r3, [r7, #8]
 801a464:	681b      	ldr	r3, [r3, #0]
 801a466:	2b00      	cmp	r3, #0
 801a468:	d008      	beq.n	801a47c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 801a46a:	68bb      	ldr	r3, [r7, #8]
 801a46c:	681a      	ldr	r2, [r3, #0]
 801a46e:	68bb      	ldr	r3, [r7, #8]
 801a470:	681b      	ldr	r3, [r3, #0]
 801a472:	681b      	ldr	r3, [r3, #0]
 801a474:	3308      	adds	r3, #8
 801a476:	681b      	ldr	r3, [r3, #0]
 801a478:	4610      	mov	r0, r2
 801a47a:	4798      	blx	r3
    }
}
 801a47c:	bf00      	nop
 801a47e:	3710      	adds	r7, #16
 801a480:	46bd      	mov	sp, r7
 801a482:	bd80      	pop	{r7, pc}

0801a484 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 801a484:	b580      	push	{r7, lr}
 801a486:	b084      	sub	sp, #16
 801a488:	af00      	add	r7, sp, #0
 801a48a:	60f8      	str	r0, [r7, #12]
 801a48c:	60b9      	str	r1, [r7, #8]
 801a48e:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 801a490:	68fb      	ldr	r3, [r7, #12]
 801a492:	681b      	ldr	r3, [r3, #0]
 801a494:	330c      	adds	r3, #12
 801a496:	681b      	ldr	r3, [r3, #0]
 801a498:	68f8      	ldr	r0, [r7, #12]
 801a49a:	4798      	blx	r3
    newPresenter->activate();
 801a49c:	68bb      	ldr	r3, [r7, #8]
 801a49e:	681b      	ldr	r3, [r3, #0]
 801a4a0:	681b      	ldr	r3, [r3, #0]
 801a4a2:	68b8      	ldr	r0, [r7, #8]
 801a4a4:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 801a4a6:	6879      	ldr	r1, [r7, #4]
 801a4a8:	68f8      	ldr	r0, [r7, #12]
 801a4aa:	f005 fa65 	bl	801f978 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 801a4ae:	687b      	ldr	r3, [r7, #4]
 801a4b0:	681b      	ldr	r3, [r3, #0]
 801a4b2:	3310      	adds	r3, #16
 801a4b4:	681b      	ldr	r3, [r3, #0]
 801a4b6:	6878      	ldr	r0, [r7, #4]
 801a4b8:	4798      	blx	r3

    Application::getInstance()->draw();
 801a4ba:	f004 fa4f 	bl	801e95c <_ZN8touchgfx11Application11getInstanceEv>
 801a4be:	4603      	mov	r3, r0
 801a4c0:	681a      	ldr	r2, [r3, #0]
 801a4c2:	3228      	adds	r2, #40	; 0x28
 801a4c4:	6812      	ldr	r2, [r2, #0]
 801a4c6:	4618      	mov	r0, r3
 801a4c8:	4790      	blx	r2
}
 801a4ca:	bf00      	nop
 801a4cc:	3710      	adds	r7, #16
 801a4ce:	46bd      	mov	sp, r7
 801a4d0:	bd80      	pop	{r7, pc}

0801a4d2 <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 801a4d2:	b480      	push	{r7}
 801a4d4:	b083      	sub	sp, #12
 801a4d6:	af00      	add	r7, sp, #0
 801a4d8:	6078      	str	r0, [r7, #4]
 801a4da:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	683a      	ldr	r2, [r7, #0]
 801a4e0:	601a      	str	r2, [r3, #0]
    }
 801a4e2:	bf00      	nop
 801a4e4:	370c      	adds	r7, #12
 801a4e6:	46bd      	mov	sp, r7
 801a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a4ec:	4770      	bx	lr
	...

0801a4f0 <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 801a4f0:	b580      	push	{r7, lr}
 801a4f2:	b082      	sub	sp, #8
 801a4f4:	af00      	add	r7, sp, #0
 801a4f6:	6078      	str	r0, [r7, #4]
 801a4f8:	687b      	ldr	r3, [r7, #4]
 801a4fa:	4618      	mov	r0, r3
 801a4fc:	f7ff fee4 	bl	801a2c8 <_ZN8touchgfx10TransitionC1Ev>
 801a500:	4a03      	ldr	r2, [pc, #12]	; (801a510 <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 801a502:	687b      	ldr	r3, [r7, #4]
 801a504:	601a      	str	r2, [r3, #0]
 801a506:	687b      	ldr	r3, [r7, #4]
 801a508:	4618      	mov	r0, r3
 801a50a:	3708      	adds	r7, #8
 801a50c:	46bd      	mov	sp, r7
 801a50e:	bd80      	pop	{r7, pc}
 801a510:	080252a8 	.word	0x080252a8

0801a514 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 801a514:	b580      	push	{r7, lr}
 801a516:	b082      	sub	sp, #8
 801a518:	af00      	add	r7, sp, #0
 801a51a:	6078      	str	r0, [r7, #4]
 801a51c:	4a05      	ldr	r2, [pc, #20]	; (801a534 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	601a      	str	r2, [r3, #0]
 801a522:	687b      	ldr	r3, [r7, #4]
 801a524:	4618      	mov	r0, r3
 801a526:	f7ff fee5 	bl	801a2f4 <_ZN8touchgfx10TransitionD1Ev>
 801a52a:	687b      	ldr	r3, [r7, #4]
 801a52c:	4618      	mov	r0, r3
 801a52e:	3708      	adds	r7, #8
 801a530:	46bd      	mov	sp, r7
 801a532:	bd80      	pop	{r7, pc}
 801a534:	080252a8 	.word	0x080252a8

0801a538 <_ZN8touchgfx12NoTransitionD0Ev>:
 801a538:	b580      	push	{r7, lr}
 801a53a:	b082      	sub	sp, #8
 801a53c:	af00      	add	r7, sp, #0
 801a53e:	6078      	str	r0, [r7, #4]
 801a540:	6878      	ldr	r0, [r7, #4]
 801a542:	f7ff ffe7 	bl	801a514 <_ZN8touchgfx12NoTransitionD1Ev>
 801a546:	210c      	movs	r1, #12
 801a548:	6878      	ldr	r0, [r7, #4]
 801a54a:	f008 f81f 	bl	802258c <_ZdlPvj>
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	4618      	mov	r0, r3
 801a552:	3708      	adds	r7, #8
 801a554:	46bd      	mov	sp, r7
 801a556:	bd80      	pop	{r7, pc}

0801a558 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 801a558:	b480      	push	{r7}
 801a55a:	b083      	sub	sp, #12
 801a55c:	af00      	add	r7, sp, #0
 801a55e:	6078      	str	r0, [r7, #4]
    {
        done = true;
 801a560:	687b      	ldr	r3, [r7, #4]
 801a562:	2201      	movs	r2, #1
 801a564:	721a      	strb	r2, [r3, #8]
    }
 801a566:	bf00      	nop
 801a568:	370c      	adds	r7, #12
 801a56a:	46bd      	mov	sp, r7
 801a56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a570:	4770      	bx	lr

0801a572 <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 801a572:	b480      	push	{r7}
 801a574:	b083      	sub	sp, #12
 801a576:	af00      	add	r7, sp, #0
 801a578:	6078      	str	r0, [r7, #4]
 801a57a:	6039      	str	r1, [r7, #0]
    {
        model = m;
 801a57c:	687b      	ldr	r3, [r7, #4]
 801a57e:	683a      	ldr	r2, [r7, #0]
 801a580:	605a      	str	r2, [r3, #4]
    }
 801a582:	bf00      	nop
 801a584:	370c      	adds	r7, #12
 801a586:	46bd      	mov	sp, r7
 801a588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a58c:	4770      	bx	lr
	...

0801a590 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;


FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 801a590:	b580      	push	{r7, lr}
 801a592:	b084      	sub	sp, #16
 801a594:	af00      	add	r7, sp, #0
 801a596:	60f8      	str	r0, [r7, #12]
 801a598:	60b9      	str	r1, [r7, #8]
 801a59a:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 801a59c:	68fb      	ldr	r3, [r7, #12]
 801a59e:	4618      	mov	r0, r3
 801a5a0:	f7ff fef4 	bl	801a38c <_ZN8touchgfx14MVPApplicationC1Ev>
 801a5a4:	4a0c      	ldr	r2, [pc, #48]	; (801a5d8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>)
 801a5a6:	68fb      	ldr	r3, [r7, #12]
 801a5a8:	601a      	str	r2, [r3, #0]
 801a5aa:	68fb      	ldr	r3, [r7, #12]
 801a5ac:	f503 739c 	add.w	r3, r3, #312	; 0x138
 801a5b0:	4618      	mov	r0, r3
 801a5b2:	f000 f91d 	bl	801a7f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 801a5b6:	68fb      	ldr	r3, [r7, #12]
 801a5b8:	687a      	ldr	r2, [r7, #4]
 801a5ba:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 801a5be:	68fb      	ldr	r3, [r7, #12]
 801a5c0:	68ba      	ldr	r2, [r7, #8]
 801a5c2:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    Texts::setLanguage(GB);
 801a5c6:	2000      	movs	r0, #0
 801a5c8:	f002 fa88 	bl	801cadc <_ZN8touchgfx5Texts11setLanguageEt>
}
 801a5cc:	68fb      	ldr	r3, [r7, #12]
 801a5ce:	4618      	mov	r0, r3
 801a5d0:	3710      	adds	r7, #16
 801a5d2:	46bd      	mov	sp, r7
 801a5d4:	bd80      	pop	{r7, pc}
 801a5d6:	bf00      	nop
 801a5d8:	08024f80 	.word	0x08024f80

0801a5dc <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 801a5dc:	b480      	push	{r7}
 801a5de:	b083      	sub	sp, #12
 801a5e0:	af00      	add	r7, sp, #0
 801a5e2:	6078      	str	r0, [r7, #4]
 801a5e4:	6039      	str	r1, [r7, #0]
 801a5e6:	687b      	ldr	r3, [r7, #4]
 801a5e8:	4618      	mov	r0, r3
 801a5ea:	370c      	adds	r7, #12
 801a5ec:	46bd      	mov	sp, r7
 801a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a5f2:	4770      	bx	lr

0801a5f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 801a5f4:	b580      	push	{r7, lr}
 801a5f6:	b082      	sub	sp, #8
 801a5f8:	af00      	add	r7, sp, #0
 801a5fa:	6078      	str	r0, [r7, #4]
 801a5fc:	6039      	str	r1, [r7, #0]
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	683a      	ldr	r2, [r7, #0]
 801a602:	4611      	mov	r1, r2
 801a604:	4618      	mov	r0, r3
 801a606:	f7ff ffe9 	bl	801a5dc <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 801a60a:	683b      	ldr	r3, [r7, #0]
 801a60c:	685a      	ldr	r2, [r3, #4]
 801a60e:	687b      	ldr	r3, [r7, #4]
 801a610:	605a      	str	r2, [r3, #4]
 801a612:	687b      	ldr	r3, [r7, #4]
 801a614:	683a      	ldr	r2, [r7, #0]
 801a616:	3308      	adds	r3, #8
 801a618:	3208      	adds	r2, #8
 801a61a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a61e:	e883 0003 	stmia.w	r3, {r0, r1}
 801a622:	687b      	ldr	r3, [r7, #4]
 801a624:	4618      	mov	r0, r3
 801a626:	3708      	adds	r7, #8
 801a628:	46bd      	mov	sp, r7
 801a62a:	bd80      	pop	{r7, pc}

0801a62c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 * Screen Transition Declarations
 */
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 801a62c:	b590      	push	{r4, r7, lr}
 801a62e:	b089      	sub	sp, #36	; 0x24
 801a630:	af00      	add	r7, sp, #0
 801a632:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	f503 749c 	add.w	r4, r3, #312	; 0x138
 801a63a:	4b10      	ldr	r3, [pc, #64]	; (801a67c <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 801a63c:	61bb      	str	r3, [r7, #24]
 801a63e:	2300      	movs	r3, #0
 801a640:	61fb      	str	r3, [r7, #28]
 801a642:	f107 0008 	add.w	r0, r7, #8
 801a646:	f107 0318 	add.w	r3, r7, #24
 801a64a:	cb0c      	ldmia	r3, {r2, r3}
 801a64c:	6879      	ldr	r1, [r7, #4]
 801a64e:	f000 f8eb 	bl	801a828 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 801a652:	f107 0308 	add.w	r3, r7, #8
 801a656:	4619      	mov	r1, r3
 801a658:	4620      	mov	r0, r4
 801a65a:	f7ff ffcb 	bl	801a5f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 801a65e:	f107 0308 	add.w	r3, r7, #8
 801a662:	4618      	mov	r0, r3
 801a664:	f7fb f80c 	bl	8015680 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 801a668:	687b      	ldr	r3, [r7, #4]
 801a66a:	f503 729c 	add.w	r2, r3, #312	; 0x138
 801a66e:	687b      	ldr	r3, [r7, #4]
 801a670:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 801a674:	bf00      	nop
 801a676:	3724      	adds	r7, #36	; 0x24
 801a678:	46bd      	mov	sp, r7
 801a67a:	bd90      	pop	{r4, r7, pc}
 801a67c:	0801a681 	.word	0x0801a681

0801a680 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 801a680:	b580      	push	{r7, lr}
 801a682:	b084      	sub	sp, #16
 801a684:	af02      	add	r7, sp, #8
 801a686:	6078      	str	r0, [r7, #4]
    makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801a688:	687b      	ldr	r3, [r7, #4]
 801a68a:	f503 7198 	add.w	r1, r3, #304	; 0x130
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 801a694:	461a      	mov	r2, r3
 801a696:	687b      	ldr	r3, [r7, #4]
 801a698:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801a69c:	9300      	str	r3, [sp, #0]
 801a69e:	4b04      	ldr	r3, [pc, #16]	; (801a6b0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 801a6a0:	4804      	ldr	r0, [pc, #16]	; (801a6b4 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 801a6a2:	f000 f8e1 	bl	801a868 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801a6a6:	bf00      	nop
 801a6a8:	3708      	adds	r7, #8
 801a6aa:	46bd      	mov	sp, r7
 801a6ac:	bd80      	pop	{r7, pc}
 801a6ae:	bf00      	nop
 801a6b0:	20009d90 	.word	0x20009d90
 801a6b4:	20009d8c 	.word	0x20009d8c

0801a6b8 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv>:


void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWest()
{
 801a6b8:	b590      	push	{r4, r7, lr}
 801a6ba:	b089      	sub	sp, #36	; 0x24
 801a6bc:	af00      	add	r7, sp, #0
 801a6be:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenSlideTransitionWestImpl);
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	f503 749c 	add.w	r4, r3, #312	; 0x138
 801a6c6:	4b10      	ldr	r3, [pc, #64]	; (801a708 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv+0x50>)
 801a6c8:	61bb      	str	r3, [r7, #24]
 801a6ca:	2300      	movs	r3, #0
 801a6cc:	61fb      	str	r3, [r7, #28]
 801a6ce:	f107 0008 	add.w	r0, r7, #8
 801a6d2:	f107 0318 	add.w	r3, r7, #24
 801a6d6:	cb0c      	ldmia	r3, {r2, r3}
 801a6d8:	6879      	ldr	r1, [r7, #4]
 801a6da:	f000 f8a5 	bl	801a828 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 801a6de:	f107 0308 	add.w	r3, r7, #8
 801a6e2:	4619      	mov	r1, r3
 801a6e4:	4620      	mov	r0, r4
 801a6e6:	f7ff ff85 	bl	801a5f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 801a6ea:	f107 0308 	add.w	r3, r7, #8
 801a6ee:	4618      	mov	r0, r3
 801a6f0:	f7fa ffc6 	bl	8015680 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 801a6f4:	687b      	ldr	r3, [r7, #4]
 801a6f6:	f503 729c 	add.w	r2, r3, #312	; 0x138
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 801a700:	bf00      	nop
 801a702:	3724      	adds	r7, #36	; 0x24
 801a704:	46bd      	mov	sp, r7
 801a706:	bd90      	pop	{r4, r7, pc}
 801a708:	0801a70d 	.word	0x0801a70d

0801a70c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWestImpl()
{
 801a70c:	b580      	push	{r7, lr}
 801a70e:	b084      	sub	sp, #16
 801a710:	af02      	add	r7, sp, #8
 801a712:	6078      	str	r0, [r7, #4]
    makeTransition<Screen1View, Screen1Presenter, touchgfx::SlideTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	f503 7198 	add.w	r1, r3, #304	; 0x130
 801a71a:	687b      	ldr	r3, [r7, #4]
 801a71c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 801a720:	461a      	mov	r2, r3
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801a728:	9300      	str	r3, [sp, #0]
 801a72a:	4b04      	ldr	r3, [pc, #16]	; (801a73c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x30>)
 801a72c:	4804      	ldr	r0, [pc, #16]	; (801a740 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x34>)
 801a72e:	f000 f947 	bl	801a9c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801a732:	bf00      	nop
 801a734:	3708      	adds	r7, #8
 801a736:	46bd      	mov	sp, r7
 801a738:	bd80      	pop	{r7, pc}
 801a73a:	bf00      	nop
 801a73c:	20009d90 	.word	0x20009d90
 801a740:	20009d8c 	.word	0x20009d8c

0801a744 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionWestEv>:

// Screen2

void FrontendApplicationBase::gotoScreen2ScreenSlideTransitionWest()
{
 801a744:	b590      	push	{r4, r7, lr}
 801a746:	b089      	sub	sp, #36	; 0x24
 801a748:	af00      	add	r7, sp, #0
 801a74a:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenSlideTransitionWestImpl);
 801a74c:	687b      	ldr	r3, [r7, #4]
 801a74e:	f503 749c 	add.w	r4, r3, #312	; 0x138
 801a752:	4b10      	ldr	r3, [pc, #64]	; (801a794 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionWestEv+0x50>)
 801a754:	61bb      	str	r3, [r7, #24]
 801a756:	2300      	movs	r3, #0
 801a758:	61fb      	str	r3, [r7, #28]
 801a75a:	f107 0008 	add.w	r0, r7, #8
 801a75e:	f107 0318 	add.w	r3, r7, #24
 801a762:	cb0c      	ldmia	r3, {r2, r3}
 801a764:	6879      	ldr	r1, [r7, #4]
 801a766:	f000 f85f 	bl	801a828 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 801a76a:	f107 0308 	add.w	r3, r7, #8
 801a76e:	4619      	mov	r1, r3
 801a770:	4620      	mov	r0, r4
 801a772:	f7ff ff3f 	bl	801a5f4 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 801a776:	f107 0308 	add.w	r3, r7, #8
 801a77a:	4618      	mov	r0, r3
 801a77c:	f7fa ff80 	bl	8015680 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 801a780:	687b      	ldr	r3, [r7, #4]
 801a782:	f503 729c 	add.w	r2, r3, #312	; 0x138
 801a786:	687b      	ldr	r3, [r7, #4]
 801a788:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 801a78c:	bf00      	nop
 801a78e:	3724      	adds	r7, #36	; 0x24
 801a790:	46bd      	mov	sp, r7
 801a792:	bd90      	pop	{r4, r7, pc}
 801a794:	0801a799 	.word	0x0801a799

0801a798 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionWestImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenSlideTransitionWestImpl()
{
 801a798:	b580      	push	{r7, lr}
 801a79a:	b084      	sub	sp, #16
 801a79c:	af02      	add	r7, sp, #8
 801a79e:	6078      	str	r0, [r7, #4]
    makeTransition<Screen2View, Screen2Presenter, touchgfx::SlideTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801a7a0:	687b      	ldr	r3, [r7, #4]
 801a7a2:	f503 7198 	add.w	r1, r3, #304	; 0x130
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 801a7ac:	461a      	mov	r2, r3
 801a7ae:	687b      	ldr	r3, [r7, #4]
 801a7b0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801a7b4:	9300      	str	r3, [sp, #0]
 801a7b6:	4b04      	ldr	r3, [pc, #16]	; (801a7c8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionWestImplEv+0x30>)
 801a7b8:	4804      	ldr	r0, [pc, #16]	; (801a7cc <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionWestImplEv+0x34>)
 801a7ba:	f000 f9ad 	bl	801ab18 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801a7be:	bf00      	nop
 801a7c0:	3708      	adds	r7, #8
 801a7c2:	46bd      	mov	sp, r7
 801a7c4:	bd80      	pop	{r7, pc}
 801a7c6:	bf00      	nop
 801a7c8:	20009d90 	.word	0x20009d90
 801a7cc:	20009d8c 	.word	0x20009d8c

0801a7d0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 801a7d0:	b480      	push	{r7}
 801a7d2:	b083      	sub	sp, #12
 801a7d4:	af00      	add	r7, sp, #0
 801a7d6:	6078      	str	r0, [r7, #4]
 801a7d8:	4a04      	ldr	r2, [pc, #16]	; (801a7ec <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	601a      	str	r2, [r3, #0]
 801a7de:	687b      	ldr	r3, [r7, #4]
 801a7e0:	4618      	mov	r0, r3
 801a7e2:	370c      	adds	r7, #12
 801a7e4:	46bd      	mov	sp, r7
 801a7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a7ea:	4770      	bx	lr
 801a7ec:	08025010 	.word	0x08025010

0801a7f0 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback() : pobject(0), pmemfun_0(0) { }
 801a7f0:	b580      	push	{r7, lr}
 801a7f2:	b082      	sub	sp, #8
 801a7f4:	af00      	add	r7, sp, #0
 801a7f6:	6078      	str	r0, [r7, #4]
 801a7f8:	687b      	ldr	r3, [r7, #4]
 801a7fa:	4618      	mov	r0, r3
 801a7fc:	f7ff ffe8 	bl	801a7d0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801a800:	4a08      	ldr	r2, [pc, #32]	; (801a824 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 801a802:	687b      	ldr	r3, [r7, #4]
 801a804:	601a      	str	r2, [r3, #0]
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	2200      	movs	r2, #0
 801a80a:	605a      	str	r2, [r3, #4]
 801a80c:	687b      	ldr	r3, [r7, #4]
 801a80e:	2200      	movs	r2, #0
 801a810:	609a      	str	r2, [r3, #8]
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	2200      	movs	r2, #0
 801a816:	60da      	str	r2, [r3, #12]
 801a818:	687b      	ldr	r3, [r7, #4]
 801a81a:	4618      	mov	r0, r3
 801a81c:	3708      	adds	r7, #8
 801a81e:	46bd      	mov	sp, r7
 801a820:	bd80      	pop	{r7, pc}
 801a822:	bf00      	nop
 801a824:	08024fbc 	.word	0x08024fbc

0801a828 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 801a828:	b580      	push	{r7, lr}
 801a82a:	b084      	sub	sp, #16
 801a82c:	af00      	add	r7, sp, #0
 801a82e:	60f8      	str	r0, [r7, #12]
 801a830:	60b9      	str	r1, [r7, #8]
 801a832:	4639      	mov	r1, r7
 801a834:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 801a838:	68fb      	ldr	r3, [r7, #12]
 801a83a:	4618      	mov	r0, r3
 801a83c:	f7ff ffc8 	bl	801a7d0 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801a840:	4a08      	ldr	r2, [pc, #32]	; (801a864 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 801a842:	68fb      	ldr	r3, [r7, #12]
 801a844:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801a846:	68fb      	ldr	r3, [r7, #12]
 801a848:	68ba      	ldr	r2, [r7, #8]
 801a84a:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 801a84c:	68fb      	ldr	r3, [r7, #12]
 801a84e:	3308      	adds	r3, #8
 801a850:	463a      	mov	r2, r7
 801a852:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a856:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801a85a:	68fb      	ldr	r3, [r7, #12]
 801a85c:	4618      	mov	r0, r3
 801a85e:	3710      	adds	r7, #16
 801a860:	46bd      	mov	sp, r7
 801a862:	bd80      	pop	{r7, pc}
 801a864:	08024fbc 	.word	0x08024fbc

0801a868 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 801a868:	b590      	push	{r4, r7, lr}
 801a86a:	b089      	sub	sp, #36	; 0x24
 801a86c:	af00      	add	r7, sp, #0
 801a86e:	60f8      	str	r0, [r7, #12]
 801a870:	60b9      	str	r1, [r7, #8]
 801a872:	607a      	str	r2, [r7, #4]
 801a874:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	689a      	ldr	r2, [r3, #8]
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	689b      	ldr	r3, [r3, #8]
 801a87e:	681b      	ldr	r3, [r3, #0]
 801a880:	3320      	adds	r3, #32
 801a882:	681b      	ldr	r3, [r3, #0]
 801a884:	4610      	mov	r0, r2
 801a886:	4798      	blx	r3
 801a888:	4603      	mov	r3, r0
 801a88a:	f5b3 7f09 	cmp.w	r3, #548	; 0x224
 801a88e:	d205      	bcs.n	801a89c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 801a890:	4b46      	ldr	r3, [pc, #280]	; (801a9ac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 801a892:	4a47      	ldr	r2, [pc, #284]	; (801a9b0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 801a894:	21c2      	movs	r1, #194	; 0xc2
 801a896:	4847      	ldr	r0, [pc, #284]	; (801a9b4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 801a898:	f007 fea6 	bl	80225e8 <__assert_func>
 801a89c:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801a89e:	687b      	ldr	r3, [r7, #4]
 801a8a0:	685a      	ldr	r2, [r3, #4]
 801a8a2:	687b      	ldr	r3, [r7, #4]
 801a8a4:	685b      	ldr	r3, [r3, #4]
 801a8a6:	681b      	ldr	r3, [r3, #0]
 801a8a8:	3320      	adds	r3, #32
 801a8aa:	681b      	ldr	r3, [r3, #0]
 801a8ac:	4610      	mov	r0, r2
 801a8ae:	4798      	blx	r3
 801a8b0:	4603      	mov	r3, r0
 801a8b2:	2b0f      	cmp	r3, #15
 801a8b4:	d805      	bhi.n	801a8c2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 801a8b6:	4b40      	ldr	r3, [pc, #256]	; (801a9b8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 801a8b8:	4a3d      	ldr	r2, [pc, #244]	; (801a9b0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 801a8ba:	21c3      	movs	r1, #195	; 0xc3
 801a8bc:	483d      	ldr	r0, [pc, #244]	; (801a9b4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 801a8be:	f007 fe93 	bl	80225e8 <__assert_func>
 801a8c2:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801a8c4:	687b      	ldr	r3, [r7, #4]
 801a8c6:	68da      	ldr	r2, [r3, #12]
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	68db      	ldr	r3, [r3, #12]
 801a8cc:	681b      	ldr	r3, [r3, #0]
 801a8ce:	3320      	adds	r3, #32
 801a8d0:	681b      	ldr	r3, [r3, #0]
 801a8d2:	4610      	mov	r0, r2
 801a8d4:	4798      	blx	r3
 801a8d6:	4603      	mov	r3, r0
 801a8d8:	2b0b      	cmp	r3, #11
 801a8da:	d805      	bhi.n	801a8e8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 801a8dc:	4b37      	ldr	r3, [pc, #220]	; (801a9bc <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 801a8de:	4a34      	ldr	r2, [pc, #208]	; (801a9b0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 801a8e0:	21c4      	movs	r1, #196	; 0xc4
 801a8e2:	4834      	ldr	r0, [pc, #208]	; (801a9b4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 801a8e4:	f007 fe80 	bl	80225e8 <__assert_func>
 801a8e8:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 801a8ea:	683a      	ldr	r2, [r7, #0]
 801a8ec:	68b9      	ldr	r1, [r7, #8]
 801a8ee:	68f8      	ldr	r0, [r7, #12]
 801a8f0:	f7ff fd6c 	bl	801a3cc <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	68db      	ldr	r3, [r3, #12]
 801a8f8:	2100      	movs	r1, #0
 801a8fa:	4618      	mov	r0, r3
 801a8fc:	f000 f9b8 	bl	801ac70 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 801a900:	4603      	mov	r3, r0
 801a902:	4619      	mov	r1, r3
 801a904:	200c      	movs	r0, #12
 801a906:	f7ff fcd3 	bl	801a2b0 <_ZnwjPv>
 801a90a:	4604      	mov	r4, r0
 801a90c:	4620      	mov	r0, r4
 801a90e:	f7ff fdef 	bl	801a4f0 <_ZN8touchgfx12NoTransitionC1Ev>
 801a912:	61fc      	str	r4, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	689b      	ldr	r3, [r3, #8]
 801a918:	2100      	movs	r1, #0
 801a91a:	4618      	mov	r0, r3
 801a91c:	f000 f9bb 	bl	801ac96 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 801a920:	4603      	mov	r3, r0
 801a922:	4619      	mov	r1, r3
 801a924:	f44f 7009 	mov.w	r0, #548	; 0x224
 801a928:	f7ff fcc2 	bl	801a2b0 <_ZnwjPv>
 801a92c:	4604      	mov	r4, r0
 801a92e:	4620      	mov	r0, r4
 801a930:	f002 faa8 	bl	801ce84 <_ZN11Screen1ViewC1Ev>
 801a934:	61bc      	str	r4, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 801a936:	687b      	ldr	r3, [r7, #4]
 801a938:	685b      	ldr	r3, [r3, #4]
 801a93a:	2100      	movs	r1, #0
 801a93c:	4618      	mov	r0, r3
 801a93e:	f000 f9bd 	bl	801acbc <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 801a942:	4603      	mov	r3, r0
 801a944:	4619      	mov	r1, r3
 801a946:	2010      	movs	r0, #16
 801a948:	f7ff fcb2 	bl	801a2b0 <_ZnwjPv>
 801a94c:	4604      	mov	r4, r0
 801a94e:	69b9      	ldr	r1, [r7, #24]
 801a950:	4620      	mov	r0, r4
 801a952:	f002 fa2f 	bl	801cdb4 <_ZN16Screen1PresenterC1ER11Screen1View>
 801a956:	617c      	str	r4, [r7, #20]
    *currentTrans = newTransition;
 801a958:	683b      	ldr	r3, [r7, #0]
 801a95a:	69fa      	ldr	r2, [r7, #28]
 801a95c:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 801a95e:	68bb      	ldr	r3, [r7, #8]
 801a960:	697a      	ldr	r2, [r7, #20]
 801a962:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801a964:	68fb      	ldr	r3, [r7, #12]
 801a966:	69ba      	ldr	r2, [r7, #24]
 801a968:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 801a96a:	697b      	ldr	r3, [r7, #20]
 801a96c:	2b00      	cmp	r3, #0
 801a96e:	d002      	beq.n	801a976 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 801a970:	697b      	ldr	r3, [r7, #20]
 801a972:	3304      	adds	r3, #4
 801a974:	e000      	b.n	801a978 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x110>
 801a976:	2300      	movs	r3, #0
 801a978:	4619      	mov	r1, r3
 801a97a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a97c:	f7ff fda9 	bl	801a4d2 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 801a980:	697b      	ldr	r3, [r7, #20]
 801a982:	3304      	adds	r3, #4
 801a984:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a986:	4618      	mov	r0, r3
 801a988:	f7ff fdf3 	bl	801a572 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 801a98c:	69bb      	ldr	r3, [r7, #24]
 801a98e:	6979      	ldr	r1, [r7, #20]
 801a990:	4618      	mov	r0, r3
 801a992:	f000 f9a6 	bl	801ace2 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 801a996:	69fa      	ldr	r2, [r7, #28]
 801a998:	6979      	ldr	r1, [r7, #20]
 801a99a:	69b8      	ldr	r0, [r7, #24]
 801a99c:	f7ff fd72 	bl	801a484 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 801a9a0:	697b      	ldr	r3, [r7, #20]
}
 801a9a2:	4618      	mov	r0, r3
 801a9a4:	3724      	adds	r7, #36	; 0x24
 801a9a6:	46bd      	mov	sp, r7
 801a9a8:	bd90      	pop	{r4, r7, pc}
 801a9aa:	bf00      	nop
 801a9ac:	08023f8c 	.word	0x08023f8c
 801a9b0:	0802401c 	.word	0x0802401c
 801a9b4:	08024120 	.word	0x08024120
 801a9b8:	08024194 	.word	0x08024194
 801a9bc:	08024238 	.word	0x08024238

0801a9c0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 801a9c0:	b590      	push	{r4, r7, lr}
 801a9c2:	b089      	sub	sp, #36	; 0x24
 801a9c4:	af00      	add	r7, sp, #0
 801a9c6:	60f8      	str	r0, [r7, #12]
 801a9c8:	60b9      	str	r1, [r7, #8]
 801a9ca:	607a      	str	r2, [r7, #4]
 801a9cc:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	689a      	ldr	r2, [r3, #8]
 801a9d2:	687b      	ldr	r3, [r7, #4]
 801a9d4:	689b      	ldr	r3, [r3, #8]
 801a9d6:	681b      	ldr	r3, [r3, #0]
 801a9d8:	3320      	adds	r3, #32
 801a9da:	681b      	ldr	r3, [r3, #0]
 801a9dc:	4610      	mov	r0, r2
 801a9de:	4798      	blx	r3
 801a9e0:	4603      	mov	r3, r0
 801a9e2:	f5b3 7f09 	cmp.w	r3, #548	; 0x224
 801a9e6:	d205      	bcs.n	801a9f4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 801a9e8:	4b46      	ldr	r3, [pc, #280]	; (801ab04 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 801a9ea:	4a47      	ldr	r2, [pc, #284]	; (801ab08 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 801a9ec:	21c2      	movs	r1, #194	; 0xc2
 801a9ee:	4847      	ldr	r0, [pc, #284]	; (801ab0c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 801a9f0:	f007 fdfa 	bl	80225e8 <__assert_func>
 801a9f4:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801a9f6:	687b      	ldr	r3, [r7, #4]
 801a9f8:	685a      	ldr	r2, [r3, #4]
 801a9fa:	687b      	ldr	r3, [r7, #4]
 801a9fc:	685b      	ldr	r3, [r3, #4]
 801a9fe:	681b      	ldr	r3, [r3, #0]
 801aa00:	3320      	adds	r3, #32
 801aa02:	681b      	ldr	r3, [r3, #0]
 801aa04:	4610      	mov	r0, r2
 801aa06:	4798      	blx	r3
 801aa08:	4603      	mov	r3, r0
 801aa0a:	2b0f      	cmp	r3, #15
 801aa0c:	d805      	bhi.n	801aa1a <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 801aa0e:	4b40      	ldr	r3, [pc, #256]	; (801ab10 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 801aa10:	4a3d      	ldr	r2, [pc, #244]	; (801ab08 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 801aa12:	21c3      	movs	r1, #195	; 0xc3
 801aa14:	483d      	ldr	r0, [pc, #244]	; (801ab0c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 801aa16:	f007 fde7 	bl	80225e8 <__assert_func>
 801aa1a:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801aa1c:	687b      	ldr	r3, [r7, #4]
 801aa1e:	68da      	ldr	r2, [r3, #12]
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	68db      	ldr	r3, [r3, #12]
 801aa24:	681b      	ldr	r3, [r3, #0]
 801aa26:	3320      	adds	r3, #32
 801aa28:	681b      	ldr	r3, [r3, #0]
 801aa2a:	4610      	mov	r0, r2
 801aa2c:	4798      	blx	r3
 801aa2e:	4603      	mov	r3, r0
 801aa30:	2b57      	cmp	r3, #87	; 0x57
 801aa32:	d805      	bhi.n	801aa40 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 801aa34:	4b37      	ldr	r3, [pc, #220]	; (801ab14 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 801aa36:	4a34      	ldr	r2, [pc, #208]	; (801ab08 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 801aa38:	21c4      	movs	r1, #196	; 0xc4
 801aa3a:	4834      	ldr	r0, [pc, #208]	; (801ab0c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 801aa3c:	f007 fdd4 	bl	80225e8 <__assert_func>
 801aa40:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 801aa42:	683a      	ldr	r2, [r7, #0]
 801aa44:	68b9      	ldr	r1, [r7, #8]
 801aa46:	68f8      	ldr	r0, [r7, #12]
 801aa48:	f7ff fcc0 	bl	801a3cc <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	68db      	ldr	r3, [r3, #12]
 801aa50:	2100      	movs	r1, #0
 801aa52:	4618      	mov	r0, r3
 801aa54:	f000 f953 	bl	801acfe <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>
 801aa58:	4603      	mov	r3, r0
 801aa5a:	4619      	mov	r1, r3
 801aa5c:	2058      	movs	r0, #88	; 0x58
 801aa5e:	f7ff fc27 	bl	801a2b0 <_ZnwjPv>
 801aa62:	4604      	mov	r4, r0
 801aa64:	2114      	movs	r1, #20
 801aa66:	4620      	mov	r0, r4
 801aa68:	f000 f97e 	bl	801ad68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>
 801aa6c:	61fc      	str	r4, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801aa6e:	687b      	ldr	r3, [r7, #4]
 801aa70:	689b      	ldr	r3, [r3, #8]
 801aa72:	2100      	movs	r1, #0
 801aa74:	4618      	mov	r0, r3
 801aa76:	f000 f90e 	bl	801ac96 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 801aa7a:	4603      	mov	r3, r0
 801aa7c:	4619      	mov	r1, r3
 801aa7e:	f44f 7009 	mov.w	r0, #548	; 0x224
 801aa82:	f7ff fc15 	bl	801a2b0 <_ZnwjPv>
 801aa86:	4604      	mov	r4, r0
 801aa88:	4620      	mov	r0, r4
 801aa8a:	f002 f9fb 	bl	801ce84 <_ZN11Screen1ViewC1Ev>
 801aa8e:	61bc      	str	r4, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 801aa90:	687b      	ldr	r3, [r7, #4]
 801aa92:	685b      	ldr	r3, [r3, #4]
 801aa94:	2100      	movs	r1, #0
 801aa96:	4618      	mov	r0, r3
 801aa98:	f000 f910 	bl	801acbc <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 801aa9c:	4603      	mov	r3, r0
 801aa9e:	4619      	mov	r1, r3
 801aaa0:	2010      	movs	r0, #16
 801aaa2:	f7ff fc05 	bl	801a2b0 <_ZnwjPv>
 801aaa6:	4604      	mov	r4, r0
 801aaa8:	69b9      	ldr	r1, [r7, #24]
 801aaaa:	4620      	mov	r0, r4
 801aaac:	f002 f982 	bl	801cdb4 <_ZN16Screen1PresenterC1ER11Screen1View>
 801aab0:	617c      	str	r4, [r7, #20]
    *currentTrans = newTransition;
 801aab2:	683b      	ldr	r3, [r7, #0]
 801aab4:	69fa      	ldr	r2, [r7, #28]
 801aab6:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 801aab8:	68bb      	ldr	r3, [r7, #8]
 801aaba:	697a      	ldr	r2, [r7, #20]
 801aabc:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801aabe:	68fb      	ldr	r3, [r7, #12]
 801aac0:	69ba      	ldr	r2, [r7, #24]
 801aac2:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 801aac4:	697b      	ldr	r3, [r7, #20]
 801aac6:	2b00      	cmp	r3, #0
 801aac8:	d002      	beq.n	801aad0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x110>
 801aaca:	697b      	ldr	r3, [r7, #20]
 801aacc:	3304      	adds	r3, #4
 801aace:	e000      	b.n	801aad2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
 801aad0:	2300      	movs	r3, #0
 801aad2:	4619      	mov	r1, r3
 801aad4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801aad6:	f7ff fcfc 	bl	801a4d2 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 801aada:	697b      	ldr	r3, [r7, #20]
 801aadc:	3304      	adds	r3, #4
 801aade:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801aae0:	4618      	mov	r0, r3
 801aae2:	f7ff fd46 	bl	801a572 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 801aae6:	69bb      	ldr	r3, [r7, #24]
 801aae8:	6979      	ldr	r1, [r7, #20]
 801aaea:	4618      	mov	r0, r3
 801aaec:	f000 f8f9 	bl	801ace2 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 801aaf0:	69fa      	ldr	r2, [r7, #28]
 801aaf2:	6979      	ldr	r1, [r7, #20]
 801aaf4:	69b8      	ldr	r0, [r7, #24]
 801aaf6:	f7ff fcc5 	bl	801a484 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 801aafa:	697b      	ldr	r3, [r7, #20]
}
 801aafc:	4618      	mov	r0, r3
 801aafe:	3724      	adds	r7, #36	; 0x24
 801ab00:	46bd      	mov	sp, r7
 801ab02:	bd90      	pop	{r4, r7, pc}
 801ab04:	08023f8c 	.word	0x08023f8c
 801ab08:	080242dc 	.word	0x080242dc
 801ab0c:	08024120 	.word	0x08024120
 801ab10:	08024194 	.word	0x08024194
 801ab14:	08024238 	.word	0x08024238

0801ab18 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 801ab18:	b590      	push	{r4, r7, lr}
 801ab1a:	b089      	sub	sp, #36	; 0x24
 801ab1c:	af00      	add	r7, sp, #0
 801ab1e:	60f8      	str	r0, [r7, #12]
 801ab20:	60b9      	str	r1, [r7, #8]
 801ab22:	607a      	str	r2, [r7, #4]
 801ab24:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801ab26:	687b      	ldr	r3, [r7, #4]
 801ab28:	689a      	ldr	r2, [r3, #8]
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	689b      	ldr	r3, [r3, #8]
 801ab2e:	681b      	ldr	r3, [r3, #0]
 801ab30:	3320      	adds	r3, #32
 801ab32:	681b      	ldr	r3, [r3, #0]
 801ab34:	4610      	mov	r0, r2
 801ab36:	4798      	blx	r3
 801ab38:	4603      	mov	r3, r0
 801ab3a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801ab3e:	d205      	bcs.n	801ab4c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 801ab40:	4b46      	ldr	r3, [pc, #280]	; (801ac5c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x144>)
 801ab42:	4a47      	ldr	r2, [pc, #284]	; (801ac60 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 801ab44:	21c2      	movs	r1, #194	; 0xc2
 801ab46:	4847      	ldr	r0, [pc, #284]	; (801ac64 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 801ab48:	f007 fd4e 	bl	80225e8 <__assert_func>
 801ab4c:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801ab4e:	687b      	ldr	r3, [r7, #4]
 801ab50:	685a      	ldr	r2, [r3, #4]
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	685b      	ldr	r3, [r3, #4]
 801ab56:	681b      	ldr	r3, [r3, #0]
 801ab58:	3320      	adds	r3, #32
 801ab5a:	681b      	ldr	r3, [r3, #0]
 801ab5c:	4610      	mov	r0, r2
 801ab5e:	4798      	blx	r3
 801ab60:	4603      	mov	r3, r0
 801ab62:	2b0f      	cmp	r3, #15
 801ab64:	d805      	bhi.n	801ab72 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 801ab66:	4b40      	ldr	r3, [pc, #256]	; (801ac68 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x150>)
 801ab68:	4a3d      	ldr	r2, [pc, #244]	; (801ac60 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 801ab6a:	21c3      	movs	r1, #195	; 0xc3
 801ab6c:	483d      	ldr	r0, [pc, #244]	; (801ac64 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 801ab6e:	f007 fd3b 	bl	80225e8 <__assert_func>
 801ab72:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	68da      	ldr	r2, [r3, #12]
 801ab78:	687b      	ldr	r3, [r7, #4]
 801ab7a:	68db      	ldr	r3, [r3, #12]
 801ab7c:	681b      	ldr	r3, [r3, #0]
 801ab7e:	3320      	adds	r3, #32
 801ab80:	681b      	ldr	r3, [r3, #0]
 801ab82:	4610      	mov	r0, r2
 801ab84:	4798      	blx	r3
 801ab86:	4603      	mov	r3, r0
 801ab88:	2b57      	cmp	r3, #87	; 0x57
 801ab8a:	d805      	bhi.n	801ab98 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 801ab8c:	4b37      	ldr	r3, [pc, #220]	; (801ac6c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x154>)
 801ab8e:	4a34      	ldr	r2, [pc, #208]	; (801ac60 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x148>)
 801ab90:	21c4      	movs	r1, #196	; 0xc4
 801ab92:	4834      	ldr	r0, [pc, #208]	; (801ac64 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x14c>)
 801ab94:	f007 fd28 	bl	80225e8 <__assert_func>
 801ab98:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 801ab9a:	683a      	ldr	r2, [r7, #0]
 801ab9c:	68b9      	ldr	r1, [r7, #8]
 801ab9e:	68f8      	ldr	r0, [r7, #12]
 801aba0:	f7ff fc14 	bl	801a3cc <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 801aba4:	687b      	ldr	r3, [r7, #4]
 801aba6:	68db      	ldr	r3, [r3, #12]
 801aba8:	2100      	movs	r1, #0
 801abaa:	4618      	mov	r0, r3
 801abac:	f000 f8a7 	bl	801acfe <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>
 801abb0:	4603      	mov	r3, r0
 801abb2:	4619      	mov	r1, r3
 801abb4:	2058      	movs	r0, #88	; 0x58
 801abb6:	f7ff fb7b 	bl	801a2b0 <_ZnwjPv>
 801abba:	4604      	mov	r4, r0
 801abbc:	2114      	movs	r1, #20
 801abbe:	4620      	mov	r0, r4
 801abc0:	f000 f8d2 	bl	801ad68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>
 801abc4:	61fc      	str	r4, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801abc6:	687b      	ldr	r3, [r7, #4]
 801abc8:	689b      	ldr	r3, [r3, #8]
 801abca:	2100      	movs	r1, #0
 801abcc:	4618      	mov	r0, r3
 801abce:	f000 f95f 	bl	801ae90 <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>
 801abd2:	4603      	mov	r3, r0
 801abd4:	4619      	mov	r1, r3
 801abd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801abda:	f7ff fb69 	bl	801a2b0 <_ZnwjPv>
 801abde:	4604      	mov	r4, r0
 801abe0:	4620      	mov	r0, r4
 801abe2:	f002 fa51 	bl	801d088 <_ZN11Screen2ViewC1Ev>
 801abe6:	61bc      	str	r4, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 801abe8:	687b      	ldr	r3, [r7, #4]
 801abea:	685b      	ldr	r3, [r3, #4]
 801abec:	2100      	movs	r1, #0
 801abee:	4618      	mov	r0, r3
 801abf0:	f000 f961 	bl	801aeb6 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>
 801abf4:	4603      	mov	r3, r0
 801abf6:	4619      	mov	r1, r3
 801abf8:	2010      	movs	r0, #16
 801abfa:	f7ff fb59 	bl	801a2b0 <_ZnwjPv>
 801abfe:	4604      	mov	r4, r0
 801ac00:	69b9      	ldr	r1, [r7, #24]
 801ac02:	4620      	mov	r0, r4
 801ac04:	f002 f9e8 	bl	801cfd8 <_ZN16Screen2PresenterC1ER11Screen2View>
 801ac08:	617c      	str	r4, [r7, #20]
    *currentTrans = newTransition;
 801ac0a:	683b      	ldr	r3, [r7, #0]
 801ac0c:	69fa      	ldr	r2, [r7, #28]
 801ac0e:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 801ac10:	68bb      	ldr	r3, [r7, #8]
 801ac12:	697a      	ldr	r2, [r7, #20]
 801ac14:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801ac16:	68fb      	ldr	r3, [r7, #12]
 801ac18:	69ba      	ldr	r2, [r7, #24]
 801ac1a:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 801ac1c:	697b      	ldr	r3, [r7, #20]
 801ac1e:	2b00      	cmp	r3, #0
 801ac20:	d002      	beq.n	801ac28 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x110>
 801ac22:	697b      	ldr	r3, [r7, #20]
 801ac24:	3304      	adds	r3, #4
 801ac26:	e000      	b.n	801ac2a <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x112>
 801ac28:	2300      	movs	r3, #0
 801ac2a:	4619      	mov	r1, r3
 801ac2c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801ac2e:	f7ff fc50 	bl	801a4d2 <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 801ac32:	697b      	ldr	r3, [r7, #20]
 801ac34:	3304      	adds	r3, #4
 801ac36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ac38:	4618      	mov	r0, r3
 801ac3a:	f7ff fc9a 	bl	801a572 <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 801ac3e:	69bb      	ldr	r3, [r7, #24]
 801ac40:	6979      	ldr	r1, [r7, #20]
 801ac42:	4618      	mov	r0, r3
 801ac44:	f000 f94a 	bl	801aedc <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 801ac48:	69fa      	ldr	r2, [r7, #28]
 801ac4a:	6979      	ldr	r1, [r7, #20]
 801ac4c:	69b8      	ldr	r0, [r7, #24]
 801ac4e:	f7ff fc19 	bl	801a484 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 801ac52:	697b      	ldr	r3, [r7, #20]
}
 801ac54:	4618      	mov	r0, r3
 801ac56:	3724      	adds	r7, #36	; 0x24
 801ac58:	46bd      	mov	sp, r7
 801ac5a:	bd90      	pop	{r4, r7, pc}
 801ac5c:	08023f8c 	.word	0x08023f8c
 801ac60:	080243f4 	.word	0x080243f4
 801ac64:	08024120 	.word	0x08024120
 801ac68:	08024194 	.word	0x08024194
 801ac6c:	08024238 	.word	0x08024238

0801ac70 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 801ac70:	b580      	push	{r7, lr}
 801ac72:	b082      	sub	sp, #8
 801ac74:	af00      	add	r7, sp, #0
 801ac76:	6078      	str	r0, [r7, #4]
 801ac78:	460b      	mov	r3, r1
 801ac7a:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 801ac7c:	687b      	ldr	r3, [r7, #4]
 801ac7e:	681b      	ldr	r3, [r3, #0]
 801ac80:	3324      	adds	r3, #36	; 0x24
 801ac82:	681b      	ldr	r3, [r3, #0]
 801ac84:	887a      	ldrh	r2, [r7, #2]
 801ac86:	4611      	mov	r1, r2
 801ac88:	6878      	ldr	r0, [r7, #4]
 801ac8a:	4798      	blx	r3
 801ac8c:	4603      	mov	r3, r0
    }
 801ac8e:	4618      	mov	r0, r3
 801ac90:	3708      	adds	r7, #8
 801ac92:	46bd      	mov	sp, r7
 801ac94:	bd80      	pop	{r7, pc}

0801ac96 <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 801ac96:	b580      	push	{r7, lr}
 801ac98:	b082      	sub	sp, #8
 801ac9a:	af00      	add	r7, sp, #0
 801ac9c:	6078      	str	r0, [r7, #4]
 801ac9e:	460b      	mov	r3, r1
 801aca0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801aca2:	687b      	ldr	r3, [r7, #4]
 801aca4:	681b      	ldr	r3, [r3, #0]
 801aca6:	3324      	adds	r3, #36	; 0x24
 801aca8:	681b      	ldr	r3, [r3, #0]
 801acaa:	887a      	ldrh	r2, [r7, #2]
 801acac:	4611      	mov	r1, r2
 801acae:	6878      	ldr	r0, [r7, #4]
 801acb0:	4798      	blx	r3
 801acb2:	4603      	mov	r3, r0
    }
 801acb4:	4618      	mov	r0, r3
 801acb6:	3708      	adds	r7, #8
 801acb8:	46bd      	mov	sp, r7
 801acba:	bd80      	pop	{r7, pc}

0801acbc <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 801acbc:	b580      	push	{r7, lr}
 801acbe:	b082      	sub	sp, #8
 801acc0:	af00      	add	r7, sp, #0
 801acc2:	6078      	str	r0, [r7, #4]
 801acc4:	460b      	mov	r3, r1
 801acc6:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801acc8:	687b      	ldr	r3, [r7, #4]
 801acca:	681b      	ldr	r3, [r3, #0]
 801accc:	3324      	adds	r3, #36	; 0x24
 801acce:	681b      	ldr	r3, [r3, #0]
 801acd0:	887a      	ldrh	r2, [r7, #2]
 801acd2:	4611      	mov	r1, r2
 801acd4:	6878      	ldr	r0, [r7, #4]
 801acd6:	4798      	blx	r3
 801acd8:	4603      	mov	r3, r0
    }
 801acda:	4618      	mov	r0, r3
 801acdc:	3708      	adds	r7, #8
 801acde:	46bd      	mov	sp, r7
 801ace0:	bd80      	pop	{r7, pc}

0801ace2 <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 801ace2:	b480      	push	{r7}
 801ace4:	b083      	sub	sp, #12
 801ace6:	af00      	add	r7, sp, #0
 801ace8:	6078      	str	r0, [r7, #4]
 801acea:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 801acec:	687b      	ldr	r3, [r7, #4]
 801acee:	683a      	ldr	r2, [r7, #0]
 801acf0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801acf2:	bf00      	nop
 801acf4:	370c      	adds	r7, #12
 801acf6:	46bd      	mov	sp, r7
 801acf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801acfc:	4770      	bx	lr

0801acfe <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>:
    T& at(const uint16_t index)
 801acfe:	b580      	push	{r7, lr}
 801ad00:	b082      	sub	sp, #8
 801ad02:	af00      	add	r7, sp, #0
 801ad04:	6078      	str	r0, [r7, #4]
 801ad06:	460b      	mov	r3, r1
 801ad08:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801ad0a:	687b      	ldr	r3, [r7, #4]
 801ad0c:	681b      	ldr	r3, [r3, #0]
 801ad0e:	3324      	adds	r3, #36	; 0x24
 801ad10:	681b      	ldr	r3, [r3, #0]
 801ad12:	887a      	ldrh	r2, [r7, #2]
 801ad14:	4611      	mov	r1, r2
 801ad16:	6878      	ldr	r0, [r7, #4]
 801ad18:	4798      	blx	r3
 801ad1a:	4603      	mov	r3, r0
    }
 801ad1c:	4618      	mov	r0, r3
 801ad1e:	3708      	adds	r7, #8
 801ad20:	46bd      	mov	sp, r7
 801ad22:	bd80      	pop	{r7, pc}

0801ad24 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 801ad24:	b580      	push	{r7, lr}
 801ad26:	b082      	sub	sp, #8
 801ad28:	af00      	add	r7, sp, #0
 801ad2a:	6078      	str	r0, [r7, #4]
 801ad2c:	4a05      	ldr	r2, [pc, #20]	; (801ad44 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev+0x20>)
 801ad2e:	687b      	ldr	r3, [r7, #4]
 801ad30:	601a      	str	r2, [r3, #0]
 801ad32:	687b      	ldr	r3, [r7, #4]
 801ad34:	4618      	mov	r0, r3
 801ad36:	f7f4 f971 	bl	800f01c <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 801ad3a:	687b      	ldr	r3, [r7, #4]
 801ad3c:	4618      	mov	r0, r3
 801ad3e:	3708      	adds	r7, #8
 801ad40:	46bd      	mov	sp, r7
 801ad42:	bd80      	pop	{r7, pc}
 801ad44:	08025290 	.word	0x08025290

0801ad48 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED0Ev>:
 801ad48:	b580      	push	{r7, lr}
 801ad4a:	b082      	sub	sp, #8
 801ad4c:	af00      	add	r7, sp, #0
 801ad4e:	6078      	str	r0, [r7, #4]
 801ad50:	6878      	ldr	r0, [r7, #4]
 801ad52:	f7ff ffe7 	bl	801ad24 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
 801ad56:	2110      	movs	r1, #16
 801ad58:	6878      	ldr	r0, [r7, #4]
 801ad5a:	f007 fc17 	bl	802258c <_ZdlPvj>
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	4618      	mov	r0, r3
 801ad62:	3708      	adds	r7, #8
 801ad64:	46bd      	mov	sp, r7
 801ad66:	bd80      	pop	{r7, pc}

0801ad68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>:
     *
     *        Constructor.
     *
     * @param transitionSteps Number of steps in the transition animation.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 801ad68:	b590      	push	{r4, r7, lr}
 801ad6a:	b087      	sub	sp, #28
 801ad6c:	af02      	add	r7, sp, #8
 801ad6e:	6078      	str	r0, [r7, #4]
 801ad70:	460b      	mov	r3, r1
 801ad72:	70fb      	strb	r3, [r7, #3]
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 801ad74:	687b      	ldr	r3, [r7, #4]
 801ad76:	4618      	mov	r0, r3
 801ad78:	f7ff faa6 	bl	801a2c8 <_ZN8touchgfx10TransitionC1Ev>
 801ad7c:	4a3f      	ldr	r2, [pc, #252]	; (801ae7c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x114>)
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	601a      	str	r2, [r3, #0]
 801ad82:	687b      	ldr	r3, [r7, #4]
 801ad84:	330c      	adds	r3, #12
 801ad86:	4618      	mov	r0, r3
 801ad88:	f7f5 fe1e 	bl	80109c8 <_ZN8touchgfx14SnapshotWidgetC1Ev>
          snapshotPtr(&snapshot),
 801ad8c:	687b      	ldr	r3, [r7, #4]
 801ad8e:	f103 020c 	add.w	r2, r3, #12
          calculatedValue(0)
 801ad92:	687b      	ldr	r3, [r7, #4]
 801ad94:	63da      	str	r2, [r3, #60]	; 0x3c
 801ad96:	687b      	ldr	r3, [r7, #4]
 801ad98:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801ad9c:	4a38      	ldr	r2, [pc, #224]	; (801ae80 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x118>)
 801ad9e:	f107 0308 	add.w	r3, r7, #8
 801ada2:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ada6:	e883 0003 	stmia.w	r3, {r0, r1}
 801adaa:	f107 0308 	add.w	r3, r7, #8
 801adae:	cb0c      	ldmia	r3, {r2, r3}
 801adb0:	6879      	ldr	r1, [r7, #4]
 801adb2:	4620      	mov	r0, r4
 801adb4:	f000 f8d4 	bl	801af60 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 801adb8:	687b      	ldr	r3, [r7, #4]
 801adba:	2203      	movs	r2, #3
 801adbc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 801adc0:	687b      	ldr	r3, [r7, #4]
 801adc2:	78fa      	ldrb	r2, [r7, #3]
 801adc4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 801adc8:	687b      	ldr	r3, [r7, #4]
 801adca:	2200      	movs	r2, #0
 801adcc:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 801add0:	687b      	ldr	r3, [r7, #4]
 801add2:	2200      	movs	r2, #0
 801add4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    {
        if (HAL::USE_ANIMATION_STORAGE)
 801add8:	4b2a      	ldr	r3, [pc, #168]	; (801ae84 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x11c>)
 801adda:	781b      	ldrb	r3, [r3, #0]
 801addc:	2b00      	cmp	r3, #0
 801adde:	d047      	beq.n	801ae70 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 801ade0:	687b      	ldr	r3, [r7, #4]
 801ade2:	f103 000c 	add.w	r0, r3, #12
 801ade6:	4b28      	ldr	r3, [pc, #160]	; (801ae88 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 801ade8:	881b      	ldrh	r3, [r3, #0]
 801adea:	b21a      	sxth	r2, r3
 801adec:	4b27      	ldr	r3, [pc, #156]	; (801ae8c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 801adee:	881b      	ldrh	r3, [r3, #0]
 801adf0:	b21b      	sxth	r3, r3
 801adf2:	9300      	str	r3, [sp, #0]
 801adf4:	4613      	mov	r3, r2
 801adf6:	2200      	movs	r2, #0
 801adf8:	2100      	movs	r1, #0
 801adfa:	f7f3 fcef 	bl	800e7dc <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 801adfe:	687b      	ldr	r3, [r7, #4]
 801ae00:	330c      	adds	r3, #12
 801ae02:	4618      	mov	r0, r3
 801ae04:	f7f5 fe87 	bl	8010b16 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (direction)
 801ae08:	687b      	ldr	r3, [r7, #4]
 801ae0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801ae0e:	2b03      	cmp	r3, #3
 801ae10:	d82a      	bhi.n	801ae68 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x100>
 801ae12:	a201      	add	r2, pc, #4	; (adr r2, 801ae18 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xb0>)
 801ae14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ae18:	0801ae49 	.word	0x0801ae49
 801ae1c:	0801ae57 	.word	0x0801ae57
 801ae20:	0801ae29 	.word	0x0801ae29
 801ae24:	0801ae3b 	.word	0x0801ae3b
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 801ae28:	4b17      	ldr	r3, [pc, #92]	; (801ae88 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 801ae2a:	881b      	ldrh	r3, [r3, #0]
 801ae2c:	425b      	negs	r3, r3
 801ae2e:	b29b      	uxth	r3, r3
 801ae30:	b21a      	sxth	r2, r3
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                break;
 801ae38:	e01a      	b.n	801ae70 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case WEST:
                targetValue = HAL::DISPLAY_WIDTH;
 801ae3a:	4b13      	ldr	r3, [pc, #76]	; (801ae88 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 801ae3c:	881b      	ldrh	r3, [r3, #0]
 801ae3e:	b21a      	sxth	r2, r3
 801ae40:	687b      	ldr	r3, [r7, #4]
 801ae42:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                break;
 801ae46:	e013      	b.n	801ae70 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
 801ae48:	4b10      	ldr	r3, [pc, #64]	; (801ae8c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 801ae4a:	881b      	ldrh	r3, [r3, #0]
 801ae4c:	b21a      	sxth	r2, r3
 801ae4e:	687b      	ldr	r3, [r7, #4]
 801ae50:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                break;
 801ae54:	e00c      	b.n	801ae70 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 801ae56:	4b0d      	ldr	r3, [pc, #52]	; (801ae8c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 801ae58:	881b      	ldrh	r3, [r3, #0]
 801ae5a:	425b      	negs	r3, r3
 801ae5c:	b29b      	uxth	r3, r3
 801ae5e:	b21a      	sxth	r2, r3
 801ae60:	687b      	ldr	r3, [r7, #4]
 801ae62:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                break;
 801ae66:	e003      	b.n	801ae70 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            default:
                done = true;
 801ae68:	687b      	ldr	r3, [r7, #4]
 801ae6a:	2201      	movs	r2, #1
 801ae6c:	721a      	strb	r2, [r3, #8]
                // Nothing to do here
                break;
 801ae6e:	bf00      	nop
            }
        }
    }
 801ae70:	687b      	ldr	r3, [r7, #4]
 801ae72:	4618      	mov	r0, r3
 801ae74:	3714      	adds	r7, #20
 801ae76:	46bd      	mov	sp, r7
 801ae78:	bd90      	pop	{r4, r7, pc}
 801ae7a:	bf00      	nop
 801ae7c:	08025268 	.word	0x08025268
 801ae80:	0802450c 	.word	0x0802450c
 801ae84:	20009d37 	.word	0x20009d37
 801ae88:	20009d2c 	.word	0x20009d2c
 801ae8c:	20009d2e 	.word	0x20009d2e

0801ae90 <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>:
    T& at(const uint16_t index)
 801ae90:	b580      	push	{r7, lr}
 801ae92:	b082      	sub	sp, #8
 801ae94:	af00      	add	r7, sp, #0
 801ae96:	6078      	str	r0, [r7, #4]
 801ae98:	460b      	mov	r3, r1
 801ae9a:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801ae9c:	687b      	ldr	r3, [r7, #4]
 801ae9e:	681b      	ldr	r3, [r3, #0]
 801aea0:	3324      	adds	r3, #36	; 0x24
 801aea2:	681b      	ldr	r3, [r3, #0]
 801aea4:	887a      	ldrh	r2, [r7, #2]
 801aea6:	4611      	mov	r1, r2
 801aea8:	6878      	ldr	r0, [r7, #4]
 801aeaa:	4798      	blx	r3
 801aeac:	4603      	mov	r3, r0
    }
 801aeae:	4618      	mov	r0, r3
 801aeb0:	3708      	adds	r7, #8
 801aeb2:	46bd      	mov	sp, r7
 801aeb4:	bd80      	pop	{r7, pc}

0801aeb6 <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>:
    T& at(const uint16_t index)
 801aeb6:	b580      	push	{r7, lr}
 801aeb8:	b082      	sub	sp, #8
 801aeba:	af00      	add	r7, sp, #0
 801aebc:	6078      	str	r0, [r7, #4]
 801aebe:	460b      	mov	r3, r1
 801aec0:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801aec2:	687b      	ldr	r3, [r7, #4]
 801aec4:	681b      	ldr	r3, [r3, #0]
 801aec6:	3324      	adds	r3, #36	; 0x24
 801aec8:	681b      	ldr	r3, [r3, #0]
 801aeca:	887a      	ldrh	r2, [r7, #2]
 801aecc:	4611      	mov	r1, r2
 801aece:	6878      	ldr	r0, [r7, #4]
 801aed0:	4798      	blx	r3
 801aed2:	4603      	mov	r3, r0
    }
 801aed4:	4618      	mov	r0, r3
 801aed6:	3708      	adds	r7, #8
 801aed8:	46bd      	mov	sp, r7
 801aeda:	bd80      	pop	{r7, pc}

0801aedc <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>:
    void bind(T& presenter)
 801aedc:	b480      	push	{r7}
 801aede:	b083      	sub	sp, #12
 801aee0:	af00      	add	r7, sp, #0
 801aee2:	6078      	str	r0, [r7, #4]
 801aee4:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 801aee6:	687b      	ldr	r3, [r7, #4]
 801aee8:	683a      	ldr	r2, [r7, #0]
 801aeea:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801aeec:	bf00      	nop
 801aeee:	370c      	adds	r7, #12
 801aef0:	46bd      	mov	sp, r7
 801aef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aef6:	4770      	bx	lr

0801aef8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE>:
     *
     *        Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 801aef8:	b580      	push	{r7, lr}
 801aefa:	b082      	sub	sp, #8
 801aefc:	af00      	add	r7, sp, #0
 801aefe:	6078      	str	r0, [r7, #4]
 801af00:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 801af02:	687b      	ldr	r3, [r7, #4]
 801af04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801af06:	683a      	ldr	r2, [r7, #0]
 801af08:	429a      	cmp	r2, r3
 801af0a:	d024      	beq.n	801af56 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x5e>
        {
            return;
        }

        switch (direction)
 801af0c:	687b      	ldr	r3, [r7, #4]
 801af0e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801af12:	2b01      	cmp	r3, #1
 801af14:	dc02      	bgt.n	801af1c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x24>
 801af16:	2b00      	cmp	r3, #0
 801af18:	da0e      	bge.n	801af38 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x40>
 801af1a:	e018      	b.n	801af4e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x56>
 801af1c:	3b02      	subs	r3, #2
 801af1e:	2b01      	cmp	r3, #1
 801af20:	d815      	bhi.n	801af4e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x56>
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 801af22:	683b      	ldr	r3, [r7, #0]
 801af24:	681b      	ldr	r3, [r3, #0]
 801af26:	3354      	adds	r3, #84	; 0x54
 801af28:	681b      	ldr	r3, [r3, #0]
 801af2a:	687a      	ldr	r2, [r7, #4]
 801af2c:	f9b2 1056 	ldrsh.w	r1, [r2, #86]	; 0x56
 801af30:	2200      	movs	r2, #0
 801af32:	6838      	ldr	r0, [r7, #0]
 801af34:	4798      	blx	r3
            break;
 801af36:	e00f      	b.n	801af58 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x60>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 801af38:	683b      	ldr	r3, [r7, #0]
 801af3a:	681b      	ldr	r3, [r3, #0]
 801af3c:	3354      	adds	r3, #84	; 0x54
 801af3e:	681b      	ldr	r3, [r3, #0]
 801af40:	687a      	ldr	r2, [r7, #4]
 801af42:	f9b2 2056 	ldrsh.w	r2, [r2, #86]	; 0x56
 801af46:	2100      	movs	r1, #0
 801af48:	6838      	ldr	r0, [r7, #0]
 801af4a:	4798      	blx	r3
            break;
 801af4c:	e004      	b.n	801af58 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x60>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 801af4e:	687b      	ldr	r3, [r7, #4]
 801af50:	2201      	movs	r2, #1
 801af52:	721a      	strb	r2, [r3, #8]
            break;
 801af54:	e000      	b.n	801af58 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x60>
            return;
 801af56:	bf00      	nop
        }
    }
 801af58:	3708      	adds	r7, #8
 801af5a:	46bd      	mov	sp, r7
 801af5c:	bd80      	pop	{r7, pc}
	...

0801af60 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 801af60:	b580      	push	{r7, lr}
 801af62:	b084      	sub	sp, #16
 801af64:	af00      	add	r7, sp, #0
 801af66:	60f8      	str	r0, [r7, #12]
 801af68:	60b9      	str	r1, [r7, #8]
 801af6a:	4639      	mov	r1, r7
 801af6c:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 801af70:	68fb      	ldr	r3, [r7, #12]
 801af72:	4618      	mov	r0, r3
 801af74:	f7f4 f842 	bl	800effc <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 801af78:	4a08      	ldr	r2, [pc, #32]	; (801af9c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 801af7a:	68fb      	ldr	r3, [r7, #12]
 801af7c:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801af7e:	68fb      	ldr	r3, [r7, #12]
 801af80:	68ba      	ldr	r2, [r7, #8]
 801af82:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 801af84:	68fb      	ldr	r3, [r7, #12]
 801af86:	3308      	adds	r3, #8
 801af88:	463a      	mov	r2, r7
 801af8a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801af8e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801af92:	68fb      	ldr	r3, [r7, #12]
 801af94:	4618      	mov	r0, r3
 801af96:	3710      	adds	r7, #16
 801af98:	46bd      	mov	sp, r7
 801af9a:	bd80      	pop	{r7, pc}
 801af9c:	08025290 	.word	0x08025290

0801afa0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>:
    virtual ~SlideTransition()
 801afa0:	b580      	push	{r7, lr}
 801afa2:	b082      	sub	sp, #8
 801afa4:	af00      	add	r7, sp, #0
 801afa6:	6078      	str	r0, [r7, #4]
    }
 801afa8:	4a0a      	ldr	r2, [pc, #40]	; (801afd4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev+0x34>)
 801afaa:	687b      	ldr	r3, [r7, #4]
 801afac:	601a      	str	r2, [r3, #0]
 801afae:	687b      	ldr	r3, [r7, #4]
 801afb0:	3340      	adds	r3, #64	; 0x40
 801afb2:	4618      	mov	r0, r3
 801afb4:	f7ff feb6 	bl	801ad24 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	330c      	adds	r3, #12
 801afbc:	4618      	mov	r0, r3
 801afbe:	f7f5 fd1d 	bl	80109fc <_ZN8touchgfx14SnapshotWidgetD1Ev>
 801afc2:	687b      	ldr	r3, [r7, #4]
 801afc4:	4618      	mov	r0, r3
 801afc6:	f7ff f995 	bl	801a2f4 <_ZN8touchgfx10TransitionD1Ev>
 801afca:	687b      	ldr	r3, [r7, #4]
 801afcc:	4618      	mov	r0, r3
 801afce:	3708      	adds	r7, #8
 801afd0:	46bd      	mov	sp, r7
 801afd2:	bd80      	pop	{r7, pc}
 801afd4:	08025268 	.word	0x08025268

0801afd8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED0Ev>:
    virtual ~SlideTransition()
 801afd8:	b580      	push	{r7, lr}
 801afda:	b082      	sub	sp, #8
 801afdc:	af00      	add	r7, sp, #0
 801afde:	6078      	str	r0, [r7, #4]
    }
 801afe0:	6878      	ldr	r0, [r7, #4]
 801afe2:	f7ff ffdd 	bl	801afa0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>
 801afe6:	2158      	movs	r1, #88	; 0x58
 801afe8:	6878      	ldr	r0, [r7, #4]
 801afea:	f007 facf 	bl	802258c <_ZdlPvj>
 801afee:	687b      	ldr	r3, [r7, #4]
 801aff0:	4618      	mov	r0, r3
 801aff2:	3708      	adds	r7, #8
 801aff4:	46bd      	mov	sp, r7
 801aff6:	bd80      	pop	{r7, pc}

0801aff8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv>:
    virtual void handleTickEvent()
 801aff8:	b580      	push	{r7, lr}
 801affa:	b082      	sub	sp, #8
 801affc:	af00      	add	r7, sp, #0
 801affe:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 801b000:	4b56      	ldr	r3, [pc, #344]	; (801b15c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x164>)
 801b002:	781b      	ldrb	r3, [r3, #0]
 801b004:	f083 0301 	eor.w	r3, r3, #1
 801b008:	b2db      	uxtb	r3, r3
 801b00a:	2b00      	cmp	r3, #0
 801b00c:	d003      	beq.n	801b016 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1e>
            done = true;
 801b00e:	687b      	ldr	r3, [r7, #4]
 801b010:	2201      	movs	r2, #1
 801b012:	721a      	strb	r2, [r3, #8]
            return;
 801b014:	e09f      	b.n	801b156 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x15e>
        Transition::handleTickEvent();
 801b016:	687b      	ldr	r3, [r7, #4]
 801b018:	4618      	mov	r0, r3
 801b01a:	f7ff f98b 	bl	801a334 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 801b01e:	687b      	ldr	r3, [r7, #4]
 801b020:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 801b024:	3301      	adds	r3, #1
 801b026:	b2da      	uxtb	r2, r3
 801b028:	687b      	ldr	r3, [r7, #4]
 801b02a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        if (animationCounter <= animationSteps)
 801b02e:	687b      	ldr	r3, [r7, #4]
 801b030:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 801b034:	687b      	ldr	r3, [r7, #4]
 801b036:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801b03a:	429a      	cmp	r2, r3
 801b03c:	d82f      	bhi.n	801b09e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 801b03e:	687b      	ldr	r3, [r7, #4]
 801b040:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 801b044:	b298      	uxth	r0, r3
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801b052:	b29b      	uxth	r3, r3
 801b054:	2100      	movs	r1, #0
 801b056:	f004 fca9 	bl	801f9ac <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 801b05a:	4603      	mov	r3, r0
 801b05c:	461a      	mov	r2, r3
 801b05e:	687b      	ldr	r3, [r7, #4]
 801b060:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
            if (calculatedValue % 2)
 801b064:	687b      	ldr	r3, [r7, #4]
 801b066:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 801b06a:	b29b      	uxth	r3, r3
 801b06c:	f003 0301 	and.w	r3, r3, #1
 801b070:	b29b      	uxth	r3, r3
 801b072:	2b00      	cmp	r3, #0
 801b074:	d01b      	beq.n	801b0ae <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 801b076:	687b      	ldr	r3, [r7, #4]
 801b078:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 801b07c:	b29b      	uxth	r3, r3
 801b07e:	687a      	ldr	r2, [r7, #4]
 801b080:	f9b2 2056 	ldrsh.w	r2, [r2, #86]	; 0x56
 801b084:	2a00      	cmp	r2, #0
 801b086:	dd01      	ble.n	801b08c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x94>
 801b088:	2201      	movs	r2, #1
 801b08a:	e001      	b.n	801b090 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x98>
 801b08c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801b090:	4413      	add	r3, r2
 801b092:	b29b      	uxth	r3, r3
 801b094:	b21a      	sxth	r2, r3
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 801b09c:	e007      	b.n	801b0ae <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xb6>
            done = true;
 801b09e:	687b      	ldr	r3, [r7, #4]
 801b0a0:	2201      	movs	r2, #1
 801b0a2:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	2200      	movs	r2, #0
 801b0a8:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
            return;
 801b0ac:	e053      	b.n	801b156 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x15e>
        switch (direction)
 801b0ae:	687b      	ldr	r3, [r7, #4]
 801b0b0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801b0b4:	2b01      	cmp	r3, #1
 801b0b6:	dc02      	bgt.n	801b0be <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xc6>
 801b0b8:	2b00      	cmp	r3, #0
 801b0ba:	da20      	bge.n	801b0fe <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x106>
 801b0bc:	e03c      	b.n	801b138 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x140>
 801b0be:	3b02      	subs	r3, #2
 801b0c0:	2b01      	cmp	r3, #1
 801b0c2:	d839      	bhi.n	801b138 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x140>
            calculatedValue -= snapshot.getX();
 801b0c4:	687b      	ldr	r3, [r7, #4]
 801b0c6:	330c      	adds	r3, #12
 801b0c8:	4618      	mov	r0, r3
 801b0ca:	f7f3 fbb4 	bl	800e836 <_ZNK8touchgfx8Drawable4getXEv>
 801b0ce:	4603      	mov	r3, r0
 801b0d0:	4619      	mov	r1, r3
 801b0d2:	687b      	ldr	r3, [r7, #4]
 801b0d4:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 801b0d8:	b29a      	uxth	r2, r3
 801b0da:	b28b      	uxth	r3, r1
 801b0dc:	1ad3      	subs	r3, r2, r3
 801b0de:	b29b      	uxth	r3, r3
 801b0e0:	b21a      	sxth	r2, r3
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
            snapshot.moveRelative(calculatedValue, 0);
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	f103 000c 	add.w	r0, r3, #12
 801b0ee:	687b      	ldr	r3, [r7, #4]
 801b0f0:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 801b0f4:	2200      	movs	r2, #0
 801b0f6:	4619      	mov	r1, r3
 801b0f8:	f004 f807 	bl	801f10a <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 801b0fc:	e020      	b.n	801b140 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x148>
            calculatedValue -= snapshot.getY();
 801b0fe:	687b      	ldr	r3, [r7, #4]
 801b100:	330c      	adds	r3, #12
 801b102:	4618      	mov	r0, r3
 801b104:	f7f3 fba4 	bl	800e850 <_ZNK8touchgfx8Drawable4getYEv>
 801b108:	4603      	mov	r3, r0
 801b10a:	4619      	mov	r1, r3
 801b10c:	687b      	ldr	r3, [r7, #4]
 801b10e:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 801b112:	b29a      	uxth	r2, r3
 801b114:	b28b      	uxth	r3, r1
 801b116:	1ad3      	subs	r3, r2, r3
 801b118:	b29b      	uxth	r3, r3
 801b11a:	b21a      	sxth	r2, r3
 801b11c:	687b      	ldr	r3, [r7, #4]
 801b11e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
            snapshot.moveRelative(0, calculatedValue);
 801b122:	687b      	ldr	r3, [r7, #4]
 801b124:	f103 000c 	add.w	r0, r3, #12
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 801b12e:	461a      	mov	r2, r3
 801b130:	2100      	movs	r1, #0
 801b132:	f003 ffea 	bl	801f10a <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 801b136:	e003      	b.n	801b140 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x148>
            done = true;
 801b138:	687b      	ldr	r3, [r7, #4]
 801b13a:	2201      	movs	r2, #1
 801b13c:	721a      	strb	r2, [r3, #8]
            break;
 801b13e:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 801b140:	687b      	ldr	r3, [r7, #4]
 801b142:	6858      	ldr	r0, [r3, #4]
 801b144:	687b      	ldr	r3, [r7, #4]
 801b146:	685b      	ldr	r3, [r3, #4]
 801b148:	681b      	ldr	r3, [r3, #0]
 801b14a:	337c      	adds	r3, #124	; 0x7c
 801b14c:	681b      	ldr	r3, [r3, #0]
 801b14e:	687a      	ldr	r2, [r7, #4]
 801b150:	3240      	adds	r2, #64	; 0x40
 801b152:	4611      	mov	r1, r2
 801b154:	4798      	blx	r3
    }
 801b156:	3708      	adds	r7, #8
 801b158:	46bd      	mov	sp, r7
 801b15a:	bd80      	pop	{r7, pc}
 801b15c:	20009d37 	.word	0x20009d37

0801b160 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv>:
    virtual void tearDown()
 801b160:	b580      	push	{r7, lr}
 801b162:	b082      	sub	sp, #8
 801b164:	af00      	add	r7, sp, #0
 801b166:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 801b168:	4b09      	ldr	r3, [pc, #36]	; (801b190 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x30>)
 801b16a:	781b      	ldrb	r3, [r3, #0]
 801b16c:	2b00      	cmp	r3, #0
 801b16e:	d00a      	beq.n	801b186 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x26>
            screenContainer->remove(snapshot);
 801b170:	687b      	ldr	r3, [r7, #4]
 801b172:	6858      	ldr	r0, [r3, #4]
 801b174:	687b      	ldr	r3, [r7, #4]
 801b176:	685b      	ldr	r3, [r3, #4]
 801b178:	681b      	ldr	r3, [r3, #0]
 801b17a:	3368      	adds	r3, #104	; 0x68
 801b17c:	681b      	ldr	r3, [r3, #0]
 801b17e:	687a      	ldr	r2, [r7, #4]
 801b180:	320c      	adds	r2, #12
 801b182:	4611      	mov	r1, r2
 801b184:	4798      	blx	r3
    }
 801b186:	bf00      	nop
 801b188:	3708      	adds	r7, #8
 801b18a:	46bd      	mov	sp, r7
 801b18c:	bd80      	pop	{r7, pc}
 801b18e:	bf00      	nop
 801b190:	20009d37 	.word	0x20009d37

0801b194 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv>:
    virtual void init()
 801b194:	b580      	push	{r7, lr}
 801b196:	b088      	sub	sp, #32
 801b198:	af00      	add	r7, sp, #0
 801b19a:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 801b19c:	4b1a      	ldr	r3, [pc, #104]	; (801b208 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x74>)
 801b19e:	781b      	ldrb	r3, [r3, #0]
 801b1a0:	2b00      	cmp	r3, #0
 801b1a2:	d02d      	beq.n	801b200 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x6c>
            Transition::init();
 801b1a4:	687b      	ldr	r3, [r7, #4]
 801b1a6:	4618      	mov	r0, r3
 801b1a8:	f7ff f8d8 	bl	801a35c <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 801b1ac:	4a17      	ldr	r2, [pc, #92]	; (801b20c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x78>)
 801b1ae:	f107 0318 	add.w	r3, r7, #24
 801b1b2:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b1b6:	e883 0003 	stmia.w	r3, {r0, r1}
 801b1ba:	f107 0008 	add.w	r0, r7, #8
 801b1be:	f107 0318 	add.w	r3, r7, #24
 801b1c2:	cb0c      	ldmia	r3, {r2, r3}
 801b1c4:	6879      	ldr	r1, [r7, #4]
 801b1c6:	f7ff fecb 	bl	801af60 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	685a      	ldr	r2, [r3, #4]
 801b1ce:	687b      	ldr	r3, [r7, #4]
 801b1d0:	685b      	ldr	r3, [r3, #4]
 801b1d2:	681b      	ldr	r3, [r3, #0]
 801b1d4:	337c      	adds	r3, #124	; 0x7c
 801b1d6:	681b      	ldr	r3, [r3, #0]
 801b1d8:	f107 0108 	add.w	r1, r7, #8
 801b1dc:	4610      	mov	r0, r2
 801b1de:	4798      	blx	r3
            screenContainer->add(snapshot);
 801b1e0:	687b      	ldr	r3, [r7, #4]
 801b1e2:	6858      	ldr	r0, [r3, #4]
 801b1e4:	687b      	ldr	r3, [r7, #4]
 801b1e6:	685b      	ldr	r3, [r3, #4]
 801b1e8:	681b      	ldr	r3, [r3, #0]
 801b1ea:	3364      	adds	r3, #100	; 0x64
 801b1ec:	681b      	ldr	r3, [r3, #0]
 801b1ee:	687a      	ldr	r2, [r7, #4]
 801b1f0:	320c      	adds	r2, #12
 801b1f2:	4611      	mov	r1, r2
 801b1f4:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 801b1f6:	f107 0308 	add.w	r3, r7, #8
 801b1fa:	4618      	mov	r0, r3
 801b1fc:	f7ff fd92 	bl	801ad24 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
    }
 801b200:	bf00      	nop
 801b202:	3720      	adds	r7, #32
 801b204:	46bd      	mov	sp, r7
 801b206:	bd80      	pop	{r7, pc}
 801b208:	20009d37 	.word	0x20009d37
 801b20c:	08024514 	.word	0x08024514

0801b210 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 801b210:	b580      	push	{r7, lr}
 801b212:	b082      	sub	sp, #8
 801b214:	af00      	add	r7, sp, #0
 801b216:	6078      	str	r0, [r7, #4]
 801b218:	6039      	str	r1, [r7, #0]
        switch (direction)
 801b21a:	687b      	ldr	r3, [r7, #4]
 801b21c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801b220:	2b03      	cmp	r3, #3
 801b222:	d83b      	bhi.n	801b29c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8c>
 801b224:	a201      	add	r2, pc, #4	; (adr r2, 801b22c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 801b226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b22a:	bf00      	nop
 801b22c:	0801b26d 	.word	0x0801b26d
 801b230:	0801b287 	.word	0x0801b287
 801b234:	0801b23d 	.word	0x0801b23d
 801b238:	0801b253 	.word	0x0801b253
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 801b23c:	683b      	ldr	r3, [r7, #0]
 801b23e:	681b      	ldr	r3, [r3, #0]
 801b240:	3354      	adds	r3, #84	; 0x54
 801b242:	681b      	ldr	r3, [r3, #0]
 801b244:	4a18      	ldr	r2, [pc, #96]	; (801b2a8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x98>)
 801b246:	8812      	ldrh	r2, [r2, #0]
 801b248:	b211      	sxth	r1, r2
 801b24a:	2200      	movs	r2, #0
 801b24c:	6838      	ldr	r0, [r7, #0]
 801b24e:	4798      	blx	r3
            break;
 801b250:	e025      	b.n	801b29e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 801b252:	683b      	ldr	r3, [r7, #0]
 801b254:	681b      	ldr	r3, [r3, #0]
 801b256:	3354      	adds	r3, #84	; 0x54
 801b258:	681b      	ldr	r3, [r3, #0]
 801b25a:	4a13      	ldr	r2, [pc, #76]	; (801b2a8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x98>)
 801b25c:	8812      	ldrh	r2, [r2, #0]
 801b25e:	4252      	negs	r2, r2
 801b260:	b292      	uxth	r2, r2
 801b262:	b211      	sxth	r1, r2
 801b264:	2200      	movs	r2, #0
 801b266:	6838      	ldr	r0, [r7, #0]
 801b268:	4798      	blx	r3
            break;
 801b26a:	e018      	b.n	801b29e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 801b26c:	683b      	ldr	r3, [r7, #0]
 801b26e:	681b      	ldr	r3, [r3, #0]
 801b270:	3354      	adds	r3, #84	; 0x54
 801b272:	681b      	ldr	r3, [r3, #0]
 801b274:	4a0d      	ldr	r2, [pc, #52]	; (801b2ac <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 801b276:	8812      	ldrh	r2, [r2, #0]
 801b278:	4252      	negs	r2, r2
 801b27a:	b292      	uxth	r2, r2
 801b27c:	b212      	sxth	r2, r2
 801b27e:	2100      	movs	r1, #0
 801b280:	6838      	ldr	r0, [r7, #0]
 801b282:	4798      	blx	r3
            break;
 801b284:	e00b      	b.n	801b29e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 801b286:	683b      	ldr	r3, [r7, #0]
 801b288:	681b      	ldr	r3, [r3, #0]
 801b28a:	3354      	adds	r3, #84	; 0x54
 801b28c:	681b      	ldr	r3, [r3, #0]
 801b28e:	4a07      	ldr	r2, [pc, #28]	; (801b2ac <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 801b290:	8812      	ldrh	r2, [r2, #0]
 801b292:	b212      	sxth	r2, r2
 801b294:	2100      	movs	r1, #0
 801b296:	6838      	ldr	r0, [r7, #0]
 801b298:	4798      	blx	r3
            break;
 801b29a:	e000      	b.n	801b29e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 801b29c:	bf00      	nop
    }
 801b29e:	bf00      	nop
 801b2a0:	3708      	adds	r7, #8
 801b2a2:	46bd      	mov	sp, r7
 801b2a4:	bd80      	pop	{r7, pc}
 801b2a6:	bf00      	nop
 801b2a8:	20009d2c 	.word	0x20009d2c
 801b2ac:	20009d2e 	.word	0x20009d2e

0801b2b0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 801b2b0:	b580      	push	{r7, lr}
 801b2b2:	b082      	sub	sp, #8
 801b2b4:	af00      	add	r7, sp, #0
 801b2b6:	6078      	str	r0, [r7, #4]
 801b2b8:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801b2ba:	687b      	ldr	r3, [r7, #4]
 801b2bc:	685b      	ldr	r3, [r3, #4]
 801b2be:	687a      	ldr	r2, [r7, #4]
 801b2c0:	68d2      	ldr	r2, [r2, #12]
 801b2c2:	1052      	asrs	r2, r2, #1
 801b2c4:	1898      	adds	r0, r3, r2
 801b2c6:	687b      	ldr	r3, [r7, #4]
 801b2c8:	68db      	ldr	r3, [r3, #12]
 801b2ca:	f003 0301 	and.w	r3, r3, #1
 801b2ce:	2b00      	cmp	r3, #0
 801b2d0:	d102      	bne.n	801b2d8 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_+0x28>
 801b2d2:	687b      	ldr	r3, [r7, #4]
 801b2d4:	689b      	ldr	r3, [r3, #8]
 801b2d6:	e00a      	b.n	801b2ee <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_+0x3e>
 801b2d8:	687b      	ldr	r3, [r7, #4]
 801b2da:	685b      	ldr	r3, [r3, #4]
 801b2dc:	687a      	ldr	r2, [r7, #4]
 801b2de:	68d2      	ldr	r2, [r2, #12]
 801b2e0:	1052      	asrs	r2, r2, #1
 801b2e2:	4413      	add	r3, r2
 801b2e4:	681b      	ldr	r3, [r3, #0]
 801b2e6:	687a      	ldr	r2, [r7, #4]
 801b2e8:	6892      	ldr	r2, [r2, #8]
 801b2ea:	4413      	add	r3, r2
 801b2ec:	681b      	ldr	r3, [r3, #0]
 801b2ee:	6839      	ldr	r1, [r7, #0]
 801b2f0:	4798      	blx	r3
    }
 801b2f2:	bf00      	nop
 801b2f4:	3708      	adds	r7, #8
 801b2f6:	46bd      	mov	sp, r7
 801b2f8:	bd80      	pop	{r7, pc}

0801b2fa <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 801b2fa:	b480      	push	{r7}
 801b2fc:	b083      	sub	sp, #12
 801b2fe:	af00      	add	r7, sp, #0
 801b300:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801b302:	687b      	ldr	r3, [r7, #4]
 801b304:	685b      	ldr	r3, [r3, #4]
 801b306:	2b00      	cmp	r3, #0
 801b308:	d010      	beq.n	801b32c <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x32>
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	689b      	ldr	r3, [r3, #8]
 801b30e:	2b00      	cmp	r3, #0
 801b310:	d107      	bne.n	801b322 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x28>
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	68db      	ldr	r3, [r3, #12]
 801b316:	f003 0301 	and.w	r3, r3, #1
 801b31a:	2b00      	cmp	r3, #0
 801b31c:	d101      	bne.n	801b322 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x28>
 801b31e:	2301      	movs	r3, #1
 801b320:	e000      	b.n	801b324 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x2a>
 801b322:	2300      	movs	r3, #0
 801b324:	2b01      	cmp	r3, #1
 801b326:	d001      	beq.n	801b32c <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x32>
 801b328:	2301      	movs	r3, #1
 801b32a:	e000      	b.n	801b32e <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x34>
 801b32c:	2300      	movs	r3, #0
    }
 801b32e:	4618      	mov	r0, r3
 801b330:	370c      	adds	r7, #12
 801b332:	46bd      	mov	sp, r7
 801b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b338:	4770      	bx	lr
	...

0801b33c <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 801b33c:	b580      	push	{r7, lr}
 801b33e:	b082      	sub	sp, #8
 801b340:	af00      	add	r7, sp, #0
 801b342:	6078      	str	r0, [r7, #4]
 801b344:	4a06      	ldr	r2, [pc, #24]	; (801b360 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	601a      	str	r2, [r3, #0]
 801b34a:	687b      	ldr	r3, [r7, #4]
 801b34c:	3304      	adds	r3, #4
 801b34e:	4618      	mov	r0, r3
 801b350:	f7f3 fb58 	bl	800ea04 <_ZN8touchgfx9ContainerD1Ev>
 801b354:	687b      	ldr	r3, [r7, #4]
 801b356:	4618      	mov	r0, r3
 801b358:	3708      	adds	r7, #8
 801b35a:	46bd      	mov	sp, r7
 801b35c:	bd80      	pop	{r7, pc}
 801b35e:	bf00      	nop
 801b360:	080261e8 	.word	0x080261e8

0801b364 <_ZN8touchgfx6ScreenD0Ev>:
 801b364:	b580      	push	{r7, lr}
 801b366:	b082      	sub	sp, #8
 801b368:	af00      	add	r7, sp, #0
 801b36a:	6078      	str	r0, [r7, #4]
 801b36c:	6878      	ldr	r0, [r7, #4]
 801b36e:	f7ff ffe5 	bl	801b33c <_ZN8touchgfx6ScreenD1Ev>
 801b372:	213c      	movs	r1, #60	; 0x3c
 801b374:	6878      	ldr	r0, [r7, #4]
 801b376:	f007 f909 	bl	802258c <_ZdlPvj>
 801b37a:	687b      	ldr	r3, [r7, #4]
 801b37c:	4618      	mov	r0, r3
 801b37e:	3708      	adds	r7, #8
 801b380:	46bd      	mov	sp, r7
 801b382:	bd80      	pop	{r7, pc}

0801b384 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 801b384:	b480      	push	{r7}
 801b386:	b083      	sub	sp, #12
 801b388:	af00      	add	r7, sp, #0
 801b38a:	6078      	str	r0, [r7, #4]
 801b38c:	bf00      	nop
 801b38e:	370c      	adds	r7, #12
 801b390:	46bd      	mov	sp, r7
 801b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b396:	4770      	bx	lr

0801b398 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 801b398:	b480      	push	{r7}
 801b39a:	b083      	sub	sp, #12
 801b39c:	af00      	add	r7, sp, #0
 801b39e:	6078      	str	r0, [r7, #4]
 801b3a0:	bf00      	nop
 801b3a2:	370c      	adds	r7, #12
 801b3a4:	46bd      	mov	sp, r7
 801b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3aa:	4770      	bx	lr

0801b3ac <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 801b3ac:	b480      	push	{r7}
 801b3ae:	b083      	sub	sp, #12
 801b3b0:	af00      	add	r7, sp, #0
 801b3b2:	6078      	str	r0, [r7, #4]
 801b3b4:	bf00      	nop
 801b3b6:	370c      	adds	r7, #12
 801b3b8:	46bd      	mov	sp, r7
 801b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3be:	4770      	bx	lr

0801b3c0 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 801b3c0:	b480      	push	{r7}
 801b3c2:	b083      	sub	sp, #12
 801b3c4:	af00      	add	r7, sp, #0
 801b3c6:	6078      	str	r0, [r7, #4]
    {
    }
 801b3c8:	bf00      	nop
 801b3ca:	370c      	adds	r7, #12
 801b3cc:	46bd      	mov	sp, r7
 801b3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3d2:	4770      	bx	lr

0801b3d4 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 801b3d4:	b480      	push	{r7}
 801b3d6:	b083      	sub	sp, #12
 801b3d8:	af00      	add	r7, sp, #0
 801b3da:	6078      	str	r0, [r7, #4]
 801b3dc:	460b      	mov	r3, r1
 801b3de:	70fb      	strb	r3, [r7, #3]
    {
    }
 801b3e0:	bf00      	nop
 801b3e2:	370c      	adds	r7, #12
 801b3e4:	46bd      	mov	sp, r7
 801b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3ea:	4770      	bx	lr

0801b3ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 801b3ec:	b580      	push	{r7, lr}
 801b3ee:	b082      	sub	sp, #8
 801b3f0:	af00      	add	r7, sp, #0
 801b3f2:	6078      	str	r0, [r7, #4]
 801b3f4:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 801b3f6:	687b      	ldr	r3, [r7, #4]
 801b3f8:	3304      	adds	r3, #4
 801b3fa:	6839      	ldr	r1, [r7, #0]
 801b3fc:	4618      	mov	r0, r3
 801b3fe:	f7f3 fb51 	bl	800eaa4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801b402:	bf00      	nop
 801b404:	3708      	adds	r7, #8
 801b406:	46bd      	mov	sp, r7
 801b408:	bd80      	pop	{r7, pc}

0801b40a <_ZN8touchgfx8TextArea14setLinespacingEt>:
    inline void setLinespacing(uint16_t space)
 801b40a:	b480      	push	{r7}
 801b40c:	b083      	sub	sp, #12
 801b40e:	af00      	add	r7, sp, #0
 801b410:	6078      	str	r0, [r7, #4]
 801b412:	460b      	mov	r3, r1
 801b414:	807b      	strh	r3, [r7, #2]
        linespace = space;
 801b416:	687b      	ldr	r3, [r7, #4]
 801b418:	887a      	ldrh	r2, [r7, #2]
 801b41a:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 801b41c:	bf00      	nop
 801b41e:	370c      	adds	r7, #12
 801b420:	46bd      	mov	sp, r7
 801b422:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b426:	4770      	bx	lr

0801b428 <_ZN8touchgfx14ButtonWithIcon8setIconXEs>:
    void setIconX(int16_t x)
 801b428:	b480      	push	{r7}
 801b42a:	b083      	sub	sp, #12
 801b42c:	af00      	add	r7, sp, #0
 801b42e:	6078      	str	r0, [r7, #4]
 801b430:	460b      	mov	r3, r1
 801b432:	807b      	strh	r3, [r7, #2]
        iconX = x;
 801b434:	687b      	ldr	r3, [r7, #4]
 801b436:	887a      	ldrh	r2, [r7, #2]
 801b438:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 801b43a:	bf00      	nop
 801b43c:	370c      	adds	r7, #12
 801b43e:	46bd      	mov	sp, r7
 801b440:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b444:	4770      	bx	lr

0801b446 <_ZN8touchgfx14ButtonWithIcon8setIconYEs>:
    void setIconY(int16_t y)
 801b446:	b480      	push	{r7}
 801b448:	b083      	sub	sp, #12
 801b44a:	af00      	add	r7, sp, #0
 801b44c:	6078      	str	r0, [r7, #4]
 801b44e:	460b      	mov	r3, r1
 801b450:	807b      	strh	r3, [r7, #2]
        iconY = y;
 801b452:	687b      	ldr	r3, [r7, #4]
 801b454:	887a      	ldrh	r2, [r7, #2]
 801b456:	875a      	strh	r2, [r3, #58]	; 0x3a
    }
 801b458:	bf00      	nop
 801b45a:	370c      	adds	r7, #12
 801b45c:	46bd      	mov	sp, r7
 801b45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b462:	4770      	bx	lr

0801b464 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>:
    void setIconXY(int16_t x, int16_t y)
 801b464:	b580      	push	{r7, lr}
 801b466:	b082      	sub	sp, #8
 801b468:	af00      	add	r7, sp, #0
 801b46a:	6078      	str	r0, [r7, #4]
 801b46c:	460b      	mov	r3, r1
 801b46e:	807b      	strh	r3, [r7, #2]
 801b470:	4613      	mov	r3, r2
 801b472:	803b      	strh	r3, [r7, #0]
        setIconX(x);
 801b474:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801b478:	4619      	mov	r1, r3
 801b47a:	6878      	ldr	r0, [r7, #4]
 801b47c:	f7ff ffd4 	bl	801b428 <_ZN8touchgfx14ButtonWithIcon8setIconXEs>
        setIconY(y);
 801b480:	f9b7 3000 	ldrsh.w	r3, [r7]
 801b484:	4619      	mov	r1, r3
 801b486:	6878      	ldr	r0, [r7, #4]
 801b488:	f7ff ffdd 	bl	801b446 <_ZN8touchgfx14ButtonWithIcon8setIconYEs>
    }
 801b48c:	bf00      	nop
 801b48e:	3708      	adds	r7, #8
 801b490:	46bd      	mov	sp, r7
 801b492:	bd80      	pop	{r7, pc}

0801b494 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 801b494:	b580      	push	{r7, lr}
 801b496:	b082      	sub	sp, #8
 801b498:	af00      	add	r7, sp, #0
 801b49a:	6078      	str	r0, [r7, #4]
 801b49c:	4a05      	ldr	r2, [pc, #20]	; (801b4b4 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	601a      	str	r2, [r3, #0]
 801b4a2:	687b      	ldr	r3, [r7, #4]
 801b4a4:	4618      	mov	r0, r3
 801b4a6:	f7ff ff49 	bl	801b33c <_ZN8touchgfx6ScreenD1Ev>
 801b4aa:	687b      	ldr	r3, [r7, #4]
 801b4ac:	4618      	mov	r0, r3
 801b4ae:	3708      	adds	r7, #8
 801b4b0:	46bd      	mov	sp, r7
 801b4b2:	bd80      	pop	{r7, pc}
 801b4b4:	08025338 	.word	0x08025338

0801b4b8 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 801b4b8:	b580      	push	{r7, lr}
 801b4ba:	b082      	sub	sp, #8
 801b4bc:	af00      	add	r7, sp, #0
 801b4be:	6078      	str	r0, [r7, #4]
 801b4c0:	6878      	ldr	r0, [r7, #4]
 801b4c2:	f7ff ffe7 	bl	801b494 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 801b4c6:	2140      	movs	r1, #64	; 0x40
 801b4c8:	6878      	ldr	r0, [r7, #4]
 801b4ca:	f007 f85f 	bl	802258c <_ZdlPvj>
 801b4ce:	687b      	ldr	r3, [r7, #4]
 801b4d0:	4618      	mov	r0, r3
 801b4d2:	3708      	adds	r7, #8
 801b4d4:	46bd      	mov	sp, r7
 801b4d6:	bd80      	pop	{r7, pc}

0801b4d8 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 801b4d8:	b580      	push	{r7, lr}
 801b4da:	b082      	sub	sp, #8
 801b4dc:	af00      	add	r7, sp, #0
 801b4de:	6078      	str	r0, [r7, #4]
 801b4e0:	4a1b      	ldr	r2, [pc, #108]	; (801b550 <_ZN15Screen1ViewBaseD1Ev+0x78>)
 801b4e2:	687b      	ldr	r3, [r7, #4]
 801b4e4:	601a      	str	r2, [r3, #0]
 801b4e6:	687b      	ldr	r3, [r7, #4]
 801b4e8:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 801b4ec:	4618      	mov	r0, r3
 801b4ee:	f000 fa69 	bl	801b9c4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801b4f2:	687b      	ldr	r3, [r7, #4]
 801b4f4:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 801b4f8:	4618      	mov	r0, r3
 801b4fa:	f7f5 f80b 	bl	8010514 <_ZN8touchgfx14ButtonWithIconD1Ev>
 801b4fe:	687b      	ldr	r3, [r7, #4]
 801b500:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801b504:	4618      	mov	r0, r3
 801b506:	f7f4 fbcb 	bl	800fca0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801b50a:	687b      	ldr	r3, [r7, #4]
 801b50c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801b510:	4618      	mov	r0, r3
 801b512:	f7f3 fed9 	bl	800f2c8 <_ZN8touchgfx3BoxD1Ev>
 801b516:	687b      	ldr	r3, [r7, #4]
 801b518:	33d8      	adds	r3, #216	; 0xd8
 801b51a:	4618      	mov	r0, r3
 801b51c:	f7f4 fa88 	bl	800fa30 <_ZN8touchgfx8TextAreaD1Ev>
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	33a4      	adds	r3, #164	; 0xa4
 801b524:	4618      	mov	r0, r3
 801b526:	f7f4 fa83 	bl	800fa30 <_ZN8touchgfx8TextAreaD1Ev>
 801b52a:	687b      	ldr	r3, [r7, #4]
 801b52c:	3370      	adds	r3, #112	; 0x70
 801b52e:	4618      	mov	r0, r3
 801b530:	f7f4 f844 	bl	800f5bc <_ZN8touchgfx6ButtonD1Ev>
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	3340      	adds	r3, #64	; 0x40
 801b538:	4618      	mov	r0, r3
 801b53a:	f7f3 fec5 	bl	800f2c8 <_ZN8touchgfx3BoxD1Ev>
 801b53e:	687b      	ldr	r3, [r7, #4]
 801b540:	4618      	mov	r0, r3
 801b542:	f7ff ffa7 	bl	801b494 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 801b546:	687b      	ldr	r3, [r7, #4]
 801b548:	4618      	mov	r0, r3
 801b54a:	3708      	adds	r7, #8
 801b54c:	46bd      	mov	sp, r7
 801b54e:	bd80      	pop	{r7, pc}
 801b550:	080252e8 	.word	0x080252e8

0801b554 <_ZN15Screen1ViewBaseD0Ev>:
 801b554:	b580      	push	{r7, lr}
 801b556:	b082      	sub	sp, #8
 801b558:	af00      	add	r7, sp, #0
 801b55a:	6078      	str	r0, [r7, #4]
 801b55c:	6878      	ldr	r0, [r7, #4]
 801b55e:	f7ff ffbb 	bl	801b4d8 <_ZN15Screen1ViewBaseD1Ev>
 801b562:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 801b566:	6878      	ldr	r0, [r7, #4]
 801b568:	f007 f810 	bl	802258c <_ZdlPvj>
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	4618      	mov	r0, r3
 801b570:	3708      	adds	r7, #8
 801b572:	46bd      	mov	sp, r7
 801b574:	bd80      	pop	{r7, pc}

0801b576 <_ZN15Screen1ViewBase12button3clickEv>:
    virtual void setupScreen();

    /*
     * Custom Action Handlers
     */
    virtual void button3click()
 801b576:	b480      	push	{r7}
 801b578:	b083      	sub	sp, #12
 801b57a:	af00      	add	r7, sp, #0
 801b57c:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1View
    }
 801b57e:	bf00      	nop
 801b580:	370c      	adds	r7, #12
 801b582:	46bd      	mov	sp, r7
 801b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b588:	4770      	bx	lr

0801b58a <_ZN15Screen1ViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 801b58a:	b580      	push	{r7, lr}
 801b58c:	b082      	sub	sp, #8
 801b58e:	af00      	add	r7, sp, #0
 801b590:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(Application::getInstance());
 801b592:	f003 f9e3 	bl	801e95c <_ZN8touchgfx11Application11getInstanceEv>
 801b596:	4603      	mov	r3, r0
    }
 801b598:	4618      	mov	r0, r3
 801b59a:	3708      	adds	r7, #8
 801b59c:	46bd      	mov	sp, r7
 801b59e:	bd80      	pop	{r7, pc}

0801b5a0 <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase() :
 801b5a0:	b590      	push	{r4, r7, lr}
 801b5a2:	b091      	sub	sp, #68	; 0x44
 801b5a4:	af02      	add	r7, sp, #8
 801b5a6:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 801b5a8:	687b      	ldr	r3, [r7, #4]
 801b5aa:	4618      	mov	r0, r3
 801b5ac:	f000 f9d4 	bl	801b958 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 801b5b0:	4ad0      	ldr	r2, [pc, #832]	; (801b8f4 <_ZN15Screen1ViewBaseC1Ev+0x354>)
 801b5b2:	687b      	ldr	r3, [r7, #4]
 801b5b4:	601a      	str	r2, [r3, #0]
 801b5b6:	687b      	ldr	r3, [r7, #4]
 801b5b8:	3340      	adds	r3, #64	; 0x40
 801b5ba:	4618      	mov	r0, r3
 801b5bc:	f7f3 fe64 	bl	800f288 <_ZN8touchgfx3BoxC1Ev>
 801b5c0:	687b      	ldr	r3, [r7, #4]
 801b5c2:	3370      	adds	r3, #112	; 0x70
 801b5c4:	4618      	mov	r0, r3
 801b5c6:	f7f3 ffd5 	bl	800f574 <_ZN8touchgfx6ButtonC1Ev>
 801b5ca:	687b      	ldr	r3, [r7, #4]
 801b5cc:	33a4      	adds	r3, #164	; 0xa4
 801b5ce:	4618      	mov	r0, r3
 801b5d0:	f7f4 f980 	bl	800f8d4 <_ZN8touchgfx8TextAreaC1Ev>
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	33d8      	adds	r3, #216	; 0xd8
 801b5d8:	4618      	mov	r0, r3
 801b5da:	f7f4 f97b 	bl	800f8d4 <_ZN8touchgfx8TextAreaC1Ev>
 801b5de:	687b      	ldr	r3, [r7, #4]
 801b5e0:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801b5e4:	4618      	mov	r0, r3
 801b5e6:	f7f3 fe4f 	bl	800f288 <_ZN8touchgfx3BoxC1Ev>
 801b5ea:	687b      	ldr	r3, [r7, #4]
 801b5ec:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801b5f0:	4618      	mov	r0, r3
 801b5f2:	f7f4 fa73 	bl	800fadc <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801b5f6:	687b      	ldr	r3, [r7, #4]
 801b5f8:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 801b5fc:	4618      	mov	r0, r3
 801b5fe:	f7f4 fe79 	bl	80102f4 <_ZN8touchgfx14ButtonWithIconC1Ev>
 801b602:	687b      	ldr	r3, [r7, #4]
 801b604:	f503 70f0 	add.w	r0, r3, #480	; 0x1e0
 801b608:	4bbb      	ldr	r3, [pc, #748]	; (801b8f8 <_ZN15Screen1ViewBaseC1Ev+0x358>)
 801b60a:	60bb      	str	r3, [r7, #8]
 801b60c:	2300      	movs	r3, #0
 801b60e:	60fb      	str	r3, [r7, #12]
 801b610:	f107 0308 	add.w	r3, r7, #8
 801b614:	cb0c      	ldmia	r3, {r2, r3}
 801b616:	6879      	ldr	r1, [r7, #4]
 801b618:	f000 f9b4 	bl	801b984 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    box1.setPosition(1, 0, 480, 272);
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801b622:	f44f 7388 	mov.w	r3, #272	; 0x110
 801b626:	9300      	str	r3, [sp, #0]
 801b628:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801b62c:	2200      	movs	r2, #0
 801b62e:	2101      	movs	r1, #1
 801b630:	f7f3 f8d4 	bl	800e7dc <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(38, 51, 59));
 801b634:	687b      	ldr	r3, [r7, #4]
 801b636:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801b63a:	223b      	movs	r2, #59	; 0x3b
 801b63c:	2133      	movs	r1, #51	; 0x33
 801b63e:	2026      	movs	r0, #38	; 0x26
 801b640:	f004 fdd6 	bl	80201f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801b644:	4603      	mov	r3, r0
 801b646:	4619      	mov	r1, r3
 801b648:	4620      	mov	r0, r4
 801b64a:	f7f3 fe5f 	bl	800f30c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    button3.setXY(155, 34);
 801b64e:	687b      	ldr	r3, [r7, #4]
 801b650:	3370      	adds	r3, #112	; 0x70
 801b652:	2222      	movs	r2, #34	; 0x22
 801b654:	219b      	movs	r1, #155	; 0x9b
 801b656:	4618      	mov	r0, r3
 801b658:	f7f3 f925 	bl	800e8a6 <_ZN8touchgfx8Drawable5setXYEss>
    button3.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 801b65c:	687b      	ldr	r3, [r7, #4]
 801b65e:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801b662:	f107 0310 	add.w	r3, r7, #16
 801b666:	2100      	movs	r1, #0
 801b668:	4618      	mov	r0, r3
 801b66a:	f7f3 fd1d 	bl	800f0a8 <_ZN8touchgfx6BitmapC1Et>
 801b66e:	f107 0314 	add.w	r3, r7, #20
 801b672:	2101      	movs	r1, #1
 801b674:	4618      	mov	r0, r3
 801b676:	f7f3 fd17 	bl	800f0a8 <_ZN8touchgfx6BitmapC1Et>
 801b67a:	f107 0214 	add.w	r2, r7, #20
 801b67e:	f107 0310 	add.w	r3, r7, #16
 801b682:	4619      	mov	r1, r3
 801b684:	4620      	mov	r0, r4
 801b686:	f7f4 fdd2 	bl	801022e <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button3.setAction(buttonCallback);
 801b68a:	687b      	ldr	r3, [r7, #4]
 801b68c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 801b690:	687b      	ldr	r3, [r7, #4]
 801b692:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 801b696:	4619      	mov	r1, r3
 801b698:	4610      	mov	r0, r2
 801b69a:	f7f3 ff3b 	bl	800f514 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    textArea1.setXY(181, 52);
 801b69e:	687b      	ldr	r3, [r7, #4]
 801b6a0:	33a4      	adds	r3, #164	; 0xa4
 801b6a2:	2234      	movs	r2, #52	; 0x34
 801b6a4:	21b5      	movs	r1, #181	; 0xb5
 801b6a6:	4618      	mov	r0, r3
 801b6a8:	f7f3 f8fd 	bl	800e8a6 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(199, 196, 196));
 801b6ac:	687b      	ldr	r3, [r7, #4]
 801b6ae:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801b6b2:	22c4      	movs	r2, #196	; 0xc4
 801b6b4:	21c4      	movs	r1, #196	; 0xc4
 801b6b6:	20c7      	movs	r0, #199	; 0xc7
 801b6b8:	f004 fd9a 	bl	80201f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801b6bc:	4603      	mov	r3, r0
 801b6be:	4619      	mov	r1, r3
 801b6c0:	4620      	mov	r0, r4
 801b6c2:	f7f4 f94a 	bl	800f95a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea1.setLinespacing(0);
 801b6c6:	687b      	ldr	r3, [r7, #4]
 801b6c8:	33a4      	adds	r3, #164	; 0xa4
 801b6ca:	2100      	movs	r1, #0
 801b6cc:	4618      	mov	r0, r3
 801b6ce:	f7ff fe9c 	bl	801b40a <_ZN8touchgfx8TextArea14setLinespacingEt>
    textArea1.setTypedText(TypedText(T_SINGLEUSEID1));
 801b6d2:	687b      	ldr	r3, [r7, #4]
 801b6d4:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801b6d8:	f107 0318 	add.w	r3, r7, #24
 801b6dc:	2100      	movs	r1, #0
 801b6de:	4618      	mov	r0, r3
 801b6e0:	f7f4 f848 	bl	800f774 <_ZN8touchgfx9TypedTextC1Et>
 801b6e4:	8b39      	ldrh	r1, [r7, #24]
 801b6e6:	4620      	mov	r0, r4
 801b6e8:	f7f5 faef 	bl	8010cca <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    textArea2.setXY(42, -136);
 801b6ec:	687b      	ldr	r3, [r7, #4]
 801b6ee:	33d8      	adds	r3, #216	; 0xd8
 801b6f0:	f06f 0287 	mvn.w	r2, #135	; 0x87
 801b6f4:	212a      	movs	r1, #42	; 0x2a
 801b6f6:	4618      	mov	r0, r3
 801b6f8:	f7f3 f8d5 	bl	800e8a6 <_ZN8touchgfx8Drawable5setXYEss>
    textArea2.setColor(touchgfx::Color::getColorFrom24BitRGB(194, 188, 188));
 801b6fc:	687b      	ldr	r3, [r7, #4]
 801b6fe:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 801b702:	22bc      	movs	r2, #188	; 0xbc
 801b704:	21bc      	movs	r1, #188	; 0xbc
 801b706:	20c2      	movs	r0, #194	; 0xc2
 801b708:	f004 fd72 	bl	80201f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801b70c:	4603      	mov	r3, r0
 801b70e:	4619      	mov	r1, r3
 801b710:	4620      	mov	r0, r4
 801b712:	f7f4 f922 	bl	800f95a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea2.setLinespacing(0);
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	33d8      	adds	r3, #216	; 0xd8
 801b71a:	2100      	movs	r1, #0
 801b71c:	4618      	mov	r0, r3
 801b71e:	f7ff fe74 	bl	801b40a <_ZN8touchgfx8TextArea14setLinespacingEt>
    textArea2.setTypedText(TypedText(T_SINGLEUSEID2));
 801b722:	687b      	ldr	r3, [r7, #4]
 801b724:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 801b728:	f107 031c 	add.w	r3, r7, #28
 801b72c:	2101      	movs	r1, #1
 801b72e:	4618      	mov	r0, r3
 801b730:	f7f4 f820 	bl	800f774 <_ZN8touchgfx9TypedTextC1Et>
 801b734:	8bb9      	ldrh	r1, [r7, #28]
 801b736:	4620      	mov	r0, r4
 801b738:	f7f5 fac7 	bl	8010cca <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    box2.setPosition(36, 111, 408, 50);
 801b73c:	687b      	ldr	r3, [r7, #4]
 801b73e:	f503 7086 	add.w	r0, r3, #268	; 0x10c
 801b742:	2332      	movs	r3, #50	; 0x32
 801b744:	9300      	str	r3, [sp, #0]
 801b746:	f44f 73cc 	mov.w	r3, #408	; 0x198
 801b74a:	226f      	movs	r2, #111	; 0x6f
 801b74c:	2124      	movs	r1, #36	; 0x24
 801b74e:	f7f3 f845 	bl	800e7dc <_ZN8touchgfx8Drawable11setPositionEssss>
    box2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801b752:	687b      	ldr	r3, [r7, #4]
 801b754:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 801b758:	22ff      	movs	r2, #255	; 0xff
 801b75a:	21ff      	movs	r1, #255	; 0xff
 801b75c:	20ff      	movs	r0, #255	; 0xff
 801b75e:	f004 fd47 	bl	80201f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801b762:	4603      	mov	r3, r0
 801b764:	4619      	mov	r1, r3
 801b766:	4620      	mov	r0, r4
 801b768:	f7f3 fdd0 	bl	800f30c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    textArea3.setPosition(133, 124, 214, 25);
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	f503 709e 	add.w	r0, r3, #316	; 0x13c
 801b772:	2319      	movs	r3, #25
 801b774:	9300      	str	r3, [sp, #0]
 801b776:	23d6      	movs	r3, #214	; 0xd6
 801b778:	227c      	movs	r2, #124	; 0x7c
 801b77a:	2185      	movs	r1, #133	; 0x85
 801b77c:	f7f3 f82e 	bl	800e7dc <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea3.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 801b780:	687b      	ldr	r3, [r7, #4]
 801b782:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 801b786:	2200      	movs	r2, #0
 801b788:	2100      	movs	r1, #0
 801b78a:	2000      	movs	r0, #0
 801b78c:	f004 fd30 	bl	80201f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801b790:	4603      	mov	r3, r0
 801b792:	4619      	mov	r1, r3
 801b794:	4620      	mov	r0, r4
 801b796:	f7f4 f8e0 	bl	800f95a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea3.setLinespacing(0);
 801b79a:	687b      	ldr	r3, [r7, #4]
 801b79c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801b7a0:	2100      	movs	r1, #0
 801b7a2:	4618      	mov	r0, r3
 801b7a4:	f7ff fe31 	bl	801b40a <_ZN8touchgfx8TextArea14setLinespacingEt>
    Unicode::snprintf(textArea3Buffer, TEXTAREA3_SIZE, "%s", TypedText(T_SINGLEUSEID4).getText());
 801b7a8:	687b      	ldr	r3, [r7, #4]
 801b7aa:	f503 74d8 	add.w	r4, r3, #432	; 0x1b0
 801b7ae:	f107 0320 	add.w	r3, r7, #32
 801b7b2:	2103      	movs	r1, #3
 801b7b4:	4618      	mov	r0, r3
 801b7b6:	f7f3 ffdd 	bl	800f774 <_ZN8touchgfx9TypedTextC1Et>
 801b7ba:	f107 0320 	add.w	r3, r7, #32
 801b7be:	4618      	mov	r0, r3
 801b7c0:	f7f3 fffc 	bl	800f7bc <_ZNK8touchgfx9TypedText7getTextEv>
 801b7c4:	4603      	mov	r3, r0
 801b7c6:	4a4d      	ldr	r2, [pc, #308]	; (801b8fc <_ZN15Screen1ViewBaseC1Ev+0x35c>)
 801b7c8:	2118      	movs	r1, #24
 801b7ca:	4620      	mov	r0, r4
 801b7cc:	f004 fd02 	bl	80201d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea3.setWildcard(textArea3Buffer);
 801b7d0:	687b      	ldr	r3, [r7, #4]
 801b7d2:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 801b7d6:	687b      	ldr	r3, [r7, #4]
 801b7d8:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 801b7dc:	4619      	mov	r1, r3
 801b7de:	4610      	mov	r0, r2
 801b7e0:	f7f4 fa16 	bl	800fc10 <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea3.setTypedText(TypedText(T_SINGLEUSEID3));
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 801b7ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b7ee:	2102      	movs	r1, #2
 801b7f0:	4618      	mov	r0, r3
 801b7f2:	f7f3 ffbf 	bl	800f774 <_ZN8touchgfx9TypedTextC1Et>
 801b7f6:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 801b7f8:	4620      	mov	r0, r4
 801b7fa:	f7f5 fa66 	bl	8010cca <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    buttonWithIcon1.setXY(155, 198);
 801b7fe:	687b      	ldr	r3, [r7, #4]
 801b800:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 801b804:	22c6      	movs	r2, #198	; 0xc6
 801b806:	219b      	movs	r1, #155	; 0x9b
 801b808:	4618      	mov	r0, r3
 801b80a:	f7f3 f84c 	bl	800e8a6 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithIcon1.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID), Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID), Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID));
 801b80e:	687b      	ldr	r3, [r7, #4]
 801b810:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 801b814:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b818:	2100      	movs	r1, #0
 801b81a:	4618      	mov	r0, r3
 801b81c:	f7f3 fc44 	bl	800f0a8 <_ZN8touchgfx6BitmapC1Et>
 801b820:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b824:	2101      	movs	r1, #1
 801b826:	4618      	mov	r0, r3
 801b828:	f7f3 fc3e 	bl	800f0a8 <_ZN8touchgfx6BitmapC1Et>
 801b82c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b830:	2102      	movs	r1, #2
 801b832:	4618      	mov	r0, r3
 801b834:	f7f3 fc38 	bl	800f0a8 <_ZN8touchgfx6BitmapC1Et>
 801b838:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b83c:	2102      	movs	r1, #2
 801b83e:	4618      	mov	r0, r3
 801b840:	f7f3 fc32 	bl	800f0a8 <_ZN8touchgfx6BitmapC1Et>
 801b844:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801b848:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801b84c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801b850:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b854:	9300      	str	r3, [sp, #0]
 801b856:	4603      	mov	r3, r0
 801b858:	4620      	mov	r0, r4
 801b85a:	f7f4 fd71 	bl	8010340 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    buttonWithIcon1.setIconXY(77, 15);
 801b85e:	687b      	ldr	r3, [r7, #4]
 801b860:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 801b864:	220f      	movs	r2, #15
 801b866:	214d      	movs	r1, #77	; 0x4d
 801b868:	4618      	mov	r0, r3
 801b86a:	f7ff fdfb 	bl	801b464 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    buttonWithIcon1.setAction(buttonCallback);
 801b86e:	687b      	ldr	r3, [r7, #4]
 801b870:	f503 72ba 	add.w	r2, r3, #372	; 0x174
 801b874:	687b      	ldr	r3, [r7, #4]
 801b876:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 801b87a:	4619      	mov	r1, r3
 801b87c:	4610      	mov	r0, r2
 801b87e:	f7f3 fe49 	bl	800f514 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(box1);
 801b882:	687a      	ldr	r2, [r7, #4]
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	3340      	adds	r3, #64	; 0x40
 801b888:	4619      	mov	r1, r3
 801b88a:	4610      	mov	r0, r2
 801b88c:	f7ff fdae 	bl	801b3ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button3);
 801b890:	687a      	ldr	r2, [r7, #4]
 801b892:	687b      	ldr	r3, [r7, #4]
 801b894:	3370      	adds	r3, #112	; 0x70
 801b896:	4619      	mov	r1, r3
 801b898:	4610      	mov	r0, r2
 801b89a:	f7ff fda7 	bl	801b3ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 801b89e:	687a      	ldr	r2, [r7, #4]
 801b8a0:	687b      	ldr	r3, [r7, #4]
 801b8a2:	33a4      	adds	r3, #164	; 0xa4
 801b8a4:	4619      	mov	r1, r3
 801b8a6:	4610      	mov	r0, r2
 801b8a8:	f7ff fda0 	bl	801b3ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea2);
 801b8ac:	687a      	ldr	r2, [r7, #4]
 801b8ae:	687b      	ldr	r3, [r7, #4]
 801b8b0:	33d8      	adds	r3, #216	; 0xd8
 801b8b2:	4619      	mov	r1, r3
 801b8b4:	4610      	mov	r0, r2
 801b8b6:	f7ff fd99 	bl	801b3ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box2);
 801b8ba:	687a      	ldr	r2, [r7, #4]
 801b8bc:	687b      	ldr	r3, [r7, #4]
 801b8be:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801b8c2:	4619      	mov	r1, r3
 801b8c4:	4610      	mov	r0, r2
 801b8c6:	f7ff fd91 	bl	801b3ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea3);
 801b8ca:	687a      	ldr	r2, [r7, #4]
 801b8cc:	687b      	ldr	r3, [r7, #4]
 801b8ce:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801b8d2:	4619      	mov	r1, r3
 801b8d4:	4610      	mov	r0, r2
 801b8d6:	f7ff fd89 	bl	801b3ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithIcon1);
 801b8da:	687a      	ldr	r2, [r7, #4]
 801b8dc:	687b      	ldr	r3, [r7, #4]
 801b8de:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 801b8e2:	4619      	mov	r1, r3
 801b8e4:	4610      	mov	r0, r2
 801b8e6:	f7ff fd81 	bl	801b3ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	4618      	mov	r0, r3
 801b8ee:	373c      	adds	r7, #60	; 0x3c
 801b8f0:	46bd      	mov	sp, r7
 801b8f2:	bd90      	pop	{r4, r7, pc}
 801b8f4:	080252e8 	.word	0x080252e8
 801b8f8:	0801b915 	.word	0x0801b915
 801b8fc:	08024658 	.word	0x08024658

0801b900 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 801b900:	b480      	push	{r7}
 801b902:	b083      	sub	sp, #12
 801b904:	af00      	add	r7, sp, #0
 801b906:	6078      	str	r0, [r7, #4]

}
 801b908:	bf00      	nop
 801b90a:	370c      	adds	r7, #12
 801b90c:	46bd      	mov	sp, r7
 801b90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b912:	4770      	bx	lr

0801b914 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 801b914:	b580      	push	{r7, lr}
 801b916:	b082      	sub	sp, #8
 801b918:	af00      	add	r7, sp, #0
 801b91a:	6078      	str	r0, [r7, #4]
 801b91c:	6039      	str	r1, [r7, #0]
    if (&src == &button3)
 801b91e:	687b      	ldr	r3, [r7, #4]
 801b920:	3370      	adds	r3, #112	; 0x70
 801b922:	683a      	ldr	r2, [r7, #0]
 801b924:	429a      	cmp	r2, r3
 801b926:	d106      	bne.n	801b936 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction3
        //When button3 clicked call virtual function
        //Call button3click
        button3click();
 801b928:	687b      	ldr	r3, [r7, #4]
 801b92a:	681b      	ldr	r3, [r3, #0]
 801b92c:	332c      	adds	r3, #44	; 0x2c
 801b92e:	681b      	ldr	r3, [r3, #0]
 801b930:	6878      	ldr	r0, [r7, #4]
 801b932:	4798      	blx	r3
        //Interaction4
        //When buttonWithIcon1 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards West
        application().gotoScreen2ScreenSlideTransitionWest();
    }
}
 801b934:	e00c      	b.n	801b950 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
    else if (&src == &buttonWithIcon1)
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 801b93c:	683a      	ldr	r2, [r7, #0]
 801b93e:	429a      	cmp	r2, r3
 801b940:	d106      	bne.n	801b950 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
        application().gotoScreen2ScreenSlideTransitionWest();
 801b942:	6878      	ldr	r0, [r7, #4]
 801b944:	f7ff fe21 	bl	801b58a <_ZN15Screen1ViewBase11applicationEv>
 801b948:	4603      	mov	r3, r0
 801b94a:	4618      	mov	r0, r3
 801b94c:	f7fe fefa 	bl	801a744 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionWestEv>
}
 801b950:	bf00      	nop
 801b952:	3708      	adds	r7, #8
 801b954:	46bd      	mov	sp, r7
 801b956:	bd80      	pop	{r7, pc}

0801b958 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View() : presenter(0)
 801b958:	b580      	push	{r7, lr}
 801b95a:	b082      	sub	sp, #8
 801b95c:	af00      	add	r7, sp, #0
 801b95e:	6078      	str	r0, [r7, #4]
 801b960:	687b      	ldr	r3, [r7, #4]
 801b962:	4618      	mov	r0, r3
 801b964:	f003 fe8a 	bl	801f67c <_ZN8touchgfx6ScreenC1Ev>
 801b968:	4a05      	ldr	r2, [pc, #20]	; (801b980 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 801b96a:	687b      	ldr	r3, [r7, #4]
 801b96c:	601a      	str	r2, [r3, #0]
 801b96e:	687b      	ldr	r3, [r7, #4]
 801b970:	2200      	movs	r2, #0
 801b972:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801b974:	687b      	ldr	r3, [r7, #4]
 801b976:	4618      	mov	r0, r3
 801b978:	3708      	adds	r7, #8
 801b97a:	46bd      	mov	sp, r7
 801b97c:	bd80      	pop	{r7, pc}
 801b97e:	bf00      	nop
 801b980:	08025338 	.word	0x08025338

0801b984 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 801b984:	b580      	push	{r7, lr}
 801b986:	b084      	sub	sp, #16
 801b988:	af00      	add	r7, sp, #0
 801b98a:	60f8      	str	r0, [r7, #12]
 801b98c:	60b9      	str	r1, [r7, #8]
 801b98e:	4639      	mov	r1, r7
 801b990:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 801b994:	68fb      	ldr	r3, [r7, #12]
 801b996:	4618      	mov	r0, r3
 801b998:	f7f3 fe32 	bl	800f600 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 801b99c:	4a08      	ldr	r2, [pc, #32]	; (801b9c0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 801b99e:	68fb      	ldr	r3, [r7, #12]
 801b9a0:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801b9a2:	68fb      	ldr	r3, [r7, #12]
 801b9a4:	68ba      	ldr	r2, [r7, #8]
 801b9a6:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 801b9a8:	68fb      	ldr	r3, [r7, #12]
 801b9aa:	3308      	adds	r3, #8
 801b9ac:	463a      	mov	r2, r7
 801b9ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b9b2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801b9b6:	68fb      	ldr	r3, [r7, #12]
 801b9b8:	4618      	mov	r0, r3
 801b9ba:	3710      	adds	r7, #16
 801b9bc:	46bd      	mov	sp, r7
 801b9be:	bd80      	pop	{r7, pc}
 801b9c0:	08025320 	.word	0x08025320

0801b9c4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 801b9c4:	b580      	push	{r7, lr}
 801b9c6:	b082      	sub	sp, #8
 801b9c8:	af00      	add	r7, sp, #0
 801b9ca:	6078      	str	r0, [r7, #4]
 801b9cc:	4a05      	ldr	r2, [pc, #20]	; (801b9e4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 801b9ce:	687b      	ldr	r3, [r7, #4]
 801b9d0:	601a      	str	r2, [r3, #0]
 801b9d2:	687b      	ldr	r3, [r7, #4]
 801b9d4:	4618      	mov	r0, r3
 801b9d6:	f7f3 fe23 	bl	800f620 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 801b9da:	687b      	ldr	r3, [r7, #4]
 801b9dc:	4618      	mov	r0, r3
 801b9de:	3708      	adds	r7, #8
 801b9e0:	46bd      	mov	sp, r7
 801b9e2:	bd80      	pop	{r7, pc}
 801b9e4:	08025320 	.word	0x08025320

0801b9e8 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 801b9e8:	b580      	push	{r7, lr}
 801b9ea:	b082      	sub	sp, #8
 801b9ec:	af00      	add	r7, sp, #0
 801b9ee:	6078      	str	r0, [r7, #4]
 801b9f0:	6878      	ldr	r0, [r7, #4]
 801b9f2:	f7ff ffe7 	bl	801b9c4 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801b9f6:	2110      	movs	r1, #16
 801b9f8:	6878      	ldr	r0, [r7, #4]
 801b9fa:	f006 fdc7 	bl	802258c <_ZdlPvj>
 801b9fe:	687b      	ldr	r3, [r7, #4]
 801ba00:	4618      	mov	r0, r3
 801ba02:	3708      	adds	r7, #8
 801ba04:	46bd      	mov	sp, r7
 801ba06:	bd80      	pop	{r7, pc}

0801ba08 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 801ba08:	b580      	push	{r7, lr}
 801ba0a:	b082      	sub	sp, #8
 801ba0c:	af00      	add	r7, sp, #0
 801ba0e:	6078      	str	r0, [r7, #4]
 801ba10:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801ba12:	687b      	ldr	r3, [r7, #4]
 801ba14:	685b      	ldr	r3, [r3, #4]
 801ba16:	687a      	ldr	r2, [r7, #4]
 801ba18:	68d2      	ldr	r2, [r2, #12]
 801ba1a:	1052      	asrs	r2, r2, #1
 801ba1c:	1898      	adds	r0, r3, r2
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	68db      	ldr	r3, [r3, #12]
 801ba22:	f003 0301 	and.w	r3, r3, #1
 801ba26:	2b00      	cmp	r3, #0
 801ba28:	d102      	bne.n	801ba30 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 801ba2a:	687b      	ldr	r3, [r7, #4]
 801ba2c:	689b      	ldr	r3, [r3, #8]
 801ba2e:	e00a      	b.n	801ba46 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 801ba30:	687b      	ldr	r3, [r7, #4]
 801ba32:	685b      	ldr	r3, [r3, #4]
 801ba34:	687a      	ldr	r2, [r7, #4]
 801ba36:	68d2      	ldr	r2, [r2, #12]
 801ba38:	1052      	asrs	r2, r2, #1
 801ba3a:	4413      	add	r3, r2
 801ba3c:	681b      	ldr	r3, [r3, #0]
 801ba3e:	687a      	ldr	r2, [r7, #4]
 801ba40:	6892      	ldr	r2, [r2, #8]
 801ba42:	4413      	add	r3, r2
 801ba44:	681b      	ldr	r3, [r3, #0]
 801ba46:	6839      	ldr	r1, [r7, #0]
 801ba48:	4798      	blx	r3
    }
 801ba4a:	bf00      	nop
 801ba4c:	3708      	adds	r7, #8
 801ba4e:	46bd      	mov	sp, r7
 801ba50:	bd80      	pop	{r7, pc}

0801ba52 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 801ba52:	b480      	push	{r7}
 801ba54:	b083      	sub	sp, #12
 801ba56:	af00      	add	r7, sp, #0
 801ba58:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801ba5a:	687b      	ldr	r3, [r7, #4]
 801ba5c:	685b      	ldr	r3, [r3, #4]
 801ba5e:	2b00      	cmp	r3, #0
 801ba60:	d010      	beq.n	801ba84 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801ba62:	687b      	ldr	r3, [r7, #4]
 801ba64:	689b      	ldr	r3, [r3, #8]
 801ba66:	2b00      	cmp	r3, #0
 801ba68:	d107      	bne.n	801ba7a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801ba6a:	687b      	ldr	r3, [r7, #4]
 801ba6c:	68db      	ldr	r3, [r3, #12]
 801ba6e:	f003 0301 	and.w	r3, r3, #1
 801ba72:	2b00      	cmp	r3, #0
 801ba74:	d101      	bne.n	801ba7a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801ba76:	2301      	movs	r3, #1
 801ba78:	e000      	b.n	801ba7c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 801ba7a:	2300      	movs	r3, #0
 801ba7c:	2b01      	cmp	r3, #1
 801ba7e:	d001      	beq.n	801ba84 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801ba80:	2301      	movs	r3, #1
 801ba82:	e000      	b.n	801ba86 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 801ba84:	2300      	movs	r3, #0
    }
 801ba86:	4618      	mov	r0, r3
 801ba88:	370c      	adds	r7, #12
 801ba8a:	46bd      	mov	sp, r7
 801ba8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba90:	4770      	bx	lr
	...

0801ba94 <_ZN8touchgfx23AbstractButtonContainerC1Ev>:
    /**
     * @fn AbstractButtonContainer::AbstractButtonContainer()
     *
     * @brief Default constructor.
     */
    AbstractButtonContainer() : pressed(false), alpha(255), action(0)
 801ba94:	b580      	push	{r7, lr}
 801ba96:	b082      	sub	sp, #8
 801ba98:	af00      	add	r7, sp, #0
 801ba9a:	6078      	str	r0, [r7, #4]
 801ba9c:	687b      	ldr	r3, [r7, #4]
 801ba9e:	4618      	mov	r0, r3
 801baa0:	f7f3 fb7a 	bl	800f198 <_ZN8touchgfx9ContainerC1Ev>
 801baa4:	4a0b      	ldr	r2, [pc, #44]	; (801bad4 <_ZN8touchgfx23AbstractButtonContainerC1Ev+0x40>)
 801baa6:	687b      	ldr	r3, [r7, #4]
 801baa8:	601a      	str	r2, [r3, #0]
 801baaa:	687b      	ldr	r3, [r7, #4]
 801baac:	2200      	movs	r2, #0
 801baae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 801bab2:	687b      	ldr	r3, [r7, #4]
 801bab4:	22ff      	movs	r2, #255	; 0xff
 801bab6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	2200      	movs	r2, #0
 801babe:	631a      	str	r2, [r3, #48]	; 0x30
    {
        setTouchable(true);
 801bac0:	687b      	ldr	r3, [r7, #4]
 801bac2:	2101      	movs	r1, #1
 801bac4:	4618      	mov	r0, r3
 801bac6:	f7f3 fb2d 	bl	800f124 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 801baca:	687b      	ldr	r3, [r7, #4]
 801bacc:	4618      	mov	r0, r3
 801bace:	3708      	adds	r7, #8
 801bad0:	46bd      	mov	sp, r7
 801bad2:	bd80      	pop	{r7, pc}
 801bad4:	080255f0 	.word	0x080255f0

0801bad8 <_ZN8touchgfx23AbstractButtonContainerD1Ev>:
    /**
     * @fn virtual AbstractButtonContainer::~AbstractButtonContainer()
     *
     * @brief Destructor.
     */
    virtual ~AbstractButtonContainer() {}
 801bad8:	b580      	push	{r7, lr}
 801bada:	b082      	sub	sp, #8
 801badc:	af00      	add	r7, sp, #0
 801bade:	6078      	str	r0, [r7, #4]
 801bae0:	4a05      	ldr	r2, [pc, #20]	; (801baf8 <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x20>)
 801bae2:	687b      	ldr	r3, [r7, #4]
 801bae4:	601a      	str	r2, [r3, #0]
 801bae6:	687b      	ldr	r3, [r7, #4]
 801bae8:	4618      	mov	r0, r3
 801baea:	f7f2 ff8b 	bl	800ea04 <_ZN8touchgfx9ContainerD1Ev>
 801baee:	687b      	ldr	r3, [r7, #4]
 801baf0:	4618      	mov	r0, r3
 801baf2:	3708      	adds	r7, #8
 801baf4:	46bd      	mov	sp, r7
 801baf6:	bd80      	pop	{r7, pc}
 801baf8:	080255f0 	.word	0x080255f0

0801bafc <_ZN8touchgfx23AbstractButtonContainerD0Ev>:
 801bafc:	b580      	push	{r7, lr}
 801bafe:	b082      	sub	sp, #8
 801bb00:	af00      	add	r7, sp, #0
 801bb02:	6078      	str	r0, [r7, #4]
 801bb04:	6878      	ldr	r0, [r7, #4]
 801bb06:	f7ff ffe7 	bl	801bad8 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 801bb0a:	2134      	movs	r1, #52	; 0x34
 801bb0c:	6878      	ldr	r0, [r7, #4]
 801bb0e:	f006 fd3d 	bl	802258c <_ZdlPvj>
 801bb12:	687b      	ldr	r3, [r7, #4]
 801bb14:	4618      	mov	r0, r3
 801bb16:	3708      	adds	r7, #8
 801bb18:	46bd      	mov	sp, r7
 801bb1a:	bd80      	pop	{r7, pc}

0801bb1c <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>:
     *
     * @brief Sets the pressed state.
     *
     * @param isPressed True if is pressed, false if not.
     */
    void setPressed(bool isPressed)
 801bb1c:	b580      	push	{r7, lr}
 801bb1e:	b082      	sub	sp, #8
 801bb20:	af00      	add	r7, sp, #0
 801bb22:	6078      	str	r0, [r7, #4]
 801bb24:	460b      	mov	r3, r1
 801bb26:	70fb      	strb	r3, [r7, #3]
    {
        pressed = isPressed;
 801bb28:	687b      	ldr	r3, [r7, #4]
 801bb2a:	78fa      	ldrb	r2, [r7, #3]
 801bb2c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        handlePressedUpdated();
 801bb30:	687b      	ldr	r3, [r7, #4]
 801bb32:	681b      	ldr	r3, [r3, #0]
 801bb34:	3388      	adds	r3, #136	; 0x88
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	6878      	ldr	r0, [r7, #4]
 801bb3a:	4798      	blx	r3
    }
 801bb3c:	bf00      	nop
 801bb3e:	3708      	adds	r7, #8
 801bb40:	46bd      	mov	sp, r7
 801bb42:	bd80      	pop	{r7, pc}

0801bb44 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>:
     *
     * @brief Gets the pressed state.
     *
     * @return True if it succeeds, false if it fails.
     */
    bool getPressed()
 801bb44:	b480      	push	{r7}
 801bb46:	b083      	sub	sp, #12
 801bb48:	af00      	add	r7, sp, #0
 801bb4a:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 801bb4c:	687b      	ldr	r3, [r7, #4]
 801bb4e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 801bb52:	4618      	mov	r0, r3
 801bb54:	370c      	adds	r7, #12
 801bb56:	46bd      	mov	sp, r7
 801bb58:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb5c:	4770      	bx	lr

0801bb5e <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>:
     *
     * @brief Gets the alpha.
     *
     * @return The alpha value.
     */
    uint8_t getAlpha() const
 801bb5e:	b480      	push	{r7}
 801bb60:	b083      	sub	sp, #12
 801bb62:	af00      	add	r7, sp, #0
 801bb64:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 801bb66:	687b      	ldr	r3, [r7, #4]
 801bb68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    }
 801bb6c:	4618      	mov	r0, r3
 801bb6e:	370c      	adds	r7, #12
 801bb70:	46bd      	mov	sp, r7
 801bb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb76:	4770      	bx	lr

0801bb78 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     *
     * @brief Sets an action callback.
     *
     * @param callback The callback.
     */
    void setAction(GenericCallback< const AbstractButtonContainer& >& callback)
 801bb78:	b480      	push	{r7}
 801bb7a:	b083      	sub	sp, #12
 801bb7c:	af00      	add	r7, sp, #0
 801bb7e:	6078      	str	r0, [r7, #4]
 801bb80:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	683a      	ldr	r2, [r7, #0]
 801bb86:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801bb88:	bf00      	nop
 801bb8a:	370c      	adds	r7, #12
 801bb8c:	46bd      	mov	sp, r7
 801bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb92:	4770      	bx	lr

0801bb94 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>:
    /**
     * @fn virtual void AbstractButtonContainer::handlePressedUpdated()
     *
     * @brief Handles the pressed updated.
     */
    virtual void handlePressedUpdated() {};
 801bb94:	b480      	push	{r7}
 801bb96:	b083      	sub	sp, #12
 801bb98:	af00      	add	r7, sp, #0
 801bb9a:	6078      	str	r0, [r7, #4]
 801bb9c:	bf00      	nop
 801bb9e:	370c      	adds	r7, #12
 801bba0:	46bd      	mov	sp, r7
 801bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bba6:	4770      	bx	lr

0801bba8 <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>:
    /**
     * @fn virtual void AbstractButtonContainer::handleAlphaUpdated()
     *
     * @brief Handles the alpha updated.
     */
    virtual void handleAlphaUpdated() {};
 801bba8:	b480      	push	{r7}
 801bbaa:	b083      	sub	sp, #12
 801bbac:	af00      	add	r7, sp, #0
 801bbae:	6078      	str	r0, [r7, #4]
 801bbb0:	bf00      	nop
 801bbb2:	370c      	adds	r7, #12
 801bbb4:	46bd      	mov	sp, r7
 801bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbba:	4770      	bx	lr

0801bbbc <_ZN8touchgfx18ClickButtonTriggerC1Ev>:
    /**
     * @fn ClickButtonTrigger::ClickButtonTrigger()
     *
     * @brief Default constructor.
     */
    ClickButtonTrigger() :
 801bbbc:	b580      	push	{r7, lr}
 801bbbe:	b082      	sub	sp, #8
 801bbc0:	af00      	add	r7, sp, #0
 801bbc2:	6078      	str	r0, [r7, #4]
        AbstractButtonContainer() { }
 801bbc4:	687b      	ldr	r3, [r7, #4]
 801bbc6:	4618      	mov	r0, r3
 801bbc8:	f7ff ff64 	bl	801ba94 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 801bbcc:	4a03      	ldr	r2, [pc, #12]	; (801bbdc <_ZN8touchgfx18ClickButtonTriggerC1Ev+0x20>)
 801bbce:	687b      	ldr	r3, [r7, #4]
 801bbd0:	601a      	str	r2, [r3, #0]
 801bbd2:	687b      	ldr	r3, [r7, #4]
 801bbd4:	4618      	mov	r0, r3
 801bbd6:	3708      	adds	r7, #8
 801bbd8:	46bd      	mov	sp, r7
 801bbda:	bd80      	pop	{r7, pc}
 801bbdc:	08025540 	.word	0x08025540

0801bbe0 <_ZN8touchgfx18ClickButtonTriggerD1Ev>:
    /**
     * @fn virtual ClickButtonTrigger::~ClickButtonTrigger()
     *
     * @brief Destructor.
     */
    virtual ~ClickButtonTrigger() { }
 801bbe0:	b580      	push	{r7, lr}
 801bbe2:	b082      	sub	sp, #8
 801bbe4:	af00      	add	r7, sp, #0
 801bbe6:	6078      	str	r0, [r7, #4]
 801bbe8:	4a05      	ldr	r2, [pc, #20]	; (801bc00 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x20>)
 801bbea:	687b      	ldr	r3, [r7, #4]
 801bbec:	601a      	str	r2, [r3, #0]
 801bbee:	687b      	ldr	r3, [r7, #4]
 801bbf0:	4618      	mov	r0, r3
 801bbf2:	f7ff ff71 	bl	801bad8 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 801bbf6:	687b      	ldr	r3, [r7, #4]
 801bbf8:	4618      	mov	r0, r3
 801bbfa:	3708      	adds	r7, #8
 801bbfc:	46bd      	mov	sp, r7
 801bbfe:	bd80      	pop	{r7, pc}
 801bc00:	08025540 	.word	0x08025540

0801bc04 <_ZN8touchgfx18ClickButtonTriggerD0Ev>:
 801bc04:	b580      	push	{r7, lr}
 801bc06:	b082      	sub	sp, #8
 801bc08:	af00      	add	r7, sp, #0
 801bc0a:	6078      	str	r0, [r7, #4]
 801bc0c:	6878      	ldr	r0, [r7, #4]
 801bc0e:	f7ff ffe7 	bl	801bbe0 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 801bc12:	2134      	movs	r1, #52	; 0x34
 801bc14:	6878      	ldr	r0, [r7, #4]
 801bc16:	f006 fcb9 	bl	802258c <_ZdlPvj>
 801bc1a:	687b      	ldr	r3, [r7, #4]
 801bc1c:	4618      	mov	r0, r3
 801bc1e:	3708      	adds	r7, #8
 801bc20:	46bd      	mov	sp, r7
 801bc22:	bd80      	pop	{r7, pc}

0801bc24 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *        callback is called when receiving a REALEASED event in
     *        PRESSED state.
     *
     * @param event The event.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 801bc24:	b580      	push	{r7, lr}
 801bc26:	b084      	sub	sp, #16
 801bc28:	af00      	add	r7, sp, #0
 801bc2a:	6078      	str	r0, [r7, #4]
 801bc2c:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	4618      	mov	r0, r3
 801bc32:	f7ff ff87 	bl	801bb44 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 801bc36:	4603      	mov	r3, r0
 801bc38:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 801bc3a:	6838      	ldr	r0, [r7, #0]
 801bc3c:	f7f3 fbfa 	bl	800f434 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 801bc40:	4603      	mov	r3, r0
 801bc42:	2b00      	cmp	r3, #0
 801bc44:	bf0c      	ite	eq
 801bc46:	2301      	moveq	r3, #1
 801bc48:	2300      	movne	r3, #0
 801bc4a:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 801bc4c:	7bbb      	ldrb	r3, [r7, #14]
 801bc4e:	2b00      	cmp	r3, #0
 801bc50:	d005      	beq.n	801bc5e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 801bc52:	7bfb      	ldrb	r3, [r7, #15]
 801bc54:	f083 0301 	eor.w	r3, r3, #1
 801bc58:	b2db      	uxtb	r3, r3
 801bc5a:	2b00      	cmp	r3, #0
 801bc5c:	d108      	bne.n	801bc70 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 801bc5e:	7bbb      	ldrb	r3, [r7, #14]
 801bc60:	f083 0301 	eor.w	r3, r3, #1
 801bc64:	b2db      	uxtb	r3, r3
 801bc66:	2b00      	cmp	r3, #0
 801bc68:	d00f      	beq.n	801bc8a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 801bc6a:	7bfb      	ldrb	r3, [r7, #15]
 801bc6c:	2b00      	cmp	r3, #0
 801bc6e:	d00c      	beq.n	801bc8a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 801bc70:	687b      	ldr	r3, [r7, #4]
 801bc72:	7bba      	ldrb	r2, [r7, #14]
 801bc74:	4611      	mov	r1, r2
 801bc76:	4618      	mov	r0, r3
 801bc78:	f7ff ff50 	bl	801bb1c <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 801bc7c:	687a      	ldr	r2, [r7, #4]
 801bc7e:	687b      	ldr	r3, [r7, #4]
 801bc80:	681b      	ldr	r3, [r3, #0]
 801bc82:	3314      	adds	r3, #20
 801bc84:	681b      	ldr	r3, [r3, #0]
 801bc86:	4610      	mov	r0, r2
 801bc88:	4798      	blx	r3
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED) && action)
 801bc8a:	7bfb      	ldrb	r3, [r7, #15]
 801bc8c:	2b00      	cmp	r3, #0
 801bc8e:	d00b      	beq.n	801bca8 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 801bc90:	6838      	ldr	r0, [r7, #0]
 801bc92:	f7f3 fbcf 	bl	800f434 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 801bc96:	4603      	mov	r3, r0
 801bc98:	2b01      	cmp	r3, #1
 801bc9a:	d105      	bne.n	801bca8 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 801bc9c:	687b      	ldr	r3, [r7, #4]
 801bc9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bca0:	2b00      	cmp	r3, #0
 801bca2:	d001      	beq.n	801bca8 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 801bca4:	2301      	movs	r3, #1
 801bca6:	e000      	b.n	801bcaa <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x86>
 801bca8:	2300      	movs	r3, #0
 801bcaa:	2b00      	cmp	r3, #0
 801bcac:	d015      	beq.n	801bcda <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb6>
        {
            if (action->isValid())
 801bcae:	687b      	ldr	r3, [r7, #4]
 801bcb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801bcb2:	687b      	ldr	r3, [r7, #4]
 801bcb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bcb6:	681b      	ldr	r3, [r3, #0]
 801bcb8:	330c      	adds	r3, #12
 801bcba:	681b      	ldr	r3, [r3, #0]
 801bcbc:	4610      	mov	r0, r2
 801bcbe:	4798      	blx	r3
 801bcc0:	4603      	mov	r3, r0
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	d009      	beq.n	801bcda <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb6>
            {
                action->execute(*this);
 801bcc6:	687b      	ldr	r3, [r7, #4]
 801bcc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801bcca:	687b      	ldr	r3, [r7, #4]
 801bccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bcce:	681b      	ldr	r3, [r3, #0]
 801bcd0:	3308      	adds	r3, #8
 801bcd2:	681b      	ldr	r3, [r3, #0]
 801bcd4:	6879      	ldr	r1, [r7, #4]
 801bcd6:	4610      	mov	r0, r2
 801bcd8:	4798      	blx	r3
            }
        }
    }
 801bcda:	bf00      	nop
 801bcdc:	3710      	adds	r7, #16
 801bcde:	46bd      	mov	sp, r7
 801bce0:	bd80      	pop	{r7, pc}
	...

0801bce4 <_ZN8touchgfx13BoxWithBorderC1Ev>:
    BoxWithBorder() : Widget(), alpha(255), color(0), borderColor(0), borderSize(0)
 801bce4:	b580      	push	{r7, lr}
 801bce6:	b082      	sub	sp, #8
 801bce8:	af00      	add	r7, sp, #0
 801bcea:	6078      	str	r0, [r7, #4]
 801bcec:	687b      	ldr	r3, [r7, #4]
 801bcee:	4618      	mov	r0, r3
 801bcf0:	f7f3 fa68 	bl	800f1c4 <_ZN8touchgfx6WidgetC1Ev>
 801bcf4:	4a0d      	ldr	r2, [pc, #52]	; (801bd2c <_ZN8touchgfx13BoxWithBorderC1Ev+0x48>)
 801bcf6:	687b      	ldr	r3, [r7, #4]
 801bcf8:	601a      	str	r2, [r3, #0]
 801bcfa:	687b      	ldr	r3, [r7, #4]
 801bcfc:	22ff      	movs	r2, #255	; 0xff
 801bcfe:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 801bd02:	687b      	ldr	r3, [r7, #4]
 801bd04:	3328      	adds	r3, #40	; 0x28
 801bd06:	2100      	movs	r1, #0
 801bd08:	4618      	mov	r0, r3
 801bd0a:	f7f3 f9a7 	bl	800f05c <_ZN8touchgfx9colortypeC1Em>
 801bd0e:	687b      	ldr	r3, [r7, #4]
 801bd10:	332c      	adds	r3, #44	; 0x2c
 801bd12:	2100      	movs	r1, #0
 801bd14:	4618      	mov	r0, r3
 801bd16:	f7f3 f9a1 	bl	800f05c <_ZN8touchgfx9colortypeC1Em>
 801bd1a:	687b      	ldr	r3, [r7, #4]
 801bd1c:	2200      	movs	r2, #0
 801bd1e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }
 801bd22:	687b      	ldr	r3, [r7, #4]
 801bd24:	4618      	mov	r0, r3
 801bd26:	3708      	adds	r7, #8
 801bd28:	46bd      	mov	sp, r7
 801bd2a:	bd80      	pop	{r7, pc}
 801bd2c:	08024b54 	.word	0x08024b54

0801bd30 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>:
    void setColor(colortype color)
 801bd30:	b480      	push	{r7}
 801bd32:	b083      	sub	sp, #12
 801bd34:	af00      	add	r7, sp, #0
 801bd36:	6078      	str	r0, [r7, #4]
 801bd38:	6039      	str	r1, [r7, #0]
        this->color = color;
 801bd3a:	687b      	ldr	r3, [r7, #4]
 801bd3c:	683a      	ldr	r2, [r7, #0]
 801bd3e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 801bd40:	bf00      	nop
 801bd42:	370c      	adds	r7, #12
 801bd44:	46bd      	mov	sp, r7
 801bd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd4a:	4770      	bx	lr

0801bd4c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
    void setBorderColor(colortype color)
 801bd4c:	b480      	push	{r7}
 801bd4e:	b083      	sub	sp, #12
 801bd50:	af00      	add	r7, sp, #0
 801bd52:	6078      	str	r0, [r7, #4]
 801bd54:	6039      	str	r1, [r7, #0]
        this->borderColor = color;
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	683a      	ldr	r2, [r7, #0]
 801bd5a:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 801bd5c:	bf00      	nop
 801bd5e:	370c      	adds	r7, #12
 801bd60:	46bd      	mov	sp, r7
 801bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd66:	4770      	bx	lr

0801bd68 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>:
    void setBorderSize(uint8_t size)
 801bd68:	b480      	push	{r7}
 801bd6a:	b083      	sub	sp, #12
 801bd6c:	af00      	add	r7, sp, #0
 801bd6e:	6078      	str	r0, [r7, #4]
 801bd70:	460b      	mov	r3, r1
 801bd72:	70fb      	strb	r3, [r7, #3]
        borderSize = size;
 801bd74:	687b      	ldr	r3, [r7, #4]
 801bd76:	78fa      	ldrb	r2, [r7, #3]
 801bd78:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }
 801bd7c:	bf00      	nop
 801bd7e:	370c      	adds	r7, #12
 801bd80:	46bd      	mov	sp, r7
 801bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd86:	4770      	bx	lr

0801bd88 <_ZN8touchgfx13BoxWithBorder8setAlphaEh>:
    void setAlpha(uint8_t alpha)
 801bd88:	b480      	push	{r7}
 801bd8a:	b083      	sub	sp, #12
 801bd8c:	af00      	add	r7, sp, #0
 801bd8e:	6078      	str	r0, [r7, #4]
 801bd90:	460b      	mov	r3, r1
 801bd92:	70fb      	strb	r3, [r7, #3]
        this->alpha = alpha;
 801bd94:	687b      	ldr	r3, [r7, #4]
 801bd96:	78fa      	ldrb	r2, [r7, #3]
 801bd98:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 801bd9c:	bf00      	nop
 801bd9e:	370c      	adds	r7, #12
 801bda0:	46bd      	mov	sp, r7
 801bda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bda6:	4770      	bx	lr

0801bda8 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
    void setLabelText(TypedText t)
 801bda8:	b580      	push	{r7, lr}
 801bdaa:	b082      	sub	sp, #8
 801bdac:	af00      	add	r7, sp, #0
 801bdae:	6078      	str	r0, [r7, #4]
 801bdb0:	8039      	strh	r1, [r7, #0]
        typedText = t;
 801bdb2:	687b      	ldr	r3, [r7, #4]
 801bdb4:	883a      	ldrh	r2, [r7, #0]
 801bdb6:	869a      	strh	r2, [r3, #52]	; 0x34
        updateTextPosition();
 801bdb8:	6878      	ldr	r0, [r7, #4]
 801bdba:	f000 f834 	bl	801be26 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 801bdbe:	bf00      	nop
 801bdc0:	3708      	adds	r7, #8
 801bdc2:	46bd      	mov	sp, r7
 801bdc4:	bd80      	pop	{r7, pc}

0801bdc6 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>:
    void setLabelColor(colortype col, bool performInvalidate = false)
 801bdc6:	b580      	push	{r7, lr}
 801bdc8:	b084      	sub	sp, #16
 801bdca:	af00      	add	r7, sp, #0
 801bdcc:	60f8      	str	r0, [r7, #12]
 801bdce:	60b9      	str	r1, [r7, #8]
 801bdd0:	4613      	mov	r3, r2
 801bdd2:	71fb      	strb	r3, [r7, #7]
        color = col;
 801bdd4:	68fb      	ldr	r3, [r7, #12]
 801bdd6:	68ba      	ldr	r2, [r7, #8]
 801bdd8:	639a      	str	r2, [r3, #56]	; 0x38
        if (performInvalidate)
 801bdda:	79fb      	ldrb	r3, [r7, #7]
 801bddc:	2b00      	cmp	r3, #0
 801bdde:	d006      	beq.n	801bdee <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb+0x28>
            invalidate();
 801bde0:	68fa      	ldr	r2, [r7, #12]
 801bde2:	68fb      	ldr	r3, [r7, #12]
 801bde4:	681b      	ldr	r3, [r3, #0]
 801bde6:	3314      	adds	r3, #20
 801bde8:	681b      	ldr	r3, [r3, #0]
 801bdea:	4610      	mov	r0, r2
 801bdec:	4798      	blx	r3
    }
 801bdee:	bf00      	nop
 801bdf0:	3710      	adds	r7, #16
 801bdf2:	46bd      	mov	sp, r7
 801bdf4:	bd80      	pop	{r7, pc}

0801bdf6 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>:
    void setLabelColorPressed(colortype col, bool performInvalidate = false)
 801bdf6:	b580      	push	{r7, lr}
 801bdf8:	b084      	sub	sp, #16
 801bdfa:	af00      	add	r7, sp, #0
 801bdfc:	60f8      	str	r0, [r7, #12]
 801bdfe:	60b9      	str	r1, [r7, #8]
 801be00:	4613      	mov	r3, r2
 801be02:	71fb      	strb	r3, [r7, #7]
        colorPressed = col;
 801be04:	68fb      	ldr	r3, [r7, #12]
 801be06:	68ba      	ldr	r2, [r7, #8]
 801be08:	63da      	str	r2, [r3, #60]	; 0x3c
        if (performInvalidate)
 801be0a:	79fb      	ldrb	r3, [r7, #7]
 801be0c:	2b00      	cmp	r3, #0
 801be0e:	d006      	beq.n	801be1e <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb+0x28>
            invalidate();
 801be10:	68fa      	ldr	r2, [r7, #12]
 801be12:	68fb      	ldr	r3, [r7, #12]
 801be14:	681b      	ldr	r3, [r3, #0]
 801be16:	3314      	adds	r3, #20
 801be18:	681b      	ldr	r3, [r3, #0]
 801be1a:	4610      	mov	r0, r2
 801be1c:	4798      	blx	r3
    }
 801be1e:	bf00      	nop
 801be20:	3710      	adds	r7, #16
 801be22:	46bd      	mov	sp, r7
 801be24:	bd80      	pop	{r7, pc}

0801be26 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
    void updateTextPosition()
 801be26:	b590      	push	{r4, r7, lr}
 801be28:	b085      	sub	sp, #20
 801be2a:	af00      	add	r7, sp, #0
 801be2c:	6078      	str	r0, [r7, #4]
        const Font* f = typedText.getFont();
 801be2e:	687b      	ldr	r3, [r7, #4]
 801be30:	3334      	adds	r3, #52	; 0x34
 801be32:	4618      	mov	r0, r3
 801be34:	f7f3 fcd8 	bl	800f7e8 <_ZNK8touchgfx9TypedText7getFontEv>
 801be38:	60f8      	str	r0, [r7, #12]
        const Unicode::UnicodeChar* s = typedText.getText();
 801be3a:	687b      	ldr	r3, [r7, #4]
 801be3c:	3334      	adds	r3, #52	; 0x34
 801be3e:	4618      	mov	r0, r3
 801be40:	f7f3 fcbc 	bl	800f7bc <_ZNK8touchgfx9TypedText7getTextEv>
 801be44:	60b8      	str	r0, [r7, #8]
        textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 801be46:	68fb      	ldr	r3, [r7, #12]
 801be48:	681b      	ldr	r3, [r3, #0]
 801be4a:	3328      	adds	r3, #40	; 0x28
 801be4c:	681b      	ldr	r3, [r3, #0]
 801be4e:	68b9      	ldr	r1, [r7, #8]
 801be50:	68f8      	ldr	r0, [r7, #12]
 801be52:	4798      	blx	r3
 801be54:	4603      	mov	r3, r0
 801be56:	b2dc      	uxtb	r4, r3
 801be58:	68fb      	ldr	r3, [r7, #12]
 801be5a:	681b      	ldr	r3, [r3, #0]
 801be5c:	333c      	adds	r3, #60	; 0x3c
 801be5e:	681b      	ldr	r3, [r3, #0]
 801be60:	68b9      	ldr	r1, [r7, #8]
 801be62:	68f8      	ldr	r0, [r7, #12]
 801be64:	4798      	blx	r3
 801be66:	4603      	mov	r3, r0
 801be68:	b2db      	uxtb	r3, r3
 801be6a:	fb14 f303 	smulbb	r3, r4, r3
 801be6e:	b2dc      	uxtb	r4, r3
 801be70:	68fb      	ldr	r3, [r7, #12]
 801be72:	681b      	ldr	r3, [r3, #0]
 801be74:	3324      	adds	r3, #36	; 0x24
 801be76:	681b      	ldr	r3, [r3, #0]
 801be78:	68b9      	ldr	r1, [r7, #8]
 801be7a:	68f8      	ldr	r0, [r7, #12]
 801be7c:	4798      	blx	r3
 801be7e:	4603      	mov	r3, r0
 801be80:	4423      	add	r3, r4
 801be82:	b2da      	uxtb	r2, r3
 801be84:	687b      	ldr	r3, [r7, #4]
 801be86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
 801be8a:	bf00      	nop
 801be8c:	3714      	adds	r7, #20
 801be8e:	46bd      	mov	sp, r7
 801be90:	bd90      	pop	{r4, r7, pc}
	...

0801be94 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>:
class View : public Screen
 801be94:	b580      	push	{r7, lr}
 801be96:	b082      	sub	sp, #8
 801be98:	af00      	add	r7, sp, #0
 801be9a:	6078      	str	r0, [r7, #4]
 801be9c:	4a05      	ldr	r2, [pc, #20]	; (801beb4 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev+0x20>)
 801be9e:	687b      	ldr	r3, [r7, #4]
 801bea0:	601a      	str	r2, [r3, #0]
 801bea2:	687b      	ldr	r3, [r7, #4]
 801bea4:	4618      	mov	r0, r3
 801bea6:	f7ff fa49 	bl	801b33c <_ZN8touchgfx6ScreenD1Ev>
 801beaa:	687b      	ldr	r3, [r7, #4]
 801beac:	4618      	mov	r0, r3
 801beae:	3708      	adds	r7, #8
 801beb0:	46bd      	mov	sp, r7
 801beb2:	bd80      	pop	{r7, pc}
 801beb4:	0802550c 	.word	0x0802550c

0801beb8 <_ZN8touchgfx4ViewI16Screen2PresenterED0Ev>:
 801beb8:	b580      	push	{r7, lr}
 801beba:	b082      	sub	sp, #8
 801bebc:	af00      	add	r7, sp, #0
 801bebe:	6078      	str	r0, [r7, #4]
 801bec0:	6878      	ldr	r0, [r7, #4]
 801bec2:	f7ff ffe7 	bl	801be94 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 801bec6:	2140      	movs	r1, #64	; 0x40
 801bec8:	6878      	ldr	r0, [r7, #4]
 801beca:	f006 fb5f 	bl	802258c <_ZdlPvj>
 801bece:	687b      	ldr	r3, [r7, #4]
 801bed0:	4618      	mov	r0, r3
 801bed2:	3708      	adds	r7, #8
 801bed4:	46bd      	mov	sp, r7
 801bed6:	bd80      	pop	{r7, pc}

0801bed8 <_ZN15Screen2ViewBaseD1Ev>:

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
 801bed8:	b580      	push	{r7, lr}
 801beda:	b082      	sub	sp, #8
 801bedc:	af00      	add	r7, sp, #0
 801bede:	6078      	str	r0, [r7, #4]
 801bee0:	4a19      	ldr	r2, [pc, #100]	; (801bf48 <_ZN15Screen2ViewBaseD1Ev+0x70>)
 801bee2:	687b      	ldr	r3, [r7, #4]
 801bee4:	601a      	str	r2, [r3, #0]
 801bee6:	687b      	ldr	r3, [r7, #4]
 801bee8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801beec:	4618      	mov	r0, r3
 801beee:	f000 fcc9 	bl	801c884 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 801bef2:	687b      	ldr	r3, [r7, #4]
 801bef4:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 801bef8:	4618      	mov	r0, r3
 801befa:	f000 fce5 	bl	801c8c8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801befe:	687b      	ldr	r3, [r7, #4]
 801bf00:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801bf04:	4618      	mov	r0, r3
 801bf06:	f7f4 fc6f 	bl	80107e8 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 801bf0a:	687b      	ldr	r3, [r7, #4]
 801bf0c:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 801bf10:	4618      	mov	r0, r3
 801bf12:	f7f4 fc69 	bl	80107e8 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 801bf16:	687b      	ldr	r3, [r7, #4]
 801bf18:	33a4      	adds	r3, #164	; 0xa4
 801bf1a:	4618      	mov	r0, r3
 801bf1c:	f000 fa44 	bl	801c3a8 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 801bf20:	687b      	ldr	r3, [r7, #4]
 801bf22:	3370      	adds	r3, #112	; 0x70
 801bf24:	4618      	mov	r0, r3
 801bf26:	f7f3 fd83 	bl	800fa30 <_ZN8touchgfx8TextAreaD1Ev>
 801bf2a:	687b      	ldr	r3, [r7, #4]
 801bf2c:	3340      	adds	r3, #64	; 0x40
 801bf2e:	4618      	mov	r0, r3
 801bf30:	f7f3 f9ca 	bl	800f2c8 <_ZN8touchgfx3BoxD1Ev>
 801bf34:	687b      	ldr	r3, [r7, #4]
 801bf36:	4618      	mov	r0, r3
 801bf38:	f7ff ffac 	bl	801be94 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 801bf3c:	687b      	ldr	r3, [r7, #4]
 801bf3e:	4618      	mov	r0, r3
 801bf40:	3708      	adds	r7, #8
 801bf42:	46bd      	mov	sp, r7
 801bf44:	bd80      	pop	{r7, pc}
 801bf46:	bf00      	nop
 801bf48:	0802536c 	.word	0x0802536c

0801bf4c <_ZN15Screen2ViewBaseD0Ev>:
 801bf4c:	b580      	push	{r7, lr}
 801bf4e:	b082      	sub	sp, #8
 801bf50:	af00      	add	r7, sp, #0
 801bf52:	6078      	str	r0, [r7, #4]
 801bf54:	6878      	ldr	r0, [r7, #4]
 801bf56:	f7ff ffbf 	bl	801bed8 <_ZN15Screen2ViewBaseD1Ev>
 801bf5a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801bf5e:	6878      	ldr	r0, [r7, #4]
 801bf60:	f006 fb14 	bl	802258c <_ZdlPvj>
 801bf64:	687b      	ldr	r3, [r7, #4]
 801bf66:	4618      	mov	r0, r3
 801bf68:	3708      	adds	r7, #8
 801bf6a:	46bd      	mov	sp, r7
 801bf6c:	bd80      	pop	{r7, pc}

0801bf6e <_ZN15Screen2ViewBase17uart_init_clickedEv>:
    virtual void setupScreen();

    /*
     * Custom Action Handlers
     */
    virtual void uart_init_clicked()
 801bf6e:	b480      	push	{r7}
 801bf70:	b083      	sub	sp, #12
 801bf72:	af00      	add	r7, sp, #0
 801bf74:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen2View
    }
 801bf76:	bf00      	nop
 801bf78:	370c      	adds	r7, #12
 801bf7a:	46bd      	mov	sp, r7
 801bf7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf80:	4770      	bx	lr

0801bf82 <_ZN15Screen2ViewBase17uart_send_clickedEv>:

    virtual void uart_send_clicked()
 801bf82:	b480      	push	{r7}
 801bf84:	b083      	sub	sp, #12
 801bf86:	af00      	add	r7, sp, #0
 801bf88:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen2View
    }
 801bf8a:	bf00      	nop
 801bf8c:	370c      	adds	r7, #12
 801bf8e:	46bd      	mov	sp, r7
 801bf90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bf94:	4770      	bx	lr

0801bf96 <_ZN15Screen2ViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 801bf96:	b580      	push	{r7, lr}
 801bf98:	b082      	sub	sp, #8
 801bf9a:	af00      	add	r7, sp, #0
 801bf9c:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(Application::getInstance());
 801bf9e:	f002 fcdd 	bl	801e95c <_ZN8touchgfx11Application11getInstanceEv>
 801bfa2:	4603      	mov	r3, r0
    }
 801bfa4:	4618      	mov	r0, r3
 801bfa6:	3708      	adds	r7, #8
 801bfa8:	46bd      	mov	sp, r7
 801bfaa:	bd80      	pop	{r7, pc}

0801bfac <_ZN15Screen2ViewBaseC1Ev>:
#include <gui_generated/screen2_screen/Screen2ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

Screen2ViewBase::Screen2ViewBase() :
 801bfac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bfb0:	b092      	sub	sp, #72	; 0x48
 801bfb2:	af02      	add	r7, sp, #8
 801bfb4:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler),
    flexButtonCallback(this, &Screen2ViewBase::flexButtonCallbackHandler)
 801bfb6:	687b      	ldr	r3, [r7, #4]
 801bfb8:	4618      	mov	r0, r3
 801bfba:	f000 fa1d 	bl	801c3f8 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>
 801bfbe:	4ad6      	ldr	r2, [pc, #856]	; (801c318 <_ZN15Screen2ViewBaseC1Ev+0x36c>)
 801bfc0:	687b      	ldr	r3, [r7, #4]
 801bfc2:	601a      	str	r2, [r3, #0]
 801bfc4:	687b      	ldr	r3, [r7, #4]
 801bfc6:	3340      	adds	r3, #64	; 0x40
 801bfc8:	4618      	mov	r0, r3
 801bfca:	f7f3 f95d 	bl	800f288 <_ZN8touchgfx3BoxC1Ev>
 801bfce:	687b      	ldr	r3, [r7, #4]
 801bfd0:	3370      	adds	r3, #112	; 0x70
 801bfd2:	4618      	mov	r0, r3
 801bfd4:	f7f3 fc7e 	bl	800f8d4 <_ZN8touchgfx8TextAreaC1Ev>
 801bfd8:	687b      	ldr	r3, [r7, #4]
 801bfda:	33a4      	adds	r3, #164	; 0xa4
 801bfdc:	4618      	mov	r0, r3
 801bfde:	f000 fa21 	bl	801c424 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 801bfe2:	687b      	ldr	r3, [r7, #4]
 801bfe4:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 801bfe8:	4618      	mov	r0, r3
 801bfea:	f7f4 facf 	bl	801058c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 801bfee:	687b      	ldr	r3, [r7, #4]
 801bff0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801bff4:	4618      	mov	r0, r3
 801bff6:	f7f4 fac9 	bl	801058c <_ZN8touchgfx15ButtonWithLabelC1Ev>
 801bffa:	687b      	ldr	r3, [r7, #4]
 801bffc:	f503 70ea 	add.w	r0, r3, #468	; 0x1d4
 801c000:	4bc6      	ldr	r3, [pc, #792]	; (801c31c <_ZN15Screen2ViewBaseC1Ev+0x370>)
 801c002:	60fb      	str	r3, [r7, #12]
 801c004:	2300      	movs	r3, #0
 801c006:	613b      	str	r3, [r7, #16]
 801c008:	f107 030c 	add.w	r3, r7, #12
 801c00c:	cb0c      	ldmia	r3, {r2, r3}
 801c00e:	6879      	ldr	r1, [r7, #4]
 801c010:	f000 fa40 	bl	801c494 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
 801c014:	687b      	ldr	r3, [r7, #4]
 801c016:	f503 70f2 	add.w	r0, r3, #484	; 0x1e4
 801c01a:	4bc1      	ldr	r3, [pc, #772]	; (801c320 <_ZN15Screen2ViewBaseC1Ev+0x374>)
 801c01c:	617b      	str	r3, [r7, #20]
 801c01e:	2300      	movs	r3, #0
 801c020:	61bb      	str	r3, [r7, #24]
 801c022:	f107 0314 	add.w	r3, r7, #20
 801c026:	cb0c      	ldmia	r3, {r2, r3}
 801c028:	6879      	ldr	r1, [r7, #4]
 801c02a:	f000 fa63 	bl	801c4f4 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{
    box1.setPosition(0, 0, 507, 311);
 801c02e:	687b      	ldr	r3, [r7, #4]
 801c030:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801c034:	f240 1337 	movw	r3, #311	; 0x137
 801c038:	9300      	str	r3, [sp, #0]
 801c03a:	f240 13fb 	movw	r3, #507	; 0x1fb
 801c03e:	2200      	movs	r2, #0
 801c040:	2100      	movs	r1, #0
 801c042:	f7f2 fbcb 	bl	800e7dc <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(17, 138, 120));
 801c046:	687b      	ldr	r3, [r7, #4]
 801c048:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801c04c:	2278      	movs	r2, #120	; 0x78
 801c04e:	218a      	movs	r1, #138	; 0x8a
 801c050:	2011      	movs	r0, #17
 801c052:	f004 f8cd 	bl	80201f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801c056:	4603      	mov	r3, r0
 801c058:	4619      	mov	r1, r3
 801c05a:	4620      	mov	r0, r4
 801c05c:	f7f3 f956 	bl	800f30c <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    textArea1.setXY(352, 10);
 801c060:	687b      	ldr	r3, [r7, #4]
 801c062:	3370      	adds	r3, #112	; 0x70
 801c064:	220a      	movs	r2, #10
 801c066:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801c06a:	4618      	mov	r0, r3
 801c06c:	f7f2 fc1b 	bl	800e8a6 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 801c070:	687b      	ldr	r3, [r7, #4]
 801c072:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801c076:	2200      	movs	r2, #0
 801c078:	2100      	movs	r1, #0
 801c07a:	2000      	movs	r0, #0
 801c07c:	f004 f8b8 	bl	80201f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801c080:	4603      	mov	r3, r0
 801c082:	4619      	mov	r1, r3
 801c084:	4620      	mov	r0, r4
 801c086:	f7f3 fc68 	bl	800f95a <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea1.setLinespacing(0);
 801c08a:	687b      	ldr	r3, [r7, #4]
 801c08c:	3370      	adds	r3, #112	; 0x70
 801c08e:	2100      	movs	r1, #0
 801c090:	4618      	mov	r0, r3
 801c092:	f7ff f9ba 	bl	801b40a <_ZN8touchgfx8TextArea14setLinespacingEt>
    textArea1.setTypedText(TypedText(T_SINGLEUSEID5));
 801c096:	687b      	ldr	r3, [r7, #4]
 801c098:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801c09c:	f107 031c 	add.w	r3, r7, #28
 801c0a0:	2104      	movs	r1, #4
 801c0a2:	4618      	mov	r0, r3
 801c0a4:	f7f3 fb66 	bl	800f774 <_ZN8touchgfx9TypedTextC1Et>
 801c0a8:	8bb9      	ldrh	r1, [r7, #28]
 801c0aa:	4620      	mov	r0, r4
 801c0ac:	f7f4 fe0d 	bl	8010cca <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    flexButton1.setBoxWithBorderPosition(0, 0, 95, 44);
 801c0b0:	687b      	ldr	r3, [r7, #4]
 801c0b2:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 801c0b6:	232c      	movs	r3, #44	; 0x2c
 801c0b8:	9300      	str	r3, [sp, #0]
 801c0ba:	235f      	movs	r3, #95	; 0x5f
 801c0bc:	2200      	movs	r2, #0
 801c0be:	2100      	movs	r1, #0
 801c0c0:	f000 fa38 	bl	801c534 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    flexButton1.setBorderSize(0);
 801c0c4:	687b      	ldr	r3, [r7, #4]
 801c0c6:	33a4      	adds	r3, #164	; 0xa4
 801c0c8:	2100      	movs	r1, #0
 801c0ca:	4618      	mov	r0, r3
 801c0cc:	f000 fa52 	bl	801c574 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    flexButton1.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(43, 127, 168), touchgfx::Color::getColorFrom24BitRGB(215, 228, 232), touchgfx::Color::getColorFrom24BitRGB(8, 131, 255), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 801c0d0:	687b      	ldr	r3, [r7, #4]
 801c0d2:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801c0d6:	22a8      	movs	r2, #168	; 0xa8
 801c0d8:	217f      	movs	r1, #127	; 0x7f
 801c0da:	202b      	movs	r0, #43	; 0x2b
 801c0dc:	f004 f888 	bl	80201f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801c0e0:	4605      	mov	r5, r0
 801c0e2:	22e8      	movs	r2, #232	; 0xe8
 801c0e4:	21e4      	movs	r1, #228	; 0xe4
 801c0e6:	20d7      	movs	r0, #215	; 0xd7
 801c0e8:	f004 f882 	bl	80201f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801c0ec:	4606      	mov	r6, r0
 801c0ee:	22ff      	movs	r2, #255	; 0xff
 801c0f0:	2183      	movs	r1, #131	; 0x83
 801c0f2:	2008      	movs	r0, #8
 801c0f4:	f004 f87c 	bl	80201f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801c0f8:	4680      	mov	r8, r0
 801c0fa:	2299      	movs	r2, #153	; 0x99
 801c0fc:	2166      	movs	r1, #102	; 0x66
 801c0fe:	2033      	movs	r0, #51	; 0x33
 801c100:	f004 f876 	bl	80201f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801c104:	4603      	mov	r3, r0
 801c106:	9300      	str	r3, [sp, #0]
 801c108:	4643      	mov	r3, r8
 801c10a:	4632      	mov	r2, r6
 801c10c:	4629      	mov	r1, r5
 801c10e:	4620      	mov	r0, r4
 801c110:	f000 fa41 	bl	801c596 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    flexButton1.setIconBitmaps(Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID), Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID));
 801c114:	687b      	ldr	r3, [r7, #4]
 801c116:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801c11a:	f107 0320 	add.w	r3, r7, #32
 801c11e:	2102      	movs	r1, #2
 801c120:	4618      	mov	r0, r3
 801c122:	f7f2 ffc1 	bl	800f0a8 <_ZN8touchgfx6BitmapC1Et>
 801c126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801c12a:	2102      	movs	r1, #2
 801c12c:	4618      	mov	r0, r3
 801c12e:	f7f2 ffbb 	bl	800f0a8 <_ZN8touchgfx6BitmapC1Et>
 801c132:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801c136:	f107 0320 	add.w	r3, r7, #32
 801c13a:	4619      	mov	r1, r3
 801c13c:	4620      	mov	r0, r4
 801c13e:	f000 fa47 	bl	801c5d0 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>
    flexButton1.setIconXY(30, 8);
 801c142:	687b      	ldr	r3, [r7, #4]
 801c144:	33a4      	adds	r3, #164	; 0xa4
 801c146:	2208      	movs	r2, #8
 801c148:	211e      	movs	r1, #30
 801c14a:	4618      	mov	r0, r3
 801c14c:	f000 fa8a 	bl	801c664 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE9setIconXYEss>
    flexButton1.setPosition(23, 215, 95, 44);
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 801c156:	232c      	movs	r3, #44	; 0x2c
 801c158:	9300      	str	r3, [sp, #0]
 801c15a:	235f      	movs	r3, #95	; 0x5f
 801c15c:	22d7      	movs	r2, #215	; 0xd7
 801c15e:	2117      	movs	r1, #23
 801c160:	f7f2 fb3c 	bl	800e7dc <_ZN8touchgfx8Drawable11setPositionEssss>
    flexButton1.setAction(flexButtonCallback);
 801c164:	687b      	ldr	r3, [r7, #4]
 801c166:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 801c16a:	687b      	ldr	r3, [r7, #4]
 801c16c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801c170:	4619      	mov	r1, r3
 801c172:	4610      	mov	r0, r2
 801c174:	f7ff fd00 	bl	801bb78 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    buttonWithLabel1.setXY(160, 70);
 801c178:	687b      	ldr	r3, [r7, #4]
 801c17a:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 801c17e:	2246      	movs	r2, #70	; 0x46
 801c180:	21a0      	movs	r1, #160	; 0xa0
 801c182:	4618      	mov	r0, r3
 801c184:	f7f2 fb8f 	bl	800e8a6 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 801c188:	687b      	ldr	r3, [r7, #4]
 801c18a:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 801c18e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c192:	2100      	movs	r1, #0
 801c194:	4618      	mov	r0, r3
 801c196:	f7f2 ff87 	bl	800f0a8 <_ZN8touchgfx6BitmapC1Et>
 801c19a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c19e:	2101      	movs	r1, #1
 801c1a0:	4618      	mov	r0, r3
 801c1a2:	f7f2 ff81 	bl	800f0a8 <_ZN8touchgfx6BitmapC1Et>
 801c1a6:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801c1aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c1ae:	4619      	mov	r1, r3
 801c1b0:	4620      	mov	r0, r4
 801c1b2:	f7f4 f83c 	bl	801022e <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(TypedText(T_SINGLEUSEID6));
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 801c1bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c1c0:	2105      	movs	r1, #5
 801c1c2:	4618      	mov	r0, r3
 801c1c4:	f7f3 fad6 	bl	800f774 <_ZN8touchgfx9TypedTextC1Et>
 801c1c8:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 801c1ca:	4620      	mov	r0, r4
 801c1cc:	f7ff fdec 	bl	801bda8 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801c1d0:	687b      	ldr	r3, [r7, #4]
 801c1d2:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 801c1d6:	22ff      	movs	r2, #255	; 0xff
 801c1d8:	21ff      	movs	r1, #255	; 0xff
 801c1da:	20ff      	movs	r0, #255	; 0xff
 801c1dc:	f004 f808 	bl	80201f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801c1e0:	4603      	mov	r3, r0
 801c1e2:	2200      	movs	r2, #0
 801c1e4:	4619      	mov	r1, r3
 801c1e6:	4620      	mov	r0, r4
 801c1e8:	f7ff fded 	bl	801bdc6 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801c1ec:	687b      	ldr	r3, [r7, #4]
 801c1ee:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 801c1f2:	22ff      	movs	r2, #255	; 0xff
 801c1f4:	21ff      	movs	r1, #255	; 0xff
 801c1f6:	20ff      	movs	r0, #255	; 0xff
 801c1f8:	f003 fffa 	bl	80201f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801c1fc:	4603      	mov	r3, r0
 801c1fe:	2200      	movs	r2, #0
 801c200:	4619      	mov	r1, r3
 801c202:	4620      	mov	r0, r4
 801c204:	f7ff fdf7 	bl	801bdf6 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    buttonWithLabel1.setAction(buttonCallback);
 801c208:	687b      	ldr	r3, [r7, #4]
 801c20a:	f503 72a6 	add.w	r2, r3, #332	; 0x14c
 801c20e:	687b      	ldr	r3, [r7, #4]
 801c210:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 801c214:	4619      	mov	r1, r3
 801c216:	4610      	mov	r0, r2
 801c218:	f7f3 f97c 	bl	800f514 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    buttonWithLabel1_send.setXY(160, 136);
 801c21c:	687b      	ldr	r3, [r7, #4]
 801c21e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801c222:	2288      	movs	r2, #136	; 0x88
 801c224:	21a0      	movs	r1, #160	; 0xa0
 801c226:	4618      	mov	r0, r3
 801c228:	f7f2 fb3d 	bl	800e8a6 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1_send.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 801c22c:	687b      	ldr	r3, [r7, #4]
 801c22e:	f503 74c8 	add.w	r4, r3, #400	; 0x190
 801c232:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801c236:	2100      	movs	r1, #0
 801c238:	4618      	mov	r0, r3
 801c23a:	f7f2 ff35 	bl	800f0a8 <_ZN8touchgfx6BitmapC1Et>
 801c23e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c242:	2101      	movs	r1, #1
 801c244:	4618      	mov	r0, r3
 801c246:	f7f2 ff2f 	bl	800f0a8 <_ZN8touchgfx6BitmapC1Et>
 801c24a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801c24e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801c252:	4619      	mov	r1, r3
 801c254:	4620      	mov	r0, r4
 801c256:	f7f3 ffea 	bl	801022e <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1_send.setLabelText(TypedText(T_SINGLEUSEID7));
 801c25a:	687b      	ldr	r3, [r7, #4]
 801c25c:	f503 74c8 	add.w	r4, r3, #400	; 0x190
 801c260:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801c264:	2106      	movs	r1, #6
 801c266:	4618      	mov	r0, r3
 801c268:	f7f3 fa84 	bl	800f774 <_ZN8touchgfx9TypedTextC1Et>
 801c26c:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 801c26e:	4620      	mov	r0, r4
 801c270:	f7ff fd9a 	bl	801bda8 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    buttonWithLabel1_send.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801c274:	687b      	ldr	r3, [r7, #4]
 801c276:	f503 74c8 	add.w	r4, r3, #400	; 0x190
 801c27a:	22ff      	movs	r2, #255	; 0xff
 801c27c:	21ff      	movs	r1, #255	; 0xff
 801c27e:	20ff      	movs	r0, #255	; 0xff
 801c280:	f003 ffb6 	bl	80201f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801c284:	4603      	mov	r3, r0
 801c286:	2200      	movs	r2, #0
 801c288:	4619      	mov	r1, r3
 801c28a:	4620      	mov	r0, r4
 801c28c:	f7ff fd9b 	bl	801bdc6 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    buttonWithLabel1_send.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801c290:	687b      	ldr	r3, [r7, #4]
 801c292:	f503 74c8 	add.w	r4, r3, #400	; 0x190
 801c296:	22ff      	movs	r2, #255	; 0xff
 801c298:	21ff      	movs	r1, #255	; 0xff
 801c29a:	20ff      	movs	r0, #255	; 0xff
 801c29c:	f003 ffa8 	bl	80201f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801c2a0:	4603      	mov	r3, r0
 801c2a2:	2200      	movs	r2, #0
 801c2a4:	4619      	mov	r1, r3
 801c2a6:	4620      	mov	r0, r4
 801c2a8:	f7ff fda5 	bl	801bdf6 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    buttonWithLabel1_send.setAction(buttonCallback);
 801c2ac:	687b      	ldr	r3, [r7, #4]
 801c2ae:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 801c2b2:	687b      	ldr	r3, [r7, #4]
 801c2b4:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 801c2b8:	4619      	mov	r1, r3
 801c2ba:	4610      	mov	r0, r2
 801c2bc:	f7f3 f92a 	bl	800f514 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(box1);
 801c2c0:	687a      	ldr	r2, [r7, #4]
 801c2c2:	687b      	ldr	r3, [r7, #4]
 801c2c4:	3340      	adds	r3, #64	; 0x40
 801c2c6:	4619      	mov	r1, r3
 801c2c8:	4610      	mov	r0, r2
 801c2ca:	f7ff f88f 	bl	801b3ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 801c2ce:	687a      	ldr	r2, [r7, #4]
 801c2d0:	687b      	ldr	r3, [r7, #4]
 801c2d2:	3370      	adds	r3, #112	; 0x70
 801c2d4:	4619      	mov	r1, r3
 801c2d6:	4610      	mov	r0, r2
 801c2d8:	f7ff f888 	bl	801b3ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(flexButton1);
 801c2dc:	687a      	ldr	r2, [r7, #4]
 801c2de:	687b      	ldr	r3, [r7, #4]
 801c2e0:	33a4      	adds	r3, #164	; 0xa4
 801c2e2:	4619      	mov	r1, r3
 801c2e4:	4610      	mov	r0, r2
 801c2e6:	f7ff f881 	bl	801b3ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 801c2ea:	687a      	ldr	r2, [r7, #4]
 801c2ec:	687b      	ldr	r3, [r7, #4]
 801c2ee:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 801c2f2:	4619      	mov	r1, r3
 801c2f4:	4610      	mov	r0, r2
 801c2f6:	f7ff f879 	bl	801b3ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1_send);
 801c2fa:	687a      	ldr	r2, [r7, #4]
 801c2fc:	687b      	ldr	r3, [r7, #4]
 801c2fe:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801c302:	4619      	mov	r1, r3
 801c304:	4610      	mov	r0, r2
 801c306:	f7ff f871 	bl	801b3ec <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801c30a:	687b      	ldr	r3, [r7, #4]
 801c30c:	4618      	mov	r0, r3
 801c30e:	3740      	adds	r7, #64	; 0x40
 801c310:	46bd      	mov	sp, r7
 801c312:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c316:	bf00      	nop
 801c318:	0802536c 	.word	0x0802536c
 801c31c:	0801c339 	.word	0x0801c339
 801c320:	0801c37d 	.word	0x0801c37d

0801c324 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{
 801c324:	b480      	push	{r7}
 801c326:	b083      	sub	sp, #12
 801c328:	af00      	add	r7, sp, #0
 801c32a:	6078      	str	r0, [r7, #4]

}
 801c32c:	bf00      	nop
 801c32e:	370c      	adds	r7, #12
 801c330:	46bd      	mov	sp, r7
 801c332:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c336:	4770      	bx	lr

0801c338 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 801c338:	b580      	push	{r7, lr}
 801c33a:	b082      	sub	sp, #8
 801c33c:	af00      	add	r7, sp, #0
 801c33e:	6078      	str	r0, [r7, #4]
 801c340:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 801c342:	687b      	ldr	r3, [r7, #4]
 801c344:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 801c348:	683a      	ldr	r2, [r7, #0]
 801c34a:	429a      	cmp	r2, r3
 801c34c:	d106      	bne.n	801c35c <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Interaction2
        //When buttonWithLabel1 clicked call virtual function
        //Call uart_init_clicked
        uart_init_clicked();
 801c34e:	687b      	ldr	r3, [r7, #4]
 801c350:	681b      	ldr	r3, [r3, #0]
 801c352:	332c      	adds	r3, #44	; 0x2c
 801c354:	681b      	ldr	r3, [r3, #0]
 801c356:	6878      	ldr	r0, [r7, #4]
 801c358:	4798      	blx	r3
        //Interaction3
        //When buttonWithLabel1_send clicked call virtual function
        //Call uart_send_clicked
        uart_send_clicked();
    }
}
 801c35a:	e00b      	b.n	801c374 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
    else if (&src == &buttonWithLabel1_send)
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801c362:	683a      	ldr	r2, [r7, #0]
 801c364:	429a      	cmp	r2, r3
 801c366:	d105      	bne.n	801c374 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
        uart_send_clicked();
 801c368:	687b      	ldr	r3, [r7, #4]
 801c36a:	681b      	ldr	r3, [r3, #0]
 801c36c:	3330      	adds	r3, #48	; 0x30
 801c36e:	681b      	ldr	r3, [r3, #0]
 801c370:	6878      	ldr	r0, [r7, #4]
 801c372:	4798      	blx	r3
}
 801c374:	bf00      	nop
 801c376:	3708      	adds	r7, #8
 801c378:	46bd      	mov	sp, r7
 801c37a:	bd80      	pop	{r7, pc}

0801c37c <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen2ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 801c37c:	b580      	push	{r7, lr}
 801c37e:	b082      	sub	sp, #8
 801c380:	af00      	add	r7, sp, #0
 801c382:	6078      	str	r0, [r7, #4]
 801c384:	6039      	str	r1, [r7, #0]
    if (&src == &flexButton1)
 801c386:	687b      	ldr	r3, [r7, #4]
 801c388:	33a4      	adds	r3, #164	; 0xa4
 801c38a:	683a      	ldr	r2, [r7, #0]
 801c38c:	429a      	cmp	r2, r3
 801c38e:	d106      	bne.n	801c39e <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x22>
    {
        //Interaction1
        //When flexButton1 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards West
        application().gotoScreen1ScreenSlideTransitionWest();
 801c390:	6878      	ldr	r0, [r7, #4]
 801c392:	f7ff fe00 	bl	801bf96 <_ZN15Screen2ViewBase11applicationEv>
 801c396:	4603      	mov	r3, r0
 801c398:	4618      	mov	r0, r3
 801c39a:	f7fe f98d 	bl	801a6b8 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv>
    }
}
 801c39e:	bf00      	nop
 801c3a0:	3708      	adds	r7, #8
 801c3a2:	46bd      	mov	sp, r7
 801c3a4:	bd80      	pop	{r7, pc}
	...

0801c3a8 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>:
    /**
     * @fn virtual IconButtonStyle::~IconButtonStyle()
     *
     * @brief Destructor.
     */
    virtual ~IconButtonStyle() { }
 801c3a8:	b580      	push	{r7, lr}
 801c3aa:	b082      	sub	sp, #8
 801c3ac:	af00      	add	r7, sp, #0
 801c3ae:	6078      	str	r0, [r7, #4]
 801c3b0:	4a08      	ldr	r2, [pc, #32]	; (801c3d4 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev+0x2c>)
 801c3b2:	687b      	ldr	r3, [r7, #4]
 801c3b4:	601a      	str	r2, [r3, #0]
 801c3b6:	687b      	ldr	r3, [r7, #4]
 801c3b8:	337c      	adds	r3, #124	; 0x7c
 801c3ba:	4618      	mov	r0, r3
 801c3bc:	f7f2 ffd6 	bl	800f36c <_ZN8touchgfx5ImageD1Ev>
 801c3c0:	687b      	ldr	r3, [r7, #4]
 801c3c2:	4618      	mov	r0, r3
 801c3c4:	f000 f966 	bl	801c694 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 801c3c8:	687b      	ldr	r3, [r7, #4]
 801c3ca:	4618      	mov	r0, r3
 801c3cc:	3708      	adds	r7, #8
 801c3ce:	46bd      	mov	sp, r7
 801c3d0:	bd80      	pop	{r7, pc}
 801c3d2:	bf00      	nop
 801c3d4:	080253d8 	.word	0x080253d8

0801c3d8 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED0Ev>:
 801c3d8:	b580      	push	{r7, lr}
 801c3da:	b082      	sub	sp, #8
 801c3dc:	af00      	add	r7, sp, #0
 801c3de:	6078      	str	r0, [r7, #4]
 801c3e0:	6878      	ldr	r0, [r7, #4]
 801c3e2:	f7ff ffe1 	bl	801c3a8 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 801c3e6:	21a8      	movs	r1, #168	; 0xa8
 801c3e8:	6878      	ldr	r0, [r7, #4]
 801c3ea:	f006 f8cf 	bl	802258c <_ZdlPvj>
 801c3ee:	687b      	ldr	r3, [r7, #4]
 801c3f0:	4618      	mov	r0, r3
 801c3f2:	3708      	adds	r7, #8
 801c3f4:	46bd      	mov	sp, r7
 801c3f6:	bd80      	pop	{r7, pc}

0801c3f8 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>:
    View() : presenter(0)
 801c3f8:	b580      	push	{r7, lr}
 801c3fa:	b082      	sub	sp, #8
 801c3fc:	af00      	add	r7, sp, #0
 801c3fe:	6078      	str	r0, [r7, #4]
 801c400:	687b      	ldr	r3, [r7, #4]
 801c402:	4618      	mov	r0, r3
 801c404:	f003 f93a 	bl	801f67c <_ZN8touchgfx6ScreenC1Ev>
 801c408:	4a05      	ldr	r2, [pc, #20]	; (801c420 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev+0x28>)
 801c40a:	687b      	ldr	r3, [r7, #4]
 801c40c:	601a      	str	r2, [r3, #0]
 801c40e:	687b      	ldr	r3, [r7, #4]
 801c410:	2200      	movs	r2, #0
 801c412:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801c414:	687b      	ldr	r3, [r7, #4]
 801c416:	4618      	mov	r0, r3
 801c418:	3708      	adds	r7, #8
 801c41a:	46bd      	mov	sp, r7
 801c41c:	bd80      	pop	{r7, pc}
 801c41e:	bf00      	nop
 801c420:	0802550c 	.word	0x0802550c

0801c424 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>:
    IconButtonStyle() : T()
 801c424:	b590      	push	{r4, r7, lr}
 801c426:	b085      	sub	sp, #20
 801c428:	af00      	add	r7, sp, #0
 801c42a:	6078      	str	r0, [r7, #4]
 801c42c:	687b      	ldr	r3, [r7, #4]
 801c42e:	4618      	mov	r0, r3
 801c430:	f000 f958 	bl	801c6e4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 801c434:	4a16      	ldr	r2, [pc, #88]	; (801c490 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev+0x6c>)
 801c436:	687b      	ldr	r3, [r7, #4]
 801c438:	601a      	str	r2, [r3, #0]
 801c43a:	687b      	ldr	r3, [r7, #4]
 801c43c:	3378      	adds	r3, #120	; 0x78
 801c43e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c442:	4618      	mov	r0, r3
 801c444:	f7f2 fe30 	bl	800f0a8 <_ZN8touchgfx6BitmapC1Et>
 801c448:	687b      	ldr	r3, [r7, #4]
 801c44a:	337a      	adds	r3, #122	; 0x7a
 801c44c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c450:	4618      	mov	r0, r3
 801c452:	f7f2 fe29 	bl	800f0a8 <_ZN8touchgfx6BitmapC1Et>
 801c456:	687b      	ldr	r3, [r7, #4]
 801c458:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 801c45c:	f107 030c 	add.w	r3, r7, #12
 801c460:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c464:	4618      	mov	r0, r3
 801c466:	f7f2 fe1f 	bl	800f0a8 <_ZN8touchgfx6BitmapC1Et>
 801c46a:	f107 030c 	add.w	r3, r7, #12
 801c46e:	4619      	mov	r1, r3
 801c470:	4620      	mov	r0, r4
 801c472:	f7f2 ff59 	bl	800f328 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        T::add(iconImage);
 801c476:	687a      	ldr	r2, [r7, #4]
 801c478:	687b      	ldr	r3, [r7, #4]
 801c47a:	337c      	adds	r3, #124	; 0x7c
 801c47c:	4619      	mov	r1, r3
 801c47e:	4610      	mov	r0, r2
 801c480:	f7f2 fb10 	bl	800eaa4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801c484:	687b      	ldr	r3, [r7, #4]
 801c486:	4618      	mov	r0, r3
 801c488:	3714      	adds	r7, #20
 801c48a:	46bd      	mov	sp, r7
 801c48c:	bd90      	pop	{r4, r7, pc}
 801c48e:	bf00      	nop
 801c490:	080253d8 	.word	0x080253d8

0801c494 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 801c494:	b580      	push	{r7, lr}
 801c496:	b084      	sub	sp, #16
 801c498:	af00      	add	r7, sp, #0
 801c49a:	60f8      	str	r0, [r7, #12]
 801c49c:	60b9      	str	r1, [r7, #8]
 801c49e:	4639      	mov	r1, r7
 801c4a0:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 801c4a4:	68fb      	ldr	r3, [r7, #12]
 801c4a6:	4618      	mov	r0, r3
 801c4a8:	f7f3 f8aa 	bl	800f600 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 801c4ac:	4a08      	ldr	r2, [pc, #32]	; (801c4d0 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 801c4ae:	68fb      	ldr	r3, [r7, #12]
 801c4b0:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801c4b2:	68fb      	ldr	r3, [r7, #12]
 801c4b4:	68ba      	ldr	r2, [r7, #8]
 801c4b6:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 801c4b8:	68fb      	ldr	r3, [r7, #12]
 801c4ba:	3308      	adds	r3, #8
 801c4bc:	463a      	mov	r2, r7
 801c4be:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c4c2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801c4c6:	68fb      	ldr	r3, [r7, #12]
 801c4c8:	4618      	mov	r0, r3
 801c4ca:	3710      	adds	r7, #16
 801c4cc:	46bd      	mov	sp, r7
 801c4ce:	bd80      	pop	{r7, pc}
 801c4d0:	080253c0 	.word	0x080253c0

0801c4d4 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>:
class GenericCallback<T1, void, void>
 801c4d4:	b480      	push	{r7}
 801c4d6:	b083      	sub	sp, #12
 801c4d8:	af00      	add	r7, sp, #0
 801c4da:	6078      	str	r0, [r7, #4]
 801c4dc:	4a04      	ldr	r2, [pc, #16]	; (801c4f0 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev+0x1c>)
 801c4de:	687b      	ldr	r3, [r7, #4]
 801c4e0:	601a      	str	r2, [r3, #0]
 801c4e2:	687b      	ldr	r3, [r7, #4]
 801c4e4:	4618      	mov	r0, r3
 801c4e6:	370c      	adds	r7, #12
 801c4e8:	46bd      	mov	sp, r7
 801c4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c4ee:	4770      	bx	lr
 801c4f0:	080255d8 	.word	0x080255d8

0801c4f4 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 801c4f4:	b580      	push	{r7, lr}
 801c4f6:	b084      	sub	sp, #16
 801c4f8:	af00      	add	r7, sp, #0
 801c4fa:	60f8      	str	r0, [r7, #12]
 801c4fc:	60b9      	str	r1, [r7, #8]
 801c4fe:	4639      	mov	r1, r7
 801c500:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 801c504:	68fb      	ldr	r3, [r7, #12]
 801c506:	4618      	mov	r0, r3
 801c508:	f7ff ffe4 	bl	801c4d4 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 801c50c:	4a08      	ldr	r2, [pc, #32]	; (801c530 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 801c50e:	68fb      	ldr	r3, [r7, #12]
 801c510:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801c512:	68fb      	ldr	r3, [r7, #12]
 801c514:	68ba      	ldr	r2, [r7, #8]
 801c516:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 801c518:	68fb      	ldr	r3, [r7, #12]
 801c51a:	3308      	adds	r3, #8
 801c51c:	463a      	mov	r2, r7
 801c51e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c522:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801c526:	68fb      	ldr	r3, [r7, #12]
 801c528:	4618      	mov	r0, r3
 801c52a:	3710      	adds	r7, #16
 801c52c:	46bd      	mov	sp, r7
 801c52e:	bd80      	pop	{r7, pc}
 801c530:	080253a8 	.word	0x080253a8

0801c534 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>:
     * @param x      The x coordinate of this BoxWithBorderButtonStyle.
     * @param y      The y coordinate of this BoxWithBorderButtonStyle.
     * @param width  The width of this BoxWithBorderButtonStyle.
     * @param height The height of this BoxWithBorderButtonStyle.
     */
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 801c534:	b590      	push	{r4, r7, lr}
 801c536:	b087      	sub	sp, #28
 801c538:	af02      	add	r7, sp, #8
 801c53a:	60f8      	str	r0, [r7, #12]
 801c53c:	4608      	mov	r0, r1
 801c53e:	4611      	mov	r1, r2
 801c540:	461a      	mov	r2, r3
 801c542:	4603      	mov	r3, r0
 801c544:	817b      	strh	r3, [r7, #10]
 801c546:	460b      	mov	r3, r1
 801c548:	813b      	strh	r3, [r7, #8]
 801c54a:	4613      	mov	r3, r2
 801c54c:	80fb      	strh	r3, [r7, #6]
    {
        borderBox.setPosition(x, y, width, height);
 801c54e:	68fb      	ldr	r3, [r7, #12]
 801c550:	f103 0034 	add.w	r0, r3, #52	; 0x34
 801c554:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 801c558:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801c55c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801c560:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c564:	9300      	str	r3, [sp, #0]
 801c566:	4623      	mov	r3, r4
 801c568:	f7f2 f938 	bl	800e7dc <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 801c56c:	bf00      	nop
 801c56e:	3714      	adds	r7, #20
 801c570:	46bd      	mov	sp, r7
 801c572:	bd90      	pop	{r4, r7, pc}

0801c574 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>:
     *
     * @brief Sets border size.
     *
     * @param size The size.
     */
    void setBorderSize(uint8_t size)
 801c574:	b580      	push	{r7, lr}
 801c576:	b082      	sub	sp, #8
 801c578:	af00      	add	r7, sp, #0
 801c57a:	6078      	str	r0, [r7, #4]
 801c57c:	460b      	mov	r3, r1
 801c57e:	70fb      	strb	r3, [r7, #3]
    {
        borderBox.setBorderSize(size);
 801c580:	687b      	ldr	r3, [r7, #4]
 801c582:	3334      	adds	r3, #52	; 0x34
 801c584:	78fa      	ldrb	r2, [r7, #3]
 801c586:	4611      	mov	r1, r2
 801c588:	4618      	mov	r0, r3
 801c58a:	f7ff fbed 	bl	801bd68 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>
    }
 801c58e:	bf00      	nop
 801c590:	3708      	adds	r7, #8
 801c592:	46bd      	mov	sp, r7
 801c594:	bd80      	pop	{r7, pc}

0801c596 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 801c596:	b580      	push	{r7, lr}
 801c598:	b084      	sub	sp, #16
 801c59a:	af00      	add	r7, sp, #0
 801c59c:	60f8      	str	r0, [r7, #12]
 801c59e:	60b9      	str	r1, [r7, #8]
 801c5a0:	607a      	str	r2, [r7, #4]
 801c5a2:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 801c5a4:	68fb      	ldr	r3, [r7, #12]
 801c5a6:	68ba      	ldr	r2, [r7, #8]
 801c5a8:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 801c5aa:	68fb      	ldr	r3, [r7, #12]
 801c5ac:	687a      	ldr	r2, [r7, #4]
 801c5ae:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 801c5b0:	68fb      	ldr	r3, [r7, #12]
 801c5b2:	683a      	ldr	r2, [r7, #0]
 801c5b4:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 801c5b6:	68fb      	ldr	r3, [r7, #12]
 801c5b8:	69ba      	ldr	r2, [r7, #24]
 801c5ba:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 801c5bc:	68fb      	ldr	r3, [r7, #12]
 801c5be:	681b      	ldr	r3, [r3, #0]
 801c5c0:	3388      	adds	r3, #136	; 0x88
 801c5c2:	681b      	ldr	r3, [r3, #0]
 801c5c4:	68f8      	ldr	r0, [r7, #12]
 801c5c6:	4798      	blx	r3
    }
 801c5c8:	bf00      	nop
 801c5ca:	3710      	adds	r7, #16
 801c5cc:	46bd      	mov	sp, r7
 801c5ce:	bd80      	pop	{r7, pc}

0801c5d0 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>:
     * @brief Sets icon bitmaps.
     *
     * @param newIconReleased The new icon released.
     * @param newIconPressed  The new icon pressed.
     */
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 801c5d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c5d2:	b085      	sub	sp, #20
 801c5d4:	af00      	add	r7, sp, #0
 801c5d6:	60f8      	str	r0, [r7, #12]
 801c5d8:	60b9      	str	r1, [r7, #8]
 801c5da:	607a      	str	r2, [r7, #4]
    {
        iconReleased = newIconReleased;
 801c5dc:	68fb      	ldr	r3, [r7, #12]
 801c5de:	68ba      	ldr	r2, [r7, #8]
 801c5e0:	8812      	ldrh	r2, [r2, #0]
 801c5e2:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
        iconPressed = newIconPressed;
 801c5e6:	68fb      	ldr	r3, [r7, #12]
 801c5e8:	687a      	ldr	r2, [r7, #4]
 801c5ea:	8812      	ldrh	r2, [r2, #0]
 801c5ec:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 801c5f0:	68fb      	ldr	r3, [r7, #12]
 801c5f2:	f103 057c 	add.w	r5, r3, #124	; 0x7c
 801c5f6:	68fb      	ldr	r3, [r7, #12]
 801c5f8:	4618      	mov	r0, r3
 801c5fa:	f7f2 fce4 	bl	800efc6 <_ZNK8touchgfx8Drawable8getWidthEv>
 801c5fe:	4603      	mov	r3, r0
 801c600:	2b00      	cmp	r3, #0
 801c602:	da00      	bge.n	801c606 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_+0x36>
 801c604:	3301      	adds	r3, #1
 801c606:	105b      	asrs	r3, r3, #1
 801c608:	b21b      	sxth	r3, r3
 801c60a:	b29c      	uxth	r4, r3
 801c60c:	6878      	ldr	r0, [r7, #4]
 801c60e:	f003 fef1 	bl	80203f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c612:	4603      	mov	r3, r0
 801c614:	085b      	lsrs	r3, r3, #1
 801c616:	b29b      	uxth	r3, r3
 801c618:	1ae3      	subs	r3, r4, r3
 801c61a:	b29b      	uxth	r3, r3
 801c61c:	b21e      	sxth	r6, r3
 801c61e:	68fb      	ldr	r3, [r7, #12]
 801c620:	4618      	mov	r0, r3
 801c622:	f7f2 fcdd 	bl	800efe0 <_ZNK8touchgfx8Drawable9getHeightEv>
 801c626:	4603      	mov	r3, r0
 801c628:	2b00      	cmp	r3, #0
 801c62a:	da00      	bge.n	801c62e <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_+0x5e>
 801c62c:	3301      	adds	r3, #1
 801c62e:	105b      	asrs	r3, r3, #1
 801c630:	b21b      	sxth	r3, r3
 801c632:	b29c      	uxth	r4, r3
 801c634:	6878      	ldr	r0, [r7, #4]
 801c636:	f003 ff15 	bl	8020464 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c63a:	4603      	mov	r3, r0
 801c63c:	085b      	lsrs	r3, r3, #1
 801c63e:	b29b      	uxth	r3, r3
 801c640:	1ae3      	subs	r3, r4, r3
 801c642:	b29b      	uxth	r3, r3
 801c644:	b21b      	sxth	r3, r3
 801c646:	461a      	mov	r2, r3
 801c648:	4631      	mov	r1, r6
 801c64a:	4628      	mov	r0, r5
 801c64c:	f7f2 f92b 	bl	800e8a6 <_ZN8touchgfx8Drawable5setXYEss>

        handlePressedUpdated();
 801c650:	68fb      	ldr	r3, [r7, #12]
 801c652:	681b      	ldr	r3, [r3, #0]
 801c654:	3388      	adds	r3, #136	; 0x88
 801c656:	681b      	ldr	r3, [r3, #0]
 801c658:	68f8      	ldr	r0, [r7, #12]
 801c65a:	4798      	blx	r3
    }
 801c65c:	bf00      	nop
 801c65e:	3714      	adds	r7, #20
 801c660:	46bd      	mov	sp, r7
 801c662:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c664 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE9setIconXYEss>:
     * @brief Sets icon xy.
     *
     * @param x The x coordinate.
     * @param y The y coordinate.
     */
    void setIconXY(int16_t x, int16_t y)
 801c664:	b580      	push	{r7, lr}
 801c666:	b082      	sub	sp, #8
 801c668:	af00      	add	r7, sp, #0
 801c66a:	6078      	str	r0, [r7, #4]
 801c66c:	460b      	mov	r3, r1
 801c66e:	807b      	strh	r3, [r7, #2]
 801c670:	4613      	mov	r3, r2
 801c672:	803b      	strh	r3, [r7, #0]
    {
        setIconX(x);
 801c674:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c678:	4619      	mov	r1, r3
 801c67a:	6878      	ldr	r0, [r7, #4]
 801c67c:	f000 f8dd 	bl	801c83a <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE8setIconXEs>
        setIconY(y);
 801c680:	f9b7 3000 	ldrsh.w	r3, [r7]
 801c684:	4619      	mov	r1, r3
 801c686:	6878      	ldr	r0, [r7, #4]
 801c688:	f000 f8e9 	bl	801c85e <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE8setIconYEs>
    }
 801c68c:	bf00      	nop
 801c68e:	3708      	adds	r7, #8
 801c690:	46bd      	mov	sp, r7
 801c692:	bd80      	pop	{r7, pc}

0801c694 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
    virtual ~BoxWithBorderButtonStyle() { }
 801c694:	b580      	push	{r7, lr}
 801c696:	b082      	sub	sp, #8
 801c698:	af00      	add	r7, sp, #0
 801c69a:	6078      	str	r0, [r7, #4]
 801c69c:	4a08      	ldr	r2, [pc, #32]	; (801c6c0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x2c>)
 801c69e:	687b      	ldr	r3, [r7, #4]
 801c6a0:	601a      	str	r2, [r3, #0]
 801c6a2:	687b      	ldr	r3, [r7, #4]
 801c6a4:	3334      	adds	r3, #52	; 0x34
 801c6a6:	4618      	mov	r0, r3
 801c6a8:	f7f3 fbe8 	bl	800fe7c <_ZN8touchgfx13BoxWithBorderD1Ev>
 801c6ac:	687b      	ldr	r3, [r7, #4]
 801c6ae:	4618      	mov	r0, r3
 801c6b0:	f7ff fa96 	bl	801bbe0 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 801c6b4:	687b      	ldr	r3, [r7, #4]
 801c6b6:	4618      	mov	r0, r3
 801c6b8:	3708      	adds	r7, #8
 801c6ba:	46bd      	mov	sp, r7
 801c6bc:	bd80      	pop	{r7, pc}
 801c6be:	bf00      	nop
 801c6c0:	08025474 	.word	0x08025474

0801c6c4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
 801c6c4:	b580      	push	{r7, lr}
 801c6c6:	b082      	sub	sp, #8
 801c6c8:	af00      	add	r7, sp, #0
 801c6ca:	6078      	str	r0, [r7, #4]
 801c6cc:	6878      	ldr	r0, [r7, #4]
 801c6ce:	f7ff ffe1 	bl	801c694 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 801c6d2:	2178      	movs	r1, #120	; 0x78
 801c6d4:	6878      	ldr	r0, [r7, #4]
 801c6d6:	f005 ff59 	bl	802258c <_ZdlPvj>
 801c6da:	687b      	ldr	r3, [r7, #4]
 801c6dc:	4618      	mov	r0, r3
 801c6de:	3708      	adds	r7, #8
 801c6e0:	46bd      	mov	sp, r7
 801c6e2:	bd80      	pop	{r7, pc}

0801c6e4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>:
    BoxWithBorderButtonStyle() : T(), up(), down()
 801c6e4:	b580      	push	{r7, lr}
 801c6e6:	b082      	sub	sp, #8
 801c6e8:	af00      	add	r7, sp, #0
 801c6ea:	6078      	str	r0, [r7, #4]
 801c6ec:	687b      	ldr	r3, [r7, #4]
 801c6ee:	4618      	mov	r0, r3
 801c6f0:	f7ff fa64 	bl	801bbbc <_ZN8touchgfx18ClickButtonTriggerC1Ev>
 801c6f4:	4a17      	ldr	r2, [pc, #92]	; (801c754 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x70>)
 801c6f6:	687b      	ldr	r3, [r7, #4]
 801c6f8:	601a      	str	r2, [r3, #0]
 801c6fa:	687b      	ldr	r3, [r7, #4]
 801c6fc:	3334      	adds	r3, #52	; 0x34
 801c6fe:	4618      	mov	r0, r3
 801c700:	f7ff faf0 	bl	801bce4 <_ZN8touchgfx13BoxWithBorderC1Ev>
 801c704:	687b      	ldr	r3, [r7, #4]
 801c706:	3368      	adds	r3, #104	; 0x68
 801c708:	4618      	mov	r0, r3
 801c70a:	f7f2 ffd5 	bl	800f6b8 <_ZN8touchgfx9colortypeC1Ev>
 801c70e:	687b      	ldr	r3, [r7, #4]
 801c710:	336c      	adds	r3, #108	; 0x6c
 801c712:	4618      	mov	r0, r3
 801c714:	f7f2 ffd0 	bl	800f6b8 <_ZN8touchgfx9colortypeC1Ev>
 801c718:	687b      	ldr	r3, [r7, #4]
 801c71a:	3370      	adds	r3, #112	; 0x70
 801c71c:	4618      	mov	r0, r3
 801c71e:	f7f2 ffcb 	bl	800f6b8 <_ZN8touchgfx9colortypeC1Ev>
 801c722:	687b      	ldr	r3, [r7, #4]
 801c724:	3374      	adds	r3, #116	; 0x74
 801c726:	4618      	mov	r0, r3
 801c728:	f7f2 ffc6 	bl	800f6b8 <_ZN8touchgfx9colortypeC1Ev>
        borderBox.setXY(0, 0);
 801c72c:	687b      	ldr	r3, [r7, #4]
 801c72e:	3334      	adds	r3, #52	; 0x34
 801c730:	2200      	movs	r2, #0
 801c732:	2100      	movs	r1, #0
 801c734:	4618      	mov	r0, r3
 801c736:	f7f2 f8b6 	bl	800e8a6 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 801c73a:	687a      	ldr	r2, [r7, #4]
 801c73c:	687b      	ldr	r3, [r7, #4]
 801c73e:	3334      	adds	r3, #52	; 0x34
 801c740:	4619      	mov	r1, r3
 801c742:	4610      	mov	r0, r2
 801c744:	f7f2 f9ae 	bl	800eaa4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801c748:	687b      	ldr	r3, [r7, #4]
 801c74a:	4618      	mov	r0, r3
 801c74c:	3708      	adds	r7, #8
 801c74e:	46bd      	mov	sp, r7
 801c750:	bd80      	pop	{r7, pc}
 801c752:	bf00      	nop
 801c754:	08025474 	.word	0x08025474

0801c758 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>:
    virtual ~GenericCallback()
 801c758:	b480      	push	{r7}
 801c75a:	b083      	sub	sp, #12
 801c75c:	af00      	add	r7, sp, #0
 801c75e:	6078      	str	r0, [r7, #4]
    }
 801c760:	4a04      	ldr	r2, [pc, #16]	; (801c774 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev+0x1c>)
 801c762:	687b      	ldr	r3, [r7, #4]
 801c764:	601a      	str	r2, [r3, #0]
 801c766:	687b      	ldr	r3, [r7, #4]
 801c768:	4618      	mov	r0, r3
 801c76a:	370c      	adds	r7, #12
 801c76c:	46bd      	mov	sp, r7
 801c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c772:	4770      	bx	lr
 801c774:	080255d8 	.word	0x080255d8

0801c778 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED0Ev>:
    virtual ~GenericCallback()
 801c778:	b580      	push	{r7, lr}
 801c77a:	b082      	sub	sp, #8
 801c77c:	af00      	add	r7, sp, #0
 801c77e:	6078      	str	r0, [r7, #4]
    }
 801c780:	6878      	ldr	r0, [r7, #4]
 801c782:	f7ff ffe9 	bl	801c758 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 801c786:	2104      	movs	r1, #4
 801c788:	6878      	ldr	r0, [r7, #4]
 801c78a:	f005 feff 	bl	802258c <_ZdlPvj>
 801c78e:	687b      	ldr	r3, [r7, #4]
 801c790:	4618      	mov	r0, r3
 801c792:	3708      	adds	r7, #8
 801c794:	46bd      	mov	sp, r7
 801c796:	bd80      	pop	{r7, pc}

0801c798 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    /**
     * @fn virtual void BoxWithBorderButtonStyle::handlePressedUpdated()
     *
     * @brief Handles the pressed updated.
     */
    virtual void handlePressedUpdated()
 801c798:	b590      	push	{r4, r7, lr}
 801c79a:	b083      	sub	sp, #12
 801c79c:	af00      	add	r7, sp, #0
 801c79e:	6078      	str	r0, [r7, #4]
    {
        borderBox.setColor(T::getPressed() ? down : up);
 801c7a0:	687b      	ldr	r3, [r7, #4]
 801c7a2:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801c7a6:	687b      	ldr	r3, [r7, #4]
 801c7a8:	4618      	mov	r0, r3
 801c7aa:	f7ff f9cb 	bl	801bb44 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 801c7ae:	4603      	mov	r3, r0
 801c7b0:	2b00      	cmp	r3, #0
 801c7b2:	d002      	beq.n	801c7ba <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x22>
 801c7b4:	687b      	ldr	r3, [r7, #4]
 801c7b6:	336c      	adds	r3, #108	; 0x6c
 801c7b8:	e001      	b.n	801c7be <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x26>
 801c7ba:	687b      	ldr	r3, [r7, #4]
 801c7bc:	3368      	adds	r3, #104	; 0x68
 801c7be:	6819      	ldr	r1, [r3, #0]
 801c7c0:	4620      	mov	r0, r4
 801c7c2:	f7ff fab5 	bl	801bd30 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 801c7c6:	687b      	ldr	r3, [r7, #4]
 801c7c8:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801c7cc:	687b      	ldr	r3, [r7, #4]
 801c7ce:	4618      	mov	r0, r3
 801c7d0:	f7ff f9b8 	bl	801bb44 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 801c7d4:	4603      	mov	r3, r0
 801c7d6:	2b00      	cmp	r3, #0
 801c7d8:	d002      	beq.n	801c7e0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x48>
 801c7da:	687b      	ldr	r3, [r7, #4]
 801c7dc:	3374      	adds	r3, #116	; 0x74
 801c7de:	e001      	b.n	801c7e4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 801c7e0:	687b      	ldr	r3, [r7, #4]
 801c7e2:	3370      	adds	r3, #112	; 0x70
 801c7e4:	6819      	ldr	r1, [r3, #0]
 801c7e6:	4620      	mov	r0, r4
 801c7e8:	f7ff fab0 	bl	801bd4c <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 801c7ec:	687b      	ldr	r3, [r7, #4]
 801c7ee:	4618      	mov	r0, r3
 801c7f0:	f7ff f9d0 	bl	801bb94 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 801c7f4:	bf00      	nop
 801c7f6:	370c      	adds	r7, #12
 801c7f8:	46bd      	mov	sp, r7
 801c7fa:	bd90      	pop	{r4, r7, pc}

0801c7fc <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv>:
    /**
     * @fn virtual void IconButtonStyle::handlePressedUpdated()
     *
     * @brief Handles the pressed updated.
     */
    virtual void handlePressedUpdated()
 801c7fc:	b590      	push	{r4, r7, lr}
 801c7fe:	b083      	sub	sp, #12
 801c800:	af00      	add	r7, sp, #0
 801c802:	6078      	str	r0, [r7, #4]
    {
        iconImage.setBitmap(T::getPressed() ? iconPressed : iconReleased);
 801c804:	687b      	ldr	r3, [r7, #4]
 801c806:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 801c80a:	687b      	ldr	r3, [r7, #4]
 801c80c:	4618      	mov	r0, r3
 801c80e:	f7ff f999 	bl	801bb44 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 801c812:	4603      	mov	r3, r0
 801c814:	2b00      	cmp	r3, #0
 801c816:	d002      	beq.n	801c81e <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv+0x22>
 801c818:	687b      	ldr	r3, [r7, #4]
 801c81a:	337a      	adds	r3, #122	; 0x7a
 801c81c:	e001      	b.n	801c822 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv+0x26>
 801c81e:	687b      	ldr	r3, [r7, #4]
 801c820:	3378      	adds	r3, #120	; 0x78
 801c822:	4619      	mov	r1, r3
 801c824:	4620      	mov	r0, r4
 801c826:	f7f4 f826 	bl	8010876 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        T::handlePressedUpdated();
 801c82a:	687b      	ldr	r3, [r7, #4]
 801c82c:	4618      	mov	r0, r3
 801c82e:	f7ff ffb3 	bl	801c798 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>
    }
 801c832:	bf00      	nop
 801c834:	370c      	adds	r7, #12
 801c836:	46bd      	mov	sp, r7
 801c838:	bd90      	pop	{r4, r7, pc}

0801c83a <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE8setIconXEs>:
    void setIconX(int16_t x)
 801c83a:	b580      	push	{r7, lr}
 801c83c:	b082      	sub	sp, #8
 801c83e:	af00      	add	r7, sp, #0
 801c840:	6078      	str	r0, [r7, #4]
 801c842:	460b      	mov	r3, r1
 801c844:	807b      	strh	r3, [r7, #2]
        iconImage.setX(x);
 801c846:	687b      	ldr	r3, [r7, #4]
 801c848:	337c      	adds	r3, #124	; 0x7c
 801c84a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801c84e:	4611      	mov	r1, r2
 801c850:	4618      	mov	r0, r3
 801c852:	f7f2 f80a 	bl	800e86a <_ZN8touchgfx8Drawable4setXEs>
    }
 801c856:	bf00      	nop
 801c858:	3708      	adds	r7, #8
 801c85a:	46bd      	mov	sp, r7
 801c85c:	bd80      	pop	{r7, pc}

0801c85e <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE8setIconYEs>:
    void setIconY(int16_t y)
 801c85e:	b580      	push	{r7, lr}
 801c860:	b082      	sub	sp, #8
 801c862:	af00      	add	r7, sp, #0
 801c864:	6078      	str	r0, [r7, #4]
 801c866:	460b      	mov	r3, r1
 801c868:	807b      	strh	r3, [r7, #2]
        iconImage.setY(y);
 801c86a:	687b      	ldr	r3, [r7, #4]
 801c86c:	337c      	adds	r3, #124	; 0x7c
 801c86e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801c872:	4611      	mov	r1, r2
 801c874:	4618      	mov	r0, r3
 801c876:	f7f2 f807 	bl	800e888 <_ZN8touchgfx8Drawable4setYEs>
    }
 801c87a:	bf00      	nop
 801c87c:	3708      	adds	r7, #8
 801c87e:	46bd      	mov	sp, r7
 801c880:	bd80      	pop	{r7, pc}
	...

0801c884 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 801c884:	b580      	push	{r7, lr}
 801c886:	b082      	sub	sp, #8
 801c888:	af00      	add	r7, sp, #0
 801c88a:	6078      	str	r0, [r7, #4]
 801c88c:	4a05      	ldr	r2, [pc, #20]	; (801c8a4 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 801c88e:	687b      	ldr	r3, [r7, #4]
 801c890:	601a      	str	r2, [r3, #0]
 801c892:	687b      	ldr	r3, [r7, #4]
 801c894:	4618      	mov	r0, r3
 801c896:	f7ff ff5f 	bl	801c758 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 801c89a:	687b      	ldr	r3, [r7, #4]
 801c89c:	4618      	mov	r0, r3
 801c89e:	3708      	adds	r7, #8
 801c8a0:	46bd      	mov	sp, r7
 801c8a2:	bd80      	pop	{r7, pc}
 801c8a4:	080253a8 	.word	0x080253a8

0801c8a8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 801c8a8:	b580      	push	{r7, lr}
 801c8aa:	b082      	sub	sp, #8
 801c8ac:	af00      	add	r7, sp, #0
 801c8ae:	6078      	str	r0, [r7, #4]
 801c8b0:	6878      	ldr	r0, [r7, #4]
 801c8b2:	f7ff ffe7 	bl	801c884 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 801c8b6:	2110      	movs	r1, #16
 801c8b8:	6878      	ldr	r0, [r7, #4]
 801c8ba:	f005 fe67 	bl	802258c <_ZdlPvj>
 801c8be:	687b      	ldr	r3, [r7, #4]
 801c8c0:	4618      	mov	r0, r3
 801c8c2:	3708      	adds	r7, #8
 801c8c4:	46bd      	mov	sp, r7
 801c8c6:	bd80      	pop	{r7, pc}

0801c8c8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
 801c8c8:	b580      	push	{r7, lr}
 801c8ca:	b082      	sub	sp, #8
 801c8cc:	af00      	add	r7, sp, #0
 801c8ce:	6078      	str	r0, [r7, #4]
 801c8d0:	4a05      	ldr	r2, [pc, #20]	; (801c8e8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 801c8d2:	687b      	ldr	r3, [r7, #4]
 801c8d4:	601a      	str	r2, [r3, #0]
 801c8d6:	687b      	ldr	r3, [r7, #4]
 801c8d8:	4618      	mov	r0, r3
 801c8da:	f7f2 fea1 	bl	800f620 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 801c8de:	687b      	ldr	r3, [r7, #4]
 801c8e0:	4618      	mov	r0, r3
 801c8e2:	3708      	adds	r7, #8
 801c8e4:	46bd      	mov	sp, r7
 801c8e6:	bd80      	pop	{r7, pc}
 801c8e8:	080253c0 	.word	0x080253c0

0801c8ec <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 801c8ec:	b580      	push	{r7, lr}
 801c8ee:	b082      	sub	sp, #8
 801c8f0:	af00      	add	r7, sp, #0
 801c8f2:	6078      	str	r0, [r7, #4]
 801c8f4:	6878      	ldr	r0, [r7, #4]
 801c8f6:	f7ff ffe7 	bl	801c8c8 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801c8fa:	2110      	movs	r1, #16
 801c8fc:	6878      	ldr	r0, [r7, #4]
 801c8fe:	f005 fe45 	bl	802258c <_ZdlPvj>
 801c902:	687b      	ldr	r3, [r7, #4]
 801c904:	4618      	mov	r0, r3
 801c906:	3708      	adds	r7, #8
 801c908:	46bd      	mov	sp, r7
 801c90a:	bd80      	pop	{r7, pc}

0801c90c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 801c90c:	b580      	push	{r7, lr}
 801c90e:	b082      	sub	sp, #8
 801c910:	af00      	add	r7, sp, #0
 801c912:	6078      	str	r0, [r7, #4]
 801c914:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801c916:	687b      	ldr	r3, [r7, #4]
 801c918:	685b      	ldr	r3, [r3, #4]
 801c91a:	687a      	ldr	r2, [r7, #4]
 801c91c:	68d2      	ldr	r2, [r2, #12]
 801c91e:	1052      	asrs	r2, r2, #1
 801c920:	1898      	adds	r0, r3, r2
 801c922:	687b      	ldr	r3, [r7, #4]
 801c924:	68db      	ldr	r3, [r3, #12]
 801c926:	f003 0301 	and.w	r3, r3, #1
 801c92a:	2b00      	cmp	r3, #0
 801c92c:	d102      	bne.n	801c934 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 801c92e:	687b      	ldr	r3, [r7, #4]
 801c930:	689b      	ldr	r3, [r3, #8]
 801c932:	e00a      	b.n	801c94a <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 801c934:	687b      	ldr	r3, [r7, #4]
 801c936:	685b      	ldr	r3, [r3, #4]
 801c938:	687a      	ldr	r2, [r7, #4]
 801c93a:	68d2      	ldr	r2, [r2, #12]
 801c93c:	1052      	asrs	r2, r2, #1
 801c93e:	4413      	add	r3, r2
 801c940:	681b      	ldr	r3, [r3, #0]
 801c942:	687a      	ldr	r2, [r7, #4]
 801c944:	6892      	ldr	r2, [r2, #8]
 801c946:	4413      	add	r3, r2
 801c948:	681b      	ldr	r3, [r3, #0]
 801c94a:	6839      	ldr	r1, [r7, #0]
 801c94c:	4798      	blx	r3
    }
 801c94e:	bf00      	nop
 801c950:	3708      	adds	r7, #8
 801c952:	46bd      	mov	sp, r7
 801c954:	bd80      	pop	{r7, pc}

0801c956 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 801c956:	b480      	push	{r7}
 801c958:	b083      	sub	sp, #12
 801c95a:	af00      	add	r7, sp, #0
 801c95c:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801c95e:	687b      	ldr	r3, [r7, #4]
 801c960:	685b      	ldr	r3, [r3, #4]
 801c962:	2b00      	cmp	r3, #0
 801c964:	d010      	beq.n	801c988 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 801c966:	687b      	ldr	r3, [r7, #4]
 801c968:	689b      	ldr	r3, [r3, #8]
 801c96a:	2b00      	cmp	r3, #0
 801c96c:	d107      	bne.n	801c97e <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 801c96e:	687b      	ldr	r3, [r7, #4]
 801c970:	68db      	ldr	r3, [r3, #12]
 801c972:	f003 0301 	and.w	r3, r3, #1
 801c976:	2b00      	cmp	r3, #0
 801c978:	d101      	bne.n	801c97e <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 801c97a:	2301      	movs	r3, #1
 801c97c:	e000      	b.n	801c980 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 801c97e:	2300      	movs	r3, #0
 801c980:	2b01      	cmp	r3, #1
 801c982:	d001      	beq.n	801c988 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 801c984:	2301      	movs	r3, #1
 801c986:	e000      	b.n	801c98a <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 801c988:	2300      	movs	r3, #0
    }
 801c98a:	4618      	mov	r0, r3
 801c98c:	370c      	adds	r7, #12
 801c98e:	46bd      	mov	sp, r7
 801c990:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c994:	4770      	bx	lr

0801c996 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 801c996:	b580      	push	{r7, lr}
 801c998:	b082      	sub	sp, #8
 801c99a:	af00      	add	r7, sp, #0
 801c99c:	6078      	str	r0, [r7, #4]
 801c99e:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801c9a0:	687b      	ldr	r3, [r7, #4]
 801c9a2:	685b      	ldr	r3, [r3, #4]
 801c9a4:	687a      	ldr	r2, [r7, #4]
 801c9a6:	68d2      	ldr	r2, [r2, #12]
 801c9a8:	1052      	asrs	r2, r2, #1
 801c9aa:	1898      	adds	r0, r3, r2
 801c9ac:	687b      	ldr	r3, [r7, #4]
 801c9ae:	68db      	ldr	r3, [r3, #12]
 801c9b0:	f003 0301 	and.w	r3, r3, #1
 801c9b4:	2b00      	cmp	r3, #0
 801c9b6:	d102      	bne.n	801c9be <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 801c9b8:	687b      	ldr	r3, [r7, #4]
 801c9ba:	689b      	ldr	r3, [r3, #8]
 801c9bc:	e00a      	b.n	801c9d4 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 801c9be:	687b      	ldr	r3, [r7, #4]
 801c9c0:	685b      	ldr	r3, [r3, #4]
 801c9c2:	687a      	ldr	r2, [r7, #4]
 801c9c4:	68d2      	ldr	r2, [r2, #12]
 801c9c6:	1052      	asrs	r2, r2, #1
 801c9c8:	4413      	add	r3, r2
 801c9ca:	681b      	ldr	r3, [r3, #0]
 801c9cc:	687a      	ldr	r2, [r7, #4]
 801c9ce:	6892      	ldr	r2, [r2, #8]
 801c9d0:	4413      	add	r3, r2
 801c9d2:	681b      	ldr	r3, [r3, #0]
 801c9d4:	6839      	ldr	r1, [r7, #0]
 801c9d6:	4798      	blx	r3
    }
 801c9d8:	bf00      	nop
 801c9da:	3708      	adds	r7, #8
 801c9dc:	46bd      	mov	sp, r7
 801c9de:	bd80      	pop	{r7, pc}

0801c9e0 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 801c9e0:	b480      	push	{r7}
 801c9e2:	b083      	sub	sp, #12
 801c9e4:	af00      	add	r7, sp, #0
 801c9e6:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801c9e8:	687b      	ldr	r3, [r7, #4]
 801c9ea:	685b      	ldr	r3, [r3, #4]
 801c9ec:	2b00      	cmp	r3, #0
 801c9ee:	d010      	beq.n	801ca12 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801c9f0:	687b      	ldr	r3, [r7, #4]
 801c9f2:	689b      	ldr	r3, [r3, #8]
 801c9f4:	2b00      	cmp	r3, #0
 801c9f6:	d107      	bne.n	801ca08 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801c9f8:	687b      	ldr	r3, [r7, #4]
 801c9fa:	68db      	ldr	r3, [r3, #12]
 801c9fc:	f003 0301 	and.w	r3, r3, #1
 801ca00:	2b00      	cmp	r3, #0
 801ca02:	d101      	bne.n	801ca08 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801ca04:	2301      	movs	r3, #1
 801ca06:	e000      	b.n	801ca0a <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 801ca08:	2300      	movs	r3, #0
 801ca0a:	2b01      	cmp	r3, #1
 801ca0c:	d001      	beq.n	801ca12 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801ca0e:	2301      	movs	r3, #1
 801ca10:	e000      	b.n	801ca14 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 801ca12:	2300      	movs	r3, #0
    }
 801ca14:	4618      	mov	r0, r3
 801ca16:	370c      	adds	r7, #12
 801ca18:	46bd      	mov	sp, r7
 801ca1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca1e:	4770      	bx	lr

0801ca20 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE18handleAlphaUpdatedEv>:
    /**
     * @fn virtual void IconButtonStyle::handleAlphaUpdated()
     *
     * @brief Handles the alpha updated.
     */
    virtual void handleAlphaUpdated()
 801ca20:	b590      	push	{r4, r7, lr}
 801ca22:	b083      	sub	sp, #12
 801ca24:	af00      	add	r7, sp, #0
 801ca26:	6078      	str	r0, [r7, #4]
    {
        iconImage.setAlpha(T::getAlpha());
 801ca28:	687b      	ldr	r3, [r7, #4]
 801ca2a:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 801ca2e:	687b      	ldr	r3, [r7, #4]
 801ca30:	4618      	mov	r0, r3
 801ca32:	f7ff f894 	bl	801bb5e <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 801ca36:	4603      	mov	r3, r0
 801ca38:	4619      	mov	r1, r3
 801ca3a:	4620      	mov	r0, r4
 801ca3c:	f7f2 fe2c 	bl	800f698 <_ZN8touchgfx5Image8setAlphaEh>
        T::handleAlphaUpdated();
 801ca40:	687b      	ldr	r3, [r7, #4]
 801ca42:	4618      	mov	r0, r3
 801ca44:	f000 f804 	bl	801ca50 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>
    }
 801ca48:	bf00      	nop
 801ca4a:	370c      	adds	r7, #12
 801ca4c:	46bd      	mov	sp, r7
 801ca4e:	bd90      	pop	{r4, r7, pc}

0801ca50 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
    /**
     * @fn virtual void BoxWithBorderButtonStyle::handleAlphaUpdated()
     *
     * @brief Handles the alpha updated.
     */
    virtual void handleAlphaUpdated()
 801ca50:	b590      	push	{r4, r7, lr}
 801ca52:	b083      	sub	sp, #12
 801ca54:	af00      	add	r7, sp, #0
 801ca56:	6078      	str	r0, [r7, #4]
    {
        borderBox.setAlpha(T::getAlpha());
 801ca58:	687b      	ldr	r3, [r7, #4]
 801ca5a:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801ca5e:	687b      	ldr	r3, [r7, #4]
 801ca60:	4618      	mov	r0, r3
 801ca62:	f7ff f87c 	bl	801bb5e <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 801ca66:	4603      	mov	r3, r0
 801ca68:	4619      	mov	r1, r3
 801ca6a:	4620      	mov	r0, r4
 801ca6c:	f7ff f98c 	bl	801bd88 <_ZN8touchgfx13BoxWithBorder8setAlphaEh>
        T::handleAlphaUpdated();
 801ca70:	687b      	ldr	r3, [r7, #4]
 801ca72:	4618      	mov	r0, r3
 801ca74:	f7ff f898 	bl	801bba8 <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 801ca78:	bf00      	nop
 801ca7a:	370c      	adds	r7, #12
 801ca7c:	46bd      	mov	sp, r7
 801ca7e:	bd90      	pop	{r4, r7, pc}

0801ca80 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 801ca80:	b480      	push	{r7}
 801ca82:	af00      	add	r7, sp, #0
    return bitmap_database;
 801ca84:	4b02      	ldr	r3, [pc, #8]	; (801ca90 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 801ca86:	4618      	mov	r0, r3
 801ca88:	46bd      	mov	sp, r7
 801ca8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca8e:	4770      	bx	lr
 801ca90:	08025680 	.word	0x08025680

0801ca94 <_ZN14BitmapDatabase15getInstanceSizeEv>:
uint16_t getInstanceSize()
{
 801ca94:	b480      	push	{r7}
 801ca96:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 801ca98:	2303      	movs	r3, #3
}
 801ca9a:	4618      	mov	r0, r3
 801ca9c:	46bd      	mov	sp, r7
 801ca9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801caa2:	4770      	bx	lr

0801caa4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 801caa4:	b480      	push	{r7}
 801caa6:	b085      	sub	sp, #20
 801caa8:	af00      	add	r7, sp, #0
 801caaa:	60f8      	str	r0, [r7, #12]
 801caac:	60b9      	str	r1, [r7, #8]
 801caae:	4613      	mov	r3, r2
 801cab0:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 801cab2:	4a07      	ldr	r2, [pc, #28]	; (801cad0 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 801cab4:	68fb      	ldr	r3, [r7, #12]
 801cab6:	6013      	str	r3, [r2, #0]
        fonts = f;
 801cab8:	4a06      	ldr	r2, [pc, #24]	; (801cad4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 801caba:	68bb      	ldr	r3, [r7, #8]
 801cabc:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 801cabe:	4a06      	ldr	r2, [pc, #24]	; (801cad8 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 801cac0:	88fb      	ldrh	r3, [r7, #6]
 801cac2:	8013      	strh	r3, [r2, #0]
    }
 801cac4:	bf00      	nop
 801cac6:	3714      	adds	r7, #20
 801cac8:	46bd      	mov	sp, r7
 801caca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cace:	4770      	bx	lr
 801cad0:	20009d98 	.word	0x20009d98
 801cad4:	20009da0 	.word	0x20009da0
 801cad8:	20009d9c 	.word	0x20009d9c

0801cadc <_ZN8touchgfx5Texts11setLanguageEt>:

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
const touchgfx::Unicode::UnicodeChar* const* touchgfx::Texts::currentLanguagePtr = languagesArray[currentLanguage];

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 801cadc:	b5b0      	push	{r4, r5, r7, lr}
 801cade:	b082      	sub	sp, #8
 801cae0:	af00      	add	r7, sp, #0
 801cae2:	4603      	mov	r3, r0
 801cae4:	80fb      	strh	r3, [r7, #6]
    currentLanguage = id;
 801cae6:	4a0d      	ldr	r2, [pc, #52]	; (801cb1c <_ZN8touchgfx5Texts11setLanguageEt+0x40>)
 801cae8:	88fb      	ldrh	r3, [r7, #6]
 801caea:	8013      	strh	r3, [r2, #0]
    currentLanguagePtr = languagesArray[currentLanguage];
 801caec:	4a0c      	ldr	r2, [pc, #48]	; (801cb20 <_ZN8touchgfx5Texts11setLanguageEt+0x44>)
 801caee:	4b0d      	ldr	r3, [pc, #52]	; (801cb24 <_ZN8touchgfx5Texts11setLanguageEt+0x48>)
 801caf0:	601a      	str	r2, [r3, #0]

    touchgfx::TypedText::registerTypedTextDatabase(TypedTextDatabase::getInstance(currentLanguage),
 801caf2:	4b0a      	ldr	r3, [pc, #40]	; (801cb1c <_ZN8touchgfx5Texts11setLanguageEt+0x40>)
 801caf4:	881b      	ldrh	r3, [r3, #0]
 801caf6:	4618      	mov	r0, r3
 801caf8:	f000 f838 	bl	801cb6c <_ZN17TypedTextDatabase11getInstanceEt>
 801cafc:	4604      	mov	r4, r0
 801cafe:	f000 f84b 	bl	801cb98 <_ZN17TypedTextDatabase8getFontsEv>
 801cb02:	4605      	mov	r5, r0
 801cb04:	f000 f840 	bl	801cb88 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 801cb08:	4603      	mov	r3, r0
 801cb0a:	461a      	mov	r2, r3
 801cb0c:	4629      	mov	r1, r5
 801cb0e:	4620      	mov	r0, r4
 801cb10:	f7ff ffc8 	bl	801caa4 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
                                                   TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
}
 801cb14:	bf00      	nop
 801cb16:	3708      	adds	r7, #8
 801cb18:	46bd      	mov	sp, r7
 801cb1a:	bdb0      	pop	{r4, r5, r7, pc}
 801cb1c:	20009c98 	.word	0x20009c98
 801cb20:	0804fe40 	.word	0x0804fe40
 801cb24:	20009c9c 	.word	0x20009c9c

0801cb28 <_Z41__static_initialization_and_destruction_0ii>:
 801cb28:	b480      	push	{r7}
 801cb2a:	b083      	sub	sp, #12
 801cb2c:	af00      	add	r7, sp, #0
 801cb2e:	6078      	str	r0, [r7, #4]
 801cb30:	6039      	str	r1, [r7, #0]
 801cb32:	687b      	ldr	r3, [r7, #4]
 801cb34:	2b01      	cmp	r3, #1
 801cb36:	d107      	bne.n	801cb48 <_Z41__static_initialization_and_destruction_0ii+0x20>
 801cb38:	683b      	ldr	r3, [r7, #0]
 801cb3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cb3e:	4293      	cmp	r3, r2
 801cb40:	d102      	bne.n	801cb48 <_Z41__static_initialization_and_destruction_0ii+0x20>
const touchgfx::Unicode::UnicodeChar* const* touchgfx::Texts::currentLanguagePtr = languagesArray[currentLanguage];
 801cb42:	4a04      	ldr	r2, [pc, #16]	; (801cb54 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 801cb44:	4b04      	ldr	r3, [pc, #16]	; (801cb58 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 801cb46:	601a      	str	r2, [r3, #0]
}
 801cb48:	bf00      	nop
 801cb4a:	370c      	adds	r7, #12
 801cb4c:	46bd      	mov	sp, r7
 801cb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb52:	4770      	bx	lr
 801cb54:	0804fe40 	.word	0x0804fe40
 801cb58:	20009c9c 	.word	0x20009c9c

0801cb5c <_GLOBAL__sub_I__ZN8touchgfx4Font22getStringWidthFunctionE>:
 801cb5c:	b580      	push	{r7, lr}
 801cb5e:	af00      	add	r7, sp, #0
 801cb60:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801cb64:	2001      	movs	r0, #1
 801cb66:	f7ff ffdf 	bl	801cb28 <_Z41__static_initialization_and_destruction_0ii>
 801cb6a:	bd80      	pop	{r7, pc}

0801cb6c <_ZN17TypedTextDatabase11getInstanceEt>:
};

namespace TypedTextDatabase
{
const touchgfx::TypedText::TypedTextData* getInstance(touchgfx::LanguageId id)
{
 801cb6c:	b480      	push	{r7}
 801cb6e:	b083      	sub	sp, #12
 801cb70:	af00      	add	r7, sp, #0
 801cb72:	4603      	mov	r3, r0
 801cb74:	80fb      	strh	r3, [r7, #6]
    return typedTextDatabaseArray[id];
 801cb76:	4b03      	ldr	r3, [pc, #12]	; (801cb84 <_ZN17TypedTextDatabase11getInstanceEt+0x18>)
}
 801cb78:	4618      	mov	r0, r3
 801cb7a:	370c      	adds	r7, #12
 801cb7c:	46bd      	mov	sp, r7
 801cb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb82:	4770      	bx	lr
 801cb84:	0804fe5c 	.word	0x0804fe5c

0801cb88 <_ZN17TypedTextDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 801cb88:	b480      	push	{r7}
 801cb8a:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 801cb8c:	2307      	movs	r3, #7
}
 801cb8e:	4618      	mov	r0, r3
 801cb90:	46bd      	mov	sp, r7
 801cb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb96:	4770      	bx	lr

0801cb98 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font* const* getFonts()
{
 801cb98:	b480      	push	{r7}
 801cb9a:	af00      	add	r7, sp, #0
    return _fonts;
 801cb9c:	4b02      	ldr	r3, [pc, #8]	; (801cba8 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 801cb9e:	4618      	mov	r0, r3
 801cba0:	46bd      	mov	sp, r7
 801cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cba6:	4770      	bx	lr
 801cba8:	20009ca0 	.word	0x20009ca0

0801cbac <_Z41__static_initialization_and_destruction_0ii>:
}
 801cbac:	b580      	push	{r7, lr}
 801cbae:	b082      	sub	sp, #8
 801cbb0:	af00      	add	r7, sp, #0
 801cbb2:	6078      	str	r0, [r7, #4]
 801cbb4:	6039      	str	r1, [r7, #0]
 801cbb6:	687b      	ldr	r3, [r7, #4]
 801cbb8:	2b01      	cmp	r3, #1
 801cbba:	d113      	bne.n	801cbe4 <_Z41__static_initialization_and_destruction_0ii+0x38>
 801cbbc:	683b      	ldr	r3, [r7, #0]
 801cbbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cbc2:	4293      	cmp	r3, r2
 801cbc4:	d10e      	bne.n	801cbe4 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 801cbc6:	f7fd fab9 	bl	801a13c <_Z23getFont_verdana_20_4bppv>
 801cbca:	4603      	mov	r3, r0
};
 801cbcc:	4a07      	ldr	r2, [pc, #28]	; (801cbec <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801cbce:	6013      	str	r3, [r2, #0]
    &(getFont_verdana_40_4bpp()),
 801cbd0:	f7fd fb04 	bl	801a1dc <_Z23getFont_verdana_40_4bppv>
 801cbd4:	4603      	mov	r3, r0
};
 801cbd6:	4a05      	ldr	r2, [pc, #20]	; (801cbec <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801cbd8:	6053      	str	r3, [r2, #4]
    &(getFont_verdana_10_4bpp())
 801cbda:	f7fd fa5f 	bl	801a09c <_Z23getFont_verdana_10_4bppv>
 801cbde:	4603      	mov	r3, r0
};
 801cbe0:	4a02      	ldr	r2, [pc, #8]	; (801cbec <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801cbe2:	6093      	str	r3, [r2, #8]
}
 801cbe4:	bf00      	nop
 801cbe6:	3708      	adds	r7, #8
 801cbe8:	46bd      	mov	sp, r7
 801cbea:	bd80      	pop	{r7, pc}
 801cbec:	20009ca0 	.word	0x20009ca0

0801cbf0 <_GLOBAL__sub_I__ZN17TypedTextDatabase11getInstanceEt>:
 801cbf0:	b580      	push	{r7, lr}
 801cbf2:	af00      	add	r7, sp, #0
 801cbf4:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801cbf8:	2001      	movs	r0, #1
 801cbfa:	f7ff ffd7 	bl	801cbac <_Z41__static_initialization_and_destruction_0ii>
 801cbfe:	bd80      	pop	{r7, pc}

0801cc00 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 801cc00:	b580      	push	{r7, lr}
 801cc02:	b084      	sub	sp, #16
 801cc04:	af00      	add	r7, sp, #0
 801cc06:	60f8      	str	r0, [r7, #12]
 801cc08:	60b9      	str	r1, [r7, #8]
 801cc0a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 801cc0c:	68fb      	ldr	r3, [r7, #12]
 801cc0e:	687a      	ldr	r2, [r7, #4]
 801cc10:	68b9      	ldr	r1, [r7, #8]
 801cc12:	4618      	mov	r0, r3
 801cc14:	f7fd fcbc 	bl	801a590 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 801cc18:	4a03      	ldr	r2, [pc, #12]	; (801cc28 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 801cc1a:	68fb      	ldr	r3, [r7, #12]
 801cc1c:	601a      	str	r2, [r3, #0]
{
}
 801cc1e:	68fb      	ldr	r3, [r7, #12]
 801cc20:	4618      	mov	r0, r3
 801cc22:	3710      	adds	r7, #16
 801cc24:	46bd      	mov	sp, r7
 801cc26:	bd80      	pop	{r7, pc}
 801cc28:	08024f44 	.word	0x08024f44

0801cc2c <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 801cc2c:	b480      	push	{r7}
 801cc2e:	b083      	sub	sp, #12
 801cc30:	af00      	add	r7, sp, #0
 801cc32:	6078      	str	r0, [r7, #4]
 801cc34:	687b      	ldr	r3, [r7, #4]
 801cc36:	2200      	movs	r2, #0
 801cc38:	601a      	str	r2, [r3, #0]
{
}
 801cc3a:	687b      	ldr	r3, [r7, #4]
 801cc3c:	4618      	mov	r0, r3
 801cc3e:	370c      	adds	r7, #12
 801cc40:	46bd      	mov	sp, r7
 801cc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc46:	4770      	bx	lr

0801cc48 <_ZN5Model4tickEv>:

void Model::tick()
{
 801cc48:	b480      	push	{r7}
 801cc4a:	b083      	sub	sp, #12
 801cc4c:	af00      	add	r7, sp, #0
 801cc4e:	6078      	str	r0, [r7, #4]
}
 801cc50:	bf00      	nop
 801cc52:	370c      	adds	r7, #12
 801cc54:	46bd      	mov	sp, r7
 801cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc5a:	4770      	bx	lr

0801cc5c <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 801cc5c:	b480      	push	{r7}
 801cc5e:	b083      	sub	sp, #12
 801cc60:	af00      	add	r7, sp, #0
 801cc62:	6078      	str	r0, [r7, #4]
    {
    }
 801cc64:	bf00      	nop
 801cc66:	370c      	adds	r7, #12
 801cc68:	46bd      	mov	sp, r7
 801cc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc6e:	4770      	bx	lr

0801cc70 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 801cc70:	b480      	push	{r7}
 801cc72:	b083      	sub	sp, #12
 801cc74:	af00      	add	r7, sp, #0
 801cc76:	6078      	str	r0, [r7, #4]
    {
    }
 801cc78:	bf00      	nop
 801cc7a:	370c      	adds	r7, #12
 801cc7c:	46bd      	mov	sp, r7
 801cc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc82:	4770      	bx	lr

0801cc84 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 801cc84:	b480      	push	{r7}
 801cc86:	b083      	sub	sp, #12
 801cc88:	af00      	add	r7, sp, #0
 801cc8a:	6078      	str	r0, [r7, #4]
    {
 801cc8c:	4a04      	ldr	r2, [pc, #16]	; (801cca0 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 801cc8e:	687b      	ldr	r3, [r7, #4]
 801cc90:	601a      	str	r2, [r3, #0]
    }
 801cc92:	687b      	ldr	r3, [r7, #4]
 801cc94:	4618      	mov	r0, r3
 801cc96:	370c      	adds	r7, #12
 801cc98:	46bd      	mov	sp, r7
 801cc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc9e:	4770      	bx	lr
 801cca0:	080256fc 	.word	0x080256fc

0801cca4 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 801cca4:	b580      	push	{r7, lr}
 801cca6:	b082      	sub	sp, #8
 801cca8:	af00      	add	r7, sp, #0
 801ccaa:	6078      	str	r0, [r7, #4]
    }
 801ccac:	6878      	ldr	r0, [r7, #4]
 801ccae:	f7ff ffe9 	bl	801cc84 <_ZN8touchgfx9PresenterD1Ev>
 801ccb2:	2104      	movs	r1, #4
 801ccb4:	6878      	ldr	r0, [r7, #4]
 801ccb6:	f005 fc69 	bl	802258c <_ZdlPvj>
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	4618      	mov	r0, r3
 801ccbe:	3708      	adds	r7, #8
 801ccc0:	46bd      	mov	sp, r7
 801ccc2:	bd80      	pop	{r7, pc}

0801ccc4 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 801ccc4:	b480      	push	{r7}
 801ccc6:	b083      	sub	sp, #12
 801ccc8:	af00      	add	r7, sp, #0
 801ccca:	6078      	str	r0, [r7, #4]
    {
 801cccc:	4a04      	ldr	r2, [pc, #16]	; (801cce0 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 801ccce:	687b      	ldr	r3, [r7, #4]
 801ccd0:	601a      	str	r2, [r3, #0]
    }
 801ccd2:	687b      	ldr	r3, [r7, #4]
 801ccd4:	4618      	mov	r0, r3
 801ccd6:	370c      	adds	r7, #12
 801ccd8:	46bd      	mov	sp, r7
 801ccda:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccde:	4770      	bx	lr
 801cce0:	080256fc 	.word	0x080256fc

0801cce4 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 801cce4:	b480      	push	{r7}
 801cce6:	b083      	sub	sp, #12
 801cce8:	af00      	add	r7, sp, #0
 801ccea:	6078      	str	r0, [r7, #4]
 801ccec:	4a06      	ldr	r2, [pc, #24]	; (801cd08 <_ZN13ModelListenerC1Ev+0x24>)
 801ccee:	687b      	ldr	r3, [r7, #4]
 801ccf0:	601a      	str	r2, [r3, #0]
 801ccf2:	687b      	ldr	r3, [r7, #4]
 801ccf4:	2200      	movs	r2, #0
 801ccf6:	605a      	str	r2, [r3, #4]
 801ccf8:	687b      	ldr	r3, [r7, #4]
 801ccfa:	4618      	mov	r0, r3
 801ccfc:	370c      	adds	r7, #12
 801ccfe:	46bd      	mov	sp, r7
 801cd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd04:	4770      	bx	lr
 801cd06:	bf00      	nop
 801cd08:	080256ec 	.word	0x080256ec

0801cd0c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 801cd0c:	b480      	push	{r7}
 801cd0e:	b083      	sub	sp, #12
 801cd10:	af00      	add	r7, sp, #0
 801cd12:	6078      	str	r0, [r7, #4]
 801cd14:	4a04      	ldr	r2, [pc, #16]	; (801cd28 <_ZN13ModelListenerD1Ev+0x1c>)
 801cd16:	687b      	ldr	r3, [r7, #4]
 801cd18:	601a      	str	r2, [r3, #0]
 801cd1a:	687b      	ldr	r3, [r7, #4]
 801cd1c:	4618      	mov	r0, r3
 801cd1e:	370c      	adds	r7, #12
 801cd20:	46bd      	mov	sp, r7
 801cd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd26:	4770      	bx	lr
 801cd28:	080256ec 	.word	0x080256ec

0801cd2c <_ZN13ModelListenerD0Ev>:
 801cd2c:	b580      	push	{r7, lr}
 801cd2e:	b082      	sub	sp, #8
 801cd30:	af00      	add	r7, sp, #0
 801cd32:	6078      	str	r0, [r7, #4]
 801cd34:	6878      	ldr	r0, [r7, #4]
 801cd36:	f7ff ffe9 	bl	801cd0c <_ZN13ModelListenerD1Ev>
 801cd3a:	2108      	movs	r1, #8
 801cd3c:	6878      	ldr	r0, [r7, #4]
 801cd3e:	f005 fc25 	bl	802258c <_ZdlPvj>
 801cd42:	687b      	ldr	r3, [r7, #4]
 801cd44:	4618      	mov	r0, r3
 801cd46:	3708      	adds	r7, #8
 801cd48:	46bd      	mov	sp, r7
 801cd4a:	bd80      	pop	{r7, pc}

0801cd4c <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 801cd4c:	b580      	push	{r7, lr}
 801cd4e:	b082      	sub	sp, #8
 801cd50:	af00      	add	r7, sp, #0
 801cd52:	6078      	str	r0, [r7, #4]
 801cd54:	4a09      	ldr	r2, [pc, #36]	; (801cd7c <_ZN16Screen1PresenterD1Ev+0x30>)
 801cd56:	687b      	ldr	r3, [r7, #4]
 801cd58:	601a      	str	r2, [r3, #0]
 801cd5a:	4a09      	ldr	r2, [pc, #36]	; (801cd80 <_ZN16Screen1PresenterD1Ev+0x34>)
 801cd5c:	687b      	ldr	r3, [r7, #4]
 801cd5e:	605a      	str	r2, [r3, #4]
 801cd60:	687b      	ldr	r3, [r7, #4]
 801cd62:	3304      	adds	r3, #4
 801cd64:	4618      	mov	r0, r3
 801cd66:	f7ff ffd1 	bl	801cd0c <_ZN13ModelListenerD1Ev>
 801cd6a:	687b      	ldr	r3, [r7, #4]
 801cd6c:	4618      	mov	r0, r3
 801cd6e:	f7ff ff89 	bl	801cc84 <_ZN8touchgfx9PresenterD1Ev>
 801cd72:	687b      	ldr	r3, [r7, #4]
 801cd74:	4618      	mov	r0, r3
 801cd76:	3708      	adds	r7, #8
 801cd78:	46bd      	mov	sp, r7
 801cd7a:	bd80      	pop	{r7, pc}
 801cd7c:	080256c4 	.word	0x080256c4
 801cd80:	080256dc 	.word	0x080256dc

0801cd84 <_ZThn4_N16Screen1PresenterD1Ev>:
 801cd84:	f1a0 0004 	sub.w	r0, r0, #4
 801cd88:	e7e0      	b.n	801cd4c <_ZN16Screen1PresenterD1Ev>
 801cd8a:	bf00      	nop

0801cd8c <_ZN16Screen1PresenterD0Ev>:
 801cd8c:	b580      	push	{r7, lr}
 801cd8e:	b082      	sub	sp, #8
 801cd90:	af00      	add	r7, sp, #0
 801cd92:	6078      	str	r0, [r7, #4]
 801cd94:	6878      	ldr	r0, [r7, #4]
 801cd96:	f7ff ffd9 	bl	801cd4c <_ZN16Screen1PresenterD1Ev>
 801cd9a:	2110      	movs	r1, #16
 801cd9c:	6878      	ldr	r0, [r7, #4]
 801cd9e:	f005 fbf5 	bl	802258c <_ZdlPvj>
 801cda2:	687b      	ldr	r3, [r7, #4]
 801cda4:	4618      	mov	r0, r3
 801cda6:	3708      	adds	r7, #8
 801cda8:	46bd      	mov	sp, r7
 801cdaa:	bd80      	pop	{r7, pc}

0801cdac <_ZThn4_N16Screen1PresenterD0Ev>:
 801cdac:	f1a0 0004 	sub.w	r0, r0, #4
 801cdb0:	e7ec      	b.n	801cd8c <_ZN16Screen1PresenterD0Ev>
	...

0801cdb4 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 801cdb4:	b580      	push	{r7, lr}
 801cdb6:	b082      	sub	sp, #8
 801cdb8:	af00      	add	r7, sp, #0
 801cdba:	6078      	str	r0, [r7, #4]
 801cdbc:	6039      	str	r1, [r7, #0]
    : view(v)
 801cdbe:	687b      	ldr	r3, [r7, #4]
 801cdc0:	4618      	mov	r0, r3
 801cdc2:	f7ff ff7f 	bl	801ccc4 <_ZN8touchgfx9PresenterC1Ev>
 801cdc6:	687b      	ldr	r3, [r7, #4]
 801cdc8:	3304      	adds	r3, #4
 801cdca:	4618      	mov	r0, r3
 801cdcc:	f7ff ff8a 	bl	801cce4 <_ZN13ModelListenerC1Ev>
 801cdd0:	4a06      	ldr	r2, [pc, #24]	; (801cdec <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 801cdd2:	687b      	ldr	r3, [r7, #4]
 801cdd4:	601a      	str	r2, [r3, #0]
 801cdd6:	4a06      	ldr	r2, [pc, #24]	; (801cdf0 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 801cdd8:	687b      	ldr	r3, [r7, #4]
 801cdda:	605a      	str	r2, [r3, #4]
 801cddc:	687b      	ldr	r3, [r7, #4]
 801cdde:	683a      	ldr	r2, [r7, #0]
 801cde0:	60da      	str	r2, [r3, #12]
{
}
 801cde2:	687b      	ldr	r3, [r7, #4]
 801cde4:	4618      	mov	r0, r3
 801cde6:	3708      	adds	r7, #8
 801cde8:	46bd      	mov	sp, r7
 801cdea:	bd80      	pop	{r7, pc}
 801cdec:	080256c4 	.word	0x080256c4
 801cdf0:	080256dc 	.word	0x080256dc

0801cdf4 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 801cdf4:	b480      	push	{r7}
 801cdf6:	b083      	sub	sp, #12
 801cdf8:	af00      	add	r7, sp, #0
 801cdfa:	6078      	str	r0, [r7, #4]

}
 801cdfc:	bf00      	nop
 801cdfe:	370c      	adds	r7, #12
 801ce00:	46bd      	mov	sp, r7
 801ce02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce06:	4770      	bx	lr

0801ce08 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 801ce08:	b480      	push	{r7}
 801ce0a:	b083      	sub	sp, #12
 801ce0c:	af00      	add	r7, sp, #0
 801ce0e:	6078      	str	r0, [r7, #4]

}
 801ce10:	bf00      	nop
 801ce12:	370c      	adds	r7, #12
 801ce14:	46bd      	mov	sp, r7
 801ce16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce1a:	4770      	bx	lr

0801ce1c <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 801ce1c:	b580      	push	{r7, lr}
 801ce1e:	b082      	sub	sp, #8
 801ce20:	af00      	add	r7, sp, #0
 801ce22:	6078      	str	r0, [r7, #4]
 801ce24:	4a08      	ldr	r2, [pc, #32]	; (801ce48 <_ZN11Screen1ViewD1Ev+0x2c>)
 801ce26:	687b      	ldr	r3, [r7, #4]
 801ce28:	601a      	str	r2, [r3, #0]
 801ce2a:	687b      	ldr	r3, [r7, #4]
 801ce2c:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 801ce30:	4618      	mov	r0, r3
 801ce32:	f7f2 fbc3 	bl	800f5bc <_ZN8touchgfx6ButtonD1Ev>
 801ce36:	687b      	ldr	r3, [r7, #4]
 801ce38:	4618      	mov	r0, r3
 801ce3a:	f7fe fb4d 	bl	801b4d8 <_ZN15Screen1ViewBaseD1Ev>
 801ce3e:	687b      	ldr	r3, [r7, #4]
 801ce40:	4618      	mov	r0, r3
 801ce42:	3708      	adds	r7, #8
 801ce44:	46bd      	mov	sp, r7
 801ce46:	bd80      	pop	{r7, pc}
 801ce48:	08025714 	.word	0x08025714

0801ce4c <_ZN11Screen1ViewD0Ev>:
 801ce4c:	b580      	push	{r7, lr}
 801ce4e:	b082      	sub	sp, #8
 801ce50:	af00      	add	r7, sp, #0
 801ce52:	6078      	str	r0, [r7, #4]
 801ce54:	6878      	ldr	r0, [r7, #4]
 801ce56:	f7ff ffe1 	bl	801ce1c <_ZN11Screen1ViewD1Ev>
 801ce5a:	f44f 7109 	mov.w	r1, #548	; 0x224
 801ce5e:	6878      	ldr	r0, [r7, #4]
 801ce60:	f005 fb94 	bl	802258c <_ZdlPvj>
 801ce64:	687b      	ldr	r3, [r7, #4]
 801ce66:	4618      	mov	r0, r3
 801ce68:	3708      	adds	r7, #8
 801ce6a:	46bd      	mov	sp, r7
 801ce6c:	bd80      	pop	{r7, pc}

0801ce6e <_ZN11Screen1View8initUARTEv>:
#include <gui/screen1_screen/Screen1View.hpp>


// disabled
void Screen1View::initUART(){
 801ce6e:	b480      	push	{r7}
 801ce70:	b083      	sub	sp, #12
 801ce72:	af00      	add	r7, sp, #0
 801ce74:	6078      	str	r0, [r7, #4]

}
 801ce76:	bf00      	nop
 801ce78:	370c      	adds	r7, #12
 801ce7a:	46bd      	mov	sp, r7
 801ce7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce80:	4770      	bx	lr
	...

0801ce84 <_ZN11Screen1ViewC1Ev>:


Screen1View::Screen1View()
 801ce84:	b580      	push	{r7, lr}
 801ce86:	b082      	sub	sp, #8
 801ce88:	af00      	add	r7, sp, #0
 801ce8a:	6078      	str	r0, [r7, #4]
 801ce8c:	687b      	ldr	r3, [r7, #4]
 801ce8e:	4618      	mov	r0, r3
 801ce90:	f7fe fb86 	bl	801b5a0 <_ZN15Screen1ViewBaseC1Ev>
 801ce94:	4a06      	ldr	r2, [pc, #24]	; (801ceb0 <_ZN11Screen1ViewC1Ev+0x2c>)
 801ce96:	687b      	ldr	r3, [r7, #4]
 801ce98:	601a      	str	r2, [r3, #0]
 801ce9a:	687b      	ldr	r3, [r7, #4]
 801ce9c:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 801cea0:	4618      	mov	r0, r3
 801cea2:	f7f2 fb67 	bl	800f574 <_ZN8touchgfx6ButtonC1Ev>
{

}
 801cea6:	687b      	ldr	r3, [r7, #4]
 801cea8:	4618      	mov	r0, r3
 801ceaa:	3708      	adds	r7, #8
 801ceac:	46bd      	mov	sp, r7
 801ceae:	bd80      	pop	{r7, pc}
 801ceb0:	08025714 	.word	0x08025714

0801ceb4 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 801ceb4:	b580      	push	{r7, lr}
 801ceb6:	b082      	sub	sp, #8
 801ceb8:	af00      	add	r7, sp, #0
 801ceba:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 801cebc:	687b      	ldr	r3, [r7, #4]
 801cebe:	4618      	mov	r0, r3
 801cec0:	f7fe fd1e 	bl	801b900 <_ZN15Screen1ViewBase11setupScreenEv>
    touchgfx_printf("screen 1 loaded \n");
}
 801cec4:	bf00      	nop
 801cec6:	3708      	adds	r7, #8
 801cec8:	46bd      	mov	sp, r7
 801ceca:	bd80      	pop	{r7, pc}

0801cecc <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 801cecc:	b580      	push	{r7, lr}
 801cece:	b082      	sub	sp, #8
 801ced0:	af00      	add	r7, sp, #0
 801ced2:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 801ced4:	687b      	ldr	r3, [r7, #4]
 801ced6:	4618      	mov	r0, r3
 801ced8:	f7fe fa68 	bl	801b3ac <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 801cedc:	bf00      	nop
 801cede:	3708      	adds	r7, #8
 801cee0:	46bd      	mov	sp, r7
 801cee2:	bd80      	pop	{r7, pc}

0801cee4 <_ZN11Screen1View12button3clickEv>:

/* uart init button */
/* add Wildcard range 0x20-0xFE to touchgfx otherwhise not working. */
void Screen1View::button3click(){
 801cee4:	b580      	push	{r7, lr}
 801cee6:	b092      	sub	sp, #72	; 0x48
 801cee8:	af02      	add	r7, sp, #8
 801ceea:	6078      	str	r0, [r7, #4]
	touchgfx_printf("inint uart\n");

	/* print out int and text on UI*/
	 int some_int = 50;
 801ceec:	2332      	movs	r3, #50	; 0x32
 801ceee:	63fb      	str	r3, [r7, #60]	; 0x3c
	 Unicode::UnicodeChar list[TEXTAREA3_SIZE] = {0x42,0xE1, 0xE9, 0}; // tmp Unicode char array
 801cef0:	f107 0308 	add.w	r3, r7, #8
 801cef4:	2230      	movs	r2, #48	; 0x30
 801cef6:	2100      	movs	r1, #0
 801cef8:	4618      	mov	r0, r3
 801cefa:	f005 fbf3 	bl	80226e4 <memset>
 801cefe:	2342      	movs	r3, #66	; 0x42
 801cf00:	813b      	strh	r3, [r7, #8]
 801cf02:	23e1      	movs	r3, #225	; 0xe1
 801cf04:	817b      	strh	r3, [r7, #10]
 801cf06:	23e9      	movs	r3, #233	; 0xe9
 801cf08:	81bb      	strh	r3, [r7, #12]

	 const char* tmpp = "Hello World! "; // string to print
 801cf0a:	4b12      	ldr	r3, [pc, #72]	; (801cf54 <_ZN11Screen1View12button3clickEv+0x70>)
 801cf0c:	63bb      	str	r3, [r7, #56]	; 0x38

	 Unicode::strncpy(list, tmpp, TEXTAREA3_SIZE); // copt string to array.
 801cf0e:	f107 0308 	add.w	r3, r7, #8
 801cf12:	2218      	movs	r2, #24
 801cf14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801cf16:	4618      	mov	r0, r3
 801cf18:	f002 fe60 	bl	801fbdc <_ZN8touchgfx7Unicode7strncpyEPtPKct>

	 Unicode::snprintf(textArea3Buffer, TEXTAREA3_SIZE, "%s %d", list, some_int); // write out
 801cf1c:	687b      	ldr	r3, [r7, #4]
 801cf1e:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 801cf22:	f107 0208 	add.w	r2, r7, #8
 801cf26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cf28:	9300      	str	r3, [sp, #0]
 801cf2a:	4613      	mov	r3, r2
 801cf2c:	4a0a      	ldr	r2, [pc, #40]	; (801cf58 <_ZN11Screen1View12button3clickEv+0x74>)
 801cf2e:	2118      	movs	r1, #24
 801cf30:	f003 f950 	bl	80201d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	 textArea3.invalidate();
 801cf34:	687b      	ldr	r3, [r7, #4]
 801cf36:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801cf3a:	4618      	mov	r0, r3
 801cf3c:	f002 f8b3 	bl	801f0a6 <_ZNK8touchgfx8Drawable10invalidateEv>

#ifndef SIMULATOR
	initUART();
 801cf40:	687b      	ldr	r3, [r7, #4]
 801cf42:	681b      	ldr	r3, [r3, #0]
 801cf44:	3334      	adds	r3, #52	; 0x34
 801cf46:	681b      	ldr	r3, [r3, #0]
 801cf48:	6878      	ldr	r0, [r7, #4]
 801cf4a:	4798      	blx	r3

#endif
}
 801cf4c:	bf00      	nop
 801cf4e:	3740      	adds	r7, #64	; 0x40
 801cf50:	46bd      	mov	sp, r7
 801cf52:	bd80      	pop	{r7, pc}
 801cf54:	08024798 	.word	0x08024798
 801cf58:	080247a8 	.word	0x080247a8

0801cf5c <_ZN11Screen1View12button2clickEv>:

void Screen1View::button2click()
{
 801cf5c:	b480      	push	{r7}
 801cf5e:	b083      	sub	sp, #12
 801cf60:	af00      	add	r7, sp, #0
 801cf62:	6078      	str	r0, [r7, #4]
}
 801cf64:	bf00      	nop
 801cf66:	370c      	adds	r7, #12
 801cf68:	46bd      	mov	sp, r7
 801cf6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf6e:	4770      	bx	lr

0801cf70 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 801cf70:	b580      	push	{r7, lr}
 801cf72:	b082      	sub	sp, #8
 801cf74:	af00      	add	r7, sp, #0
 801cf76:	6078      	str	r0, [r7, #4]
 801cf78:	4a09      	ldr	r2, [pc, #36]	; (801cfa0 <_ZN16Screen2PresenterD1Ev+0x30>)
 801cf7a:	687b      	ldr	r3, [r7, #4]
 801cf7c:	601a      	str	r2, [r3, #0]
 801cf7e:	4a09      	ldr	r2, [pc, #36]	; (801cfa4 <_ZN16Screen2PresenterD1Ev+0x34>)
 801cf80:	687b      	ldr	r3, [r7, #4]
 801cf82:	605a      	str	r2, [r3, #4]
 801cf84:	687b      	ldr	r3, [r7, #4]
 801cf86:	3304      	adds	r3, #4
 801cf88:	4618      	mov	r0, r3
 801cf8a:	f7ff febf 	bl	801cd0c <_ZN13ModelListenerD1Ev>
 801cf8e:	687b      	ldr	r3, [r7, #4]
 801cf90:	4618      	mov	r0, r3
 801cf92:	f7ff fe77 	bl	801cc84 <_ZN8touchgfx9PresenterD1Ev>
 801cf96:	687b      	ldr	r3, [r7, #4]
 801cf98:	4618      	mov	r0, r3
 801cf9a:	3708      	adds	r7, #8
 801cf9c:	46bd      	mov	sp, r7
 801cf9e:	bd80      	pop	{r7, pc}
 801cfa0:	08025754 	.word	0x08025754
 801cfa4:	0802576c 	.word	0x0802576c

0801cfa8 <_ZThn4_N16Screen2PresenterD1Ev>:
 801cfa8:	f1a0 0004 	sub.w	r0, r0, #4
 801cfac:	e7e0      	b.n	801cf70 <_ZN16Screen2PresenterD1Ev>
 801cfae:	bf00      	nop

0801cfb0 <_ZN16Screen2PresenterD0Ev>:
 801cfb0:	b580      	push	{r7, lr}
 801cfb2:	b082      	sub	sp, #8
 801cfb4:	af00      	add	r7, sp, #0
 801cfb6:	6078      	str	r0, [r7, #4]
 801cfb8:	6878      	ldr	r0, [r7, #4]
 801cfba:	f7ff ffd9 	bl	801cf70 <_ZN16Screen2PresenterD1Ev>
 801cfbe:	2110      	movs	r1, #16
 801cfc0:	6878      	ldr	r0, [r7, #4]
 801cfc2:	f005 fae3 	bl	802258c <_ZdlPvj>
 801cfc6:	687b      	ldr	r3, [r7, #4]
 801cfc8:	4618      	mov	r0, r3
 801cfca:	3708      	adds	r7, #8
 801cfcc:	46bd      	mov	sp, r7
 801cfce:	bd80      	pop	{r7, pc}

0801cfd0 <_ZThn4_N16Screen2PresenterD0Ev>:
 801cfd0:	f1a0 0004 	sub.w	r0, r0, #4
 801cfd4:	e7ec      	b.n	801cfb0 <_ZN16Screen2PresenterD0Ev>
	...

0801cfd8 <_ZN16Screen2PresenterC1ER11Screen2View>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

Screen2Presenter::Screen2Presenter(Screen2View& v)
 801cfd8:	b580      	push	{r7, lr}
 801cfda:	b082      	sub	sp, #8
 801cfdc:	af00      	add	r7, sp, #0
 801cfde:	6078      	str	r0, [r7, #4]
 801cfe0:	6039      	str	r1, [r7, #0]
    : view(v)
 801cfe2:	687b      	ldr	r3, [r7, #4]
 801cfe4:	4618      	mov	r0, r3
 801cfe6:	f7ff fe6d 	bl	801ccc4 <_ZN8touchgfx9PresenterC1Ev>
 801cfea:	687b      	ldr	r3, [r7, #4]
 801cfec:	3304      	adds	r3, #4
 801cfee:	4618      	mov	r0, r3
 801cff0:	f7ff fe78 	bl	801cce4 <_ZN13ModelListenerC1Ev>
 801cff4:	4a06      	ldr	r2, [pc, #24]	; (801d010 <_ZN16Screen2PresenterC1ER11Screen2View+0x38>)
 801cff6:	687b      	ldr	r3, [r7, #4]
 801cff8:	601a      	str	r2, [r3, #0]
 801cffa:	4a06      	ldr	r2, [pc, #24]	; (801d014 <_ZN16Screen2PresenterC1ER11Screen2View+0x3c>)
 801cffc:	687b      	ldr	r3, [r7, #4]
 801cffe:	605a      	str	r2, [r3, #4]
 801d000:	687b      	ldr	r3, [r7, #4]
 801d002:	683a      	ldr	r2, [r7, #0]
 801d004:	60da      	str	r2, [r3, #12]
{
}
 801d006:	687b      	ldr	r3, [r7, #4]
 801d008:	4618      	mov	r0, r3
 801d00a:	3708      	adds	r7, #8
 801d00c:	46bd      	mov	sp, r7
 801d00e:	bd80      	pop	{r7, pc}
 801d010:	08025754 	.word	0x08025754
 801d014:	0802576c 	.word	0x0802576c

0801d018 <_ZN16Screen2Presenter8activateEv>:

void Screen2Presenter::activate()
{
 801d018:	b480      	push	{r7}
 801d01a:	b083      	sub	sp, #12
 801d01c:	af00      	add	r7, sp, #0
 801d01e:	6078      	str	r0, [r7, #4]

}
 801d020:	bf00      	nop
 801d022:	370c      	adds	r7, #12
 801d024:	46bd      	mov	sp, r7
 801d026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d02a:	4770      	bx	lr

0801d02c <_ZN16Screen2Presenter10deactivateEv>:

void Screen2Presenter::deactivate()
{
 801d02c:	b480      	push	{r7}
 801d02e:	b083      	sub	sp, #12
 801d030:	af00      	add	r7, sp, #0
 801d032:	6078      	str	r0, [r7, #4]

}
 801d034:	bf00      	nop
 801d036:	370c      	adds	r7, #12
 801d038:	46bd      	mov	sp, r7
 801d03a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d03e:	4770      	bx	lr

0801d040 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 801d040:	b580      	push	{r7, lr}
 801d042:	b082      	sub	sp, #8
 801d044:	af00      	add	r7, sp, #0
 801d046:	6078      	str	r0, [r7, #4]
 801d048:	4a05      	ldr	r2, [pc, #20]	; (801d060 <_ZN11Screen2ViewD1Ev+0x20>)
 801d04a:	687b      	ldr	r3, [r7, #4]
 801d04c:	601a      	str	r2, [r3, #0]
 801d04e:	687b      	ldr	r3, [r7, #4]
 801d050:	4618      	mov	r0, r3
 801d052:	f7fe ff41 	bl	801bed8 <_ZN15Screen2ViewBaseD1Ev>
 801d056:	687b      	ldr	r3, [r7, #4]
 801d058:	4618      	mov	r0, r3
 801d05a:	3708      	adds	r7, #8
 801d05c:	46bd      	mov	sp, r7
 801d05e:	bd80      	pop	{r7, pc}
 801d060:	0802577c 	.word	0x0802577c

0801d064 <_ZN11Screen2ViewD0Ev>:
 801d064:	b580      	push	{r7, lr}
 801d066:	b082      	sub	sp, #8
 801d068:	af00      	add	r7, sp, #0
 801d06a:	6078      	str	r0, [r7, #4]
 801d06c:	6878      	ldr	r0, [r7, #4]
 801d06e:	f7ff ffe7 	bl	801d040 <_ZN11Screen2ViewD1Ev>
 801d072:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801d076:	6878      	ldr	r0, [r7, #4]
 801d078:	f005 fa88 	bl	802258c <_ZdlPvj>
 801d07c:	687b      	ldr	r3, [r7, #4]
 801d07e:	4618      	mov	r0, r3
 801d080:	3708      	adds	r7, #8
 801d082:	46bd      	mov	sp, r7
 801d084:	bd80      	pop	{r7, pc}
	...

0801d088 <_ZN11Screen2ViewC1Ev>:
/*----------------------------------------------------------------------------*/

#endif


Screen2View::Screen2View()
 801d088:	b580      	push	{r7, lr}
 801d08a:	b082      	sub	sp, #8
 801d08c:	af00      	add	r7, sp, #0
 801d08e:	6078      	str	r0, [r7, #4]
 801d090:	687b      	ldr	r3, [r7, #4]
 801d092:	4618      	mov	r0, r3
 801d094:	f7fe ff8a 	bl	801bfac <_ZN15Screen2ViewBaseC1Ev>
 801d098:	4a03      	ldr	r2, [pc, #12]	; (801d0a8 <_ZN11Screen2ViewC1Ev+0x20>)
 801d09a:	687b      	ldr	r3, [r7, #4]
 801d09c:	601a      	str	r2, [r3, #0]
{

}
 801d09e:	687b      	ldr	r3, [r7, #4]
 801d0a0:	4618      	mov	r0, r3
 801d0a2:	3708      	adds	r7, #8
 801d0a4:	46bd      	mov	sp, r7
 801d0a6:	bd80      	pop	{r7, pc}
 801d0a8:	0802577c 	.word	0x0802577c

0801d0ac <_ZN11Screen2View11setupScreenEv>:

void Screen2View::setupScreen()
{
 801d0ac:	b580      	push	{r7, lr}
 801d0ae:	b082      	sub	sp, #8
 801d0b0:	af00      	add	r7, sp, #0
 801d0b2:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::setupScreen();
 801d0b4:	687b      	ldr	r3, [r7, #4]
 801d0b6:	4618      	mov	r0, r3
 801d0b8:	f7ff f934 	bl	801c324 <_ZN15Screen2ViewBase11setupScreenEv>
    touchgfx_printf("screen 2 loaded \n");
}
 801d0bc:	bf00      	nop
 801d0be:	3708      	adds	r7, #8
 801d0c0:	46bd      	mov	sp, r7
 801d0c2:	bd80      	pop	{r7, pc}

0801d0c4 <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen()
{
 801d0c4:	b580      	push	{r7, lr}
 801d0c6:	b082      	sub	sp, #8
 801d0c8:	af00      	add	r7, sp, #0
 801d0ca:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::tearDownScreen();
 801d0cc:	687b      	ldr	r3, [r7, #4]
 801d0ce:	4618      	mov	r0, r3
 801d0d0:	f7fe f96c 	bl	801b3ac <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 801d0d4:	bf00      	nop
 801d0d6:	3708      	adds	r7, #8
 801d0d8:	46bd      	mov	sp, r7
 801d0da:	bd80      	pop	{r7, pc}

0801d0dc <_ZN11Screen2View17uart_init_clickedEv>:

void Screen2View::uart_init_clicked(){
 801d0dc:	b580      	push	{r7, lr}
 801d0de:	b082      	sub	sp, #8
 801d0e0:	af00      	add	r7, sp, #0
 801d0e2:	6078      	str	r0, [r7, #4]
	touchgfx_printf("init uart\n");

#ifndef SIMULATOR
  /* UART configuration */
    UartHandle.Instance        = USART1;
 801d0e4:	4b10      	ldr	r3, [pc, #64]	; (801d128 <_ZN11Screen2View17uart_init_clickedEv+0x4c>)
 801d0e6:	4a11      	ldr	r2, [pc, #68]	; (801d12c <_ZN11Screen2View17uart_init_clickedEv+0x50>)
 801d0e8:	601a      	str	r2, [r3, #0]
    UartHandle.Init.BaudRate   = 9600;
 801d0ea:	4b0f      	ldr	r3, [pc, #60]	; (801d128 <_ZN11Screen2View17uart_init_clickedEv+0x4c>)
 801d0ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 801d0f0:	605a      	str	r2, [r3, #4]
    UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 801d0f2:	4b0d      	ldr	r3, [pc, #52]	; (801d128 <_ZN11Screen2View17uart_init_clickedEv+0x4c>)
 801d0f4:	2200      	movs	r2, #0
 801d0f6:	609a      	str	r2, [r3, #8]
    UartHandle.Init.StopBits   = UART_STOPBITS_1;
 801d0f8:	4b0b      	ldr	r3, [pc, #44]	; (801d128 <_ZN11Screen2View17uart_init_clickedEv+0x4c>)
 801d0fa:	2200      	movs	r2, #0
 801d0fc:	60da      	str	r2, [r3, #12]
    UartHandle.Init.Parity     = UART_PARITY_NONE;
 801d0fe:	4b0a      	ldr	r3, [pc, #40]	; (801d128 <_ZN11Screen2View17uart_init_clickedEv+0x4c>)
 801d100:	2200      	movs	r2, #0
 801d102:	611a      	str	r2, [r3, #16]
    UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 801d104:	4b08      	ldr	r3, [pc, #32]	; (801d128 <_ZN11Screen2View17uart_init_clickedEv+0x4c>)
 801d106:	2200      	movs	r2, #0
 801d108:	619a      	str	r2, [r3, #24]
    UartHandle.Init.Mode       = UART_MODE_TX;
 801d10a:	4b07      	ldr	r3, [pc, #28]	; (801d128 <_ZN11Screen2View17uart_init_clickedEv+0x4c>)
 801d10c:	2208      	movs	r2, #8
 801d10e:	615a      	str	r2, [r3, #20]

    /* Initialize UART peripheral */
    HAL_UART_Init(&UartHandle);
 801d110:	4805      	ldr	r0, [pc, #20]	; (801d128 <_ZN11Screen2View17uart_init_clickedEv+0x4c>)
 801d112:	f7ec ff17 	bl	8009f44 <HAL_UART_Init>

    /* Configures COM1 port */
    BSP_COM_Init(COM1, &UartHandle);
 801d116:	4904      	ldr	r1, [pc, #16]	; (801d128 <_ZN11Screen2View17uart_init_clickedEv+0x4c>)
 801d118:	2000      	movs	r0, #0
 801d11a:	f7f6 fe75 	bl	8013e08 <BSP_COM_Init>
#endif

}
 801d11e:	bf00      	nop
 801d120:	3708      	adds	r7, #8
 801d122:	46bd      	mov	sp, r7
 801d124:	bd80      	pop	{r7, pc}
 801d126:	bf00      	nop
 801d128:	20009cac 	.word	0x20009cac
 801d12c:	40011000 	.word	0x40011000

0801d130 <_ZN11Screen2View17uart_send_clickedEv>:


void Screen2View::uart_send_clicked(){
 801d130:	b580      	push	{r7, lr}
 801d132:	b082      	sub	sp, #8
 801d134:	af00      	add	r7, sp, #0
 801d136:	6078      	str	r0, [r7, #4]

	touchgfx_printf("hello and send uart text\n");
#ifndef SIMULATOR

	BSP_LED_On(LED_GREEN);
 801d138:	2000      	movs	r0, #0
 801d13a:	f7f6 fe4d 	bl	8013dd8 <BSP_LED_On>
	/* Place your implementation of fputc here */
	  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	 // HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
	 HAL_UART_Transmit(&UartHandle, (uint8_t*)aTxEndMessage,  TXENDMESSAGESIZE, 0xFF);
 801d13e:	23ff      	movs	r3, #255	; 0xff
 801d140:	221e      	movs	r2, #30
 801d142:	4904      	ldr	r1, [pc, #16]	; (801d154 <_ZN11Screen2View17uart_send_clickedEv+0x24>)
 801d144:	4804      	ldr	r0, [pc, #16]	; (801d158 <_ZN11Screen2View17uart_send_clickedEv+0x28>)
 801d146:	f7ec ff4b 	bl	8009fe0 <HAL_UART_Transmit>

#endif



}
 801d14a:	bf00      	nop
 801d14c:	3708      	adds	r7, #8
 801d14e:	46bd      	mov	sp, r7
 801d150:	bd80      	pop	{r7, pc}
 801d152:	bf00      	nop
 801d154:	20000084 	.word	0x20000084
 801d158:	20009cac 	.word	0x20009cac

0801d15c <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801d15c:	8880      	ldrh	r0, [r0, #4]
 801d15e:	4770      	bx	lr

0801d160 <_ZN8touchgfx17AbstractPartition5clearEv>:
 801d160:	2300      	movs	r3, #0
 801d162:	8083      	strh	r3, [r0, #4]
 801d164:	4770      	bx	lr
	...

0801d168 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801d168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d16a:	6803      	ldr	r3, [r0, #0]
 801d16c:	460e      	mov	r6, r1
 801d16e:	2100      	movs	r1, #0
 801d170:	4604      	mov	r4, r0
 801d172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d174:	4798      	blx	r3
 801d176:	4605      	mov	r5, r0
 801d178:	6823      	ldr	r3, [r4, #0]
 801d17a:	4620      	mov	r0, r4
 801d17c:	1b75      	subs	r5, r6, r5
 801d17e:	6a1b      	ldr	r3, [r3, #32]
 801d180:	b2ad      	uxth	r5, r5
 801d182:	4798      	blx	r3
 801d184:	88a3      	ldrh	r3, [r4, #4]
 801d186:	fbb5 f0f0 	udiv	r0, r5, r0
 801d18a:	4298      	cmp	r0, r3
 801d18c:	b285      	uxth	r5, r0
 801d18e:	db05      	blt.n	801d19c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x34>
 801d190:	4b0e      	ldr	r3, [pc, #56]	; (801d1cc <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801d192:	211e      	movs	r1, #30
 801d194:	4a0e      	ldr	r2, [pc, #56]	; (801d1d0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801d196:	480f      	ldr	r0, [pc, #60]	; (801d1d4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 801d198:	f005 fa26 	bl	80225e8 <__assert_func>
 801d19c:	6823      	ldr	r3, [r4, #0]
 801d19e:	2100      	movs	r1, #0
 801d1a0:	4620      	mov	r0, r4
 801d1a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d1a4:	4798      	blx	r3
 801d1a6:	4607      	mov	r7, r0
 801d1a8:	6823      	ldr	r3, [r4, #0]
 801d1aa:	4620      	mov	r0, r4
 801d1ac:	1bf6      	subs	r6, r6, r7
 801d1ae:	6a1b      	ldr	r3, [r3, #32]
 801d1b0:	b2b6      	uxth	r6, r6
 801d1b2:	4798      	blx	r3
 801d1b4:	fbb6 f3f0 	udiv	r3, r6, r0
 801d1b8:	fb03 6610 	mls	r6, r3, r0, r6
 801d1bc:	b11e      	cbz	r6, 801d1c6 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5e>
 801d1be:	4b06      	ldr	r3, [pc, #24]	; (801d1d8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x70>)
 801d1c0:	211f      	movs	r1, #31
 801d1c2:	4a03      	ldr	r2, [pc, #12]	; (801d1d0 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801d1c4:	e7e7      	b.n	801d196 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2e>
 801d1c6:	4628      	mov	r0, r5
 801d1c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d1ca:	bf00      	nop
 801d1cc:	080257b0 	.word	0x080257b0
 801d1d0:	0802591e 	.word	0x0802591e
 801d1d4:	080257c5 	.word	0x080257c5
 801d1d8:	080257f3 	.word	0x080257f3

0801d1dc <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801d1dc:	b538      	push	{r3, r4, r5, lr}
 801d1de:	6803      	ldr	r3, [r0, #0]
 801d1e0:	460d      	mov	r5, r1
 801d1e2:	4604      	mov	r4, r0
 801d1e4:	6a1b      	ldr	r3, [r3, #32]
 801d1e6:	4798      	blx	r3
 801d1e8:	4285      	cmp	r5, r0
 801d1ea:	d905      	bls.n	801d1f8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 801d1ec:	4b0c      	ldr	r3, [pc, #48]	; (801d220 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 801d1ee:	212f      	movs	r1, #47	; 0x2f
 801d1f0:	4a0c      	ldr	r2, [pc, #48]	; (801d224 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801d1f2:	480d      	ldr	r0, [pc, #52]	; (801d228 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 801d1f4:	f005 f9f8 	bl	80225e8 <__assert_func>
 801d1f8:	6823      	ldr	r3, [r4, #0]
 801d1fa:	4620      	mov	r0, r4
 801d1fc:	88a5      	ldrh	r5, [r4, #4]
 801d1fe:	69db      	ldr	r3, [r3, #28]
 801d200:	4798      	blx	r3
 801d202:	4285      	cmp	r5, r0
 801d204:	db03      	blt.n	801d20e <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801d206:	4b09      	ldr	r3, [pc, #36]	; (801d22c <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 801d208:	2130      	movs	r1, #48	; 0x30
 801d20a:	4a06      	ldr	r2, [pc, #24]	; (801d224 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801d20c:	e7f1      	b.n	801d1f2 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 801d20e:	6823      	ldr	r3, [r4, #0]
 801d210:	4620      	mov	r0, r4
 801d212:	88a1      	ldrh	r1, [r4, #4]
 801d214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d216:	4798      	blx	r3
 801d218:	88a3      	ldrh	r3, [r4, #4]
 801d21a:	3301      	adds	r3, #1
 801d21c:	80a3      	strh	r3, [r4, #4]
 801d21e:	bd38      	pop	{r3, r4, r5, pc}
 801d220:	0802586d 	.word	0x0802586d
 801d224:	08025961 	.word	0x08025961
 801d228:	080257c5 	.word	0x080257c5
 801d22c:	08025884 	.word	0x08025884

0801d230 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 801d230:	b570      	push	{r4, r5, r6, lr}
 801d232:	6803      	ldr	r3, [r0, #0]
 801d234:	4616      	mov	r6, r2
 801d236:	4604      	mov	r4, r0
 801d238:	460d      	mov	r5, r1
 801d23a:	6a1b      	ldr	r3, [r3, #32]
 801d23c:	4798      	blx	r3
 801d23e:	4286      	cmp	r6, r0
 801d240:	d905      	bls.n	801d24e <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 801d242:	4b06      	ldr	r3, [pc, #24]	; (801d25c <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 801d244:	2139      	movs	r1, #57	; 0x39
 801d246:	4a06      	ldr	r2, [pc, #24]	; (801d260 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 801d248:	4806      	ldr	r0, [pc, #24]	; (801d264 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801d24a:	f005 f9cd 	bl	80225e8 <__assert_func>
 801d24e:	6823      	ldr	r3, [r4, #0]
 801d250:	4629      	mov	r1, r5
 801d252:	4620      	mov	r0, r4
 801d254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d256:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d25a:	4718      	bx	r3
 801d25c:	0802586d 	.word	0x0802586d
 801d260:	080258d4 	.word	0x080258d4
 801d264:	080257c5 	.word	0x080257c5

0801d268 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801d268:	4770      	bx	lr
	...

0801d26c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801d26c:	4a02      	ldr	r2, [pc, #8]	; (801d278 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801d26e:	6002      	str	r2, [r0, #0]
 801d270:	2200      	movs	r2, #0
 801d272:	8082      	strh	r2, [r0, #4]
 801d274:	4770      	bx	lr
 801d276:	bf00      	nop
 801d278:	080258a8 	.word	0x080258a8

0801d27c <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 801d27c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801d280:	4770      	bx	lr

0801d282 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801d282:	2301      	movs	r3, #1
 801d284:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 801d288:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
 801d28c:	4770      	bx	lr

0801d28e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801d28e:	2301      	movs	r3, #1
 801d290:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 801d294:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
 801d298:	4770      	bx	lr

0801d29a <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801d29a:	6843      	ldr	r3, [r0, #4]
 801d29c:	2201      	movs	r2, #1
 801d29e:	725a      	strb	r2, [r3, #9]
 801d2a0:	6840      	ldr	r0, [r0, #4]
 801d2a2:	6803      	ldr	r3, [r0, #0]
 801d2a4:	691b      	ldr	r3, [r3, #16]
 801d2a6:	4718      	bx	r3

0801d2a8 <_ZN8touchgfx3HAL8flushDMAEv>:
 801d2a8:	6840      	ldr	r0, [r0, #4]
 801d2aa:	6803      	ldr	r3, [r0, #0]
 801d2ac:	689b      	ldr	r3, [r3, #8]
 801d2ae:	4718      	bx	r3

0801d2b0 <_ZN8touchgfx3HAL17registerTextCacheEPtt>:
 801d2b0:	4770      	bx	lr

0801d2b2 <_ZN8touchgfx3HAL15cacheTextStringEPKt>:
 801d2b2:	4608      	mov	r0, r1
 801d2b4:	4770      	bx	lr

0801d2b6 <_ZN8touchgfx3HAL22blitSetTransparencyKeyEt>:
 801d2b6:	4770      	bx	lr

0801d2b8 <_ZN8touchgfx3HAL10beginFrameEv>:
 801d2b8:	4b04      	ldr	r3, [pc, #16]	; (801d2cc <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801d2ba:	781b      	ldrb	r3, [r3, #0]
 801d2bc:	b123      	cbz	r3, 801d2c8 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801d2be:	f890 005a 	ldrb.w	r0, [r0, #90]	; 0x5a
 801d2c2:	f080 0001 	eor.w	r0, r0, #1
 801d2c6:	4770      	bx	lr
 801d2c8:	2001      	movs	r0, #1
 801d2ca:	4770      	bx	lr
 801d2cc:	20009d36 	.word	0x20009d36

0801d2d0 <_ZN8touchgfx3HAL8endFrameEv>:
 801d2d0:	b510      	push	{r4, lr}
 801d2d2:	4604      	mov	r4, r0
 801d2d4:	6840      	ldr	r0, [r0, #4]
 801d2d6:	6803      	ldr	r3, [r0, #0]
 801d2d8:	689b      	ldr	r3, [r3, #8]
 801d2da:	4798      	blx	r3
 801d2dc:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 801d2e0:	b113      	cbz	r3, 801d2e8 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801d2e2:	2301      	movs	r3, #1
 801d2e4:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
 801d2e8:	bd10      	pop	{r4, pc}

0801d2ea <_ZN8touchgfx3HAL9taskEntryEv>:
 801d2ea:	b508      	push	{r3, lr}
 801d2ec:	6803      	ldr	r3, [r0, #0]
 801d2ee:	4604      	mov	r4, r0
 801d2f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d2f2:	4798      	blx	r3
 801d2f4:	6823      	ldr	r3, [r4, #0]
 801d2f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d2f8:	4620      	mov	r0, r4
 801d2fa:	4798      	blx	r3
 801d2fc:	f7f3 fee6 	bl	80110cc <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801d300:	6823      	ldr	r3, [r4, #0]
 801d302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d304:	e7f8      	b.n	801d2f8 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0801d308 <_ZN8touchgfx3HAL4tickEv>:
 801d308:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801d30a:	6803      	ldr	r3, [r0, #0]
 801d30c:	4604      	mov	r4, r0
 801d30e:	4d5d      	ldr	r5, [pc, #372]	; (801d484 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801d310:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d314:	4798      	blx	r3
 801d316:	2800      	cmp	r0, #0
 801d318:	f000 8092 	beq.w	801d440 <_ZN8touchgfx3HAL4tickEv+0x138>
 801d31c:	2001      	movs	r0, #1
 801d31e:	2600      	movs	r6, #0
 801d320:	f7f8 fb00 	bl	8015924 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801d324:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 801d328:	f884 6047 	strb.w	r6, [r4, #71]	; 0x47
 801d32c:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
 801d330:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
 801d334:	f884 6056 	strb.w	r6, [r4, #86]	; 0x56
 801d338:	b133      	cbz	r3, 801d348 <_ZN8touchgfx3HAL4tickEv+0x40>
 801d33a:	6823      	ldr	r3, [r4, #0]
 801d33c:	4620      	mov	r0, r4
 801d33e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801d342:	4798      	blx	r3
 801d344:	f884 6065 	strb.w	r6, [r4, #101]	; 0x65
 801d348:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801d34c:	2601      	movs	r6, #1
 801d34e:	6862      	ldr	r2, [r4, #4]
 801d350:	f083 0301 	eor.w	r3, r3, #1
 801d354:	702e      	strb	r6, [r5, #0]
 801d356:	7253      	strb	r3, [r2, #9]
 801d358:	f001 fb00 	bl	801e95c <_ZN8touchgfx11Application11getInstanceEv>
 801d35c:	6803      	ldr	r3, [r0, #0]
 801d35e:	4631      	mov	r1, r6
 801d360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d362:	4798      	blx	r3
 801d364:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 801d368:	b90b      	cbnz	r3, 801d36e <_ZN8touchgfx3HAL4tickEv+0x66>
 801d36a:	f884 6057 	strb.w	r6, [r4, #87]	; 0x57
 801d36e:	f001 faf5 	bl	801e95c <_ZN8touchgfx11Application11getInstanceEv>
 801d372:	6803      	ldr	r3, [r0, #0]
 801d374:	695b      	ldr	r3, [r3, #20]
 801d376:	4798      	blx	r3
 801d378:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801d37a:	6803      	ldr	r3, [r0, #0]
 801d37c:	691b      	ldr	r3, [r3, #16]
 801d37e:	4798      	blx	r3
 801d380:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 801d384:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 801d388:	3b01      	subs	r3, #1
 801d38a:	b2db      	uxtb	r3, r3
 801d38c:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
 801d390:	b10a      	cbz	r2, 801d396 <_ZN8touchgfx3HAL4tickEv+0x8e>
 801d392:	2b00      	cmp	r3, #0
 801d394:	d1eb      	bne.n	801d36e <_ZN8touchgfx3HAL4tickEv+0x66>
 801d396:	4a3c      	ldr	r2, [pc, #240]	; (801d488 <_ZN8touchgfx3HAL4tickEv+0x180>)
 801d398:	f994 1054 	ldrsb.w	r1, [r4, #84]	; 0x54
 801d39c:	7813      	ldrb	r3, [r2, #0]
 801d39e:	3301      	adds	r3, #1
 801d3a0:	b25b      	sxtb	r3, r3
 801d3a2:	4299      	cmp	r1, r3
 801d3a4:	7013      	strb	r3, [r2, #0]
 801d3a6:	dc10      	bgt.n	801d3ca <_ZN8touchgfx3HAL4tickEv+0xc2>
 801d3a8:	2300      	movs	r3, #0
 801d3aa:	68e0      	ldr	r0, [r4, #12]
 801d3ac:	a902      	add	r1, sp, #8
 801d3ae:	7013      	strb	r3, [r2, #0]
 801d3b0:	aa03      	add	r2, sp, #12
 801d3b2:	6803      	ldr	r3, [r0, #0]
 801d3b4:	68db      	ldr	r3, [r3, #12]
 801d3b6:	4798      	blx	r3
 801d3b8:	6823      	ldr	r3, [r4, #0]
 801d3ba:	2800      	cmp	r0, #0
 801d3bc:	d04c      	beq.n	801d458 <_ZN8touchgfx3HAL4tickEv+0x150>
 801d3be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801d3c2:	4620      	mov	r0, r4
 801d3c4:	9a03      	ldr	r2, [sp, #12]
 801d3c6:	9902      	ldr	r1, [sp, #8]
 801d3c8:	4798      	blx	r3
 801d3ca:	2300      	movs	r3, #0
 801d3cc:	6960      	ldr	r0, [r4, #20]
 801d3ce:	f88d 3007 	strb.w	r3, [sp, #7]
 801d3d2:	b130      	cbz	r0, 801d3e2 <_ZN8touchgfx3HAL4tickEv+0xda>
 801d3d4:	6803      	ldr	r3, [r0, #0]
 801d3d6:	f10d 0107 	add.w	r1, sp, #7
 801d3da:	68db      	ldr	r3, [r3, #12]
 801d3dc:	4798      	blx	r3
 801d3de:	2800      	cmp	r0, #0
 801d3e0:	d149      	bne.n	801d476 <_ZN8touchgfx3HAL4tickEv+0x16e>
 801d3e2:	f104 0018 	add.w	r0, r4, #24
 801d3e6:	f005 f827 	bl	8022438 <_ZN8touchgfx8Gestures4tickEv>
 801d3ea:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 801d3ee:	b30b      	cbz	r3, 801d434 <_ZN8touchgfx3HAL4tickEv+0x12c>
 801d3f0:	6920      	ldr	r0, [r4, #16]
 801d3f2:	6803      	ldr	r3, [r0, #0]
 801d3f4:	691b      	ldr	r3, [r3, #16]
 801d3f6:	4798      	blx	r3
 801d3f8:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801d3fa:	4606      	mov	r6, r0
 801d3fc:	b903      	cbnz	r3, 801d400 <_ZN8touchgfx3HAL4tickEv+0xf8>
 801d3fe:	6620      	str	r0, [r4, #96]	; 0x60
 801d400:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801d402:	4a22      	ldr	r2, [pc, #136]	; (801d48c <_ZN8touchgfx3HAL4tickEv+0x184>)
 801d404:	1af3      	subs	r3, r6, r3
 801d406:	4293      	cmp	r3, r2
 801d408:	d914      	bls.n	801d434 <_ZN8touchgfx3HAL4tickEv+0x12c>
 801d40a:	6920      	ldr	r0, [r4, #16]
 801d40c:	6803      	ldr	r3, [r0, #0]
 801d40e:	699b      	ldr	r3, [r3, #24]
 801d410:	4798      	blx	r3
 801d412:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801d414:	2264      	movs	r2, #100	; 0x64
 801d416:	1af3      	subs	r3, r6, r3
 801d418:	fbb3 f3f2 	udiv	r3, r3, r2
 801d41c:	fbb0 f0f3 	udiv	r0, r0, r3
 801d420:	2800      	cmp	r0, #0
 801d422:	dc1e      	bgt.n	801d462 <_ZN8touchgfx3HAL4tickEv+0x15a>
 801d424:	f884 2055 	strb.w	r2, [r4, #85]	; 0x55
 801d428:	6920      	ldr	r0, [r4, #16]
 801d42a:	2100      	movs	r1, #0
 801d42c:	6803      	ldr	r3, [r0, #0]
 801d42e:	69db      	ldr	r3, [r3, #28]
 801d430:	4798      	blx	r3
 801d432:	6626      	str	r6, [r4, #96]	; 0x60
 801d434:	f001 fa92 	bl	801e95c <_ZN8touchgfx11Application11getInstanceEv>
 801d438:	6803      	ldr	r3, [r0, #0]
 801d43a:	2100      	movs	r1, #0
 801d43c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d43e:	4798      	blx	r3
 801d440:	6823      	ldr	r3, [r4, #0]
 801d442:	4620      	mov	r0, r4
 801d444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d448:	4798      	blx	r3
 801d44a:	2001      	movs	r0, #1
 801d44c:	f7f8 fa75 	bl	801593a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801d450:	2300      	movs	r3, #0
 801d452:	702b      	strb	r3, [r5, #0]
 801d454:	b004      	add	sp, #16
 801d456:	bd70      	pop	{r4, r5, r6, pc}
 801d458:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801d45c:	4620      	mov	r0, r4
 801d45e:	4798      	blx	r3
 801d460:	e7b3      	b.n	801d3ca <_ZN8touchgfx3HAL4tickEv+0xc2>
 801d462:	2863      	cmp	r0, #99	; 0x63
 801d464:	bfcb      	itete	gt
 801d466:	2300      	movgt	r3, #0
 801d468:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801d46c:	f884 3055 	strbgt.w	r3, [r4, #85]	; 0x55
 801d470:	f884 0055 	strble.w	r0, [r4, #85]	; 0x55
 801d474:	e7d8      	b.n	801d428 <_ZN8touchgfx3HAL4tickEv+0x120>
 801d476:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801d478:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801d47c:	6803      	ldr	r3, [r0, #0]
 801d47e:	68db      	ldr	r3, [r3, #12]
 801d480:	4798      	blx	r3
 801d482:	e7ae      	b.n	801d3e2 <_ZN8touchgfx3HAL4tickEv+0xda>
 801d484:	20009d3c 	.word	0x20009d3c
 801d488:	20009d3d 	.word	0x20009d3d
 801d48c:	05f5e100 	.word	0x05f5e100

0801d490 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801d490:	f7f3 bdb4 	b.w	8010ffc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801d494 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801d494:	6481      	str	r1, [r0, #72]	; 0x48
 801d496:	3018      	adds	r0, #24
 801d498:	f004 bfcc 	b.w	8022434 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801d49c <_ZN8touchgfx3HAL5touchEll>:
 801d49c:	b530      	push	{r4, r5, lr}
 801d49e:	b085      	sub	sp, #20
 801d4a0:	4604      	mov	r4, r0
 801d4a2:	a802      	add	r0, sp, #8
 801d4a4:	9102      	str	r1, [sp, #8]
 801d4a6:	9203      	str	r2, [sp, #12]
 801d4a8:	f001 f888 	bl	801e5bc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801d4ac:	a903      	add	r1, sp, #12
 801d4ae:	a802      	add	r0, sp, #8
 801d4b0:	f001 f8d2 	bl	801e658 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801d4b4:	f894 105b 	ldrb.w	r1, [r4, #91]	; 0x5b
 801d4b8:	9d02      	ldr	r5, [sp, #8]
 801d4ba:	f104 0018 	add.w	r0, r4, #24
 801d4be:	9b03      	ldr	r3, [sp, #12]
 801d4c0:	b179      	cbz	r1, 801d4e2 <_ZN8touchgfx3HAL5touchEll+0x46>
 801d4c2:	b29b      	uxth	r3, r3
 801d4c4:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 801d4c8:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
 801d4cc:	9300      	str	r3, [sp, #0]
 801d4ce:	b2ab      	uxth	r3, r5
 801d4d0:	f004 ffc0 	bl	8022454 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801d4d4:	b118      	cbz	r0, 801d4de <_ZN8touchgfx3HAL5touchEll+0x42>
 801d4d6:	9b02      	ldr	r3, [sp, #8]
 801d4d8:	64e3      	str	r3, [r4, #76]	; 0x4c
 801d4da:	9b03      	ldr	r3, [sp, #12]
 801d4dc:	6523      	str	r3, [r4, #80]	; 0x50
 801d4de:	b005      	add	sp, #20
 801d4e0:	bd30      	pop	{r4, r5, pc}
 801d4e2:	b29b      	uxth	r3, r3
 801d4e4:	b2aa      	uxth	r2, r5
 801d4e6:	f004 fff9 	bl	80224dc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801d4ea:	2301      	movs	r3, #1
 801d4ec:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 801d4f0:	e7f1      	b.n	801d4d6 <_ZN8touchgfx3HAL5touchEll+0x3a>

0801d4f2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801d4f2:	b530      	push	{r4, r5, lr}
 801d4f4:	2b00      	cmp	r3, #0
 801d4f6:	d04e      	beq.n	801d596 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 801d4f8:	ea81 0002 	eor.w	r0, r1, r2
 801d4fc:	07c0      	lsls	r0, r0, #31
 801d4fe:	d508      	bpl.n	801d512 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801d500:	3a01      	subs	r2, #1
 801d502:	440b      	add	r3, r1
 801d504:	4299      	cmp	r1, r3
 801d506:	d046      	beq.n	801d596 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 801d508:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801d50c:	f801 0b01 	strb.w	r0, [r1], #1
 801d510:	e7f8      	b.n	801d504 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801d512:	07d5      	lsls	r5, r2, #31
 801d514:	bf42      	ittt	mi
 801d516:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801d51a:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801d51e:	f801 0b01 	strbmi.w	r0, [r1], #1
 801d522:	2b01      	cmp	r3, #1
 801d524:	d915      	bls.n	801d552 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801d526:	ea81 0002 	eor.w	r0, r1, r2
 801d52a:	0784      	lsls	r4, r0, #30
 801d52c:	d01f      	beq.n	801d56e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x7c>
 801d52e:	1e95      	subs	r5, r2, #2
 801d530:	460c      	mov	r4, r1
 801d532:	f835 0f02 	ldrh.w	r0, [r5, #2]!
 801d536:	f824 0b02 	strh.w	r0, [r4], #2
 801d53a:	1b18      	subs	r0, r3, r4
 801d53c:	4408      	add	r0, r1
 801d53e:	2801      	cmp	r0, #1
 801d540:	d8f7      	bhi.n	801d532 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x40>
 801d542:	1e98      	subs	r0, r3, #2
 801d544:	f003 0301 	and.w	r3, r3, #1
 801d548:	f020 0001 	bic.w	r0, r0, #1
 801d54c:	3002      	adds	r0, #2
 801d54e:	4401      	add	r1, r0
 801d550:	4402      	add	r2, r0
 801d552:	3a01      	subs	r2, #1
 801d554:	440b      	add	r3, r1
 801d556:	4299      	cmp	r1, r3
 801d558:	d01d      	beq.n	801d596 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 801d55a:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801d55e:	f801 0b01 	strb.w	r0, [r1], #1
 801d562:	e7f8      	b.n	801d556 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x64>
 801d564:	f855 4f04 	ldr.w	r4, [r5, #4]!
 801d568:	f840 4b04 	str.w	r4, [r0], #4
 801d56c:	e008      	b.n	801d580 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801d56e:	0790      	lsls	r0, r2, #30
 801d570:	d004      	beq.n	801d57c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8a>
 801d572:	f832 0b02 	ldrh.w	r0, [r2], #2
 801d576:	3b02      	subs	r3, #2
 801d578:	f821 0b02 	strh.w	r0, [r1], #2
 801d57c:	1f15      	subs	r5, r2, #4
 801d57e:	4608      	mov	r0, r1
 801d580:	1a1c      	subs	r4, r3, r0
 801d582:	440c      	add	r4, r1
 801d584:	2c03      	cmp	r4, #3
 801d586:	d8ed      	bhi.n	801d564 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x72>
 801d588:	f023 0003 	bic.w	r0, r3, #3
 801d58c:	f003 0303 	and.w	r3, r3, #3
 801d590:	4402      	add	r2, r0
 801d592:	4401      	add	r1, r0
 801d594:	e7dd      	b.n	801d552 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801d596:	2001      	movs	r0, #1
 801d598:	bd30      	pop	{r4, r5, pc}

0801d59a <_ZN8touchgfx3HAL7noTouchEv>:
 801d59a:	b510      	push	{r4, lr}
 801d59c:	f890 305b 	ldrb.w	r3, [r0, #91]	; 0x5b
 801d5a0:	4604      	mov	r4, r0
 801d5a2:	b153      	cbz	r3, 801d5ba <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801d5a4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 801d5a8:	2101      	movs	r1, #1
 801d5aa:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 801d5ae:	3018      	adds	r0, #24
 801d5b0:	f004 ff94 	bl	80224dc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801d5b4:	2300      	movs	r3, #0
 801d5b6:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 801d5ba:	bd10      	pop	{r4, pc}

0801d5bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801d5bc:	4b07      	ldr	r3, [pc, #28]	; (801d5dc <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801d5be:	b510      	push	{r4, lr}
 801d5c0:	781b      	ldrb	r3, [r3, #0]
 801d5c2:	4604      	mov	r4, r0
 801d5c4:	b12b      	cbz	r3, 801d5d2 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x16>
 801d5c6:	6803      	ldr	r3, [r0, #0]
 801d5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d5ca:	4798      	blx	r3
 801d5cc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801d5ce:	4283      	cmp	r3, r0
 801d5d0:	d001      	beq.n	801d5d6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801d5d2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801d5d4:	bd10      	pop	{r4, pc}
 801d5d6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d5d8:	bd10      	pop	{r4, pc}
 801d5da:	bf00      	nop
 801d5dc:	20009d36 	.word	0x20009d36

0801d5e0 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801d5e0:	4b0a      	ldr	r3, [pc, #40]	; (801d60c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x2c>)
 801d5e2:	b510      	push	{r4, lr}
 801d5e4:	781b      	ldrb	r3, [r3, #0]
 801d5e6:	4604      	mov	r4, r0
 801d5e8:	b12b      	cbz	r3, 801d5f6 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x16>
 801d5ea:	f7f3 fce9 	bl	8010fc0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801d5ee:	4620      	mov	r0, r4
 801d5f0:	f7ff ffe4 	bl	801d5bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801d5f4:	bd10      	pop	{r4, pc}
 801d5f6:	6840      	ldr	r0, [r0, #4]
 801d5f8:	f000 fb3e 	bl	801dc78 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801d5fc:	2800      	cmp	r0, #0
 801d5fe:	d0f4      	beq.n	801d5ea <_ZN8touchgfx3HAL15lockFrameBufferEv+0xa>
 801d600:	6862      	ldr	r2, [r4, #4]
 801d602:	7a53      	ldrb	r3, [r2, #9]
 801d604:	2b00      	cmp	r3, #0
 801d606:	d0fc      	beq.n	801d602 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801d608:	e7ef      	b.n	801d5ea <_ZN8touchgfx3HAL15lockFrameBufferEv+0xa>
 801d60a:	bf00      	nop
 801d60c:	20009d36 	.word	0x20009d36

0801d610 <_ZN8touchgfx3HAL10initializeEv>:
 801d610:	b510      	push	{r4, lr}
 801d612:	4604      	mov	r4, r0
 801d614:	f7f3 fca6 	bl	8010f64 <_ZN8touchgfx10OSWrappers10initializeEv>
 801d618:	6860      	ldr	r0, [r4, #4]
 801d61a:	6803      	ldr	r3, [r0, #0]
 801d61c:	68db      	ldr	r3, [r3, #12]
 801d61e:	4798      	blx	r3
 801d620:	68e0      	ldr	r0, [r4, #12]
 801d622:	6803      	ldr	r3, [r0, #0]
 801d624:	689b      	ldr	r3, [r3, #8]
 801d626:	4798      	blx	r3
 801d628:	6823      	ldr	r3, [r4, #0]
 801d62a:	4620      	mov	r0, r4
 801d62c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d62e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d632:	4718      	bx	r3

0801d634 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801d634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d636:	461d      	mov	r5, r3
 801d638:	4b0b      	ldr	r3, [pc, #44]	; (801d668 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801d63a:	4617      	mov	r7, r2
 801d63c:	460e      	mov	r6, r1
 801d63e:	681b      	ldr	r3, [r3, #0]
 801d640:	6898      	ldr	r0, [r3, #8]
 801d642:	6803      	ldr	r3, [r0, #0]
 801d644:	6a1b      	ldr	r3, [r3, #32]
 801d646:	4798      	blx	r3
 801d648:	4b08      	ldr	r3, [pc, #32]	; (801d66c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x38>)
 801d64a:	2810      	cmp	r0, #16
 801d64c:	bf15      	itete	ne
 801d64e:	881c      	ldrhne	r4, [r3, #0]
 801d650:	8818      	ldrheq	r0, [r3, #0]
 801d652:	fb07 6204 	mlane	r2, r7, r4, r6
 801d656:	fb07 6200 	mlaeq	r2, r7, r0, r6
 801d65a:	bf16      	itet	ne
 801d65c:	eb02 0242 	addne.w	r2, r2, r2, lsl #1
 801d660:	eb05 0042 	addeq.w	r0, r5, r2, lsl #1
 801d664:	18a8      	addne	r0, r5, r2
 801d666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d668:	20009d38 	.word	0x20009d38
 801d66c:	20009d32 	.word	0x20009d32

0801d670 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 801d670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d674:	b088      	sub	sp, #32
 801d676:	4698      	mov	r8, r3
 801d678:	4617      	mov	r7, r2
 801d67a:	2200      	movs	r2, #0
 801d67c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801d680:	4604      	mov	r4, r0
 801d682:	9206      	str	r2, [sp, #24]
 801d684:	2bff      	cmp	r3, #255	; 0xff
 801d686:	f88d 301c 	strb.w	r3, [sp, #28]
 801d68a:	4b1d      	ldr	r3, [pc, #116]	; (801d700 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x90>)
 801d68c:	bf0c      	ite	eq
 801d68e:	2201      	moveq	r2, #1
 801d690:	2204      	movne	r2, #4
 801d692:	881b      	ldrh	r3, [r3, #0]
 801d694:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801d698:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801d69c:	9201      	str	r2, [sp, #4]
 801d69e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801d6a2:	9102      	str	r1, [sp, #8]
 801d6a4:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d6a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d6ac:	f8ad 6010 	strh.w	r6, [sp, #16]
 801d6b0:	f8ad 5012 	strh.w	r5, [sp, #18]
 801d6b4:	f7ff ff82 	bl	801d5bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801d6b8:	4642      	mov	r2, r8
 801d6ba:	4603      	mov	r3, r0
 801d6bc:	4639      	mov	r1, r7
 801d6be:	4620      	mov	r0, r4
 801d6c0:	f7ff ffb8 	bl	801d634 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801d6c4:	9003      	str	r0, [sp, #12]
 801d6c6:	b106      	cbz	r6, 801d6ca <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x5a>
 801d6c8:	b935      	cbnz	r5, 801d6d8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x68>
 801d6ca:	4b0e      	ldr	r3, [pc, #56]	; (801d704 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x94>)
 801d6cc:	f240 1143 	movw	r1, #323	; 0x143
 801d6d0:	4a0d      	ldr	r2, [pc, #52]	; (801d708 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x98>)
 801d6d2:	480e      	ldr	r0, [pc, #56]	; (801d70c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x9c>)
 801d6d4:	f004 ff88 	bl	80225e8 <__assert_func>
 801d6d8:	6823      	ldr	r3, [r4, #0]
 801d6da:	4620      	mov	r0, r4
 801d6dc:	9d01      	ldr	r5, [sp, #4]
 801d6de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d6e0:	4798      	blx	r3
 801d6e2:	4228      	tst	r0, r5
 801d6e4:	d104      	bne.n	801d6f0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x80>
 801d6e6:	4b0a      	ldr	r3, [pc, #40]	; (801d710 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0xa0>)
 801d6e8:	f44f 71a2 	mov.w	r1, #324	; 0x144
 801d6ec:	4a06      	ldr	r2, [pc, #24]	; (801d708 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x98>)
 801d6ee:	e7f0      	b.n	801d6d2 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x62>
 801d6f0:	6860      	ldr	r0, [r4, #4]
 801d6f2:	a901      	add	r1, sp, #4
 801d6f4:	6803      	ldr	r3, [r0, #0]
 801d6f6:	685b      	ldr	r3, [r3, #4]
 801d6f8:	4798      	blx	r3
 801d6fa:	b008      	add	sp, #32
 801d6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d700:	20009d32 	.word	0x20009d32
 801d704:	08025a0d 	.word	0x08025a0d
 801d708:	08025cbb 	.word	0x08025cbb
 801d70c:	08025a45 	.word	0x08025a45
 801d710:	08025a6b 	.word	0x08025a6b

0801d714 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 801d714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d718:	4698      	mov	r8, r3
 801d71a:	b088      	sub	sp, #32
 801d71c:	2300      	movs	r3, #0
 801d71e:	4617      	mov	r7, r2
 801d720:	4604      	mov	r4, r0
 801d722:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801d726:	9306      	str	r3, [sp, #24]
 801d728:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801d72c:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801d730:	9301      	str	r3, [sp, #4]
 801d732:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d736:	9102      	str	r1, [sp, #8]
 801d738:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d73c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801d740:	f8ad 6010 	strh.w	r6, [sp, #16]
 801d744:	f88d 301c 	strb.w	r3, [sp, #28]
 801d748:	f8ad 5012 	strh.w	r5, [sp, #18]
 801d74c:	f7ff ff36 	bl	801d5bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801d750:	4642      	mov	r2, r8
 801d752:	4603      	mov	r3, r0
 801d754:	4639      	mov	r1, r7
 801d756:	4620      	mov	r0, r4
 801d758:	f7ff ff6c 	bl	801d634 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801d75c:	4b11      	ldr	r3, [pc, #68]	; (801d7a4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x90>)
 801d75e:	9003      	str	r0, [sp, #12]
 801d760:	881b      	ldrh	r3, [r3, #0]
 801d762:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d766:	b106      	cbz	r6, 801d76a <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x56>
 801d768:	b935      	cbnz	r5, 801d778 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x64>
 801d76a:	4b0f      	ldr	r3, [pc, #60]	; (801d7a8 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x94>)
 801d76c:	f240 1153 	movw	r1, #339	; 0x153
 801d770:	4a0e      	ldr	r2, [pc, #56]	; (801d7ac <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x98>)
 801d772:	480f      	ldr	r0, [pc, #60]	; (801d7b0 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x9c>)
 801d774:	f004 ff38 	bl	80225e8 <__assert_func>
 801d778:	6823      	ldr	r3, [r4, #0]
 801d77a:	4620      	mov	r0, r4
 801d77c:	9d01      	ldr	r5, [sp, #4]
 801d77e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d780:	4798      	blx	r3
 801d782:	4228      	tst	r0, r5
 801d784:	d104      	bne.n	801d790 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x7c>
 801d786:	4b0b      	ldr	r3, [pc, #44]	; (801d7b4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa0>)
 801d788:	f44f 71aa 	mov.w	r1, #340	; 0x154
 801d78c:	4a07      	ldr	r2, [pc, #28]	; (801d7ac <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x98>)
 801d78e:	e7f0      	b.n	801d772 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x5e>
 801d790:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d792:	a901      	add	r1, sp, #4
 801d794:	6860      	ldr	r0, [r4, #4]
 801d796:	9306      	str	r3, [sp, #24]
 801d798:	6803      	ldr	r3, [r0, #0]
 801d79a:	685b      	ldr	r3, [r3, #4]
 801d79c:	4798      	blx	r3
 801d79e:	b008      	add	sp, #32
 801d7a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d7a4:	20009d32 	.word	0x20009d32
 801d7a8:	08025a0d 	.word	0x08025a0d
 801d7ac:	08025b58 	.word	0x08025b58
 801d7b0:	08025a45 	.word	0x08025a45
 801d7b4:	08025a6b 	.word	0x08025a6b

0801d7b8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 801d7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d7bc:	b088      	sub	sp, #32
 801d7be:	4698      	mov	r8, r3
 801d7c0:	4617      	mov	r7, r2
 801d7c2:	2200      	movs	r2, #0
 801d7c4:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801d7c8:	4604      	mov	r4, r0
 801d7ca:	9206      	str	r2, [sp, #24]
 801d7cc:	2bff      	cmp	r3, #255	; 0xff
 801d7ce:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801d7d2:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801d7d6:	bf0c      	ite	eq
 801d7d8:	2220      	moveq	r2, #32
 801d7da:	2240      	movne	r2, #64	; 0x40
 801d7dc:	9102      	str	r1, [sp, #8]
 801d7de:	9201      	str	r2, [sp, #4]
 801d7e0:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801d7e4:	f88d 301c 	strb.w	r3, [sp, #28]
 801d7e8:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d7ec:	f8ad 6010 	strh.w	r6, [sp, #16]
 801d7f0:	f8ad 5012 	strh.w	r5, [sp, #18]
 801d7f4:	f7ff fee2 	bl	801d5bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801d7f8:	4642      	mov	r2, r8
 801d7fa:	4603      	mov	r3, r0
 801d7fc:	4639      	mov	r1, r7
 801d7fe:	4620      	mov	r0, r4
 801d800:	f7ff ff18 	bl	801d634 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801d804:	4b10      	ldr	r3, [pc, #64]	; (801d848 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x90>)
 801d806:	9003      	str	r0, [sp, #12]
 801d808:	881b      	ldrh	r3, [r3, #0]
 801d80a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d80e:	b106      	cbz	r6, 801d812 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x5a>
 801d810:	b935      	cbnz	r5, 801d820 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x68>
 801d812:	4b0e      	ldr	r3, [pc, #56]	; (801d84c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x94>)
 801d814:	f44f 71b3 	mov.w	r1, #358	; 0x166
 801d818:	4a0d      	ldr	r2, [pc, #52]	; (801d850 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x98>)
 801d81a:	480e      	ldr	r0, [pc, #56]	; (801d854 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x9c>)
 801d81c:	f004 fee4 	bl	80225e8 <__assert_func>
 801d820:	6823      	ldr	r3, [r4, #0]
 801d822:	4620      	mov	r0, r4
 801d824:	9d01      	ldr	r5, [sp, #4]
 801d826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d828:	4798      	blx	r3
 801d82a:	4228      	tst	r0, r5
 801d82c:	d104      	bne.n	801d838 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x80>
 801d82e:	4b0a      	ldr	r3, [pc, #40]	; (801d858 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0xa0>)
 801d830:	f240 1167 	movw	r1, #359	; 0x167
 801d834:	4a06      	ldr	r2, [pc, #24]	; (801d850 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x98>)
 801d836:	e7f0      	b.n	801d81a <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x62>
 801d838:	6860      	ldr	r0, [r4, #4]
 801d83a:	a901      	add	r1, sp, #4
 801d83c:	6803      	ldr	r3, [r0, #0]
 801d83e:	685b      	ldr	r3, [r3, #4]
 801d840:	4798      	blx	r3
 801d842:	b008      	add	sp, #32
 801d844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d848:	20009d32 	.word	0x20009d32
 801d84c:	08025a0d 	.word	0x08025a0d
 801d850:	08025bfc 	.word	0x08025bfc
 801d854:	08025a45 	.word	0x08025a45
 801d858:	08025a6b 	.word	0x08025a6b

0801d85c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 801d85c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d860:	b089      	sub	sp, #36	; 0x24
 801d862:	4699      	mov	r9, r3
 801d864:	4604      	mov	r4, r0
 801d866:	2500      	movs	r5, #0
 801d868:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 801d86c:	4690      	mov	r8, r2
 801d86e:	460f      	mov	r7, r1
 801d870:	9506      	str	r5, [sp, #24]
 801d872:	2eff      	cmp	r6, #255	; 0xff
 801d874:	9502      	str	r5, [sp, #8]
 801d876:	bf0c      	ite	eq
 801d878:	2302      	moveq	r3, #2
 801d87a:	2308      	movne	r3, #8
 801d87c:	9301      	str	r3, [sp, #4]
 801d87e:	f7ff fe9d 	bl	801d5bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801d882:	464a      	mov	r2, r9
 801d884:	4603      	mov	r3, r0
 801d886:	4641      	mov	r1, r8
 801d888:	4620      	mov	r0, r4
 801d88a:	f7ff fed3 	bl	801d634 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801d88e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d892:	f8ad 5014 	strh.w	r5, [sp, #20]
 801d896:	f8ad 3010 	strh.w	r3, [sp, #16]
 801d89a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801d89e:	9d01      	ldr	r5, [sp, #4]
 801d8a0:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d8a4:	4b0e      	ldr	r3, [pc, #56]	; (801d8e0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x84>)
 801d8a6:	9003      	str	r0, [sp, #12]
 801d8a8:	4620      	mov	r0, r4
 801d8aa:	881b      	ldrh	r3, [r3, #0]
 801d8ac:	9706      	str	r7, [sp, #24]
 801d8ae:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d8b2:	6823      	ldr	r3, [r4, #0]
 801d8b4:	f88d 601c 	strb.w	r6, [sp, #28]
 801d8b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d8ba:	4798      	blx	r3
 801d8bc:	4228      	tst	r0, r5
 801d8be:	d106      	bne.n	801d8ce <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x72>
 801d8c0:	4b08      	ldr	r3, [pc, #32]	; (801d8e4 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x88>)
 801d8c2:	f240 1179 	movw	r1, #377	; 0x179
 801d8c6:	4a08      	ldr	r2, [pc, #32]	; (801d8e8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x8c>)
 801d8c8:	4808      	ldr	r0, [pc, #32]	; (801d8ec <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x90>)
 801d8ca:	f004 fe8d 	bl	80225e8 <__assert_func>
 801d8ce:	6860      	ldr	r0, [r4, #4]
 801d8d0:	a901      	add	r1, sp, #4
 801d8d2:	6803      	ldr	r3, [r0, #0]
 801d8d4:	685b      	ldr	r3, [r3, #4]
 801d8d6:	4798      	blx	r3
 801d8d8:	b009      	add	sp, #36	; 0x24
 801d8da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d8de:	bf00      	nop
 801d8e0:	20009d32 	.word	0x20009d32
 801d8e4:	08025a6b 	.word	0x08025a6b
 801d8e8:	08025d32 	.word	0x08025d32
 801d8ec:	08025a45 	.word	0x08025a45

0801d8f0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801d8f0:	4b1d      	ldr	r3, [pc, #116]	; (801d968 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x78>)
 801d8f2:	b570      	push	{r4, r5, r6, lr}
 801d8f4:	b08a      	sub	sp, #40	; 0x28
 801d8f6:	781b      	ldrb	r3, [r3, #0]
 801d8f8:	4604      	mov	r4, r0
 801d8fa:	e88d 0006 	stmia.w	sp, {r1, r2}
 801d8fe:	b933      	cbnz	r3, 801d90e <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x1e>
 801d900:	4b1a      	ldr	r3, [pc, #104]	; (801d96c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x7c>)
 801d902:	f240 1185 	movw	r1, #389	; 0x185
 801d906:	4a1a      	ldr	r2, [pc, #104]	; (801d970 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801d908:	481a      	ldr	r0, [pc, #104]	; (801d974 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x84>)
 801d90a:	f004 fe6d 	bl	80225e8 <__assert_func>
 801d90e:	2300      	movs	r3, #0
 801d910:	f8bd 5000 	ldrh.w	r5, [sp]
 801d914:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 801d918:	9308      	str	r3, [sp, #32]
 801d91a:	2301      	movs	r3, #1
 801d91c:	9303      	str	r3, [sp, #12]
 801d91e:	6803      	ldr	r3, [r0, #0]
 801d920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d922:	4798      	blx	r3
 801d924:	4632      	mov	r2, r6
 801d926:	4603      	mov	r3, r0
 801d928:	4629      	mov	r1, r5
 801d92a:	4620      	mov	r0, r4
 801d92c:	f7ff fe82 	bl	801d634 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801d930:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d932:	9004      	str	r0, [sp, #16]
 801d934:	a903      	add	r1, sp, #12
 801d936:	9305      	str	r3, [sp, #20]
 801d938:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801d93c:	6860      	ldr	r0, [r4, #4]
 801d93e:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d942:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801d946:	f8ad 301a 	strh.w	r3, [sp, #26]
 801d94a:	4b0b      	ldr	r3, [pc, #44]	; (801d978 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x88>)
 801d94c:	881b      	ldrh	r3, [r3, #0]
 801d94e:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d952:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d956:	23ff      	movs	r3, #255	; 0xff
 801d958:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801d95c:	6803      	ldr	r3, [r0, #0]
 801d95e:	685b      	ldr	r3, [r3, #4]
 801d960:	4798      	blx	r3
 801d962:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801d964:	b00a      	add	sp, #40	; 0x28
 801d966:	bd70      	pop	{r4, r5, r6, pc}
 801d968:	20009d37 	.word	0x20009d37
 801d96c:	0802599f 	.word	0x0802599f
 801d970:	08025c75 	.word	0x08025c75
 801d974:	08025a45 	.word	0x08025a45
 801d978:	20009d32 	.word	0x20009d32

0801d97c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801d97c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d97e:	461d      	mov	r5, r3
 801d980:	b08b      	sub	sp, #44	; 0x2c
 801d982:	2300      	movs	r3, #0
 801d984:	4604      	mov	r4, r0
 801d986:	9308      	str	r3, [sp, #32]
 801d988:	2301      	movs	r3, #1
 801d98a:	9303      	str	r3, [sp, #12]
 801d98c:	6803      	ldr	r3, [r0, #0]
 801d98e:	e88d 0006 	stmia.w	sp, {r1, r2}
 801d992:	f8bd 6000 	ldrh.w	r6, [sp]
 801d996:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801d99a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d99c:	4798      	blx	r3
 801d99e:	463a      	mov	r2, r7
 801d9a0:	4603      	mov	r3, r0
 801d9a2:	4631      	mov	r1, r6
 801d9a4:	4620      	mov	r0, r4
 801d9a6:	f7ff fe45 	bl	801d634 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801d9aa:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801d9ae:	9004      	str	r0, [sp, #16]
 801d9b0:	a903      	add	r1, sp, #12
 801d9b2:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d9b6:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801d9ba:	6860      	ldr	r0, [r4, #4]
 801d9bc:	f8ad 301a 	strh.w	r3, [sp, #26]
 801d9c0:	4b08      	ldr	r3, [pc, #32]	; (801d9e4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x68>)
 801d9c2:	9505      	str	r5, [sp, #20]
 801d9c4:	881b      	ldrh	r3, [r3, #0]
 801d9c6:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d9ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d9cc:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d9d0:	23ff      	movs	r3, #255	; 0xff
 801d9d2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801d9d6:	6803      	ldr	r3, [r0, #0]
 801d9d8:	685b      	ldr	r3, [r3, #4]
 801d9da:	4798      	blx	r3
 801d9dc:	4628      	mov	r0, r5
 801d9de:	b00b      	add	sp, #44	; 0x2c
 801d9e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d9e2:	bf00      	nop
 801d9e4:	20009d32 	.word	0x20009d32

0801d9e8 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801d9e8:	b570      	push	{r4, r5, r6, lr}
 801d9ea:	f890 305a 	ldrb.w	r3, [r0, #90]	; 0x5a
 801d9ee:	4604      	mov	r4, r0
 801d9f0:	b19b      	cbz	r3, 801da1a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801d9f2:	2002      	movs	r0, #2
 801d9f4:	f7f7 ffac 	bl	8015950 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801d9f8:	2300      	movs	r3, #0
 801d9fa:	4620      	mov	r0, r4
 801d9fc:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
 801da00:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801da04:	6823      	ldr	r3, [r4, #0]
 801da06:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 801da0a:	f7ff fdd7 	bl	801d5bc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801da0e:	4601      	mov	r1, r0
 801da10:	4620      	mov	r0, r4
 801da12:	462b      	mov	r3, r5
 801da14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801da18:	4718      	bx	r3
 801da1a:	bd70      	pop	{r4, r5, r6, pc}

0801da1c <_ZN8touchgfx3HAL12setMCUActiveEb>:
 801da1c:	b570      	push	{r4, r5, r6, lr}
 801da1e:	4605      	mov	r5, r0
 801da20:	460c      	mov	r4, r1
 801da22:	2003      	movs	r0, #3
 801da24:	b149      	cbz	r1, 801da3a <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 801da26:	f7f7 ff7d 	bl	8015924 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801da2a:	6928      	ldr	r0, [r5, #16]
 801da2c:	b168      	cbz	r0, 801da4a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801da2e:	6803      	ldr	r3, [r0, #0]
 801da30:	2101      	movs	r1, #1
 801da32:	695b      	ldr	r3, [r3, #20]
 801da34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801da38:	4718      	bx	r3
 801da3a:	f7f7 ff7e 	bl	801593a <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801da3e:	6928      	ldr	r0, [r5, #16]
 801da40:	b118      	cbz	r0, 801da4a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801da42:	6803      	ldr	r3, [r0, #0]
 801da44:	4621      	mov	r1, r4
 801da46:	695b      	ldr	r3, [r3, #20]
 801da48:	e7f4      	b.n	801da34 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 801da4a:	bd70      	pop	{r4, r5, r6, pc}

0801da4c <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801da4c:	4770      	bx	lr

0801da4e <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801da4e:	68c2      	ldr	r2, [r0, #12]
 801da50:	6900      	ldr	r0, [r0, #16]
 801da52:	1a13      	subs	r3, r2, r0
 801da54:	4258      	negs	r0, r3
 801da56:	4158      	adcs	r0, r3
 801da58:	4770      	bx	lr

0801da5a <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801da5a:	68c2      	ldr	r2, [r0, #12]
 801da5c:	6903      	ldr	r3, [r0, #16]
 801da5e:	1a9b      	subs	r3, r3, r2
 801da60:	2b00      	cmp	r3, #0
 801da62:	bfdc      	itt	le
 801da64:	6882      	ldrle	r2, [r0, #8]
 801da66:	189b      	addle	r3, r3, r2
 801da68:	2b01      	cmp	r3, #1
 801da6a:	bfcc      	ite	gt
 801da6c:	2000      	movgt	r0, #0
 801da6e:	2001      	movle	r0, #1
 801da70:	4770      	bx	lr

0801da72 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801da72:	6902      	ldr	r2, [r0, #16]
 801da74:	6843      	ldr	r3, [r0, #4]
 801da76:	201c      	movs	r0, #28
 801da78:	fb00 3002 	mla	r0, r0, r2, r3
 801da7c:	4770      	bx	lr

0801da7e <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801da7e:	6803      	ldr	r3, [r0, #0]
 801da80:	691b      	ldr	r3, [r3, #16]
 801da82:	4718      	bx	r3

0801da84 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801da84:	4770      	bx	lr

0801da86 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801da86:	4770      	bx	lr

0801da88 <_ZN8touchgfx13DMA_Interface7executeEv>:
 801da88:	2301      	movs	r3, #1
 801da8a:	b570      	push	{r4, r5, r6, lr}
 801da8c:	7203      	strb	r3, [r0, #8]
 801da8e:	4604      	mov	r4, r0
 801da90:	6840      	ldr	r0, [r0, #4]
 801da92:	6803      	ldr	r3, [r0, #0]
 801da94:	699b      	ldr	r3, [r3, #24]
 801da96:	4798      	blx	r3
 801da98:	6803      	ldr	r3, [r0, #0]
 801da9a:	4605      	mov	r5, r0
 801da9c:	2b08      	cmp	r3, #8
 801da9e:	d01e      	beq.n	801dade <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 801daa0:	d80b      	bhi.n	801daba <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801daa2:	2b02      	cmp	r3, #2
 801daa4:	d027      	beq.n	801daf6 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801daa6:	2b04      	cmp	r3, #4
 801daa8:	d011      	beq.n	801dace <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801daaa:	2b01      	cmp	r3, #1
 801daac:	d028      	beq.n	801db00 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801daae:	4b17      	ldr	r3, [pc, #92]	; (801db0c <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 801dab0:	218d      	movs	r1, #141	; 0x8d
 801dab2:	4a17      	ldr	r2, [pc, #92]	; (801db10 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 801dab4:	4817      	ldr	r0, [pc, #92]	; (801db14 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 801dab6:	f004 fd97 	bl	80225e8 <__assert_func>
 801daba:	2b40      	cmp	r3, #64	; 0x40
 801dabc:	d020      	beq.n	801db00 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801dabe:	d801      	bhi.n	801dac4 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801dac0:	2b20      	cmp	r3, #32
 801dac2:	e7f3      	b.n	801daac <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801dac4:	2b80      	cmp	r3, #128	; 0x80
 801dac6:	d01b      	beq.n	801db00 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801dac8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801dacc:	e7ee      	b.n	801daac <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801dace:	6823      	ldr	r3, [r4, #0]
 801dad0:	7e01      	ldrb	r1, [r0, #24]
 801dad2:	4620      	mov	r0, r4
 801dad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dad6:	4798      	blx	r3
 801dad8:	6823      	ldr	r3, [r4, #0]
 801dada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dadc:	e006      	b.n	801daec <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801dade:	6823      	ldr	r3, [r4, #0]
 801dae0:	7e01      	ldrb	r1, [r0, #24]
 801dae2:	4620      	mov	r0, r4
 801dae4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801dae6:	4798      	blx	r3
 801dae8:	6823      	ldr	r3, [r4, #0]
 801daea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801daec:	4629      	mov	r1, r5
 801daee:	4620      	mov	r0, r4
 801daf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801daf4:	4718      	bx	r3
 801daf6:	6823      	ldr	r3, [r4, #0]
 801daf8:	4620      	mov	r0, r4
 801dafa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dafc:	4798      	blx	r3
 801dafe:	e7f3      	b.n	801dae8 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 801db00:	6823      	ldr	r3, [r4, #0]
 801db02:	4620      	mov	r0, r4
 801db04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db06:	4798      	blx	r3
 801db08:	e7e6      	b.n	801dad8 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 801db0a:	bf00      	nop
 801db0c:	08025d9d 	.word	0x08025d9d
 801db10:	08025ea8 	.word	0x08025ea8
 801db14:	08025dc2 	.word	0x08025dc2

0801db18 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801db18:	b570      	push	{r4, r5, r6, lr}
 801db1a:	4604      	mov	r4, r0
 801db1c:	460e      	mov	r6, r1
 801db1e:	6860      	ldr	r0, [r4, #4]
 801db20:	6803      	ldr	r3, [r0, #0]
 801db22:	685b      	ldr	r3, [r3, #4]
 801db24:	4798      	blx	r3
 801db26:	2800      	cmp	r0, #0
 801db28:	d1f9      	bne.n	801db1e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801db2a:	4d0b      	ldr	r5, [pc, #44]	; (801db58 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 801db2c:	6828      	ldr	r0, [r5, #0]
 801db2e:	6803      	ldr	r3, [r0, #0]
 801db30:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801db32:	4798      	blx	r3
 801db34:	f7f3 fa7e 	bl	8011034 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801db38:	6860      	ldr	r0, [r4, #4]
 801db3a:	4631      	mov	r1, r6
 801db3c:	6803      	ldr	r3, [r0, #0]
 801db3e:	689b      	ldr	r3, [r3, #8]
 801db40:	4798      	blx	r3
 801db42:	6823      	ldr	r3, [r4, #0]
 801db44:	4620      	mov	r0, r4
 801db46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801db48:	4798      	blx	r3
 801db4a:	6828      	ldr	r0, [r5, #0]
 801db4c:	6803      	ldr	r3, [r0, #0]
 801db4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801db52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801db54:	4718      	bx	r3
 801db56:	bf00      	nop
 801db58:	20009d38 	.word	0x20009d38

0801db5c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801db5c:	b508      	push	{r3, lr}
 801db5e:	f7f3 fa2f 	bl	8010fc0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801db62:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801db66:	f7f3 ba49 	b.w	8010ffc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801db6a <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801db6a:	b570      	push	{r4, r5, r6, lr}
 801db6c:	4604      	mov	r4, r0
 801db6e:	6840      	ldr	r0, [r0, #4]
 801db70:	6803      	ldr	r3, [r0, #0]
 801db72:	681b      	ldr	r3, [r3, #0]
 801db74:	4798      	blx	r3
 801db76:	4605      	mov	r5, r0
 801db78:	b908      	cbnz	r0, 801db7e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x14>
 801db7a:	7a23      	ldrb	r3, [r4, #8]
 801db7c:	b973      	cbnz	r3, 801db9c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x32>
 801db7e:	6860      	ldr	r0, [r4, #4]
 801db80:	6803      	ldr	r3, [r0, #0]
 801db82:	681b      	ldr	r3, [r3, #0]
 801db84:	4798      	blx	r3
 801db86:	b928      	cbnz	r0, 801db94 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x2a>
 801db88:	6823      	ldr	r3, [r4, #0]
 801db8a:	4620      	mov	r0, r4
 801db8c:	6a1b      	ldr	r3, [r3, #32]
 801db8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801db92:	4718      	bx	r3
 801db94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801db98:	f7f3 ba68 	b.w	801106c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
 801db9c:	6860      	ldr	r0, [r4, #4]
 801db9e:	6803      	ldr	r3, [r0, #0]
 801dba0:	695b      	ldr	r3, [r3, #20]
 801dba2:	4798      	blx	r3
 801dba4:	7225      	strb	r5, [r4, #8]
 801dba6:	e7ea      	b.n	801db7e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x14>

0801dba8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801dba8:	b510      	push	{r4, lr}
 801dbaa:	68c3      	ldr	r3, [r0, #12]
 801dbac:	6902      	ldr	r2, [r0, #16]
 801dbae:	1ad2      	subs	r2, r2, r3
 801dbb0:	2a00      	cmp	r2, #0
 801dbb2:	bfdc      	itt	le
 801dbb4:	6884      	ldrle	r4, [r0, #8]
 801dbb6:	1912      	addle	r2, r2, r4
 801dbb8:	2a01      	cmp	r2, #1
 801dbba:	dd17      	ble.n	801dbec <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x44>
 801dbbc:	6842      	ldr	r2, [r0, #4]
 801dbbe:	241c      	movs	r4, #28
 801dbc0:	fb04 2303 	mla	r3, r4, r3, r2
 801dbc4:	f101 0218 	add.w	r2, r1, #24
 801dbc8:	f851 4b04 	ldr.w	r4, [r1], #4
 801dbcc:	4291      	cmp	r1, r2
 801dbce:	f843 4b04 	str.w	r4, [r3], #4
 801dbd2:	d1f9      	bne.n	801dbc8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 801dbd4:	780a      	ldrb	r2, [r1, #0]
 801dbd6:	701a      	strb	r2, [r3, #0]
 801dbd8:	68c3      	ldr	r3, [r0, #12]
 801dbda:	6882      	ldr	r2, [r0, #8]
 801dbdc:	f3bf 8f5b 	dmb	ish
 801dbe0:	3301      	adds	r3, #1
 801dbe2:	4293      	cmp	r3, r2
 801dbe4:	bfa8      	it	ge
 801dbe6:	1a9b      	subge	r3, r3, r2
 801dbe8:	60c3      	str	r3, [r0, #12]
 801dbea:	bd10      	pop	{r4, pc}
 801dbec:	4b02      	ldr	r3, [pc, #8]	; (801dbf8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 801dbee:	213b      	movs	r1, #59	; 0x3b
 801dbf0:	4a02      	ldr	r2, [pc, #8]	; (801dbfc <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801dbf2:	4803      	ldr	r0, [pc, #12]	; (801dc00 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 801dbf4:	f004 fcf8 	bl	80225e8 <__assert_func>
 801dbf8:	08025de8 	.word	0x08025de8
 801dbfc:	08025ed8 	.word	0x08025ed8
 801dc00:	08025dc2 	.word	0x08025dc2

0801dc04 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801dc04:	b510      	push	{r4, lr}
 801dc06:	6803      	ldr	r3, [r0, #0]
 801dc08:	4604      	mov	r4, r0
 801dc0a:	681b      	ldr	r3, [r3, #0]
 801dc0c:	4798      	blx	r3
 801dc0e:	b128      	cbz	r0, 801dc1c <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 801dc10:	4b07      	ldr	r3, [pc, #28]	; (801dc30 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801dc12:	2141      	movs	r1, #65	; 0x41
 801dc14:	4a07      	ldr	r2, [pc, #28]	; (801dc34 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801dc16:	4808      	ldr	r0, [pc, #32]	; (801dc38 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 801dc18:	f004 fce6 	bl	80225e8 <__assert_func>
 801dc1c:	6923      	ldr	r3, [r4, #16]
 801dc1e:	68a2      	ldr	r2, [r4, #8]
 801dc20:	f3bf 8f5b 	dmb	ish
 801dc24:	3301      	adds	r3, #1
 801dc26:	4293      	cmp	r3, r2
 801dc28:	bfa8      	it	ge
 801dc2a:	1a9b      	subge	r3, r3, r2
 801dc2c:	6123      	str	r3, [r4, #16]
 801dc2e:	bd10      	pop	{r4, pc}
 801dc30:	08025e0b 	.word	0x08025e0b
 801dc34:	08025f26 	.word	0x08025f26
 801dc38:	08025dc2 	.word	0x08025dc2

0801dc3c <_ZN8touchgfx13DMA_Interface5startEv>:
 801dc3c:	b510      	push	{r4, lr}
 801dc3e:	4604      	mov	r4, r0
 801dc40:	6840      	ldr	r0, [r0, #4]
 801dc42:	6803      	ldr	r3, [r0, #0]
 801dc44:	681b      	ldr	r3, [r3, #0]
 801dc46:	4798      	blx	r3
 801dc48:	b948      	cbnz	r0, 801dc5e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801dc4a:	7a63      	ldrb	r3, [r4, #9]
 801dc4c:	b13b      	cbz	r3, 801dc5e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801dc4e:	7a23      	ldrb	r3, [r4, #8]
 801dc50:	b92b      	cbnz	r3, 801dc5e <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801dc52:	6823      	ldr	r3, [r4, #0]
 801dc54:	4620      	mov	r0, r4
 801dc56:	6a1b      	ldr	r3, [r3, #32]
 801dc58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dc5c:	4718      	bx	r3
 801dc5e:	bd10      	pop	{r4, pc}

0801dc60 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801dc60:	b510      	push	{r4, lr}
 801dc62:	6082      	str	r2, [r0, #8]
 801dc64:	2200      	movs	r2, #0
 801dc66:	4c03      	ldr	r4, [pc, #12]	; (801dc74 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801dc68:	6041      	str	r1, [r0, #4]
 801dc6a:	6004      	str	r4, [r0, #0]
 801dc6c:	60c2      	str	r2, [r0, #12]
 801dc6e:	6102      	str	r2, [r0, #16]
 801dc70:	bd10      	pop	{r4, pc}
 801dc72:	bf00      	nop
 801dc74:	08025e8c 	.word	0x08025e8c

0801dc78 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801dc78:	6840      	ldr	r0, [r0, #4]
 801dc7a:	6803      	ldr	r3, [r0, #0]
 801dc7c:	681b      	ldr	r3, [r3, #0]
 801dc7e:	4718      	bx	r3

0801dc80 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801dc80:	b538      	push	{r3, r4, r5, lr}
 801dc82:	4604      	mov	r4, r0
 801dc84:	2500      	movs	r5, #0
 801dc86:	9804      	ldr	r0, [sp, #16]
 801dc88:	7223      	strb	r3, [r4, #8]
 801dc8a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801dc8e:	8025      	strh	r5, [r4, #0]
 801dc90:	60e5      	str	r5, [r4, #12]
 801dc92:	82e5      	strh	r5, [r4, #22]
 801dc94:	8325      	strh	r5, [r4, #24]
 801dc96:	8365      	strh	r5, [r4, #26]
 801dc98:	83a5      	strh	r5, [r4, #28]
 801dc9a:	83e5      	strh	r5, [r4, #30]
 801dc9c:	8425      	strh	r5, [r4, #32]
 801dc9e:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 801dca2:	6061      	str	r1, [r4, #4]
 801dca4:	7263      	strb	r3, [r4, #9]
 801dca6:	6120      	str	r0, [r4, #16]
 801dca8:	82a2      	strh	r2, [r4, #20]
 801dcaa:	6803      	ldr	r3, [r0, #0]
 801dcac:	695b      	ldr	r3, [r3, #20]
 801dcae:	4798      	blx	r3
 801dcb0:	4605      	mov	r5, r0
 801dcb2:	b330      	cbz	r0, 801dd02 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x82>
 801dcb4:	6920      	ldr	r0, [r4, #16]
 801dcb6:	4629      	mov	r1, r5
 801dcb8:	6803      	ldr	r3, [r0, #0]
 801dcba:	68db      	ldr	r3, [r3, #12]
 801dcbc:	4798      	blx	r3
 801dcbe:	60e0      	str	r0, [r4, #12]
 801dcc0:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801dcc4:	4602      	mov	r2, r0
 801dcc6:	7a81      	ldrb	r1, [r0, #10]
 801dcc8:	2b00      	cmp	r3, #0
 801dcca:	bfb4      	ite	lt
 801dccc:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801dcd0:	2300      	movge	r3, #0
 801dcd2:	430b      	orrs	r3, r1
 801dcd4:	8423      	strh	r3, [r4, #32]
 801dcd6:	7a63      	ldrb	r3, [r4, #9]
 801dcd8:	2b04      	cmp	r3, #4
 801dcda:	d112      	bne.n	801dd02 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x82>
 801dcdc:	6920      	ldr	r0, [r4, #16]
 801dcde:	4629      	mov	r1, r5
 801dce0:	6803      	ldr	r3, [r0, #0]
 801dce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dce4:	4798      	blx	r3
 801dce6:	68e2      	ldr	r2, [r4, #12]
 801dce8:	f992 300d 	ldrsb.w	r3, [r2, #13]
 801dcec:	7a91      	ldrb	r1, [r2, #10]
 801dcee:	2b00      	cmp	r3, #0
 801dcf0:	bfb4      	ite	lt
 801dcf2:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801dcf6:	2300      	movge	r3, #0
 801dcf8:	430b      	orrs	r3, r1
 801dcfa:	4418      	add	r0, r3
 801dcfc:	8c23      	ldrh	r3, [r4, #32]
 801dcfe:	4418      	add	r0, r3
 801dd00:	8420      	strh	r0, [r4, #32]
 801dd02:	4620      	mov	r0, r4
 801dd04:	bd38      	pop	{r3, r4, r5, pc}

0801dd06 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801dd06:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dd0a:	2600      	movs	r6, #0
 801dd0c:	4682      	mov	sl, r0
 801dd0e:	460f      	mov	r7, r1
 801dd10:	4693      	mov	fp, r2
 801dd12:	46b1      	mov	r9, r6
 801dd14:	46b0      	mov	r8, r6
 801dd16:	9301      	str	r3, [sp, #4]
 801dd18:	455e      	cmp	r6, fp
 801dd1a:	da26      	bge.n	801dd6a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x64>
 801dd1c:	9901      	ldr	r1, [sp, #4]
 801dd1e:	4650      	mov	r0, sl
 801dd20:	f001 fef0 	bl	801fb04 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801dd24:	4605      	mov	r5, r0
 801dd26:	b300      	cbz	r0, 801dd6a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x64>
 801dd28:	280a      	cmp	r0, #10
 801dd2a:	d01e      	beq.n	801dd6a <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x64>
 801dd2c:	683b      	ldr	r3, [r7, #0]
 801dd2e:	4601      	mov	r1, r0
 801dd30:	4638      	mov	r0, r7
 801dd32:	68db      	ldr	r3, [r3, #12]
 801dd34:	4798      	blx	r3
 801dd36:	4602      	mov	r2, r0
 801dd38:	b1a0      	cbz	r0, 801dd64 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5e>
 801dd3a:	7a83      	ldrb	r3, [r0, #10]
 801dd3c:	4649      	mov	r1, r9
 801dd3e:	8885      	ldrh	r5, [r0, #4]
 801dd40:	9300      	str	r3, [sp, #0]
 801dd42:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801dd46:	4638      	mov	r0, r7
 801dd48:	2b00      	cmp	r3, #0
 801dd4a:	683b      	ldr	r3, [r7, #0]
 801dd4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dd4e:	bfb4      	ite	lt
 801dd50:	f44f 7480 	movlt.w	r4, #256	; 0x100
 801dd54:	2400      	movge	r4, #0
 801dd56:	4798      	blx	r3
 801dd58:	9b00      	ldr	r3, [sp, #0]
 801dd5a:	431c      	orrs	r4, r3
 801dd5c:	4404      	add	r4, r0
 801dd5e:	44a0      	add	r8, r4
 801dd60:	fa1f f888 	uxth.w	r8, r8
 801dd64:	3601      	adds	r6, #1
 801dd66:	46a9      	mov	r9, r5
 801dd68:	e7d6      	b.n	801dd18 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x12>
 801dd6a:	4640      	mov	r0, r8
 801dd6c:	b003      	add	sp, #12
 801dd6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dd72 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801dd72:	2a02      	cmp	r2, #2
 801dd74:	b530      	push	{r4, r5, lr}
 801dd76:	d011      	beq.n	801dd9c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801dd78:	2a03      	cmp	r2, #3
 801dd7a:	d01c      	beq.n	801ddb6 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801dd7c:	2a01      	cmp	r2, #1
 801dd7e:	d128      	bne.n	801ddd2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x60>
 801dd80:	888b      	ldrh	r3, [r1, #4]
 801dd82:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801dd86:	8801      	ldrh	r1, [r0, #0]
 801dd88:	1a9b      	subs	r3, r3, r2
 801dd8a:	8844      	ldrh	r4, [r0, #2]
 801dd8c:	1a5b      	subs	r3, r3, r1
 801dd8e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801dd92:	8004      	strh	r4, [r0, #0]
 801dd94:	8043      	strh	r3, [r0, #2]
 801dd96:	8081      	strh	r1, [r0, #4]
 801dd98:	80c2      	strh	r2, [r0, #6]
 801dd9a:	bd30      	pop	{r4, r5, pc}
 801dd9c:	88cb      	ldrh	r3, [r1, #6]
 801dd9e:	88c2      	ldrh	r2, [r0, #6]
 801dda0:	1a9b      	subs	r3, r3, r2
 801dda2:	8842      	ldrh	r2, [r0, #2]
 801dda4:	1a9b      	subs	r3, r3, r2
 801dda6:	888a      	ldrh	r2, [r1, #4]
 801dda8:	8881      	ldrh	r1, [r0, #4]
 801ddaa:	8043      	strh	r3, [r0, #2]
 801ddac:	1a52      	subs	r2, r2, r1
 801ddae:	8801      	ldrh	r1, [r0, #0]
 801ddb0:	1a52      	subs	r2, r2, r1
 801ddb2:	8002      	strh	r2, [r0, #0]
 801ddb4:	bd30      	pop	{r4, r5, pc}
 801ddb6:	88cb      	ldrh	r3, [r1, #6]
 801ddb8:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801ddbc:	8841      	ldrh	r1, [r0, #2]
 801ddbe:	1a9b      	subs	r3, r3, r2
 801ddc0:	f9b0 5000 	ldrsh.w	r5, [r0]
 801ddc4:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801ddc8:	1a5b      	subs	r3, r3, r1
 801ddca:	8045      	strh	r5, [r0, #2]
 801ddcc:	8082      	strh	r2, [r0, #4]
 801ddce:	8003      	strh	r3, [r0, #0]
 801ddd0:	80c4      	strh	r4, [r0, #6]
 801ddd2:	bd30      	pop	{r4, r5, pc}

0801ddd4 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz>:
 801ddd4:	b570      	push	{r4, r5, r6, lr}
 801ddd6:	b086      	sub	sp, #24
 801ddd8:	ad02      	add	r5, sp, #8
 801ddda:	e885 0006 	stmia.w	r5, {r1, r2}
 801ddde:	461a      	mov	r2, r3
 801dde0:	ab0c      	add	r3, sp, #48	; 0x30
 801dde2:	9305      	str	r3, [sp, #20]
 801dde4:	4b0a      	ldr	r3, [pc, #40]	; (801de10 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz+0x3c>)
 801dde6:	685c      	ldr	r4, [r3, #4]
 801dde8:	f014 0f01 	tst.w	r4, #1
 801ddec:	ea4f 0464 	mov.w	r4, r4, asr #1
 801ddf0:	bf1c      	itt	ne
 801ddf2:	681b      	ldrne	r3, [r3, #0]
 801ddf4:	5901      	ldrne	r1, [r0, r4]
 801ddf6:	4420      	add	r0, r4
 801ddf8:	bf0c      	ite	eq
 801ddfa:	681e      	ldreq	r6, [r3, #0]
 801ddfc:	58ce      	ldrne	r6, [r1, r3]
 801ddfe:	4629      	mov	r1, r5
 801de00:	9b05      	ldr	r3, [sp, #20]
 801de02:	9301      	str	r3, [sp, #4]
 801de04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801de06:	9300      	str	r3, [sp, #0]
 801de08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801de0a:	47b0      	blx	r6
 801de0c:	b006      	add	sp, #24
 801de0e:	bd70      	pop	{r4, r5, r6, pc}
 801de10:	2000007c 	.word	0x2000007c

0801de14 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801de14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801de18:	b097      	sub	sp, #92	; 0x5c
 801de1a:	9112      	str	r1, [sp, #72]	; 0x48
 801de1c:	9313      	str	r3, [sp, #76]	; 0x4c
 801de1e:	9921      	ldr	r1, [sp, #132]	; 0x84
 801de20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801de22:	8809      	ldrh	r1, [r1, #0]
 801de24:	889b      	ldrh	r3, [r3, #4]
 801de26:	9f22      	ldr	r7, [sp, #136]	; 0x88
 801de28:	440b      	add	r3, r1
 801de2a:	920f      	str	r2, [sp, #60]	; 0x3c
 801de2c:	f89d 2098 	ldrb.w	r2, [sp, #152]	; 0x98
 801de30:	b21b      	sxth	r3, r3
 801de32:	900e      	str	r0, [sp, #56]	; 0x38
 801de34:	f89d a08c 	ldrb.w	sl, [sp, #140]	; 0x8c
 801de38:	930d      	str	r3, [sp, #52]	; 0x34
 801de3a:	683b      	ldr	r3, [r7, #0]
 801de3c:	7a59      	ldrb	r1, [r3, #9]
 801de3e:	7a1b      	ldrb	r3, [r3, #8]
 801de40:	9111      	str	r1, [sp, #68]	; 0x44
 801de42:	9310      	str	r3, [sp, #64]	; 0x40
 801de44:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801de46:	f9b3 6000 	ldrsh.w	r6, [r3]
 801de4a:	2a00      	cmp	r2, #0
 801de4c:	d04b      	beq.n	801dee6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd2>
 801de4e:	7c3b      	ldrb	r3, [r7, #16]
 801de50:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801de52:	2b04      	cmp	r3, #4
 801de54:	bf0c      	ite	eq
 801de56:	2302      	moveq	r3, #2
 801de58:	2301      	movne	r3, #1
 801de5a:	4413      	add	r3, r2
 801de5c:	2500      	movs	r5, #0
 801de5e:	930c      	str	r3, [sp, #48]	; 0x30
 801de60:	46a9      	mov	r9, r5
 801de62:	462c      	mov	r4, r5
 801de64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801de66:	4599      	cmp	r9, r3
 801de68:	da6a      	bge.n	801df40 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12c>
 801de6a:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801de6c:	4599      	cmp	r9, r3
 801de6e:	db3c      	blt.n	801deea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801de70:	6838      	ldr	r0, [r7, #0]
 801de72:	6803      	ldr	r3, [r0, #0]
 801de74:	695b      	ldr	r3, [r3, #20]
 801de76:	4798      	blx	r3
 801de78:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801de7c:	4680      	mov	r8, r0
 801de7e:	4298      	cmp	r0, r3
 801de80:	d045      	beq.n	801df0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801de82:	f242 030b 	movw	r3, #8203	; 0x200b
 801de86:	4298      	cmp	r0, r3
 801de88:	d041      	beq.n	801df0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801de8a:	2800      	cmp	r0, #0
 801de8c:	d057      	beq.n	801df3e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801de8e:	280a      	cmp	r0, #10
 801de90:	d055      	beq.n	801df3e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801de92:	6838      	ldr	r0, [r7, #0]
 801de94:	aa15      	add	r2, sp, #84	; 0x54
 801de96:	4641      	mov	r1, r8
 801de98:	6803      	ldr	r3, [r0, #0]
 801de9a:	f8d3 b008 	ldr.w	fp, [r3, #8]
 801de9e:	f10d 0353 	add.w	r3, sp, #83	; 0x53
 801dea2:	47d8      	blx	fp
 801dea4:	4683      	mov	fp, r0
 801dea6:	b328      	cbz	r0, 801def4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xe0>
 801dea8:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 801deac:	f1ba 0f00 	cmp.w	sl, #0
 801deb0:	d031      	beq.n	801df16 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x102>
 801deb2:	f99b 200d 	ldrsb.w	r2, [fp, #13]
 801deb6:	f89b 300a 	ldrb.w	r3, [fp, #10]
 801deba:	2a00      	cmp	r2, #0
 801debc:	bfb4      	ite	lt
 801debe:	f44f 7580 	movlt.w	r5, #256	; 0x100
 801dec2:	2500      	movge	r5, #0
 801dec4:	f1ba 0f01 	cmp.w	sl, #1
 801dec8:	ea45 0503 	orr.w	r5, r5, r3
 801decc:	d125      	bne.n	801df1a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x106>
 801dece:	1b76      	subs	r6, r6, r5
 801ded0:	2c00      	cmp	r4, #0
 801ded2:	d147      	bne.n	801df64 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801ded4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801ded6:	19ab      	adds	r3, r5, r6
 801ded8:	4413      	add	r3, r2
 801deda:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801dedc:	f9b2 2000 	ldrsh.w	r2, [r2]
 801dee0:	4293      	cmp	r3, r2
 801dee2:	da4a      	bge.n	801df7a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x166>
 801dee4:	e02b      	b.n	801df3e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801dee6:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801dee8:	e7b8      	b.n	801de5c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 801deea:	4651      	mov	r1, sl
 801deec:	9824      	ldr	r0, [sp, #144]	; 0x90
 801deee:	f001 fe09 	bl	801fb04 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801def2:	e7c1      	b.n	801de78 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x64>
 801def4:	6838      	ldr	r0, [r7, #0]
 801def6:	6803      	ldr	r3, [r0, #0]
 801def8:	691b      	ldr	r3, [r3, #16]
 801defa:	4798      	blx	r3
 801defc:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801df00:	4298      	cmp	r0, r3
 801df02:	d004      	beq.n	801df0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801df04:	f242 030b 	movw	r3, #8203	; 0x200b
 801df08:	4298      	cmp	r0, r3
 801df0a:	bf18      	it	ne
 801df0c:	2500      	movne	r5, #0
 801df0e:	f109 0901 	add.w	r9, r9, #1
 801df12:	4644      	mov	r4, r8
 801df14:	e7a6      	b.n	801de64 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 801df16:	442e      	add	r6, r5
 801df18:	e7cb      	b.n	801deb2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x9e>
 801df1a:	2c00      	cmp	r4, #0
 801df1c:	f000 80a6 	beq.w	801e06c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 801df20:	f1ba 0f00 	cmp.w	sl, #0
 801df24:	d11e      	bne.n	801df64 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801df26:	6838      	ldr	r0, [r7, #0]
 801df28:	465a      	mov	r2, fp
 801df2a:	4621      	mov	r1, r4
 801df2c:	6803      	ldr	r3, [r0, #0]
 801df2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801df30:	4798      	blx	r3
 801df32:	4406      	add	r6, r0
 801df34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801df36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801df38:	1af3      	subs	r3, r6, r3
 801df3a:	4293      	cmp	r3, r2
 801df3c:	dd1d      	ble.n	801df7a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x166>
 801df3e:	4644      	mov	r4, r8
 801df40:	2c00      	cmp	r4, #0
 801df42:	f000 8091 	beq.w	801e068 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 801df46:	2c0a      	cmp	r4, #10
 801df48:	f000 8087 	beq.w	801e05a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x246>
 801df4c:	f109 0901 	add.w	r9, r9, #1
 801df50:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801df52:	4599      	cmp	r9, r3
 801df54:	f280 8082 	bge.w	801e05c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x248>
 801df58:	4651      	mov	r1, sl
 801df5a:	9824      	ldr	r0, [sp, #144]	; 0x90
 801df5c:	f001 fdd2 	bl	801fb04 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801df60:	4604      	mov	r4, r0
 801df62:	e7ed      	b.n	801df40 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12c>
 801df64:	6838      	ldr	r0, [r7, #0]
 801df66:	465a      	mov	r2, fp
 801df68:	4621      	mov	r1, r4
 801df6a:	6803      	ldr	r3, [r0, #0]
 801df6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801df6e:	4798      	blx	r3
 801df70:	f1ba 0f01 	cmp.w	sl, #1
 801df74:	eba6 0600 	sub.w	r6, r6, r0
 801df78:	d0ac      	beq.n	801ded4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xc0>
 801df7a:	f89b 300d 	ldrb.w	r3, [fp, #13]
 801df7e:	f99b 2009 	ldrsb.w	r2, [fp, #9]
 801df82:	f013 0f08 	tst.w	r3, #8
 801df86:	f89b 1006 	ldrb.w	r1, [fp, #6]
 801df8a:	4432      	add	r2, r6
 801df8c:	9821      	ldr	r0, [sp, #132]	; 0x84
 801df8e:	bf14      	ite	ne
 801df90:	f44f 7380 	movne.w	r3, #256	; 0x100
 801df94:	2300      	moveq	r3, #0
 801df96:	f9b0 4000 	ldrsh.w	r4, [r0]
 801df9a:	430b      	orrs	r3, r1
 801df9c:	4413      	add	r3, r2
 801df9e:	42a3      	cmp	r3, r4
 801dfa0:	dbb5      	blt.n	801df0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801dfa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801dfa4:	429a      	cmp	r2, r3
 801dfa6:	dab2      	bge.n	801df0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801dfa8:	6838      	ldr	r0, [r7, #0]
 801dfaa:	42b4      	cmp	r4, r6
 801dfac:	6803      	ldr	r3, [r0, #0]
 801dfae:	bfcc      	ite	gt
 801dfb0:	1ba4      	subgt	r4, r4, r6
 801dfb2:	2400      	movle	r4, #0
 801dfb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801dfb6:	bfc8      	it	gt
 801dfb8:	b2a4      	uxthgt	r4, r4
 801dfba:	4798      	blx	r3
 801dfbc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801dfbe:	4a2e      	ldr	r2, [pc, #184]	; (801e078 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x264>)
 801dfc0:	4418      	add	r0, r3
 801dfc2:	f89b 300d 	ldrb.w	r3, [fp, #13]
 801dfc6:	f89b e008 	ldrb.w	lr, [fp, #8]
 801dfca:	f013 0f40 	tst.w	r3, #64	; 0x40
 801dfce:	bf14      	ite	ne
 801dfd0:	4611      	movne	r1, r2
 801dfd2:	2100      	moveq	r1, #0
 801dfd4:	f013 0f20 	tst.w	r3, #32
 801dfd8:	ea41 010e 	orr.w	r1, r1, lr
 801dfdc:	bf14      	ite	ne
 801dfde:	f44f 7280 	movne.w	r2, #256	; 0x100
 801dfe2:	2200      	moveq	r2, #0
 801dfe4:	430a      	orrs	r2, r1
 801dfe6:	9921      	ldr	r1, [sp, #132]	; 0x84
 801dfe8:	1a80      	subs	r0, r0, r2
 801dfea:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801dfee:	b280      	uxth	r0, r0
 801dff0:	b202      	sxth	r2, r0
 801dff2:	428a      	cmp	r2, r1
 801dff4:	da2f      	bge.n	801e056 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x242>
 801dff6:	f013 0f10 	tst.w	r3, #16
 801dffa:	f89b e007 	ldrb.w	lr, [fp, #7]
 801dffe:	bf14      	ite	ne
 801e000:	f44f 7380 	movne.w	r3, #256	; 0x100
 801e004:	2300      	moveq	r3, #0
 801e006:	ea43 030e 	orr.w	r3, r3, lr
 801e00a:	441a      	add	r2, r3
 801e00c:	4291      	cmp	r1, r2
 801e00e:	f73f af7e 	bgt.w	801df0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801e012:	1a08      	subs	r0, r1, r0
 801e014:	460a      	mov	r2, r1
 801e016:	b280      	uxth	r0, r0
 801e018:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801e01a:	6819      	ldr	r1, [r3, #0]
 801e01c:	79bb      	ldrb	r3, [r7, #6]
 801e01e:	930a      	str	r3, [sp, #40]	; 0x28
 801e020:	7bbb      	ldrb	r3, [r7, #14]
 801e022:	9309      	str	r3, [sp, #36]	; 0x24
 801e024:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 801e028:	9308      	str	r3, [sp, #32]
 801e02a:	68bb      	ldr	r3, [r7, #8]
 801e02c:	9402      	str	r4, [sp, #8]
 801e02e:	4434      	add	r4, r6
 801e030:	9307      	str	r3, [sp, #28]
 801e032:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801e034:	b224      	sxth	r4, r4
 801e036:	9003      	str	r0, [sp, #12]
 801e038:	9306      	str	r3, [sp, #24]
 801e03a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801e03c:	f8cd b014 	str.w	fp, [sp, #20]
 801e040:	9304      	str	r3, [sp, #16]
 801e042:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801e044:	9201      	str	r2, [sp, #4]
 801e046:	9400      	str	r4, [sp, #0]
 801e048:	980e      	ldr	r0, [sp, #56]	; 0x38
 801e04a:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801e04c:	681a      	ldr	r2, [r3, #0]
 801e04e:	9912      	ldr	r1, [sp, #72]	; 0x48
 801e050:	685b      	ldr	r3, [r3, #4]
 801e052:	47a0      	blx	r4
 801e054:	e75b      	b.n	801df0e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801e056:	2000      	movs	r0, #0
 801e058:	e7de      	b.n	801e018 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x204>
 801e05a:	240a      	movs	r4, #10
 801e05c:	fab4 f084 	clz	r0, r4
 801e060:	0940      	lsrs	r0, r0, #5
 801e062:	b017      	add	sp, #92	; 0x5c
 801e064:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e068:	2400      	movs	r4, #0
 801e06a:	e7f7      	b.n	801e05c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x248>
 801e06c:	f1ba 0f00 	cmp.w	sl, #0
 801e070:	f43f af60 	beq.w	801df34 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x120>
 801e074:	e781      	b.n	801df7a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x166>
 801e076:	bf00      	nop
 801e078:	fffffe00 	.word	0xfffffe00

0801e07c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801e07c:	b530      	push	{r4, r5, lr}
 801e07e:	8ac4      	ldrh	r4, [r0, #22]
 801e080:	8b45      	ldrh	r5, [r0, #26]
 801e082:	8343      	strh	r3, [r0, #26]
 801e084:	442c      	add	r4, r5
 801e086:	1ae4      	subs	r4, r4, r3
 801e088:	8b83      	ldrh	r3, [r0, #28]
 801e08a:	82c4      	strh	r4, [r0, #22]
 801e08c:	8b04      	ldrh	r4, [r0, #24]
 801e08e:	4422      	add	r2, r4
 801e090:	440c      	add	r4, r1
 801e092:	1a59      	subs	r1, r3, r1
 801e094:	83c2      	strh	r2, [r0, #30]
 801e096:	8304      	strh	r4, [r0, #24]
 801e098:	8381      	strh	r1, [r0, #28]
 801e09a:	bd30      	pop	{r4, r5, pc}

0801e09c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801e09c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0a0:	f890 b009 	ldrb.w	fp, [r0, #9]
 801e0a4:	b085      	sub	sp, #20
 801e0a6:	4604      	mov	r4, r0
 801e0a8:	460f      	mov	r7, r1
 801e0aa:	f1ab 0303 	sub.w	r3, fp, #3
 801e0ae:	b331      	cbz	r1, 801e0fe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x62>
 801e0b0:	2b01      	cmp	r3, #1
 801e0b2:	d922      	bls.n	801e0fa <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 801e0b4:	f10b 32ff 	add.w	r2, fp, #4294967295
 801e0b8:	f1d2 0a00 	rsbs	sl, r2, #0
 801e0bc:	eb4a 0a02 	adc.w	sl, sl, r2
 801e0c0:	f1ab 0302 	sub.w	r3, fp, #2
 801e0c4:	2500      	movs	r5, #0
 801e0c6:	f1d3 0b00 	rsbs	fp, r3, #0
 801e0ca:	9501      	str	r5, [sp, #4]
 801e0cc:	eb4b 0b03 	adc.w	fp, fp, r3
 801e0d0:	2600      	movs	r6, #0
 801e0d2:	82e6      	strh	r6, [r4, #22]
 801e0d4:	8326      	strh	r6, [r4, #24]
 801e0d6:	7a21      	ldrb	r1, [r4, #8]
 801e0d8:	6860      	ldr	r0, [r4, #4]
 801e0da:	f8b4 9000 	ldrh.w	r9, [r4]
 801e0de:	f001 fd11 	bl	801fb04 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e0e2:	4601      	mov	r1, r0
 801e0e4:	8020      	strh	r0, [r4, #0]
 801e0e6:	b9c8      	cbnz	r0, 801e11c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x80>
 801e0e8:	8ba2      	ldrh	r2, [r4, #28]
 801e0ea:	2300      	movs	r3, #0
 801e0ec:	4611      	mov	r1, r2
 801e0ee:	4620      	mov	r0, r4
 801e0f0:	b005      	add	sp, #20
 801e0f2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e0f6:	f7ff bfc1 	b.w	801e07c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801e0fa:	468a      	mov	sl, r1
 801e0fc:	e7e0      	b.n	801e0c0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x24>
 801e0fe:	2b01      	cmp	r3, #1
 801e100:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e104:	468a      	mov	sl, r1
 801e106:	bf8c      	ite	hi
 801e108:	2300      	movhi	r3, #0
 801e10a:	2301      	movls	r3, #1
 801e10c:	f1bb 0f01 	cmp.w	fp, #1
 801e110:	468b      	mov	fp, r1
 801e112:	9301      	str	r3, [sp, #4]
 801e114:	bf8c      	ite	hi
 801e116:	2500      	movhi	r5, #0
 801e118:	2501      	movls	r5, #1
 801e11a:	e7d9      	b.n	801e0d0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x34>
 801e11c:	8b63      	ldrh	r3, [r4, #26]
 801e11e:	280a      	cmp	r0, #10
 801e120:	f103 0301 	add.w	r3, r3, #1
 801e124:	8363      	strh	r3, [r4, #26]
 801e126:	d0df      	beq.n	801e0e8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 801e128:	6920      	ldr	r0, [r4, #16]
 801e12a:	6803      	ldr	r3, [r0, #0]
 801e12c:	68db      	ldr	r3, [r3, #12]
 801e12e:	4798      	blx	r3
 801e130:	4602      	mov	r2, r0
 801e132:	2800      	cmp	r0, #0
 801e134:	d0cf      	beq.n	801e0d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801e136:	8883      	ldrh	r3, [r0, #4]
 801e138:	f8b4 801c 	ldrh.w	r8, [r4, #28]
 801e13c:	2b20      	cmp	r3, #32
 801e13e:	8023      	strh	r3, [r4, #0]
 801e140:	d103      	bne.n	801e14a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xae>
 801e142:	f1b9 0f20 	cmp.w	r9, #32
 801e146:	bf18      	it	ne
 801e148:	4646      	movne	r6, r8
 801e14a:	7a93      	ldrb	r3, [r2, #10]
 801e14c:	4649      	mov	r1, r9
 801e14e:	6920      	ldr	r0, [r4, #16]
 801e150:	9302      	str	r3, [sp, #8]
 801e152:	f992 300d 	ldrsb.w	r3, [r2, #13]
 801e156:	2b00      	cmp	r3, #0
 801e158:	bfb4      	ite	lt
 801e15a:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801e15e:	2300      	movge	r3, #0
 801e160:	9303      	str	r3, [sp, #12]
 801e162:	6803      	ldr	r3, [r0, #0]
 801e164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e166:	4798      	blx	r3
 801e168:	9b03      	ldr	r3, [sp, #12]
 801e16a:	9a02      	ldr	r2, [sp, #8]
 801e16c:	8aa1      	ldrh	r1, [r4, #20]
 801e16e:	431a      	orrs	r2, r3
 801e170:	8b23      	ldrh	r3, [r4, #24]
 801e172:	4402      	add	r2, r0
 801e174:	8ba0      	ldrh	r0, [r4, #28]
 801e176:	4402      	add	r2, r0
 801e178:	b292      	uxth	r2, r2
 801e17a:	83a2      	strh	r2, [r4, #28]
 801e17c:	4413      	add	r3, r2
 801e17e:	b327      	cbz	r7, 801e1ca <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12e>
 801e180:	f1ba 0f00 	cmp.w	sl, #0
 801e184:	d105      	bne.n	801e192 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf6>
 801e186:	f1bb 0f00 	cmp.w	fp, #0
 801e18a:	d00f      	beq.n	801e1ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x110>
 801e18c:	8820      	ldrh	r0, [r4, #0]
 801e18e:	2820      	cmp	r0, #32
 801e190:	d10c      	bne.n	801e1ac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x110>
 801e192:	8c20      	ldrh	r0, [r4, #32]
 801e194:	4418      	add	r0, r3
 801e196:	4281      	cmp	r1, r0
 801e198:	da02      	bge.n	801e1a0 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x104>
 801e19a:	8ae0      	ldrh	r0, [r4, #22]
 801e19c:	2800      	cmp	r0, #0
 801e19e:	d13a      	bne.n	801e216 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x17a>
 801e1a0:	2300      	movs	r3, #0
 801e1a2:	4611      	mov	r1, r2
 801e1a4:	4620      	mov	r0, r4
 801e1a6:	f7ff ff69 	bl	801e07c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801e1aa:	e794      	b.n	801e0d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801e1ac:	428b      	cmp	r3, r1
 801e1ae:	dd92      	ble.n	801e0d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801e1b0:	8ae3      	ldrh	r3, [r4, #22]
 801e1b2:	2b00      	cmp	r3, #0
 801e1b4:	d08f      	beq.n	801e0d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801e1b6:	2301      	movs	r3, #1
 801e1b8:	8c22      	ldrh	r2, [r4, #32]
 801e1ba:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 801e1be:	8be3      	ldrh	r3, [r4, #30]
 801e1c0:	4413      	add	r3, r2
 801e1c2:	83e3      	strh	r3, [r4, #30]
 801e1c4:	b005      	add	sp, #20
 801e1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e1ca:	428b      	cmp	r3, r1
 801e1cc:	dd17      	ble.n	801e1fe <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x162>
 801e1ce:	9b01      	ldr	r3, [sp, #4]
 801e1d0:	b113      	cbz	r3, 801e1d8 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x13c>
 801e1d2:	2301      	movs	r3, #1
 801e1d4:	4642      	mov	r2, r8
 801e1d6:	e789      	b.n	801e0ec <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 801e1d8:	2d00      	cmp	r5, #0
 801e1da:	f43f af7c 	beq.w	801e0d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801e1de:	8823      	ldrh	r3, [r4, #0]
 801e1e0:	2b20      	cmp	r3, #32
 801e1e2:	f43f af78 	beq.w	801e0d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801e1e6:	f1b9 0f20 	cmp.w	r9, #32
 801e1ea:	d103      	bne.n	801e1f4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x158>
 801e1ec:	2301      	movs	r3, #1
 801e1ee:	4632      	mov	r2, r6
 801e1f0:	4641      	mov	r1, r8
 801e1f2:	e77c      	b.n	801e0ee <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 801e1f4:	8ae3      	ldrh	r3, [r4, #22]
 801e1f6:	2b00      	cmp	r3, #0
 801e1f8:	f43f af6d 	beq.w	801e0d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801e1fc:	e7e2      	b.n	801e1c4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x128>
 801e1fe:	8823      	ldrh	r3, [r4, #0]
 801e200:	2b20      	cmp	r3, #32
 801e202:	f43f af68 	beq.w	801e0d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801e206:	f1b9 0f20 	cmp.w	r9, #32
 801e20a:	f47f af64 	bne.w	801e0d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801e20e:	2301      	movs	r3, #1
 801e210:	4632      	mov	r2, r6
 801e212:	4641      	mov	r1, r8
 801e214:	e7c6      	b.n	801e1a4 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x108>
 801e216:	428b      	cmp	r3, r1
 801e218:	f77f af5d 	ble.w	801e0d6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801e21c:	e7cb      	b.n	801e1b6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x11a>

0801e21e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801e21e:	b570      	push	{r4, r5, r6, lr}
 801e220:	4606      	mov	r6, r0
 801e222:	b08c      	sub	sp, #48	; 0x30
 801e224:	4615      	mov	r5, r2
 801e226:	b191      	cbz	r1, 801e24e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 801e228:	2401      	movs	r4, #1
 801e22a:	9101      	str	r1, [sp, #4]
 801e22c:	9300      	str	r3, [sp, #0]
 801e22e:	4601      	mov	r1, r0
 801e230:	4613      	mov	r3, r2
 801e232:	a803      	add	r0, sp, #12
 801e234:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801e238:	f7ff fd22 	bl	801dc80 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801e23c:	2100      	movs	r1, #0
 801e23e:	a803      	add	r0, sp, #12
 801e240:	f7ff ff2c 	bl	801e09c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801e244:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801e248:	b173      	cbz	r3, 801e268 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801e24a:	3401      	adds	r4, #1
 801e24c:	e7f6      	b.n	801e23c <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 801e24e:	2401      	movs	r4, #1
 801e250:	4611      	mov	r1, r2
 801e252:	f001 fc57 	bl	801fb04 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e256:	280a      	cmp	r0, #10
 801e258:	4629      	mov	r1, r5
 801e25a:	4630      	mov	r0, r6
 801e25c:	bf08      	it	eq
 801e25e:	3401      	addeq	r4, #1
 801e260:	f001 fc50 	bl	801fb04 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e264:	2800      	cmp	r0, #0
 801e266:	d1f6      	bne.n	801e256 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 801e268:	b2a0      	uxth	r0, r4
 801e26a:	b00c      	add	sp, #48	; 0x30
 801e26c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e270 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801e270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e274:	b0ab      	sub	sp, #172	; 0xac
 801e276:	4689      	mov	r9, r1
 801e278:	461c      	mov	r4, r3
 801e27a:	f8dd a0d0 	ldr.w	sl, [sp, #208]	; 0xd0
 801e27e:	9009      	str	r0, [sp, #36]	; 0x24
 801e280:	f1ba 0f00 	cmp.w	sl, #0
 801e284:	f000 80ac 	beq.w	801e3e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801e288:	681b      	ldr	r3, [r3, #0]
 801e28a:	2b00      	cmp	r3, #0
 801e28c:	f000 80a8 	beq.w	801e3e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801e290:	7ba3      	ldrb	r3, [r4, #14]
 801e292:	2b00      	cmp	r3, #0
 801e294:	f000 80a4 	beq.w	801e3e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801e298:	6810      	ldr	r0, [r2, #0]
 801e29a:	ab0b      	add	r3, sp, #44	; 0x2c
 801e29c:	6851      	ldr	r1, [r2, #4]
 801e29e:	f10d 083c 	add.w	r8, sp, #60	; 0x3c
 801e2a2:	f9b9 2006 	ldrsh.w	r2, [r9, #6]
 801e2a6:	c303      	stmia	r3!, {r0, r1}
 801e2a8:	f9b9 1004 	ldrsh.w	r1, [r9, #4]
 801e2ac:	2300      	movs	r3, #0
 801e2ae:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801e2b2:	a80b      	add	r0, sp, #44	; 0x2c
 801e2b4:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
 801e2b8:	a90d      	add	r1, sp, #52	; 0x34
 801e2ba:	79a2      	ldrb	r2, [r4, #6]
 801e2bc:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801e2c0:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801e2c4:	f7ff fd55 	bl	801dd72 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801e2c8:	a90d      	add	r1, sp, #52	; 0x34
 801e2ca:	79a2      	ldrb	r2, [r4, #6]
 801e2cc:	4608      	mov	r0, r1
 801e2ce:	f7ff fd50 	bl	801dd72 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801e2d2:	4640      	mov	r0, r8
 801e2d4:	f001 fc5c 	bl	801fb90 <_ZN8touchgfx12TextProviderC1Ev>
 801e2d8:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801e2da:	4651      	mov	r1, sl
 801e2dc:	4640      	mov	r0, r8
 801e2de:	f001 fc60 	bl	801fba2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801e2e2:	a815      	add	r0, sp, #84	; 0x54
 801e2e4:	f001 fc54 	bl	801fb90 <_ZN8touchgfx12TextProviderC1Ev>
 801e2e8:	7927      	ldrb	r7, [r4, #4]
 801e2ea:	b127      	cbz	r7, 801e2f6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x86>
 801e2ec:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801e2ee:	4651      	mov	r1, sl
 801e2f0:	a815      	add	r0, sp, #84	; 0x54
 801e2f2:	f001 fc56 	bl	801fba2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801e2f6:	6820      	ldr	r0, [r4, #0]
 801e2f8:	89a5      	ldrh	r5, [r4, #12]
 801e2fa:	6803      	ldr	r3, [r0, #0]
 801e2fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e2fe:	4798      	blx	r3
 801e300:	4405      	add	r5, r0
 801e302:	a81b      	add	r0, sp, #108	; 0x6c
 801e304:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801e308:	f001 fc42 	bl	801fb90 <_ZN8touchgfx12TextProviderC1Ev>
 801e30c:	7c23      	ldrb	r3, [r4, #16]
 801e30e:	fb96 f6f5 	sdiv	r6, r6, r5
 801e312:	b123      	cbz	r3, 801e31e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xae>
 801e314:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801e316:	4651      	mov	r1, sl
 801e318:	a81b      	add	r0, sp, #108	; 0x6c
 801e31a:	f001 fc42 	bl	801fba2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801e31e:	7c21      	ldrb	r1, [r4, #16]
 801e320:	a821      	add	r0, sp, #132	; 0x84
 801e322:	7963      	ldrb	r3, [r4, #5]
 801e324:	9101      	str	r1, [sp, #4]
 801e326:	6821      	ldr	r1, [r4, #0]
 801e328:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801e32c:	9100      	str	r1, [sp, #0]
 801e32e:	a91b      	add	r1, sp, #108	; 0x6c
 801e330:	f7ff fca6 	bl	801dc80 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801e334:	7c23      	ldrb	r3, [r4, #16]
 801e336:	bb03      	cbnz	r3, 801e37a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x10a>
 801e338:	fa1f fa85 	uxth.w	sl, r5
 801e33c:	2e00      	cmp	r6, #0
 801e33e:	dd52      	ble.n	801e3e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x176>
 801e340:	7961      	ldrb	r1, [r4, #5]
 801e342:	4640      	mov	r0, r8
 801e344:	f001 fbde 	bl	801fb04 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e348:	4683      	mov	fp, r0
 801e34a:	b11f      	cbz	r7, 801e354 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xe4>
 801e34c:	7961      	ldrb	r1, [r4, #5]
 801e34e:	a815      	add	r0, sp, #84	; 0x54
 801e350:	f001 fbd8 	bl	801fb04 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e354:	f1bb 0f00 	cmp.w	fp, #0
 801e358:	d042      	beq.n	801e3e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801e35a:	f1bb 0f0a 	cmp.w	fp, #10
 801e35e:	d1ed      	bne.n	801e33c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xcc>
 801e360:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801e364:	3e01      	subs	r6, #1
 801e366:	4453      	add	r3, sl
 801e368:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801e36c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801e370:	eba3 030a 	sub.w	r3, r3, sl
 801e374:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e378:	e7e0      	b.n	801e33c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xcc>
 801e37a:	006b      	lsls	r3, r5, #1
 801e37c:	fa1f fa85 	uxth.w	sl, r5
 801e380:	9308      	str	r3, [sp, #32]
 801e382:	2e00      	cmp	r6, #0
 801e384:	dd2f      	ble.n	801e3e6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x176>
 801e386:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801e38a:	a821      	add	r0, sp, #132	; 0x84
 801e38c:	9b08      	ldr	r3, [sp, #32]
 801e38e:	428b      	cmp	r3, r1
 801e390:	bfd4      	ite	le
 801e392:	2100      	movle	r1, #0
 801e394:	2101      	movgt	r1, #1
 801e396:	f7ff fe81 	bl	801e09c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801e39a:	f8bd b09a 	ldrh.w	fp, [sp, #154]	; 0x9a
 801e39e:	f1bb 0f00 	cmp.w	fp, #0
 801e3a2:	d00d      	beq.n	801e3c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x150>
 801e3a4:	7961      	ldrb	r1, [r4, #5]
 801e3a6:	4640      	mov	r0, r8
 801e3a8:	f001 fbac 	bl	801fb04 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e3ac:	b11f      	cbz	r7, 801e3b6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x146>
 801e3ae:	7961      	ldrb	r1, [r4, #5]
 801e3b0:	a815      	add	r0, sp, #84	; 0x54
 801e3b2:	f001 fba7 	bl	801fb04 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e3b6:	f10b 33ff 	add.w	r3, fp, #4294967295
 801e3ba:	fa1f fb83 	uxth.w	fp, r3
 801e3be:	e7ee      	b.n	801e39e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801e3c0:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801e3c4:	3e01      	subs	r6, #1
 801e3c6:	4453      	add	r3, sl
 801e3c8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801e3cc:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801e3d0:	eba3 030a 	sub.w	r3, r3, sl
 801e3d4:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e3d8:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 801e3dc:	2b00      	cmp	r3, #0
 801e3de:	d1d0      	bne.n	801e382 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x112>
 801e3e0:	b02b      	add	sp, #172	; 0xac
 801e3e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e3e6:	4b40      	ldr	r3, [pc, #256]	; (801e4e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x278>)
 801e3e8:	ea4f 0b45 	mov.w	fp, r5, lsl #1
 801e3ec:	f04f 0a02 	mov.w	sl, #2
 801e3f0:	6818      	ldr	r0, [r3, #0]
 801e3f2:	6803      	ldr	r3, [r0, #0]
 801e3f4:	6a1b      	ldr	r3, [r3, #32]
 801e3f6:	4798      	blx	r3
 801e3f8:	4606      	mov	r6, r0
 801e3fa:	7c23      	ldrb	r3, [r4, #16]
 801e3fc:	2b00      	cmp	r3, #0
 801e3fe:	d067      	beq.n	801e4d0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801e400:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801e404:	a821      	add	r0, sp, #132	; 0x84
 801e406:	458b      	cmp	fp, r1
 801e408:	bfd4      	ite	le
 801e40a:	2100      	movle	r1, #0
 801e40c:	2101      	movgt	r1, #1
 801e40e:	f7ff fe45 	bl	801e09c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801e412:	2f00      	cmp	r7, #0
 801e414:	d055      	beq.n	801e4c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801e416:	7c23      	ldrb	r3, [r4, #16]
 801e418:	2b00      	cmp	r3, #0
 801e41a:	d05b      	beq.n	801e4d4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x264>
 801e41c:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 801e420:	7922      	ldrb	r2, [r4, #4]
 801e422:	2a01      	cmp	r2, #1
 801e424:	d145      	bne.n	801e4b2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 801e426:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 801e42a:	1ac0      	subs	r0, r0, r3
 801e42c:	fb90 f0fa 	sdiv	r0, r0, sl
 801e430:	b200      	sxth	r0, r0
 801e432:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801e436:	4418      	add	r0, r3
 801e438:	7c23      	ldrb	r3, [r4, #16]
 801e43a:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 801e43e:	2b00      	cmp	r3, #0
 801e440:	d043      	beq.n	801e4ca <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 801e442:	f8bd 209a 	ldrh.w	r2, [sp, #154]	; 0x9a
 801e446:	9205      	str	r2, [sp, #20]
 801e448:	2200      	movs	r2, #0
 801e44a:	f89d 10a6 	ldrb.w	r1, [sp, #166]	; 0xa6
 801e44e:	9203      	str	r2, [sp, #12]
 801e450:	aa0b      	add	r2, sp, #44	; 0x2c
 801e452:	9106      	str	r1, [sp, #24]
 801e454:	4631      	mov	r1, r6
 801e456:	9201      	str	r2, [sp, #4]
 801e458:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
 801e45c:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801e460:	9200      	str	r2, [sp, #0]
 801e462:	464a      	mov	r2, r9
 801e464:	f8cd 8010 	str.w	r8, [sp, #16]
 801e468:	9402      	str	r4, [sp, #8]
 801e46a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e46c:	f7ff fcd2 	bl	801de14 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801e470:	b9c8      	cbnz	r0, 801e4a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801e472:	b2aa      	uxth	r2, r5
 801e474:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801e478:	4611      	mov	r1, r2
 801e47a:	4413      	add	r3, r2
 801e47c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e480:	b21b      	sxth	r3, r3
 801e482:	1a52      	subs	r2, r2, r1
 801e484:	7c21      	ldrb	r1, [r4, #16]
 801e486:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801e48a:	b212      	sxth	r2, r2
 801e48c:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801e490:	b109      	cbz	r1, 801e496 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x226>
 801e492:	4295      	cmp	r5, r2
 801e494:	dc07      	bgt.n	801e4a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801e496:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801e49a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801e49e:	440a      	add	r2, r1
 801e4a0:	b212      	sxth	r2, r2
 801e4a2:	4293      	cmp	r3, r2
 801e4a4:	dda9      	ble.n	801e3fa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18a>
 801e4a6:	4b10      	ldr	r3, [pc, #64]	; (801e4e8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x278>)
 801e4a8:	6818      	ldr	r0, [r3, #0]
 801e4aa:	6803      	ldr	r3, [r0, #0]
 801e4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e4ae:	4798      	blx	r3
 801e4b0:	e796      	b.n	801e3e0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801e4b2:	2a02      	cmp	r2, #2
 801e4b4:	d107      	bne.n	801e4c6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801e4b6:	7be2      	ldrb	r2, [r4, #15]
 801e4b8:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 801e4bc:	1a80      	subs	r0, r0, r2
 801e4be:	1ac0      	subs	r0, r0, r3
 801e4c0:	e7b6      	b.n	801e430 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c0>
 801e4c2:	7be0      	ldrb	r0, [r4, #15]
 801e4c4:	e7b5      	b.n	801e432 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>
 801e4c6:	2000      	movs	r0, #0
 801e4c8:	e7b3      	b.n	801e432 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>
 801e4ca:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801e4ce:	e7ba      	b.n	801e446 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801e4d0:	2f00      	cmp	r7, #0
 801e4d2:	d0f6      	beq.n	801e4c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801e4d4:	2300      	movs	r3, #0
 801e4d6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801e4da:	6821      	ldr	r1, [r4, #0]
 801e4dc:	a815      	add	r0, sp, #84	; 0x54
 801e4de:	f7ff fc12 	bl	801dd06 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801e4e2:	b203      	sxth	r3, r0
 801e4e4:	e79c      	b.n	801e420 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b0>
 801e4e6:	bf00      	nop
 801e4e8:	20009d38 	.word	0x20009d38

0801e4ec <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801e4ec:	2b02      	cmp	r3, #2
 801e4ee:	d00e      	beq.n	801e50e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801e4f0:	2b03      	cmp	r3, #3
 801e4f2:	d012      	beq.n	801e51a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2e>
 801e4f4:	2b01      	cmp	r3, #1
 801e4f6:	d003      	beq.n	801e500 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801e4f8:	f9b0 2000 	ldrsh.w	r2, [r0]
 801e4fc:	1850      	adds	r0, r2, r1
 801e4fe:	4770      	bx	lr
 801e500:	8803      	ldrh	r3, [r0, #0]
 801e502:	8880      	ldrh	r0, [r0, #4]
 801e504:	4418      	add	r0, r3
 801e506:	b200      	sxth	r0, r0
 801e508:	1a80      	subs	r0, r0, r2
 801e50a:	3801      	subs	r0, #1
 801e50c:	4770      	bx	lr
 801e50e:	8803      	ldrh	r3, [r0, #0]
 801e510:	8880      	ldrh	r0, [r0, #4]
 801e512:	4418      	add	r0, r3
 801e514:	b200      	sxth	r0, r0
 801e516:	1a40      	subs	r0, r0, r1
 801e518:	e7f7      	b.n	801e50a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801e51a:	f9b0 0000 	ldrsh.w	r0, [r0]
 801e51e:	4410      	add	r0, r2
 801e520:	4770      	bx	lr

0801e522 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801e522:	2b02      	cmp	r3, #2
 801e524:	d008      	beq.n	801e538 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801e526:	2b03      	cmp	r3, #3
 801e528:	d00d      	beq.n	801e546 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801e52a:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 801e52e:	2b01      	cmp	r3, #1
 801e530:	bf14      	ite	ne
 801e532:	1880      	addne	r0, r0, r2
 801e534:	1840      	addeq	r0, r0, r1
 801e536:	4770      	bx	lr
 801e538:	8843      	ldrh	r3, [r0, #2]
 801e53a:	88c0      	ldrh	r0, [r0, #6]
 801e53c:	4418      	add	r0, r3
 801e53e:	b200      	sxth	r0, r0
 801e540:	1a80      	subs	r0, r0, r2
 801e542:	3801      	subs	r0, #1
 801e544:	4770      	bx	lr
 801e546:	8843      	ldrh	r3, [r0, #2]
 801e548:	88c0      	ldrh	r0, [r0, #6]
 801e54a:	4418      	add	r0, r3
 801e54c:	b200      	sxth	r0, r0
 801e54e:	1a40      	subs	r0, r0, r1
 801e550:	e7f7      	b.n	801e542 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

0801e552 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 801e552:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e554:	f8dd c014 	ldr.w	ip, [sp, #20]
 801e558:	1e05      	subs	r5, r0, #0
 801e55a:	f04f 0601 	mov.w	r6, #1
 801e55e:	9c06      	ldr	r4, [sp, #24]
 801e560:	bfba      	itte	lt
 801e562:	f04f 37ff 	movlt.w	r7, #4294967295
 801e566:	426d      	neglt	r5, r5
 801e568:	2701      	movge	r7, #1
 801e56a:	f1bc 0f00 	cmp.w	ip, #0
 801e56e:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801e572:	bfbc      	itt	lt
 801e574:	f1cc 0c00 	rsblt	ip, ip, #0
 801e578:	427f      	neglt	r7, r7
 801e57a:	2c00      	cmp	r4, #0
 801e57c:	fa4c f001 	asr.w	r0, ip, r1
 801e580:	fa06 f101 	lsl.w	r1, r6, r1
 801e584:	bfbc      	itt	lt
 801e586:	4264      	neglt	r4, r4
 801e588:	427f      	neglt	r7, r7
 801e58a:	3901      	subs	r1, #1
 801e58c:	ea01 010c 	and.w	r1, r1, ip
 801e590:	434d      	muls	r5, r1
 801e592:	f8de 1000 	ldr.w	r1, [lr]
 801e596:	fb03 1300 	mla	r3, r3, r0, r1
 801e59a:	fb95 f1f4 	sdiv	r1, r5, r4
 801e59e:	fb04 5511 	mls	r5, r4, r1, r5
 801e5a2:	441d      	add	r5, r3
 801e5a4:	fb95 f3f4 	sdiv	r3, r5, r4
 801e5a8:	4419      	add	r1, r3
 801e5aa:	fb04 5413 	mls	r4, r4, r3, r5
 801e5ae:	fb02 1000 	mla	r0, r2, r0, r1
 801e5b2:	f8ce 4000 	str.w	r4, [lr]
 801e5b6:	4378      	muls	r0, r7
 801e5b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801e5bc <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801e5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e5c0:	4c24      	ldr	r4, [pc, #144]	; (801e654 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801e5c2:	b086      	sub	sp, #24
 801e5c4:	4605      	mov	r5, r0
 801e5c6:	6807      	ldr	r7, [r0, #0]
 801e5c8:	69a3      	ldr	r3, [r4, #24]
 801e5ca:	b92b      	cbnz	r3, 801e5d8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801e5cc:	6840      	ldr	r0, [r0, #4]
 801e5ce:	602f      	str	r7, [r5, #0]
 801e5d0:	6068      	str	r0, [r5, #4]
 801e5d2:	b006      	add	sp, #24
 801e5d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e5d8:	f04f 0802 	mov.w	r8, #2
 801e5dc:	68a2      	ldr	r2, [r4, #8]
 801e5de:	ae06      	add	r6, sp, #24
 801e5e0:	6820      	ldr	r0, [r4, #0]
 801e5e2:	fb93 f1f8 	sdiv	r1, r3, r8
 801e5e6:	440a      	add	r2, r1
 801e5e8:	69e1      	ldr	r1, [r4, #28]
 801e5ea:	f846 2d04 	str.w	r2, [r6, #-4]!
 801e5ee:	9301      	str	r3, [sp, #4]
 801e5f0:	9700      	str	r7, [sp, #0]
 801e5f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801e5f4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801e5f6:	9602      	str	r6, [sp, #8]
 801e5f8:	f7ff ffab 	bl	801e552 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801e5fc:	69a3      	ldr	r3, [r4, #24]
 801e5fe:	4607      	mov	r7, r0
 801e600:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801e602:	9301      	str	r3, [sp, #4]
 801e604:	686b      	ldr	r3, [r5, #4]
 801e606:	6a21      	ldr	r1, [r4, #32]
 801e608:	9300      	str	r3, [sp, #0]
 801e60a:	9602      	str	r6, [sp, #8]
 801e60c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e60e:	6860      	ldr	r0, [r4, #4]
 801e610:	f7ff ff9f 	bl	801e552 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801e614:	69a2      	ldr	r2, [r4, #24]
 801e616:	6963      	ldr	r3, [r4, #20]
 801e618:	4407      	add	r7, r0
 801e61a:	9201      	str	r2, [sp, #4]
 801e61c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801e61e:	9602      	str	r6, [sp, #8]
 801e620:	68e0      	ldr	r0, [r4, #12]
 801e622:	fb92 f8f8 	sdiv	r8, r2, r8
 801e626:	4443      	add	r3, r8
 801e628:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801e62a:	9305      	str	r3, [sp, #20]
 801e62c:	682b      	ldr	r3, [r5, #0]
 801e62e:	9300      	str	r3, [sp, #0]
 801e630:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801e632:	f7ff ff8e 	bl	801e552 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801e636:	69a3      	ldr	r3, [r4, #24]
 801e638:	4680      	mov	r8, r0
 801e63a:	9602      	str	r6, [sp, #8]
 801e63c:	9301      	str	r3, [sp, #4]
 801e63e:	686b      	ldr	r3, [r5, #4]
 801e640:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801e642:	9300      	str	r3, [sp, #0]
 801e644:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801e646:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801e648:	6920      	ldr	r0, [r4, #16]
 801e64a:	f7ff ff82 	bl	801e552 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801e64e:	4440      	add	r0, r8
 801e650:	e7bd      	b.n	801e5ce <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801e652:	bf00      	nop
 801e654:	20009d40 	.word	0x20009d40

0801e658 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801e658:	4b07      	ldr	r3, [pc, #28]	; (801e678 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801e65a:	b510      	push	{r4, lr}
 801e65c:	781b      	ldrb	r3, [r3, #0]
 801e65e:	2b01      	cmp	r3, #1
 801e660:	d108      	bne.n	801e674 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801e662:	4b06      	ldr	r3, [pc, #24]	; (801e67c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801e664:	880c      	ldrh	r4, [r1, #0]
 801e666:	881b      	ldrh	r3, [r3, #0]
 801e668:	f9b0 2000 	ldrsh.w	r2, [r0]
 801e66c:	3b01      	subs	r3, #1
 801e66e:	1b1b      	subs	r3, r3, r4
 801e670:	8003      	strh	r3, [r0, #0]
 801e672:	800a      	strh	r2, [r1, #0]
 801e674:	bd10      	pop	{r4, pc}
 801e676:	bf00      	nop
 801e678:	20009d30 	.word	0x20009d30
 801e67c:	20009d34 	.word	0x20009d34

0801e680 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801e680:	4b07      	ldr	r3, [pc, #28]	; (801e6a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801e682:	b510      	push	{r4, lr}
 801e684:	781b      	ldrb	r3, [r3, #0]
 801e686:	2b01      	cmp	r3, #1
 801e688:	d108      	bne.n	801e69c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801e68a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801e68e:	f9b0 4000 	ldrsh.w	r4, [r0]
 801e692:	8003      	strh	r3, [r0, #0]
 801e694:	8893      	ldrh	r3, [r2, #4]
 801e696:	3b01      	subs	r3, #1
 801e698:	1b1b      	subs	r3, r3, r4
 801e69a:	800b      	strh	r3, [r1, #0]
 801e69c:	bd10      	pop	{r4, pc}
 801e69e:	bf00      	nop
 801e6a0:	20009d30 	.word	0x20009d30

0801e6a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801e6a4:	4b0a      	ldr	r3, [pc, #40]	; (801e6d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x2c>)
 801e6a6:	b513      	push	{r0, r1, r4, lr}
 801e6a8:	f9b3 4000 	ldrsh.w	r4, [r3]
 801e6ac:	4b09      	ldr	r3, [pc, #36]	; (801e6d4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x30>)
 801e6ae:	f8ad 4004 	strh.w	r4, [sp, #4]
 801e6b2:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e6b6:	2300      	movs	r3, #0
 801e6b8:	f8ad 2006 	strh.w	r2, [sp, #6]
 801e6bc:	466a      	mov	r2, sp
 801e6be:	f8ad 3000 	strh.w	r3, [sp]
 801e6c2:	f8ad 3002 	strh.w	r3, [sp, #2]
 801e6c6:	f7ff ffdb 	bl	801e680 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801e6ca:	b002      	add	sp, #8
 801e6cc:	bd10      	pop	{r4, pc}
 801e6ce:	bf00      	nop
 801e6d0:	20009d2c 	.word	0x20009d2c
 801e6d4:	20009d2e 	.word	0x20009d2e

0801e6d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801e6d8:	4b0a      	ldr	r3, [pc, #40]	; (801e704 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801e6da:	460a      	mov	r2, r1
 801e6dc:	b510      	push	{r4, lr}
 801e6de:	781b      	ldrb	r3, [r3, #0]
 801e6e0:	2b01      	cmp	r3, #1
 801e6e2:	d10d      	bne.n	801e700 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801e6e4:	8881      	ldrh	r1, [r0, #4]
 801e6e6:	8803      	ldrh	r3, [r0, #0]
 801e6e8:	440b      	add	r3, r1
 801e6ea:	4601      	mov	r1, r0
 801e6ec:	3b01      	subs	r3, #1
 801e6ee:	f821 3b02 	strh.w	r3, [r1], #2
 801e6f2:	f7ff ffc5 	bl	801e680 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801e6f6:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801e6fa:	88c2      	ldrh	r2, [r0, #6]
 801e6fc:	80c3      	strh	r3, [r0, #6]
 801e6fe:	8082      	strh	r2, [r0, #4]
 801e700:	bd10      	pop	{r4, pc}
 801e702:	bf00      	nop
 801e704:	20009d30 	.word	0x20009d30

0801e708 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801e708:	4b0a      	ldr	r3, [pc, #40]	; (801e734 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801e70a:	b507      	push	{r0, r1, r2, lr}
 801e70c:	f9b3 1000 	ldrsh.w	r1, [r3]
 801e710:	4b09      	ldr	r3, [pc, #36]	; (801e738 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x30>)
 801e712:	f8ad 1004 	strh.w	r1, [sp, #4]
 801e716:	4669      	mov	r1, sp
 801e718:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e71c:	2300      	movs	r3, #0
 801e71e:	f8ad 2006 	strh.w	r2, [sp, #6]
 801e722:	f8ad 3000 	strh.w	r3, [sp]
 801e726:	f8ad 3002 	strh.w	r3, [sp, #2]
 801e72a:	f7ff ffd5 	bl	801e6d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e72e:	b003      	add	sp, #12
 801e730:	f85d fb04 	ldr.w	pc, [sp], #4
 801e734:	20009d2c 	.word	0x20009d2c
 801e738:	20009d2e 	.word	0x20009d2e

0801e73c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801e73c:	4b03      	ldr	r3, [pc, #12]	; (801e74c <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801e73e:	6818      	ldr	r0, [r3, #0]
 801e740:	b110      	cbz	r0, 801e748 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801e742:	6803      	ldr	r3, [r0, #0]
 801e744:	699b      	ldr	r3, [r3, #24]
 801e746:	4718      	bx	r3
 801e748:	4770      	bx	lr
 801e74a:	bf00      	nop
 801e74c:	20009d8c 	.word	0x20009d8c

0801e750 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801e750:	4770      	bx	lr
	...

0801e754 <_ZN8touchgfx11Application4drawEv>:
 801e754:	4b0b      	ldr	r3, [pc, #44]	; (801e784 <_ZN8touchgfx11Application4drawEv+0x30>)
 801e756:	b507      	push	{r0, r1, r2, lr}
 801e758:	f9b3 1000 	ldrsh.w	r1, [r3]
 801e75c:	4b0a      	ldr	r3, [pc, #40]	; (801e788 <_ZN8touchgfx11Application4drawEv+0x34>)
 801e75e:	f8ad 1004 	strh.w	r1, [sp, #4]
 801e762:	4669      	mov	r1, sp
 801e764:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e768:	2300      	movs	r3, #0
 801e76a:	f8ad 3000 	strh.w	r3, [sp]
 801e76e:	f8ad 3002 	strh.w	r3, [sp, #2]
 801e772:	6803      	ldr	r3, [r0, #0]
 801e774:	f8ad 2006 	strh.w	r2, [sp, #6]
 801e778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e77a:	4798      	blx	r3
 801e77c:	b003      	add	sp, #12
 801e77e:	f85d fb04 	ldr.w	pc, [sp], #4
 801e782:	bf00      	nop
 801e784:	20009d2c 	.word	0x20009d2c
 801e788:	20009d2e 	.word	0x20009d2e

0801e78c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801e78c:	4b03      	ldr	r3, [pc, #12]	; (801e79c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801e78e:	6818      	ldr	r0, [r3, #0]
 801e790:	b110      	cbz	r0, 801e798 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801e792:	6803      	ldr	r3, [r0, #0]
 801e794:	69db      	ldr	r3, [r3, #28]
 801e796:	4718      	bx	r3
 801e798:	4770      	bx	lr
 801e79a:	bf00      	nop
 801e79c:	20009d8c 	.word	0x20009d8c

0801e7a0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801e7a0:	4b03      	ldr	r3, [pc, #12]	; (801e7b0 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801e7a2:	6818      	ldr	r0, [r3, #0]
 801e7a4:	b110      	cbz	r0, 801e7ac <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801e7a6:	6803      	ldr	r3, [r0, #0]
 801e7a8:	6a1b      	ldr	r3, [r3, #32]
 801e7aa:	4718      	bx	r3
 801e7ac:	4770      	bx	lr
 801e7ae:	bf00      	nop
 801e7b0:	20009d8c 	.word	0x20009d8c

0801e7b4 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801e7b4:	4b03      	ldr	r3, [pc, #12]	; (801e7c4 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801e7b6:	6818      	ldr	r0, [r3, #0]
 801e7b8:	b110      	cbz	r0, 801e7c0 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801e7ba:	6803      	ldr	r3, [r0, #0]
 801e7bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e7be:	4718      	bx	r3
 801e7c0:	4770      	bx	lr
 801e7c2:	bf00      	nop
 801e7c4:	20009d8c 	.word	0x20009d8c

0801e7c8 <_ZN8touchgfx11Application15handleTickEventEv>:
 801e7c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e7cc:	4d3d      	ldr	r5, [pc, #244]	; (801e8c4 <_ZN8touchgfx11Application15handleTickEventEv+0xfc>)
 801e7ce:	4604      	mov	r4, r0
 801e7d0:	6828      	ldr	r0, [r5, #0]
 801e7d2:	2800      	cmp	r0, #0
 801e7d4:	d047      	beq.n	801e866 <_ZN8touchgfx11Application15handleTickEventEv+0x9e>
 801e7d6:	7a03      	ldrb	r3, [r0, #8]
 801e7d8:	2b00      	cmp	r3, #0
 801e7da:	d144      	bne.n	801e866 <_ZN8touchgfx11Application15handleTickEventEv+0x9e>
 801e7dc:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801e7e0:	6803      	ldr	r3, [r0, #0]
 801e7e2:	689b      	ldr	r3, [r3, #8]
 801e7e4:	e03c      	b.n	801e860 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 801e7e6:	3b01      	subs	r3, #1
 801e7e8:	f04f 0c00 	mov.w	ip, #0
 801e7ec:	1c5a      	adds	r2, r3, #1
 801e7ee:	d031      	beq.n	801e854 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801e7f0:	18e2      	adds	r2, r4, r3
 801e7f2:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
 801e7f6:	bb59      	cbnz	r1, 801e850 <_ZN8touchgfx11Application15handleTickEventEv+0x88>
 801e7f8:	b298      	uxth	r0, r3
 801e7fa:	1d25      	adds	r5, r4, #4
 801e7fc:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 801e800:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801e804:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
 801e808:	428a      	cmp	r2, r1
 801e80a:	dd14      	ble.n	801e836 <_ZN8touchgfx11Application15handleTickEventEv+0x6e>
 801e80c:	682e      	ldr	r6, [r5, #0]
 801e80e:	45b0      	cmp	r8, r6
 801e810:	d106      	bne.n	801e820 <_ZN8touchgfx11Application15handleTickEventEv+0x58>
 801e812:	46ae      	mov	lr, r5
 801e814:	460e      	mov	r6, r1
 801e816:	2e1e      	cmp	r6, #30
 801e818:	dd05      	ble.n	801e826 <_ZN8touchgfx11Application15handleTickEventEv+0x5e>
 801e81a:	3a01      	subs	r2, #1
 801e81c:	f8a4 2084 	strh.w	r2, [r4, #132]	; 0x84
 801e820:	3101      	adds	r1, #1
 801e822:	3504      	adds	r5, #4
 801e824:	e7ee      	b.n	801e804 <_ZN8touchgfx11Application15handleTickEventEv+0x3c>
 801e826:	3601      	adds	r6, #1
 801e828:	f8de 7004 	ldr.w	r7, [lr, #4]
 801e82c:	42b2      	cmp	r2, r6
 801e82e:	f84e 7b04 	str.w	r7, [lr], #4
 801e832:	dcf0      	bgt.n	801e816 <_ZN8touchgfx11Application15handleTickEventEv+0x4e>
 801e834:	e7f1      	b.n	801e81a <_ZN8touchgfx11Application15handleTickEventEv+0x52>
 801e836:	4290      	cmp	r0, r2
 801e838:	da07      	bge.n	801e84a <_ZN8touchgfx11Application15handleTickEventEv+0x82>
 801e83a:	1821      	adds	r1, r4, r0
 801e83c:	3001      	adds	r0, #1
 801e83e:	f891 5089 	ldrb.w	r5, [r1, #137]	; 0x89
 801e842:	b280      	uxth	r0, r0
 801e844:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801e848:	e7f5      	b.n	801e836 <_ZN8touchgfx11Application15handleTickEventEv+0x6e>
 801e84a:	4422      	add	r2, r4
 801e84c:	f882 c088 	strb.w	ip, [r2, #136]	; 0x88
 801e850:	3b01      	subs	r3, #1
 801e852:	e7cb      	b.n	801e7ec <_ZN8touchgfx11Application15handleTickEventEv+0x24>
 801e854:	4b1c      	ldr	r3, [pc, #112]	; (801e8c8 <_ZN8touchgfx11Application15handleTickEventEv+0x100>)
 801e856:	6818      	ldr	r0, [r3, #0]
 801e858:	2800      	cmp	r0, #0
 801e85a:	d031      	beq.n	801e8c0 <_ZN8touchgfx11Application15handleTickEventEv+0xf8>
 801e85c:	6803      	ldr	r3, [r0, #0]
 801e85e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e860:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e864:	4718      	bx	r3
 801e866:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 801e86a:	b913      	cbnz	r3, 801e872 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801e86c:	b108      	cbz	r0, 801e872 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801e86e:	7a03      	ldrb	r3, [r0, #8]
 801e870:	b9a3      	cbnz	r3, 801e89c <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 801e872:	eba4 0584 	sub.w	r5, r4, r4, lsl #2
 801e876:	f104 0788 	add.w	r7, r4, #136	; 0x88
 801e87a:	2600      	movs	r6, #0
 801e87c:	f5a5 7508 	sub.w	r5, r5, #544	; 0x220
 801e880:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 801e884:	429e      	cmp	r6, r3
 801e886:	daae      	bge.n	801e7e6 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801e888:	f817 3b01 	ldrb.w	r3, [r7], #1
 801e88c:	b123      	cbz	r3, 801e898 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 801e88e:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
 801e892:	6803      	ldr	r3, [r0, #0]
 801e894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e896:	4798      	blx	r3
 801e898:	3601      	adds	r6, #1
 801e89a:	e7f1      	b.n	801e880 <_ZN8touchgfx11Application15handleTickEventEv+0xb8>
 801e89c:	4b0a      	ldr	r3, [pc, #40]	; (801e8c8 <_ZN8touchgfx11Application15handleTickEventEv+0x100>)
 801e89e:	6818      	ldr	r0, [r3, #0]
 801e8a0:	b110      	cbz	r0, 801e8a8 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801e8a2:	6803      	ldr	r3, [r0, #0]
 801e8a4:	691b      	ldr	r3, [r3, #16]
 801e8a6:	4798      	blx	r3
 801e8a8:	6828      	ldr	r0, [r5, #0]
 801e8aa:	6803      	ldr	r3, [r0, #0]
 801e8ac:	68db      	ldr	r3, [r3, #12]
 801e8ae:	4798      	blx	r3
 801e8b0:	6823      	ldr	r3, [r4, #0]
 801e8b2:	4620      	mov	r0, r4
 801e8b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e8b6:	4798      	blx	r3
 801e8b8:	2301      	movs	r3, #1
 801e8ba:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801e8be:	e7d8      	b.n	801e872 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801e8c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e8c4:	20009d90 	.word	0x20009d90
 801e8c8:	20009d8c 	.word	0x20009d8c

0801e8cc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801e8cc:	b570      	push	{r4, r5, r6, lr}
 801e8ce:	4606      	mov	r6, r0
 801e8d0:	460c      	mov	r4, r1
 801e8d2:	b929      	cbnz	r1, 801e8e0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801e8d4:	4b0c      	ldr	r3, [pc, #48]	; (801e908 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801e8d6:	2161      	movs	r1, #97	; 0x61
 801e8d8:	4a0c      	ldr	r2, [pc, #48]	; (801e90c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801e8da:	480d      	ldr	r0, [pc, #52]	; (801e910 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801e8dc:	f003 fe84 	bl	80225e8 <__assert_func>
 801e8e0:	2300      	movs	r3, #0
 801e8e2:	4d0c      	ldr	r5, [pc, #48]	; (801e914 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801e8e4:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801e8e8:	6828      	ldr	r0, [r5, #0]
 801e8ea:	b110      	cbz	r0, 801e8f2 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801e8ec:	6803      	ldr	r3, [r0, #0]
 801e8ee:	695b      	ldr	r3, [r3, #20]
 801e8f0:	4798      	blx	r3
 801e8f2:	602c      	str	r4, [r5, #0]
 801e8f4:	4620      	mov	r0, r4
 801e8f6:	6823      	ldr	r3, [r4, #0]
 801e8f8:	68db      	ldr	r3, [r3, #12]
 801e8fa:	4798      	blx	r3
 801e8fc:	6833      	ldr	r3, [r6, #0]
 801e8fe:	4630      	mov	r0, r6
 801e900:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e902:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e906:	4718      	bx	r3
 801e908:	08025f56 	.word	0x08025f56
 801e90c:	08026020 	.word	0x08026020
 801e910:	08025f60 	.word	0x08025f60
 801e914:	20009d8c 	.word	0x20009d8c

0801e918 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801e918:	b570      	push	{r4, r5, r6, lr}
 801e91a:	f9b1 4000 	ldrsh.w	r4, [r1]
 801e91e:	f9b0 5000 	ldrsh.w	r5, [r0]
 801e922:	42ac      	cmp	r4, r5
 801e924:	db18      	blt.n	801e958 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801e926:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801e92a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801e92e:	429a      	cmp	r2, r3
 801e930:	db12      	blt.n	801e958 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801e932:	8886      	ldrh	r6, [r0, #4]
 801e934:	4435      	add	r5, r6
 801e936:	888e      	ldrh	r6, [r1, #4]
 801e938:	4434      	add	r4, r6
 801e93a:	b22d      	sxth	r5, r5
 801e93c:	b224      	sxth	r4, r4
 801e93e:	42a5      	cmp	r5, r4
 801e940:	db0a      	blt.n	801e958 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801e942:	88c0      	ldrh	r0, [r0, #6]
 801e944:	4418      	add	r0, r3
 801e946:	88cb      	ldrh	r3, [r1, #6]
 801e948:	441a      	add	r2, r3
 801e94a:	b200      	sxth	r0, r0
 801e94c:	b212      	sxth	r2, r2
 801e94e:	4290      	cmp	r0, r2
 801e950:	bfb4      	ite	lt
 801e952:	2000      	movlt	r0, #0
 801e954:	2001      	movge	r0, #1
 801e956:	bd70      	pop	{r4, r5, r6, pc}
 801e958:	2000      	movs	r0, #0
 801e95a:	bd70      	pop	{r4, r5, r6, pc}

0801e95c <_ZN8touchgfx11Application11getInstanceEv>:
 801e95c:	4b01      	ldr	r3, [pc, #4]	; (801e964 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801e95e:	6818      	ldr	r0, [r3, #0]
 801e960:	4770      	bx	lr
 801e962:	bf00      	nop
 801e964:	20009d94 	.word	0x20009d94

0801e968 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801e968:	2300      	movs	r3, #0
 801e96a:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801e96e:	30a8      	adds	r0, #168	; 0xa8
 801e970:	f820 3c24 	strh.w	r3, [r0, #-36]
 801e974:	f802 3b01 	strb.w	r3, [r2], #1
 801e978:	4282      	cmp	r2, r0
 801e97a:	d1fb      	bne.n	801e974 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801e97c:	4770      	bx	lr

0801e97e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801e97e:	4603      	mov	r3, r0
 801e980:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801e984:	2200      	movs	r2, #0
 801e986:	801a      	strh	r2, [r3, #0]
 801e988:	3308      	adds	r3, #8
 801e98a:	f823 2c06 	strh.w	r2, [r3, #-6]
 801e98e:	f823 2c04 	strh.w	r2, [r3, #-4]
 801e992:	f823 2c02 	strh.w	r2, [r3, #-2]
 801e996:	428b      	cmp	r3, r1
 801e998:	d1f5      	bne.n	801e986 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801e99a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801e99e:	4770      	bx	lr

0801e9a0 <_ZN8touchgfx11ApplicationC1Ev>:
 801e9a0:	b570      	push	{r4, r5, r6, lr}
 801e9a2:	4b16      	ldr	r3, [pc, #88]	; (801e9fc <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 801e9a4:	2500      	movs	r5, #0
 801e9a6:	4604      	mov	r4, r0
 801e9a8:	30a8      	adds	r0, #168	; 0xa8
 801e9aa:	f840 3ca8 	str.w	r3, [r0, #-168]
 801e9ae:	f820 5c24 	strh.w	r5, [r0, #-36]
 801e9b2:	f7ff ffe4 	bl	801e97e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801e9b6:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801e9ba:	f7ff ffe0 	bl	801e97e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801e9be:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 801e9c2:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 801e9c6:	490e      	ldr	r1, [pc, #56]	; (801ea00 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 801e9c8:	480e      	ldr	r0, [pc, #56]	; (801ea04 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 801e9ca:	f003 fcfd 	bl	80223c8 <CRC_Lock>
 801e9ce:	4e0e      	ldr	r6, [pc, #56]	; (801ea08 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801e9d0:	4b0e      	ldr	r3, [pc, #56]	; (801ea0c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801e9d2:	b158      	cbz	r0, 801e9ec <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 801e9d4:	801d      	strh	r5, [r3, #0]
 801e9d6:	2300      	movs	r3, #0
 801e9d8:	4a0d      	ldr	r2, [pc, #52]	; (801ea10 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801e9da:	4620      	mov	r0, r4
 801e9dc:	6013      	str	r3, [r2, #0]
 801e9de:	4a0d      	ldr	r2, [pc, #52]	; (801ea14 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801e9e0:	6033      	str	r3, [r6, #0]
 801e9e2:	6013      	str	r3, [r2, #0]
 801e9e4:	f7ff ffc0 	bl	801e968 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801e9e8:	4620      	mov	r0, r4
 801e9ea:	bd70      	pop	{r4, r5, r6, pc}
 801e9ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801e9f0:	2002      	movs	r0, #2
 801e9f2:	801a      	strh	r2, [r3, #0]
 801e9f4:	6030      	str	r0, [r6, #0]
 801e9f6:	f000 fe7d 	bl	801f6f4 <_ZN8touchgfx6Screen4drawEv>
 801e9fa:	e7ec      	b.n	801e9d6 <_ZN8touchgfx11ApplicationC1Ev+0x36>
 801e9fc:	08025fec 	.word	0x08025fec
 801ea00:	b5e8b5cd 	.word	0xb5e8b5cd
 801ea04:	f407a5c2 	.word	0xf407a5c2
 801ea08:	20009d8c 	.word	0x20009d8c
 801ea0c:	200000a0 	.word	0x200000a0
 801ea10:	20009d94 	.word	0x20009d94
 801ea14:	20009d90 	.word	0x20009d90

0801ea18 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801ea18:	2300      	movs	r3, #0
 801ea1a:	8003      	strh	r3, [r0, #0]
 801ea1c:	8043      	strh	r3, [r0, #2]
 801ea1e:	8083      	strh	r3, [r0, #4]
 801ea20:	80c3      	strh	r3, [r0, #6]
 801ea22:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801ea26:	429a      	cmp	r2, r3
 801ea28:	b530      	push	{r4, r5, lr}
 801ea2a:	da12      	bge.n	801ea52 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801ea2c:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801ea30:	3b01      	subs	r3, #1
 801ea32:	6825      	ldr	r5, [r4, #0]
 801ea34:	b29b      	uxth	r3, r3
 801ea36:	6005      	str	r5, [r0, #0]
 801ea38:	429a      	cmp	r2, r3
 801ea3a:	6865      	ldr	r5, [r4, #4]
 801ea3c:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801ea40:	6045      	str	r5, [r0, #4]
 801ea42:	da06      	bge.n	801ea52 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801ea44:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801ea48:	681d      	ldr	r5, [r3, #0]
 801ea4a:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801ea4e:	685d      	ldr	r5, [r3, #4]
 801ea50:	6065      	str	r5, [r4, #4]
 801ea52:	bd30      	pop	{r4, r5, pc}

0801ea54 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801ea54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ea56:	e88d 0006 	stmia.w	sp, {r1, r2}
 801ea5a:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801ea5e:	4604      	mov	r4, r0
 801ea60:	466b      	mov	r3, sp
 801ea62:	2a07      	cmp	r2, #7
 801ea64:	dd06      	ble.n	801ea74 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801ea66:	4b09      	ldr	r3, [pc, #36]	; (801ea8c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801ea68:	f240 11f9 	movw	r1, #505	; 0x1f9
 801ea6c:	4a08      	ldr	r2, [pc, #32]	; (801ea90 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801ea6e:	4809      	ldr	r0, [pc, #36]	; (801ea94 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801ea70:	f003 fdba 	bl	80225e8 <__assert_func>
 801ea74:	1c51      	adds	r1, r2, #1
 801ea76:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801ea7a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801ea7e:	cb03      	ldmia	r3!, {r0, r1}
 801ea80:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801ea84:	6069      	str	r1, [r5, #4]
 801ea86:	b003      	add	sp, #12
 801ea88:	bd30      	pop	{r4, r5, pc}
 801ea8a:	bf00      	nop
 801ea8c:	08025f8a 	.word	0x08025f8a
 801ea90:	08026064 	.word	0x08026064
 801ea94:	08025fb9 	.word	0x08025fb9

0801ea98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801ea98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801ea9c:	b089      	sub	sp, #36	; 0x24
 801ea9e:	4606      	mov	r6, r0
 801eaa0:	4668      	mov	r0, sp
 801eaa2:	466c      	mov	r4, sp
 801eaa4:	e88d 0006 	stmia.w	sp, {r1, r2}
 801eaa8:	f7ef fe54 	bl	800e754 <_ZNK8touchgfx4Rect7isEmptyEv>
 801eaac:	bbb0      	cbnz	r0, 801eb1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801eaae:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801eab2:	b1fd      	cbz	r5, 801eaf4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801eab4:	3d01      	subs	r5, #1
 801eab6:	af04      	add	r7, sp, #16
 801eab8:	f04f 090a 	mov.w	r9, #10
 801eabc:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801eac0:	ab02      	add	r3, sp, #8
 801eac2:	fa1f f885 	uxth.w	r8, r5
 801eac6:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801eaca:	6851      	ldr	r1, [r2, #4]
 801eacc:	c303      	stmia	r3!, {r0, r1}
 801eace:	4621      	mov	r1, r4
 801ead0:	a802      	add	r0, sp, #8
 801ead2:	f7ff ff21 	bl	801e918 <_ZNK8touchgfx4Rect8includesERKS0_>
 801ead6:	bb08      	cbnz	r0, 801eb1c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801ead8:	a902      	add	r1, sp, #8
 801eada:	4620      	mov	r0, r4
 801eadc:	f7ff ff1c 	bl	801e918 <_ZNK8touchgfx4Rect8includesERKS0_>
 801eae0:	b1f8      	cbz	r0, 801eb22 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801eae2:	4642      	mov	r2, r8
 801eae4:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801eae8:	a806      	add	r0, sp, #24
 801eaea:	f7ff ff95 	bl	801ea18 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801eaee:	f115 35ff 	adds.w	r5, r5, #4294967295
 801eaf2:	d2e3      	bcs.n	801eabc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801eaf4:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801eaf8:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801eafc:	2b08      	cmp	r3, #8
 801eafe:	d108      	bne.n	801eb12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801eb00:	4629      	mov	r1, r5
 801eb02:	a806      	add	r0, sp, #24
 801eb04:	2207      	movs	r2, #7
 801eb06:	f7ff ff87 	bl	801ea18 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801eb0a:	a906      	add	r1, sp, #24
 801eb0c:	4620      	mov	r0, r4
 801eb0e:	f7ef fd95 	bl	800e63c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801eb12:	4628      	mov	r0, r5
 801eb14:	e894 0006 	ldmia.w	r4, {r1, r2}
 801eb18:	f7ff ff9c 	bl	801ea54 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801eb1c:	b009      	add	sp, #36	; 0x24
 801eb1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801eb22:	4621      	mov	r1, r4
 801eb24:	a802      	add	r0, sp, #8
 801eb26:	f7ef fcc6 	bl	800e4b6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801eb2a:	b150      	cbz	r0, 801eb42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801eb2c:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801eb30:	a806      	add	r0, sp, #24
 801eb32:	4642      	mov	r2, r8
 801eb34:	f7ff ff70 	bl	801ea18 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801eb38:	a902      	add	r1, sp, #8
 801eb3a:	4620      	mov	r0, r4
 801eb3c:	f7ef fd7e 	bl	800e63c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801eb40:	e7d5      	b.n	801eaee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801eb42:	e894 0003 	ldmia.w	r4, {r0, r1}
 801eb46:	e887 0003 	stmia.w	r7, {r0, r1}
 801eb4a:	a902      	add	r1, sp, #8
 801eb4c:	4638      	mov	r0, r7
 801eb4e:	f7ef fd75 	bl	800e63c <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801eb52:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801eb56:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801eb5a:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801eb5e:	fb13 f302 	smulbb	r3, r3, r2
 801eb62:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801eb66:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801eb6a:	fb11 f102 	smulbb	r1, r1, r2
 801eb6e:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801eb72:	fb09 f303 	mul.w	r3, r9, r3
 801eb76:	fb12 1100 	smlabb	r1, r2, r0, r1
 801eb7a:	220b      	movs	r2, #11
 801eb7c:	434a      	muls	r2, r1
 801eb7e:	4293      	cmp	r3, r2
 801eb80:	dab5      	bge.n	801eaee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801eb82:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801eb86:	a806      	add	r0, sp, #24
 801eb88:	4642      	mov	r2, r8
 801eb8a:	f7ff ff45 	bl	801ea18 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801eb8e:	e897 0003 	ldmia.w	r7, {r0, r1}
 801eb92:	e884 0003 	stmia.w	r4, {r0, r1}
 801eb96:	e7aa      	b.n	801eaee <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801eb98 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801eb98:	4b1b      	ldr	r3, [pc, #108]	; (801ec08 <_ZN8touchgfx11Application4drawERNS_4RectE+0x70>)
 801eb9a:	b530      	push	{r4, r5, lr}
 801eb9c:	460c      	mov	r4, r1
 801eb9e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801eba2:	4b1a      	ldr	r3, [pc, #104]	; (801ec0c <_ZN8touchgfx11Application4drawERNS_4RectE+0x74>)
 801eba4:	b085      	sub	sp, #20
 801eba6:	4605      	mov	r5, r0
 801eba8:	6820      	ldr	r0, [r4, #0]
 801ebaa:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ebae:	2300      	movs	r3, #0
 801ebb0:	f8ad 1004 	strh.w	r1, [sp, #4]
 801ebb4:	f8ad 3000 	strh.w	r3, [sp]
 801ebb8:	6861      	ldr	r1, [r4, #4]
 801ebba:	f8ad 3002 	strh.w	r3, [sp, #2]
 801ebbe:	ab02      	add	r3, sp, #8
 801ebc0:	f8ad 2006 	strh.w	r2, [sp, #6]
 801ebc4:	c303      	stmia	r3!, {r0, r1}
 801ebc6:	4669      	mov	r1, sp
 801ebc8:	a802      	add	r0, sp, #8
 801ebca:	f7ef fcbb 	bl	800e544 <_ZN8touchgfx4RectaNERKS0_>
 801ebce:	ab02      	add	r3, sp, #8
 801ebd0:	cb03      	ldmia	r3!, {r0, r1}
 801ebd2:	4b0f      	ldr	r3, [pc, #60]	; (801ec10 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801ebd4:	6020      	str	r0, [r4, #0]
 801ebd6:	6818      	ldr	r0, [r3, #0]
 801ebd8:	6061      	str	r1, [r4, #4]
 801ebda:	b138      	cbz	r0, 801ebec <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>
 801ebdc:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 801ebe0:	b133      	cbz	r3, 801ebf0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x58>
 801ebe2:	6821      	ldr	r1, [r4, #0]
 801ebe4:	4628      	mov	r0, r5
 801ebe6:	6862      	ldr	r2, [r4, #4]
 801ebe8:	f7ff ff56 	bl	801ea98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ebec:	b005      	add	sp, #20
 801ebee:	bd30      	pop	{r4, r5, pc}
 801ebf0:	6803      	ldr	r3, [r0, #0]
 801ebf2:	4621      	mov	r1, r4
 801ebf4:	689b      	ldr	r3, [r3, #8]
 801ebf6:	4798      	blx	r3
 801ebf8:	4b06      	ldr	r3, [pc, #24]	; (801ec14 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801ebfa:	4621      	mov	r1, r4
 801ebfc:	6818      	ldr	r0, [r3, #0]
 801ebfe:	6803      	ldr	r3, [r0, #0]
 801ec00:	695b      	ldr	r3, [r3, #20]
 801ec02:	4798      	blx	r3
 801ec04:	e7f2      	b.n	801ebec <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>
 801ec06:	bf00      	nop
 801ec08:	20009d2c 	.word	0x20009d2c
 801ec0c:	20009d2e 	.word	0x20009d2e
 801ec10:	20009d8c 	.word	0x20009d8c
 801ec14:	20009d38 	.word	0x20009d38

0801ec18 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801ec18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ec1c:	4604      	mov	r4, r0
 801ec1e:	b096      	sub	sp, #88	; 0x58
 801ec20:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 801ec24:	b129      	cbz	r1, 801ec32 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801ec26:	2300      	movs	r3, #0
 801ec28:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801ec2c:	b016      	add	sp, #88	; 0x58
 801ec2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ec32:	f8b0 30e8 	ldrh.w	r3, [r0, #232]	; 0xe8
 801ec36:	2b00      	cmp	r3, #0
 801ec38:	d0f8      	beq.n	801ec2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801ec3a:	4f6e      	ldr	r7, [pc, #440]	; (801edf4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1dc>)
 801ec3c:	a805      	add	r0, sp, #20
 801ec3e:	f7ff fe9e 	bl	801e97e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ec42:	883d      	ldrh	r5, [r7, #0]
 801ec44:	462e      	mov	r6, r5
 801ec46:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ec4a:	429e      	cmp	r6, r3
 801ec4c:	db10      	blt.n	801ec70 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x58>
 801ec4e:	462e      	mov	r6, r5
 801ec50:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801ec54:	429e      	cmp	r6, r3
 801ec56:	da17      	bge.n	801ec88 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801ec58:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801ec5c:	3601      	adds	r6, #1
 801ec5e:	4620      	mov	r0, r4
 801ec60:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801ec64:	b2b6      	uxth	r6, r6
 801ec66:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801ec6a:	f7ff ff15 	bl	801ea98 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ec6e:	e7ef      	b.n	801ec50 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x38>
 801ec70:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801ec74:	3601      	adds	r6, #1
 801ec76:	a805      	add	r0, sp, #20
 801ec78:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801ec7c:	b2b6      	uxth	r6, r6
 801ec7e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801ec82:	f7ff fee7 	bl	801ea54 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801ec86:	e7de      	b.n	801ec46 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e>
 801ec88:	4e5b      	ldr	r6, [pc, #364]	; (801edf8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e0>)
 801ec8a:	6833      	ldr	r3, [r6, #0]
 801ec8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801ec90:	2b01      	cmp	r3, #1
 801ec92:	f040 8094 	bne.w	801edbe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a6>
 801ec96:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801ec9a:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801ec9e:	f04f 0900 	mov.w	r9, #0
 801eca2:	33aa      	adds	r3, #170	; 0xaa
 801eca4:	42a8      	cmp	r0, r5
 801eca6:	f103 0308 	add.w	r3, r3, #8
 801ecaa:	dd0a      	ble.n	801ecc2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xaa>
 801ecac:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801ecb0:	3501      	adds	r5, #1
 801ecb2:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801ecb6:	440a      	add	r2, r1
 801ecb8:	b212      	sxth	r2, r2
 801ecba:	4591      	cmp	r9, r2
 801ecbc:	bfb8      	it	lt
 801ecbe:	4691      	movlt	r9, r2
 801ecc0:	e7f0      	b.n	801eca4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x8c>
 801ecc2:	4b4e      	ldr	r3, [pc, #312]	; (801edfc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e4>)
 801ecc4:	f8df 813c 	ldr.w	r8, [pc, #316]	; 801ee04 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ec>
 801ecc8:	881d      	ldrh	r5, [r3, #0]
 801ecca:	2300      	movs	r3, #0
 801eccc:	08ed      	lsrs	r5, r5, #3
 801ecce:	f8ad 3004 	strh.w	r3, [sp, #4]
 801ecd2:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ecd6:	2d01      	cmp	r5, #1
 801ecd8:	f8ad 3008 	strh.w	r3, [sp, #8]
 801ecdc:	f8ad 300a 	strh.w	r3, [sp, #10]
 801ece0:	bfb8      	it	lt
 801ece2:	2501      	movlt	r5, #1
 801ece4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801ece8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801ecec:	6830      	ldr	r0, [r6, #0]
 801ecee:	4413      	add	r3, r2
 801ecf0:	b21b      	sxth	r3, r3
 801ecf2:	4599      	cmp	r9, r3
 801ecf4:	6803      	ldr	r3, [r0, #0]
 801ecf6:	dd45      	ble.n	801ed84 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x16c>
 801ecf8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801ecfc:	4798      	blx	r3
 801ecfe:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801ed02:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801ed06:	4413      	add	r3, r2
 801ed08:	b21b      	sxth	r3, r3
 801ed0a:	18ea      	adds	r2, r5, r3
 801ed0c:	4290      	cmp	r0, r2
 801ed0e:	da6d      	bge.n	801edec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d4>
 801ed10:	4581      	cmp	r9, r0
 801ed12:	dd6b      	ble.n	801edec <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d4>
 801ed14:	4298      	cmp	r0, r3
 801ed16:	da01      	bge.n	801ed1c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x104>
 801ed18:	2b00      	cmp	r3, #0
 801ed1a:	dc69      	bgt.n	801edf0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d8>
 801ed1c:	6830      	ldr	r0, [r6, #0]
 801ed1e:	2101      	movs	r1, #1
 801ed20:	6803      	ldr	r3, [r0, #0]
 801ed22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ed24:	4798      	blx	r3
 801ed26:	e7dd      	b.n	801ece4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xcc>
 801ed28:	4548      	cmp	r0, r9
 801ed2a:	bfa8      	it	ge
 801ed2c:	4648      	movge	r0, r9
 801ed2e:	f9b8 2000 	ldrsh.w	r2, [r8]
 801ed32:	2100      	movs	r1, #0
 801ed34:	1ac0      	subs	r0, r0, r3
 801ed36:	f8b7 a000 	ldrh.w	sl, [r7]
 801ed3a:	f8ad 1004 	strh.w	r1, [sp, #4]
 801ed3e:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ed42:	f8ad 2008 	strh.w	r2, [sp, #8]
 801ed46:	f8ad 000a 	strh.w	r0, [sp, #10]
 801ed4a:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ed4e:	459a      	cmp	sl, r3
 801ed50:	dac8      	bge.n	801ece4 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xcc>
 801ed52:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801ed56:	ab03      	add	r3, sp, #12
 801ed58:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801ed5c:	6851      	ldr	r1, [r2, #4]
 801ed5e:	c303      	stmia	r3!, {r0, r1}
 801ed60:	a803      	add	r0, sp, #12
 801ed62:	a901      	add	r1, sp, #4
 801ed64:	f7ef fbee 	bl	800e544 <_ZN8touchgfx4RectaNERKS0_>
 801ed68:	a803      	add	r0, sp, #12
 801ed6a:	f7ef fcf3 	bl	800e754 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ed6e:	b920      	cbnz	r0, 801ed7a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x162>
 801ed70:	6823      	ldr	r3, [r4, #0]
 801ed72:	a903      	add	r1, sp, #12
 801ed74:	4620      	mov	r0, r4
 801ed76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ed78:	4798      	blx	r3
 801ed7a:	f10a 0a01 	add.w	sl, sl, #1
 801ed7e:	fa1f fa8a 	uxth.w	sl, sl
 801ed82:	e7e2      	b.n	801ed4a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 801ed84:	69db      	ldr	r3, [r3, #28]
 801ed86:	4798      	blx	r3
 801ed88:	4b1d      	ldr	r3, [pc, #116]	; (801ee00 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e8>)
 801ed8a:	781b      	ldrb	r3, [r3, #0]
 801ed8c:	2b00      	cmp	r3, #0
 801ed8e:	f43f af4d 	beq.w	801ec2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801ed92:	2300      	movs	r3, #0
 801ed94:	883d      	ldrh	r5, [r7, #0]
 801ed96:	34ea      	adds	r4, #234	; 0xea
 801ed98:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801ed9c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801eda0:	429d      	cmp	r5, r3
 801eda2:	f6bf af43 	bge.w	801ec2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801eda6:	ab16      	add	r3, sp, #88	; 0x58
 801eda8:	4620      	mov	r0, r4
 801edaa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801edae:	3501      	adds	r5, #1
 801edb0:	3b44      	subs	r3, #68	; 0x44
 801edb2:	b2ad      	uxth	r5, r5
 801edb4:	e893 0006 	ldmia.w	r3, {r1, r2}
 801edb8:	f7ff fe4c 	bl	801ea54 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801edbc:	e7ee      	b.n	801ed9c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x184>
 801edbe:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801edc2:	429d      	cmp	r5, r3
 801edc4:	dae0      	bge.n	801ed88 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801edc6:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801edca:	ab03      	add	r3, sp, #12
 801edcc:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801edd0:	6851      	ldr	r1, [r2, #4]
 801edd2:	c303      	stmia	r3!, {r0, r1}
 801edd4:	a803      	add	r0, sp, #12
 801edd6:	f7ef fcbd 	bl	800e754 <_ZNK8touchgfx4Rect7isEmptyEv>
 801edda:	b920      	cbnz	r0, 801ede6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 801eddc:	6823      	ldr	r3, [r4, #0]
 801edde:	a903      	add	r1, sp, #12
 801ede0:	4620      	mov	r0, r4
 801ede2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ede4:	4798      	blx	r3
 801ede6:	3501      	adds	r5, #1
 801ede8:	b2ad      	uxth	r5, r5
 801edea:	e7e8      	b.n	801edbe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a6>
 801edec:	4298      	cmp	r0, r3
 801edee:	da9b      	bge.n	801ed28 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x110>
 801edf0:	4648      	mov	r0, r9
 801edf2:	e79c      	b.n	801ed2e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x116>
 801edf4:	200000a0 	.word	0x200000a0
 801edf8:	20009d38 	.word	0x20009d38
 801edfc:	20009d2e 	.word	0x20009d2e
 801ee00:	20009d36 	.word	0x20009d36
 801ee04:	20009d2c 	.word	0x20009d2c

0801ee08 <_ZNK8touchgfx4Font8getGlyphEt>:
 801ee08:	b513      	push	{r0, r1, r4, lr}
 801ee0a:	2200      	movs	r2, #0
 801ee0c:	ab02      	add	r3, sp, #8
 801ee0e:	9201      	str	r2, [sp, #4]
 801ee10:	f803 2d05 	strb.w	r2, [r3, #-5]!
 801ee14:	6802      	ldr	r2, [r0, #0]
 801ee16:	6894      	ldr	r4, [r2, #8]
 801ee18:	aa01      	add	r2, sp, #4
 801ee1a:	47a0      	blx	r4
 801ee1c:	b002      	add	sp, #8
 801ee1e:	bd10      	pop	{r4, pc}

0801ee20 <_ZNK8touchgfx4Font15getFallbackCharEv>:
 801ee20:	8940      	ldrh	r0, [r0, #10]
 801ee22:	4770      	bx	lr

0801ee24 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
 801ee24:	8980      	ldrh	r0, [r0, #12]
 801ee26:	4770      	bx	lr

0801ee28 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801ee28:	8880      	ldrh	r0, [r0, #4]
 801ee2a:	4770      	bx	lr

0801ee2c <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801ee2c:	7983      	ldrb	r3, [r0, #6]
 801ee2e:	8880      	ldrh	r0, [r0, #4]
 801ee30:	4418      	add	r0, r3
 801ee32:	b280      	uxth	r0, r0
 801ee34:	4770      	bx	lr

0801ee36 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
 801ee36:	79c0      	ldrb	r0, [r0, #7]
 801ee38:	4770      	bx	lr

0801ee3a <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 801ee3a:	2000      	movs	r0, #0
 801ee3c:	4770      	bx	lr

0801ee3e <_ZNK8touchgfx4Font12getCharWidthEt>:
 801ee3e:	b508      	push	{r3, lr}
 801ee40:	6803      	ldr	r3, [r0, #0]
 801ee42:	68db      	ldr	r3, [r3, #12]
 801ee44:	4798      	blx	r3
 801ee46:	b140      	cbz	r0, 801ee5a <_ZNK8touchgfx4Font12getCharWidthEt+0x1c>
 801ee48:	f990 200d 	ldrsb.w	r2, [r0, #13]
 801ee4c:	7a83      	ldrb	r3, [r0, #10]
 801ee4e:	2a00      	cmp	r2, #0
 801ee50:	bfb4      	ite	lt
 801ee52:	f44f 7080 	movlt.w	r0, #256	; 0x100
 801ee56:	2000      	movge	r0, #0
 801ee58:	4318      	orrs	r0, r3
 801ee5a:	bd08      	pop	{r3, pc}

0801ee5c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 801ee5c:	b40e      	push	{r1, r2, r3}
 801ee5e:	b533      	push	{r0, r1, r4, r5, lr}
 801ee60:	ab05      	add	r3, sp, #20
 801ee62:	f853 2b04 	ldr.w	r2, [r3], #4
 801ee66:	9301      	str	r3, [sp, #4]
 801ee68:	4b0a      	ldr	r3, [pc, #40]	; (801ee94 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 801ee6a:	685c      	ldr	r4, [r3, #4]
 801ee6c:	f014 0f01 	tst.w	r4, #1
 801ee70:	ea4f 0464 	mov.w	r4, r4, asr #1
 801ee74:	bf1c      	itt	ne
 801ee76:	681b      	ldrne	r3, [r3, #0]
 801ee78:	5901      	ldrne	r1, [r0, r4]
 801ee7a:	4420      	add	r0, r4
 801ee7c:	bf0c      	ite	eq
 801ee7e:	681d      	ldreq	r5, [r3, #0]
 801ee80:	58cd      	ldrne	r5, [r1, r3]
 801ee82:	2100      	movs	r1, #0
 801ee84:	9b01      	ldr	r3, [sp, #4]
 801ee86:	47a8      	blx	r5
 801ee88:	b002      	add	sp, #8
 801ee8a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ee8e:	b003      	add	sp, #12
 801ee90:	4770      	bx	lr
 801ee92:	bf00      	nop
 801ee94:	20000074 	.word	0x20000074

0801ee98 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 801ee98:	b40c      	push	{r2, r3}
 801ee9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ee9c:	ab06      	add	r3, sp, #24
 801ee9e:	f853 2b04 	ldr.w	r2, [r3], #4
 801eea2:	9301      	str	r3, [sp, #4]
 801eea4:	4b09      	ldr	r3, [pc, #36]	; (801eecc <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801eea6:	685c      	ldr	r4, [r3, #4]
 801eea8:	f014 0f01 	tst.w	r4, #1
 801eeac:	ea4f 0464 	mov.w	r4, r4, asr #1
 801eeb0:	bf1c      	itt	ne
 801eeb2:	681b      	ldrne	r3, [r3, #0]
 801eeb4:	5905      	ldrne	r5, [r0, r4]
 801eeb6:	4420      	add	r0, r4
 801eeb8:	bf0c      	ite	eq
 801eeba:	681d      	ldreq	r5, [r3, #0]
 801eebc:	58ed      	ldrne	r5, [r5, r3]
 801eebe:	9b01      	ldr	r3, [sp, #4]
 801eec0:	47a8      	blx	r5
 801eec2:	b003      	add	sp, #12
 801eec4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801eec8:	b002      	add	sp, #8
 801eeca:	4770      	bx	lr
 801eecc:	20000074 	.word	0x20000074

0801eed0 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801eed0:	b40e      	push	{r1, r2, r3}
 801eed2:	b510      	push	{r4, lr}
 801eed4:	b089      	sub	sp, #36	; 0x24
 801eed6:	ab0b      	add	r3, sp, #44	; 0x2c
 801eed8:	a802      	add	r0, sp, #8
 801eeda:	f853 4b04 	ldr.w	r4, [r3], #4
 801eede:	9301      	str	r3, [sp, #4]
 801eee0:	f000 fe56 	bl	801fb90 <_ZN8touchgfx12TextProviderC1Ev>
 801eee4:	4621      	mov	r1, r4
 801eee6:	9a01      	ldr	r2, [sp, #4]
 801eee8:	a802      	add	r0, sp, #8
 801eeea:	2401      	movs	r4, #1
 801eeec:	f000 fe59 	bl	801fba2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801eef0:	a802      	add	r0, sp, #8
 801eef2:	f000 fdfd 	bl	801faf0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801eef6:	b138      	cbz	r0, 801ef08 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x38>
 801eef8:	280a      	cmp	r0, #10
 801eefa:	a802      	add	r0, sp, #8
 801eefc:	bf04      	itt	eq
 801eefe:	3401      	addeq	r4, #1
 801ef00:	b224      	sxtheq	r4, r4
 801ef02:	f000 fdf5 	bl	801faf0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ef06:	e7f6      	b.n	801eef6 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x26>
 801ef08:	b2a0      	uxth	r0, r4
 801ef0a:	b009      	add	sp, #36	; 0x24
 801ef0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ef10:	b003      	add	sp, #12
 801ef12:	4770      	bx	lr

0801ef14 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801ef14:	b40e      	push	{r1, r2, r3}
 801ef16:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ef18:	b088      	sub	sp, #32
 801ef1a:	4604      	mov	r4, r0
 801ef1c:	2600      	movs	r6, #0
 801ef1e:	ab0d      	add	r3, sp, #52	; 0x34
 801ef20:	a802      	add	r0, sp, #8
 801ef22:	f853 5b04 	ldr.w	r5, [r3], #4
 801ef26:	9301      	str	r3, [sp, #4]
 801ef28:	f000 fe32 	bl	801fb90 <_ZN8touchgfx12TextProviderC1Ev>
 801ef2c:	4629      	mov	r1, r5
 801ef2e:	9a01      	ldr	r2, [sp, #4]
 801ef30:	a802      	add	r0, sp, #8
 801ef32:	4d1f      	ldr	r5, [pc, #124]	; (801efb0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x9c>)
 801ef34:	f000 fe35 	bl	801fba2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801ef38:	2100      	movs	r1, #0
 801ef3a:	a802      	add	r0, sp, #8
 801ef3c:	f000 fde2 	bl	801fb04 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ef40:	b378      	cbz	r0, 801efa2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801ef42:	280a      	cmp	r0, #10
 801ef44:	d028      	beq.n	801ef98 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 801ef46:	6823      	ldr	r3, [r4, #0]
 801ef48:	4601      	mov	r1, r0
 801ef4a:	4620      	mov	r0, r4
 801ef4c:	68db      	ldr	r3, [r3, #12]
 801ef4e:	4798      	blx	r3
 801ef50:	b310      	cbz	r0, 801ef98 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 801ef52:	7b41      	ldrb	r1, [r0, #13]
 801ef54:	f890 e008 	ldrb.w	lr, [r0, #8]
 801ef58:	f011 0f40 	tst.w	r1, #64	; 0x40
 801ef5c:	88a3      	ldrh	r3, [r4, #4]
 801ef5e:	79c0      	ldrb	r0, [r0, #7]
 801ef60:	bf14      	ite	ne
 801ef62:	462f      	movne	r7, r5
 801ef64:	2700      	moveq	r7, #0
 801ef66:	f011 0f20 	tst.w	r1, #32
 801ef6a:	ea47 070e 	orr.w	r7, r7, lr
 801ef6e:	bf14      	ite	ne
 801ef70:	f44f 7280 	movne.w	r2, #256	; 0x100
 801ef74:	2200      	moveq	r2, #0
 801ef76:	f011 0f10 	tst.w	r1, #16
 801ef7a:	ea42 0207 	orr.w	r2, r2, r7
 801ef7e:	eba3 0302 	sub.w	r3, r3, r2
 801ef82:	bf14      	ite	ne
 801ef84:	f44f 7280 	movne.w	r2, #256	; 0x100
 801ef88:	2200      	moveq	r2, #0
 801ef8a:	4302      	orrs	r2, r0
 801ef8c:	fa12 f383 	uxtah	r3, r2, r3
 801ef90:	b29b      	uxth	r3, r3
 801ef92:	42b3      	cmp	r3, r6
 801ef94:	bfc8      	it	gt
 801ef96:	b21e      	sxthgt	r6, r3
 801ef98:	2100      	movs	r1, #0
 801ef9a:	a802      	add	r0, sp, #8
 801ef9c:	f000 fdb2 	bl	801fb04 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801efa0:	e7ce      	b.n	801ef40 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x2c>
 801efa2:	b2b0      	uxth	r0, r6
 801efa4:	b008      	add	sp, #32
 801efa6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801efaa:	b003      	add	sp, #12
 801efac:	4770      	bx	lr
 801efae:	bf00      	nop
 801efb0:	fffffe00 	.word	0xfffffe00

0801efb4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801efb4:	b40e      	push	{r1, r2, r3}
 801efb6:	b530      	push	{r4, r5, lr}
 801efb8:	b088      	sub	sp, #32
 801efba:	4605      	mov	r5, r0
 801efbc:	ab0b      	add	r3, sp, #44	; 0x2c
 801efbe:	a802      	add	r0, sp, #8
 801efc0:	f853 4b04 	ldr.w	r4, [r3], #4
 801efc4:	9301      	str	r3, [sp, #4]
 801efc6:	f000 fde3 	bl	801fb90 <_ZN8touchgfx12TextProviderC1Ev>
 801efca:	4621      	mov	r1, r4
 801efcc:	9a01      	ldr	r2, [sp, #4]
 801efce:	a802      	add	r0, sp, #8
 801efd0:	24ff      	movs	r4, #255	; 0xff
 801efd2:	f000 fde6 	bl	801fba2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801efd6:	2100      	movs	r1, #0
 801efd8:	a802      	add	r0, sp, #8
 801efda:	f000 fd93 	bl	801fb04 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801efde:	b1a0      	cbz	r0, 801f00a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x56>
 801efe0:	280a      	cmp	r0, #10
 801efe2:	d00d      	beq.n	801f000 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801efe4:	682b      	ldr	r3, [r5, #0]
 801efe6:	4601      	mov	r1, r0
 801efe8:	4628      	mov	r0, r5
 801efea:	68db      	ldr	r3, [r3, #12]
 801efec:	4798      	blx	r3
 801efee:	b138      	cbz	r0, 801f000 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801eff0:	792b      	ldrb	r3, [r5, #4]
 801eff2:	7a02      	ldrb	r2, [r0, #8]
 801eff4:	1a9b      	subs	r3, r3, r2
 801eff6:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 801effa:	429c      	cmp	r4, r3
 801effc:	bfa8      	it	ge
 801effe:	461c      	movge	r4, r3
 801f000:	2100      	movs	r1, #0
 801f002:	a802      	add	r0, sp, #8
 801f004:	f000 fd7e 	bl	801fb04 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801f008:	e7e9      	b.n	801efde <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x2a>
 801f00a:	4620      	mov	r0, r4
 801f00c:	b008      	add	sp, #32
 801f00e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f012:	b003      	add	sp, #12
 801f014:	4770      	bx	lr

0801f016 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801f016:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f01a:	f04f 0a00 	mov.w	sl, #0
 801f01e:	b087      	sub	sp, #28
 801f020:	4614      	mov	r4, r2
 801f022:	461d      	mov	r5, r3
 801f024:	4606      	mov	r6, r0
 801f026:	4657      	mov	r7, sl
 801f028:	4668      	mov	r0, sp
 801f02a:	46d1      	mov	r9, sl
 801f02c:	4688      	mov	r8, r1
 801f02e:	f000 fdaf 	bl	801fb90 <_ZN8touchgfx12TextProviderC1Ev>
 801f032:	462a      	mov	r2, r5
 801f034:	4621      	mov	r1, r4
 801f036:	4668      	mov	r0, sp
 801f038:	f000 fdb3 	bl	801fba2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801f03c:	4641      	mov	r1, r8
 801f03e:	4668      	mov	r0, sp
 801f040:	f000 fd60 	bl	801fb04 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801f044:	4605      	mov	r5, r0
 801f046:	b108      	cbz	r0, 801f04c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x36>
 801f048:	280a      	cmp	r0, #10
 801f04a:	d107      	bne.n	801f05c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 801f04c:	45b9      	cmp	r9, r7
 801f04e:	dd00      	ble.n	801f052 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x3c>
 801f050:	464f      	mov	r7, r9
 801f052:	f04f 0900 	mov.w	r9, #0
 801f056:	e01e      	b.n	801f096 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x80>
 801f058:	46aa      	mov	sl, r5
 801f05a:	e7ef      	b.n	801f03c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x26>
 801f05c:	6833      	ldr	r3, [r6, #0]
 801f05e:	4601      	mov	r1, r0
 801f060:	4630      	mov	r0, r6
 801f062:	68db      	ldr	r3, [r3, #12]
 801f064:	4798      	blx	r3
 801f066:	4602      	mov	r2, r0
 801f068:	2800      	cmp	r0, #0
 801f06a:	d0f5      	beq.n	801f058 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x42>
 801f06c:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801f070:	4651      	mov	r1, sl
 801f072:	f890 b00a 	ldrb.w	fp, [r0, #10]
 801f076:	2b00      	cmp	r3, #0
 801f078:	6833      	ldr	r3, [r6, #0]
 801f07a:	8885      	ldrh	r5, [r0, #4]
 801f07c:	4630      	mov	r0, r6
 801f07e:	bfb4      	ite	lt
 801f080:	f44f 7480 	movlt.w	r4, #256	; 0x100
 801f084:	2400      	movge	r4, #0
 801f086:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801f088:	ea44 040b 	orr.w	r4, r4, fp
 801f08c:	4798      	blx	r3
 801f08e:	4404      	add	r4, r0
 801f090:	444c      	add	r4, r9
 801f092:	fa1f f984 	uxth.w	r9, r4
 801f096:	2d00      	cmp	r5, #0
 801f098:	d1de      	bne.n	801f058 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x42>
 801f09a:	4638      	mov	r0, r7
 801f09c:	b007      	add	sp, #28
 801f09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f0a2 <_ZNK8touchgfx8Drawable7getTypeEv>:
 801f0a2:	2000      	movs	r0, #0
 801f0a4:	4770      	bx	lr

0801f0a6 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801f0a6:	b513      	push	{r0, r1, r4, lr}
 801f0a8:	1d01      	adds	r1, r0, #4
 801f0aa:	4603      	mov	r3, r0
 801f0ac:	c903      	ldmia	r1, {r0, r1}
 801f0ae:	e88d 0003 	stmia.w	sp, {r0, r1}
 801f0b2:	2100      	movs	r1, #0
 801f0b4:	4618      	mov	r0, r3
 801f0b6:	f8ad 1000 	strh.w	r1, [sp]
 801f0ba:	f8ad 1002 	strh.w	r1, [sp, #2]
 801f0be:	6819      	ldr	r1, [r3, #0]
 801f0c0:	690c      	ldr	r4, [r1, #16]
 801f0c2:	4669      	mov	r1, sp
 801f0c4:	47a0      	blx	r4
 801f0c6:	b002      	add	sp, #8
 801f0c8:	bd10      	pop	{r4, pc}

0801f0ca <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801f0ca:	b538      	push	{r3, r4, r5, lr}
 801f0cc:	680b      	ldr	r3, [r1, #0]
 801f0ce:	460c      	mov	r4, r1
 801f0d0:	4605      	mov	r5, r0
 801f0d2:	68db      	ldr	r3, [r3, #12]
 801f0d4:	4798      	blx	r3
 801f0d6:	6823      	ldr	r3, [r4, #0]
 801f0d8:	4620      	mov	r0, r4
 801f0da:	4629      	mov	r1, r5
 801f0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f0de:	4798      	blx	r3
 801f0e0:	4628      	mov	r0, r5
 801f0e2:	bd38      	pop	{r3, r4, r5, pc}

0801f0e4 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801f0e4:	b410      	push	{r4}
 801f0e6:	880a      	ldrh	r2, [r1, #0]
 801f0e8:	8884      	ldrh	r4, [r0, #4]
 801f0ea:	4422      	add	r2, r4
 801f0ec:	800a      	strh	r2, [r1, #0]
 801f0ee:	884a      	ldrh	r2, [r1, #2]
 801f0f0:	88c4      	ldrh	r4, [r0, #6]
 801f0f2:	4422      	add	r2, r4
 801f0f4:	804a      	strh	r2, [r1, #2]
 801f0f6:	6940      	ldr	r0, [r0, #20]
 801f0f8:	b120      	cbz	r0, 801f104 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801f0fa:	6803      	ldr	r3, [r0, #0]
 801f0fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f102:	4718      	bx	r3
 801f104:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f108:	4770      	bx	lr

0801f10a <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801f10a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f10c:	460b      	mov	r3, r1
 801f10e:	b085      	sub	sp, #20
 801f110:	4604      	mov	r4, r0
 801f112:	b901      	cbnz	r1, 801f116 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801f114:	b1f2      	cbz	r2, 801f154 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4a>
 801f116:	1d27      	adds	r7, r4, #4
 801f118:	ad02      	add	r5, sp, #8
 801f11a:	e897 0003 	ldmia.w	r7, {r0, r1}
 801f11e:	e88d 0003 	stmia.w	sp, {r0, r1}
 801f122:	88e1      	ldrh	r1, [r4, #6]
 801f124:	4620      	mov	r0, r4
 801f126:	440a      	add	r2, r1
 801f128:	88a1      	ldrh	r1, [r4, #4]
 801f12a:	4419      	add	r1, r3
 801f12c:	6823      	ldr	r3, [r4, #0]
 801f12e:	b212      	sxth	r2, r2
 801f130:	b209      	sxth	r1, r1
 801f132:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f134:	4798      	blx	r3
 801f136:	e897 0003 	ldmia.w	r7, {r0, r1}
 801f13a:	e885 0003 	stmia.w	r5, {r0, r1}
 801f13e:	6960      	ldr	r0, [r4, #20]
 801f140:	b150      	cbz	r0, 801f158 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4e>
 801f142:	6803      	ldr	r3, [r0, #0]
 801f144:	4669      	mov	r1, sp
 801f146:	691b      	ldr	r3, [r3, #16]
 801f148:	4798      	blx	r3
 801f14a:	6960      	ldr	r0, [r4, #20]
 801f14c:	6803      	ldr	r3, [r0, #0]
 801f14e:	691b      	ldr	r3, [r3, #16]
 801f150:	4629      	mov	r1, r5
 801f152:	4798      	blx	r3
 801f154:	b005      	add	sp, #20
 801f156:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f158:	f7ff fc00 	bl	801e95c <_ZN8touchgfx11Application11getInstanceEv>
 801f15c:	6803      	ldr	r3, [r0, #0]
 801f15e:	4669      	mov	r1, sp
 801f160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f162:	4798      	blx	r3
 801f164:	f7ff fbfa 	bl	801e95c <_ZN8touchgfx11Application11getInstanceEv>
 801f168:	6803      	ldr	r3, [r0, #0]
 801f16a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f16c:	e7f0      	b.n	801f150 <_ZN8touchgfx8Drawable12moveRelativeEss+0x46>

0801f16e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801f16e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f170:	8882      	ldrh	r2, [r0, #4]
 801f172:	4605      	mov	r5, r0
 801f174:	880b      	ldrh	r3, [r1, #0]
 801f176:	460c      	mov	r4, r1
 801f178:	4413      	add	r3, r2
 801f17a:	800b      	strh	r3, [r1, #0]
 801f17c:	884b      	ldrh	r3, [r1, #2]
 801f17e:	88c2      	ldrh	r2, [r0, #6]
 801f180:	4413      	add	r3, r2
 801f182:	4602      	mov	r2, r0
 801f184:	804b      	strh	r3, [r1, #2]
 801f186:	466b      	mov	r3, sp
 801f188:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801f18c:	6851      	ldr	r1, [r2, #4]
 801f18e:	c303      	stmia	r3!, {r0, r1}
 801f190:	4621      	mov	r1, r4
 801f192:	4668      	mov	r0, sp
 801f194:	f7ef f9d6 	bl	800e544 <_ZN8touchgfx4RectaNERKS0_>
 801f198:	466b      	mov	r3, sp
 801f19a:	cb03      	ldmia	r3!, {r0, r1}
 801f19c:	6020      	str	r0, [r4, #0]
 801f19e:	6061      	str	r1, [r4, #4]
 801f1a0:	6968      	ldr	r0, [r5, #20]
 801f1a2:	b128      	cbz	r0, 801f1b0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801f1a4:	6803      	ldr	r3, [r0, #0]
 801f1a6:	691b      	ldr	r3, [r3, #16]
 801f1a8:	4621      	mov	r1, r4
 801f1aa:	4798      	blx	r3
 801f1ac:	b003      	add	sp, #12
 801f1ae:	bd30      	pop	{r4, r5, pc}
 801f1b0:	f7ff fbd4 	bl	801e95c <_ZN8touchgfx11Application11getInstanceEv>
 801f1b4:	6803      	ldr	r3, [r0, #0]
 801f1b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f1b8:	e7f6      	b.n	801f1a8 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801f1ba <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801f1ba:	b570      	push	{r4, r5, r6, lr}
 801f1bc:	8882      	ldrh	r2, [r0, #4]
 801f1be:	460c      	mov	r4, r1
 801f1c0:	880b      	ldrh	r3, [r1, #0]
 801f1c2:	4605      	mov	r5, r0
 801f1c4:	4413      	add	r3, r2
 801f1c6:	800b      	strh	r3, [r1, #0]
 801f1c8:	884b      	ldrh	r3, [r1, #2]
 801f1ca:	88c2      	ldrh	r2, [r0, #6]
 801f1cc:	4413      	add	r3, r2
 801f1ce:	804b      	strh	r3, [r1, #2]
 801f1d0:	1d01      	adds	r1, r0, #4
 801f1d2:	4620      	mov	r0, r4
 801f1d4:	f7ef f9b6 	bl	800e544 <_ZN8touchgfx4RectaNERKS0_>
 801f1d8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801f1dc:	b163      	cbz	r3, 801f1f8 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801f1de:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f1e2:	b933      	cbnz	r3, 801f1f2 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x38>
 801f1e4:	bd70      	pop	{r4, r5, r6, pc}
 801f1e6:	6803      	ldr	r3, [r0, #0]
 801f1e8:	4621      	mov	r1, r4
 801f1ea:	6a1b      	ldr	r3, [r3, #32]
 801f1ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f1f0:	4718      	bx	r3
 801f1f2:	6968      	ldr	r0, [r5, #20]
 801f1f4:	2800      	cmp	r0, #0
 801f1f6:	d1f6      	bne.n	801f1e6 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x2c>
 801f1f8:	bd70      	pop	{r4, r5, r6, pc}

0801f1fa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801f1fa:	b510      	push	{r4, lr}
 801f1fc:	2300      	movs	r3, #0
 801f1fe:	4604      	mov	r4, r0
 801f200:	4608      	mov	r0, r1
 801f202:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801f206:	8023      	strh	r3, [r4, #0]
 801f208:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801f20c:	8063      	strh	r3, [r4, #2]
 801f20e:	6803      	ldr	r3, [r0, #0]
 801f210:	80a1      	strh	r1, [r4, #4]
 801f212:	4621      	mov	r1, r4
 801f214:	80e2      	strh	r2, [r4, #6]
 801f216:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f218:	4798      	blx	r3
 801f21a:	4620      	mov	r0, r4
 801f21c:	bd10      	pop	{r4, pc}
	...

0801f220 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt>:
 801f220:	b510      	push	{r4, lr}
 801f222:	8083      	strh	r3, [r0, #4]
 801f224:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801f228:	6101      	str	r1, [r0, #16]
 801f22a:	7183      	strb	r3, [r0, #6]
 801f22c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801f230:	8282      	strh	r2, [r0, #20]
 801f232:	71c3      	strb	r3, [r0, #7]
 801f234:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801f238:	7203      	strb	r3, [r0, #8]
 801f23a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801f23e:	7243      	strb	r3, [r0, #9]
 801f240:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801f244:	8143      	strh	r3, [r0, #10]
 801f246:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801f24a:	8183      	strh	r3, [r0, #12]
 801f24c:	4b01      	ldr	r3, [pc, #4]	; (801f254 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt+0x34>)
 801f24e:	6003      	str	r3, [r0, #0]
 801f250:	bd10      	pop	{r4, pc}
 801f252:	bf00      	nop
 801f254:	08026188 	.word	0x08026188

0801f258 <_ZNK8touchgfx9ConstFont4findEt>:
 801f258:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f25a:	8a84      	ldrh	r4, [r0, #20]
 801f25c:	2500      	movs	r5, #0
 801f25e:	260e      	movs	r6, #14
 801f260:	3c01      	subs	r4, #1
 801f262:	42a5      	cmp	r5, r4
 801f264:	dc0c      	bgt.n	801f280 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 801f266:	192a      	adds	r2, r5, r4
 801f268:	6903      	ldr	r3, [r0, #16]
 801f26a:	1052      	asrs	r2, r2, #1
 801f26c:	fb06 3302 	mla	r3, r6, r2, r3
 801f270:	889f      	ldrh	r7, [r3, #4]
 801f272:	42b9      	cmp	r1, r7
 801f274:	da01      	bge.n	801f27a <_ZNK8touchgfx9ConstFont4findEt+0x22>
 801f276:	1e54      	subs	r4, r2, #1
 801f278:	e7f3      	b.n	801f262 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801f27a:	dd02      	ble.n	801f282 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 801f27c:	1c55      	adds	r5, r2, #1
 801f27e:	e7f0      	b.n	801f262 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801f280:	2300      	movs	r3, #0
 801f282:	4618      	mov	r0, r3
 801f284:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f286 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801f286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f288:	4605      	mov	r5, r0
 801f28a:	4617      	mov	r7, r2
 801f28c:	461e      	mov	r6, r3
 801f28e:	f7ff ffe3 	bl	801f258 <_ZNK8touchgfx9ConstFont4findEt>
 801f292:	b9e0      	cbnz	r0, 801f2ce <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 801f294:	b911      	cbnz	r1, 801f29c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 801f296:	2400      	movs	r4, #0
 801f298:	4620      	mov	r0, r4
 801f29a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f29c:	290a      	cmp	r1, #10
 801f29e:	d0fa      	beq.n	801f296 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801f2a0:	682b      	ldr	r3, [r5, #0]
 801f2a2:	4628      	mov	r0, r5
 801f2a4:	691b      	ldr	r3, [r3, #16]
 801f2a6:	4798      	blx	r3
 801f2a8:	4601      	mov	r1, r0
 801f2aa:	4628      	mov	r0, r5
 801f2ac:	f7ff ffd4 	bl	801f258 <_ZNK8touchgfx9ConstFont4findEt>
 801f2b0:	4604      	mov	r4, r0
 801f2b2:	2800      	cmp	r0, #0
 801f2b4:	d0ef      	beq.n	801f296 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801f2b6:	682b      	ldr	r3, [r5, #0]
 801f2b8:	4621      	mov	r1, r4
 801f2ba:	4628      	mov	r0, r5
 801f2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f2be:	4798      	blx	r3
 801f2c0:	6038      	str	r0, [r7, #0]
 801f2c2:	682b      	ldr	r3, [r5, #0]
 801f2c4:	4628      	mov	r0, r5
 801f2c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f2c8:	4798      	blx	r3
 801f2ca:	7030      	strb	r0, [r6, #0]
 801f2cc:	e7e4      	b.n	801f298 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 801f2ce:	4604      	mov	r4, r0
 801f2d0:	e7f1      	b.n	801f2b6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

0801f2d2 <_ZN8touchgfx6memsetEPvhm>:
 801f2d2:	4402      	add	r2, r0
 801f2d4:	4290      	cmp	r0, r2
 801f2d6:	d002      	beq.n	801f2de <_ZN8touchgfx6memsetEPvhm+0xc>
 801f2d8:	f800 1b01 	strb.w	r1, [r0], #1
 801f2dc:	e7fa      	b.n	801f2d4 <_ZN8touchgfx6memsetEPvhm+0x2>
 801f2de:	4770      	bx	lr

0801f2e0 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801f2e0:	2002      	movs	r0, #2
 801f2e2:	4770      	bx	lr

0801f2e4 <_ZN8touchgfx12GestureEventD1Ev>:
 801f2e4:	4770      	bx	lr

0801f2e6 <_ZN8touchgfx12GestureEventD0Ev>:
 801f2e6:	b510      	push	{r4, lr}
 801f2e8:	4604      	mov	r4, r0
 801f2ea:	210c      	movs	r1, #12
 801f2ec:	f003 f94e 	bl	802258c <_ZdlPvj>
 801f2f0:	4620      	mov	r0, r4
 801f2f2:	bd10      	pop	{r4, pc}

0801f2f4 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801f2f4:	b530      	push	{r4, r5, lr}
 801f2f6:	460d      	mov	r5, r1
 801f2f8:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801f2fa:	b087      	sub	sp, #28
 801f2fc:	4604      	mov	r4, r0
 801f2fe:	b301      	cbz	r1, 801f342 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801f300:	a801      	add	r0, sp, #4
 801f302:	f7ff ff7a 	bl	801f1fa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f306:	892a      	ldrh	r2, [r5, #8]
 801f308:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801f30c:	7928      	ldrb	r0, [r5, #4]
 801f30e:	1ad2      	subs	r2, r2, r3
 801f310:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801f312:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801f316:	441a      	add	r2, r3
 801f318:	896b      	ldrh	r3, [r5, #10]
 801f31a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801f31e:	f88d 0010 	strb.w	r0, [sp, #16]
 801f322:	1b5b      	subs	r3, r3, r5
 801f324:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801f326:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801f328:	442b      	add	r3, r5
 801f32a:	4d07      	ldr	r5, [pc, #28]	; (801f348 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801f32c:	f8ad 1012 	strh.w	r1, [sp, #18]
 801f330:	a903      	add	r1, sp, #12
 801f332:	9503      	str	r5, [sp, #12]
 801f334:	f8ad 2014 	strh.w	r2, [sp, #20]
 801f338:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f33c:	6803      	ldr	r3, [r0, #0]
 801f33e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f340:	4798      	blx	r3
 801f342:	b007      	add	sp, #28
 801f344:	bd30      	pop	{r4, r5, pc}
 801f346:	bf00      	nop
 801f348:	080261d4 	.word	0x080261d4

0801f34c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801f34c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f34e:	460c      	mov	r4, r1
 801f350:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801f352:	b089      	sub	sp, #36	; 0x24
 801f354:	4605      	mov	r5, r0
 801f356:	2900      	cmp	r1, #0
 801f358:	d053      	beq.n	801f402 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb6>
 801f35a:	4668      	mov	r0, sp
 801f35c:	f7ff ff4d 	bl	801f1fa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f360:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801f362:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801f364:	4668      	mov	r0, sp
 801f366:	8922      	ldrh	r2, [r4, #8]
 801f368:	88e1      	ldrh	r1, [r4, #6]
 801f36a:	443a      	add	r2, r7
 801f36c:	4431      	add	r1, r6
 801f36e:	b212      	sxth	r2, r2
 801f370:	b209      	sxth	r1, r1
 801f372:	f7ef f871 	bl	800e458 <_ZNK8touchgfx4Rect9intersectEss>
 801f376:	b1c8      	cbz	r0, 801f3ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x60>
 801f378:	89a2      	ldrh	r2, [r4, #12]
 801f37a:	4668      	mov	r0, sp
 801f37c:	8961      	ldrh	r1, [r4, #10]
 801f37e:	443a      	add	r2, r7
 801f380:	4431      	add	r1, r6
 801f382:	b212      	sxth	r2, r2
 801f384:	b209      	sxth	r1, r1
 801f386:	f7ef f867 	bl	800e458 <_ZNK8touchgfx4Rect9intersectEss>
 801f38a:	b978      	cbnz	r0, 801f3ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x60>
 801f38c:	4b1e      	ldr	r3, [pc, #120]	; (801f408 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801f38e:	a904      	add	r1, sp, #16
 801f390:	f8ad 0016 	strh.w	r0, [sp, #22]
 801f394:	9304      	str	r3, [sp, #16]
 801f396:	2302      	movs	r3, #2
 801f398:	f8ad 0018 	strh.w	r0, [sp, #24]
 801f39c:	f8ad 001a 	strh.w	r0, [sp, #26]
 801f3a0:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801f3a2:	f88d 3014 	strb.w	r3, [sp, #20]
 801f3a6:	6803      	ldr	r3, [r0, #0]
 801f3a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f3aa:	4798      	blx	r3
 801f3ac:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801f3ae:	a802      	add	r0, sp, #8
 801f3b0:	f7ff ff23 	bl	801f1fa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f3b4:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801f3b8:	88e0      	ldrh	r0, [r4, #6]
 801f3ba:	8961      	ldrh	r1, [r4, #10]
 801f3bc:	f8b5 e034 	ldrh.w	lr, [r5, #52]	; 0x34
 801f3c0:	1a80      	subs	r0, r0, r2
 801f3c2:	f8bd c00a 	ldrh.w	ip, [sp, #10]
 801f3c6:	1a89      	subs	r1, r1, r2
 801f3c8:	8923      	ldrh	r3, [r4, #8]
 801f3ca:	4470      	add	r0, lr
 801f3cc:	89a2      	ldrh	r2, [r4, #12]
 801f3ce:	4471      	add	r1, lr
 801f3d0:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801f3d2:	eba3 030c 	sub.w	r3, r3, ip
 801f3d6:	eba2 020c 	sub.w	r2, r2, ip
 801f3da:	f8ad 0016 	strh.w	r0, [sp, #22]
 801f3de:	7927      	ldrb	r7, [r4, #4]
 801f3e0:	4433      	add	r3, r6
 801f3e2:	4432      	add	r2, r6
 801f3e4:	4c09      	ldr	r4, [pc, #36]	; (801f40c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801f3e6:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801f3e8:	f8ad 101a 	strh.w	r1, [sp, #26]
 801f3ec:	a904      	add	r1, sp, #16
 801f3ee:	9404      	str	r4, [sp, #16]
 801f3f0:	f88d 7014 	strb.w	r7, [sp, #20]
 801f3f4:	f8ad 3018 	strh.w	r3, [sp, #24]
 801f3f8:	f8ad 201c 	strh.w	r2, [sp, #28]
 801f3fc:	6803      	ldr	r3, [r0, #0]
 801f3fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801f400:	4798      	blx	r3
 801f402:	b009      	add	sp, #36	; 0x24
 801f404:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f406:	bf00      	nop
 801f408:	08024940 	.word	0x08024940
 801f40c:	0802492c 	.word	0x0802492c

0801f410 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801f410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f414:	6b02      	ldr	r2, [r0, #48]	; 0x30
 801f416:	b0a1      	sub	sp, #132	; 0x84
 801f418:	4604      	mov	r4, r0
 801f41a:	460d      	mov	r5, r1
 801f41c:	790b      	ldrb	r3, [r1, #4]
 801f41e:	b16a      	cbz	r2, 801f43c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x2c>
 801f420:	b963      	cbnz	r3, 801f43c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x2c>
 801f422:	b021      	add	sp, #132	; 0x84
 801f424:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f428:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801f42c:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801f430:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801f434:	1d20      	adds	r0, r4, #4
 801f436:	f7ef fc63 	bl	800ed00 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801f43a:	e0a2      	b.n	801f582 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x172>
 801f43c:	2b00      	cmp	r3, #0
 801f43e:	f040 80a0 	bne.w	801f582 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x172>
 801f442:	4a66      	ldr	r2, [pc, #408]	; (801f5dc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1cc>)
 801f444:	6812      	ldr	r2, [r2, #0]
 801f446:	f892 b045 	ldrb.w	fp, [r2, #69]	; 0x45
 801f44a:	86a3      	strh	r3, [r4, #52]	; 0x34
 801f44c:	f1bb 0f03 	cmp.w	fp, #3
 801f450:	86e3      	strh	r3, [r4, #54]	; 0x36
 801f452:	dde9      	ble.n	801f428 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x18>
 801f454:	f1bb 0f0c 	cmp.w	fp, #12
 801f458:	6323      	str	r3, [r4, #48]	; 0x30
 801f45a:	f04f 0303 	mov.w	r3, #3
 801f45e:	f04f 0600 	mov.w	r6, #0
 801f462:	bfd8      	it	le
 801f464:	f10b 32ff 	addle.w	r2, fp, #4294967295
 801f468:	495d      	ldr	r1, [pc, #372]	; (801f5e0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d0>)
 801f46a:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 801f46e:	f04f 0a01 	mov.w	sl, #1
 801f472:	f8ad 602a 	strh.w	r6, [sp, #42]	; 0x2a
 801f476:	bfd8      	it	le
 801f478:	fb92 f3f3 	sdivle	r3, r2, r3
 801f47c:	9300      	str	r3, [sp, #0]
 801f47e:	4b59      	ldr	r3, [pc, #356]	; (801f5e4 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d4>)
 801f480:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f484:	4b58      	ldr	r3, [pc, #352]	; (801f5e8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d8>)
 801f486:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801f48a:	2248      	movs	r2, #72	; 0x48
 801f48c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f490:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801f494:	ab0e      	add	r3, sp, #56	; 0x38
 801f496:	4618      	mov	r0, r3
 801f498:	f003 f916 	bl	80226c8 <memcpy>
 801f49c:	f04f 32ff 	mov.w	r2, #4294967295
 801f4a0:	f8cd b008 	str.w	fp, [sp, #8]
 801f4a4:	9206      	str	r2, [sp, #24]
 801f4a6:	9007      	str	r0, [sp, #28]
 801f4a8:	9a00      	ldr	r2, [sp, #0]
 801f4aa:	9b02      	ldr	r3, [sp, #8]
 801f4ac:	fb93 f3f2 	sdiv	r3, r3, r2
 801f4b0:	f10a 32ff 	add.w	r2, sl, #4294967295
 801f4b4:	b29b      	uxth	r3, r3
 801f4b6:	9201      	str	r2, [sp, #4]
 801f4b8:	9a07      	ldr	r2, [sp, #28]
 801f4ba:	9303      	str	r3, [sp, #12]
 801f4bc:	eb02 07ca 	add.w	r7, r2, sl, lsl #3
 801f4c0:	3f04      	subs	r7, #4
 801f4c2:	2300      	movs	r3, #0
 801f4c4:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801f4c8:	f8b5 8006 	ldrh.w	r8, [r5, #6]
 801f4cc:	a80a      	add	r0, sp, #40	; 0x28
 801f4ce:	9309      	str	r3, [sp, #36]	; 0x24
 801f4d0:	f857 3c04 	ldr.w	r3, [r7, #-4]
 801f4d4:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 801f4d8:	fb13 f302 	smulbb	r3, r3, r2
 801f4dc:	b29b      	uxth	r3, r3
 801f4de:	9304      	str	r3, [sp, #16]
 801f4e0:	683b      	ldr	r3, [r7, #0]
 801f4e2:	fb13 f302 	smulbb	r3, r3, r2
 801f4e6:	b29b      	uxth	r3, r3
 801f4e8:	9305      	str	r3, [sp, #20]
 801f4ea:	9b04      	ldr	r3, [sp, #16]
 801f4ec:	4498      	add	r8, r3
 801f4ee:	9b05      	ldr	r3, [sp, #20]
 801f4f0:	4499      	add	r9, r3
 801f4f2:	fa0f f888 	sxth.w	r8, r8
 801f4f6:	fa0f f989 	sxth.w	r9, r9
 801f4fa:	4641      	mov	r1, r8
 801f4fc:	464a      	mov	r2, r9
 801f4fe:	f7ee ffab 	bl	800e458 <_ZNK8touchgfx4Rect9intersectEss>
 801f502:	b380      	cbz	r0, 801f566 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801f504:	4641      	mov	r1, r8
 801f506:	ab09      	add	r3, sp, #36	; 0x24
 801f508:	464a      	mov	r2, r9
 801f50a:	1d20      	adds	r0, r4, #4
 801f50c:	f7ef fbf8 	bl	800ed00 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801f510:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f512:	b341      	cbz	r1, 801f566 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801f514:	42b1      	cmp	r1, r6
 801f516:	d026      	beq.n	801f566 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801f518:	a80c      	add	r0, sp, #48	; 0x30
 801f51a:	f7ff fe6e 	bl	801f1fa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f51e:	2002      	movs	r0, #2
 801f520:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801f524:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801f528:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801f52c:	fb92 f2f0 	sdiv	r2, r2, r0
 801f530:	440a      	add	r2, r1
 801f532:	1a99      	subs	r1, r3, r2
 801f534:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801f538:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801f53c:	fb93 f3f0 	sdiv	r3, r3, r0
 801f540:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801f544:	4403      	add	r3, r0
 801f546:	1ad3      	subs	r3, r2, r3
 801f548:	9a06      	ldr	r2, [sp, #24]
 801f54a:	435b      	muls	r3, r3
 801f54c:	fb01 3301 	mla	r3, r1, r1, r3
 801f550:	4293      	cmp	r3, r2
 801f552:	d208      	bcs.n	801f566 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801f554:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f558:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801f55a:	86a2      	strh	r2, [r4, #52]	; 0x34
 801f55c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801f560:	6326      	str	r6, [r4, #48]	; 0x30
 801f562:	86e2      	strh	r2, [r4, #54]	; 0x36
 801f564:	9306      	str	r3, [sp, #24]
 801f566:	9b01      	ldr	r3, [sp, #4]
 801f568:	3710      	adds	r7, #16
 801f56a:	3302      	adds	r3, #2
 801f56c:	2b08      	cmp	r3, #8
 801f56e:	9301      	str	r3, [sp, #4]
 801f570:	dda7      	ble.n	801f4c2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xb2>
 801f572:	9b02      	ldr	r3, [sp, #8]
 801f574:	f10a 0a01 	add.w	sl, sl, #1
 801f578:	445b      	add	r3, fp
 801f57a:	9302      	str	r3, [sp, #8]
 801f57c:	9b00      	ldr	r3, [sp, #0]
 801f57e:	4553      	cmp	r3, sl
 801f580:	da92      	bge.n	801f4a8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x98>
 801f582:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801f584:	2900      	cmp	r1, #0
 801f586:	f43f af4c 	beq.w	801f422 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801f58a:	a80c      	add	r0, sp, #48	; 0x30
 801f58c:	2600      	movs	r6, #0
 801f58e:	f7ff fe34 	bl	801f1fa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f592:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801f596:	88ea      	ldrh	r2, [r5, #6]
 801f598:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801f59c:	1ad2      	subs	r2, r2, r3
 801f59e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801f5a0:	7929      	ldrb	r1, [r5, #4]
 801f5a2:	441a      	add	r2, r3
 801f5a4:	892b      	ldrh	r3, [r5, #8]
 801f5a6:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801f5aa:	a90e      	add	r1, sp, #56	; 0x38
 801f5ac:	1a1b      	subs	r3, r3, r0
 801f5ae:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801f5b0:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801f5b4:	4403      	add	r3, r0
 801f5b6:	480d      	ldr	r0, [pc, #52]	; (801f5ec <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1dc>)
 801f5b8:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801f5bc:	900e      	str	r0, [sp, #56]	; 0x38
 801f5be:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801f5c0:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801f5c4:	6803      	ldr	r3, [r0, #0]
 801f5c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f5c8:	4798      	blx	r3
 801f5ca:	792b      	ldrb	r3, [r5, #4]
 801f5cc:	2b00      	cmp	r3, #0
 801f5ce:	f43f af28 	beq.w	801f422 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801f5d2:	6326      	str	r6, [r4, #48]	; 0x30
 801f5d4:	86a6      	strh	r6, [r4, #52]	; 0x34
 801f5d6:	86e6      	strh	r6, [r4, #54]	; 0x36
 801f5d8:	e723      	b.n	801f422 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801f5da:	bf00      	nop
 801f5dc:	20009d38 	.word	0x20009d38
 801f5e0:	080247b0 	.word	0x080247b0
 801f5e4:	20009d2c 	.word	0x20009d2c
 801f5e8:	20009d2e 	.word	0x20009d2e
 801f5ec:	08024940 	.word	0x08024940

0801f5f0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801f5f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f5f2:	4604      	mov	r4, r0
 801f5f4:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801f5f8:	3201      	adds	r2, #1
 801f5fa:	d114      	bne.n	801f626 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x36>
 801f5fc:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 801f600:	2200      	movs	r2, #0
 801f602:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801f606:	6803      	ldr	r3, [r0, #0]
 801f608:	f8ad 1006 	strh.w	r1, [sp, #6]
 801f60c:	4669      	mov	r1, sp
 801f60e:	f8ad 2000 	strh.w	r2, [sp]
 801f612:	f8ad 2002 	strh.w	r2, [sp, #2]
 801f616:	f8ad 5004 	strh.w	r5, [sp, #4]
 801f61a:	6a1b      	ldr	r3, [r3, #32]
 801f61c:	4798      	blx	r3
 801f61e:	e89d 0003 	ldmia.w	sp, {r0, r1}
 801f622:	e884 0003 	stmia.w	r4, {r0, r1}
 801f626:	4620      	mov	r0, r4
 801f628:	b003      	add	sp, #12
 801f62a:	bd30      	pop	{r4, r5, pc}

0801f62c <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801f62c:	b513      	push	{r0, r1, r4, lr}
 801f62e:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801f632:	4604      	mov	r4, r0
 801f634:	3301      	adds	r3, #1
 801f636:	d109      	bne.n	801f64c <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801f638:	4601      	mov	r1, r0
 801f63a:	4668      	mov	r0, sp
 801f63c:	f7ff fddd 	bl	801f1fa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f640:	f8bd 3000 	ldrh.w	r3, [sp]
 801f644:	8423      	strh	r3, [r4, #32]
 801f646:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801f64a:	8463      	strh	r3, [r4, #34]	; 0x22
 801f64c:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801f650:	b002      	add	sp, #8
 801f652:	bd10      	pop	{r4, pc}

0801f654 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801f654:	b513      	push	{r0, r1, r4, lr}
 801f656:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801f65a:	4604      	mov	r4, r0
 801f65c:	3301      	adds	r3, #1
 801f65e:	d109      	bne.n	801f674 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801f660:	4601      	mov	r1, r0
 801f662:	4668      	mov	r0, sp
 801f664:	f7ff fdc9 	bl	801f1fa <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f668:	f8bd 3000 	ldrh.w	r3, [sp]
 801f66c:	8423      	strh	r3, [r4, #32]
 801f66e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801f672:	8463      	strh	r3, [r4, #34]	; 0x22
 801f674:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801f678:	b002      	add	sp, #8
 801f67a:	bd10      	pop	{r4, pc}

0801f67c <_ZN8touchgfx6ScreenC1Ev>:
 801f67c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f67e:	4605      	mov	r5, r0
 801f680:	4b18      	ldr	r3, [pc, #96]	; (801f6e4 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801f682:	2200      	movs	r2, #0
 801f684:	4918      	ldr	r1, [pc, #96]	; (801f6e8 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801f686:	f845 3b04 	str.w	r3, [r5], #4
 801f68a:	2301      	movs	r3, #1
 801f68c:	8102      	strh	r2, [r0, #8]
 801f68e:	4604      	mov	r4, r0
 801f690:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801f694:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801f698:	4b14      	ldr	r3, [pc, #80]	; (801f6ec <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801f69a:	8142      	strh	r2, [r0, #10]
 801f69c:	f9b3 7000 	ldrsh.w	r7, [r3]
 801f6a0:	4b13      	ldr	r3, [pc, #76]	; (801f6f0 <_ZN8touchgfx6ScreenC1Ev+0x74>)
 801f6a2:	8182      	strh	r2, [r0, #12]
 801f6a4:	81c2      	strh	r2, [r0, #14]
 801f6a6:	8202      	strh	r2, [r0, #16]
 801f6a8:	8242      	strh	r2, [r0, #18]
 801f6aa:	8282      	strh	r2, [r0, #20]
 801f6ac:	82c2      	strh	r2, [r0, #22]
 801f6ae:	6182      	str	r2, [r0, #24]
 801f6b0:	61c2      	str	r2, [r0, #28]
 801f6b2:	6202      	str	r2, [r0, #32]
 801f6b4:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801f6b8:	62c2      	str	r2, [r0, #44]	; 0x2c
 801f6ba:	6302      	str	r2, [r0, #48]	; 0x30
 801f6bc:	8682      	strh	r2, [r0, #52]	; 0x34
 801f6be:	86c2      	strh	r2, [r0, #54]	; 0x36
 801f6c0:	f9b3 6000 	ldrsh.w	r6, [r3]
 801f6c4:	6041      	str	r1, [r0, #4]
 801f6c6:	4611      	mov	r1, r2
 801f6c8:	4628      	mov	r0, r5
 801f6ca:	f7ef f8ec 	bl	800e8a6 <_ZN8touchgfx8Drawable5setXYEss>
 801f6ce:	4639      	mov	r1, r7
 801f6d0:	4628      	mov	r0, r5
 801f6d2:	f7ef f906 	bl	800e8e2 <_ZN8touchgfx8Drawable8setWidthEs>
 801f6d6:	4628      	mov	r0, r5
 801f6d8:	4631      	mov	r1, r6
 801f6da:	f7ef f911 	bl	800e900 <_ZN8touchgfx8Drawable9setHeightEs>
 801f6de:	4620      	mov	r0, r4
 801f6e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f6e2:	bf00      	nop
 801f6e4:	080261e8 	.word	0x080261e8
 801f6e8:	08024818 	.word	0x08024818
 801f6ec:	20009d2c 	.word	0x20009d2c
 801f6f0:	20009d2e 	.word	0x20009d2e

0801f6f4 <_ZN8touchgfx6Screen4drawEv>:
 801f6f4:	4b0b      	ldr	r3, [pc, #44]	; (801f724 <_ZN8touchgfx6Screen4drawEv+0x30>)
 801f6f6:	b507      	push	{r0, r1, r2, lr}
 801f6f8:	f9b3 1000 	ldrsh.w	r1, [r3]
 801f6fc:	4b0a      	ldr	r3, [pc, #40]	; (801f728 <_ZN8touchgfx6Screen4drawEv+0x34>)
 801f6fe:	f8ad 1004 	strh.w	r1, [sp, #4]
 801f702:	4669      	mov	r1, sp
 801f704:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f708:	2300      	movs	r3, #0
 801f70a:	f8ad 3000 	strh.w	r3, [sp]
 801f70e:	f8ad 3002 	strh.w	r3, [sp, #2]
 801f712:	6803      	ldr	r3, [r0, #0]
 801f714:	f8ad 2006 	strh.w	r2, [sp, #6]
 801f718:	689b      	ldr	r3, [r3, #8]
 801f71a:	4798      	blx	r3
 801f71c:	b003      	add	sp, #12
 801f71e:	f85d fb04 	ldr.w	pc, [sp], #4
 801f722:	bf00      	nop
 801f724:	20009d2c 	.word	0x20009d2c
 801f728:	20009d2e 	.word	0x20009d2e

0801f72c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801f72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f730:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801f734:	b087      	sub	sp, #28
 801f736:	4681      	mov	r9, r0
 801f738:	460c      	mov	r4, r1
 801f73a:	4615      	mov	r5, r2
 801f73c:	b16b      	cbz	r3, 801f75a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801f73e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801f742:	b153      	cbz	r3, 801f75a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801f744:	4628      	mov	r0, r5
 801f746:	f7ff ff53 	bl	801f5f0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801f74a:	4621      	mov	r1, r4
 801f74c:	f7ee feb3 	bl	800e4b6 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801f750:	69eb      	ldr	r3, [r5, #28]
 801f752:	b928      	cbnz	r0, 801f760 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 801f754:	461d      	mov	r5, r3
 801f756:	2b00      	cmp	r3, #0
 801f758:	d1f4      	bne.n	801f744 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801f75a:	b007      	add	sp, #28
 801f75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f760:	ae02      	add	r6, sp, #8
 801f762:	2b00      	cmp	r3, #0
 801f764:	d04a      	beq.n	801f7fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>
 801f766:	682b      	ldr	r3, [r5, #0]
 801f768:	4629      	mov	r1, r5
 801f76a:	4668      	mov	r0, sp
 801f76c:	68db      	ldr	r3, [r3, #12]
 801f76e:	4798      	blx	r3
 801f770:	4628      	mov	r0, r5
 801f772:	f7ff ff5b 	bl	801f62c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801f776:	f8bd 7000 	ldrh.w	r7, [sp]
 801f77a:	4407      	add	r7, r0
 801f77c:	4628      	mov	r0, r5
 801f77e:	f7ff ff69 	bl	801f654 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801f782:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801f786:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801f78a:	b23f      	sxth	r7, r7
 801f78c:	4418      	add	r0, r3
 801f78e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801f792:	4621      	mov	r1, r4
 801f794:	f8ad 200c 	strh.w	r2, [sp, #12]
 801f798:	f8ad 000a 	strh.w	r0, [sp, #10]
 801f79c:	4630      	mov	r0, r6
 801f79e:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f7a2:	f8ad 7008 	strh.w	r7, [sp, #8]
 801f7a6:	f7ee fecd 	bl	800e544 <_ZN8touchgfx4RectaNERKS0_>
 801f7aa:	4628      	mov	r0, r5
 801f7ac:	f7ff ff20 	bl	801f5f0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801f7b0:	ab04      	add	r3, sp, #16
 801f7b2:	4602      	mov	r2, r0
 801f7b4:	e896 0003 	ldmia.w	r6, {r0, r1}
 801f7b8:	e883 0003 	stmia.w	r3, {r0, r1}
 801f7bc:	4611      	mov	r1, r2
 801f7be:	4618      	mov	r0, r3
 801f7c0:	f7ee fec0 	bl	800e544 <_ZN8touchgfx4RectaNERKS0_>
 801f7c4:	f9bd b010 	ldrsh.w	fp, [sp, #16]
 801f7c8:	f9b4 2000 	ldrsh.w	r2, [r4]
 801f7cc:	f9bd a012 	ldrsh.w	sl, [sp, #18]
 801f7d0:	455a      	cmp	r2, fp
 801f7d2:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801f7d6:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801f7da:	f040 8096 	bne.w	801f90a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801f7de:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801f7e2:	4553      	cmp	r3, sl
 801f7e4:	f040 8091 	bne.w	801f90a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801f7e8:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801f7ec:	4543      	cmp	r3, r8
 801f7ee:	f040 808c 	bne.w	801f90a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801f7f2:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f7f6:	42bb      	cmp	r3, r7
 801f7f8:	f040 8087 	bne.w	801f90a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801f7fc:	4628      	mov	r0, r5
 801f7fe:	f7ff fef7 	bl	801f5f0 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801f802:	6861      	ldr	r1, [r4, #4]
 801f804:	4602      	mov	r2, r0
 801f806:	4633      	mov	r3, r6
 801f808:	6820      	ldr	r0, [r4, #0]
 801f80a:	c303      	stmia	r3!, {r0, r1}
 801f80c:	4611      	mov	r1, r2
 801f80e:	4630      	mov	r0, r6
 801f810:	f7ee fe98 	bl	800e544 <_ZN8touchgfx4RectaNERKS0_>
 801f814:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801f818:	2b00      	cmp	r3, #0
 801f81a:	d09e      	beq.n	801f75a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801f81c:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801f820:	2b00      	cmp	r3, #0
 801f822:	d09a      	beq.n	801f75a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801f824:	4628      	mov	r0, r5
 801f826:	f7ff ff01 	bl	801f62c <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801f82a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801f82e:	1a18      	subs	r0, r3, r0
 801f830:	f8ad 0008 	strh.w	r0, [sp, #8]
 801f834:	4628      	mov	r0, r5
 801f836:	f7ff ff0d 	bl	801f654 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801f83a:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801f83e:	4631      	mov	r1, r6
 801f840:	1a18      	subs	r0, r3, r0
 801f842:	f8ad 000a 	strh.w	r0, [sp, #10]
 801f846:	4628      	mov	r0, r5
 801f848:	682b      	ldr	r3, [r5, #0]
 801f84a:	689b      	ldr	r3, [r3, #8]
 801f84c:	4798      	blx	r3
 801f84e:	e784      	b.n	801f75a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801f850:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801f854:	4553      	cmp	r3, sl
 801f856:	da10      	bge.n	801f87a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x14e>
 801f858:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801f85c:	4648      	mov	r0, r9
 801f85e:	f8ad 300a 	strh.w	r3, [sp, #10]
 801f862:	ebaa 0303 	sub.w	r3, sl, r3
 801f866:	f8ad 100c 	strh.w	r1, [sp, #12]
 801f86a:	4631      	mov	r1, r6
 801f86c:	f8ad 2008 	strh.w	r2, [sp, #8]
 801f870:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f874:	69ea      	ldr	r2, [r5, #28]
 801f876:	f7ff ff59 	bl	801f72c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801f87a:	f9b4 3000 	ldrsh.w	r3, [r4]
 801f87e:	455b      	cmp	r3, fp
 801f880:	da0e      	bge.n	801f8a0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x174>
 801f882:	f8ad 3008 	strh.w	r3, [sp, #8]
 801f886:	ebab 0303 	sub.w	r3, fp, r3
 801f88a:	f8ad a00a 	strh.w	sl, [sp, #10]
 801f88e:	4631      	mov	r1, r6
 801f890:	f8ad 300c 	strh.w	r3, [sp, #12]
 801f894:	4648      	mov	r0, r9
 801f896:	f8ad 700e 	strh.w	r7, [sp, #14]
 801f89a:	69ea      	ldr	r2, [r5, #28]
 801f89c:	f7ff ff46 	bl	801f72c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801f8a0:	8822      	ldrh	r2, [r4, #0]
 801f8a2:	44d8      	add	r8, fp
 801f8a4:	88a3      	ldrh	r3, [r4, #4]
 801f8a6:	fa1f f888 	uxth.w	r8, r8
 801f8aa:	4413      	add	r3, r2
 801f8ac:	fa0f f288 	sxth.w	r2, r8
 801f8b0:	b29b      	uxth	r3, r3
 801f8b2:	b219      	sxth	r1, r3
 801f8b4:	4291      	cmp	r1, r2
 801f8b6:	dd0e      	ble.n	801f8d6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801f8b8:	eba3 0308 	sub.w	r3, r3, r8
 801f8bc:	f8ad 2008 	strh.w	r2, [sp, #8]
 801f8c0:	f8ad a00a 	strh.w	sl, [sp, #10]
 801f8c4:	4631      	mov	r1, r6
 801f8c6:	f8ad 300c 	strh.w	r3, [sp, #12]
 801f8ca:	4648      	mov	r0, r9
 801f8cc:	f8ad 700e 	strh.w	r7, [sp, #14]
 801f8d0:	69ea      	ldr	r2, [r5, #28]
 801f8d2:	f7ff ff2b 	bl	801f72c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801f8d6:	88e2      	ldrh	r2, [r4, #6]
 801f8d8:	4457      	add	r7, sl
 801f8da:	8863      	ldrh	r3, [r4, #2]
 801f8dc:	b2bf      	uxth	r7, r7
 801f8de:	4413      	add	r3, r2
 801f8e0:	b23a      	sxth	r2, r7
 801f8e2:	b29b      	uxth	r3, r3
 801f8e4:	b219      	sxth	r1, r3
 801f8e6:	428a      	cmp	r2, r1
 801f8e8:	da88      	bge.n	801f7fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>
 801f8ea:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801f8ee:	1bdb      	subs	r3, r3, r7
 801f8f0:	f9b4 0000 	ldrsh.w	r0, [r4]
 801f8f4:	f8ad 100c 	strh.w	r1, [sp, #12]
 801f8f8:	4631      	mov	r1, r6
 801f8fa:	f8ad 0008 	strh.w	r0, [sp, #8]
 801f8fe:	f8ad 200a 	strh.w	r2, [sp, #10]
 801f902:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f906:	69ea      	ldr	r2, [r5, #28]
 801f908:	e006      	b.n	801f918 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1ec>
 801f90a:	f1b8 0f00 	cmp.w	r8, #0
 801f90e:	d001      	beq.n	801f914 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1e8>
 801f910:	2f00      	cmp	r7, #0
 801f912:	d19d      	bne.n	801f850 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x124>
 801f914:	69ea      	ldr	r2, [r5, #28]
 801f916:	4621      	mov	r1, r4
 801f918:	4648      	mov	r0, r9
 801f91a:	f7ff ff07 	bl	801f72c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801f91e:	e76d      	b.n	801f7fc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>

0801f920 <_ZN8touchgfx6Screen9startSMOCERNS_4RectE>:
 801f920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f922:	2300      	movs	r3, #0
 801f924:	aa02      	add	r2, sp, #8
 801f926:	4604      	mov	r4, r0
 801f928:	3004      	adds	r0, #4
 801f92a:	f842 3d04 	str.w	r3, [r2, #-4]!
 801f92e:	460d      	mov	r5, r1
 801f930:	f7ef fae7 	bl	800ef02 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801f934:	9a01      	ldr	r2, [sp, #4]
 801f936:	b11a      	cbz	r2, 801f940 <_ZN8touchgfx6Screen9startSMOCERNS_4RectE+0x20>
 801f938:	4629      	mov	r1, r5
 801f93a:	4620      	mov	r0, r4
 801f93c:	f7ff fef6 	bl	801f72c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801f940:	b003      	add	sp, #12
 801f942:	bd30      	pop	{r4, r5, pc}

0801f944 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801f944:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f946:	4602      	mov	r2, r0
 801f948:	4604      	mov	r4, r0
 801f94a:	460d      	mov	r5, r1
 801f94c:	466b      	mov	r3, sp
 801f94e:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801f952:	6851      	ldr	r1, [r2, #4]
 801f954:	c303      	stmia	r3!, {r0, r1}
 801f956:	4629      	mov	r1, r5
 801f958:	4668      	mov	r0, sp
 801f95a:	f7ee fdf3 	bl	800e544 <_ZN8touchgfx4RectaNERKS0_>
 801f95e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801f962:	4669      	mov	r1, sp
 801f964:	b123      	cbz	r3, 801f970 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801f966:	4620      	mov	r0, r4
 801f968:	f7ff ffda 	bl	801f920 <_ZN8touchgfx6Screen9startSMOCERNS_4RectE>
 801f96c:	b003      	add	sp, #12
 801f96e:	bd30      	pop	{r4, r5, pc}
 801f970:	1d20      	adds	r0, r4, #4
 801f972:	f7ef f95a 	bl	800ec2a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801f976:	e7f9      	b.n	801f96c <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801f978 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801f978:	460b      	mov	r3, r1
 801f97a:	680a      	ldr	r2, [r1, #0]
 801f97c:	1d01      	adds	r1, r0, #4
 801f97e:	6952      	ldr	r2, [r2, #20]
 801f980:	4618      	mov	r0, r3
 801f982:	4710      	bx	r2

0801f984 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>:
 801f984:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f988:	b082      	sub	sp, #8
 801f98a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f98e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f992:	bfcc      	ite	gt
 801f994:	ee30 0a27 	vaddgt.f32	s0, s0, s15
 801f998:	ee30 0a67 	vsuble.f32	s0, s0, s15
 801f99c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801f9a0:	edcd 7a01 	vstr	s15, [sp, #4]
 801f9a4:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 801f9a8:	b002      	add	sp, #8
 801f9aa:	4770      	bx	lr

0801f9ac <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801f9ac:	b510      	push	{r4, lr}
 801f9ae:	4298      	cmp	r0, r3
 801f9b0:	eb01 0402 	add.w	r4, r1, r2
 801f9b4:	b224      	sxth	r4, r4
 801f9b6:	da1f      	bge.n	801f9f8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801f9b8:	b1f3      	cbz	r3, 801f9f8 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801f9ba:	ee07 0a90 	vmov	s15, r0
 801f9be:	ee06 1a10 	vmov	s12, r1
 801f9c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f9c6:	ee07 3a90 	vmov	s15, r3
 801f9ca:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 801f9ce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f9d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f9d6:	ee06 2a90 	vmov	s13, r2
 801f9da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f9de:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801f9e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f9e6:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801f9ea:	eea7 7a86 	vfma.f32	s14, s15, s12
 801f9ee:	eea6 0a87 	vfma.f32	s0, s13, s14
 801f9f2:	f7ff ffc7 	bl	801f984 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801f9f6:	4604      	mov	r4, r0
 801f9f8:	4620      	mov	r0, r4
 801f9fa:	bd10      	pop	{r4, pc}

0801f9fc <_ZNK8touchgfx17InternalFlashFont12getPixelDataEPKNS_9GlyphNodeE>:
 801f9fc:	680b      	ldr	r3, [r1, #0]
 801f9fe:	6980      	ldr	r0, [r0, #24]
 801fa00:	4418      	add	r0, r3
 801fa02:	4770      	bx	lr

0801fa04 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE>:
 801fa04:	b530      	push	{r4, r5, lr}
 801fa06:	b19a      	cbz	r2, 801fa30 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 801fa08:	7b13      	ldrb	r3, [r2, #12]
 801fa0a:	b18b      	cbz	r3, 801fa30 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 801fa0c:	7ad2      	ldrb	r2, [r2, #11]
 801fa0e:	b294      	uxth	r4, r2
 801fa10:	4413      	add	r3, r2
 801fa12:	429c      	cmp	r4, r3
 801fa14:	da0c      	bge.n	801fa30 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 801fa16:	69c2      	ldr	r2, [r0, #28]
 801fa18:	eb02 0584 	add.w	r5, r2, r4, lsl #2
 801fa1c:	f832 2024 	ldrh.w	r2, [r2, r4, lsl #2]
 801fa20:	428a      	cmp	r2, r1
 801fa22:	d102      	bne.n	801fa2a <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x26>
 801fa24:	f995 0002 	ldrsb.w	r0, [r5, #2]
 801fa28:	bd30      	pop	{r4, r5, pc}
 801fa2a:	3401      	adds	r4, #1
 801fa2c:	b2a4      	uxth	r4, r4
 801fa2e:	e7f0      	b.n	801fa12 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0xe>
 801fa30:	2000      	movs	r0, #0
 801fa32:	bd30      	pop	{r4, r5, pc}

0801fa34 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>:
 801fa34:	b530      	push	{r4, r5, lr}
 801fa36:	b087      	sub	sp, #28
 801fa38:	4604      	mov	r4, r0
 801fa3a:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 801fa3e:	9505      	str	r5, [sp, #20]
 801fa40:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801fa44:	9504      	str	r5, [sp, #16]
 801fa46:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801fa4a:	9503      	str	r5, [sp, #12]
 801fa4c:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801fa50:	9502      	str	r5, [sp, #8]
 801fa52:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 801fa56:	9501      	str	r5, [sp, #4]
 801fa58:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 801fa5c:	9500      	str	r5, [sp, #0]
 801fa5e:	f7ff fbdf 	bl	801f220 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt>
 801fa62:	4b04      	ldr	r3, [pc, #16]	; (801fa74 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt+0x40>)
 801fa64:	4620      	mov	r0, r4
 801fa66:	6023      	str	r3, [r4, #0]
 801fa68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801fa6a:	61a3      	str	r3, [r4, #24]
 801fa6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801fa6e:	61e3      	str	r3, [r4, #28]
 801fa70:	b007      	add	sp, #28
 801fa72:	bd30      	pop	{r4, r5, pc}
 801fa74:	0802621c 	.word	0x0802621c

0801fa78 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801fa78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fa7a:	4604      	mov	r4, r0
 801fa7c:	4d1b      	ldr	r5, [pc, #108]	; (801faec <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x74>)
 801fa7e:	2700      	movs	r7, #0
 801fa80:	2601      	movs	r6, #1
 801fa82:	6863      	ldr	r3, [r4, #4]
 801fa84:	b93b      	cbnz	r3, 801fa96 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x1e>
 801fa86:	6821      	ldr	r1, [r4, #0]
 801fa88:	2900      	cmp	r1, #0
 801fa8a:	d02c      	beq.n	801fae6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6e>
 801fa8c:	6828      	ldr	r0, [r5, #0]
 801fa8e:	6803      	ldr	r3, [r0, #0]
 801fa90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fa92:	4798      	blx	r3
 801fa94:	6060      	str	r0, [r4, #4]
 801fa96:	7c23      	ldrb	r3, [r4, #16]
 801fa98:	b16b      	cbz	r3, 801fab6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x3e>
 801fa9a:	68e3      	ldr	r3, [r4, #12]
 801fa9c:	b12b      	cbz	r3, 801faaa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x32>
 801fa9e:	881a      	ldrh	r2, [r3, #0]
 801faa0:	b11a      	cbz	r2, 801faaa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x32>
 801faa2:	1c9a      	adds	r2, r3, #2
 801faa4:	60e2      	str	r2, [r4, #12]
 801faa6:	8818      	ldrh	r0, [r3, #0]
 801faa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801faaa:	6828      	ldr	r0, [r5, #0]
 801faac:	7427      	strb	r7, [r4, #16]
 801faae:	6803      	ldr	r3, [r0, #0]
 801fab0:	6821      	ldr	r1, [r4, #0]
 801fab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fab4:	4798      	blx	r3
 801fab6:	6863      	ldr	r3, [r4, #4]
 801fab8:	881a      	ldrh	r2, [r3, #0]
 801faba:	b1a2      	cbz	r2, 801fae6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6e>
 801fabc:	2a02      	cmp	r2, #2
 801fabe:	f103 0202 	add.w	r2, r3, #2
 801fac2:	6062      	str	r2, [r4, #4]
 801fac4:	d1ef      	bne.n	801faa6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x2e>
 801fac6:	6828      	ldr	r0, [r5, #0]
 801fac8:	6803      	ldr	r3, [r0, #0]
 801faca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801facc:	68a3      	ldr	r3, [r4, #8]
 801face:	1d19      	adds	r1, r3, #4
 801fad0:	60a1      	str	r1, [r4, #8]
 801fad2:	6819      	ldr	r1, [r3, #0]
 801fad4:	4790      	blx	r2
 801fad6:	60e0      	str	r0, [r4, #12]
 801fad8:	2800      	cmp	r0, #0
 801fada:	d0d2      	beq.n	801fa82 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801fadc:	8803      	ldrh	r3, [r0, #0]
 801fade:	2b00      	cmp	r3, #0
 801fae0:	d0cf      	beq.n	801fa82 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801fae2:	7426      	strb	r6, [r4, #16]
 801fae4:	e7cd      	b.n	801fa82 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801fae6:	2000      	movs	r0, #0
 801fae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801faea:	bf00      	nop
 801faec:	20009d38 	.word	0x20009d38

0801faf0 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801faf0:	b538      	push	{r3, r4, r5, lr}
 801faf2:	8a83      	ldrh	r3, [r0, #20]
 801faf4:	4604      	mov	r4, r0
 801faf6:	8a45      	ldrh	r5, [r0, #18]
 801faf8:	8243      	strh	r3, [r0, #18]
 801fafa:	f7ff ffbd 	bl	801fa78 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801fafe:	82a0      	strh	r0, [r4, #20]
 801fb00:	4628      	mov	r0, r5
 801fb02:	bd38      	pop	{r3, r4, r5, pc}

0801fb04 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801fb04:	b570      	push	{r4, r5, r6, lr}
 801fb06:	460e      	mov	r6, r1
 801fb08:	4605      	mov	r5, r0
 801fb0a:	f7ff fff1 	bl	801faf0 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801fb0e:	4a0d      	ldr	r2, [pc, #52]	; (801fb44 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x40>)
 801fb10:	4601      	mov	r1, r0
 801fb12:	6814      	ldr	r4, [r2, #0]
 801fb14:	4613      	mov	r3, r2
 801fb16:	b914      	cbnz	r4, 801fb1e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1a>
 801fb18:	6852      	ldr	r2, [r2, #4]
 801fb1a:	07d2      	lsls	r2, r2, #31
 801fb1c:	d510      	bpl.n	801fb40 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x3c>
 801fb1e:	6858      	ldr	r0, [r3, #4]
 801fb20:	f105 0212 	add.w	r2, r5, #18
 801fb24:	f010 0f01 	tst.w	r0, #1
 801fb28:	ea4f 0060 	mov.w	r0, r0, asr #1
 801fb2c:	bf18      	it	ne
 801fb2e:	582b      	ldrne	r3, [r5, r0]
 801fb30:	4428      	add	r0, r5
 801fb32:	bf18      	it	ne
 801fb34:	591c      	ldrne	r4, [r3, r4]
 801fb36:	4633      	mov	r3, r6
 801fb38:	46a4      	mov	ip, r4
 801fb3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801fb3e:	4760      	bx	ip
 801fb40:	bd70      	pop	{r4, r5, r6, pc}
 801fb42:	bf00      	nop
 801fb44:	20009c90 	.word	0x20009c90

0801fb48 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801fb48:	2300      	movs	r3, #0
 801fb4a:	b510      	push	{r4, lr}
 801fb4c:	4604      	mov	r4, r0
 801fb4e:	6043      	str	r3, [r0, #4]
 801fb50:	60c3      	str	r3, [r0, #12]
 801fb52:	7403      	strb	r3, [r0, #16]
 801fb54:	f7ff ff90 	bl	801fa78 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801fb58:	8260      	strh	r0, [r4, #18]
 801fb5a:	4620      	mov	r0, r4
 801fb5c:	f7ff ff8c 	bl	801fa78 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801fb60:	4a0a      	ldr	r2, [pc, #40]	; (801fb8c <_ZN8touchgfx12TextProvider18initializeInternalEv+0x44>)
 801fb62:	82a0      	strh	r0, [r4, #20]
 801fb64:	6813      	ldr	r3, [r2, #0]
 801fb66:	4611      	mov	r1, r2
 801fb68:	b913      	cbnz	r3, 801fb70 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x28>
 801fb6a:	6852      	ldr	r2, [r2, #4]
 801fb6c:	07d2      	lsls	r2, r2, #31
 801fb6e:	d50c      	bpl.n	801fb8a <_ZN8touchgfx12TextProvider18initializeInternalEv+0x42>
 801fb70:	6848      	ldr	r0, [r1, #4]
 801fb72:	f010 0f01 	tst.w	r0, #1
 801fb76:	ea4f 0060 	mov.w	r0, r0, asr #1
 801fb7a:	bf18      	it	ne
 801fb7c:	5822      	ldrne	r2, [r4, r0]
 801fb7e:	4420      	add	r0, r4
 801fb80:	bf18      	it	ne
 801fb82:	58d3      	ldrne	r3, [r2, r3]
 801fb84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fb88:	4718      	bx	r3
 801fb8a:	bd10      	pop	{r4, pc}
 801fb8c:	20009c88 	.word	0x20009c88

0801fb90 <_ZN8touchgfx12TextProviderC1Ev>:
 801fb90:	2300      	movs	r3, #0
 801fb92:	b510      	push	{r4, lr}
 801fb94:	4604      	mov	r4, r0
 801fb96:	6003      	str	r3, [r0, #0]
 801fb98:	6043      	str	r3, [r0, #4]
 801fb9a:	f7ff ffd5 	bl	801fb48 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801fb9e:	4620      	mov	r0, r4
 801fba0:	bd10      	pop	{r4, pc}

0801fba2 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>:
 801fba2:	6082      	str	r2, [r0, #8]
 801fba4:	6001      	str	r1, [r0, #0]
 801fba6:	f7ff bfcf 	b.w	801fb48 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801fbaa <_ZN8touchgfx7Unicode6strlenEPKt>:
 801fbaa:	4602      	mov	r2, r0
 801fbac:	b148      	cbz	r0, 801fbc2 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801fbae:	2300      	movs	r3, #0
 801fbb0:	b298      	uxth	r0, r3
 801fbb2:	3301      	adds	r3, #1
 801fbb4:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801fbb8:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801fbbc:	2900      	cmp	r1, #0
 801fbbe:	d1f7      	bne.n	801fbb0 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801fbc0:	4770      	bx	lr
 801fbc2:	4770      	bx	lr

0801fbc4 <_ZN8touchgfx7Unicode6strlenEPKc>:
 801fbc4:	b140      	cbz	r0, 801fbd8 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801fbc6:	4602      	mov	r2, r0
 801fbc8:	1a13      	subs	r3, r2, r0
 801fbca:	f812 1b01 	ldrb.w	r1, [r2], #1
 801fbce:	b29b      	uxth	r3, r3
 801fbd0:	2900      	cmp	r1, #0
 801fbd2:	d1f9      	bne.n	801fbc8 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 801fbd4:	4618      	mov	r0, r3
 801fbd6:	4770      	bx	lr
 801fbd8:	4603      	mov	r3, r0
 801fbda:	e7fb      	b.n	801fbd4 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0801fbdc <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801fbdc:	b530      	push	{r4, r5, lr}
 801fbde:	b169      	cbz	r1, 801fbfc <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x20>
 801fbe0:	b168      	cbz	r0, 801fbfe <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x22>
 801fbe2:	1e85      	subs	r5, r0, #2
 801fbe4:	460b      	mov	r3, r1
 801fbe6:	1a58      	subs	r0, r3, r1
 801fbe8:	b280      	uxth	r0, r0
 801fbea:	4290      	cmp	r0, r2
 801fbec:	da07      	bge.n	801fbfe <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x22>
 801fbee:	f813 4b01 	ldrb.w	r4, [r3], #1
 801fbf2:	f825 4f02 	strh.w	r4, [r5, #2]!
 801fbf6:	2c00      	cmp	r4, #0
 801fbf8:	d1f5      	bne.n	801fbe6 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801fbfa:	bd30      	pop	{r4, r5, pc}
 801fbfc:	4608      	mov	r0, r1
 801fbfe:	bd30      	pop	{r4, r5, pc}

0801fc00 <_ZN8touchgfx7Unicode4utoaEmPtti.part.0>:
 801fc00:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fc02:	460f      	mov	r7, r1
 801fc04:	b08b      	sub	sp, #44	; 0x2c
 801fc06:	2100      	movs	r1, #0
 801fc08:	ad01      	add	r5, sp, #4
 801fc0a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801fc0e:	211f      	movs	r1, #31
 801fc10:	fbb0 f6f3 	udiv	r6, r0, r3
 801fc14:	fb03 0416 	mls	r4, r3, r6, r0
 801fc18:	4630      	mov	r0, r6
 801fc1a:	2c09      	cmp	r4, #9
 801fc1c:	bfd4      	ite	le
 801fc1e:	3430      	addle	r4, #48	; 0x30
 801fc20:	3457      	addgt	r4, #87	; 0x57
 801fc22:	b2e4      	uxtb	r4, r4
 801fc24:	554c      	strb	r4, [r1, r5]
 801fc26:	1e4c      	subs	r4, r1, #1
 801fc28:	b92e      	cbnz	r6, 801fc36 <_ZN8touchgfx7Unicode4utoaEmPtti.part.0+0x36>
 801fc2a:	4429      	add	r1, r5
 801fc2c:	4638      	mov	r0, r7
 801fc2e:	f7ff ffd5 	bl	801fbdc <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801fc32:	b00b      	add	sp, #44	; 0x2c
 801fc34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fc36:	4621      	mov	r1, r4
 801fc38:	e7ea      	b.n	801fc10 <_ZN8touchgfx7Unicode4utoaEmPtti.part.0+0x10>

0801fc3a <_ZN8touchgfx7Unicode4itoaElPtti>:
 801fc3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fc3c:	4606      	mov	r6, r0
 801fc3e:	b08b      	sub	sp, #44	; 0x2c
 801fc40:	4608      	mov	r0, r1
 801fc42:	b341      	cbz	r1, 801fc96 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801fc44:	1e99      	subs	r1, r3, #2
 801fc46:	290e      	cmp	r1, #14
 801fc48:	d825      	bhi.n	801fc96 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801fc4a:	2100      	movs	r1, #0
 801fc4c:	4634      	mov	r4, r6
 801fc4e:	251f      	movs	r5, #31
 801fc50:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801fc54:	1e69      	subs	r1, r5, #1
 801fc56:	f10d 0e04 	add.w	lr, sp, #4
 801fc5a:	fb94 f7f3 	sdiv	r7, r4, r3
 801fc5e:	fb03 4417 	mls	r4, r3, r7, r4
 801fc62:	448e      	add	lr, r1
 801fc64:	2c00      	cmp	r4, #0
 801fc66:	bfb8      	it	lt
 801fc68:	4264      	neglt	r4, r4
 801fc6a:	2c09      	cmp	r4, #9
 801fc6c:	bfd4      	ite	le
 801fc6e:	3430      	addle	r4, #48	; 0x30
 801fc70:	3457      	addgt	r4, #87	; 0x57
 801fc72:	b2e4      	uxtb	r4, r4
 801fc74:	f88e 4001 	strb.w	r4, [lr, #1]
 801fc78:	463c      	mov	r4, r7
 801fc7a:	b977      	cbnz	r7, 801fc9a <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801fc7c:	2e00      	cmp	r6, #0
 801fc7e:	da05      	bge.n	801fc8c <_ZN8touchgfx7Unicode4itoaElPtti+0x52>
 801fc80:	ab0a      	add	r3, sp, #40	; 0x28
 801fc82:	4419      	add	r1, r3
 801fc84:	232d      	movs	r3, #45	; 0x2d
 801fc86:	f801 3c24 	strb.w	r3, [r1, #-36]
 801fc8a:	1ea9      	subs	r1, r5, #2
 801fc8c:	3101      	adds	r1, #1
 801fc8e:	ab01      	add	r3, sp, #4
 801fc90:	4419      	add	r1, r3
 801fc92:	f7ff ffa3 	bl	801fbdc <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801fc96:	b00b      	add	sp, #44	; 0x2c
 801fc98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fc9a:	460d      	mov	r5, r1
 801fc9c:	e7da      	b.n	801fc54 <_ZN8touchgfx7Unicode4itoaElPtti+0x1a>

0801fc9e <_ZN8touchgfx7Unicode4atoiEPKt>:
 801fc9e:	b510      	push	{r4, lr}
 801fca0:	b158      	cbz	r0, 801fcba <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801fca2:	1e82      	subs	r2, r0, #2
 801fca4:	210a      	movs	r1, #10
 801fca6:	2000      	movs	r0, #0
 801fca8:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801fcac:	3b30      	subs	r3, #48	; 0x30
 801fcae:	b29c      	uxth	r4, r3
 801fcb0:	2c09      	cmp	r4, #9
 801fcb2:	d802      	bhi.n	801fcba <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801fcb4:	fb01 3000 	mla	r0, r1, r0, r3
 801fcb8:	e7f6      	b.n	801fca8 <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 801fcba:	bd10      	pop	{r4, pc}

0801fcbc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 801fcbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fcc0:	b085      	sub	sp, #20
 801fcc2:	f8d0 8000 	ldr.w	r8, [r0]
 801fcc6:	468a      	mov	sl, r1
 801fcc8:	461c      	mov	r4, r3
 801fcca:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 801fcce:	4681      	mov	r9, r0
 801fcd0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801fcd4:	4640      	mov	r0, r8
 801fcd6:	9203      	str	r2, [sp, #12]
 801fcd8:	9301      	str	r3, [sp, #4]
 801fcda:	9102      	str	r1, [sp, #8]
 801fcdc:	f7ff ff65 	bl	801fbaa <_ZN8touchgfx7Unicode6strlenEPKt>
 801fce0:	9a03      	ldr	r2, [sp, #12]
 801fce2:	f1ba 0f00 	cmp.w	sl, #0
 801fce6:	bf0c      	ite	eq
 801fce8:	4603      	moveq	r3, r0
 801fcea:	1c43      	addne	r3, r0, #1
 801fcec:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 801fcf0:	8812      	ldrh	r2, [r2, #0]
 801fcf2:	b29b      	uxth	r3, r3
 801fcf4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801fcf6:	2a69      	cmp	r2, #105	; 0x69
 801fcf8:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801fcfa:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801fcfc:	9902      	ldr	r1, [sp, #8]
 801fcfe:	d004      	beq.n	801fd0a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4e>
 801fd00:	d852      	bhi.n	801fda8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801fd02:	2a58      	cmp	r2, #88	; 0x58
 801fd04:	d001      	beq.n	801fd0a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4e>
 801fd06:	2a64      	cmp	r2, #100	; 0x64
 801fd08:	d159      	bne.n	801fdbe <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x102>
 801fd0a:	b19c      	cbz	r4, 801fd34 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x78>
 801fd0c:	b956      	cbnz	r6, 801fd24 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x68>
 801fd0e:	2801      	cmp	r0, #1
 801fd10:	d108      	bne.n	801fd24 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x68>
 801fd12:	f8b8 2000 	ldrh.w	r2, [r8]
 801fd16:	2a30      	cmp	r2, #48	; 0x30
 801fd18:	bf02      	ittt	eq
 801fd1a:	f108 0202 	addeq.w	r2, r8, #2
 801fd1e:	4630      	moveq	r0, r6
 801fd20:	f8c9 2000 	streq.w	r2, [r9]
 801fd24:	429e      	cmp	r6, r3
 801fd26:	dd4c      	ble.n	801fdc2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x106>
 801fd28:	b2b6      	uxth	r6, r6
 801fd2a:	1af4      	subs	r4, r6, r3
 801fd2c:	4633      	mov	r3, r6
 801fd2e:	b2a4      	uxth	r4, r4
 801fd30:	f04f 0b00 	mov.w	fp, #0
 801fd34:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 801fd38:	9a01      	ldr	r2, [sp, #4]
 801fd3a:	3e01      	subs	r6, #1
 801fd3c:	b162      	cbz	r2, 801fd58 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9c>
 801fd3e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fd40:	4293      	cmp	r3, r2
 801fd42:	da09      	bge.n	801fd58 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9c>
 801fd44:	1ad2      	subs	r2, r2, r3
 801fd46:	b292      	uxth	r2, r2
 801fd48:	b939      	cbnz	r1, 801fd5a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9e>
 801fd4a:	f1bb 0f00 	cmp.w	fp, #0
 801fd4e:	d050      	beq.n	801fdf2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x136>
 801fd50:	2800      	cmp	r0, #0
 801fd52:	d04e      	beq.n	801fdf2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x136>
 801fd54:	4414      	add	r4, r2
 801fd56:	b2a4      	uxth	r4, r4
 801fd58:	2200      	movs	r2, #0
 801fd5a:	682b      	ldr	r3, [r5, #0]
 801fd5c:	42b3      	cmp	r3, r6
 801fd5e:	da07      	bge.n	801fd70 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xb4>
 801fd60:	f1ba 0f00 	cmp.w	sl, #0
 801fd64:	d004      	beq.n	801fd70 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xb4>
 801fd66:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801fd6a:	682b      	ldr	r3, [r5, #0]
 801fd6c:	3301      	adds	r3, #1
 801fd6e:	602b      	str	r3, [r5, #0]
 801fd70:	f04f 0e30 	mov.w	lr, #48	; 0x30
 801fd74:	b124      	cbz	r4, 801fd80 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xc4>
 801fd76:	6829      	ldr	r1, [r5, #0]
 801fd78:	3c01      	subs	r4, #1
 801fd7a:	428e      	cmp	r6, r1
 801fd7c:	b2a4      	uxth	r4, r4
 801fd7e:	dc22      	bgt.n	801fdc6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x10a>
 801fd80:	b140      	cbz	r0, 801fd94 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd8>
 801fd82:	f8d9 3000 	ldr.w	r3, [r9]
 801fd86:	8819      	ldrh	r1, [r3, #0]
 801fd88:	b121      	cbz	r1, 801fd94 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd8>
 801fd8a:	6829      	ldr	r1, [r5, #0]
 801fd8c:	3801      	subs	r0, #1
 801fd8e:	428e      	cmp	r6, r1
 801fd90:	b280      	uxth	r0, r0
 801fd92:	dc1e      	bgt.n	801fdd2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801fd94:	2020      	movs	r0, #32
 801fd96:	b122      	cbz	r2, 801fda2 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe6>
 801fd98:	6829      	ldr	r1, [r5, #0]
 801fd9a:	3a01      	subs	r2, #1
 801fd9c:	428e      	cmp	r6, r1
 801fd9e:	b292      	uxth	r2, r2
 801fda0:	dc21      	bgt.n	801fde6 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x12a>
 801fda2:	b005      	add	sp, #20
 801fda4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fda8:	2a73      	cmp	r2, #115	; 0x73
 801fdaa:	d003      	beq.n	801fdb4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf8>
 801fdac:	2a78      	cmp	r2, #120	; 0x78
 801fdae:	d0ac      	beq.n	801fd0a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4e>
 801fdb0:	2a6f      	cmp	r2, #111	; 0x6f
 801fdb2:	e7a9      	b.n	801fd08 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4c>
 801fdb4:	2c00      	cmp	r4, #0
 801fdb6:	d0bd      	beq.n	801fd34 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x78>
 801fdb8:	4286      	cmp	r6, r0
 801fdba:	da00      	bge.n	801fdbe <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x102>
 801fdbc:	b2b0      	uxth	r0, r6
 801fdbe:	2400      	movs	r4, #0
 801fdc0:	e7b8      	b.n	801fd34 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x78>
 801fdc2:	2400      	movs	r4, #0
 801fdc4:	e7b4      	b.n	801fd30 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x74>
 801fdc6:	f827 e011 	strh.w	lr, [r7, r1, lsl #1]
 801fdca:	682b      	ldr	r3, [r5, #0]
 801fdcc:	3301      	adds	r3, #1
 801fdce:	602b      	str	r3, [r5, #0]
 801fdd0:	e7d0      	b.n	801fd74 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xb8>
 801fdd2:	1c9c      	adds	r4, r3, #2
 801fdd4:	f8c9 4000 	str.w	r4, [r9]
 801fdd8:	881b      	ldrh	r3, [r3, #0]
 801fdda:	f827 3011 	strh.w	r3, [r7, r1, lsl #1]
 801fdde:	682b      	ldr	r3, [r5, #0]
 801fde0:	3301      	adds	r3, #1
 801fde2:	602b      	str	r3, [r5, #0]
 801fde4:	e7cc      	b.n	801fd80 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xc4>
 801fde6:	f827 0011 	strh.w	r0, [r7, r1, lsl #1]
 801fdea:	682b      	ldr	r3, [r5, #0]
 801fdec:	3301      	adds	r3, #1
 801fdee:	602b      	str	r3, [r5, #0]
 801fdf0:	e7d1      	b.n	801fd96 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xda>
 801fdf2:	2a00      	cmp	r2, #0
 801fdf4:	d0b1      	beq.n	801fd5a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9e>
 801fdf6:	f04f 0e20 	mov.w	lr, #32
 801fdfa:	6829      	ldr	r1, [r5, #0]
 801fdfc:	3a01      	subs	r2, #1
 801fdfe:	42b1      	cmp	r1, r6
 801fe00:	b292      	uxth	r2, r2
 801fe02:	daa9      	bge.n	801fd58 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9c>
 801fe04:	f827 e011 	strh.w	lr, [r7, r1, lsl #1]
 801fe08:	682b      	ldr	r3, [r5, #0]
 801fe0a:	3301      	adds	r3, #1
 801fe0c:	602b      	str	r3, [r5, #0]
 801fe0e:	2a00      	cmp	r2, #0
 801fe10:	d1f3      	bne.n	801fdfa <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x13e>
 801fe12:	e7a2      	b.n	801fd5a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9e>

0801fe14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 801fe14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fe18:	f8dd e018 	ldr.w	lr, [sp, #24]
 801fe1c:	4604      	mov	r4, r0
 801fe1e:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801fe22:	2000      	movs	r0, #0
 801fe24:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801fe26:	f04f 0801 	mov.w	r8, #1
 801fe2a:	9f08      	ldr	r7, [sp, #32]
 801fe2c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801fe2e:	8008      	strh	r0, [r1, #0]
 801fe30:	7010      	strb	r0, [r2, #0]
 801fe32:	7018      	strb	r0, [r3, #0]
 801fe34:	f88e 0000 	strb.w	r0, [lr]
 801fe38:	f88c 0000 	strb.w	r0, [ip]
 801fe3c:	7030      	strb	r0, [r6, #0]
 801fe3e:	6820      	ldr	r0, [r4, #0]
 801fe40:	8800      	ldrh	r0, [r0, #0]
 801fe42:	b190      	cbz	r0, 801fe6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x56>
 801fe44:	282b      	cmp	r0, #43	; 0x2b
 801fe46:	d001      	beq.n	801fe4c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x38>
 801fe48:	2820      	cmp	r0, #32
 801fe4a:	d104      	bne.n	801fe56 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x42>
 801fe4c:	8008      	strh	r0, [r1, #0]
 801fe4e:	6820      	ldr	r0, [r4, #0]
 801fe50:	3002      	adds	r0, #2
 801fe52:	6020      	str	r0, [r4, #0]
 801fe54:	e7f3      	b.n	801fe3e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x2a>
 801fe56:	282d      	cmp	r0, #45	; 0x2d
 801fe58:	d102      	bne.n	801fe60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x4c>
 801fe5a:	f882 8000 	strb.w	r8, [r2]
 801fe5e:	e7f6      	b.n	801fe4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3a>
 801fe60:	2823      	cmp	r0, #35	; 0x23
 801fe62:	d102      	bne.n	801fe6a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x56>
 801fe64:	f883 8000 	strb.w	r8, [r3]
 801fe68:	e7f1      	b.n	801fe4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3a>
 801fe6a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801fe6e:	2b09      	cmp	r3, #9
 801fe70:	d901      	bls.n	801fe76 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x62>
 801fe72:	282a      	cmp	r0, #42	; 0x2a
 801fe74:	d114      	bne.n	801fea0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x8c>
 801fe76:	2201      	movs	r2, #1
 801fe78:	f88c 2000 	strb.w	r2, [ip]
 801fe7c:	6823      	ldr	r3, [r4, #0]
 801fe7e:	8819      	ldrh	r1, [r3, #0]
 801fe80:	2930      	cmp	r1, #48	; 0x30
 801fe82:	bf02      	ittt	eq
 801fe84:	3302      	addeq	r3, #2
 801fe86:	6023      	streq	r3, [r4, #0]
 801fe88:	f88e 2000 	strbeq.w	r2, [lr]
 801fe8c:	6820      	ldr	r0, [r4, #0]
 801fe8e:	8803      	ldrh	r3, [r0, #0]
 801fe90:	2b2a      	cmp	r3, #42	; 0x2a
 801fe92:	d11e      	bne.n	801fed2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xbe>
 801fe94:	f04f 33ff 	mov.w	r3, #4294967295
 801fe98:	603b      	str	r3, [r7, #0]
 801fe9a:	6823      	ldr	r3, [r4, #0]
 801fe9c:	3302      	adds	r3, #2
 801fe9e:	6023      	str	r3, [r4, #0]
 801fea0:	6823      	ldr	r3, [r4, #0]
 801fea2:	881b      	ldrh	r3, [r3, #0]
 801fea4:	2b2e      	cmp	r3, #46	; 0x2e
 801fea6:	d112      	bne.n	801fece <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 801fea8:	2301      	movs	r3, #1
 801feaa:	7033      	strb	r3, [r6, #0]
 801feac:	6823      	ldr	r3, [r4, #0]
 801feae:	1c98      	adds	r0, r3, #2
 801feb0:	6020      	str	r0, [r4, #0]
 801feb2:	885b      	ldrh	r3, [r3, #2]
 801feb4:	2b2a      	cmp	r3, #42	; 0x2a
 801feb6:	d118      	bne.n	801feea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>
 801feb8:	f04f 33ff 	mov.w	r3, #4294967295
 801febc:	602b      	str	r3, [r5, #0]
 801febe:	6823      	ldr	r3, [r4, #0]
 801fec0:	3302      	adds	r3, #2
 801fec2:	6023      	str	r3, [r4, #0]
 801fec4:	682b      	ldr	r3, [r5, #0]
 801fec6:	2b06      	cmp	r3, #6
 801fec8:	bfa8      	it	ge
 801feca:	2306      	movge	r3, #6
 801fecc:	602b      	str	r3, [r5, #0]
 801fece:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fed2:	f7ff fee4 	bl	801fc9e <_ZN8touchgfx7Unicode4atoiEPKt>
 801fed6:	6038      	str	r0, [r7, #0]
 801fed8:	6822      	ldr	r2, [r4, #0]
 801feda:	8813      	ldrh	r3, [r2, #0]
 801fedc:	3b30      	subs	r3, #48	; 0x30
 801fede:	b29b      	uxth	r3, r3
 801fee0:	2b09      	cmp	r3, #9
 801fee2:	d8dd      	bhi.n	801fea0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x8c>
 801fee4:	3202      	adds	r2, #2
 801fee6:	6022      	str	r2, [r4, #0]
 801fee8:	e7f6      	b.n	801fed8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc4>
 801feea:	f7ff fed8 	bl	801fc9e <_ZN8touchgfx7Unicode4atoiEPKt>
 801feee:	6028      	str	r0, [r5, #0]
 801fef0:	6822      	ldr	r2, [r4, #0]
 801fef2:	8813      	ldrh	r3, [r2, #0]
 801fef4:	3b30      	subs	r3, #48	; 0x30
 801fef6:	b29b      	uxth	r3, r3
 801fef8:	2b09      	cmp	r3, #9
 801fefa:	d8e3      	bhi.n	801fec4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb0>
 801fefc:	3202      	adds	r2, #2
 801fefe:	6022      	str	r2, [r4, #0]
 801ff00:	e7f6      	b.n	801fef0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xdc>
	...

0801ff04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 801ff04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff08:	b0a3      	sub	sp, #140	; 0x8c
 801ff0a:	2500      	movs	r5, #0
 801ff0c:	4606      	mov	r6, r0
 801ff0e:	4689      	mov	r9, r1
 801ff10:	af11      	add	r7, sp, #68	; 0x44
 801ff12:	9209      	str	r2, [sp, #36]	; 0x24
 801ff14:	4629      	mov	r1, r5
 801ff16:	2242      	movs	r2, #66	; 0x42
 801ff18:	4638      	mov	r0, r7
 801ff1a:	461c      	mov	r4, r3
 801ff1c:	950d      	str	r5, [sp, #52]	; 0x34
 801ff1e:	f7ff f9d8 	bl	801f2d2 <_ZN8touchgfx6memsetEPvhm>
 801ff22:	b116      	cbz	r6, 801ff2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26>
 801ff24:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ff26:	b921      	cbnz	r1, 801ff32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2e>
 801ff28:	8031      	strh	r1, [r6, #0]
 801ff2a:	4630      	mov	r0, r6
 801ff2c:	b023      	add	sp, #140	; 0x8c
 801ff2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ff32:	f8df a250 	ldr.w	sl, [pc, #592]	; 8020184 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x280>
 801ff36:	f109 3bff 	add.w	fp, r9, #4294967295
 801ff3a:	f8da 0000 	ldr.w	r0, [sl]
 801ff3e:	6803      	ldr	r3, [r0, #0]
 801ff40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ff42:	4798      	blx	r3
 801ff44:	9009      	str	r0, [sp, #36]	; 0x24
 801ff46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ff48:	881a      	ldrh	r2, [r3, #0]
 801ff4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ff4c:	2a00      	cmp	r2, #0
 801ff4e:	f000 80c2 	beq.w	80200d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1d2>
 801ff52:	459b      	cmp	fp, r3
 801ff54:	f340 80bf 	ble.w	80200d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1d2>
 801ff58:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801ff5c:	f8b8 2000 	ldrh.w	r2, [r8]
 801ff60:	2a00      	cmp	r2, #0
 801ff62:	d0f0      	beq.n	801ff46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x42>
 801ff64:	2a25      	cmp	r2, #37	; 0x25
 801ff66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801ff68:	f000 80b9 	beq.w	80200de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1da>
 801ff6c:	459b      	cmp	fp, r3
 801ff6e:	f340 80b6 	ble.w	80200de <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1da>
 801ff72:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801ff76:	f108 0202 	add.w	r2, r8, #2
 801ff7a:	3301      	adds	r3, #1
 801ff7c:	9209      	str	r2, [sp, #36]	; 0x24
 801ff7e:	930d      	str	r3, [sp, #52]	; 0x34
 801ff80:	e7ea      	b.n	801ff58 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x54>
 801ff82:	3b63      	subs	r3, #99	; 0x63
 801ff84:	2b01      	cmp	r3, #1
 801ff86:	f200 80f2 	bhi.w	802016e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26a>
 801ff8a:	9710      	str	r7, [sp, #64]	; 0x40
 801ff8c:	8813      	ldrh	r3, [r2, #0]
 801ff8e:	2b69      	cmp	r3, #105	; 0x69
 801ff90:	d068      	beq.n	8020064 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x160>
 801ff92:	d81c      	bhi.n	801ffce <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xca>
 801ff94:	2b63      	cmp	r3, #99	; 0x63
 801ff96:	d031      	beq.n	801fffc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf8>
 801ff98:	2b64      	cmp	r3, #100	; 0x64
 801ff9a:	d063      	beq.n	8020064 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x160>
 801ff9c:	2b58      	cmp	r3, #88	; 0x58
 801ff9e:	f000 8082 	beq.w	80200a6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a2>
 801ffa2:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801ffa6:	46a0      	mov	r8, r4
 801ffa8:	e02f      	b.n	802000a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801ffaa:	2b73      	cmp	r3, #115	; 0x73
 801ffac:	d0ed      	beq.n	801ff8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 801ffae:	d803      	bhi.n	801ffb8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb4>
 801ffb0:	2b6f      	cmp	r3, #111	; 0x6f
 801ffb2:	f040 80dc 	bne.w	802016e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26a>
 801ffb6:	e7e8      	b.n	801ff8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 801ffb8:	2b75      	cmp	r3, #117	; 0x75
 801ffba:	d0e6      	beq.n	801ff8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 801ffbc:	2b78      	cmp	r3, #120	; 0x78
 801ffbe:	e7f8      	b.n	801ffb2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xae>
 801ffc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ffc2:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801ffc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ffc8:	3302      	adds	r3, #2
 801ffca:	9309      	str	r3, [sp, #36]	; 0x24
 801ffcc:	e7bb      	b.n	801ff46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x42>
 801ffce:	2b73      	cmp	r3, #115	; 0x73
 801ffd0:	d037      	beq.n	8020042 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x13e>
 801ffd2:	d808      	bhi.n	801ffe6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe2>
 801ffd4:	2b6f      	cmp	r3, #111	; 0x6f
 801ffd6:	d1e4      	bne.n	801ffa2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801ffd8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ffda:	f104 0804 	add.w	r8, r4, #4
 801ffde:	2308      	movs	r3, #8
 801ffe0:	eba9 0202 	sub.w	r2, r9, r2
 801ffe4:	e059      	b.n	802009a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x196>
 801ffe6:	2b75      	cmp	r3, #117	; 0x75
 801ffe8:	d051      	beq.n	802008e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x18a>
 801ffea:	2b78      	cmp	r3, #120	; 0x78
 801ffec:	d1d9      	bne.n	801ffa2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801ffee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fff0:	f104 0804 	add.w	r8, r4, #4
 801fff4:	2310      	movs	r3, #16
 801fff6:	eba9 0202 	sub.w	r2, r9, r2
 801fffa:	e04e      	b.n	802009a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x196>
 801fffc:	7823      	ldrb	r3, [r4, #0]
 801fffe:	f104 0804 	add.w	r8, r4, #4
 8020002:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 8020006:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 802000a:	aa0d      	add	r2, sp, #52	; 0x34
 802000c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8020010:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 8020014:	a810      	add	r0, sp, #64	; 0x40
 8020016:	9205      	str	r2, [sp, #20]
 8020018:	4644      	mov	r4, r8
 802001a:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 802001e:	9607      	str	r6, [sp, #28]
 8020020:	9204      	str	r2, [sp, #16]
 8020022:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8020024:	f8cd 9018 	str.w	r9, [sp, #24]
 8020028:	9203      	str	r2, [sp, #12]
 802002a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 802002e:	9202      	str	r2, [sp, #8]
 8020030:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8020032:	9201      	str	r2, [sp, #4]
 8020034:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 8020038:	9200      	str	r2, [sp, #0]
 802003a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802003c:	f7ff fe3e 	bl	801fcbc <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 8020040:	e7c1      	b.n	801ffc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xc2>
 8020042:	f8da 0000 	ldr.w	r0, [sl]
 8020046:	f104 0804 	add.w	r8, r4, #4
 802004a:	6821      	ldr	r1, [r4, #0]
 802004c:	6803      	ldr	r3, [r0, #0]
 802004e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8020050:	4798      	blx	r3
 8020052:	9010      	str	r0, [sp, #64]	; 0x40
 8020054:	f8da 0000 	ldr.w	r0, [sl]
 8020058:	9909      	ldr	r1, [sp, #36]	; 0x24
 802005a:	6803      	ldr	r3, [r0, #0]
 802005c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 802005e:	4798      	blx	r3
 8020060:	9009      	str	r0, [sp, #36]	; 0x24
 8020062:	e7d2      	b.n	802000a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 8020064:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020066:	230a      	movs	r3, #10
 8020068:	4639      	mov	r1, r7
 802006a:	6820      	ldr	r0, [r4, #0]
 802006c:	eba9 0202 	sub.w	r2, r9, r2
 8020070:	f104 0804 	add.w	r8, r4, #4
 8020074:	b292      	uxth	r2, r2
 8020076:	f7ff fde0 	bl	801fc3a <_ZN8touchgfx7Unicode4itoaElPtti>
 802007a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 802007e:	2b2d      	cmp	r3, #45	; 0x2d
 8020080:	d1c3      	bne.n	802000a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 8020082:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8020086:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8020088:	3302      	adds	r3, #2
 802008a:	9310      	str	r3, [sp, #64]	; 0x40
 802008c:	e7bd      	b.n	802000a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 802008e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8020090:	f104 0804 	add.w	r8, r4, #4
 8020094:	230a      	movs	r3, #10
 8020096:	eba9 0202 	sub.w	r2, r9, r2
 802009a:	b292      	uxth	r2, r2
 802009c:	4639      	mov	r1, r7
 802009e:	6820      	ldr	r0, [r4, #0]
 80200a0:	f7ff fdae 	bl	801fc00 <_ZN8touchgfx7Unicode4utoaEmPtti.part.0>
 80200a4:	e7b1      	b.n	802000a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 80200a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80200a8:	2310      	movs	r3, #16
 80200aa:	4639      	mov	r1, r7
 80200ac:	6820      	ldr	r0, [r4, #0]
 80200ae:	eba9 0202 	sub.w	r2, r9, r2
 80200b2:	f104 0804 	add.w	r8, r4, #4
 80200b6:	b292      	uxth	r2, r2
 80200b8:	f7ff fda2 	bl	801fc00 <_ZN8touchgfx7Unicode4utoaEmPtti.part.0>
 80200bc:	463a      	mov	r2, r7
 80200be:	8813      	ldrh	r3, [r2, #0]
 80200c0:	2b00      	cmp	r3, #0
 80200c2:	d0a2      	beq.n	802000a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 80200c4:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 80200c8:	3202      	adds	r2, #2
 80200ca:	2919      	cmp	r1, #25
 80200cc:	bf9c      	itt	ls
 80200ce:	3b20      	subls	r3, #32
 80200d0:	f822 3c02 	strhls.w	r3, [r2, #-2]
 80200d4:	e7f3      	b.n	80200be <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1ba>
 80200d6:	2200      	movs	r2, #0
 80200d8:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 80200dc:	e725      	b.n	801ff2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26>
 80200de:	459b      	cmp	fp, r3
 80200e0:	f77f af31 	ble.w	801ff46 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x42>
 80200e4:	f108 0302 	add.w	r3, r8, #2
 80200e8:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 80200ec:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 80200f0:	a809      	add	r0, sp, #36	; 0x24
 80200f2:	9309      	str	r3, [sp, #36]	; 0x24
 80200f4:	ab0f      	add	r3, sp, #60	; 0x3c
 80200f6:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 80200fa:	9304      	str	r3, [sp, #16]
 80200fc:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 8020100:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 8020104:	9303      	str	r3, [sp, #12]
 8020106:	ab0e      	add	r3, sp, #56	; 0x38
 8020108:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 802010c:	9302      	str	r3, [sp, #8]
 802010e:	ab0c      	add	r3, sp, #48	; 0x30
 8020110:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 8020114:	9301      	str	r3, [sp, #4]
 8020116:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 802011a:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 802011e:	9300      	str	r3, [sp, #0]
 8020120:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 8020124:	950e      	str	r5, [sp, #56]	; 0x38
 8020126:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 802012a:	950f      	str	r5, [sp, #60]	; 0x3c
 802012c:	f7ff fe72 	bl	801fe14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 8020130:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8020132:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8020134:	2b00      	cmp	r3, #0
 8020136:	bfbf      	itttt	lt
 8020138:	6823      	ldrlt	r3, [r4, #0]
 802013a:	3404      	addlt	r4, #4
 802013c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8020140:	930e      	strlt	r3, [sp, #56]	; 0x38
 8020142:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8020144:	2b00      	cmp	r3, #0
 8020146:	bfbf      	itttt	lt
 8020148:	6823      	ldrlt	r3, [r4, #0]
 802014a:	3404      	addlt	r4, #4
 802014c:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 8020150:	930f      	strlt	r3, [sp, #60]	; 0x3c
 8020152:	8813      	ldrh	r3, [r2, #0]
 8020154:	2b69      	cmp	r3, #105	; 0x69
 8020156:	f43f af18 	beq.w	801ff8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 802015a:	f63f af26 	bhi.w	801ffaa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa6>
 802015e:	2b58      	cmp	r3, #88	; 0x58
 8020160:	f43f af13 	beq.w	801ff8a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 8020164:	f63f af0d 	bhi.w	801ff82 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x7e>
 8020168:	2b25      	cmp	r3, #37	; 0x25
 802016a:	f43f af29 	beq.w	801ffc0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xbc>
 802016e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020170:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8020174:	f8b8 2000 	ldrh.w	r2, [r8]
 8020178:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 802017c:	3301      	adds	r3, #1
 802017e:	930d      	str	r3, [sp, #52]	; 0x34
 8020180:	e721      	b.n	801ffc6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xc2>
 8020182:	bf00      	nop
 8020184:	20009d38 	.word	0x20009d38

08020188 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8020188:	b5f0      	push	{r4, r5, r6, r7, lr}
 802018a:	4605      	mov	r5, r0
 802018c:	b0a1      	sub	sp, #132	; 0x84
 802018e:	4610      	mov	r0, r2
 8020190:	460e      	mov	r6, r1
 8020192:	4614      	mov	r4, r2
 8020194:	461f      	mov	r7, r3
 8020196:	f7ff fd15 	bl	801fbc4 <_ZN8touchgfx7Unicode6strlenEPKc>
 802019a:	283f      	cmp	r0, #63	; 0x3f
 802019c:	dd06      	ble.n	80201ac <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 802019e:	4b0a      	ldr	r3, [pc, #40]	; (80201c8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 80201a0:	f240 11b9 	movw	r1, #441	; 0x1b9
 80201a4:	4a09      	ldr	r2, [pc, #36]	; (80201cc <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 80201a6:	480a      	ldr	r0, [pc, #40]	; (80201d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 80201a8:	f002 fa1e 	bl	80225e8 <__assert_func>
 80201ac:	4621      	mov	r1, r4
 80201ae:	2240      	movs	r2, #64	; 0x40
 80201b0:	4668      	mov	r0, sp
 80201b2:	f7ff fd13 	bl	801fbdc <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 80201b6:	463b      	mov	r3, r7
 80201b8:	466a      	mov	r2, sp
 80201ba:	4631      	mov	r1, r6
 80201bc:	4628      	mov	r0, r5
 80201be:	f7ff fea1 	bl	801ff04 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 80201c2:	b021      	add	sp, #132	; 0x84
 80201c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80201c6:	bf00      	nop
 80201c8:	08026260 	.word	0x08026260
 80201cc:	080262a3 	.word	0x080262a3
 80201d0:	0802627d 	.word	0x0802627d

080201d4 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 80201d4:	b40c      	push	{r2, r3}
 80201d6:	b507      	push	{r0, r1, r2, lr}
 80201d8:	ab04      	add	r3, sp, #16
 80201da:	f853 2b04 	ldr.w	r2, [r3], #4
 80201de:	9301      	str	r3, [sp, #4]
 80201e0:	f7ff ffd2 	bl	8020188 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 80201e4:	b003      	add	sp, #12
 80201e6:	f85d eb04 	ldr.w	lr, [sp], #4
 80201ea:	b002      	add	sp, #8
 80201ec:	4770      	bx	lr
	...

080201f0 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
 80201f0:	4b26      	ldr	r3, [pc, #152]	; (802028c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x9c>)
 80201f2:	b570      	push	{r4, r5, r6, lr}
 80201f4:	681b      	ldr	r3, [r3, #0]
 80201f6:	4605      	mov	r5, r0
 80201f8:	460c      	mov	r4, r1
 80201fa:	4616      	mov	r6, r2
 80201fc:	b92b      	cbnz	r3, 802020a <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x1a>
 80201fe:	4b24      	ldr	r3, [pc, #144]	; (8020290 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa0>)
 8020200:	2116      	movs	r1, #22
 8020202:	4a24      	ldr	r2, [pc, #144]	; (8020294 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa4>)
 8020204:	4824      	ldr	r0, [pc, #144]	; (8020298 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa8>)
 8020206:	f002 f9ef 	bl	80225e8 <__assert_func>
 802020a:	6898      	ldr	r0, [r3, #8]
 802020c:	6803      	ldr	r3, [r0, #0]
 802020e:	6a1b      	ldr	r3, [r3, #32]
 8020210:	4798      	blx	r3
 8020212:	2810      	cmp	r0, #16
 8020214:	d109      	bne.n	802022a <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x3a>
 8020216:	00e0      	lsls	r0, r4, #3
 8020218:	022c      	lsls	r4, r5, #8
 802021a:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802021e:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 8020222:	ea40 00d6 	orr.w	r0, r0, r6, lsr #3
 8020226:	4320      	orrs	r0, r4
 8020228:	bd70      	pop	{r4, r5, r6, pc}
 802022a:	2818      	cmp	r0, #24
 802022c:	d104      	bne.n	8020238 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>
 802022e:	ea46 2004 	orr.w	r0, r6, r4, lsl #8
 8020232:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8020236:	bd70      	pop	{r4, r5, r6, pc}
 8020238:	2804      	cmp	r0, #4
 802023a:	f04f 01b6 	mov.w	r1, #182	; 0xb6
 802023e:	d109      	bne.n	8020254 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x64>
 8020240:	fb14 f401 	smulbb	r4, r4, r1
 8020244:	2036      	movs	r0, #54	; 0x36
 8020246:	fb10 4405 	smlabb	r4, r0, r5, r4
 802024a:	2013      	movs	r0, #19
 802024c:	fb10 4006 	smlabb	r0, r0, r6, r4
 8020250:	1300      	asrs	r0, r0, #12
 8020252:	bd70      	pop	{r4, r5, r6, pc}
 8020254:	2802      	cmp	r0, #2
 8020256:	d109      	bne.n	802026c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x7c>
 8020258:	fb14 f401 	smulbb	r4, r4, r1
 802025c:	2036      	movs	r0, #54	; 0x36
 802025e:	fb10 4405 	smlabb	r4, r0, r5, r4
 8020262:	2013      	movs	r0, #19
 8020264:	fb10 4006 	smlabb	r0, r0, r6, r4
 8020268:	1380      	asrs	r0, r0, #14
 802026a:	bd70      	pop	{r4, r5, r6, pc}
 802026c:	2801      	cmp	r0, #1
 802026e:	d109      	bne.n	8020284 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x94>
 8020270:	fb14 f401 	smulbb	r4, r4, r1
 8020274:	2036      	movs	r0, #54	; 0x36
 8020276:	fb10 4405 	smlabb	r4, r0, r5, r4
 802027a:	2013      	movs	r0, #19
 802027c:	fb10 4006 	smlabb	r0, r0, r6, r4
 8020280:	13c0      	asrs	r0, r0, #15
 8020282:	bd70      	pop	{r4, r5, r6, pc}
 8020284:	4b05      	ldr	r3, [pc, #20]	; (802029c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xac>)
 8020286:	212f      	movs	r1, #47	; 0x2f
 8020288:	4a02      	ldr	r2, [pc, #8]	; (8020294 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa4>)
 802028a:	e7bb      	b.n	8020204 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x14>
 802028c:	20009d38 	.word	0x20009d38
 8020290:	08026328 	.word	0x08026328
 8020294:	080263ab 	.word	0x080263ab
 8020298:	0802636b 	.word	0x0802636b
 802029c:	0802638f 	.word	0x0802638f

080202a0 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 80202a0:	4b01      	ldr	r3, [pc, #4]	; (80202a8 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 80202a2:	6018      	str	r0, [r3, #0]
 80202a4:	4770      	bx	lr
 80202a6:	bf00      	nop
 80202a8:	20009da8 	.word	0x20009da8

080202ac <_ZN8touchgfx6Bitmap10clearCacheEv>:
 80202ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80202b0:	4f24      	ldr	r7, [pc, #144]	; (8020344 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 80202b2:	683b      	ldr	r3, [r7, #0]
 80202b4:	2b00      	cmp	r3, #0
 80202b6:	d042      	beq.n	802033e <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 80202b8:	4923      	ldr	r1, [pc, #140]	; (8020348 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 80202ba:	4d24      	ldr	r5, [pc, #144]	; (802034c <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 80202bc:	8808      	ldrh	r0, [r1, #0]
 80202be:	882a      	ldrh	r2, [r5, #0]
 80202c0:	4e23      	ldr	r6, [pc, #140]	; (8020350 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 80202c2:	4410      	add	r0, r2
 80202c4:	ea4f 1e02 	mov.w	lr, r2, lsl #4
 80202c8:	4c22      	ldr	r4, [pc, #136]	; (8020354 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 80202ca:	1c41      	adds	r1, r0, #1
 80202cc:	ea4f 0880 	mov.w	r8, r0, lsl #2
 80202d0:	f021 0101 	bic.w	r1, r1, #1
 80202d4:	eb03 0208 	add.w	r2, r3, r8
 80202d8:	0409      	lsls	r1, r1, #16
 80202da:	6032      	str	r2, [r6, #0]
 80202dc:	0c09      	lsrs	r1, r1, #16
 80202de:	0049      	lsls	r1, r1, #1
 80202e0:	eb08 0c01 	add.w	ip, r8, r1
 80202e4:	eb03 020c 	add.w	r2, r3, ip
 80202e8:	44f4      	add	ip, lr
 80202ea:	6022      	str	r2, [r4, #0]
 80202ec:	4463      	add	r3, ip
 80202ee:	4a1a      	ldr	r2, [pc, #104]	; (8020358 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 80202f0:	6013      	str	r3, [r2, #0]
 80202f2:	2300      	movs	r3, #0
 80202f4:	4a19      	ldr	r2, [pc, #100]	; (802035c <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 80202f6:	8013      	strh	r3, [r2, #0]
 80202f8:	4a19      	ldr	r2, [pc, #100]	; (8020360 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 80202fa:	6812      	ldr	r2, [r2, #0]
 80202fc:	eba2 0208 	sub.w	r2, r2, r8
 8020300:	1a52      	subs	r2, r2, r1
 8020302:	4918      	ldr	r1, [pc, #96]	; (8020364 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8020304:	eba2 020e 	sub.w	r2, r2, lr
 8020308:	469e      	mov	lr, r3
 802030a:	600a      	str	r2, [r1, #0]
 802030c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8020310:	4a15      	ldr	r2, [pc, #84]	; (8020368 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 8020312:	8013      	strh	r3, [r2, #0]
 8020314:	4283      	cmp	r3, r0
 8020316:	d007      	beq.n	8020328 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7c>
 8020318:	683a      	ldr	r2, [r7, #0]
 802031a:	f842 e023 	str.w	lr, [r2, r3, lsl #2]
 802031e:	6832      	ldr	r2, [r6, #0]
 8020320:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8020324:	3301      	adds	r3, #1
 8020326:	e7f5      	b.n	8020314 <_ZN8touchgfx6Bitmap10clearCacheEv+0x68>
 8020328:	2300      	movs	r3, #0
 802032a:	882d      	ldrh	r5, [r5, #0]
 802032c:	6820      	ldr	r0, [r4, #0]
 802032e:	4619      	mov	r1, r3
 8020330:	42ab      	cmp	r3, r5
 8020332:	d204      	bcs.n	802033e <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 8020334:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 8020338:	3301      	adds	r3, #1
 802033a:	7391      	strb	r1, [r2, #14]
 802033c:	e7f8      	b.n	8020330 <_ZN8touchgfx6Bitmap10clearCacheEv+0x84>
 802033e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020342:	bf00      	nop
 8020344:	20009dac 	.word	0x20009dac
 8020348:	20009dc8 	.word	0x20009dc8
 802034c:	20009dcc 	.word	0x20009dcc
 8020350:	20009dc0 	.word	0x20009dc0
 8020354:	20009db0 	.word	0x20009db0
 8020358:	20009db8 	.word	0x20009db8
 802035c:	20009dca 	.word	0x20009dca
 8020360:	20009db4 	.word	0x20009db4
 8020364:	20009dc4 	.word	0x20009dc4
 8020368:	20009dbc 	.word	0x20009dbc

0802036c <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 802036c:	4b0f      	ldr	r3, [pc, #60]	; (80203ac <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>)
 802036e:	b510      	push	{r4, lr}
 8020370:	681b      	ldr	r3, [r3, #0]
 8020372:	b9d3      	cbnz	r3, 80203aa <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x3e>
 8020374:	b1c9      	cbz	r1, 80203aa <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x3e>
 8020376:	4b0e      	ldr	r3, [pc, #56]	; (80203b0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8020378:	2406      	movs	r4, #6
 802037a:	801a      	strh	r2, [r3, #0]
 802037c:	b292      	uxth	r2, r2
 802037e:	4b0d      	ldr	r3, [pc, #52]	; (80203b4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8020380:	881b      	ldrh	r3, [r3, #0]
 8020382:	4413      	add	r3, r2
 8020384:	0112      	lsls	r2, r2, #4
 8020386:	fb04 2203 	mla	r2, r4, r3, r2
 802038a:	4291      	cmp	r1, r2
 802038c:	d805      	bhi.n	802039a <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x2e>
 802038e:	4b0a      	ldr	r3, [pc, #40]	; (80203b8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8020390:	2138      	movs	r1, #56	; 0x38
 8020392:	4a0a      	ldr	r2, [pc, #40]	; (80203bc <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8020394:	480a      	ldr	r0, [pc, #40]	; (80203c0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8020396:	f002 f927 	bl	80225e8 <__assert_func>
 802039a:	4b0a      	ldr	r3, [pc, #40]	; (80203c4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 802039c:	6019      	str	r1, [r3, #0]
 802039e:	4b0a      	ldr	r3, [pc, #40]	; (80203c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 80203a0:	6018      	str	r0, [r3, #0]
 80203a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80203a6:	f7ff bf81 	b.w	80202ac <_ZN8touchgfx6Bitmap10clearCacheEv>
 80203aa:	bd10      	pop	{r4, pc}
 80203ac:	20009db8 	.word	0x20009db8
 80203b0:	20009dcc 	.word	0x20009dcc
 80203b4:	20009dc8 	.word	0x20009dc8
 80203b8:	0802646b 	.word	0x0802646b
 80203bc:	08026500 	.word	0x08026500
 80203c0:	08026446 	.word	0x08026446
 80203c4:	20009db4 	.word	0x20009db4
 80203c8:	20009dac 	.word	0x20009dac

080203cc <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80203cc:	b470      	push	{r4, r5, r6}
 80203ce:	4c07      	ldr	r4, [pc, #28]	; (80203ec <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80203d0:	4605      	mov	r5, r0
 80203d2:	4610      	mov	r0, r2
 80203d4:	9a03      	ldr	r2, [sp, #12]
 80203d6:	6826      	ldr	r6, [r4, #0]
 80203d8:	b936      	cbnz	r6, 80203e8 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 80203da:	6025      	str	r5, [r4, #0]
 80203dc:	4c04      	ldr	r4, [pc, #16]	; (80203f0 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 80203de:	8021      	strh	r1, [r4, #0]
 80203e0:	4619      	mov	r1, r3
 80203e2:	bc70      	pop	{r4, r5, r6}
 80203e4:	f7ff bfc2 	b.w	802036c <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 80203e8:	bc70      	pop	{r4, r5, r6}
 80203ea:	4770      	bx	lr
 80203ec:	20009dd0 	.word	0x20009dd0
 80203f0:	20009dc8 	.word	0x20009dc8

080203f4 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 80203f4:	b508      	push	{r3, lr}
 80203f6:	4b13      	ldr	r3, [pc, #76]	; (8020444 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 80203f8:	6819      	ldr	r1, [r3, #0]
 80203fa:	b931      	cbnz	r1, 802040a <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 80203fc:	4b12      	ldr	r3, [pc, #72]	; (8020448 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 80203fe:	f44f 710d 	mov.w	r1, #564	; 0x234
 8020402:	4a12      	ldr	r2, [pc, #72]	; (802044c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8020404:	4812      	ldr	r0, [pc, #72]	; (8020450 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8020406:	f002 f8ef 	bl	80225e8 <__assert_func>
 802040a:	4a12      	ldr	r2, [pc, #72]	; (8020454 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 802040c:	8803      	ldrh	r3, [r0, #0]
 802040e:	8812      	ldrh	r2, [r2, #0]
 8020410:	4293      	cmp	r3, r2
 8020412:	da04      	bge.n	802041e <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 8020414:	2214      	movs	r2, #20
 8020416:	fb02 1303 	mla	r3, r2, r3, r1
 802041a:	8918      	ldrh	r0, [r3, #8]
 802041c:	bd08      	pop	{r3, pc}
 802041e:	490e      	ldr	r1, [pc, #56]	; (8020458 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8020420:	8809      	ldrh	r1, [r1, #0]
 8020422:	4411      	add	r1, r2
 8020424:	428b      	cmp	r3, r1
 8020426:	da05      	bge.n	8020434 <_ZNK8touchgfx6Bitmap8getWidthEv+0x40>
 8020428:	1a9b      	subs	r3, r3, r2
 802042a:	4a0c      	ldr	r2, [pc, #48]	; (802045c <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 802042c:	6812      	ldr	r2, [r2, #0]
 802042e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8020432:	e7f2      	b.n	802041a <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 8020434:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8020438:	4293      	cmp	r3, r2
 802043a:	bf06      	itte	eq
 802043c:	4b08      	ldreq	r3, [pc, #32]	; (8020460 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 802043e:	8818      	ldrheq	r0, [r3, #0]
 8020440:	2000      	movne	r0, #0
 8020442:	bd08      	pop	{r3, pc}
 8020444:	20009dd0 	.word	0x20009dd0
 8020448:	080264c4 	.word	0x080264c4
 802044c:	080265ad 	.word	0x080265ad
 8020450:	08026446 	.word	0x08026446
 8020454:	20009dc8 	.word	0x20009dc8
 8020458:	20009dcc 	.word	0x20009dcc
 802045c:	20009db0 	.word	0x20009db0
 8020460:	20009d2c 	.word	0x20009d2c

08020464 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8020464:	b508      	push	{r3, lr}
 8020466:	4b13      	ldr	r3, [pc, #76]	; (80204b4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8020468:	6819      	ldr	r1, [r3, #0]
 802046a:	b931      	cbnz	r1, 802047a <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 802046c:	4b12      	ldr	r3, [pc, #72]	; (80204b8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 802046e:	f44f 7112 	mov.w	r1, #584	; 0x248
 8020472:	4a12      	ldr	r2, [pc, #72]	; (80204bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8020474:	4812      	ldr	r0, [pc, #72]	; (80204c0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8020476:	f002 f8b7 	bl	80225e8 <__assert_func>
 802047a:	4a12      	ldr	r2, [pc, #72]	; (80204c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 802047c:	8803      	ldrh	r3, [r0, #0]
 802047e:	8812      	ldrh	r2, [r2, #0]
 8020480:	4293      	cmp	r3, r2
 8020482:	da04      	bge.n	802048e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8020484:	2214      	movs	r2, #20
 8020486:	fb02 1303 	mla	r3, r2, r3, r1
 802048a:	8958      	ldrh	r0, [r3, #10]
 802048c:	bd08      	pop	{r3, pc}
 802048e:	490e      	ldr	r1, [pc, #56]	; (80204c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8020490:	8809      	ldrh	r1, [r1, #0]
 8020492:	4411      	add	r1, r2
 8020494:	428b      	cmp	r3, r1
 8020496:	da05      	bge.n	80204a4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x40>
 8020498:	1a9b      	subs	r3, r3, r2
 802049a:	4a0c      	ldr	r2, [pc, #48]	; (80204cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 802049c:	6812      	ldr	r2, [r2, #0]
 802049e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80204a2:	e7f2      	b.n	802048a <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 80204a4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80204a8:	4293      	cmp	r3, r2
 80204aa:	bf06      	itte	eq
 80204ac:	4b08      	ldreq	r3, [pc, #32]	; (80204d0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 80204ae:	8818      	ldrheq	r0, [r3, #0]
 80204b0:	2000      	movne	r0, #0
 80204b2:	bd08      	pop	{r3, pc}
 80204b4:	20009dd0 	.word	0x20009dd0
 80204b8:	080264c4 	.word	0x080264c4
 80204bc:	080265d9 	.word	0x080265d9
 80204c0:	08026446 	.word	0x08026446
 80204c4:	20009dc8 	.word	0x20009dc8
 80204c8:	20009dcc 	.word	0x20009dcc
 80204cc:	20009db0 	.word	0x20009db0
 80204d0:	20009d2e 	.word	0x20009d2e

080204d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 80204d4:	4b22      	ldr	r3, [pc, #136]	; (8020560 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 80204d6:	b510      	push	{r4, lr}
 80204d8:	681c      	ldr	r4, [r3, #0]
 80204da:	b934      	cbnz	r4, 80204ea <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 80204dc:	4b21      	ldr	r3, [pc, #132]	; (8020564 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 80204de:	f44f 7117 	mov.w	r1, #604	; 0x25c
 80204e2:	4a21      	ldr	r2, [pc, #132]	; (8020568 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 80204e4:	4821      	ldr	r0, [pc, #132]	; (802056c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 80204e6:	f002 f87f 	bl	80225e8 <__assert_func>
 80204ea:	4a21      	ldr	r2, [pc, #132]	; (8020570 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 80204ec:	880b      	ldrh	r3, [r1, #0]
 80204ee:	8812      	ldrh	r2, [r2, #0]
 80204f0:	4293      	cmp	r3, r2
 80204f2:	da10      	bge.n	8020516 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x42>
 80204f4:	2214      	movs	r2, #20
 80204f6:	fb02 4303 	mla	r3, r2, r3, r4
 80204fa:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 80204fe:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8020502:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8020506:	8a5b      	ldrh	r3, [r3, #18]
 8020508:	8004      	strh	r4, [r0, #0]
 802050a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802050e:	8041      	strh	r1, [r0, #2]
 8020510:	8082      	strh	r2, [r0, #4]
 8020512:	80c3      	strh	r3, [r0, #6]
 8020514:	bd10      	pop	{r4, pc}
 8020516:	4917      	ldr	r1, [pc, #92]	; (8020574 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 8020518:	8809      	ldrh	r1, [r1, #0]
 802051a:	4411      	add	r1, r2
 802051c:	428b      	cmp	r3, r1
 802051e:	da09      	bge.n	8020534 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 8020520:	1a9b      	subs	r3, r3, r2
 8020522:	4a15      	ldr	r2, [pc, #84]	; (8020578 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 8020524:	6812      	ldr	r2, [r2, #0]
 8020526:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 802052a:	681a      	ldr	r2, [r3, #0]
 802052c:	6002      	str	r2, [r0, #0]
 802052e:	685a      	ldr	r2, [r3, #4]
 8020530:	6042      	str	r2, [r0, #4]
 8020532:	bd10      	pop	{r4, pc}
 8020534:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8020538:	4293      	cmp	r3, r2
 802053a:	d10b      	bne.n	8020554 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 802053c:	4b0f      	ldr	r3, [pc, #60]	; (802057c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 802053e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8020542:	4b0f      	ldr	r3, [pc, #60]	; (8020580 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 8020544:	8081      	strh	r1, [r0, #4]
 8020546:	f9b3 2000 	ldrsh.w	r2, [r3]
 802054a:	2300      	movs	r3, #0
 802054c:	80c2      	strh	r2, [r0, #6]
 802054e:	8003      	strh	r3, [r0, #0]
 8020550:	8043      	strh	r3, [r0, #2]
 8020552:	bd10      	pop	{r4, pc}
 8020554:	2300      	movs	r3, #0
 8020556:	8003      	strh	r3, [r0, #0]
 8020558:	8043      	strh	r3, [r0, #2]
 802055a:	8083      	strh	r3, [r0, #4]
 802055c:	e7d9      	b.n	8020512 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x3e>
 802055e:	bf00      	nop
 8020560:	20009dd0 	.word	0x20009dd0
 8020564:	080264c4 	.word	0x080264c4
 8020568:	08026546 	.word	0x08026546
 802056c:	08026446 	.word	0x08026446
 8020570:	20009dc8 	.word	0x20009dc8
 8020574:	20009dcc 	.word	0x20009dcc
 8020578:	20009db0 	.word	0x20009db0
 802057c:	20009d2c 	.word	0x20009d2c
 8020580:	20009d2e 	.word	0x20009d2e

08020584 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8020584:	4b16      	ldr	r3, [pc, #88]	; (80205e0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>)
 8020586:	681b      	ldr	r3, [r3, #0]
 8020588:	b333      	cbz	r3, 80205d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x54>
 802058a:	4a16      	ldr	r2, [pc, #88]	; (80205e4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 802058c:	8800      	ldrh	r0, [r0, #0]
 802058e:	8812      	ldrh	r2, [r2, #0]
 8020590:	4290      	cmp	r0, r2
 8020592:	da0f      	bge.n	80205b4 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x30>
 8020594:	2214      	movs	r2, #20
 8020596:	fb02 3300 	mla	r3, r2, r0, r3
 802059a:	8a19      	ldrh	r1, [r3, #16]
 802059c:	891a      	ldrh	r2, [r3, #8]
 802059e:	4291      	cmp	r1, r2
 80205a0:	db1c      	blt.n	80205dc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 80205a2:	8a58      	ldrh	r0, [r3, #18]
 80205a4:	f3c0 000c 	ubfx	r0, r0, #0, #13
 80205a8:	895b      	ldrh	r3, [r3, #10]
 80205aa:	4298      	cmp	r0, r3
 80205ac:	bfac      	ite	ge
 80205ae:	2000      	movge	r0, #0
 80205b0:	2001      	movlt	r0, #1
 80205b2:	4770      	bx	lr
 80205b4:	4b0c      	ldr	r3, [pc, #48]	; (80205e8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 80205b6:	881b      	ldrh	r3, [r3, #0]
 80205b8:	4413      	add	r3, r2
 80205ba:	4298      	cmp	r0, r3
 80205bc:	da0c      	bge.n	80205d8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x54>
 80205be:	4b0b      	ldr	r3, [pc, #44]	; (80205ec <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 80205c0:	1a80      	subs	r0, r0, r2
 80205c2:	681b      	ldr	r3, [r3, #0]
 80205c4:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 80205c8:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 80205cc:	891a      	ldrh	r2, [r3, #8]
 80205ce:	4291      	cmp	r1, r2
 80205d0:	db04      	blt.n	80205dc <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 80205d2:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 80205d6:	e7e7      	b.n	80205a8 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x24>
 80205d8:	2000      	movs	r0, #0
 80205da:	4770      	bx	lr
 80205dc:	2001      	movs	r0, #1
 80205de:	4770      	bx	lr
 80205e0:	20009dd0 	.word	0x20009dd0
 80205e4:	20009dc8 	.word	0x20009dc8
 80205e8:	20009dcc 	.word	0x20009dcc
 80205ec:	20009db0 	.word	0x20009db0

080205f0 <_ZNK8touchgfx6Bitmap7getDataEv>:
 80205f0:	b508      	push	{r3, lr}
 80205f2:	4b11      	ldr	r3, [pc, #68]	; (8020638 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>)
 80205f4:	6819      	ldr	r1, [r3, #0]
 80205f6:	b931      	cbnz	r1, 8020606 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80205f8:	4b10      	ldr	r3, [pc, #64]	; (802063c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80205fa:	f44f 7120 	mov.w	r1, #640	; 0x280
 80205fe:	4a10      	ldr	r2, [pc, #64]	; (8020640 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8020600:	4810      	ldr	r0, [pc, #64]	; (8020644 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8020602:	f001 fff1 	bl	80225e8 <__assert_func>
 8020606:	8803      	ldrh	r3, [r0, #0]
 8020608:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802060c:	4293      	cmp	r3, r2
 802060e:	d011      	beq.n	8020634 <_ZNK8touchgfx6Bitmap7getDataEv+0x44>
 8020610:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8020614:	4293      	cmp	r3, r2
 8020616:	d103      	bne.n	8020620 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 8020618:	4b0b      	ldr	r3, [pc, #44]	; (8020648 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 802061a:	681b      	ldr	r3, [r3, #0]
 802061c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 802061e:	bd08      	pop	{r3, pc}
 8020620:	4a0a      	ldr	r2, [pc, #40]	; (802064c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8020622:	6812      	ldr	r2, [r2, #0]
 8020624:	b112      	cbz	r2, 802062c <_ZNK8touchgfx6Bitmap7getDataEv+0x3c>
 8020626:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 802062a:	b920      	cbnz	r0, 8020636 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 802062c:	2214      	movs	r2, #20
 802062e:	4353      	muls	r3, r2
 8020630:	58c8      	ldr	r0, [r1, r3]
 8020632:	bd08      	pop	{r3, pc}
 8020634:	2000      	movs	r0, #0
 8020636:	bd08      	pop	{r3, pc}
 8020638:	20009dd0 	.word	0x20009dd0
 802063c:	080264c4 	.word	0x080264c4
 8020640:	0802657c 	.word	0x0802657c
 8020644:	08026446 	.word	0x08026446
 8020648:	20009d38 	.word	0x20009d38
 802064c:	20009dac 	.word	0x20009dac

08020650 <_ZNK8touchgfx6Bitmap12getAlphaDataEv>:
 8020650:	8802      	ldrh	r2, [r0, #0]
 8020652:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 8020656:	429a      	cmp	r2, r3
 8020658:	dc19      	bgt.n	802068e <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x3e>
 802065a:	4b0e      	ldr	r3, [pc, #56]	; (8020694 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x44>)
 802065c:	881b      	ldrh	r3, [r3, #0]
 802065e:	429a      	cmp	r2, r3
 8020660:	da15      	bge.n	802068e <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x3e>
 8020662:	4b0d      	ldr	r3, [pc, #52]	; (8020698 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x48>)
 8020664:	6819      	ldr	r1, [r3, #0]
 8020666:	2314      	movs	r3, #20
 8020668:	fb03 1302 	mla	r3, r3, r2, r1
 802066c:	6858      	ldr	r0, [r3, #4]
 802066e:	b178      	cbz	r0, 8020690 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x40>
 8020670:	490a      	ldr	r1, [pc, #40]	; (802069c <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x4c>)
 8020672:	6809      	ldr	r1, [r1, #0]
 8020674:	b161      	cbz	r1, 8020690 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x40>
 8020676:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 802067a:	b14a      	cbz	r2, 8020690 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x40>
 802067c:	8919      	ldrh	r1, [r3, #8]
 802067e:	8958      	ldrh	r0, [r3, #10]
 8020680:	4348      	muls	r0, r1
 8020682:	0040      	lsls	r0, r0, #1
 8020684:	3003      	adds	r0, #3
 8020686:	f020 0003 	bic.w	r0, r0, #3
 802068a:	4410      	add	r0, r2
 802068c:	4770      	bx	lr
 802068e:	2000      	movs	r0, #0
 8020690:	4770      	bx	lr
 8020692:	bf00      	nop
 8020694:	20009dc8 	.word	0x20009dc8
 8020698:	20009dd0 	.word	0x20009dd0
 802069c:	20009dac 	.word	0x20009dac

080206a0 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80206a0:	b508      	push	{r3, lr}
 80206a2:	4b1c      	ldr	r3, [pc, #112]	; (8020714 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 80206a4:	6819      	ldr	r1, [r3, #0]
 80206a6:	8803      	ldrh	r3, [r0, #0]
 80206a8:	b1a9      	cbz	r1, 80206d6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x36>
 80206aa:	4a1b      	ldr	r2, [pc, #108]	; (8020718 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 80206ac:	8812      	ldrh	r2, [r2, #0]
 80206ae:	4293      	cmp	r3, r2
 80206b0:	da05      	bge.n	80206be <_ZNK8touchgfx6Bitmap9getFormatEv+0x1e>
 80206b2:	2214      	movs	r2, #20
 80206b4:	fb02 1303 	mla	r3, r2, r3, r1
 80206b8:	7cd8      	ldrb	r0, [r3, #19]
 80206ba:	0940      	lsrs	r0, r0, #5
 80206bc:	bd08      	pop	{r3, pc}
 80206be:	4917      	ldr	r1, [pc, #92]	; (802071c <_ZNK8touchgfx6Bitmap9getFormatEv+0x7c>)
 80206c0:	8809      	ldrh	r1, [r1, #0]
 80206c2:	4411      	add	r1, r2
 80206c4:	428b      	cmp	r3, r1
 80206c6:	da06      	bge.n	80206d6 <_ZNK8touchgfx6Bitmap9getFormatEv+0x36>
 80206c8:	1a9b      	subs	r3, r3, r2
 80206ca:	4a15      	ldr	r2, [pc, #84]	; (8020720 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 80206cc:	6812      	ldr	r2, [r2, #0]
 80206ce:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80206d2:	7b18      	ldrb	r0, [r3, #12]
 80206d4:	bd08      	pop	{r3, pc}
 80206d6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80206da:	4293      	cmp	r3, r2
 80206dc:	d10c      	bne.n	80206f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 80206de:	4b11      	ldr	r3, [pc, #68]	; (8020724 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 80206e0:	681b      	ldr	r3, [r3, #0]
 80206e2:	6898      	ldr	r0, [r3, #8]
 80206e4:	6803      	ldr	r3, [r0, #0]
 80206e6:	6a1b      	ldr	r3, [r3, #32]
 80206e8:	4798      	blx	r3
 80206ea:	2804      	cmp	r0, #4
 80206ec:	d00e      	beq.n	802070c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>
 80206ee:	d805      	bhi.n	80206fc <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 80206f0:	2801      	cmp	r0, #1
 80206f2:	d00d      	beq.n	8020710 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>
 80206f4:	2802      	cmp	r0, #2
 80206f6:	d007      	beq.n	8020708 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>
 80206f8:	2000      	movs	r0, #0
 80206fa:	bd08      	pop	{r3, pc}
 80206fc:	2810      	cmp	r0, #16
 80206fe:	d0fb      	beq.n	80206f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 8020700:	2818      	cmp	r0, #24
 8020702:	d1f9      	bne.n	80206f8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 8020704:	2001      	movs	r0, #1
 8020706:	bd08      	pop	{r3, pc}
 8020708:	2005      	movs	r0, #5
 802070a:	bd08      	pop	{r3, pc}
 802070c:	2006      	movs	r0, #6
 802070e:	bd08      	pop	{r3, pc}
 8020710:	2003      	movs	r0, #3
 8020712:	bd08      	pop	{r3, pc}
 8020714:	20009dd0 	.word	0x20009dd0
 8020718:	20009dc8 	.word	0x20009dc8
 802071c:	20009dcc 	.word	0x20009dcc
 8020720:	20009db0 	.word	0x20009db0
 8020724:	20009d38 	.word	0x20009d38

08020728 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 8020728:	2010      	movs	r0, #16
 802072a:	4770      	bx	lr

0802072c <_ZN8touchgfx8LCD16bpp4initEv>:
 802072c:	4770      	bx	lr
	...

08020730 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt>:
 8020730:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8020734:	b086      	sub	sp, #24
 8020736:	6808      	ldr	r0, [r1, #0]
 8020738:	6849      	ldr	r1, [r1, #4]
 802073a:	4617      	mov	r7, r2
 802073c:	ab04      	add	r3, sp, #16
 802073e:	ac04      	add	r4, sp, #16
 8020740:	c303      	stmia	r3!, {r0, r1}
 8020742:	4620      	mov	r0, r4
 8020744:	f7fd ffe0 	bl	801e708 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020748:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 802074c:	429f      	cmp	r7, r3
 802074e:	d109      	bne.n	8020764 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x34>
 8020750:	4b33      	ldr	r3, [pc, #204]	; (8020820 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xf0>)
 8020752:	781b      	ldrb	r3, [r3, #0]
 8020754:	b933      	cbnz	r3, 8020764 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x34>
 8020756:	4b33      	ldr	r3, [pc, #204]	; (8020824 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xf4>)
 8020758:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 802075c:	4a32      	ldr	r2, [pc, #200]	; (8020828 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xf8>)
 802075e:	4833      	ldr	r0, [pc, #204]	; (802082c <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xfc>)
 8020760:	f001 ff42 	bl	80225e8 <__assert_func>
 8020764:	4e32      	ldr	r6, [pc, #200]	; (8020830 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x100>)
 8020766:	6830      	ldr	r0, [r6, #0]
 8020768:	46b0      	mov	r8, r6
 802076a:	6803      	ldr	r3, [r0, #0]
 802076c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802076e:	4798      	blx	r3
 8020770:	f010 0a01 	ands.w	sl, r0, #1
 8020774:	d020      	beq.n	80207b8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x88>
 8020776:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 802077a:	429f      	cmp	r7, r3
 802077c:	d108      	bne.n	8020790 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x60>
 802077e:	6830      	ldr	r0, [r6, #0]
 8020780:	6803      	ldr	r3, [r0, #0]
 8020782:	e894 0006 	ldmia.w	r4, {r1, r2}
 8020786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020788:	4798      	blx	r3
 802078a:	b006      	add	sp, #24
 802078c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020790:	ad06      	add	r5, sp, #24
 8020792:	f825 7d0c 	strh.w	r7, [r5, #-12]!
 8020796:	4628      	mov	r0, r5
 8020798:	f7ff ff2a 	bl	80205f0 <_ZNK8touchgfx6Bitmap7getDataEv>
 802079c:	6836      	ldr	r6, [r6, #0]
 802079e:	4680      	mov	r8, r0
 80207a0:	4628      	mov	r0, r5
 80207a2:	6833      	ldr	r3, [r6, #0]
 80207a4:	6d9f      	ldr	r7, [r3, #88]	; 0x58
 80207a6:	f7ff fe25 	bl	80203f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80207aa:	4643      	mov	r3, r8
 80207ac:	9000      	str	r0, [sp, #0]
 80207ae:	4630      	mov	r0, r6
 80207b0:	e894 0006 	ldmia.w	r4, {r1, r2}
 80207b4:	47b8      	blx	r7
 80207b6:	e7e8      	b.n	802078a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x5a>
 80207b8:	6830      	ldr	r0, [r6, #0]
 80207ba:	ad06      	add	r5, sp, #24
 80207bc:	4e1d      	ldr	r6, [pc, #116]	; (8020834 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x104>)
 80207be:	6803      	ldr	r3, [r0, #0]
 80207c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80207c2:	4798      	blx	r3
 80207c4:	8834      	ldrh	r4, [r6, #0]
 80207c6:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 80207ca:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 80207ce:	f825 7d0c 	strh.w	r7, [r5, #-12]!
 80207d2:	4657      	mov	r7, sl
 80207d4:	fb02 3404 	mla	r4, r2, r4, r3
 80207d8:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80207dc:	4628      	mov	r0, r5
 80207de:	f7ff ff07 	bl	80205f0 <_ZNK8touchgfx6Bitmap7getDataEv>
 80207e2:	4681      	mov	r9, r0
 80207e4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80207e8:	429f      	cmp	r7, r3
 80207ea:	da14      	bge.n	8020816 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xe6>
 80207ec:	f8d8 0000 	ldr.w	r0, [r8]
 80207f0:	4649      	mov	r1, r9
 80207f2:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80207f6:	3701      	adds	r7, #1
 80207f8:	6802      	ldr	r2, [r0, #0]
 80207fa:	005b      	lsls	r3, r3, #1
 80207fc:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8020800:	4622      	mov	r2, r4
 8020802:	47d0      	blx	sl
 8020804:	8833      	ldrh	r3, [r6, #0]
 8020806:	4628      	mov	r0, r5
 8020808:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802080c:	f7ff fdf2 	bl	80203f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8020810:	eb09 0940 	add.w	r9, r9, r0, lsl #1
 8020814:	e7e6      	b.n	80207e4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xb4>
 8020816:	4628      	mov	r0, r5
 8020818:	f7ff feea 	bl	80205f0 <_ZNK8touchgfx6Bitmap7getDataEv>
 802081c:	e7b5      	b.n	802078a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x5a>
 802081e:	bf00      	nop
 8020820:	20009d37 	.word	0x20009d37
 8020824:	0802665b 	.word	0x0802665b
 8020828:	080267b8 	.word	0x080267b8
 802082c:	08026696 	.word	0x08026696
 8020830:	20009d38 	.word	0x20009d38
 8020834:	20009d32 	.word	0x20009d32

08020838 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 8020838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802083c:	b08d      	sub	sp, #52	; 0x34
 802083e:	4688      	mov	r8, r1
 8020840:	4614      	mov	r4, r2
 8020842:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 8020846:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 802084a:	2f00      	cmp	r7, #0
 802084c:	d047      	beq.n	80208de <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 802084e:	6810      	ldr	r0, [r2, #0]
 8020850:	ae08      	add	r6, sp, #32
 8020852:	6851      	ldr	r1, [r2, #4]
 8020854:	c603      	stmia	r6!, {r0, r1}
 8020856:	6818      	ldr	r0, [r3, #0]
 8020858:	ae0a      	add	r6, sp, #40	; 0x28
 802085a:	6859      	ldr	r1, [r3, #4]
 802085c:	c603      	stmia	r6!, {r0, r1}
 802085e:	a808      	add	r0, sp, #32
 8020860:	f7fd ff52 	bl	801e708 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020864:	4621      	mov	r1, r4
 8020866:	a80a      	add	r0, sp, #40	; 0x28
 8020868:	f7fd ff36 	bl	801e6d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802086c:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8020870:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8020874:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8020878:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 802087c:	fb14 2103 	smlabb	r1, r4, r3, r2
 8020880:	eb08 0441 	add.w	r4, r8, r1, lsl #1
 8020884:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8020888:	f8df 8218 	ldr.w	r8, [pc, #536]	; 8020aa4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x26c>
 802088c:	440a      	add	r2, r1
 802088e:	f8d8 0000 	ldr.w	r0, [r8]
 8020892:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8020896:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 802089a:	4413      	add	r3, r2
 802089c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 80208a0:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 80208a4:	9306      	str	r3, [sp, #24]
 80208a6:	6803      	ldr	r3, [r0, #0]
 80208a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80208aa:	4798      	blx	r3
 80208ac:	2fff      	cmp	r7, #255	; 0xff
 80208ae:	d019      	beq.n	80208e4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 80208b0:	f010 0f04 	tst.w	r0, #4
 80208b4:	d01a      	beq.n	80208ec <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 80208b6:	f8d8 0000 	ldr.w	r0, [r8]
 80208ba:	b2b6      	uxth	r6, r6
 80208bc:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 80208c0:	6801      	ldr	r1, [r0, #0]
 80208c2:	9504      	str	r5, [sp, #16]
 80208c4:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 80208c8:	9703      	str	r7, [sp, #12]
 80208ca:	9502      	str	r5, [sp, #8]
 80208cc:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 80208d0:	9600      	str	r6, [sp, #0]
 80208d2:	9501      	str	r5, [sp, #4]
 80208d4:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80208d8:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 80208da:	4621      	mov	r1, r4
 80208dc:	47a8      	blx	r5
 80208de:	b00d      	add	sp, #52	; 0x34
 80208e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80208e4:	b915      	cbnz	r5, 80208ec <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 80208e6:	f010 0f01 	tst.w	r0, #1
 80208ea:	e7e3      	b.n	80208b4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 80208ec:	f8d8 0000 	ldr.w	r0, [r8]
 80208f0:	6803      	ldr	r3, [r0, #0]
 80208f2:	6a1b      	ldr	r3, [r3, #32]
 80208f4:	4798      	blx	r3
 80208f6:	4b69      	ldr	r3, [pc, #420]	; (8020a9c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x264>)
 80208f8:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 80208fc:	2fff      	cmp	r7, #255	; 0xff
 80208fe:	881d      	ldrh	r5, [r3, #0]
 8020900:	4699      	mov	r9, r3
 8020902:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8020906:	fb01 2505 	mla	r5, r1, r5, r2
 802090a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 802090e:	f000 80a6 	beq.w	8020a5e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x226>
 8020912:	ea44 0205 	orr.w	r2, r4, r5
 8020916:	f5c7 7080 	rsb	r0, r7, #256	; 0x100
 802091a:	f012 0f03 	tst.w	r2, #3
 802091e:	d154      	bne.n	80209ca <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x192>
 8020920:	07f2      	lsls	r2, r6, #31
 8020922:	d452      	bmi.n	80209ca <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x192>
 8020924:	f8bd e024 	ldrh.w	lr, [sp, #36]	; 0x24
 8020928:	f01e 0e01 	ands.w	lr, lr, #1
 802092c:	d14d      	bne.n	80209ca <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x192>
 802092e:	2202      	movs	r2, #2
 8020930:	9307      	str	r3, [sp, #28]
 8020932:	fb96 f8f2 	sdiv	r8, r6, r2
 8020936:	4693      	mov	fp, r2
 8020938:	f1c8 0800 	rsb	r8, r8, #0
 802093c:	9b06      	ldr	r3, [sp, #24]
 802093e:	459e      	cmp	lr, r3
 8020940:	f280 80a5 	bge.w	8020a8e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x256>
 8020944:	f04f 0900 	mov.w	r9, #0
 8020948:	45b1      	cmp	r9, r6
 802094a:	da2e      	bge.n	80209aa <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x172>
 802094c:	6829      	ldr	r1, [r5, #0]
 802094e:	f109 0902 	add.w	r9, r9, #2
 8020952:	f854 2b04 	ldr.w	r2, [r4], #4
 8020956:	0a0b      	lsrs	r3, r1, #8
 8020958:	f001 1a1f 	and.w	sl, r1, #2031647	; 0x1f001f
 802095c:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 8020960:	f003 13f8 	and.w	r3, r3, #16253176	; 0xf800f8
 8020964:	fb00 fa0a 	mul.w	sl, r0, sl
 8020968:	f00c 1cf8 	and.w	ip, ip, #16253176	; 0xf800f8
 802096c:	0949      	lsrs	r1, r1, #5
 802096e:	4343      	muls	r3, r0
 8020970:	f001 113f 	and.w	r1, r1, #4128831	; 0x3f003f
 8020974:	fb07 3c0c 	mla	ip, r7, ip, r3
 8020978:	f002 131f 	and.w	r3, r2, #2031647	; 0x1f001f
 802097c:	0952      	lsrs	r2, r2, #5
 802097e:	4341      	muls	r1, r0
 8020980:	fb07 a303 	mla	r3, r7, r3, sl
 8020984:	f00c 2cf8 	and.w	ip, ip, #4160813056	; 0xf800f800
 8020988:	f002 123f 	and.w	r2, r2, #4128831	; 0x3f003f
 802098c:	0a1b      	lsrs	r3, r3, #8
 802098e:	fb07 1202 	mla	r2, r7, r2, r1
 8020992:	f003 131f 	and.w	r3, r3, #2031647	; 0x1f001f
 8020996:	ea4c 0c03 	orr.w	ip, ip, r3
 802099a:	4b41      	ldr	r3, [pc, #260]	; (8020aa0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x268>)
 802099c:	ea03 02d2 	and.w	r2, r3, r2, lsr #3
 80209a0:	ea4c 0202 	orr.w	r2, ip, r2
 80209a4:	f845 2b04 	str.w	r2, [r5], #4
 80209a8:	e7ce      	b.n	8020948 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x110>
 80209aa:	9b07      	ldr	r3, [sp, #28]
 80209ac:	f10e 0e01 	add.w	lr, lr, #1
 80209b0:	881b      	ldrh	r3, [r3, #0]
 80209b2:	eb08 0353 	add.w	r3, r8, r3, lsr #1
 80209b6:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 80209ba:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 80209be:	fb93 f3fb 	sdiv	r3, r3, fp
 80209c2:	4443      	add	r3, r8
 80209c4:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80209c8:	e7b8      	b.n	802093c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x104>
 80209ca:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 80209ce:	f04f 0800 	mov.w	r8, #0
 80209d2:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8020aa8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x270>
 80209d6:	005b      	lsls	r3, r3, #1
 80209d8:	9307      	str	r3, [sp, #28]
 80209da:	9b06      	ldr	r3, [sp, #24]
 80209dc:	4598      	cmp	r8, r3
 80209de:	da56      	bge.n	8020a8e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x256>
 80209e0:	46aa      	mov	sl, r5
 80209e2:	f04f 0c00 	mov.w	ip, #0
 80209e6:	45b4      	cmp	ip, r6
 80209e8:	da29      	bge.n	8020a3e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x206>
 80209ea:	f8ba 1000 	ldrh.w	r1, [sl]
 80209ee:	f834 201c 	ldrh.w	r2, [r4, ip, lsl #1]
 80209f2:	f10c 0c01 	add.w	ip, ip, #1
 80209f6:	ea01 0309 	and.w	r3, r1, r9
 80209fa:	f401 6bfc 	and.w	fp, r1, #2016	; 0x7e0
 80209fe:	ea02 0e09 	and.w	lr, r2, r9
 8020a02:	f001 011f 	and.w	r1, r1, #31
 8020a06:	4343      	muls	r3, r0
 8020a08:	fb00 fb0b 	mul.w	fp, r0, fp
 8020a0c:	fb07 3e0e 	mla	lr, r7, lr, r3
 8020a10:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 8020a14:	4341      	muls	r1, r0
 8020a16:	f002 021f 	and.w	r2, r2, #31
 8020a1a:	fb07 b303 	mla	r3, r7, r3, fp
 8020a1e:	ea09 2e2e 	and.w	lr, r9, lr, asr #8
 8020a22:	fb07 1202 	mla	r2, r7, r2, r1
 8020a26:	121b      	asrs	r3, r3, #8
 8020a28:	f3c2 2204 	ubfx	r2, r2, #8, #5
 8020a2c:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020a30:	ea4e 0e03 	orr.w	lr, lr, r3
 8020a34:	ea4e 0e02 	orr.w	lr, lr, r2
 8020a38:	f82a eb02 	strh.w	lr, [sl], #2
 8020a3c:	e7d3      	b.n	80209e6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1ae>
 8020a3e:	4b17      	ldr	r3, [pc, #92]	; (8020a9c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x264>)
 8020a40:	f108 0801 	add.w	r8, r8, #1
 8020a44:	9a07      	ldr	r2, [sp, #28]
 8020a46:	881b      	ldrh	r3, [r3, #0]
 8020a48:	1b9b      	subs	r3, r3, r6
 8020a4a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020a4e:	441d      	add	r5, r3
 8020a50:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8020a54:	1b9b      	subs	r3, r3, r6
 8020a56:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8020a5a:	441c      	add	r4, r3
 8020a5c:	e7bd      	b.n	80209da <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a2>
 8020a5e:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 8020a62:	2700      	movs	r7, #0
 8020a64:	9b06      	ldr	r3, [sp, #24]
 8020a66:	429f      	cmp	r7, r3
 8020a68:	da11      	bge.n	8020a8e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x256>
 8020a6a:	f8d8 0000 	ldr.w	r0, [r8]
 8020a6e:	4622      	mov	r2, r4
 8020a70:	4629      	mov	r1, r5
 8020a72:	3701      	adds	r7, #1
 8020a74:	6803      	ldr	r3, [r0, #0]
 8020a76:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8020a78:	4653      	mov	r3, sl
 8020a7a:	47b0      	blx	r6
 8020a7c:	f8b9 3000 	ldrh.w	r3, [r9]
 8020a80:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8020a84:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8020a88:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020a8c:	e7ea      	b.n	8020a64 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x22c>
 8020a8e:	4b05      	ldr	r3, [pc, #20]	; (8020aa4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x26c>)
 8020a90:	6818      	ldr	r0, [r3, #0]
 8020a92:	6803      	ldr	r3, [r0, #0]
 8020a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020a96:	4798      	blx	r3
 8020a98:	e721      	b.n	80208de <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 8020a9a:	bf00      	nop
 8020a9c:	20009d32 	.word	0x20009d32
 8020aa0:	07e007e0 	.word	0x07e007e0
 8020aa4:	20009d38 	.word	0x20009d38
 8020aa8:	fffff800 	.word	0xfffff800

08020aac <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8020aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020ab0:	4615      	mov	r5, r2
 8020ab2:	b08b      	sub	sp, #44	; 0x2c
 8020ab4:	4699      	mov	r9, r3
 8020ab6:	b13b      	cbz	r3, 8020ac8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 8020ab8:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8020abc:	b123      	cbz	r3, 8020ac8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 8020abe:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8020ac2:	2b00      	cmp	r3, #0
 8020ac4:	f040 808c 	bne.w	8020be0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x134>
 8020ac8:	b00b      	add	sp, #44	; 0x2c
 8020aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020ace:	f010 0f08 	tst.w	r0, #8
 8020ad2:	d011      	beq.n	8020af8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x4c>
 8020ad4:	6818      	ldr	r0, [r3, #0]
 8020ad6:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 8020ada:	6801      	ldr	r1, [r0, #0]
 8020adc:	9401      	str	r4, [sp, #4]
 8020ade:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8020ae2:	f8cd 9008 	str.w	r9, [sp, #8]
 8020ae6:	9400      	str	r4, [sp, #0]
 8020ae8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 8020aec:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 8020aee:	4629      	mov	r1, r5
 8020af0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020af4:	47a0      	blx	r4
 8020af6:	e7e7      	b.n	8020ac8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 8020af8:	6818      	ldr	r0, [r3, #0]
 8020afa:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 8020afe:	6803      	ldr	r3, [r0, #0]
 8020b00:	f9bd 8026 	ldrsh.w	r8, [sp, #38]	; 0x26
 8020b04:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8020b08:	6a1b      	ldr	r3, [r3, #32]
 8020b0a:	4798      	blx	r3
 8020b0c:	4a3e      	ldr	r2, [pc, #248]	; (8020c08 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15c>)
 8020b0e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8020b12:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020b16:	8816      	ldrh	r6, [r2, #0]
 8020b18:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8020b1c:	fb06 1303 	mla	r3, r6, r3, r1
 8020b20:	4616      	mov	r6, r2
 8020b22:	ea24 71e4 	bic.w	r1, r4, r4, asr #31
 8020b26:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8020b2a:	d041      	beq.n	8020bb0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x104>
 8020b2c:	f405 4e78 	and.w	lr, r5, #63488	; 0xf800
 8020b30:	f405 67fc 	and.w	r7, r5, #2016	; 0x7e0
 8020b34:	f005 051f 	and.w	r5, r5, #31
 8020b38:	f5c9 7680 	rsb	r6, r9, #256	; 0x100
 8020b3c:	fb09 fe0e 	mul.w	lr, r9, lr
 8020b40:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 8020c10 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x164>
 8020b44:	fb09 f305 	mul.w	r3, r9, r5
 8020b48:	2500      	movs	r5, #0
 8020b4a:	fb09 f707 	mul.w	r7, r9, r7
 8020b4e:	9306      	str	r3, [sp, #24]
 8020b50:	004b      	lsls	r3, r1, #1
 8020b52:	9207      	str	r2, [sp, #28]
 8020b54:	9305      	str	r3, [sp, #20]
 8020b56:	4545      	cmp	r5, r8
 8020b58:	da3c      	bge.n	8020bd4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x128>
 8020b5a:	4681      	mov	r9, r0
 8020b5c:	f04f 0c00 	mov.w	ip, #0
 8020b60:	45a4      	cmp	ip, r4
 8020b62:	da1c      	bge.n	8020b9e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf2>
 8020b64:	f8b9 2000 	ldrh.w	r2, [r9]
 8020b68:	f10c 0c01 	add.w	ip, ip, #1
 8020b6c:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 8020b70:	ea02 010b 	and.w	r1, r2, fp
 8020b74:	fb06 7303 	mla	r3, r6, r3, r7
 8020b78:	fb06 e101 	mla	r1, r6, r1, lr
 8020b7c:	0a1b      	lsrs	r3, r3, #8
 8020b7e:	ea0b 2111 	and.w	r1, fp, r1, lsr #8
 8020b82:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020b86:	430b      	orrs	r3, r1
 8020b88:	f002 011f 	and.w	r1, r2, #31
 8020b8c:	9a06      	ldr	r2, [sp, #24]
 8020b8e:	fb06 2101 	mla	r1, r6, r1, r2
 8020b92:	f3c1 2104 	ubfx	r1, r1, #8, #5
 8020b96:	430b      	orrs	r3, r1
 8020b98:	f829 3b02 	strh.w	r3, [r9], #2
 8020b9c:	e7e0      	b.n	8020b60 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb4>
 8020b9e:	9b07      	ldr	r3, [sp, #28]
 8020ba0:	3501      	adds	r5, #1
 8020ba2:	9a05      	ldr	r2, [sp, #20]
 8020ba4:	881b      	ldrh	r3, [r3, #0]
 8020ba6:	ebca 0343 	rsb	r3, sl, r3, lsl #1
 8020baa:	4413      	add	r3, r2
 8020bac:	4418      	add	r0, r3
 8020bae:	e7d2      	b.n	8020b56 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 8020bb0:	0049      	lsls	r1, r1, #1
 8020bb2:	2200      	movs	r2, #0
 8020bb4:	4542      	cmp	r2, r8
 8020bb6:	da0d      	bge.n	8020bd4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x128>
 8020bb8:	2300      	movs	r3, #0
 8020bba:	42a3      	cmp	r3, r4
 8020bbc:	da03      	bge.n	8020bc6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x11a>
 8020bbe:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
 8020bc2:	3301      	adds	r3, #1
 8020bc4:	e7f9      	b.n	8020bba <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x10e>
 8020bc6:	8833      	ldrh	r3, [r6, #0]
 8020bc8:	3201      	adds	r2, #1
 8020bca:	ebca 0343 	rsb	r3, sl, r3, lsl #1
 8020bce:	440b      	add	r3, r1
 8020bd0:	4418      	add	r0, r3
 8020bd2:	e7ef      	b.n	8020bb4 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x108>
 8020bd4:	4b0d      	ldr	r3, [pc, #52]	; (8020c0c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x160>)
 8020bd6:	6818      	ldr	r0, [r3, #0]
 8020bd8:	6803      	ldr	r3, [r0, #0]
 8020bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020bdc:	4798      	blx	r3
 8020bde:	e773      	b.n	8020ac8 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 8020be0:	6808      	ldr	r0, [r1, #0]
 8020be2:	ab08      	add	r3, sp, #32
 8020be4:	6849      	ldr	r1, [r1, #4]
 8020be6:	4c09      	ldr	r4, [pc, #36]	; (8020c0c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x160>)
 8020be8:	c303      	stmia	r3!, {r0, r1}
 8020bea:	a808      	add	r0, sp, #32
 8020bec:	f7fd fd8c 	bl	801e708 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020bf0:	6820      	ldr	r0, [r4, #0]
 8020bf2:	6803      	ldr	r3, [r0, #0]
 8020bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020bf6:	4798      	blx	r3
 8020bf8:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020bfc:	4623      	mov	r3, r4
 8020bfe:	f47f af66 	bne.w	8020ace <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x22>
 8020c02:	f010 0f02 	tst.w	r0, #2
 8020c06:	e764      	b.n	8020ad2 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x26>
 8020c08:	20009d32 	.word	0x20009d32
 8020c0c:	20009d38 	.word	0x20009d38
 8020c10:	fffff800 	.word	0xfffff800

08020c14 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>:
 8020c14:	ee07 0a90 	vmov	s15, r0
 8020c18:	ee70 0ac0 	vsub.f32	s1, s1, s0
 8020c1c:	ee71 1ac1 	vsub.f32	s3, s3, s2
 8020c20:	eddf 6a08 	vldr	s13, [pc, #32]	; 8020c44 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh+0x30>
 8020c24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020c28:	eea0 0a82 	vfma.f32	s0, s1, s4
 8020c2c:	eea1 1a82 	vfma.f32	s2, s3, s4
 8020c30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020c34:	ee31 1a40 	vsub.f32	s2, s2, s0
 8020c38:	eea2 0a81 	vfma.f32	s0, s5, s2
 8020c3c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8020c40:	4770      	bx	lr
 8020c42:	bf00      	nop
 8020c44:	437f0000 	.word	0x437f0000

08020c48 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8020c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020c4c:	ed2d 8b0e 	vpush	{d8-d14}
 8020c50:	b095      	sub	sp, #84	; 0x54
 8020c52:	461e      	mov	r6, r3
 8020c54:	2700      	movs	r7, #0
 8020c56:	4690      	mov	r8, r2
 8020c58:	f8bd 30c0 	ldrh.w	r3, [sp, #192]	; 0xc0
 8020c5c:	a812      	add	r0, sp, #72	; 0x48
 8020c5e:	468a      	mov	sl, r1
 8020c60:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8020c62:	9311      	str	r3, [sp, #68]	; 0x44
 8020c64:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8020c68:	f8dd 90bc 	ldr.w	r9, [sp, #188]	; 0xbc
 8020c6c:	9301      	str	r3, [sp, #4]
 8020c6e:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020c70:	f8ad 7048 	strh.w	r7, [sp, #72]	; 0x48
 8020c74:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8020c78:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8020c7c:	f8ad 704a 	strh.w	r7, [sp, #74]	; 0x4a
 8020c80:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 8020c84:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
 8020c88:	f7fd fd3e 	bl	801e708 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020c8c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020c8e:	6835      	ldr	r5, [r6, #0]
 8020c90:	6818      	ldr	r0, [r3, #0]
 8020c92:	f9b4 3000 	ldrsh.w	r3, [r4]
 8020c96:	f9b9 e000 	ldrsh.w	lr, [r9]
 8020c9a:	1b40      	subs	r0, r0, r5
 8020c9c:	18e9      	adds	r1, r5, r3
 8020c9e:	ebae 0c01 	sub.w	ip, lr, r1
 8020ca2:	4560      	cmp	r0, ip
 8020ca4:	f340 86a2 	ble.w	80219ec <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 8020ca8:	f8b9 9004 	ldrh.w	r9, [r9, #4]
 8020cac:	44f1      	add	r9, lr
 8020cae:	fa0f f989 	sxth.w	r9, r9
 8020cb2:	4549      	cmp	r1, r9
 8020cb4:	f300 869a 	bgt.w	80219ec <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 8020cb8:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 8020cbc:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8020cc0:	6972      	ldr	r2, [r6, #20]
 8020cc2:	ed96 6a07 	vldr	s12, [r6, #28]
 8020cc6:	4422      	add	r2, r4
 8020cc8:	f8da 4004 	ldr.w	r4, [sl, #4]
 8020ccc:	ed98 ba09 	vldr	s22, [r8, #36]	; 0x24
 8020cd0:	fb04 5402 	mla	r4, r4, r2, r5
 8020cd4:	f8bd 20c8 	ldrh.w	r2, [sp, #200]	; 0xc8
 8020cd8:	edd8 ba0b 	vldr	s23, [r8, #44]	; 0x2c
 8020cdc:	4282      	cmp	r2, r0
 8020cde:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
 8020ce2:	ed96 7a0d 	vldr	s14, [r6, #52]	; 0x34
 8020ce6:	441c      	add	r4, r3
 8020ce8:	bfa8      	it	ge
 8020cea:	4602      	movge	r2, r0
 8020cec:	f8da b000 	ldr.w	fp, [sl]
 8020cf0:	458e      	cmp	lr, r1
 8020cf2:	ee06 2a90 	vmov	s13, r2
 8020cf6:	eb0b 0444 	add.w	r4, fp, r4, lsl #1
 8020cfa:	9208      	str	r2, [sp, #32]
 8020cfc:	eeb8 9ae6 	vcvt.f32.s32	s18, s13
 8020d00:	edd8 6a0d 	vldr	s13, [r8, #52]	; 0x34
 8020d04:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8020d08:	ee69 ba2b 	vmul.f32	s23, s18, s23
 8020d0c:	ee29 9a26 	vmul.f32	s18, s18, s13
 8020d10:	eecc 6a06 	vdiv.f32	s13, s24, s12
 8020d14:	ee37 aaab 	vadd.f32	s20, s15, s23
 8020d18:	ee77 aa09 	vadd.f32	s21, s14, s18
 8020d1c:	ee76 9a0b 	vadd.f32	s19, s12, s22
 8020d20:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8020d24:	ee27 7a26 	vmul.f32	s14, s14, s13
 8020d28:	dc01      	bgt.n	8020d2e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xe6>
 8020d2a:	970a      	str	r7, [sp, #40]	; 0x28
 8020d2c:	e029      	b.n	8020d82 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13a>
 8020d2e:	9a08      	ldr	r2, [sp, #32]
 8020d30:	fb9c f1f2 	sdiv	r1, ip, r2
 8020d34:	ee06 1a90 	vmov	s13, r1
 8020d38:	434a      	muls	r2, r1
 8020d3a:	2900      	cmp	r1, #0
 8020d3c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8020d40:	ebac 0602 	sub.w	r6, ip, r2
 8020d44:	960a      	str	r6, [sp, #40]	; 0x28
 8020d46:	eeeb 9a26 	vfma.f32	s19, s22, s13
 8020d4a:	eeab aaa6 	vfma.f32	s20, s23, s13
 8020d4e:	eee9 aa26 	vfma.f32	s21, s18, s13
 8020d52:	dd12      	ble.n	8020d7a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x132>
 8020d54:	ee79 7acb 	vsub.f32	s15, s19, s22
 8020d58:	ee3a 7ac9 	vsub.f32	s14, s21, s18
 8020d5c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8020d60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020d64:	bf14      	ite	ne
 8020d66:	eecc 6a27 	vdivne.f32	s13, s24, s15
 8020d6a:	eef0 6a4c 	vmoveq.f32	s13, s24
 8020d6e:	ee7a 7a6b 	vsub.f32	s15, s20, s23
 8020d72:	ee27 7a26 	vmul.f32	s14, s14, s13
 8020d76:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8020d7a:	1a80      	subs	r0, r0, r2
 8020d7c:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 8020d80:	4415      	add	r5, r2
 8020d82:	18ea      	adds	r2, r5, r3
 8020d84:	4402      	add	r2, r0
 8020d86:	4591      	cmp	r9, r2
 8020d88:	bfbc      	itt	lt
 8020d8a:	eba9 0003 	sublt.w	r0, r9, r3
 8020d8e:	1b40      	sublt	r0, r0, r5
 8020d90:	2800      	cmp	r0, #0
 8020d92:	f340 862b 	ble.w	80219ec <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 8020d96:	9b08      	ldr	r3, [sp, #32]
 8020d98:	9a08      	ldr	r2, [sp, #32]
 8020d9a:	fb90 f3f3 	sdiv	r3, r0, r3
 8020d9e:	9309      	str	r3, [sp, #36]	; 0x24
 8020da0:	fb02 0313 	mls	r3, r2, r3, r0
 8020da4:	930c      	str	r3, [sp, #48]	; 0x30
 8020da6:	b91b      	cbnz	r3, 8020db0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x168>
 8020da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020daa:	920c      	str	r2, [sp, #48]	; 0x30
 8020dac:	3b01      	subs	r3, #1
 8020dae:	9309      	str	r3, [sp, #36]	; 0x24
 8020db0:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020db2:	eddf ca40 	vldr	s25, [pc, #256]	; 8020eb4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x26c>
 8020db6:	681b      	ldr	r3, [r3, #0]
 8020db8:	9304      	str	r3, [sp, #16]
 8020dba:	9b01      	ldr	r3, [sp, #4]
 8020dbc:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8020dc0:	9305      	str	r3, [sp, #20]
 8020dc2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020dc4:	2b00      	cmp	r3, #0
 8020dc6:	dc03      	bgt.n	8020dd0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x188>
 8020dc8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020dca:	2b00      	cmp	r3, #0
 8020dcc:	f340 860e 	ble.w	80219ec <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 8020dd0:	ee8c 8a29 	vdiv.f32	s16, s24, s19
 8020dd4:	9b08      	ldr	r3, [sp, #32]
 8020dd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020dd8:	eef0 6a67 	vmov.f32	s13, s15
 8020ddc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020de0:	ee16 ba90 	vmov	fp, s13
 8020de4:	eef0 6a47 	vmov.f32	s13, s14
 8020de8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020dec:	ee6a 8a08 	vmul.f32	s17, s20, s16
 8020df0:	ee2a 8a88 	vmul.f32	s16, s21, s16
 8020df4:	ee16 5a90 	vmov	r5, s13
 8020df8:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8020dfc:	ee38 7a47 	vsub.f32	s14, s16, s14
 8020e00:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8020e04:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8020e08:	ee17 2a90 	vmov	r2, s15
 8020e0c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e10:	ee17 2a10 	vmov	r2, s14
 8020e14:	9306      	str	r3, [sp, #24]
 8020e16:	9b08      	ldr	r3, [sp, #32]
 8020e18:	fb92 f3f3 	sdiv	r3, r2, r3
 8020e1c:	9a08      	ldr	r2, [sp, #32]
 8020e1e:	9307      	str	r3, [sp, #28]
 8020e20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020e22:	2900      	cmp	r1, #0
 8020e24:	bfc8      	it	gt
 8020e26:	4613      	movgt	r3, r2
 8020e28:	9302      	str	r3, [sp, #8]
 8020e2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020e2c:	2b00      	cmp	r3, #0
 8020e2e:	dd0d      	ble.n	8020e4c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x204>
 8020e30:	9a06      	ldr	r2, [sp, #24]
 8020e32:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020e36:	fb02 bb03 	mla	fp, r2, r3, fp
 8020e3a:	9a07      	ldr	r2, [sp, #28]
 8020e3c:	fb02 5503 	mla	r5, r2, r3, r5
 8020e40:	9b02      	ldr	r3, [sp, #8]
 8020e42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020e44:	1a9b      	subs	r3, r3, r2
 8020e46:	9302      	str	r3, [sp, #8]
 8020e48:	2300      	movs	r3, #0
 8020e4a:	930a      	str	r3, [sp, #40]	; 0x28
 8020e4c:	ea5f 432b 	movs.w	r3, fp, asr #16
 8020e50:	d42e      	bmi.n	8020eb0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 8020e52:	f9bd 004c 	ldrsh.w	r0, [sp, #76]	; 0x4c
 8020e56:	4283      	cmp	r3, r0
 8020e58:	da2a      	bge.n	8020eb0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 8020e5a:	142b      	asrs	r3, r5, #16
 8020e5c:	d428      	bmi.n	8020eb0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 8020e5e:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 8020e62:	428b      	cmp	r3, r1
 8020e64:	da24      	bge.n	8020eb0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 8020e66:	9b02      	ldr	r3, [sp, #8]
 8020e68:	9a06      	ldr	r2, [sp, #24]
 8020e6a:	3b01      	subs	r3, #1
 8020e6c:	fb03 b202 	mla	r2, r3, r2, fp
 8020e70:	1412      	asrs	r2, r2, #16
 8020e72:	d41d      	bmi.n	8020eb0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 8020e74:	4282      	cmp	r2, r0
 8020e76:	da1b      	bge.n	8020eb0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 8020e78:	9a07      	ldr	r2, [sp, #28]
 8020e7a:	fb03 5302 	mla	r3, r3, r2, r5
 8020e7e:	141b      	asrs	r3, r3, #16
 8020e80:	d416      	bmi.n	8020eb0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 8020e82:	428b      	cmp	r3, r1
 8020e84:	bfb4      	ite	lt
 8020e86:	2300      	movlt	r3, #0
 8020e88:	2301      	movge	r3, #1
 8020e8a:	9303      	str	r3, [sp, #12]
 8020e8c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020e8e:	2b0b      	cmp	r3, #11
 8020e90:	f200 82d7 	bhi.w	8021442 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7fa>
 8020e94:	e8df f013 	tbh	[pc, r3, lsl #1]
 8020e98:	03430531 	.word	0x03430531
 8020e9c:	02ca02e8 	.word	0x02ca02e8
 8020ea0:	02d502d5 	.word	0x02d502d5
 8020ea4:	02d502d5 	.word	0x02d502d5
 8020ea8:	01c5026b 	.word	0x01c5026b
 8020eac:	00100160 	.word	0x00100160
 8020eb0:	2301      	movs	r3, #1
 8020eb2:	e7ea      	b.n	8020e8a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x242>
 8020eb4:	3d800000 	.word	0x3d800000
 8020eb8:	f04f 0a00 	mov.w	sl, #0
 8020ebc:	9b02      	ldr	r3, [sp, #8]
 8020ebe:	4553      	cmp	r3, sl
 8020ec0:	f340 82bb 	ble.w	802143a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 8020ec4:	9a03      	ldr	r2, [sp, #12]
 8020ec6:	ea4f 412b 	mov.w	r1, fp, asr #16
 8020eca:	142b      	asrs	r3, r5, #16
 8020ecc:	b17a      	cbz	r2, 8020eee <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a6>
 8020ece:	2900      	cmp	r1, #0
 8020ed0:	f2c0 813b 	blt.w	802114a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 8020ed4:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8020ed8:	4291      	cmp	r1, r2
 8020eda:	f280 8136 	bge.w	802114a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 8020ede:	2b00      	cmp	r3, #0
 8020ee0:	f2c0 8133 	blt.w	802114a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 8020ee4:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 8020ee8:	4293      	cmp	r3, r2
 8020eea:	f280 812e 	bge.w	802114a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 8020eee:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8020ef2:	9804      	ldr	r0, [sp, #16]
 8020ef4:	fb03 1102 	mla	r1, r3, r2, r1
 8020ef8:	9b04      	ldr	r3, [sp, #16]
 8020efa:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8020efe:	f850 7021 	ldr.w	r7, [r0, r1, lsl #2]
 8020f02:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020f06:	f007 16ff 	and.w	r6, r7, #16711935	; 0xff00ff
 8020f0a:	6859      	ldr	r1, [r3, #4]
 8020f0c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8020f10:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8020f14:	685a      	ldr	r2, [r3, #4]
 8020f16:	0e3b      	lsrs	r3, r7, #24
 8020f18:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020f1c:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8020f20:	435e      	muls	r6, r3
 8020f22:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8020f26:	435f      	muls	r7, r3
 8020f28:	ee06 ea90 	vmov	s13, lr
 8020f2c:	0a36      	lsrs	r6, r6, #8
 8020f2e:	ee07 3a90 	vmov	s15, r3
 8020f32:	0a3f      	lsrs	r7, r7, #8
 8020f34:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8020f38:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020f3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020f40:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020f44:	433e      	orrs	r6, r7
 8020f46:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8020f4a:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8020f4e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8020f52:	fb0e f707 	mul.w	r7, lr, r7
 8020f56:	fb0e f101 	mul.w	r1, lr, r1
 8020f5a:	0a3f      	lsrs	r7, r7, #8
 8020f5c:	960b      	str	r6, [sp, #44]	; 0x2c
 8020f5e:	0a09      	lsrs	r1, r1, #8
 8020f60:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020f64:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8020f68:	430f      	orrs	r7, r1
 8020f6a:	0e01      	lsrs	r1, r0, #24
 8020f6c:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020f70:	fb01 f808 	mul.w	r8, r1, r8
 8020f74:	ee07 1a10 	vmov	s14, r1
 8020f78:	4348      	muls	r0, r1
 8020f7a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020f7e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020f82:	0a00      	lsrs	r0, r0, #8
 8020f84:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8020f88:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020f8c:	ea48 0800 	orr.w	r8, r8, r0
 8020f90:	0e10      	lsrs	r0, r2, #24
 8020f92:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020f96:	fb00 f909 	mul.w	r9, r0, r9
 8020f9a:	4342      	muls	r2, r0
 8020f9c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020fa0:	0a12      	lsrs	r2, r2, #8
 8020fa2:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8020fa6:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020faa:	ea49 0902 	orr.w	r9, r9, r2
 8020fae:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8020fb2:	ee0d 2a10 	vmov	s26, r2
 8020fb6:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8020fba:	ea4f 4319 	mov.w	r3, r9, lsr #16
 8020fbe:	eeb8 dacd 	vcvt.f32.s32	s26, s26
 8020fc2:	ee0d 2a90 	vmov	s27, r2
 8020fc6:	ee01 3a90 	vmov	s3, r3
 8020fca:	ea4f 4318 	mov.w	r3, r8, lsr #16
 8020fce:	eef8 daed 	vcvt.f32.s32	s27, s27
 8020fd2:	ee2d da2c 	vmul.f32	s26, s26, s25
 8020fd6:	ee01 3a10 	vmov	s2, r3
 8020fda:	0c3b      	lsrs	r3, r7, #16
 8020fdc:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8020fe0:	ee6d daac 	vmul.f32	s27, s27, s25
 8020fe4:	eeed 7a26 	vfma.f32	s15, s26, s13
 8020fe8:	ee06 0a90 	vmov	s13, r0
 8020fec:	ee00 3a90 	vmov	s1, r3
 8020ff0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020ff2:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8020ff6:	0c1b      	lsrs	r3, r3, #16
 8020ff8:	eef0 2a6d 	vmov.f32	s5, s27
 8020ffc:	eeb0 2a4d 	vmov.f32	s4, s26
 8021000:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8021004:	ee00 3a10 	vmov	s0, r3
 8021008:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 802100c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8021010:	eead 7a26 	vfma.f32	s14, s26, s13
 8021014:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8021018:	ee37 7a67 	vsub.f32	s14, s14, s15
 802101c:	eeed 7a87 	vfma.f32	s15, s27, s14
 8021020:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021024:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8021028:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 802102c:	4630      	mov	r0, r6
 802102e:	f7ff fdf1 	bl	8020c14 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 8021032:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8021036:	eeb0 ea40 	vmov.f32	s28, s0
 802103a:	4630      	mov	r0, r6
 802103c:	ee01 3a90 	vmov	s3, r3
 8021040:	f3c8 2307 	ubfx	r3, r8, #8, #8
 8021044:	eef0 2a6d 	vmov.f32	s5, s27
 8021048:	ee01 3a10 	vmov	s2, r3
 802104c:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8021050:	eeb0 2a4d 	vmov.f32	s4, s26
 8021054:	ee00 3a90 	vmov	s1, r3
 8021058:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 802105a:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 802105e:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8021062:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8021066:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 802106a:	ee00 3a10 	vmov	s0, r3
 802106e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8021072:	f7ff fdcf 	bl	8020c14 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 8021076:	eef0 ea40 	vmov.f32	s29, s0
 802107a:	fa5f f389 	uxtb.w	r3, r9
 802107e:	4630      	mov	r0, r6
 8021080:	eef0 2a6d 	vmov.f32	s5, s27
 8021084:	ee01 3a90 	vmov	s3, r3
 8021088:	fa5f f388 	uxtb.w	r3, r8
 802108c:	eeb0 2a4d 	vmov.f32	s4, s26
 8021090:	ee01 3a10 	vmov	s2, r3
 8021094:	b2fb      	uxtb	r3, r7
 8021096:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 802109a:	ee00 3a90 	vmov	s1, r3
 802109e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80210a2:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80210a6:	ee00 3a10 	vmov	s0, r3
 80210aa:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80210ae:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80210b2:	f7ff fdaf 	bl	8020c14 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 80210b6:	2e00      	cmp	r6, #0
 80210b8:	d047      	beq.n	802114a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 80210ba:	eefc 7aee 	vcvt.u32.f32	s15, s29
 80210be:	2eff      	cmp	r6, #255	; 0xff
 80210c0:	ee17 2a90 	vmov	r2, s15
 80210c4:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80210c8:	f3c2 0285 	ubfx	r2, r2, #2, #6
 80210cc:	ee17 3a90 	vmov	r3, s15
 80210d0:	eefc 7ace 	vcvt.u32.f32	s15, s28
 80210d4:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80210d8:	ea43 1242 	orr.w	r2, r3, r2, lsl #5
 80210dc:	ee17 3a90 	vmov	r3, s15
 80210e0:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 80210e4:	ea42 23c3 	orr.w	r3, r2, r3, lsl #11
 80210e8:	d102      	bne.n	80210f0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x4a8>
 80210ea:	9a01      	ldr	r2, [sp, #4]
 80210ec:	2aff      	cmp	r2, #255	; 0xff
 80210ee:	d02a      	beq.n	8021146 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x4fe>
 80210f0:	f834 001a 	ldrh.w	r0, [r4, sl, lsl #1]
 80210f4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80210f8:	f400 67fc 	and.w	r7, r0, #2016	; 0x7e0
 80210fc:	fb12 fe06 	smulbb	lr, r2, r6
 8021100:	f420 62ff 	bic.w	r2, r0, #2040	; 0x7f8
 8021104:	f423 66ff 	bic.w	r6, r3, #2040	; 0x7f8
 8021108:	f000 001f 	and.w	r0, r0, #31
 802110c:	f5ce 3180 	rsb	r1, lr, #65536	; 0x10000
 8021110:	f022 0207 	bic.w	r2, r2, #7
 8021114:	f026 0607 	bic.w	r6, r6, #7
 8021118:	434a      	muls	r2, r1
 802111a:	434f      	muls	r7, r1
 802111c:	fb0e 2606 	mla	r6, lr, r6, r2
 8021120:	4ad0      	ldr	r2, [pc, #832]	; (8021464 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 8021122:	4348      	muls	r0, r1
 8021124:	ea02 4616 	and.w	r6, r2, r6, lsr #16
 8021128:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 802112c:	f003 031f 	and.w	r3, r3, #31
 8021130:	fb0e 7202 	mla	r2, lr, r2, r7
 8021134:	fb0e 0303 	mla	r3, lr, r3, r0
 8021138:	0c12      	lsrs	r2, r2, #16
 802113a:	f3c3 4304 	ubfx	r3, r3, #16, #5
 802113e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021142:	4316      	orrs	r6, r2
 8021144:	4333      	orrs	r3, r6
 8021146:	f824 301a 	strh.w	r3, [r4, sl, lsl #1]
 802114a:	9b06      	ldr	r3, [sp, #24]
 802114c:	f10a 0a01 	add.w	sl, sl, #1
 8021150:	449b      	add	fp, r3
 8021152:	9b07      	ldr	r3, [sp, #28]
 8021154:	441d      	add	r5, r3
 8021156:	e6b1      	b.n	8020ebc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x274>
 8021158:	2000      	movs	r0, #0
 802115a:	9b02      	ldr	r3, [sp, #8]
 802115c:	4283      	cmp	r3, r0
 802115e:	f340 816c 	ble.w	802143a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 8021162:	9b03      	ldr	r3, [sp, #12]
 8021164:	ea4f 422b 	mov.w	r2, fp, asr #16
 8021168:	1429      	asrs	r1, r5, #16
 802116a:	b15b      	cbz	r3, 8021184 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x53c>
 802116c:	2a00      	cmp	r2, #0
 802116e:	db52      	blt.n	8021216 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 8021170:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8021174:	429a      	cmp	r2, r3
 8021176:	da4e      	bge.n	8021216 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 8021178:	2900      	cmp	r1, #0
 802117a:	db4c      	blt.n	8021216 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 802117c:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8021180:	4299      	cmp	r1, r3
 8021182:	da48      	bge.n	8021216 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 8021184:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8021188:	fb01 2303 	mla	r3, r1, r3, r2
 802118c:	9a04      	ldr	r2, [sp, #16]
 802118e:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8021192:	0e31      	lsrs	r1, r6, #24
 8021194:	d03f      	beq.n	8021216 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 8021196:	0972      	lsrs	r2, r6, #5
 8021198:	4bb2      	ldr	r3, [pc, #712]	; (8021464 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 802119a:	29ff      	cmp	r1, #255	; 0xff
 802119c:	ea03 2316 	and.w	r3, r3, r6, lsr #8
 80211a0:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80211a4:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 80211a8:	ea43 0302 	orr.w	r3, r3, r2
 80211ac:	ea43 0306 	orr.w	r3, r3, r6
 80211b0:	b29b      	uxth	r3, r3
 80211b2:	d102      	bne.n	80211ba <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x572>
 80211b4:	9a01      	ldr	r2, [sp, #4]
 80211b6:	2aff      	cmp	r2, #255	; 0xff
 80211b8:	d02b      	beq.n	8021212 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ca>
 80211ba:	f834 7010 	ldrh.w	r7, [r4, r0, lsl #1]
 80211be:	f423 6eff 	bic.w	lr, r3, #2040	; 0x7f8
 80211c2:	9a01      	ldr	r2, [sp, #4]
 80211c4:	f02e 0e07 	bic.w	lr, lr, #7
 80211c8:	f407 6cfc 	and.w	ip, r7, #2016	; 0x7e0
 80211cc:	4351      	muls	r1, r2
 80211ce:	f427 62ff 	bic.w	r2, r7, #2040	; 0x7f8
 80211d2:	f007 071f 	and.w	r7, r7, #31
 80211d6:	f5c1 3680 	rsb	r6, r1, #65536	; 0x10000
 80211da:	f022 0207 	bic.w	r2, r2, #7
 80211de:	4372      	muls	r2, r6
 80211e0:	fb06 fc0c 	mul.w	ip, r6, ip
 80211e4:	fb01 2e0e 	mla	lr, r1, lr, r2
 80211e8:	4a9e      	ldr	r2, [pc, #632]	; (8021464 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 80211ea:	4377      	muls	r7, r6
 80211ec:	ea02 4e1e 	and.w	lr, r2, lr, lsr #16
 80211f0:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 80211f4:	f003 031f 	and.w	r3, r3, #31
 80211f8:	fb01 c202 	mla	r2, r1, r2, ip
 80211fc:	fb01 7303 	mla	r3, r1, r3, r7
 8021200:	0c12      	lsrs	r2, r2, #16
 8021202:	f3c3 4304 	ubfx	r3, r3, #16, #5
 8021206:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802120a:	ea4e 0e02 	orr.w	lr, lr, r2
 802120e:	ea4e 0303 	orr.w	r3, lr, r3
 8021212:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
 8021216:	9b06      	ldr	r3, [sp, #24]
 8021218:	3001      	adds	r0, #1
 802121a:	449b      	add	fp, r3
 802121c:	9b07      	ldr	r3, [sp, #28]
 802121e:	441d      	add	r5, r3
 8021220:	e79b      	b.n	802115a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x512>
 8021222:	f04f 0e00 	mov.w	lr, #0
 8021226:	9b02      	ldr	r3, [sp, #8]
 8021228:	4573      	cmp	r3, lr
 802122a:	f340 8106 	ble.w	802143a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 802122e:	9903      	ldr	r1, [sp, #12]
 8021230:	ea4f 422b 	mov.w	r2, fp, asr #16
 8021234:	142b      	asrs	r3, r5, #16
 8021236:	b179      	cbz	r1, 8021258 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x610>
 8021238:	2a00      	cmp	r2, #0
 802123a:	f2c0 8091 	blt.w	8021360 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 802123e:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 8021242:	428a      	cmp	r2, r1
 8021244:	f280 808c 	bge.w	8021360 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 8021248:	2b00      	cmp	r3, #0
 802124a:	f2c0 8089 	blt.w	8021360 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 802124e:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 8021252:	428b      	cmp	r3, r1
 8021254:	f280 8084 	bge.w	8021360 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 8021258:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 802125c:	f3cb 2a07 	ubfx	sl, fp, #8, #8
 8021260:	9804      	ldr	r0, [sp, #16]
 8021262:	fb03 2301 	mla	r3, r3, r1, r2
 8021266:	9a04      	ldr	r2, [sp, #16]
 8021268:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802126c:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8021270:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8021274:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021278:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 802127c:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8021280:	6850      	ldr	r0, [r2, #4]
 8021282:	fb01 f70a 	mul.w	r7, r1, sl
 8021286:	0a3f      	lsrs	r7, r7, #8
 8021288:	ebaa 0607 	sub.w	r6, sl, r7
 802128c:	eba1 0907 	sub.w	r9, r1, r7
 8021290:	f5ca 7a80 	rsb	sl, sl, #256	; 0x100
 8021294:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8021298:	fb01 f10a 	mul.w	r1, r1, sl
 802129c:	f00c 1aff 	and.w	sl, ip, #16711935	; 0xff00ff
 80212a0:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 80212a4:	0a0a      	lsrs	r2, r1, #8
 80212a6:	f008 11ff 	and.w	r1, r8, #16711935	; 0xff00ff
 80212aa:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 80212ae:	4371      	muls	r1, r6
 80212b0:	fb06 f808 	mul.w	r8, r6, r8
 80212b4:	fb02 110a 	mla	r1, r2, sl, r1
 80212b8:	f000 1aff 	and.w	sl, r0, #16711935	; 0xff00ff
 80212bc:	fb02 8c0c 	mla	ip, r2, ip, r8
 80212c0:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 80212c4:	fb07 110a 	mla	r1, r7, sl, r1
 80212c8:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 80212cc:	fb07 cc00 	mla	ip, r7, r0, ip
 80212d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80212d4:	fb09 110a 	mla	r1, r9, sl, r1
 80212d8:	fb09 cc03 	mla	ip, r9, r3, ip
 80212dc:	4b61      	ldr	r3, [pc, #388]	; (8021464 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 80212de:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
 80212e2:	f40c 0a7f 	and.w	sl, ip, #16711680	; 0xff0000
 80212e6:	ea41 0a0a 	orr.w	sl, r1, sl
 80212ea:	ea4f 315a 	mov.w	r1, sl, lsr #13
 80212ee:	ea03 431a 	and.w	r3, r3, sl, lsr #16
 80212f2:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 80212f6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80212fa:	4319      	orrs	r1, r3
 80212fc:	9b01      	ldr	r3, [sp, #4]
 80212fe:	2bff      	cmp	r3, #255	; 0xff
 8021300:	ea41 010a 	orr.w	r1, r1, sl
 8021304:	d02a      	beq.n	802135c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x714>
 8021306:	f834 201e 	ldrh.w	r2, [r4, lr, lsl #1]
 802130a:	f421 63ff 	bic.w	r3, r1, #2040	; 0x7f8
 802130e:	9e05      	ldr	r6, [sp, #20]
 8021310:	f422 60ff 	bic.w	r0, r2, #2040	; 0x7f8
 8021314:	f023 0307 	bic.w	r3, r3, #7
 8021318:	9f05      	ldr	r7, [sp, #20]
 802131a:	f020 0007 	bic.w	r0, r0, #7
 802131e:	4370      	muls	r0, r6
 8021320:	9e01      	ldr	r6, [sp, #4]
 8021322:	fb06 0303 	mla	r3, r6, r3, r0
 8021326:	484f      	ldr	r0, [pc, #316]	; (8021464 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 8021328:	f402 66fc 	and.w	r6, r2, #2016	; 0x7e0
 802132c:	f002 021f 	and.w	r2, r2, #31
 8021330:	ea00 2313 	and.w	r3, r0, r3, lsr #8
 8021334:	f401 60fc 	and.w	r0, r1, #2016	; 0x7e0
 8021338:	437e      	muls	r6, r7
 802133a:	9f01      	ldr	r7, [sp, #4]
 802133c:	f001 011f 	and.w	r1, r1, #31
 8021340:	fb07 6000 	mla	r0, r7, r0, r6
 8021344:	0a00      	lsrs	r0, r0, #8
 8021346:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802134a:	4303      	orrs	r3, r0
 802134c:	9805      	ldr	r0, [sp, #20]
 802134e:	4342      	muls	r2, r0
 8021350:	b29b      	uxth	r3, r3
 8021352:	fb07 2101 	mla	r1, r7, r1, r2
 8021356:	f3c1 2104 	ubfx	r1, r1, #8, #5
 802135a:	4319      	orrs	r1, r3
 802135c:	f824 101e 	strh.w	r1, [r4, lr, lsl #1]
 8021360:	9b06      	ldr	r3, [sp, #24]
 8021362:	f10e 0e01 	add.w	lr, lr, #1
 8021366:	449b      	add	fp, r3
 8021368:	9b07      	ldr	r3, [sp, #28]
 802136a:	441d      	add	r5, r3
 802136c:	e75b      	b.n	8021226 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5de>
 802136e:	2600      	movs	r6, #0
 8021370:	9b02      	ldr	r3, [sp, #8]
 8021372:	42b3      	cmp	r3, r6
 8021374:	dd61      	ble.n	802143a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 8021376:	9b03      	ldr	r3, [sp, #12]
 8021378:	ea4f 422b 	mov.w	r2, fp, asr #16
 802137c:	1429      	asrs	r1, r5, #16
 802137e:	b15b      	cbz	r3, 8021398 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x750>
 8021380:	2a00      	cmp	r2, #0
 8021382:	db4d      	blt.n	8021420 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 8021384:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8021388:	429a      	cmp	r2, r3
 802138a:	da49      	bge.n	8021420 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 802138c:	2900      	cmp	r1, #0
 802138e:	db47      	blt.n	8021420 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 8021390:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8021394:	4299      	cmp	r1, r3
 8021396:	da43      	bge.n	8021420 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 8021398:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 802139c:	fb01 2303 	mla	r3, r1, r3, r2
 80213a0:	9a04      	ldr	r2, [sp, #16]
 80213a2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80213a6:	4b2f      	ldr	r3, [pc, #188]	; (8021464 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 80213a8:	094a      	lsrs	r2, r1, #5
 80213aa:	ea03 2311 	and.w	r3, r3, r1, lsr #8
 80213ae:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 80213b2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80213b6:	4313      	orrs	r3, r2
 80213b8:	9a01      	ldr	r2, [sp, #4]
 80213ba:	430b      	orrs	r3, r1
 80213bc:	2aff      	cmp	r2, #255	; 0xff
 80213be:	b29b      	uxth	r3, r3
 80213c0:	d02c      	beq.n	802141c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d4>
 80213c2:	f834 1016 	ldrh.w	r1, [r4, r6, lsl #1]
 80213c6:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 80213ca:	9f05      	ldr	r7, [sp, #20]
 80213cc:	f421 60ff 	bic.w	r0, r1, #2040	; 0x7f8
 80213d0:	f022 0207 	bic.w	r2, r2, #7
 80213d4:	f020 0007 	bic.w	r0, r0, #7
 80213d8:	4378      	muls	r0, r7
 80213da:	9f01      	ldr	r7, [sp, #4]
 80213dc:	fb07 0202 	mla	r2, r7, r2, r0
 80213e0:	4820      	ldr	r0, [pc, #128]	; (8021464 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 80213e2:	f401 67fc 	and.w	r7, r1, #2016	; 0x7e0
 80213e6:	f001 011f 	and.w	r1, r1, #31
 80213ea:	ea00 2e12 	and.w	lr, r0, r2, lsr #8
 80213ee:	9a05      	ldr	r2, [sp, #20]
 80213f0:	f403 60fc 	and.w	r0, r3, #2016	; 0x7e0
 80213f4:	f003 031f 	and.w	r3, r3, #31
 80213f8:	4357      	muls	r7, r2
 80213fa:	9a01      	ldr	r2, [sp, #4]
 80213fc:	fb02 7000 	mla	r0, r2, r0, r7
 8021400:	0a00      	lsrs	r0, r0, #8
 8021402:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021406:	ea4e 0200 	orr.w	r2, lr, r0
 802140a:	9805      	ldr	r0, [sp, #20]
 802140c:	4341      	muls	r1, r0
 802140e:	9801      	ldr	r0, [sp, #4]
 8021410:	b292      	uxth	r2, r2
 8021412:	fb00 1303 	mla	r3, r0, r3, r1
 8021416:	f3c3 2304 	ubfx	r3, r3, #8, #5
 802141a:	4313      	orrs	r3, r2
 802141c:	f824 3016 	strh.w	r3, [r4, r6, lsl #1]
 8021420:	9b06      	ldr	r3, [sp, #24]
 8021422:	3601      	adds	r6, #1
 8021424:	449b      	add	fp, r3
 8021426:	9b07      	ldr	r3, [sp, #28]
 8021428:	441d      	add	r5, r3
 802142a:	e7a1      	b.n	8021370 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x728>
 802142c:	2300      	movs	r3, #0
 802142e:	930b      	str	r3, [sp, #44]	; 0x2c
 8021430:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021432:	9b02      	ldr	r3, [sp, #8]
 8021434:	4293      	cmp	r3, r2
 8021436:	f300 811b 	bgt.w	8021670 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa28>
 802143a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 802143e:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8021442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021444:	ee79 9a8b 	vadd.f32	s19, s19, s22
 8021448:	ee3a aa2b 	vadd.f32	s20, s20, s23
 802144c:	2b00      	cmp	r3, #0
 802144e:	ee7a aa89 	vadd.f32	s21, s21, s18
 8021452:	f340 82cb 	ble.w	80219ec <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 8021456:	3b01      	subs	r3, #1
 8021458:	eeb0 7a48 	vmov.f32	s14, s16
 802145c:	eef0 7a68 	vmov.f32	s15, s17
 8021460:	9309      	str	r3, [sp, #36]	; 0x24
 8021462:	e4ae      	b.n	8020dc2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x17a>
 8021464:	fffff800 	.word	0xfffff800
 8021468:	2000      	movs	r0, #0
 802146a:	9b02      	ldr	r3, [sp, #8]
 802146c:	4283      	cmp	r3, r0
 802146e:	dde4      	ble.n	802143a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 8021470:	9a03      	ldr	r2, [sp, #12]
 8021472:	ea4f 432b 	mov.w	r3, fp, asr #16
 8021476:	1429      	asrs	r1, r5, #16
 8021478:	b15a      	cbz	r2, 8021492 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x84a>
 802147a:	2b00      	cmp	r3, #0
 802147c:	db49      	blt.n	8021512 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 802147e:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8021482:	4293      	cmp	r3, r2
 8021484:	da45      	bge.n	8021512 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 8021486:	2900      	cmp	r1, #0
 8021488:	db43      	blt.n	8021512 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 802148a:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 802148e:	4291      	cmp	r1, r2
 8021490:	da3f      	bge.n	8021512 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 8021492:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8021496:	fb01 3202 	mla	r2, r1, r2, r3
 802149a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802149c:	685b      	ldr	r3, [r3, #4]
 802149e:	5c99      	ldrb	r1, [r3, r2]
 80214a0:	b3b9      	cbz	r1, 8021512 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 80214a2:	9b04      	ldr	r3, [sp, #16]
 80214a4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80214a8:	9a01      	ldr	r2, [sp, #4]
 80214aa:	2aff      	cmp	r2, #255	; 0xff
 80214ac:	d101      	bne.n	80214b2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x86a>
 80214ae:	29ff      	cmp	r1, #255	; 0xff
 80214b0:	d02d      	beq.n	802150e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8c6>
 80214b2:	f834 7010 	ldrh.w	r7, [r4, r0, lsl #1]
 80214b6:	f423 6eff 	bic.w	lr, r3, #2040	; 0x7f8
 80214ba:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80214be:	f02e 0e07 	bic.w	lr, lr, #7
 80214c2:	f407 6cfc 	and.w	ip, r7, #2016	; 0x7e0
 80214c6:	fb12 f101 	smulbb	r1, r2, r1
 80214ca:	f427 62ff 	bic.w	r2, r7, #2040	; 0x7f8
 80214ce:	f007 071f 	and.w	r7, r7, #31
 80214d2:	f5c1 3680 	rsb	r6, r1, #65536	; 0x10000
 80214d6:	f022 0207 	bic.w	r2, r2, #7
 80214da:	4372      	muls	r2, r6
 80214dc:	fb06 fc0c 	mul.w	ip, r6, ip
 80214e0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80214e4:	4a61      	ldr	r2, [pc, #388]	; (802166c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa24>)
 80214e6:	4377      	muls	r7, r6
 80214e8:	ea02 4e1e 	and.w	lr, r2, lr, lsr #16
 80214ec:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 80214f0:	f003 031f 	and.w	r3, r3, #31
 80214f4:	fb01 c202 	mla	r2, r1, r2, ip
 80214f8:	fb01 7303 	mla	r3, r1, r3, r7
 80214fc:	0c12      	lsrs	r2, r2, #16
 80214fe:	f3c3 4304 	ubfx	r3, r3, #16, #5
 8021502:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021506:	ea4e 0e02 	orr.w	lr, lr, r2
 802150a:	ea4e 0303 	orr.w	r3, lr, r3
 802150e:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
 8021512:	9b06      	ldr	r3, [sp, #24]
 8021514:	3001      	adds	r0, #1
 8021516:	449b      	add	fp, r3
 8021518:	9b07      	ldr	r3, [sp, #28]
 802151a:	441d      	add	r5, r3
 802151c:	e7a5      	b.n	802146a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x822>
 802151e:	2300      	movs	r3, #0
 8021520:	930b      	str	r3, [sp, #44]	; 0x2c
 8021522:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021524:	9b02      	ldr	r3, [sp, #8]
 8021526:	4293      	cmp	r3, r2
 8021528:	dd87      	ble.n	802143a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 802152a:	9b03      	ldr	r3, [sp, #12]
 802152c:	ea4f 422b 	mov.w	r2, fp, asr #16
 8021530:	1429      	asrs	r1, r5, #16
 8021532:	b17b      	cbz	r3, 8021554 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x90c>
 8021534:	2a00      	cmp	r2, #0
 8021536:	f2c0 8092 	blt.w	802165e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 802153a:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 802153e:	429a      	cmp	r2, r3
 8021540:	f280 808d 	bge.w	802165e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 8021544:	2900      	cmp	r1, #0
 8021546:	f2c0 808a 	blt.w	802165e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 802154a:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 802154e:	4299      	cmp	r1, r3
 8021550:	f280 8085 	bge.w	802165e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 8021554:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8021558:	f3c5 3603 	ubfx	r6, r5, #12, #4
 802155c:	9804      	ldr	r0, [sp, #16]
 802155e:	fb01 2103 	mla	r1, r1, r3, r2
 8021562:	9a04      	ldr	r2, [sp, #16]
 8021564:	f830 9011 	ldrh.w	r9, [r0, r1, lsl #1]
 8021568:	eb02 0741 	add.w	r7, r2, r1, lsl #1
 802156c:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8021570:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8021574:	8879      	ldrh	r1, [r7, #2]
 8021576:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802157a:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 802157e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8021582:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8021586:	fb06 f302 	mul.w	r3, r6, r2
 802158a:	ea4e 0e09 	orr.w	lr, lr, r9
 802158e:	ea4f 4901 	mov.w	r9, r1, lsl #16
 8021592:	10db      	asrs	r3, r3, #3
 8021594:	f8b7 8002 	ldrh.w	r8, [r7, #2]
 8021598:	f009 69fc 	and.w	r9, r9, #132120576	; 0x7e00000
 802159c:	f1c6 0710 	rsb	r7, r6, #16
 80215a0:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 80215a4:	ea4f 4a08 	mov.w	sl, r8, lsl #16
 80215a8:	1abf      	subs	r7, r7, r2
 80215aa:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 80215ae:	ea49 0101 	orr.w	r1, r9, r1
 80215b2:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 80215b6:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 80215ba:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 80215be:	4351      	muls	r1, r2
 80215c0:	9a01      	ldr	r2, [sp, #4]
 80215c2:	ea4a 0808 	orr.w	r8, sl, r8
 80215c6:	fb0e 1107 	mla	r1, lr, r7, r1
 80215ca:	2aff      	cmp	r2, #255	; 0xff
 80215cc:	fb03 1108 	mla	r1, r3, r8, r1
 80215d0:	ea4f 480c 	mov.w	r8, ip, lsl #16
 80215d4:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 80215d8:	ebc3 0346 	rsb	r3, r3, r6, lsl #1
 80215dc:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 80215e0:	ea48 0c0c 	orr.w	ip, r8, ip
 80215e4:	fb03 110c 	mla	r1, r3, ip, r1
 80215e8:	ea4f 5951 	mov.w	r9, r1, lsr #21
 80215ec:	ea4f 1351 	mov.w	r3, r1, lsr #5
 80215f0:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 80215f4:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 80215f8:	ea49 0303 	orr.w	r3, r9, r3
 80215fc:	b29b      	uxth	r3, r3
 80215fe:	d02b      	beq.n	8021658 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa10>
 8021600:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021602:	f423 66ff 	bic.w	r6, r3, #2040	; 0x7f8
 8021606:	9805      	ldr	r0, [sp, #20]
 8021608:	f834 1012 	ldrh.w	r1, [r4, r2, lsl #1]
 802160c:	f026 0607 	bic.w	r6, r6, #7
 8021610:	f421 62ff 	bic.w	r2, r1, #2040	; 0x7f8
 8021614:	f401 67fc 	and.w	r7, r1, #2016	; 0x7e0
 8021618:	f001 011f 	and.w	r1, r1, #31
 802161c:	f022 0207 	bic.w	r2, r2, #7
 8021620:	4342      	muls	r2, r0
 8021622:	9801      	ldr	r0, [sp, #4]
 8021624:	fb00 2606 	mla	r6, r0, r6, r2
 8021628:	4a10      	ldr	r2, [pc, #64]	; (802166c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa24>)
 802162a:	9805      	ldr	r0, [sp, #20]
 802162c:	ea02 2616 	and.w	r6, r2, r6, lsr #8
 8021630:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 8021634:	4347      	muls	r7, r0
 8021636:	9801      	ldr	r0, [sp, #4]
 8021638:	f003 031f 	and.w	r3, r3, #31
 802163c:	fb00 7202 	mla	r2, r0, r2, r7
 8021640:	0a12      	lsrs	r2, r2, #8
 8021642:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021646:	4316      	orrs	r6, r2
 8021648:	9a05      	ldr	r2, [sp, #20]
 802164a:	4351      	muls	r1, r2
 802164c:	fb00 1303 	mla	r3, r0, r3, r1
 8021650:	f3c3 2304 	ubfx	r3, r3, #8, #5
 8021654:	4333      	orrs	r3, r6
 8021656:	b29b      	uxth	r3, r3
 8021658:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802165a:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 802165e:	9b06      	ldr	r3, [sp, #24]
 8021660:	449b      	add	fp, r3
 8021662:	9b07      	ldr	r3, [sp, #28]
 8021664:	441d      	add	r5, r3
 8021666:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021668:	3301      	adds	r3, #1
 802166a:	e759      	b.n	8021520 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8d8>
 802166c:	fffff800 	.word	0xfffff800
 8021670:	9903      	ldr	r1, [sp, #12]
 8021672:	ea4f 432b 	mov.w	r3, fp, asr #16
 8021676:	142a      	asrs	r2, r5, #16
 8021678:	b179      	cbz	r1, 802169a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa52>
 802167a:	2b00      	cmp	r3, #0
 802167c:	f2c0 8136 	blt.w	80218ec <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 8021680:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 8021684:	428b      	cmp	r3, r1
 8021686:	f280 8131 	bge.w	80218ec <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 802168a:	2a00      	cmp	r2, #0
 802168c:	f2c0 812e 	blt.w	80218ec <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 8021690:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 8021694:	428a      	cmp	r2, r1
 8021696:	f280 8129 	bge.w	80218ec <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 802169a:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 802169e:	fb02 3301 	mla	r3, r2, r1, r3
 80216a2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80216a4:	6850      	ldr	r0, [r2, #4]
 80216a6:	18c2      	adds	r2, r0, r3
 80216a8:	5cc0      	ldrb	r0, [r0, r3]
 80216aa:	900d      	str	r0, [sp, #52]	; 0x34
 80216ac:	7850      	ldrb	r0, [r2, #1]
 80216ae:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 80216b2:	900e      	str	r0, [sp, #56]	; 0x38
 80216b4:	5c50      	ldrb	r0, [r2, r1]
 80216b6:	440a      	add	r2, r1
 80216b8:	eddd 6a0e 	vldr	s13, [sp, #56]	; 0x38
 80216bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80216c0:	7852      	ldrb	r2, [r2, #1]
 80216c2:	ee07 0a10 	vmov	s14, r0
 80216c6:	eef8 6a66 	vcvt.f32.u32	s13, s13
 80216ca:	900f      	str	r0, [sp, #60]	; 0x3c
 80216cc:	9210      	str	r2, [sp, #64]	; 0x40
 80216ce:	f3cb 3203 	ubfx	r2, fp, #12, #4
 80216d2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80216d6:	ee0d 2a10 	vmov	s26, r2
 80216da:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80216de:	f3c5 3203 	ubfx	r2, r5, #12, #4
 80216e2:	eeb8 dacd 	vcvt.f32.s32	s26, s26
 80216e6:	ee0d 2a90 	vmov	s27, r2
 80216ea:	ee2d da2c 	vmul.f32	s26, s26, s25
 80216ee:	eef8 daed 	vcvt.f32.s32	s27, s27
 80216f2:	eeed 7a26 	vfma.f32	s15, s26, s13
 80216f6:	eddd 6a10 	vldr	s13, [sp, #64]	; 0x40
 80216fa:	ee6d daac 	vmul.f32	s27, s27, s25
 80216fe:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8021702:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8021706:	eead 7a26 	vfma.f32	s14, s26, s13
 802170a:	ee37 7a67 	vsub.f32	s14, s14, s15
 802170e:	eeed 7a87 	vfma.f32	s15, s27, s14
 8021712:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8021716:	ee17 6a90 	vmov	r6, s15
 802171a:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 802171e:	f000 80e5 	beq.w	80218ec <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 8021722:	9a04      	ldr	r2, [sp, #16]
 8021724:	eef0 2a6d 	vmov.f32	s5, s27
 8021728:	eeb0 2a4d 	vmov.f32	s4, s26
 802172c:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 8021730:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
 8021734:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021736:	f830 9011 	ldrh.w	r9, [r0, r1, lsl #1]
 802173a:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 802173e:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 8021742:	f8b1 a002 	ldrh.w	sl, [r1, #2]
 8021746:	f00a 001f 	and.w	r0, sl, #31
 802174a:	4358      	muls	r0, r3
 802174c:	1203      	asrs	r3, r0, #8
 802174e:	f009 001f 	and.w	r0, r9, #31
 8021752:	ee01 3a90 	vmov	s3, r3
 8021756:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021758:	4358      	muls	r0, r3
 802175a:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 802175e:	1203      	asrs	r3, r0, #8
 8021760:	f008 001f 	and.w	r0, r8, #31
 8021764:	ee01 3a10 	vmov	s2, r3
 8021768:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 802176a:	4358      	muls	r0, r3
 802176c:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8021770:	1203      	asrs	r3, r0, #8
 8021772:	f007 001f 	and.w	r0, r7, #31
 8021776:	ee00 3a90 	vmov	s1, r3
 802177a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802177c:	4358      	muls	r0, r3
 802177e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8021782:	1203      	asrs	r3, r0, #8
 8021784:	4630      	mov	r0, r6
 8021786:	ee00 3a10 	vmov	s0, r3
 802178a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 802178e:	f7ff fa41 	bl	8020c14 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 8021792:	f3ca 1045 	ubfx	r0, sl, #5, #6
 8021796:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021798:	eeb0 ea40 	vmov.f32	s28, s0
 802179c:	eef0 2a6d 	vmov.f32	s5, s27
 80217a0:	4358      	muls	r0, r3
 80217a2:	eeb0 2a4d 	vmov.f32	s4, s26
 80217a6:	1203      	asrs	r3, r0, #8
 80217a8:	f3c9 1045 	ubfx	r0, r9, #5, #6
 80217ac:	ee01 3a90 	vmov	s3, r3
 80217b0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80217b2:	4358      	muls	r0, r3
 80217b4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80217b8:	1203      	asrs	r3, r0, #8
 80217ba:	f3c8 1045 	ubfx	r0, r8, #5, #6
 80217be:	ee01 3a10 	vmov	s2, r3
 80217c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80217c4:	4358      	muls	r0, r3
 80217c6:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80217ca:	1203      	asrs	r3, r0, #8
 80217cc:	f3c7 1045 	ubfx	r0, r7, #5, #6
 80217d0:	0aff      	lsrs	r7, r7, #11
 80217d2:	ee00 3a90 	vmov	s1, r3
 80217d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80217d8:	4358      	muls	r0, r3
 80217da:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80217de:	1203      	asrs	r3, r0, #8
 80217e0:	4630      	mov	r0, r6
 80217e2:	ee00 3a10 	vmov	s0, r3
 80217e6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80217ea:	f7ff fa13 	bl	8020c14 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 80217ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80217f0:	ea4f 21da 	mov.w	r1, sl, lsr #11
 80217f4:	eef0 ea40 	vmov.f32	s29, s0
 80217f8:	ea4f 22d9 	mov.w	r2, r9, lsr #11
 80217fc:	4630      	mov	r0, r6
 80217fe:	fb03 fa01 	mul.w	sl, r3, r1
 8021802:	eef0 2a6d 	vmov.f32	s5, s27
 8021806:	eeb0 2a4d 	vmov.f32	s4, s26
 802180a:	ea4f 232a 	mov.w	r3, sl, asr #8
 802180e:	ee01 3a90 	vmov	s3, r3
 8021812:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021814:	fb03 f902 	mul.w	r9, r3, r2
 8021818:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 802181a:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 802181e:	ea4f 2329 	mov.w	r3, r9, asr #8
 8021822:	ee01 3a10 	vmov	s2, r3
 8021826:	ea4f 23d8 	mov.w	r3, r8, lsr #11
 802182a:	fb02 f803 	mul.w	r8, r2, r3
 802182e:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8021832:	ea4f 2328 	mov.w	r3, r8, asr #8
 8021836:	ee00 3a90 	vmov	s1, r3
 802183a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802183c:	437b      	muls	r3, r7
 802183e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8021842:	121b      	asrs	r3, r3, #8
 8021844:	ee00 3a10 	vmov	s0, r3
 8021848:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 802184c:	f7ff f9e2 	bl	8020c14 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 8021850:	eefc 7aee 	vcvt.u32.f32	s15, s29
 8021854:	2eff      	cmp	r6, #255	; 0xff
 8021856:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 802185a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 802185e:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 8021862:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8021866:	eefc 7ace 	vcvt.u32.f32	s15, s28
 802186a:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 802186e:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 8021872:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8021876:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 802187a:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 802187e:	ea43 0302 	orr.w	r3, r3, r2
 8021882:	b29b      	uxth	r3, r3
 8021884:	d102      	bne.n	802188c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc44>
 8021886:	9a01      	ldr	r2, [sp, #4]
 8021888:	2aff      	cmp	r2, #255	; 0xff
 802188a:	d02c      	beq.n	80218e6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc9e>
 802188c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802188e:	f423 67ff 	bic.w	r7, r3, #2040	; 0x7f8
 8021892:	f834 0012 	ldrh.w	r0, [r4, r2, lsl #1]
 8021896:	f027 0707 	bic.w	r7, r7, #7
 802189a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 802189e:	f400 6efc 	and.w	lr, r0, #2016	; 0x7e0
 80218a2:	fb12 f606 	smulbb	r6, r2, r6
 80218a6:	f420 62ff 	bic.w	r2, r0, #2040	; 0x7f8
 80218aa:	f000 001f 	and.w	r0, r0, #31
 80218ae:	f5c6 3180 	rsb	r1, r6, #65536	; 0x10000
 80218b2:	f022 0207 	bic.w	r2, r2, #7
 80218b6:	434a      	muls	r2, r1
 80218b8:	fb01 fe0e 	mul.w	lr, r1, lr
 80218bc:	fb06 2707 	mla	r7, r6, r7, r2
 80218c0:	4a4d      	ldr	r2, [pc, #308]	; (80219f8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xdb0>)
 80218c2:	4348      	muls	r0, r1
 80218c4:	ea02 4717 	and.w	r7, r2, r7, lsr #16
 80218c8:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 80218cc:	f003 031f 	and.w	r3, r3, #31
 80218d0:	fb06 e202 	mla	r2, r6, r2, lr
 80218d4:	fb06 0303 	mla	r3, r6, r3, r0
 80218d8:	0c12      	lsrs	r2, r2, #16
 80218da:	f3c3 4304 	ubfx	r3, r3, #16, #5
 80218de:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80218e2:	4317      	orrs	r7, r2
 80218e4:	433b      	orrs	r3, r7
 80218e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80218e8:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 80218ec:	9b06      	ldr	r3, [sp, #24]
 80218ee:	449b      	add	fp, r3
 80218f0:	9b07      	ldr	r3, [sp, #28]
 80218f2:	441d      	add	r5, r3
 80218f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80218f6:	3301      	adds	r3, #1
 80218f8:	e599      	b.n	802142e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7e6>
 80218fa:	9b01      	ldr	r3, [sp, #4]
 80218fc:	2bff      	cmp	r3, #255	; 0xff
 80218fe:	d105      	bne.n	802190c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcc4>
 8021900:	2300      	movs	r3, #0
 8021902:	9a02      	ldr	r2, [sp, #8]
 8021904:	429a      	cmp	r2, r3
 8021906:	dc51      	bgt.n	80219ac <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd64>
 8021908:	4613      	mov	r3, r2
 802190a:	e596      	b.n	802143a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 802190c:	2000      	movs	r0, #0
 802190e:	9b02      	ldr	r3, [sp, #8]
 8021910:	4283      	cmp	r3, r0
 8021912:	f77f ad92 	ble.w	802143a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 8021916:	9b03      	ldr	r3, [sp, #12]
 8021918:	ea4f 422b 	mov.w	r2, fp, asr #16
 802191c:	1429      	asrs	r1, r5, #16
 802191e:	b15b      	cbz	r3, 8021938 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcf0>
 8021920:	2a00      	cmp	r2, #0
 8021922:	db3d      	blt.n	80219a0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 8021924:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8021928:	429a      	cmp	r2, r3
 802192a:	da39      	bge.n	80219a0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 802192c:	2900      	cmp	r1, #0
 802192e:	db37      	blt.n	80219a0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 8021930:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8021934:	4299      	cmp	r1, r3
 8021936:	da33      	bge.n	80219a0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 8021938:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 802193c:	9f05      	ldr	r7, [sp, #20]
 802193e:	fb01 2303 	mla	r3, r1, r3, r2
 8021942:	f834 1010 	ldrh.w	r1, [r4, r0, lsl #1]
 8021946:	9a04      	ldr	r2, [sp, #16]
 8021948:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 802194c:	f421 63ff 	bic.w	r3, r1, #2040	; 0x7f8
 8021950:	f422 66ff 	bic.w	r6, r2, #2040	; 0x7f8
 8021954:	f023 0307 	bic.w	r3, r3, #7
 8021958:	f402 6efc 	and.w	lr, r2, #2016	; 0x7e0
 802195c:	f002 021f 	and.w	r2, r2, #31
 8021960:	437b      	muls	r3, r7
 8021962:	f026 0607 	bic.w	r6, r6, #7
 8021966:	9f01      	ldr	r7, [sp, #4]
 8021968:	fb07 3606 	mla	r6, r7, r6, r3
 802196c:	4b22      	ldr	r3, [pc, #136]	; (80219f8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xdb0>)
 802196e:	f401 67fc 	and.w	r7, r1, #2016	; 0x7e0
 8021972:	f001 011f 	and.w	r1, r1, #31
 8021976:	ea03 2616 	and.w	r6, r3, r6, lsr #8
 802197a:	9b05      	ldr	r3, [sp, #20]
 802197c:	435f      	muls	r7, r3
 802197e:	9b01      	ldr	r3, [sp, #4]
 8021980:	fb03 730e 	mla	r3, r3, lr, r7
 8021984:	0a1b      	lsrs	r3, r3, #8
 8021986:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802198a:	431e      	orrs	r6, r3
 802198c:	9b05      	ldr	r3, [sp, #20]
 802198e:	4359      	muls	r1, r3
 8021990:	9b01      	ldr	r3, [sp, #4]
 8021992:	fb03 1202 	mla	r2, r3, r2, r1
 8021996:	f3c2 2204 	ubfx	r2, r2, #8, #5
 802199a:	4316      	orrs	r6, r2
 802199c:	f824 6010 	strh.w	r6, [r4, r0, lsl #1]
 80219a0:	9b06      	ldr	r3, [sp, #24]
 80219a2:	3001      	adds	r0, #1
 80219a4:	449b      	add	fp, r3
 80219a6:	9b07      	ldr	r3, [sp, #28]
 80219a8:	441d      	add	r5, r3
 80219aa:	e7b0      	b.n	802190e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcc6>
 80219ac:	9a03      	ldr	r2, [sp, #12]
 80219ae:	ea4f 412b 	mov.w	r1, fp, asr #16
 80219b2:	1428      	asrs	r0, r5, #16
 80219b4:	b15a      	cbz	r2, 80219ce <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd86>
 80219b6:	2900      	cmp	r1, #0
 80219b8:	db12      	blt.n	80219e0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 80219ba:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 80219be:	4291      	cmp	r1, r2
 80219c0:	da0e      	bge.n	80219e0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 80219c2:	2800      	cmp	r0, #0
 80219c4:	db0c      	blt.n	80219e0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 80219c6:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 80219ca:	4290      	cmp	r0, r2
 80219cc:	da08      	bge.n	80219e0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 80219ce:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 80219d2:	fb00 1202 	mla	r2, r0, r2, r1
 80219d6:	9904      	ldr	r1, [sp, #16]
 80219d8:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80219dc:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
 80219e0:	9a06      	ldr	r2, [sp, #24]
 80219e2:	3301      	adds	r3, #1
 80219e4:	4493      	add	fp, r2
 80219e6:	9a07      	ldr	r2, [sp, #28]
 80219e8:	4415      	add	r5, r2
 80219ea:	e78a      	b.n	8021902 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcba>
 80219ec:	b015      	add	sp, #84	; 0x54
 80219ee:	ecbd 8b0e 	vpop	{d8-d14}
 80219f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80219f6:	bf00      	nop
 80219f8:	fffff800 	.word	0xfffff800

080219fc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 80219fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a00:	b08f      	sub	sp, #60	; 0x3c
 8021a02:	460c      	mov	r4, r1
 8021a04:	4680      	mov	r8, r0
 8021a06:	4699      	mov	r9, r3
 8021a08:	6808      	ldr	r0, [r1, #0]
 8021a0a:	ab0a      	add	r3, sp, #40	; 0x28
 8021a0c:	6849      	ldr	r1, [r1, #4]
 8021a0e:	c303      	stmia	r3!, {r0, r1}
 8021a10:	6810      	ldr	r0, [r2, #0]
 8021a12:	ab0c      	add	r3, sp, #48	; 0x30
 8021a14:	6851      	ldr	r1, [r2, #4]
 8021a16:	c303      	stmia	r3!, {r0, r1}
 8021a18:	a80a      	add	r0, sp, #40	; 0x28
 8021a1a:	f7fc fe75 	bl	801e708 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021a1e:	4621      	mov	r1, r4
 8021a20:	a80c      	add	r0, sp, #48	; 0x30
 8021a22:	4c58      	ldr	r4, [pc, #352]	; (8021b84 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8021a24:	f7fc fe58 	bl	801e6d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021a28:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 8021a2c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 8021a30:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 8021a34:	6820      	ldr	r0, [r4, #0]
 8021a36:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021a3a:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 8021a3e:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 8021a42:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 8021a46:	440a      	add	r2, r1
 8021a48:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 8021a4c:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 8021a50:	4413      	add	r3, r2
 8021a52:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 8021a56:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 8021a5a:	9305      	str	r3, [sp, #20]
 8021a5c:	6803      	ldr	r3, [r0, #0]
 8021a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8021a60:	4798      	blx	r3
 8021a62:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021a66:	d118      	bne.n	8021a9a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 8021a68:	f010 0f20 	tst.w	r0, #32
 8021a6c:	6820      	ldr	r0, [r4, #0]
 8021a6e:	d017      	beq.n	8021aa0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8021a70:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8021a74:	b2bf      	uxth	r7, r7
 8021a76:	6801      	ldr	r1, [r0, #0]
 8021a78:	9402      	str	r4, [sp, #8]
 8021a7a:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 8021a7e:	f8cd 900c 	str.w	r9, [sp, #12]
 8021a82:	9401      	str	r4, [sp, #4]
 8021a84:	9700      	str	r7, [sp, #0]
 8021a86:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 8021a8a:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 8021a8c:	4641      	mov	r1, r8
 8021a8e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8021a92:	47a0      	blx	r4
 8021a94:	b00f      	add	sp, #60	; 0x3c
 8021a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021a9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8021a9e:	e7e5      	b.n	8021a6c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x70>
 8021aa0:	6803      	ldr	r3, [r0, #0]
 8021aa2:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8021b8c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x190>
 8021aa6:	6a1b      	ldr	r3, [r3, #32]
 8021aa8:	4798      	blx	r3
 8021aaa:	4a37      	ldr	r2, [pc, #220]	; (8021b88 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 8021aac:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8021ab0:	f04f 0c00 	mov.w	ip, #0
 8021ab4:	8813      	ldrh	r3, [r2, #0]
 8021ab6:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 8021aba:	9209      	str	r2, [sp, #36]	; 0x24
 8021abc:	fb04 1303 	mla	r3, r4, r3, r1
 8021ac0:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021ac4:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 8021ac8:	0099      	lsls	r1, r3, #2
 8021aca:	005b      	lsls	r3, r3, #1
 8021acc:	9108      	str	r1, [sp, #32]
 8021ace:	9307      	str	r3, [sp, #28]
 8021ad0:	9b05      	ldr	r3, [sp, #20]
 8021ad2:	459c      	cmp	ip, r3
 8021ad4:	da4f      	bge.n	8021b76 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17a>
 8021ad6:	4686      	mov	lr, r0
 8021ad8:	2300      	movs	r3, #0
 8021ada:	42bb      	cmp	r3, r7
 8021adc:	da3a      	bge.n	8021b54 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x158>
 8021ade:	f858 5023 	ldr.w	r5, [r8, r3, lsl #2]
 8021ae2:	0e2e      	lsrs	r6, r5, #24
 8021ae4:	d012      	beq.n	8021b0c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8021ae6:	ea0a 2415 	and.w	r4, sl, r5, lsr #8
 8021aea:	f3c5 02c4 	ubfx	r2, r5, #3, #5
 8021aee:	0969      	lsrs	r1, r5, #5
 8021af0:	2eff      	cmp	r6, #255	; 0xff
 8021af2:	b2a4      	uxth	r4, r4
 8021af4:	9206      	str	r2, [sp, #24]
 8021af6:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021afa:	d10b      	bne.n	8021b14 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x118>
 8021afc:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021b00:	d108      	bne.n	8021b14 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x118>
 8021b02:	430c      	orrs	r4, r1
 8021b04:	4322      	orrs	r2, r4
 8021b06:	4614      	mov	r4, r2
 8021b08:	f8ae 4000 	strh.w	r4, [lr]
 8021b0c:	f10e 0e02 	add.w	lr, lr, #2
 8021b10:	3301      	adds	r3, #1
 8021b12:	e7e2      	b.n	8021ada <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 8021b14:	fb06 f609 	mul.w	r6, r6, r9
 8021b18:	f8be 5000 	ldrh.w	r5, [lr]
 8021b1c:	f5c6 3b80 	rsb	fp, r6, #65536	; 0x10000
 8021b20:	ea05 020a 	and.w	r2, r5, sl
 8021b24:	4374      	muls	r4, r6
 8021b26:	4371      	muls	r1, r6
 8021b28:	fb0b 4402 	mla	r4, fp, r2, r4
 8021b2c:	f405 62fc 	and.w	r2, r5, #2016	; 0x7e0
 8021b30:	f005 051f 	and.w	r5, r5, #31
 8021b34:	fb0b 1102 	mla	r1, fp, r2, r1
 8021b38:	9a06      	ldr	r2, [sp, #24]
 8021b3a:	ea0a 4414 	and.w	r4, sl, r4, lsr #16
 8021b3e:	0c09      	lsrs	r1, r1, #16
 8021b40:	4356      	muls	r6, r2
 8021b42:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 8021b46:	fb0b 6505 	mla	r5, fp, r5, r6
 8021b4a:	430c      	orrs	r4, r1
 8021b4c:	f3c5 4504 	ubfx	r5, r5, #16, #5
 8021b50:	432c      	orrs	r4, r5
 8021b52:	e7d9      	b.n	8021b08 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 8021b54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8021b56:	f10c 0c01 	add.w	ip, ip, #1
 8021b5a:	9a07      	ldr	r2, [sp, #28]
 8021b5c:	881b      	ldrh	r3, [r3, #0]
 8021b5e:	1bdb      	subs	r3, r3, r7
 8021b60:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021b64:	9a08      	ldr	r2, [sp, #32]
 8021b66:	4418      	add	r0, r3
 8021b68:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 8021b6c:	1bdb      	subs	r3, r3, r7
 8021b6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021b72:	4498      	add	r8, r3
 8021b74:	e7ac      	b.n	8021ad0 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd4>
 8021b76:	4b03      	ldr	r3, [pc, #12]	; (8021b84 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8021b78:	6818      	ldr	r0, [r3, #0]
 8021b7a:	6803      	ldr	r3, [r0, #0]
 8021b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021b7e:	4798      	blx	r3
 8021b80:	e788      	b.n	8021a94 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8021b82:	bf00      	nop
 8021b84:	20009d38 	.word	0x20009d38
 8021b88:	20009d32 	.word	0x20009d32
 8021b8c:	fffff800 	.word	0xfffff800

08021b90 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8021b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021b94:	9d06      	ldr	r5, [sp, #24]
 8021b96:	461c      	mov	r4, r3
 8021b98:	460e      	mov	r6, r1
 8021b9a:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8021b9e:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8021ba2:	b142      	cbz	r2, 8021bb6 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8021ba4:	2a02      	cmp	r2, #2
 8021ba6:	d010      	beq.n	8021bca <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3a>
 8021ba8:	4b0b      	ldr	r3, [pc, #44]	; (8021bd8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x48>)
 8021baa:	f240 11b9 	movw	r1, #441	; 0x1b9
 8021bae:	4a0b      	ldr	r2, [pc, #44]	; (8021bdc <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x4c>)
 8021bb0:	480b      	ldr	r0, [pc, #44]	; (8021be0 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x50>)
 8021bb2:	f000 fd19 	bl	80225e8 <__assert_func>
 8021bb6:	6802      	ldr	r2, [r0, #0]
 8021bb8:	9306      	str	r3, [sp, #24]
 8021bba:	462b      	mov	r3, r5
 8021bbc:	9707      	str	r7, [sp, #28]
 8021bbe:	6916      	ldr	r6, [r2, #16]
 8021bc0:	4622      	mov	r2, r4
 8021bc2:	46b4      	mov	ip, r6
 8021bc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021bc8:	4760      	bx	ip
 8021bca:	462a      	mov	r2, r5
 8021bcc:	4621      	mov	r1, r4
 8021bce:	4630      	mov	r0, r6
 8021bd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021bd4:	f7ff bf12 	b.w	80219fc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021bd8:	080266c8 	.word	0x080266c8
 8021bdc:	08026827 	.word	0x08026827
 8021be0:	08026696 	.word	0x08026696

08021be4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8021be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021be8:	b08b      	sub	sp, #44	; 0x2c
 8021bea:	460e      	mov	r6, r1
 8021bec:	4604      	mov	r4, r0
 8021bee:	6851      	ldr	r1, [r2, #4]
 8021bf0:	6810      	ldr	r0, [r2, #0]
 8021bf2:	ad06      	add	r5, sp, #24
 8021bf4:	4617      	mov	r7, r2
 8021bf6:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8021bfa:	c503      	stmia	r5!, {r0, r1}
 8021bfc:	6818      	ldr	r0, [r3, #0]
 8021bfe:	ad08      	add	r5, sp, #32
 8021c00:	6859      	ldr	r1, [r3, #4]
 8021c02:	c503      	stmia	r5!, {r0, r1}
 8021c04:	a806      	add	r0, sp, #24
 8021c06:	f7fc fd7f 	bl	801e708 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021c0a:	4639      	mov	r1, r7
 8021c0c:	a808      	add	r0, sp, #32
 8021c0e:	f7fc fd63 	bl	801e6d8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021c12:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8021c16:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8021c1a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8021c1e:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 8021c22:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021c26:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8021c2a:	1871      	adds	r1, r6, r1
 8021c2c:	9101      	str	r1, [sp, #4]
 8021c2e:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8021c32:	440a      	add	r2, r1
 8021c34:	f8ad 2020 	strh.w	r2, [sp, #32]
 8021c38:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8021c3c:	4413      	add	r3, r2
 8021c3e:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8021c42:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8021c46:	9302      	str	r3, [sp, #8]
 8021c48:	4b64      	ldr	r3, [pc, #400]	; (8021ddc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1f8>)
 8021c4a:	6818      	ldr	r0, [r3, #0]
 8021c4c:	6803      	ldr	r3, [r0, #0]
 8021c4e:	6a1b      	ldr	r3, [r3, #32]
 8021c50:	4798      	blx	r3
 8021c52:	4b63      	ldr	r3, [pc, #396]	; (8021de0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1fc>)
 8021c54:	f9bd 6022 	ldrsh.w	r6, [sp, #34]	; 0x22
 8021c58:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021c5c:	881a      	ldrh	r2, [r3, #0]
 8021c5e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8021c62:	fb06 1202 	mla	r2, r6, r2, r1
 8021c66:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021c6a:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
 8021c6e:	b212      	sxth	r2, r2
 8021c70:	9204      	str	r2, [sp, #16]
 8021c72:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8021c76:	9203      	str	r2, [sp, #12]
 8021c78:	d051      	beq.n	8021d1e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x13a>
 8021c7a:	f04f 0800 	mov.w	r8, #0
 8021c7e:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8021de4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x200>
 8021c82:	9305      	str	r3, [sp, #20]
 8021c84:	9b02      	ldr	r3, [sp, #8]
 8021c86:	4598      	cmp	r8, r3
 8021c88:	f280 809f 	bge.w	8021dca <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1e6>
 8021c8c:	2100      	movs	r1, #0
 8021c8e:	42a9      	cmp	r1, r5
 8021c90:	da30      	bge.n	8021cf4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x110>
 8021c92:	9b01      	ldr	r3, [sp, #4]
 8021c94:	5c5e      	ldrb	r6, [r3, r1]
 8021c96:	b35e      	cbz	r6, 8021cf0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x10c>
 8021c98:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8021c9c:	fb1b f606 	smulbb	r6, fp, r6
 8021ca0:	f834 2011 	ldrh.w	r2, [r4, r1, lsl #1]
 8021ca4:	f5c6 3780 	rsb	r7, r6, #65536	; 0x10000
 8021ca8:	ea0e 0309 	and.w	r3, lr, r9
 8021cac:	ea02 0c09 	and.w	ip, r2, r9
 8021cb0:	f40e 6afc 	and.w	sl, lr, #2016	; 0x7e0
 8021cb4:	437b      	muls	r3, r7
 8021cb6:	f00e 0e1f 	and.w	lr, lr, #31
 8021cba:	fb07 fa0a 	mul.w	sl, r7, sl
 8021cbe:	fb06 3c0c 	mla	ip, r6, ip, r3
 8021cc2:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 8021cc6:	fb07 fe0e 	mul.w	lr, r7, lr
 8021cca:	f002 021f 	and.w	r2, r2, #31
 8021cce:	fb06 a303 	mla	r3, r6, r3, sl
 8021cd2:	ea09 4c1c 	and.w	ip, r9, ip, lsr #16
 8021cd6:	fb06 ee02 	mla	lr, r6, r2, lr
 8021cda:	0c1b      	lsrs	r3, r3, #16
 8021cdc:	f3ce 4e04 	ubfx	lr, lr, #16, #5
 8021ce0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021ce4:	ea4c 0c03 	orr.w	ip, ip, r3
 8021ce8:	ea4c 0c0e 	orr.w	ip, ip, lr
 8021cec:	f820 c011 	strh.w	ip, [r0, r1, lsl #1]
 8021cf0:	3101      	adds	r1, #1
 8021cf2:	e7cc      	b.n	8021c8e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xaa>
 8021cf4:	9b05      	ldr	r3, [sp, #20]
 8021cf6:	f108 0801 	add.w	r8, r8, #1
 8021cfa:	9a03      	ldr	r2, [sp, #12]
 8021cfc:	881b      	ldrh	r3, [r3, #0]
 8021cfe:	1b5b      	subs	r3, r3, r5
 8021d00:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021d04:	4418      	add	r0, r3
 8021d06:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8021d0a:	1b5b      	subs	r3, r3, r5
 8021d0c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8021d10:	4414      	add	r4, r2
 8021d12:	9a04      	ldr	r2, [sp, #16]
 8021d14:	4413      	add	r3, r2
 8021d16:	9a01      	ldr	r2, [sp, #4]
 8021d18:	441a      	add	r2, r3
 8021d1a:	9201      	str	r2, [sp, #4]
 8021d1c:	e7b2      	b.n	8021c84 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa0>
 8021d1e:	f04f 0900 	mov.w	r9, #0
 8021d22:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8021de4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x200>
 8021d26:	9305      	str	r3, [sp, #20]
 8021d28:	9b02      	ldr	r3, [sp, #8]
 8021d2a:	4599      	cmp	r9, r3
 8021d2c:	da4d      	bge.n	8021dca <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1e6>
 8021d2e:	4607      	mov	r7, r0
 8021d30:	2600      	movs	r6, #0
 8021d32:	42ae      	cmp	r6, r5
 8021d34:	da34      	bge.n	8021da0 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1bc>
 8021d36:	9b01      	ldr	r3, [sp, #4]
 8021d38:	5d99      	ldrb	r1, [r3, r6]
 8021d3a:	b121      	cbz	r1, 8021d46 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x162>
 8021d3c:	29ff      	cmp	r1, #255	; 0xff
 8021d3e:	f834 2016 	ldrh.w	r2, [r4, r6, lsl #1]
 8021d42:	d103      	bne.n	8021d4c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x168>
 8021d44:	803a      	strh	r2, [r7, #0]
 8021d46:	3702      	adds	r7, #2
 8021d48:	3601      	adds	r6, #1
 8021d4a:	e7f2      	b.n	8021d32 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14e>
 8021d4c:	f8b7 c000 	ldrh.w	ip, [r7]
 8021d50:	f5c1 7e80 	rsb	lr, r1, #256	; 0x100
 8021d54:	ea02 080a 	and.w	r8, r2, sl
 8021d58:	ea0c 030a 	and.w	r3, ip, sl
 8021d5c:	f40c 6bfc 	and.w	fp, ip, #2016	; 0x7e0
 8021d60:	f00c 0c1f 	and.w	ip, ip, #31
 8021d64:	fb0e f303 	mul.w	r3, lr, r3
 8021d68:	fb0e fb0b 	mul.w	fp, lr, fp
 8021d6c:	fb01 3808 	mla	r8, r1, r8, r3
 8021d70:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 8021d74:	fb0e fc0c 	mul.w	ip, lr, ip
 8021d78:	f002 021f 	and.w	r2, r2, #31
 8021d7c:	fb01 b303 	mla	r3, r1, r3, fp
 8021d80:	ea0a 2818 	and.w	r8, sl, r8, lsr #8
 8021d84:	fb01 cc02 	mla	ip, r1, r2, ip
 8021d88:	0a1b      	lsrs	r3, r3, #8
 8021d8a:	f3cc 2c04 	ubfx	ip, ip, #8, #5
 8021d8e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021d92:	ea48 0803 	orr.w	r8, r8, r3
 8021d96:	ea48 080c 	orr.w	r8, r8, ip
 8021d9a:	f8a7 8000 	strh.w	r8, [r7]
 8021d9e:	e7d2      	b.n	8021d46 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x162>
 8021da0:	9b05      	ldr	r3, [sp, #20]
 8021da2:	f109 0901 	add.w	r9, r9, #1
 8021da6:	9a03      	ldr	r2, [sp, #12]
 8021da8:	881b      	ldrh	r3, [r3, #0]
 8021daa:	1b5b      	subs	r3, r3, r5
 8021dac:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021db0:	4418      	add	r0, r3
 8021db2:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8021db6:	1b5b      	subs	r3, r3, r5
 8021db8:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8021dbc:	4414      	add	r4, r2
 8021dbe:	9a04      	ldr	r2, [sp, #16]
 8021dc0:	4413      	add	r3, r2
 8021dc2:	9a01      	ldr	r2, [sp, #4]
 8021dc4:	441a      	add	r2, r3
 8021dc6:	9201      	str	r2, [sp, #4]
 8021dc8:	e7ae      	b.n	8021d28 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8021dca:	4b04      	ldr	r3, [pc, #16]	; (8021ddc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1f8>)
 8021dcc:	6818      	ldr	r0, [r3, #0]
 8021dce:	6803      	ldr	r3, [r0, #0]
 8021dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021dd2:	4798      	blx	r3
 8021dd4:	b00b      	add	sp, #44	; 0x2c
 8021dd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021dda:	bf00      	nop
 8021ddc:	20009d38 	.word	0x20009d38
 8021de0:	20009d32 	.word	0x20009d32
 8021de4:	fffff800 	.word	0xfffff800

08021de8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8021de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021dec:	b089      	sub	sp, #36	; 0x24
 8021dee:	4682      	mov	sl, r0
 8021df0:	4689      	mov	r9, r1
 8021df2:	4690      	mov	r8, r2
 8021df4:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 8021df8:	461f      	mov	r7, r3
 8021dfa:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021dfc:	b365      	cbz	r5, 8021e58 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 8021dfe:	4608      	mov	r0, r1
 8021e00:	f7fe faf8 	bl	80203f4 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021e04:	4606      	mov	r6, r0
 8021e06:	4648      	mov	r0, r9
 8021e08:	f7fe fb2c 	bl	8020464 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8021e0c:	f8ad 000e 	strh.w	r0, [sp, #14]
 8021e10:	4648      	mov	r0, r9
 8021e12:	f8ad 8008 	strh.w	r8, [sp, #8]
 8021e16:	f8ad 700a 	strh.w	r7, [sp, #10]
 8021e1a:	f8ad 600c 	strh.w	r6, [sp, #12]
 8021e1e:	f7fe fc3f 	bl	80206a0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021e22:	2801      	cmp	r0, #1
 8021e24:	d105      	bne.n	8021e32 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 8021e26:	4b64      	ldr	r3, [pc, #400]	; (8021fb8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1d0>)
 8021e28:	2160      	movs	r1, #96	; 0x60
 8021e2a:	4a64      	ldr	r2, [pc, #400]	; (8021fbc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1d4>)
 8021e2c:	4864      	ldr	r0, [pc, #400]	; (8021fc0 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1d8>)
 8021e2e:	f000 fbdb 	bl	80225e8 <__assert_func>
 8021e32:	4648      	mov	r0, r9
 8021e34:	f7fe fbdc 	bl	80205f0 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021e38:	4606      	mov	r6, r0
 8021e3a:	4648      	mov	r0, r9
 8021e3c:	f7fe fc08 	bl	8020650 <_ZNK8touchgfx6Bitmap12getAlphaDataEv>
 8021e40:	4680      	mov	r8, r0
 8021e42:	4648      	mov	r0, r9
 8021e44:	f7fe fc2c 	bl	80206a0 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021e48:	2802      	cmp	r0, #2
 8021e4a:	d108      	bne.n	8021e5e <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 8021e4c:	462b      	mov	r3, r5
 8021e4e:	4622      	mov	r2, r4
 8021e50:	a902      	add	r1, sp, #8
 8021e52:	4630      	mov	r0, r6
 8021e54:	f7ff fdd2 	bl	80219fc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021e58:	b009      	add	sp, #36	; 0x24
 8021e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021e5e:	4648      	mov	r0, r9
 8021e60:	f7fe fb90 	bl	8020584 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8021e64:	b950      	cbnz	r0, 8021e7c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021e66:	f8da 3000 	ldr.w	r3, [sl]
 8021e6a:	aa02      	add	r2, sp, #8
 8021e6c:	9001      	str	r0, [sp, #4]
 8021e6e:	4631      	mov	r1, r6
 8021e70:	9500      	str	r5, [sp, #0]
 8021e72:	4650      	mov	r0, sl
 8021e74:	691d      	ldr	r5, [r3, #16]
 8021e76:	4623      	mov	r3, r4
 8021e78:	47a8      	blx	r5
 8021e7a:	e7ed      	b.n	8021e58 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 8021e7c:	af06      	add	r7, sp, #24
 8021e7e:	4649      	mov	r1, r9
 8021e80:	f10d 0910 	add.w	r9, sp, #16
 8021e84:	4638      	mov	r0, r7
 8021e86:	f7fe fb25 	bl	80204d4 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8021e8a:	e897 0003 	ldmia.w	r7, {r0, r1}
 8021e8e:	e889 0003 	stmia.w	r9, {r0, r1}
 8021e92:	4621      	mov	r1, r4
 8021e94:	4648      	mov	r0, r9
 8021e96:	f7ec fb55 	bl	800e544 <_ZN8touchgfx4RectaNERKS0_>
 8021e9a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8021e9e:	b113      	cbz	r3, 8021ea6 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbe>
 8021ea0:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8021ea4:	b913      	cbnz	r3, 8021eac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 8021ea6:	9500      	str	r5, [sp, #0]
 8021ea8:	4623      	mov	r3, r4
 8021eaa:	e07f      	b.n	8021fac <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1c4>
 8021eac:	f8da 3000 	ldr.w	r3, [sl]
 8021eb0:	2200      	movs	r2, #0
 8021eb2:	9500      	str	r5, [sp, #0]
 8021eb4:	4631      	mov	r1, r6
 8021eb6:	9201      	str	r2, [sp, #4]
 8021eb8:	4650      	mov	r0, sl
 8021eba:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8021ebe:	aa02      	add	r2, sp, #8
 8021ec0:	464b      	mov	r3, r9
 8021ec2:	47d8      	blx	fp
 8021ec4:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021ec8:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8021ecc:	4293      	cmp	r3, r2
 8021ece:	dd13      	ble.n	8021ef8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x110>
 8021ed0:	f9b4 0000 	ldrsh.w	r0, [r4]
 8021ed4:	1a9b      	subs	r3, r3, r2
 8021ed6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021eda:	f8ad 0018 	strh.w	r0, [sp, #24]
 8021ede:	4630      	mov	r0, r6
 8021ee0:	f8ad 201a 	strh.w	r2, [sp, #26]
 8021ee4:	aa02      	add	r2, sp, #8
 8021ee6:	f8ad 101c 	strh.w	r1, [sp, #28]
 8021eea:	4641      	mov	r1, r8
 8021eec:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021ef0:	463b      	mov	r3, r7
 8021ef2:	9500      	str	r5, [sp, #0]
 8021ef4:	f7ff fe76 	bl	8021be4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021ef8:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8021efc:	f9b4 2000 	ldrsh.w	r2, [r4]
 8021f00:	4293      	cmp	r3, r2
 8021f02:	dd13      	ble.n	8021f2c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x144>
 8021f04:	1a9b      	subs	r3, r3, r2
 8021f06:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8021f0a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8021f0e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8021f12:	aa02      	add	r2, sp, #8
 8021f14:	f8ad 001a 	strh.w	r0, [sp, #26]
 8021f18:	4630      	mov	r0, r6
 8021f1a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021f1e:	463b      	mov	r3, r7
 8021f20:	f8ad 101e 	strh.w	r1, [sp, #30]
 8021f24:	4641      	mov	r1, r8
 8021f26:	9500      	str	r5, [sp, #0]
 8021f28:	f7ff fe5c 	bl	8021be4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021f2c:	88a2      	ldrh	r2, [r4, #4]
 8021f2e:	8823      	ldrh	r3, [r4, #0]
 8021f30:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8021f34:	4413      	add	r3, r2
 8021f36:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021f3a:	440a      	add	r2, r1
 8021f3c:	b29b      	uxth	r3, r3
 8021f3e:	b292      	uxth	r2, r2
 8021f40:	b218      	sxth	r0, r3
 8021f42:	b211      	sxth	r1, r2
 8021f44:	4288      	cmp	r0, r1
 8021f46:	dd13      	ble.n	8021f70 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x188>
 8021f48:	1a9b      	subs	r3, r3, r2
 8021f4a:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8021f4e:	f9bd e012 	ldrsh.w	lr, [sp, #18]
 8021f52:	aa02      	add	r2, sp, #8
 8021f54:	f8ad 1018 	strh.w	r1, [sp, #24]
 8021f58:	4641      	mov	r1, r8
 8021f5a:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021f5e:	463b      	mov	r3, r7
 8021f60:	f8ad 001e 	strh.w	r0, [sp, #30]
 8021f64:	4630      	mov	r0, r6
 8021f66:	9500      	str	r5, [sp, #0]
 8021f68:	f8ad e01a 	strh.w	lr, [sp, #26]
 8021f6c:	f7ff fe3a 	bl	8021be4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021f70:	88e2      	ldrh	r2, [r4, #6]
 8021f72:	8863      	ldrh	r3, [r4, #2]
 8021f74:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8021f78:	4413      	add	r3, r2
 8021f7a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8021f7e:	440a      	add	r2, r1
 8021f80:	b29b      	uxth	r3, r3
 8021f82:	b292      	uxth	r2, r2
 8021f84:	b218      	sxth	r0, r3
 8021f86:	b211      	sxth	r1, r2
 8021f88:	4288      	cmp	r0, r1
 8021f8a:	f77f af65 	ble.w	8021e58 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 8021f8e:	1a9b      	subs	r3, r3, r2
 8021f90:	f9b4 e000 	ldrsh.w	lr, [r4]
 8021f94:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8021f98:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021f9c:	463b      	mov	r3, r7
 8021f9e:	f8ad e018 	strh.w	lr, [sp, #24]
 8021fa2:	f8ad 101a 	strh.w	r1, [sp, #26]
 8021fa6:	f8ad 001c 	strh.w	r0, [sp, #28]
 8021faa:	9500      	str	r5, [sp, #0]
 8021fac:	aa02      	add	r2, sp, #8
 8021fae:	4641      	mov	r1, r8
 8021fb0:	4630      	mov	r0, r6
 8021fb2:	f7ff fe17 	bl	8021be4 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021fb6:	e74f      	b.n	8021e58 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 8021fb8:	08026606 	.word	0x08026606
 8021fbc:	08026734 	.word	0x08026734
 8021fc0:	08026696 	.word	0x08026696

08021fc4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8021fc4:	b138      	cbz	r0, 8021fd6 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8021fc6:	2902      	cmp	r1, #2
 8021fc8:	d00b      	beq.n	8021fe2 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1e>
 8021fca:	2903      	cmp	r1, #3
 8021fcc:	d00c      	beq.n	8021fe8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8021fce:	2901      	cmp	r1, #1
 8021fd0:	d10d      	bne.n	8021fee <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x2a>
 8021fd2:	2001      	movs	r0, #1
 8021fd4:	4770      	bx	lr
 8021fd6:	2902      	cmp	r1, #2
 8021fd8:	d006      	beq.n	8021fe8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8021fda:	2903      	cmp	r1, #3
 8021fdc:	d007      	beq.n	8021fee <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x2a>
 8021fde:	2901      	cmp	r1, #1
 8021fe0:	d1f7      	bne.n	8021fd2 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0xe>
 8021fe2:	4b05      	ldr	r3, [pc, #20]	; (8021ff8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8021fe4:	8818      	ldrh	r0, [r3, #0]
 8021fe6:	4770      	bx	lr
 8021fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8021fec:	4770      	bx	lr
 8021fee:	4b02      	ldr	r3, [pc, #8]	; (8021ff8 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8021ff0:	8818      	ldrh	r0, [r3, #0]
 8021ff2:	4240      	negs	r0, r0
 8021ff4:	4770      	bx	lr
 8021ff6:	bf00      	nop
 8021ff8:	20009d32 	.word	0x20009d32

08021ffc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8021ffc:	b140      	cbz	r0, 8022010 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8021ffe:	2902      	cmp	r1, #2
 8022000:	d00c      	beq.n	802201c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x20>
 8022002:	2903      	cmp	r1, #3
 8022004:	d00d      	beq.n	8022022 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8022006:	2901      	cmp	r1, #1
 8022008:	d10f      	bne.n	802202a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x2e>
 802200a:	4b09      	ldr	r3, [pc, #36]	; (8022030 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x34>)
 802200c:	8818      	ldrh	r0, [r3, #0]
 802200e:	4770      	bx	lr
 8022010:	2902      	cmp	r1, #2
 8022012:	d006      	beq.n	8022022 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8022014:	2903      	cmp	r1, #3
 8022016:	d008      	beq.n	802202a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x2e>
 8022018:	2901      	cmp	r1, #1
 802201a:	d1f6      	bne.n	802200a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0xe>
 802201c:	f04f 30ff 	mov.w	r0, #4294967295
 8022020:	4770      	bx	lr
 8022022:	4b03      	ldr	r3, [pc, #12]	; (8022030 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x34>)
 8022024:	8818      	ldrh	r0, [r3, #0]
 8022026:	4240      	negs	r0, r0
 8022028:	4770      	bx	lr
 802202a:	2001      	movs	r0, #1
 802202c:	4770      	bx	lr
 802202e:	bf00      	nop
 8022030:	20009d32 	.word	0x20009d32

08022034 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE>:
 8022034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022038:	b097      	sub	sp, #92	; 0x5c
 802203a:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
 802203e:	910d      	str	r1, [sp, #52]	; 0x34
 8022040:	a912      	add	r1, sp, #72	; 0x48
 8022042:	f899 000d 	ldrb.w	r0, [r9, #13]
 8022046:	f9bd 8080 	ldrsh.w	r8, [sp, #128]	; 0x80
 802204a:	f010 0f08 	tst.w	r0, #8
 802204e:	f8bd 4088 	ldrh.w	r4, [sp, #136]	; 0x88
 8022052:	f89d 50a0 	ldrb.w	r5, [sp, #160]	; 0xa0
 8022056:	f89d a0a8 	ldrb.w	sl, [sp, #168]	; 0xa8
 802205a:	e881 000c 	stmia.w	r1, {r2, r3}
 802205e:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
 8022062:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8022066:	920b      	str	r2, [sp, #44]	; 0x2c
 8022068:	bf0c      	ite	eq
 802206a:	2200      	moveq	r2, #0
 802206c:	f44f 7280 	movne.w	r2, #256	; 0x100
 8022070:	f899 1006 	ldrb.w	r1, [r9, #6]
 8022074:	f010 0f10 	tst.w	r0, #16
 8022078:	9307      	str	r3, [sp, #28]
 802207a:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 802207e:	bf0c      	ite	eq
 8022080:	2000      	moveq	r0, #0
 8022082:	f44f 7080 	movne.w	r0, #256	; 0x100
 8022086:	430a      	orrs	r2, r1
 8022088:	9308      	str	r3, [sp, #32]
 802208a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 802208c:	920a      	str	r2, [sp, #40]	; 0x28
 802208e:	f000 813b 	beq.w	8022308 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2d4>
 8022092:	f899 2007 	ldrb.w	r2, [r9, #7]
 8022096:	4302      	orrs	r2, r0
 8022098:	9209      	str	r2, [sp, #36]	; 0x24
 802209a:	f000 8135 	beq.w	8022308 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2d4>
 802209e:	f999 1009 	ldrsb.w	r1, [r9, #9]
 80220a2:	2c00      	cmp	r4, #0
 80220a4:	f000 80db 	beq.w	802225e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x22a>
 80220a8:	1a61      	subs	r1, r4, r1
 80220aa:	b28c      	uxth	r4, r1
 80220ac:	0422      	lsls	r2, r4, #16
 80220ae:	d504      	bpl.n	80220ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x86>
 80220b0:	eba8 0404 	sub.w	r4, r8, r4
 80220b4:	fa0f f884 	sxth.w	r8, r4
 80220b8:	2400      	movs	r4, #0
 80220ba:	f9b3 0000 	ldrsh.w	r0, [r3]
 80220be:	88df      	ldrh	r7, [r3, #6]
 80220c0:	4580      	cmp	r8, r0
 80220c2:	b282      	uxth	r2, r0
 80220c4:	f8b3 e002 	ldrh.w	lr, [r3, #2]
 80220c8:	bfb8      	it	lt
 80220ca:	18a1      	addlt	r1, r4, r2
 80220cc:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
 80220d0:	44be      	add	lr, r7
 80220d2:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 80220d6:	bfbc      	itt	lt
 80220d8:	eba1 0108 	sublt.w	r1, r1, r8
 80220dc:	4680      	movlt	r8, r0
 80220de:	a812      	add	r0, sp, #72	; 0x48
 80220e0:	bfb8      	it	lt
 80220e2:	b28c      	uxthlt	r4, r1
 80220e4:	8899      	ldrh	r1, [r3, #4]
 80220e6:	fa0f f38e 	sxth.w	r3, lr
 80220ea:	440a      	add	r2, r1
 80220ec:	4641      	mov	r1, r8
 80220ee:	930e      	str	r3, [sp, #56]	; 0x38
 80220f0:	4bb1      	ldr	r3, [pc, #708]	; (80223b8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 80220f2:	b212      	sxth	r2, r2
 80220f4:	f893 b000 	ldrb.w	fp, [r3]
 80220f8:	920f      	str	r2, [sp, #60]	; 0x3c
 80220fa:	f10b 3eff 	add.w	lr, fp, #4294967295
 80220fe:	9a07      	ldr	r2, [sp, #28]
 8022100:	f1de 0300 	rsbs	r3, lr, #0
 8022104:	eb43 030e 	adc.w	r3, r3, lr
 8022108:	930c      	str	r3, [sp, #48]	; 0x30
 802210a:	4653      	mov	r3, sl
 802210c:	f7fc f9ee 	bl	801e4ec <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8022110:	4641      	mov	r1, r8
 8022112:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8022116:	4653      	mov	r3, sl
 8022118:	9a07      	ldr	r2, [sp, #28]
 802211a:	a812      	add	r0, sp, #72	; 0x48
 802211c:	f7fc fa01 	bl	801e522 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8022120:	a916      	add	r1, sp, #88	; 0x58
 8022122:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8022126:	a815      	add	r0, sp, #84	; 0x54
 8022128:	f7fc fabc 	bl	801e6a4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 802212c:	f1ba 0f00 	cmp.w	sl, #0
 8022130:	f040 8099 	bne.w	8022266 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x232>
 8022134:	f1bb 0f01 	cmp.w	fp, #1
 8022138:	f040 809d 	bne.w	8022276 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x242>
 802213c:	4a9f      	ldr	r2, [pc, #636]	; (80223bc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 802213e:	2d04      	cmp	r5, #4
 8022140:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8022144:	8811      	ldrh	r1, [r2, #0]
 8022146:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 802214a:	fb01 2303 	mla	r3, r1, r3, r2
 802214e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8022150:	eb02 0b43 	add.w	fp, r2, r3, lsl #1
 8022154:	f04f 03ff 	mov.w	r3, #255	; 0xff
 8022158:	fa43 f305 	asr.w	r3, r3, r5
 802215c:	b2db      	uxtb	r3, r3
 802215e:	930d      	str	r3, [sp, #52]	; 0x34
 8022160:	ea6f 0303 	mvn.w	r3, r3
 8022164:	b2db      	uxtb	r3, r3
 8022166:	9310      	str	r3, [sp, #64]	; 0x40
 8022168:	f1c5 0308 	rsb	r3, r5, #8
 802216c:	b2db      	uxtb	r3, r3
 802216e:	9309      	str	r3, [sp, #36]	; 0x24
 8022170:	d104      	bne.n	802217c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x148>
 8022172:	f899 300d 	ldrb.w	r3, [r9, #13]
 8022176:	07da      	lsls	r2, r3, #31
 8022178:	f100 8118 	bmi.w	80223ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x378>
 802217c:	b91c      	cbnz	r4, 8022186 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x152>
 802217e:	9b08      	ldr	r3, [sp, #32]
 8022180:	2b00      	cmp	r3, #0
 8022182:	f000 80c4 	beq.w	802230e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2da>
 8022186:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802218a:	9909      	ldr	r1, [sp, #36]	; 0x24
 802218c:	fb16 4303 	smlabb	r3, r6, r3, r4
 8022190:	fb13 f305 	smulbb	r3, r3, r5
 8022194:	b29b      	uxth	r3, r3
 8022196:	f003 0207 	and.w	r2, r3, #7
 802219a:	1a8a      	subs	r2, r1, r2
 802219c:	9926      	ldr	r1, [sp, #152]	; 0x98
 802219e:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 80221a2:	b2d2      	uxtb	r2, r2
 80221a4:	9326      	str	r3, [sp, #152]	; 0x98
 80221a6:	9b08      	ldr	r3, [sp, #32]
 80221a8:	1aff      	subs	r7, r7, r3
 80221aa:	b2bf      	uxth	r7, r7
 80221ac:	4651      	mov	r1, sl
 80221ae:	980c      	ldr	r0, [sp, #48]	; 0x30
 80221b0:	f7ff ff08 	bl	8021fc4 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 80221b4:	4651      	mov	r1, sl
 80221b6:	4681      	mov	r9, r0
 80221b8:	980c      	ldr	r0, [sp, #48]	; 0x30
 80221ba:	f7ff ff1f 	bl	8021ffc <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 80221be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80221c0:	9907      	ldr	r1, [sp, #28]
 80221c2:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 80221c6:	eba3 0e01 	sub.w	lr, r3, r1
 80221ca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80221cc:	eba8 0104 	sub.w	r1, r8, r4
 80221d0:	1a59      	subs	r1, r3, r1
 80221d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80221d4:	4299      	cmp	r1, r3
 80221d6:	bfd4      	ite	le
 80221d8:	ebc4 0101 	rsble	r1, r4, r1
 80221dc:	ebc4 0103 	rsbgt	r1, r4, r3
 80221e0:	4577      	cmp	r7, lr
 80221e2:	fb09 0011 	mls	r0, r9, r1, r0
 80221e6:	eba6 0301 	sub.w	r3, r6, r1
 80221ea:	bfa8      	it	ge
 80221ec:	4677      	movge	r7, lr
 80221ee:	0040      	lsls	r0, r0, #1
 80221f0:	436b      	muls	r3, r5
 80221f2:	9008      	str	r0, [sp, #32]
 80221f4:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 80221f8:	fb0a f000 	mul.w	r0, sl, r0
 80221fc:	9007      	str	r0, [sp, #28]
 80221fe:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8022200:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8022204:	900e      	str	r0, [sp, #56]	; 0x38
 8022206:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8022208:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802220c:	900f      	str	r0, [sp, #60]	; 0x3c
 802220e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8022210:	f000 001f 	and.w	r0, r0, #31
 8022214:	9011      	str	r0, [sp, #68]	; 0x44
 8022216:	2f00      	cmp	r7, #0
 8022218:	dd76      	ble.n	8022308 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2d4>
 802221a:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 802221e:	4689      	mov	r9, r1
 8022220:	46d8      	mov	r8, fp
 8022222:	900c      	str	r0, [sp, #48]	; 0x30
 8022224:	f1b9 0f00 	cmp.w	r9, #0
 8022228:	f340 80a6 	ble.w	8022378 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x344>
 802222c:	9826      	ldr	r0, [sp, #152]	; 0x98
 802222e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8022230:	7800      	ldrb	r0, [r0, #0]
 8022232:	4090      	lsls	r0, r2
 8022234:	4020      	ands	r0, r4
 8022236:	d009      	beq.n	802224c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x218>
 8022238:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 802223a:	4320      	orrs	r0, r4
 802223c:	28ff      	cmp	r0, #255	; 0xff
 802223e:	d168      	bne.n	8022312 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8022240:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8022242:	2cff      	cmp	r4, #255	; 0xff
 8022244:	d165      	bne.n	8022312 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 8022246:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8022248:	f8a8 4000 	strh.w	r4, [r8]
 802224c:	2a00      	cmp	r2, #0
 802224e:	f000 808e 	beq.w	802236e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x33a>
 8022252:	1b52      	subs	r2, r2, r5
 8022254:	b2d2      	uxtb	r2, r2
 8022256:	44d0      	add	r8, sl
 8022258:	f109 39ff 	add.w	r9, r9, #4294967295
 802225c:	e7e2      	b.n	8022224 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x1f0>
 802225e:	4488      	add	r8, r1
 8022260:	fa0f f888 	sxth.w	r8, r8
 8022264:	e729      	b.n	80220ba <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x86>
 8022266:	f1ba 0f01 	cmp.w	sl, #1
 802226a:	f47f af67 	bne.w	802213c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 802226e:	f1bb 0f01 	cmp.w	fp, #1
 8022272:	f47f af63 	bne.w	802213c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 8022276:	f8df b14c 	ldr.w	fp, [pc, #332]	; 80223c4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x390>
 802227a:	f8db 0000 	ldr.w	r0, [fp]
 802227e:	6803      	ldr	r3, [r0, #0]
 8022280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022282:	4798      	blx	r3
 8022284:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 8022288:	465a      	mov	r2, fp
 802228a:	d006      	beq.n	802229a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x266>
 802228c:	2d04      	cmp	r5, #4
 802228e:	bf0a      	itet	eq
 8022290:	f899 300d 	ldrbeq.w	r3, [r9, #13]
 8022294:	2300      	movne	r3, #0
 8022296:	f003 0301 	andeq.w	r3, r3, #1
 802229a:	05c0      	lsls	r0, r0, #23
 802229c:	f140 8081 	bpl.w	80223a2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x36e>
 80222a0:	2d08      	cmp	r5, #8
 80222a2:	d17e      	bne.n	80223a2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x36e>
 80222a4:	2b00      	cmp	r3, #0
 80222a6:	bf0c      	ite	eq
 80222a8:	f44f 7180 	moveq.w	r1, #256	; 0x100
 80222ac:	2180      	movne	r1, #128	; 0x80
 80222ae:	2c00      	cmp	r4, #0
 80222b0:	f47f af44 	bne.w	802213c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 80222b4:	9b08      	ldr	r3, [sp, #32]
 80222b6:	2b00      	cmp	r3, #0
 80222b8:	f47f af40 	bne.w	802213c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 80222bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80222be:	980f      	ldr	r0, [sp, #60]	; 0x3c
 80222c0:	4443      	add	r3, r8
 80222c2:	4298      	cmp	r0, r3
 80222c4:	f6ff af3a 	blt.w	802213c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 80222c8:	9807      	ldr	r0, [sp, #28]
 80222ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80222cc:	4403      	add	r3, r0
 80222ce:	980e      	ldr	r0, [sp, #56]	; 0x38
 80222d0:	4298      	cmp	r0, r3
 80222d2:	f6ff af33 	blt.w	802213c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 80222d6:	2d08      	cmp	r5, #8
 80222d8:	6810      	ldr	r0, [r2, #0]
 80222da:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 80222de:	bf18      	it	ne
 80222e0:	3601      	addne	r6, #1
 80222e2:	6804      	ldr	r4, [r0, #0]
 80222e4:	9105      	str	r1, [sp, #20]
 80222e6:	bf18      	it	ne
 80222e8:	f026 0601 	bicne.w	r6, r6, #1
 80222ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80222ee:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 80222f2:	bf18      	it	ne
 80222f4:	b2b6      	uxthne	r6, r6
 80222f6:	9104      	str	r1, [sp, #16]
 80222f8:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80222fa:	9602      	str	r6, [sp, #8]
 80222fc:	9103      	str	r1, [sp, #12]
 80222fe:	9926      	ldr	r1, [sp, #152]	; 0x98
 8022300:	e88d 00c0 	stmia.w	sp, {r6, r7}
 8022304:	6ca4      	ldr	r4, [r4, #72]	; 0x48
 8022306:	47a0      	blx	r4
 8022308:	b017      	add	sp, #92	; 0x5c
 802230a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802230e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022310:	e74c      	b.n	80221ac <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x178>
 8022312:	f8b8 c000 	ldrh.w	ip, [r8]
 8022316:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 802231a:	f42c 66ff 	bic.w	r6, ip, #2040	; 0x7f8
 802231e:	fb10 f004 	smulbb	r0, r0, r4
 8022322:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 8022324:	f026 0607 	bic.w	r6, r6, #7
 8022328:	f5c0 3e80 	rsb	lr, r0, #65536	; 0x10000
 802232c:	fb0e f606 	mul.w	r6, lr, r6
 8022330:	fb00 6604 	mla	r6, r0, r4, r6
 8022334:	4c22      	ldr	r4, [pc, #136]	; (80223c0 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 8022336:	ea04 4416 	and.w	r4, r4, r6, lsr #16
 802233a:	940a      	str	r4, [sp, #40]	; 0x28
 802233c:	f40c 64fc 	and.w	r4, ip, #2016	; 0x7e0
 8022340:	f00c 0c1f 	and.w	ip, ip, #31
 8022344:	fb0e f404 	mul.w	r4, lr, r4
 8022348:	fb0e fc0c 	mul.w	ip, lr, ip
 802234c:	4626      	mov	r6, r4
 802234e:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8022350:	fb00 6404 	mla	r4, r0, r4, r6
 8022354:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8022356:	0c24      	lsrs	r4, r4, #16
 8022358:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 802235c:	4334      	orrs	r4, r6
 802235e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8022360:	fb00 cc06 	mla	ip, r0, r6, ip
 8022364:	f3cc 4c04 	ubfx	ip, ip, #16, #5
 8022368:	ea44 040c 	orr.w	r4, r4, ip
 802236c:	e76c      	b.n	8022248 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x214>
 802236e:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022370:	3201      	adds	r2, #1
 8022372:	9226      	str	r2, [sp, #152]	; 0x98
 8022374:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022376:	e76e      	b.n	8022256 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x222>
 8022378:	b16b      	cbz	r3, 8022396 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x362>
 802237a:	4293      	cmp	r3, r2
 802237c:	dd08      	ble.n	8022390 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x35c>
 802237e:	1b58      	subs	r0, r3, r5
 8022380:	2408      	movs	r4, #8
 8022382:	1a80      	subs	r0, r0, r2
 8022384:	fb90 f0f4 	sdiv	r0, r0, r4
 8022388:	9c26      	ldr	r4, [sp, #152]	; 0x98
 802238a:	3001      	adds	r0, #1
 802238c:	4404      	add	r4, r0
 802238e:	9426      	str	r4, [sp, #152]	; 0x98
 8022390:	1ad2      	subs	r2, r2, r3
 8022392:	f002 0207 	and.w	r2, r2, #7
 8022396:	9807      	ldr	r0, [sp, #28]
 8022398:	3f01      	subs	r7, #1
 802239a:	9c08      	ldr	r4, [sp, #32]
 802239c:	4420      	add	r0, r4
 802239e:	4483      	add	fp, r0
 80223a0:	e739      	b.n	8022216 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 80223a2:	2b00      	cmp	r3, #0
 80223a4:	f43f aeca 	beq.w	802213c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 80223a8:	2180      	movs	r1, #128	; 0x80
 80223aa:	e780      	b.n	80222ae <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x27a>
 80223ac:	07f3      	lsls	r3, r6, #31
 80223ae:	f57f aee5 	bpl.w	802217c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x148>
 80223b2:	3601      	adds	r6, #1
 80223b4:	b2b6      	uxth	r6, r6
 80223b6:	e6e1      	b.n	802217c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x148>
 80223b8:	20009d30 	.word	0x20009d30
 80223bc:	20009d32 	.word	0x20009d32
 80223c0:	fffff800 	.word	0xfffff800
 80223c4:	20009d38 	.word	0x20009d38

080223c8 <CRC_Lock>:
 80223c8:	4a13      	ldr	r2, [pc, #76]	; (8022418 <CRC_Lock+0x50>)
 80223ca:	6813      	ldr	r3, [r2, #0]
 80223cc:	f023 0301 	bic.w	r3, r3, #1
 80223d0:	6013      	str	r3, [r2, #0]
 80223d2:	4b12      	ldr	r3, [pc, #72]	; (802241c <CRC_Lock+0x54>)
 80223d4:	681b      	ldr	r3, [r3, #0]
 80223d6:	b9a3      	cbnz	r3, 8022402 <CRC_Lock+0x3a>
 80223d8:	4b11      	ldr	r3, [pc, #68]	; (8022420 <CRC_Lock+0x58>)
 80223da:	681b      	ldr	r3, [r3, #0]
 80223dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80223e0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80223e4:	d10d      	bne.n	8022402 <CRC_Lock+0x3a>
 80223e6:	4b0f      	ldr	r3, [pc, #60]	; (8022424 <CRC_Lock+0x5c>)
 80223e8:	2201      	movs	r2, #1
 80223ea:	601a      	str	r2, [r3, #0]
 80223ec:	681a      	ldr	r2, [r3, #0]
 80223ee:	2a00      	cmp	r2, #0
 80223f0:	d1fc      	bne.n	80223ec <CRC_Lock+0x24>
 80223f2:	4b0d      	ldr	r3, [pc, #52]	; (8022428 <CRC_Lock+0x60>)
 80223f4:	6018      	str	r0, [r3, #0]
 80223f6:	6818      	ldr	r0, [r3, #0]
 80223f8:	4288      	cmp	r0, r1
 80223fa:	bf14      	ite	ne
 80223fc:	2000      	movne	r0, #0
 80223fe:	2001      	moveq	r0, #1
 8022400:	4770      	bx	lr
 8022402:	4b0a      	ldr	r3, [pc, #40]	; (802242c <CRC_Lock+0x64>)
 8022404:	2201      	movs	r2, #1
 8022406:	601a      	str	r2, [r3, #0]
 8022408:	681a      	ldr	r2, [r3, #0]
 802240a:	2a00      	cmp	r2, #0
 802240c:	d1fc      	bne.n	8022408 <CRC_Lock+0x40>
 802240e:	4b08      	ldr	r3, [pc, #32]	; (8022430 <CRC_Lock+0x68>)
 8022410:	6018      	str	r0, [r3, #0]
 8022412:	6818      	ldr	r0, [r3, #0]
 8022414:	4281      	cmp	r1, r0
 8022416:	e7f0      	b.n	80223fa <CRC_Lock+0x32>
 8022418:	e0002000 	.word	0xe0002000
 802241c:	e0042000 	.word	0xe0042000
 8022420:	5c001000 	.word	0x5c001000
 8022424:	58024c08 	.word	0x58024c08
 8022428:	58024c00 	.word	0x58024c00
 802242c:	40023008 	.word	0x40023008
 8022430:	40023000 	.word	0x40023000

08022434 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8022434:	6101      	str	r1, [r0, #16]
 8022436:	4770      	bx	lr

08022438 <_ZN8touchgfx8Gestures4tickEv>:
 8022438:	7b83      	ldrb	r3, [r0, #14]
 802243a:	b14b      	cbz	r3, 8022450 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802243c:	8903      	ldrh	r3, [r0, #8]
 802243e:	3301      	adds	r3, #1
 8022440:	b29b      	uxth	r3, r3
 8022442:	2b07      	cmp	r3, #7
 8022444:	8103      	strh	r3, [r0, #8]
 8022446:	bf81      	itttt	hi
 8022448:	2300      	movhi	r3, #0
 802244a:	8143      	strhhi	r3, [r0, #10]
 802244c:	8183      	strhhi	r3, [r0, #12]
 802244e:	7383      	strbhi	r3, [r0, #14]
 8022450:	4770      	bx	lr
	...

08022454 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8022454:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8022458:	4604      	mov	r4, r0
 802245a:	4698      	mov	r8, r3
 802245c:	8880      	ldrh	r0, [r0, #4]
 802245e:	4617      	mov	r7, r2
 8022460:	4b1d      	ldr	r3, [pc, #116]	; (80224d8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 8022462:	460e      	mov	r6, r1
 8022464:	f8ad 0006 	strh.w	r0, [sp, #6]
 8022468:	eba8 0000 	sub.w	r0, r8, r0
 802246c:	9300      	str	r3, [sp, #0]
 802246e:	2300      	movs	r3, #0
 8022470:	b280      	uxth	r0, r0
 8022472:	8aa2      	ldrh	r2, [r4, #20]
 8022474:	f88d 3004 	strb.w	r3, [sp, #4]
 8022478:	b203      	sxth	r3, r0
 802247a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802247e:	88e1      	ldrh	r1, [r4, #6]
 8022480:	2b00      	cmp	r3, #0
 8022482:	f8ad 800a 	strh.w	r8, [sp, #10]
 8022486:	f8ad 1008 	strh.w	r1, [sp, #8]
 802248a:	bfb8      	it	lt
 802248c:	4240      	neglt	r0, r0
 802248e:	f8ad 500c 	strh.w	r5, [sp, #12]
 8022492:	bfb8      	it	lt
 8022494:	b203      	sxthlt	r3, r0
 8022496:	4293      	cmp	r3, r2
 8022498:	dc0c      	bgt.n	80224b4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x60>
 802249a:	1a69      	subs	r1, r5, r1
 802249c:	b289      	uxth	r1, r1
 802249e:	b20b      	sxth	r3, r1
 80224a0:	2b00      	cmp	r3, #0
 80224a2:	bfbc      	itt	lt
 80224a4:	4249      	neglt	r1, r1
 80224a6:	b20b      	sxthlt	r3, r1
 80224a8:	429a      	cmp	r2, r3
 80224aa:	db03      	blt.n	80224b4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x60>
 80224ac:	2000      	movs	r0, #0
 80224ae:	b004      	add	sp, #16
 80224b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80224b4:	6920      	ldr	r0, [r4, #16]
 80224b6:	4669      	mov	r1, sp
 80224b8:	eba8 0606 	sub.w	r6, r8, r6
 80224bc:	1bef      	subs	r7, r5, r7
 80224be:	6803      	ldr	r3, [r0, #0]
 80224c0:	685b      	ldr	r3, [r3, #4]
 80224c2:	4798      	blx	r3
 80224c4:	2300      	movs	r3, #0
 80224c6:	2001      	movs	r0, #1
 80224c8:	8166      	strh	r6, [r4, #10]
 80224ca:	8123      	strh	r3, [r4, #8]
 80224cc:	81a7      	strh	r7, [r4, #12]
 80224ce:	f8a4 8004 	strh.w	r8, [r4, #4]
 80224d2:	80e5      	strh	r5, [r4, #6]
 80224d4:	73a0      	strb	r0, [r4, #14]
 80224d6:	e7ea      	b.n	80224ae <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x5a>
 80224d8:	0802492c 	.word	0x0802492c

080224dc <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80224dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80224de:	461e      	mov	r6, r3
 80224e0:	1e4b      	subs	r3, r1, #1
 80224e2:	b085      	sub	sp, #20
 80224e4:	4604      	mov	r4, r0
 80224e6:	2b01      	cmp	r3, #1
 80224e8:	460d      	mov	r5, r1
 80224ea:	4617      	mov	r7, r2
 80224ec:	d845      	bhi.n	802257a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x9e>
 80224ee:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80224f2:	1cd3      	adds	r3, r2, #3
 80224f4:	b29b      	uxth	r3, r3
 80224f6:	2b06      	cmp	r3, #6
 80224f8:	d913      	bls.n	8022522 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x46>
 80224fa:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80224fe:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8022502:	4820      	ldr	r0, [pc, #128]	; (8022584 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa8>)
 8022504:	f8ad 100c 	strh.w	r1, [sp, #12]
 8022508:	a901      	add	r1, sp, #4
 802250a:	9001      	str	r0, [sp, #4]
 802250c:	2000      	movs	r0, #0
 802250e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8022512:	f88d 0008 	strb.w	r0, [sp, #8]
 8022516:	6920      	ldr	r0, [r4, #16]
 8022518:	f8ad 300e 	strh.w	r3, [sp, #14]
 802251c:	6803      	ldr	r3, [r0, #0]
 802251e:	689b      	ldr	r3, [r3, #8]
 8022520:	4798      	blx	r3
 8022522:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022526:	1cd3      	adds	r3, r2, #3
 8022528:	b29b      	uxth	r3, r3
 802252a:	2b06      	cmp	r3, #6
 802252c:	d913      	bls.n	8022556 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 802252e:	4815      	ldr	r0, [pc, #84]	; (8022584 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa8>)
 8022530:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8022534:	9001      	str	r0, [sp, #4]
 8022536:	2001      	movs	r0, #1
 8022538:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 802253c:	f88d 0008 	strb.w	r0, [sp, #8]
 8022540:	6920      	ldr	r0, [r4, #16]
 8022542:	f8ad 100c 	strh.w	r1, [sp, #12]
 8022546:	a901      	add	r1, sp, #4
 8022548:	f8ad 200a 	strh.w	r2, [sp, #10]
 802254c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022550:	6803      	ldr	r3, [r0, #0]
 8022552:	689b      	ldr	r3, [r3, #8]
 8022554:	4798      	blx	r3
 8022556:	4b0c      	ldr	r3, [pc, #48]	; (8022588 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xac>)
 8022558:	a901      	add	r1, sp, #4
 802255a:	6920      	ldr	r0, [r4, #16]
 802255c:	9301      	str	r3, [sp, #4]
 802255e:	2300      	movs	r3, #0
 8022560:	f88d 5008 	strb.w	r5, [sp, #8]
 8022564:	f8ad 700a 	strh.w	r7, [sp, #10]
 8022568:	f8ad 600c 	strh.w	r6, [sp, #12]
 802256c:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022570:	6803      	ldr	r3, [r0, #0]
 8022572:	681b      	ldr	r3, [r3, #0]
 8022574:	4798      	blx	r3
 8022576:	b005      	add	sp, #20
 8022578:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802257a:	2900      	cmp	r1, #0
 802257c:	d1eb      	bne.n	8022556 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 802257e:	80a2      	strh	r2, [r4, #4]
 8022580:	80c6      	strh	r6, [r0, #6]
 8022582:	e7e8      	b.n	8022556 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 8022584:	080261d4 	.word	0x080261d4
 8022588:	08024940 	.word	0x08024940

0802258c <_ZdlPvj>:
 802258c:	f000 b812 	b.w	80225b4 <_ZdlPv>

08022590 <__cxa_guard_acquire>:
 8022590:	6803      	ldr	r3, [r0, #0]
 8022592:	07db      	lsls	r3, r3, #31
 8022594:	d406      	bmi.n	80225a4 <__cxa_guard_acquire+0x14>
 8022596:	7843      	ldrb	r3, [r0, #1]
 8022598:	b103      	cbz	r3, 802259c <__cxa_guard_acquire+0xc>
 802259a:	deff      	udf	#255	; 0xff
 802259c:	2301      	movs	r3, #1
 802259e:	7043      	strb	r3, [r0, #1]
 80225a0:	4618      	mov	r0, r3
 80225a2:	4770      	bx	lr
 80225a4:	2000      	movs	r0, #0
 80225a6:	4770      	bx	lr

080225a8 <__cxa_guard_release>:
 80225a8:	2301      	movs	r3, #1
 80225aa:	6003      	str	r3, [r0, #0]
 80225ac:	4770      	bx	lr

080225ae <__cxa_pure_virtual>:
 80225ae:	b508      	push	{r3, lr}
 80225b0:	f000 f80e 	bl	80225d0 <_ZSt9terminatev>

080225b4 <_ZdlPv>:
 80225b4:	f000 b880 	b.w	80226b8 <free>

080225b8 <_ZN10__cxxabiv111__terminateEPFvvE>:
 80225b8:	b508      	push	{r3, lr}
 80225ba:	4780      	blx	r0
 80225bc:	f000 f80d 	bl	80225da <abort>

080225c0 <_ZSt13get_terminatev>:
 80225c0:	4b02      	ldr	r3, [pc, #8]	; (80225cc <_ZSt13get_terminatev+0xc>)
 80225c2:	6818      	ldr	r0, [r3, #0]
 80225c4:	f3bf 8f5b 	dmb	ish
 80225c8:	4770      	bx	lr
 80225ca:	bf00      	nop
 80225cc:	200000a4 	.word	0x200000a4

080225d0 <_ZSt9terminatev>:
 80225d0:	b508      	push	{r3, lr}
 80225d2:	f7ff fff5 	bl	80225c0 <_ZSt13get_terminatev>
 80225d6:	f7ff ffef 	bl	80225b8 <_ZN10__cxxabiv111__terminateEPFvvE>

080225da <abort>:
 80225da:	b508      	push	{r3, lr}
 80225dc:	2006      	movs	r0, #6
 80225de:	f000 fc59 	bl	8022e94 <raise>
 80225e2:	2001      	movs	r0, #1
 80225e4:	f7f7 f8f4 	bl	80197d0 <_exit>

080225e8 <__assert_func>:
 80225e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80225ea:	4614      	mov	r4, r2
 80225ec:	461a      	mov	r2, r3
 80225ee:	4b09      	ldr	r3, [pc, #36]	; (8022614 <__assert_func+0x2c>)
 80225f0:	681b      	ldr	r3, [r3, #0]
 80225f2:	4605      	mov	r5, r0
 80225f4:	68d8      	ldr	r0, [r3, #12]
 80225f6:	b14c      	cbz	r4, 802260c <__assert_func+0x24>
 80225f8:	4b07      	ldr	r3, [pc, #28]	; (8022618 <__assert_func+0x30>)
 80225fa:	9100      	str	r1, [sp, #0]
 80225fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022600:	4906      	ldr	r1, [pc, #24]	; (802261c <__assert_func+0x34>)
 8022602:	462b      	mov	r3, r5
 8022604:	f000 f81a 	bl	802263c <fiprintf>
 8022608:	f7ff ffe7 	bl	80225da <abort>
 802260c:	4b04      	ldr	r3, [pc, #16]	; (8022620 <__assert_func+0x38>)
 802260e:	461c      	mov	r4, r3
 8022610:	e7f3      	b.n	80225fa <__assert_func+0x12>
 8022612:	bf00      	nop
 8022614:	200000a8 	.word	0x200000a8
 8022618:	080268be 	.word	0x080268be
 802261c:	080268cb 	.word	0x080268cb
 8022620:	080268f9 	.word	0x080268f9

08022624 <atexit>:
 8022624:	2300      	movs	r3, #0
 8022626:	4601      	mov	r1, r0
 8022628:	461a      	mov	r2, r3
 802262a:	4618      	mov	r0, r3
 802262c:	f000 bd0e 	b.w	802304c <__register_exitproc>

08022630 <__errno>:
 8022630:	4b01      	ldr	r3, [pc, #4]	; (8022638 <__errno+0x8>)
 8022632:	6818      	ldr	r0, [r3, #0]
 8022634:	4770      	bx	lr
 8022636:	bf00      	nop
 8022638:	200000a8 	.word	0x200000a8

0802263c <fiprintf>:
 802263c:	b40e      	push	{r1, r2, r3}
 802263e:	b503      	push	{r0, r1, lr}
 8022640:	4601      	mov	r1, r0
 8022642:	ab03      	add	r3, sp, #12
 8022644:	4805      	ldr	r0, [pc, #20]	; (802265c <fiprintf+0x20>)
 8022646:	f853 2b04 	ldr.w	r2, [r3], #4
 802264a:	6800      	ldr	r0, [r0, #0]
 802264c:	9301      	str	r3, [sp, #4]
 802264e:	f000 f925 	bl	802289c <_vfiprintf_r>
 8022652:	b002      	add	sp, #8
 8022654:	f85d eb04 	ldr.w	lr, [sp], #4
 8022658:	b003      	add	sp, #12
 802265a:	4770      	bx	lr
 802265c:	200000a8 	.word	0x200000a8

08022660 <__libc_init_array>:
 8022660:	b570      	push	{r4, r5, r6, lr}
 8022662:	4d0d      	ldr	r5, [pc, #52]	; (8022698 <__libc_init_array+0x38>)
 8022664:	4c0d      	ldr	r4, [pc, #52]	; (802269c <__libc_init_array+0x3c>)
 8022666:	1b64      	subs	r4, r4, r5
 8022668:	10a4      	asrs	r4, r4, #2
 802266a:	2600      	movs	r6, #0
 802266c:	42a6      	cmp	r6, r4
 802266e:	d109      	bne.n	8022684 <__libc_init_array+0x24>
 8022670:	4d0b      	ldr	r5, [pc, #44]	; (80226a0 <__libc_init_array+0x40>)
 8022672:	4c0c      	ldr	r4, [pc, #48]	; (80226a4 <__libc_init_array+0x44>)
 8022674:	f001 f824 	bl	80236c0 <_init>
 8022678:	1b64      	subs	r4, r4, r5
 802267a:	10a4      	asrs	r4, r4, #2
 802267c:	2600      	movs	r6, #0
 802267e:	42a6      	cmp	r6, r4
 8022680:	d105      	bne.n	802268e <__libc_init_array+0x2e>
 8022682:	bd70      	pop	{r4, r5, r6, pc}
 8022684:	f855 3b04 	ldr.w	r3, [r5], #4
 8022688:	4798      	blx	r3
 802268a:	3601      	adds	r6, #1
 802268c:	e7ee      	b.n	802266c <__libc_init_array+0xc>
 802268e:	f855 3b04 	ldr.w	r3, [r5], #4
 8022692:	4798      	blx	r3
 8022694:	3601      	adds	r6, #1
 8022696:	e7f2      	b.n	802267e <__libc_init_array+0x1e>
 8022698:	0804fe78 	.word	0x0804fe78
 802269c:	0804fe78 	.word	0x0804fe78
 80226a0:	0804fe78 	.word	0x0804fe78
 80226a4:	0804fe88 	.word	0x0804fe88

080226a8 <malloc>:
 80226a8:	4b02      	ldr	r3, [pc, #8]	; (80226b4 <malloc+0xc>)
 80226aa:	4601      	mov	r1, r0
 80226ac:	6818      	ldr	r0, [r3, #0]
 80226ae:	f000 b871 	b.w	8022794 <_malloc_r>
 80226b2:	bf00      	nop
 80226b4:	200000a8 	.word	0x200000a8

080226b8 <free>:
 80226b8:	4b02      	ldr	r3, [pc, #8]	; (80226c4 <free+0xc>)
 80226ba:	4601      	mov	r1, r0
 80226bc:	6818      	ldr	r0, [r3, #0]
 80226be:	f000 b819 	b.w	80226f4 <_free_r>
 80226c2:	bf00      	nop
 80226c4:	200000a8 	.word	0x200000a8

080226c8 <memcpy>:
 80226c8:	440a      	add	r2, r1
 80226ca:	4291      	cmp	r1, r2
 80226cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80226d0:	d100      	bne.n	80226d4 <memcpy+0xc>
 80226d2:	4770      	bx	lr
 80226d4:	b510      	push	{r4, lr}
 80226d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80226da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80226de:	4291      	cmp	r1, r2
 80226e0:	d1f9      	bne.n	80226d6 <memcpy+0xe>
 80226e2:	bd10      	pop	{r4, pc}

080226e4 <memset>:
 80226e4:	4402      	add	r2, r0
 80226e6:	4603      	mov	r3, r0
 80226e8:	4293      	cmp	r3, r2
 80226ea:	d100      	bne.n	80226ee <memset+0xa>
 80226ec:	4770      	bx	lr
 80226ee:	f803 1b01 	strb.w	r1, [r3], #1
 80226f2:	e7f9      	b.n	80226e8 <memset+0x4>

080226f4 <_free_r>:
 80226f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80226f6:	2900      	cmp	r1, #0
 80226f8:	d048      	beq.n	802278c <_free_r+0x98>
 80226fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80226fe:	9001      	str	r0, [sp, #4]
 8022700:	2b00      	cmp	r3, #0
 8022702:	f1a1 0404 	sub.w	r4, r1, #4
 8022706:	bfb8      	it	lt
 8022708:	18e4      	addlt	r4, r4, r3
 802270a:	f000 ff21 	bl	8023550 <__malloc_lock>
 802270e:	4a20      	ldr	r2, [pc, #128]	; (8022790 <_free_r+0x9c>)
 8022710:	9801      	ldr	r0, [sp, #4]
 8022712:	6813      	ldr	r3, [r2, #0]
 8022714:	4615      	mov	r5, r2
 8022716:	b933      	cbnz	r3, 8022726 <_free_r+0x32>
 8022718:	6063      	str	r3, [r4, #4]
 802271a:	6014      	str	r4, [r2, #0]
 802271c:	b003      	add	sp, #12
 802271e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022722:	f000 bf1b 	b.w	802355c <__malloc_unlock>
 8022726:	42a3      	cmp	r3, r4
 8022728:	d90b      	bls.n	8022742 <_free_r+0x4e>
 802272a:	6821      	ldr	r1, [r4, #0]
 802272c:	1862      	adds	r2, r4, r1
 802272e:	4293      	cmp	r3, r2
 8022730:	bf04      	itt	eq
 8022732:	681a      	ldreq	r2, [r3, #0]
 8022734:	685b      	ldreq	r3, [r3, #4]
 8022736:	6063      	str	r3, [r4, #4]
 8022738:	bf04      	itt	eq
 802273a:	1852      	addeq	r2, r2, r1
 802273c:	6022      	streq	r2, [r4, #0]
 802273e:	602c      	str	r4, [r5, #0]
 8022740:	e7ec      	b.n	802271c <_free_r+0x28>
 8022742:	461a      	mov	r2, r3
 8022744:	685b      	ldr	r3, [r3, #4]
 8022746:	b10b      	cbz	r3, 802274c <_free_r+0x58>
 8022748:	42a3      	cmp	r3, r4
 802274a:	d9fa      	bls.n	8022742 <_free_r+0x4e>
 802274c:	6811      	ldr	r1, [r2, #0]
 802274e:	1855      	adds	r5, r2, r1
 8022750:	42a5      	cmp	r5, r4
 8022752:	d10b      	bne.n	802276c <_free_r+0x78>
 8022754:	6824      	ldr	r4, [r4, #0]
 8022756:	4421      	add	r1, r4
 8022758:	1854      	adds	r4, r2, r1
 802275a:	42a3      	cmp	r3, r4
 802275c:	6011      	str	r1, [r2, #0]
 802275e:	d1dd      	bne.n	802271c <_free_r+0x28>
 8022760:	681c      	ldr	r4, [r3, #0]
 8022762:	685b      	ldr	r3, [r3, #4]
 8022764:	6053      	str	r3, [r2, #4]
 8022766:	4421      	add	r1, r4
 8022768:	6011      	str	r1, [r2, #0]
 802276a:	e7d7      	b.n	802271c <_free_r+0x28>
 802276c:	d902      	bls.n	8022774 <_free_r+0x80>
 802276e:	230c      	movs	r3, #12
 8022770:	6003      	str	r3, [r0, #0]
 8022772:	e7d3      	b.n	802271c <_free_r+0x28>
 8022774:	6825      	ldr	r5, [r4, #0]
 8022776:	1961      	adds	r1, r4, r5
 8022778:	428b      	cmp	r3, r1
 802277a:	bf04      	itt	eq
 802277c:	6819      	ldreq	r1, [r3, #0]
 802277e:	685b      	ldreq	r3, [r3, #4]
 8022780:	6063      	str	r3, [r4, #4]
 8022782:	bf04      	itt	eq
 8022784:	1949      	addeq	r1, r1, r5
 8022786:	6021      	streq	r1, [r4, #0]
 8022788:	6054      	str	r4, [r2, #4]
 802278a:	e7c7      	b.n	802271c <_free_r+0x28>
 802278c:	b003      	add	sp, #12
 802278e:	bd30      	pop	{r4, r5, pc}
 8022790:	20009dd4 	.word	0x20009dd4

08022794 <_malloc_r>:
 8022794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022796:	1ccd      	adds	r5, r1, #3
 8022798:	f025 0503 	bic.w	r5, r5, #3
 802279c:	3508      	adds	r5, #8
 802279e:	2d0c      	cmp	r5, #12
 80227a0:	bf38      	it	cc
 80227a2:	250c      	movcc	r5, #12
 80227a4:	2d00      	cmp	r5, #0
 80227a6:	4606      	mov	r6, r0
 80227a8:	db01      	blt.n	80227ae <_malloc_r+0x1a>
 80227aa:	42a9      	cmp	r1, r5
 80227ac:	d903      	bls.n	80227b6 <_malloc_r+0x22>
 80227ae:	230c      	movs	r3, #12
 80227b0:	6033      	str	r3, [r6, #0]
 80227b2:	2000      	movs	r0, #0
 80227b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80227b6:	f000 fecb 	bl	8023550 <__malloc_lock>
 80227ba:	4921      	ldr	r1, [pc, #132]	; (8022840 <_malloc_r+0xac>)
 80227bc:	680a      	ldr	r2, [r1, #0]
 80227be:	4614      	mov	r4, r2
 80227c0:	b99c      	cbnz	r4, 80227ea <_malloc_r+0x56>
 80227c2:	4f20      	ldr	r7, [pc, #128]	; (8022844 <_malloc_r+0xb0>)
 80227c4:	683b      	ldr	r3, [r7, #0]
 80227c6:	b923      	cbnz	r3, 80227d2 <_malloc_r+0x3e>
 80227c8:	4621      	mov	r1, r4
 80227ca:	4630      	mov	r0, r6
 80227cc:	f000 fb2a 	bl	8022e24 <_sbrk_r>
 80227d0:	6038      	str	r0, [r7, #0]
 80227d2:	4629      	mov	r1, r5
 80227d4:	4630      	mov	r0, r6
 80227d6:	f000 fb25 	bl	8022e24 <_sbrk_r>
 80227da:	1c43      	adds	r3, r0, #1
 80227dc:	d123      	bne.n	8022826 <_malloc_r+0x92>
 80227de:	230c      	movs	r3, #12
 80227e0:	6033      	str	r3, [r6, #0]
 80227e2:	4630      	mov	r0, r6
 80227e4:	f000 feba 	bl	802355c <__malloc_unlock>
 80227e8:	e7e3      	b.n	80227b2 <_malloc_r+0x1e>
 80227ea:	6823      	ldr	r3, [r4, #0]
 80227ec:	1b5b      	subs	r3, r3, r5
 80227ee:	d417      	bmi.n	8022820 <_malloc_r+0x8c>
 80227f0:	2b0b      	cmp	r3, #11
 80227f2:	d903      	bls.n	80227fc <_malloc_r+0x68>
 80227f4:	6023      	str	r3, [r4, #0]
 80227f6:	441c      	add	r4, r3
 80227f8:	6025      	str	r5, [r4, #0]
 80227fa:	e004      	b.n	8022806 <_malloc_r+0x72>
 80227fc:	6863      	ldr	r3, [r4, #4]
 80227fe:	42a2      	cmp	r2, r4
 8022800:	bf0c      	ite	eq
 8022802:	600b      	streq	r3, [r1, #0]
 8022804:	6053      	strne	r3, [r2, #4]
 8022806:	4630      	mov	r0, r6
 8022808:	f000 fea8 	bl	802355c <__malloc_unlock>
 802280c:	f104 000b 	add.w	r0, r4, #11
 8022810:	1d23      	adds	r3, r4, #4
 8022812:	f020 0007 	bic.w	r0, r0, #7
 8022816:	1ac2      	subs	r2, r0, r3
 8022818:	d0cc      	beq.n	80227b4 <_malloc_r+0x20>
 802281a:	1a1b      	subs	r3, r3, r0
 802281c:	50a3      	str	r3, [r4, r2]
 802281e:	e7c9      	b.n	80227b4 <_malloc_r+0x20>
 8022820:	4622      	mov	r2, r4
 8022822:	6864      	ldr	r4, [r4, #4]
 8022824:	e7cc      	b.n	80227c0 <_malloc_r+0x2c>
 8022826:	1cc4      	adds	r4, r0, #3
 8022828:	f024 0403 	bic.w	r4, r4, #3
 802282c:	42a0      	cmp	r0, r4
 802282e:	d0e3      	beq.n	80227f8 <_malloc_r+0x64>
 8022830:	1a21      	subs	r1, r4, r0
 8022832:	4630      	mov	r0, r6
 8022834:	f000 faf6 	bl	8022e24 <_sbrk_r>
 8022838:	3001      	adds	r0, #1
 802283a:	d1dd      	bne.n	80227f8 <_malloc_r+0x64>
 802283c:	e7cf      	b.n	80227de <_malloc_r+0x4a>
 802283e:	bf00      	nop
 8022840:	20009dd4 	.word	0x20009dd4
 8022844:	20009dd8 	.word	0x20009dd8

08022848 <__sfputc_r>:
 8022848:	6893      	ldr	r3, [r2, #8]
 802284a:	3b01      	subs	r3, #1
 802284c:	2b00      	cmp	r3, #0
 802284e:	b410      	push	{r4}
 8022850:	6093      	str	r3, [r2, #8]
 8022852:	da08      	bge.n	8022866 <__sfputc_r+0x1e>
 8022854:	6994      	ldr	r4, [r2, #24]
 8022856:	42a3      	cmp	r3, r4
 8022858:	db01      	blt.n	802285e <__sfputc_r+0x16>
 802285a:	290a      	cmp	r1, #10
 802285c:	d103      	bne.n	8022866 <__sfputc_r+0x1e>
 802285e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022862:	f000 bb33 	b.w	8022ecc <__swbuf_r>
 8022866:	6813      	ldr	r3, [r2, #0]
 8022868:	1c58      	adds	r0, r3, #1
 802286a:	6010      	str	r0, [r2, #0]
 802286c:	7019      	strb	r1, [r3, #0]
 802286e:	4608      	mov	r0, r1
 8022870:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022874:	4770      	bx	lr

08022876 <__sfputs_r>:
 8022876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022878:	4606      	mov	r6, r0
 802287a:	460f      	mov	r7, r1
 802287c:	4614      	mov	r4, r2
 802287e:	18d5      	adds	r5, r2, r3
 8022880:	42ac      	cmp	r4, r5
 8022882:	d101      	bne.n	8022888 <__sfputs_r+0x12>
 8022884:	2000      	movs	r0, #0
 8022886:	e007      	b.n	8022898 <__sfputs_r+0x22>
 8022888:	f814 1b01 	ldrb.w	r1, [r4], #1
 802288c:	463a      	mov	r2, r7
 802288e:	4630      	mov	r0, r6
 8022890:	f7ff ffda 	bl	8022848 <__sfputc_r>
 8022894:	1c43      	adds	r3, r0, #1
 8022896:	d1f3      	bne.n	8022880 <__sfputs_r+0xa>
 8022898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802289c <_vfiprintf_r>:
 802289c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80228a0:	460d      	mov	r5, r1
 80228a2:	b09d      	sub	sp, #116	; 0x74
 80228a4:	4614      	mov	r4, r2
 80228a6:	4698      	mov	r8, r3
 80228a8:	4606      	mov	r6, r0
 80228aa:	b118      	cbz	r0, 80228b4 <_vfiprintf_r+0x18>
 80228ac:	6983      	ldr	r3, [r0, #24]
 80228ae:	b90b      	cbnz	r3, 80228b4 <_vfiprintf_r+0x18>
 80228b0:	f000 fd48 	bl	8023344 <__sinit>
 80228b4:	4b89      	ldr	r3, [pc, #548]	; (8022adc <_vfiprintf_r+0x240>)
 80228b6:	429d      	cmp	r5, r3
 80228b8:	d11b      	bne.n	80228f2 <_vfiprintf_r+0x56>
 80228ba:	6875      	ldr	r5, [r6, #4]
 80228bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80228be:	07d9      	lsls	r1, r3, #31
 80228c0:	d405      	bmi.n	80228ce <_vfiprintf_r+0x32>
 80228c2:	89ab      	ldrh	r3, [r5, #12]
 80228c4:	059a      	lsls	r2, r3, #22
 80228c6:	d402      	bmi.n	80228ce <_vfiprintf_r+0x32>
 80228c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80228ca:	f000 fdd9 	bl	8023480 <__retarget_lock_acquire_recursive>
 80228ce:	89ab      	ldrh	r3, [r5, #12]
 80228d0:	071b      	lsls	r3, r3, #28
 80228d2:	d501      	bpl.n	80228d8 <_vfiprintf_r+0x3c>
 80228d4:	692b      	ldr	r3, [r5, #16]
 80228d6:	b9eb      	cbnz	r3, 8022914 <_vfiprintf_r+0x78>
 80228d8:	4629      	mov	r1, r5
 80228da:	4630      	mov	r0, r6
 80228dc:	f000 fb48 	bl	8022f70 <__swsetup_r>
 80228e0:	b1c0      	cbz	r0, 8022914 <_vfiprintf_r+0x78>
 80228e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80228e4:	07dc      	lsls	r4, r3, #31
 80228e6:	d50e      	bpl.n	8022906 <_vfiprintf_r+0x6a>
 80228e8:	f04f 30ff 	mov.w	r0, #4294967295
 80228ec:	b01d      	add	sp, #116	; 0x74
 80228ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80228f2:	4b7b      	ldr	r3, [pc, #492]	; (8022ae0 <_vfiprintf_r+0x244>)
 80228f4:	429d      	cmp	r5, r3
 80228f6:	d101      	bne.n	80228fc <_vfiprintf_r+0x60>
 80228f8:	68b5      	ldr	r5, [r6, #8]
 80228fa:	e7df      	b.n	80228bc <_vfiprintf_r+0x20>
 80228fc:	4b79      	ldr	r3, [pc, #484]	; (8022ae4 <_vfiprintf_r+0x248>)
 80228fe:	429d      	cmp	r5, r3
 8022900:	bf08      	it	eq
 8022902:	68f5      	ldreq	r5, [r6, #12]
 8022904:	e7da      	b.n	80228bc <_vfiprintf_r+0x20>
 8022906:	89ab      	ldrh	r3, [r5, #12]
 8022908:	0598      	lsls	r0, r3, #22
 802290a:	d4ed      	bmi.n	80228e8 <_vfiprintf_r+0x4c>
 802290c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802290e:	f000 fdb9 	bl	8023484 <__retarget_lock_release_recursive>
 8022912:	e7e9      	b.n	80228e8 <_vfiprintf_r+0x4c>
 8022914:	2300      	movs	r3, #0
 8022916:	9309      	str	r3, [sp, #36]	; 0x24
 8022918:	2320      	movs	r3, #32
 802291a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802291e:	f8cd 800c 	str.w	r8, [sp, #12]
 8022922:	2330      	movs	r3, #48	; 0x30
 8022924:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8022ae8 <_vfiprintf_r+0x24c>
 8022928:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 802292c:	f04f 0901 	mov.w	r9, #1
 8022930:	4623      	mov	r3, r4
 8022932:	469a      	mov	sl, r3
 8022934:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022938:	b10a      	cbz	r2, 802293e <_vfiprintf_r+0xa2>
 802293a:	2a25      	cmp	r2, #37	; 0x25
 802293c:	d1f9      	bne.n	8022932 <_vfiprintf_r+0x96>
 802293e:	ebba 0b04 	subs.w	fp, sl, r4
 8022942:	d00b      	beq.n	802295c <_vfiprintf_r+0xc0>
 8022944:	465b      	mov	r3, fp
 8022946:	4622      	mov	r2, r4
 8022948:	4629      	mov	r1, r5
 802294a:	4630      	mov	r0, r6
 802294c:	f7ff ff93 	bl	8022876 <__sfputs_r>
 8022950:	3001      	adds	r0, #1
 8022952:	f000 80aa 	beq.w	8022aaa <_vfiprintf_r+0x20e>
 8022956:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022958:	445a      	add	r2, fp
 802295a:	9209      	str	r2, [sp, #36]	; 0x24
 802295c:	f89a 3000 	ldrb.w	r3, [sl]
 8022960:	2b00      	cmp	r3, #0
 8022962:	f000 80a2 	beq.w	8022aaa <_vfiprintf_r+0x20e>
 8022966:	2300      	movs	r3, #0
 8022968:	f04f 32ff 	mov.w	r2, #4294967295
 802296c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022970:	f10a 0a01 	add.w	sl, sl, #1
 8022974:	9304      	str	r3, [sp, #16]
 8022976:	9307      	str	r3, [sp, #28]
 8022978:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802297c:	931a      	str	r3, [sp, #104]	; 0x68
 802297e:	4654      	mov	r4, sl
 8022980:	2205      	movs	r2, #5
 8022982:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022986:	4858      	ldr	r0, [pc, #352]	; (8022ae8 <_vfiprintf_r+0x24c>)
 8022988:	f7dd fc42 	bl	8000210 <memchr>
 802298c:	9a04      	ldr	r2, [sp, #16]
 802298e:	b9d8      	cbnz	r0, 80229c8 <_vfiprintf_r+0x12c>
 8022990:	06d1      	lsls	r1, r2, #27
 8022992:	bf44      	itt	mi
 8022994:	2320      	movmi	r3, #32
 8022996:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802299a:	0713      	lsls	r3, r2, #28
 802299c:	bf44      	itt	mi
 802299e:	232b      	movmi	r3, #43	; 0x2b
 80229a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80229a4:	f89a 3000 	ldrb.w	r3, [sl]
 80229a8:	2b2a      	cmp	r3, #42	; 0x2a
 80229aa:	d015      	beq.n	80229d8 <_vfiprintf_r+0x13c>
 80229ac:	9a07      	ldr	r2, [sp, #28]
 80229ae:	4654      	mov	r4, sl
 80229b0:	2000      	movs	r0, #0
 80229b2:	f04f 0c0a 	mov.w	ip, #10
 80229b6:	4621      	mov	r1, r4
 80229b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80229bc:	3b30      	subs	r3, #48	; 0x30
 80229be:	2b09      	cmp	r3, #9
 80229c0:	d94e      	bls.n	8022a60 <_vfiprintf_r+0x1c4>
 80229c2:	b1b0      	cbz	r0, 80229f2 <_vfiprintf_r+0x156>
 80229c4:	9207      	str	r2, [sp, #28]
 80229c6:	e014      	b.n	80229f2 <_vfiprintf_r+0x156>
 80229c8:	eba0 0308 	sub.w	r3, r0, r8
 80229cc:	fa09 f303 	lsl.w	r3, r9, r3
 80229d0:	4313      	orrs	r3, r2
 80229d2:	9304      	str	r3, [sp, #16]
 80229d4:	46a2      	mov	sl, r4
 80229d6:	e7d2      	b.n	802297e <_vfiprintf_r+0xe2>
 80229d8:	9b03      	ldr	r3, [sp, #12]
 80229da:	1d19      	adds	r1, r3, #4
 80229dc:	681b      	ldr	r3, [r3, #0]
 80229de:	9103      	str	r1, [sp, #12]
 80229e0:	2b00      	cmp	r3, #0
 80229e2:	bfbb      	ittet	lt
 80229e4:	425b      	neglt	r3, r3
 80229e6:	f042 0202 	orrlt.w	r2, r2, #2
 80229ea:	9307      	strge	r3, [sp, #28]
 80229ec:	9307      	strlt	r3, [sp, #28]
 80229ee:	bfb8      	it	lt
 80229f0:	9204      	strlt	r2, [sp, #16]
 80229f2:	7823      	ldrb	r3, [r4, #0]
 80229f4:	2b2e      	cmp	r3, #46	; 0x2e
 80229f6:	d10c      	bne.n	8022a12 <_vfiprintf_r+0x176>
 80229f8:	7863      	ldrb	r3, [r4, #1]
 80229fa:	2b2a      	cmp	r3, #42	; 0x2a
 80229fc:	d135      	bne.n	8022a6a <_vfiprintf_r+0x1ce>
 80229fe:	9b03      	ldr	r3, [sp, #12]
 8022a00:	1d1a      	adds	r2, r3, #4
 8022a02:	681b      	ldr	r3, [r3, #0]
 8022a04:	9203      	str	r2, [sp, #12]
 8022a06:	2b00      	cmp	r3, #0
 8022a08:	bfb8      	it	lt
 8022a0a:	f04f 33ff 	movlt.w	r3, #4294967295
 8022a0e:	3402      	adds	r4, #2
 8022a10:	9305      	str	r3, [sp, #20]
 8022a12:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8022af8 <_vfiprintf_r+0x25c>
 8022a16:	7821      	ldrb	r1, [r4, #0]
 8022a18:	2203      	movs	r2, #3
 8022a1a:	4650      	mov	r0, sl
 8022a1c:	f7dd fbf8 	bl	8000210 <memchr>
 8022a20:	b140      	cbz	r0, 8022a34 <_vfiprintf_r+0x198>
 8022a22:	2340      	movs	r3, #64	; 0x40
 8022a24:	eba0 000a 	sub.w	r0, r0, sl
 8022a28:	fa03 f000 	lsl.w	r0, r3, r0
 8022a2c:	9b04      	ldr	r3, [sp, #16]
 8022a2e:	4303      	orrs	r3, r0
 8022a30:	3401      	adds	r4, #1
 8022a32:	9304      	str	r3, [sp, #16]
 8022a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022a38:	482c      	ldr	r0, [pc, #176]	; (8022aec <_vfiprintf_r+0x250>)
 8022a3a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022a3e:	2206      	movs	r2, #6
 8022a40:	f7dd fbe6 	bl	8000210 <memchr>
 8022a44:	2800      	cmp	r0, #0
 8022a46:	d03f      	beq.n	8022ac8 <_vfiprintf_r+0x22c>
 8022a48:	4b29      	ldr	r3, [pc, #164]	; (8022af0 <_vfiprintf_r+0x254>)
 8022a4a:	bb1b      	cbnz	r3, 8022a94 <_vfiprintf_r+0x1f8>
 8022a4c:	9b03      	ldr	r3, [sp, #12]
 8022a4e:	3307      	adds	r3, #7
 8022a50:	f023 0307 	bic.w	r3, r3, #7
 8022a54:	3308      	adds	r3, #8
 8022a56:	9303      	str	r3, [sp, #12]
 8022a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022a5a:	443b      	add	r3, r7
 8022a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8022a5e:	e767      	b.n	8022930 <_vfiprintf_r+0x94>
 8022a60:	fb0c 3202 	mla	r2, ip, r2, r3
 8022a64:	460c      	mov	r4, r1
 8022a66:	2001      	movs	r0, #1
 8022a68:	e7a5      	b.n	80229b6 <_vfiprintf_r+0x11a>
 8022a6a:	2300      	movs	r3, #0
 8022a6c:	3401      	adds	r4, #1
 8022a6e:	9305      	str	r3, [sp, #20]
 8022a70:	4619      	mov	r1, r3
 8022a72:	f04f 0c0a 	mov.w	ip, #10
 8022a76:	4620      	mov	r0, r4
 8022a78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022a7c:	3a30      	subs	r2, #48	; 0x30
 8022a7e:	2a09      	cmp	r2, #9
 8022a80:	d903      	bls.n	8022a8a <_vfiprintf_r+0x1ee>
 8022a82:	2b00      	cmp	r3, #0
 8022a84:	d0c5      	beq.n	8022a12 <_vfiprintf_r+0x176>
 8022a86:	9105      	str	r1, [sp, #20]
 8022a88:	e7c3      	b.n	8022a12 <_vfiprintf_r+0x176>
 8022a8a:	fb0c 2101 	mla	r1, ip, r1, r2
 8022a8e:	4604      	mov	r4, r0
 8022a90:	2301      	movs	r3, #1
 8022a92:	e7f0      	b.n	8022a76 <_vfiprintf_r+0x1da>
 8022a94:	ab03      	add	r3, sp, #12
 8022a96:	9300      	str	r3, [sp, #0]
 8022a98:	462a      	mov	r2, r5
 8022a9a:	4b16      	ldr	r3, [pc, #88]	; (8022af4 <_vfiprintf_r+0x258>)
 8022a9c:	a904      	add	r1, sp, #16
 8022a9e:	4630      	mov	r0, r6
 8022aa0:	f3af 8000 	nop.w
 8022aa4:	4607      	mov	r7, r0
 8022aa6:	1c78      	adds	r0, r7, #1
 8022aa8:	d1d6      	bne.n	8022a58 <_vfiprintf_r+0x1bc>
 8022aaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022aac:	07d9      	lsls	r1, r3, #31
 8022aae:	d405      	bmi.n	8022abc <_vfiprintf_r+0x220>
 8022ab0:	89ab      	ldrh	r3, [r5, #12]
 8022ab2:	059a      	lsls	r2, r3, #22
 8022ab4:	d402      	bmi.n	8022abc <_vfiprintf_r+0x220>
 8022ab6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022ab8:	f000 fce4 	bl	8023484 <__retarget_lock_release_recursive>
 8022abc:	89ab      	ldrh	r3, [r5, #12]
 8022abe:	065b      	lsls	r3, r3, #25
 8022ac0:	f53f af12 	bmi.w	80228e8 <_vfiprintf_r+0x4c>
 8022ac4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022ac6:	e711      	b.n	80228ec <_vfiprintf_r+0x50>
 8022ac8:	ab03      	add	r3, sp, #12
 8022aca:	9300      	str	r3, [sp, #0]
 8022acc:	462a      	mov	r2, r5
 8022ace:	4b09      	ldr	r3, [pc, #36]	; (8022af4 <_vfiprintf_r+0x258>)
 8022ad0:	a904      	add	r1, sp, #16
 8022ad2:	4630      	mov	r0, r6
 8022ad4:	f000 f880 	bl	8022bd8 <_printf_i>
 8022ad8:	e7e4      	b.n	8022aa4 <_vfiprintf_r+0x208>
 8022ada:	bf00      	nop
 8022adc:	08026954 	.word	0x08026954
 8022ae0:	08026974 	.word	0x08026974
 8022ae4:	08026934 	.word	0x08026934
 8022ae8:	08026900 	.word	0x08026900
 8022aec:	0802690a 	.word	0x0802690a
 8022af0:	00000000 	.word	0x00000000
 8022af4:	08022877 	.word	0x08022877
 8022af8:	08026906 	.word	0x08026906

08022afc <_printf_common>:
 8022afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022b00:	4616      	mov	r6, r2
 8022b02:	4699      	mov	r9, r3
 8022b04:	688a      	ldr	r2, [r1, #8]
 8022b06:	690b      	ldr	r3, [r1, #16]
 8022b08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022b0c:	4293      	cmp	r3, r2
 8022b0e:	bfb8      	it	lt
 8022b10:	4613      	movlt	r3, r2
 8022b12:	6033      	str	r3, [r6, #0]
 8022b14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022b18:	4607      	mov	r7, r0
 8022b1a:	460c      	mov	r4, r1
 8022b1c:	b10a      	cbz	r2, 8022b22 <_printf_common+0x26>
 8022b1e:	3301      	adds	r3, #1
 8022b20:	6033      	str	r3, [r6, #0]
 8022b22:	6823      	ldr	r3, [r4, #0]
 8022b24:	0699      	lsls	r1, r3, #26
 8022b26:	bf42      	ittt	mi
 8022b28:	6833      	ldrmi	r3, [r6, #0]
 8022b2a:	3302      	addmi	r3, #2
 8022b2c:	6033      	strmi	r3, [r6, #0]
 8022b2e:	6825      	ldr	r5, [r4, #0]
 8022b30:	f015 0506 	ands.w	r5, r5, #6
 8022b34:	d106      	bne.n	8022b44 <_printf_common+0x48>
 8022b36:	f104 0a19 	add.w	sl, r4, #25
 8022b3a:	68e3      	ldr	r3, [r4, #12]
 8022b3c:	6832      	ldr	r2, [r6, #0]
 8022b3e:	1a9b      	subs	r3, r3, r2
 8022b40:	42ab      	cmp	r3, r5
 8022b42:	dc26      	bgt.n	8022b92 <_printf_common+0x96>
 8022b44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8022b48:	1e13      	subs	r3, r2, #0
 8022b4a:	6822      	ldr	r2, [r4, #0]
 8022b4c:	bf18      	it	ne
 8022b4e:	2301      	movne	r3, #1
 8022b50:	0692      	lsls	r2, r2, #26
 8022b52:	d42b      	bmi.n	8022bac <_printf_common+0xb0>
 8022b54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022b58:	4649      	mov	r1, r9
 8022b5a:	4638      	mov	r0, r7
 8022b5c:	47c0      	blx	r8
 8022b5e:	3001      	adds	r0, #1
 8022b60:	d01e      	beq.n	8022ba0 <_printf_common+0xa4>
 8022b62:	6823      	ldr	r3, [r4, #0]
 8022b64:	68e5      	ldr	r5, [r4, #12]
 8022b66:	6832      	ldr	r2, [r6, #0]
 8022b68:	f003 0306 	and.w	r3, r3, #6
 8022b6c:	2b04      	cmp	r3, #4
 8022b6e:	bf08      	it	eq
 8022b70:	1aad      	subeq	r5, r5, r2
 8022b72:	68a3      	ldr	r3, [r4, #8]
 8022b74:	6922      	ldr	r2, [r4, #16]
 8022b76:	bf0c      	ite	eq
 8022b78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022b7c:	2500      	movne	r5, #0
 8022b7e:	4293      	cmp	r3, r2
 8022b80:	bfc4      	itt	gt
 8022b82:	1a9b      	subgt	r3, r3, r2
 8022b84:	18ed      	addgt	r5, r5, r3
 8022b86:	2600      	movs	r6, #0
 8022b88:	341a      	adds	r4, #26
 8022b8a:	42b5      	cmp	r5, r6
 8022b8c:	d11a      	bne.n	8022bc4 <_printf_common+0xc8>
 8022b8e:	2000      	movs	r0, #0
 8022b90:	e008      	b.n	8022ba4 <_printf_common+0xa8>
 8022b92:	2301      	movs	r3, #1
 8022b94:	4652      	mov	r2, sl
 8022b96:	4649      	mov	r1, r9
 8022b98:	4638      	mov	r0, r7
 8022b9a:	47c0      	blx	r8
 8022b9c:	3001      	adds	r0, #1
 8022b9e:	d103      	bne.n	8022ba8 <_printf_common+0xac>
 8022ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8022ba4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022ba8:	3501      	adds	r5, #1
 8022baa:	e7c6      	b.n	8022b3a <_printf_common+0x3e>
 8022bac:	18e1      	adds	r1, r4, r3
 8022bae:	1c5a      	adds	r2, r3, #1
 8022bb0:	2030      	movs	r0, #48	; 0x30
 8022bb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8022bb6:	4422      	add	r2, r4
 8022bb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022bbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022bc0:	3302      	adds	r3, #2
 8022bc2:	e7c7      	b.n	8022b54 <_printf_common+0x58>
 8022bc4:	2301      	movs	r3, #1
 8022bc6:	4622      	mov	r2, r4
 8022bc8:	4649      	mov	r1, r9
 8022bca:	4638      	mov	r0, r7
 8022bcc:	47c0      	blx	r8
 8022bce:	3001      	adds	r0, #1
 8022bd0:	d0e6      	beq.n	8022ba0 <_printf_common+0xa4>
 8022bd2:	3601      	adds	r6, #1
 8022bd4:	e7d9      	b.n	8022b8a <_printf_common+0x8e>
	...

08022bd8 <_printf_i>:
 8022bd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8022bdc:	460c      	mov	r4, r1
 8022bde:	4691      	mov	r9, r2
 8022be0:	7e27      	ldrb	r7, [r4, #24]
 8022be2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8022be4:	2f78      	cmp	r7, #120	; 0x78
 8022be6:	4680      	mov	r8, r0
 8022be8:	469a      	mov	sl, r3
 8022bea:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8022bee:	d807      	bhi.n	8022c00 <_printf_i+0x28>
 8022bf0:	2f62      	cmp	r7, #98	; 0x62
 8022bf2:	d80a      	bhi.n	8022c0a <_printf_i+0x32>
 8022bf4:	2f00      	cmp	r7, #0
 8022bf6:	f000 80d8 	beq.w	8022daa <_printf_i+0x1d2>
 8022bfa:	2f58      	cmp	r7, #88	; 0x58
 8022bfc:	f000 80a3 	beq.w	8022d46 <_printf_i+0x16e>
 8022c00:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8022c04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8022c08:	e03a      	b.n	8022c80 <_printf_i+0xa8>
 8022c0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8022c0e:	2b15      	cmp	r3, #21
 8022c10:	d8f6      	bhi.n	8022c00 <_printf_i+0x28>
 8022c12:	a001      	add	r0, pc, #4	; (adr r0, 8022c18 <_printf_i+0x40>)
 8022c14:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8022c18:	08022c71 	.word	0x08022c71
 8022c1c:	08022c85 	.word	0x08022c85
 8022c20:	08022c01 	.word	0x08022c01
 8022c24:	08022c01 	.word	0x08022c01
 8022c28:	08022c01 	.word	0x08022c01
 8022c2c:	08022c01 	.word	0x08022c01
 8022c30:	08022c85 	.word	0x08022c85
 8022c34:	08022c01 	.word	0x08022c01
 8022c38:	08022c01 	.word	0x08022c01
 8022c3c:	08022c01 	.word	0x08022c01
 8022c40:	08022c01 	.word	0x08022c01
 8022c44:	08022d91 	.word	0x08022d91
 8022c48:	08022cb5 	.word	0x08022cb5
 8022c4c:	08022d73 	.word	0x08022d73
 8022c50:	08022c01 	.word	0x08022c01
 8022c54:	08022c01 	.word	0x08022c01
 8022c58:	08022db3 	.word	0x08022db3
 8022c5c:	08022c01 	.word	0x08022c01
 8022c60:	08022cb5 	.word	0x08022cb5
 8022c64:	08022c01 	.word	0x08022c01
 8022c68:	08022c01 	.word	0x08022c01
 8022c6c:	08022d7b 	.word	0x08022d7b
 8022c70:	680b      	ldr	r3, [r1, #0]
 8022c72:	1d1a      	adds	r2, r3, #4
 8022c74:	681b      	ldr	r3, [r3, #0]
 8022c76:	600a      	str	r2, [r1, #0]
 8022c78:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8022c7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022c80:	2301      	movs	r3, #1
 8022c82:	e0a3      	b.n	8022dcc <_printf_i+0x1f4>
 8022c84:	6825      	ldr	r5, [r4, #0]
 8022c86:	6808      	ldr	r0, [r1, #0]
 8022c88:	062e      	lsls	r6, r5, #24
 8022c8a:	f100 0304 	add.w	r3, r0, #4
 8022c8e:	d50a      	bpl.n	8022ca6 <_printf_i+0xce>
 8022c90:	6805      	ldr	r5, [r0, #0]
 8022c92:	600b      	str	r3, [r1, #0]
 8022c94:	2d00      	cmp	r5, #0
 8022c96:	da03      	bge.n	8022ca0 <_printf_i+0xc8>
 8022c98:	232d      	movs	r3, #45	; 0x2d
 8022c9a:	426d      	negs	r5, r5
 8022c9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022ca0:	485e      	ldr	r0, [pc, #376]	; (8022e1c <_printf_i+0x244>)
 8022ca2:	230a      	movs	r3, #10
 8022ca4:	e019      	b.n	8022cda <_printf_i+0x102>
 8022ca6:	f015 0f40 	tst.w	r5, #64	; 0x40
 8022caa:	6805      	ldr	r5, [r0, #0]
 8022cac:	600b      	str	r3, [r1, #0]
 8022cae:	bf18      	it	ne
 8022cb0:	b22d      	sxthne	r5, r5
 8022cb2:	e7ef      	b.n	8022c94 <_printf_i+0xbc>
 8022cb4:	680b      	ldr	r3, [r1, #0]
 8022cb6:	6825      	ldr	r5, [r4, #0]
 8022cb8:	1d18      	adds	r0, r3, #4
 8022cba:	6008      	str	r0, [r1, #0]
 8022cbc:	0628      	lsls	r0, r5, #24
 8022cbe:	d501      	bpl.n	8022cc4 <_printf_i+0xec>
 8022cc0:	681d      	ldr	r5, [r3, #0]
 8022cc2:	e002      	b.n	8022cca <_printf_i+0xf2>
 8022cc4:	0669      	lsls	r1, r5, #25
 8022cc6:	d5fb      	bpl.n	8022cc0 <_printf_i+0xe8>
 8022cc8:	881d      	ldrh	r5, [r3, #0]
 8022cca:	4854      	ldr	r0, [pc, #336]	; (8022e1c <_printf_i+0x244>)
 8022ccc:	2f6f      	cmp	r7, #111	; 0x6f
 8022cce:	bf0c      	ite	eq
 8022cd0:	2308      	moveq	r3, #8
 8022cd2:	230a      	movne	r3, #10
 8022cd4:	2100      	movs	r1, #0
 8022cd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8022cda:	6866      	ldr	r6, [r4, #4]
 8022cdc:	60a6      	str	r6, [r4, #8]
 8022cde:	2e00      	cmp	r6, #0
 8022ce0:	bfa2      	ittt	ge
 8022ce2:	6821      	ldrge	r1, [r4, #0]
 8022ce4:	f021 0104 	bicge.w	r1, r1, #4
 8022ce8:	6021      	strge	r1, [r4, #0]
 8022cea:	b90d      	cbnz	r5, 8022cf0 <_printf_i+0x118>
 8022cec:	2e00      	cmp	r6, #0
 8022cee:	d04d      	beq.n	8022d8c <_printf_i+0x1b4>
 8022cf0:	4616      	mov	r6, r2
 8022cf2:	fbb5 f1f3 	udiv	r1, r5, r3
 8022cf6:	fb03 5711 	mls	r7, r3, r1, r5
 8022cfa:	5dc7      	ldrb	r7, [r0, r7]
 8022cfc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8022d00:	462f      	mov	r7, r5
 8022d02:	42bb      	cmp	r3, r7
 8022d04:	460d      	mov	r5, r1
 8022d06:	d9f4      	bls.n	8022cf2 <_printf_i+0x11a>
 8022d08:	2b08      	cmp	r3, #8
 8022d0a:	d10b      	bne.n	8022d24 <_printf_i+0x14c>
 8022d0c:	6823      	ldr	r3, [r4, #0]
 8022d0e:	07df      	lsls	r7, r3, #31
 8022d10:	d508      	bpl.n	8022d24 <_printf_i+0x14c>
 8022d12:	6923      	ldr	r3, [r4, #16]
 8022d14:	6861      	ldr	r1, [r4, #4]
 8022d16:	4299      	cmp	r1, r3
 8022d18:	bfde      	ittt	le
 8022d1a:	2330      	movle	r3, #48	; 0x30
 8022d1c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022d20:	f106 36ff 	addle.w	r6, r6, #4294967295
 8022d24:	1b92      	subs	r2, r2, r6
 8022d26:	6122      	str	r2, [r4, #16]
 8022d28:	f8cd a000 	str.w	sl, [sp]
 8022d2c:	464b      	mov	r3, r9
 8022d2e:	aa03      	add	r2, sp, #12
 8022d30:	4621      	mov	r1, r4
 8022d32:	4640      	mov	r0, r8
 8022d34:	f7ff fee2 	bl	8022afc <_printf_common>
 8022d38:	3001      	adds	r0, #1
 8022d3a:	d14c      	bne.n	8022dd6 <_printf_i+0x1fe>
 8022d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8022d40:	b004      	add	sp, #16
 8022d42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022d46:	4835      	ldr	r0, [pc, #212]	; (8022e1c <_printf_i+0x244>)
 8022d48:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8022d4c:	6823      	ldr	r3, [r4, #0]
 8022d4e:	680e      	ldr	r6, [r1, #0]
 8022d50:	061f      	lsls	r7, r3, #24
 8022d52:	f856 5b04 	ldr.w	r5, [r6], #4
 8022d56:	600e      	str	r6, [r1, #0]
 8022d58:	d514      	bpl.n	8022d84 <_printf_i+0x1ac>
 8022d5a:	07d9      	lsls	r1, r3, #31
 8022d5c:	bf44      	itt	mi
 8022d5e:	f043 0320 	orrmi.w	r3, r3, #32
 8022d62:	6023      	strmi	r3, [r4, #0]
 8022d64:	b91d      	cbnz	r5, 8022d6e <_printf_i+0x196>
 8022d66:	6823      	ldr	r3, [r4, #0]
 8022d68:	f023 0320 	bic.w	r3, r3, #32
 8022d6c:	6023      	str	r3, [r4, #0]
 8022d6e:	2310      	movs	r3, #16
 8022d70:	e7b0      	b.n	8022cd4 <_printf_i+0xfc>
 8022d72:	6823      	ldr	r3, [r4, #0]
 8022d74:	f043 0320 	orr.w	r3, r3, #32
 8022d78:	6023      	str	r3, [r4, #0]
 8022d7a:	2378      	movs	r3, #120	; 0x78
 8022d7c:	4828      	ldr	r0, [pc, #160]	; (8022e20 <_printf_i+0x248>)
 8022d7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8022d82:	e7e3      	b.n	8022d4c <_printf_i+0x174>
 8022d84:	065e      	lsls	r6, r3, #25
 8022d86:	bf48      	it	mi
 8022d88:	b2ad      	uxthmi	r5, r5
 8022d8a:	e7e6      	b.n	8022d5a <_printf_i+0x182>
 8022d8c:	4616      	mov	r6, r2
 8022d8e:	e7bb      	b.n	8022d08 <_printf_i+0x130>
 8022d90:	680b      	ldr	r3, [r1, #0]
 8022d92:	6826      	ldr	r6, [r4, #0]
 8022d94:	6960      	ldr	r0, [r4, #20]
 8022d96:	1d1d      	adds	r5, r3, #4
 8022d98:	600d      	str	r5, [r1, #0]
 8022d9a:	0635      	lsls	r5, r6, #24
 8022d9c:	681b      	ldr	r3, [r3, #0]
 8022d9e:	d501      	bpl.n	8022da4 <_printf_i+0x1cc>
 8022da0:	6018      	str	r0, [r3, #0]
 8022da2:	e002      	b.n	8022daa <_printf_i+0x1d2>
 8022da4:	0671      	lsls	r1, r6, #25
 8022da6:	d5fb      	bpl.n	8022da0 <_printf_i+0x1c8>
 8022da8:	8018      	strh	r0, [r3, #0]
 8022daa:	2300      	movs	r3, #0
 8022dac:	6123      	str	r3, [r4, #16]
 8022dae:	4616      	mov	r6, r2
 8022db0:	e7ba      	b.n	8022d28 <_printf_i+0x150>
 8022db2:	680b      	ldr	r3, [r1, #0]
 8022db4:	1d1a      	adds	r2, r3, #4
 8022db6:	600a      	str	r2, [r1, #0]
 8022db8:	681e      	ldr	r6, [r3, #0]
 8022dba:	6862      	ldr	r2, [r4, #4]
 8022dbc:	2100      	movs	r1, #0
 8022dbe:	4630      	mov	r0, r6
 8022dc0:	f7dd fa26 	bl	8000210 <memchr>
 8022dc4:	b108      	cbz	r0, 8022dca <_printf_i+0x1f2>
 8022dc6:	1b80      	subs	r0, r0, r6
 8022dc8:	6060      	str	r0, [r4, #4]
 8022dca:	6863      	ldr	r3, [r4, #4]
 8022dcc:	6123      	str	r3, [r4, #16]
 8022dce:	2300      	movs	r3, #0
 8022dd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022dd4:	e7a8      	b.n	8022d28 <_printf_i+0x150>
 8022dd6:	6923      	ldr	r3, [r4, #16]
 8022dd8:	4632      	mov	r2, r6
 8022dda:	4649      	mov	r1, r9
 8022ddc:	4640      	mov	r0, r8
 8022dde:	47d0      	blx	sl
 8022de0:	3001      	adds	r0, #1
 8022de2:	d0ab      	beq.n	8022d3c <_printf_i+0x164>
 8022de4:	6823      	ldr	r3, [r4, #0]
 8022de6:	079b      	lsls	r3, r3, #30
 8022de8:	d413      	bmi.n	8022e12 <_printf_i+0x23a>
 8022dea:	68e0      	ldr	r0, [r4, #12]
 8022dec:	9b03      	ldr	r3, [sp, #12]
 8022dee:	4298      	cmp	r0, r3
 8022df0:	bfb8      	it	lt
 8022df2:	4618      	movlt	r0, r3
 8022df4:	e7a4      	b.n	8022d40 <_printf_i+0x168>
 8022df6:	2301      	movs	r3, #1
 8022df8:	4632      	mov	r2, r6
 8022dfa:	4649      	mov	r1, r9
 8022dfc:	4640      	mov	r0, r8
 8022dfe:	47d0      	blx	sl
 8022e00:	3001      	adds	r0, #1
 8022e02:	d09b      	beq.n	8022d3c <_printf_i+0x164>
 8022e04:	3501      	adds	r5, #1
 8022e06:	68e3      	ldr	r3, [r4, #12]
 8022e08:	9903      	ldr	r1, [sp, #12]
 8022e0a:	1a5b      	subs	r3, r3, r1
 8022e0c:	42ab      	cmp	r3, r5
 8022e0e:	dcf2      	bgt.n	8022df6 <_printf_i+0x21e>
 8022e10:	e7eb      	b.n	8022dea <_printf_i+0x212>
 8022e12:	2500      	movs	r5, #0
 8022e14:	f104 0619 	add.w	r6, r4, #25
 8022e18:	e7f5      	b.n	8022e06 <_printf_i+0x22e>
 8022e1a:	bf00      	nop
 8022e1c:	08026911 	.word	0x08026911
 8022e20:	08026922 	.word	0x08026922

08022e24 <_sbrk_r>:
 8022e24:	b538      	push	{r3, r4, r5, lr}
 8022e26:	4d06      	ldr	r5, [pc, #24]	; (8022e40 <_sbrk_r+0x1c>)
 8022e28:	2300      	movs	r3, #0
 8022e2a:	4604      	mov	r4, r0
 8022e2c:	4608      	mov	r0, r1
 8022e2e:	602b      	str	r3, [r5, #0]
 8022e30:	f7f6 fd46 	bl	80198c0 <_sbrk>
 8022e34:	1c43      	adds	r3, r0, #1
 8022e36:	d102      	bne.n	8022e3e <_sbrk_r+0x1a>
 8022e38:	682b      	ldr	r3, [r5, #0]
 8022e3a:	b103      	cbz	r3, 8022e3e <_sbrk_r+0x1a>
 8022e3c:	6023      	str	r3, [r4, #0]
 8022e3e:	bd38      	pop	{r3, r4, r5, pc}
 8022e40:	2000a9c4 	.word	0x2000a9c4

08022e44 <_raise_r>:
 8022e44:	291f      	cmp	r1, #31
 8022e46:	b538      	push	{r3, r4, r5, lr}
 8022e48:	4604      	mov	r4, r0
 8022e4a:	460d      	mov	r5, r1
 8022e4c:	d904      	bls.n	8022e58 <_raise_r+0x14>
 8022e4e:	2316      	movs	r3, #22
 8022e50:	6003      	str	r3, [r0, #0]
 8022e52:	f04f 30ff 	mov.w	r0, #4294967295
 8022e56:	bd38      	pop	{r3, r4, r5, pc}
 8022e58:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8022e5a:	b112      	cbz	r2, 8022e62 <_raise_r+0x1e>
 8022e5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022e60:	b94b      	cbnz	r3, 8022e76 <_raise_r+0x32>
 8022e62:	4620      	mov	r0, r4
 8022e64:	f000 f830 	bl	8022ec8 <_getpid_r>
 8022e68:	462a      	mov	r2, r5
 8022e6a:	4601      	mov	r1, r0
 8022e6c:	4620      	mov	r0, r4
 8022e6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022e72:	f000 b817 	b.w	8022ea4 <_kill_r>
 8022e76:	2b01      	cmp	r3, #1
 8022e78:	d00a      	beq.n	8022e90 <_raise_r+0x4c>
 8022e7a:	1c59      	adds	r1, r3, #1
 8022e7c:	d103      	bne.n	8022e86 <_raise_r+0x42>
 8022e7e:	2316      	movs	r3, #22
 8022e80:	6003      	str	r3, [r0, #0]
 8022e82:	2001      	movs	r0, #1
 8022e84:	e7e7      	b.n	8022e56 <_raise_r+0x12>
 8022e86:	2400      	movs	r4, #0
 8022e88:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8022e8c:	4628      	mov	r0, r5
 8022e8e:	4798      	blx	r3
 8022e90:	2000      	movs	r0, #0
 8022e92:	e7e0      	b.n	8022e56 <_raise_r+0x12>

08022e94 <raise>:
 8022e94:	4b02      	ldr	r3, [pc, #8]	; (8022ea0 <raise+0xc>)
 8022e96:	4601      	mov	r1, r0
 8022e98:	6818      	ldr	r0, [r3, #0]
 8022e9a:	f7ff bfd3 	b.w	8022e44 <_raise_r>
 8022e9e:	bf00      	nop
 8022ea0:	200000a8 	.word	0x200000a8

08022ea4 <_kill_r>:
 8022ea4:	b538      	push	{r3, r4, r5, lr}
 8022ea6:	4d07      	ldr	r5, [pc, #28]	; (8022ec4 <_kill_r+0x20>)
 8022ea8:	2300      	movs	r3, #0
 8022eaa:	4604      	mov	r4, r0
 8022eac:	4608      	mov	r0, r1
 8022eae:	4611      	mov	r1, r2
 8022eb0:	602b      	str	r3, [r5, #0]
 8022eb2:	f7f6 fc7d 	bl	80197b0 <_kill>
 8022eb6:	1c43      	adds	r3, r0, #1
 8022eb8:	d102      	bne.n	8022ec0 <_kill_r+0x1c>
 8022eba:	682b      	ldr	r3, [r5, #0]
 8022ebc:	b103      	cbz	r3, 8022ec0 <_kill_r+0x1c>
 8022ebe:	6023      	str	r3, [r4, #0]
 8022ec0:	bd38      	pop	{r3, r4, r5, pc}
 8022ec2:	bf00      	nop
 8022ec4:	2000a9c4 	.word	0x2000a9c4

08022ec8 <_getpid_r>:
 8022ec8:	f7f6 bc6a 	b.w	80197a0 <_getpid>

08022ecc <__swbuf_r>:
 8022ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022ece:	460e      	mov	r6, r1
 8022ed0:	4614      	mov	r4, r2
 8022ed2:	4605      	mov	r5, r0
 8022ed4:	b118      	cbz	r0, 8022ede <__swbuf_r+0x12>
 8022ed6:	6983      	ldr	r3, [r0, #24]
 8022ed8:	b90b      	cbnz	r3, 8022ede <__swbuf_r+0x12>
 8022eda:	f000 fa33 	bl	8023344 <__sinit>
 8022ede:	4b21      	ldr	r3, [pc, #132]	; (8022f64 <__swbuf_r+0x98>)
 8022ee0:	429c      	cmp	r4, r3
 8022ee2:	d12b      	bne.n	8022f3c <__swbuf_r+0x70>
 8022ee4:	686c      	ldr	r4, [r5, #4]
 8022ee6:	69a3      	ldr	r3, [r4, #24]
 8022ee8:	60a3      	str	r3, [r4, #8]
 8022eea:	89a3      	ldrh	r3, [r4, #12]
 8022eec:	071a      	lsls	r2, r3, #28
 8022eee:	d52f      	bpl.n	8022f50 <__swbuf_r+0x84>
 8022ef0:	6923      	ldr	r3, [r4, #16]
 8022ef2:	b36b      	cbz	r3, 8022f50 <__swbuf_r+0x84>
 8022ef4:	6923      	ldr	r3, [r4, #16]
 8022ef6:	6820      	ldr	r0, [r4, #0]
 8022ef8:	1ac0      	subs	r0, r0, r3
 8022efa:	6963      	ldr	r3, [r4, #20]
 8022efc:	b2f6      	uxtb	r6, r6
 8022efe:	4283      	cmp	r3, r0
 8022f00:	4637      	mov	r7, r6
 8022f02:	dc04      	bgt.n	8022f0e <__swbuf_r+0x42>
 8022f04:	4621      	mov	r1, r4
 8022f06:	4628      	mov	r0, r5
 8022f08:	f000 f988 	bl	802321c <_fflush_r>
 8022f0c:	bb30      	cbnz	r0, 8022f5c <__swbuf_r+0x90>
 8022f0e:	68a3      	ldr	r3, [r4, #8]
 8022f10:	3b01      	subs	r3, #1
 8022f12:	60a3      	str	r3, [r4, #8]
 8022f14:	6823      	ldr	r3, [r4, #0]
 8022f16:	1c5a      	adds	r2, r3, #1
 8022f18:	6022      	str	r2, [r4, #0]
 8022f1a:	701e      	strb	r6, [r3, #0]
 8022f1c:	6963      	ldr	r3, [r4, #20]
 8022f1e:	3001      	adds	r0, #1
 8022f20:	4283      	cmp	r3, r0
 8022f22:	d004      	beq.n	8022f2e <__swbuf_r+0x62>
 8022f24:	89a3      	ldrh	r3, [r4, #12]
 8022f26:	07db      	lsls	r3, r3, #31
 8022f28:	d506      	bpl.n	8022f38 <__swbuf_r+0x6c>
 8022f2a:	2e0a      	cmp	r6, #10
 8022f2c:	d104      	bne.n	8022f38 <__swbuf_r+0x6c>
 8022f2e:	4621      	mov	r1, r4
 8022f30:	4628      	mov	r0, r5
 8022f32:	f000 f973 	bl	802321c <_fflush_r>
 8022f36:	b988      	cbnz	r0, 8022f5c <__swbuf_r+0x90>
 8022f38:	4638      	mov	r0, r7
 8022f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022f3c:	4b0a      	ldr	r3, [pc, #40]	; (8022f68 <__swbuf_r+0x9c>)
 8022f3e:	429c      	cmp	r4, r3
 8022f40:	d101      	bne.n	8022f46 <__swbuf_r+0x7a>
 8022f42:	68ac      	ldr	r4, [r5, #8]
 8022f44:	e7cf      	b.n	8022ee6 <__swbuf_r+0x1a>
 8022f46:	4b09      	ldr	r3, [pc, #36]	; (8022f6c <__swbuf_r+0xa0>)
 8022f48:	429c      	cmp	r4, r3
 8022f4a:	bf08      	it	eq
 8022f4c:	68ec      	ldreq	r4, [r5, #12]
 8022f4e:	e7ca      	b.n	8022ee6 <__swbuf_r+0x1a>
 8022f50:	4621      	mov	r1, r4
 8022f52:	4628      	mov	r0, r5
 8022f54:	f000 f80c 	bl	8022f70 <__swsetup_r>
 8022f58:	2800      	cmp	r0, #0
 8022f5a:	d0cb      	beq.n	8022ef4 <__swbuf_r+0x28>
 8022f5c:	f04f 37ff 	mov.w	r7, #4294967295
 8022f60:	e7ea      	b.n	8022f38 <__swbuf_r+0x6c>
 8022f62:	bf00      	nop
 8022f64:	08026954 	.word	0x08026954
 8022f68:	08026974 	.word	0x08026974
 8022f6c:	08026934 	.word	0x08026934

08022f70 <__swsetup_r>:
 8022f70:	4b32      	ldr	r3, [pc, #200]	; (802303c <__swsetup_r+0xcc>)
 8022f72:	b570      	push	{r4, r5, r6, lr}
 8022f74:	681d      	ldr	r5, [r3, #0]
 8022f76:	4606      	mov	r6, r0
 8022f78:	460c      	mov	r4, r1
 8022f7a:	b125      	cbz	r5, 8022f86 <__swsetup_r+0x16>
 8022f7c:	69ab      	ldr	r3, [r5, #24]
 8022f7e:	b913      	cbnz	r3, 8022f86 <__swsetup_r+0x16>
 8022f80:	4628      	mov	r0, r5
 8022f82:	f000 f9df 	bl	8023344 <__sinit>
 8022f86:	4b2e      	ldr	r3, [pc, #184]	; (8023040 <__swsetup_r+0xd0>)
 8022f88:	429c      	cmp	r4, r3
 8022f8a:	d10f      	bne.n	8022fac <__swsetup_r+0x3c>
 8022f8c:	686c      	ldr	r4, [r5, #4]
 8022f8e:	89a3      	ldrh	r3, [r4, #12]
 8022f90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022f94:	0719      	lsls	r1, r3, #28
 8022f96:	d42c      	bmi.n	8022ff2 <__swsetup_r+0x82>
 8022f98:	06dd      	lsls	r5, r3, #27
 8022f9a:	d411      	bmi.n	8022fc0 <__swsetup_r+0x50>
 8022f9c:	2309      	movs	r3, #9
 8022f9e:	6033      	str	r3, [r6, #0]
 8022fa0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8022fa4:	81a3      	strh	r3, [r4, #12]
 8022fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8022faa:	e03e      	b.n	802302a <__swsetup_r+0xba>
 8022fac:	4b25      	ldr	r3, [pc, #148]	; (8023044 <__swsetup_r+0xd4>)
 8022fae:	429c      	cmp	r4, r3
 8022fb0:	d101      	bne.n	8022fb6 <__swsetup_r+0x46>
 8022fb2:	68ac      	ldr	r4, [r5, #8]
 8022fb4:	e7eb      	b.n	8022f8e <__swsetup_r+0x1e>
 8022fb6:	4b24      	ldr	r3, [pc, #144]	; (8023048 <__swsetup_r+0xd8>)
 8022fb8:	429c      	cmp	r4, r3
 8022fba:	bf08      	it	eq
 8022fbc:	68ec      	ldreq	r4, [r5, #12]
 8022fbe:	e7e6      	b.n	8022f8e <__swsetup_r+0x1e>
 8022fc0:	0758      	lsls	r0, r3, #29
 8022fc2:	d512      	bpl.n	8022fea <__swsetup_r+0x7a>
 8022fc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022fc6:	b141      	cbz	r1, 8022fda <__swsetup_r+0x6a>
 8022fc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022fcc:	4299      	cmp	r1, r3
 8022fce:	d002      	beq.n	8022fd6 <__swsetup_r+0x66>
 8022fd0:	4630      	mov	r0, r6
 8022fd2:	f7ff fb8f 	bl	80226f4 <_free_r>
 8022fd6:	2300      	movs	r3, #0
 8022fd8:	6363      	str	r3, [r4, #52]	; 0x34
 8022fda:	89a3      	ldrh	r3, [r4, #12]
 8022fdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022fe0:	81a3      	strh	r3, [r4, #12]
 8022fe2:	2300      	movs	r3, #0
 8022fe4:	6063      	str	r3, [r4, #4]
 8022fe6:	6923      	ldr	r3, [r4, #16]
 8022fe8:	6023      	str	r3, [r4, #0]
 8022fea:	89a3      	ldrh	r3, [r4, #12]
 8022fec:	f043 0308 	orr.w	r3, r3, #8
 8022ff0:	81a3      	strh	r3, [r4, #12]
 8022ff2:	6923      	ldr	r3, [r4, #16]
 8022ff4:	b94b      	cbnz	r3, 802300a <__swsetup_r+0x9a>
 8022ff6:	89a3      	ldrh	r3, [r4, #12]
 8022ff8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8023000:	d003      	beq.n	802300a <__swsetup_r+0x9a>
 8023002:	4621      	mov	r1, r4
 8023004:	4630      	mov	r0, r6
 8023006:	f000 fa63 	bl	80234d0 <__smakebuf_r>
 802300a:	89a0      	ldrh	r0, [r4, #12]
 802300c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8023010:	f010 0301 	ands.w	r3, r0, #1
 8023014:	d00a      	beq.n	802302c <__swsetup_r+0xbc>
 8023016:	2300      	movs	r3, #0
 8023018:	60a3      	str	r3, [r4, #8]
 802301a:	6963      	ldr	r3, [r4, #20]
 802301c:	425b      	negs	r3, r3
 802301e:	61a3      	str	r3, [r4, #24]
 8023020:	6923      	ldr	r3, [r4, #16]
 8023022:	b943      	cbnz	r3, 8023036 <__swsetup_r+0xc6>
 8023024:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8023028:	d1ba      	bne.n	8022fa0 <__swsetup_r+0x30>
 802302a:	bd70      	pop	{r4, r5, r6, pc}
 802302c:	0781      	lsls	r1, r0, #30
 802302e:	bf58      	it	pl
 8023030:	6963      	ldrpl	r3, [r4, #20]
 8023032:	60a3      	str	r3, [r4, #8]
 8023034:	e7f4      	b.n	8023020 <__swsetup_r+0xb0>
 8023036:	2000      	movs	r0, #0
 8023038:	e7f7      	b.n	802302a <__swsetup_r+0xba>
 802303a:	bf00      	nop
 802303c:	200000a8 	.word	0x200000a8
 8023040:	08026954 	.word	0x08026954
 8023044:	08026974 	.word	0x08026974
 8023048:	08026934 	.word	0x08026934

0802304c <__register_exitproc>:
 802304c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023050:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 802310c <__register_exitproc+0xc0>
 8023054:	4606      	mov	r6, r0
 8023056:	f8d8 0000 	ldr.w	r0, [r8]
 802305a:	461f      	mov	r7, r3
 802305c:	460d      	mov	r5, r1
 802305e:	4691      	mov	r9, r2
 8023060:	f000 fa0e 	bl	8023480 <__retarget_lock_acquire_recursive>
 8023064:	4b25      	ldr	r3, [pc, #148]	; (80230fc <__register_exitproc+0xb0>)
 8023066:	681c      	ldr	r4, [r3, #0]
 8023068:	b934      	cbnz	r4, 8023078 <__register_exitproc+0x2c>
 802306a:	4c25      	ldr	r4, [pc, #148]	; (8023100 <__register_exitproc+0xb4>)
 802306c:	601c      	str	r4, [r3, #0]
 802306e:	4b25      	ldr	r3, [pc, #148]	; (8023104 <__register_exitproc+0xb8>)
 8023070:	b113      	cbz	r3, 8023078 <__register_exitproc+0x2c>
 8023072:	681b      	ldr	r3, [r3, #0]
 8023074:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8023078:	6863      	ldr	r3, [r4, #4]
 802307a:	2b1f      	cmp	r3, #31
 802307c:	dd07      	ble.n	802308e <__register_exitproc+0x42>
 802307e:	f8d8 0000 	ldr.w	r0, [r8]
 8023082:	f000 f9ff 	bl	8023484 <__retarget_lock_release_recursive>
 8023086:	f04f 30ff 	mov.w	r0, #4294967295
 802308a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802308e:	b34e      	cbz	r6, 80230e4 <__register_exitproc+0x98>
 8023090:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8023094:	b988      	cbnz	r0, 80230ba <__register_exitproc+0x6e>
 8023096:	4b1c      	ldr	r3, [pc, #112]	; (8023108 <__register_exitproc+0xbc>)
 8023098:	b923      	cbnz	r3, 80230a4 <__register_exitproc+0x58>
 802309a:	f8d8 0000 	ldr.w	r0, [r8]
 802309e:	f000 f9f0 	bl	8023482 <__retarget_lock_release>
 80230a2:	e7f0      	b.n	8023086 <__register_exitproc+0x3a>
 80230a4:	f44f 7084 	mov.w	r0, #264	; 0x108
 80230a8:	f7ff fafe 	bl	80226a8 <malloc>
 80230ac:	2800      	cmp	r0, #0
 80230ae:	d0f4      	beq.n	802309a <__register_exitproc+0x4e>
 80230b0:	2300      	movs	r3, #0
 80230b2:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 80230b6:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 80230ba:	6863      	ldr	r3, [r4, #4]
 80230bc:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 80230c0:	2201      	movs	r2, #1
 80230c2:	409a      	lsls	r2, r3
 80230c4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 80230c8:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 80230cc:	4313      	orrs	r3, r2
 80230ce:	2e02      	cmp	r6, #2
 80230d0:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 80230d4:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 80230d8:	bf02      	ittt	eq
 80230da:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 80230de:	431a      	orreq	r2, r3
 80230e0:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 80230e4:	6863      	ldr	r3, [r4, #4]
 80230e6:	f8d8 0000 	ldr.w	r0, [r8]
 80230ea:	1c5a      	adds	r2, r3, #1
 80230ec:	3302      	adds	r3, #2
 80230ee:	6062      	str	r2, [r4, #4]
 80230f0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 80230f4:	f000 f9c6 	bl	8023484 <__retarget_lock_release_recursive>
 80230f8:	2000      	movs	r0, #0
 80230fa:	e7c6      	b.n	802308a <__register_exitproc+0x3e>
 80230fc:	20009e68 	.word	0x20009e68
 8023100:	20009ddc 	.word	0x20009ddc
 8023104:	00000000 	.word	0x00000000
 8023108:	080226a9 	.word	0x080226a9
 802310c:	2000010c 	.word	0x2000010c

08023110 <__sflush_r>:
 8023110:	898a      	ldrh	r2, [r1, #12]
 8023112:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023116:	4605      	mov	r5, r0
 8023118:	0710      	lsls	r0, r2, #28
 802311a:	460c      	mov	r4, r1
 802311c:	d458      	bmi.n	80231d0 <__sflush_r+0xc0>
 802311e:	684b      	ldr	r3, [r1, #4]
 8023120:	2b00      	cmp	r3, #0
 8023122:	dc05      	bgt.n	8023130 <__sflush_r+0x20>
 8023124:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8023126:	2b00      	cmp	r3, #0
 8023128:	dc02      	bgt.n	8023130 <__sflush_r+0x20>
 802312a:	2000      	movs	r0, #0
 802312c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023130:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8023132:	2e00      	cmp	r6, #0
 8023134:	d0f9      	beq.n	802312a <__sflush_r+0x1a>
 8023136:	2300      	movs	r3, #0
 8023138:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 802313c:	682f      	ldr	r7, [r5, #0]
 802313e:	602b      	str	r3, [r5, #0]
 8023140:	d032      	beq.n	80231a8 <__sflush_r+0x98>
 8023142:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8023144:	89a3      	ldrh	r3, [r4, #12]
 8023146:	075a      	lsls	r2, r3, #29
 8023148:	d505      	bpl.n	8023156 <__sflush_r+0x46>
 802314a:	6863      	ldr	r3, [r4, #4]
 802314c:	1ac0      	subs	r0, r0, r3
 802314e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8023150:	b10b      	cbz	r3, 8023156 <__sflush_r+0x46>
 8023152:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8023154:	1ac0      	subs	r0, r0, r3
 8023156:	2300      	movs	r3, #0
 8023158:	4602      	mov	r2, r0
 802315a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802315c:	6a21      	ldr	r1, [r4, #32]
 802315e:	4628      	mov	r0, r5
 8023160:	47b0      	blx	r6
 8023162:	1c43      	adds	r3, r0, #1
 8023164:	89a3      	ldrh	r3, [r4, #12]
 8023166:	d106      	bne.n	8023176 <__sflush_r+0x66>
 8023168:	6829      	ldr	r1, [r5, #0]
 802316a:	291d      	cmp	r1, #29
 802316c:	d82c      	bhi.n	80231c8 <__sflush_r+0xb8>
 802316e:	4a2a      	ldr	r2, [pc, #168]	; (8023218 <__sflush_r+0x108>)
 8023170:	40ca      	lsrs	r2, r1
 8023172:	07d6      	lsls	r6, r2, #31
 8023174:	d528      	bpl.n	80231c8 <__sflush_r+0xb8>
 8023176:	2200      	movs	r2, #0
 8023178:	6062      	str	r2, [r4, #4]
 802317a:	04d9      	lsls	r1, r3, #19
 802317c:	6922      	ldr	r2, [r4, #16]
 802317e:	6022      	str	r2, [r4, #0]
 8023180:	d504      	bpl.n	802318c <__sflush_r+0x7c>
 8023182:	1c42      	adds	r2, r0, #1
 8023184:	d101      	bne.n	802318a <__sflush_r+0x7a>
 8023186:	682b      	ldr	r3, [r5, #0]
 8023188:	b903      	cbnz	r3, 802318c <__sflush_r+0x7c>
 802318a:	6560      	str	r0, [r4, #84]	; 0x54
 802318c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 802318e:	602f      	str	r7, [r5, #0]
 8023190:	2900      	cmp	r1, #0
 8023192:	d0ca      	beq.n	802312a <__sflush_r+0x1a>
 8023194:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8023198:	4299      	cmp	r1, r3
 802319a:	d002      	beq.n	80231a2 <__sflush_r+0x92>
 802319c:	4628      	mov	r0, r5
 802319e:	f7ff faa9 	bl	80226f4 <_free_r>
 80231a2:	2000      	movs	r0, #0
 80231a4:	6360      	str	r0, [r4, #52]	; 0x34
 80231a6:	e7c1      	b.n	802312c <__sflush_r+0x1c>
 80231a8:	6a21      	ldr	r1, [r4, #32]
 80231aa:	2301      	movs	r3, #1
 80231ac:	4628      	mov	r0, r5
 80231ae:	47b0      	blx	r6
 80231b0:	1c41      	adds	r1, r0, #1
 80231b2:	d1c7      	bne.n	8023144 <__sflush_r+0x34>
 80231b4:	682b      	ldr	r3, [r5, #0]
 80231b6:	2b00      	cmp	r3, #0
 80231b8:	d0c4      	beq.n	8023144 <__sflush_r+0x34>
 80231ba:	2b1d      	cmp	r3, #29
 80231bc:	d001      	beq.n	80231c2 <__sflush_r+0xb2>
 80231be:	2b16      	cmp	r3, #22
 80231c0:	d101      	bne.n	80231c6 <__sflush_r+0xb6>
 80231c2:	602f      	str	r7, [r5, #0]
 80231c4:	e7b1      	b.n	802312a <__sflush_r+0x1a>
 80231c6:	89a3      	ldrh	r3, [r4, #12]
 80231c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80231cc:	81a3      	strh	r3, [r4, #12]
 80231ce:	e7ad      	b.n	802312c <__sflush_r+0x1c>
 80231d0:	690f      	ldr	r7, [r1, #16]
 80231d2:	2f00      	cmp	r7, #0
 80231d4:	d0a9      	beq.n	802312a <__sflush_r+0x1a>
 80231d6:	0793      	lsls	r3, r2, #30
 80231d8:	680e      	ldr	r6, [r1, #0]
 80231da:	bf08      	it	eq
 80231dc:	694b      	ldreq	r3, [r1, #20]
 80231de:	600f      	str	r7, [r1, #0]
 80231e0:	bf18      	it	ne
 80231e2:	2300      	movne	r3, #0
 80231e4:	eba6 0807 	sub.w	r8, r6, r7
 80231e8:	608b      	str	r3, [r1, #8]
 80231ea:	f1b8 0f00 	cmp.w	r8, #0
 80231ee:	dd9c      	ble.n	802312a <__sflush_r+0x1a>
 80231f0:	6a21      	ldr	r1, [r4, #32]
 80231f2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80231f4:	4643      	mov	r3, r8
 80231f6:	463a      	mov	r2, r7
 80231f8:	4628      	mov	r0, r5
 80231fa:	47b0      	blx	r6
 80231fc:	2800      	cmp	r0, #0
 80231fe:	dc06      	bgt.n	802320e <__sflush_r+0xfe>
 8023200:	89a3      	ldrh	r3, [r4, #12]
 8023202:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023206:	81a3      	strh	r3, [r4, #12]
 8023208:	f04f 30ff 	mov.w	r0, #4294967295
 802320c:	e78e      	b.n	802312c <__sflush_r+0x1c>
 802320e:	4407      	add	r7, r0
 8023210:	eba8 0800 	sub.w	r8, r8, r0
 8023214:	e7e9      	b.n	80231ea <__sflush_r+0xda>
 8023216:	bf00      	nop
 8023218:	20400001 	.word	0x20400001

0802321c <_fflush_r>:
 802321c:	b538      	push	{r3, r4, r5, lr}
 802321e:	690b      	ldr	r3, [r1, #16]
 8023220:	4605      	mov	r5, r0
 8023222:	460c      	mov	r4, r1
 8023224:	b913      	cbnz	r3, 802322c <_fflush_r+0x10>
 8023226:	2500      	movs	r5, #0
 8023228:	4628      	mov	r0, r5
 802322a:	bd38      	pop	{r3, r4, r5, pc}
 802322c:	b118      	cbz	r0, 8023236 <_fflush_r+0x1a>
 802322e:	6983      	ldr	r3, [r0, #24]
 8023230:	b90b      	cbnz	r3, 8023236 <_fflush_r+0x1a>
 8023232:	f000 f887 	bl	8023344 <__sinit>
 8023236:	4b14      	ldr	r3, [pc, #80]	; (8023288 <_fflush_r+0x6c>)
 8023238:	429c      	cmp	r4, r3
 802323a:	d11b      	bne.n	8023274 <_fflush_r+0x58>
 802323c:	686c      	ldr	r4, [r5, #4]
 802323e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023242:	2b00      	cmp	r3, #0
 8023244:	d0ef      	beq.n	8023226 <_fflush_r+0xa>
 8023246:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8023248:	07d0      	lsls	r0, r2, #31
 802324a:	d404      	bmi.n	8023256 <_fflush_r+0x3a>
 802324c:	0599      	lsls	r1, r3, #22
 802324e:	d402      	bmi.n	8023256 <_fflush_r+0x3a>
 8023250:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023252:	f000 f915 	bl	8023480 <__retarget_lock_acquire_recursive>
 8023256:	4628      	mov	r0, r5
 8023258:	4621      	mov	r1, r4
 802325a:	f7ff ff59 	bl	8023110 <__sflush_r>
 802325e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023260:	07da      	lsls	r2, r3, #31
 8023262:	4605      	mov	r5, r0
 8023264:	d4e0      	bmi.n	8023228 <_fflush_r+0xc>
 8023266:	89a3      	ldrh	r3, [r4, #12]
 8023268:	059b      	lsls	r3, r3, #22
 802326a:	d4dd      	bmi.n	8023228 <_fflush_r+0xc>
 802326c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802326e:	f000 f909 	bl	8023484 <__retarget_lock_release_recursive>
 8023272:	e7d9      	b.n	8023228 <_fflush_r+0xc>
 8023274:	4b05      	ldr	r3, [pc, #20]	; (802328c <_fflush_r+0x70>)
 8023276:	429c      	cmp	r4, r3
 8023278:	d101      	bne.n	802327e <_fflush_r+0x62>
 802327a:	68ac      	ldr	r4, [r5, #8]
 802327c:	e7df      	b.n	802323e <_fflush_r+0x22>
 802327e:	4b04      	ldr	r3, [pc, #16]	; (8023290 <_fflush_r+0x74>)
 8023280:	429c      	cmp	r4, r3
 8023282:	bf08      	it	eq
 8023284:	68ec      	ldreq	r4, [r5, #12]
 8023286:	e7da      	b.n	802323e <_fflush_r+0x22>
 8023288:	08026954 	.word	0x08026954
 802328c:	08026974 	.word	0x08026974
 8023290:	08026934 	.word	0x08026934

08023294 <std>:
 8023294:	2300      	movs	r3, #0
 8023296:	b510      	push	{r4, lr}
 8023298:	4604      	mov	r4, r0
 802329a:	e9c0 3300 	strd	r3, r3, [r0]
 802329e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80232a2:	6083      	str	r3, [r0, #8]
 80232a4:	8181      	strh	r1, [r0, #12]
 80232a6:	6643      	str	r3, [r0, #100]	; 0x64
 80232a8:	81c2      	strh	r2, [r0, #14]
 80232aa:	6183      	str	r3, [r0, #24]
 80232ac:	4619      	mov	r1, r3
 80232ae:	2208      	movs	r2, #8
 80232b0:	305c      	adds	r0, #92	; 0x5c
 80232b2:	f7ff fa17 	bl	80226e4 <memset>
 80232b6:	4b05      	ldr	r3, [pc, #20]	; (80232cc <std+0x38>)
 80232b8:	6263      	str	r3, [r4, #36]	; 0x24
 80232ba:	4b05      	ldr	r3, [pc, #20]	; (80232d0 <std+0x3c>)
 80232bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80232be:	4b05      	ldr	r3, [pc, #20]	; (80232d4 <std+0x40>)
 80232c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80232c2:	4b05      	ldr	r3, [pc, #20]	; (80232d8 <std+0x44>)
 80232c4:	6224      	str	r4, [r4, #32]
 80232c6:	6323      	str	r3, [r4, #48]	; 0x30
 80232c8:	bd10      	pop	{r4, pc}
 80232ca:	bf00      	nop
 80232cc:	08023569 	.word	0x08023569
 80232d0:	0802358b 	.word	0x0802358b
 80232d4:	080235c3 	.word	0x080235c3
 80232d8:	080235e7 	.word	0x080235e7

080232dc <_cleanup_r>:
 80232dc:	4901      	ldr	r1, [pc, #4]	; (80232e4 <_cleanup_r+0x8>)
 80232de:	f000 b8af 	b.w	8023440 <_fwalk_reent>
 80232e2:	bf00      	nop
 80232e4:	0802321d 	.word	0x0802321d

080232e8 <__sfmoreglue>:
 80232e8:	b570      	push	{r4, r5, r6, lr}
 80232ea:	1e4a      	subs	r2, r1, #1
 80232ec:	2568      	movs	r5, #104	; 0x68
 80232ee:	4355      	muls	r5, r2
 80232f0:	460e      	mov	r6, r1
 80232f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80232f6:	f7ff fa4d 	bl	8022794 <_malloc_r>
 80232fa:	4604      	mov	r4, r0
 80232fc:	b140      	cbz	r0, 8023310 <__sfmoreglue+0x28>
 80232fe:	2100      	movs	r1, #0
 8023300:	e9c0 1600 	strd	r1, r6, [r0]
 8023304:	300c      	adds	r0, #12
 8023306:	60a0      	str	r0, [r4, #8]
 8023308:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802330c:	f7ff f9ea 	bl	80226e4 <memset>
 8023310:	4620      	mov	r0, r4
 8023312:	bd70      	pop	{r4, r5, r6, pc}

08023314 <__sfp_lock_acquire>:
 8023314:	4801      	ldr	r0, [pc, #4]	; (802331c <__sfp_lock_acquire+0x8>)
 8023316:	f000 b8b3 	b.w	8023480 <__retarget_lock_acquire_recursive>
 802331a:	bf00      	nop
 802331c:	2000a9bc 	.word	0x2000a9bc

08023320 <__sfp_lock_release>:
 8023320:	4801      	ldr	r0, [pc, #4]	; (8023328 <__sfp_lock_release+0x8>)
 8023322:	f000 b8af 	b.w	8023484 <__retarget_lock_release_recursive>
 8023326:	bf00      	nop
 8023328:	2000a9bc 	.word	0x2000a9bc

0802332c <__sinit_lock_acquire>:
 802332c:	4801      	ldr	r0, [pc, #4]	; (8023334 <__sinit_lock_acquire+0x8>)
 802332e:	f000 b8a7 	b.w	8023480 <__retarget_lock_acquire_recursive>
 8023332:	bf00      	nop
 8023334:	2000a9bb 	.word	0x2000a9bb

08023338 <__sinit_lock_release>:
 8023338:	4801      	ldr	r0, [pc, #4]	; (8023340 <__sinit_lock_release+0x8>)
 802333a:	f000 b8a3 	b.w	8023484 <__retarget_lock_release_recursive>
 802333e:	bf00      	nop
 8023340:	2000a9bb 	.word	0x2000a9bb

08023344 <__sinit>:
 8023344:	b510      	push	{r4, lr}
 8023346:	4604      	mov	r4, r0
 8023348:	f7ff fff0 	bl	802332c <__sinit_lock_acquire>
 802334c:	69a3      	ldr	r3, [r4, #24]
 802334e:	b11b      	cbz	r3, 8023358 <__sinit+0x14>
 8023350:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023354:	f7ff bff0 	b.w	8023338 <__sinit_lock_release>
 8023358:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 802335c:	6523      	str	r3, [r4, #80]	; 0x50
 802335e:	4b13      	ldr	r3, [pc, #76]	; (80233ac <__sinit+0x68>)
 8023360:	4a13      	ldr	r2, [pc, #76]	; (80233b0 <__sinit+0x6c>)
 8023362:	681b      	ldr	r3, [r3, #0]
 8023364:	62a2      	str	r2, [r4, #40]	; 0x28
 8023366:	42a3      	cmp	r3, r4
 8023368:	bf04      	itt	eq
 802336a:	2301      	moveq	r3, #1
 802336c:	61a3      	streq	r3, [r4, #24]
 802336e:	4620      	mov	r0, r4
 8023370:	f000 f820 	bl	80233b4 <__sfp>
 8023374:	6060      	str	r0, [r4, #4]
 8023376:	4620      	mov	r0, r4
 8023378:	f000 f81c 	bl	80233b4 <__sfp>
 802337c:	60a0      	str	r0, [r4, #8]
 802337e:	4620      	mov	r0, r4
 8023380:	f000 f818 	bl	80233b4 <__sfp>
 8023384:	2200      	movs	r2, #0
 8023386:	60e0      	str	r0, [r4, #12]
 8023388:	2104      	movs	r1, #4
 802338a:	6860      	ldr	r0, [r4, #4]
 802338c:	f7ff ff82 	bl	8023294 <std>
 8023390:	68a0      	ldr	r0, [r4, #8]
 8023392:	2201      	movs	r2, #1
 8023394:	2109      	movs	r1, #9
 8023396:	f7ff ff7d 	bl	8023294 <std>
 802339a:	68e0      	ldr	r0, [r4, #12]
 802339c:	2202      	movs	r2, #2
 802339e:	2112      	movs	r1, #18
 80233a0:	f7ff ff78 	bl	8023294 <std>
 80233a4:	2301      	movs	r3, #1
 80233a6:	61a3      	str	r3, [r4, #24]
 80233a8:	e7d2      	b.n	8023350 <__sinit+0xc>
 80233aa:	bf00      	nop
 80233ac:	080268fc 	.word	0x080268fc
 80233b0:	080232dd 	.word	0x080232dd

080233b4 <__sfp>:
 80233b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80233b6:	4607      	mov	r7, r0
 80233b8:	f7ff ffac 	bl	8023314 <__sfp_lock_acquire>
 80233bc:	4b1e      	ldr	r3, [pc, #120]	; (8023438 <__sfp+0x84>)
 80233be:	681e      	ldr	r6, [r3, #0]
 80233c0:	69b3      	ldr	r3, [r6, #24]
 80233c2:	b913      	cbnz	r3, 80233ca <__sfp+0x16>
 80233c4:	4630      	mov	r0, r6
 80233c6:	f7ff ffbd 	bl	8023344 <__sinit>
 80233ca:	3648      	adds	r6, #72	; 0x48
 80233cc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80233d0:	3b01      	subs	r3, #1
 80233d2:	d503      	bpl.n	80233dc <__sfp+0x28>
 80233d4:	6833      	ldr	r3, [r6, #0]
 80233d6:	b30b      	cbz	r3, 802341c <__sfp+0x68>
 80233d8:	6836      	ldr	r6, [r6, #0]
 80233da:	e7f7      	b.n	80233cc <__sfp+0x18>
 80233dc:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80233e0:	b9d5      	cbnz	r5, 8023418 <__sfp+0x64>
 80233e2:	4b16      	ldr	r3, [pc, #88]	; (802343c <__sfp+0x88>)
 80233e4:	60e3      	str	r3, [r4, #12]
 80233e6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80233ea:	6665      	str	r5, [r4, #100]	; 0x64
 80233ec:	f000 f847 	bl	802347e <__retarget_lock_init_recursive>
 80233f0:	f7ff ff96 	bl	8023320 <__sfp_lock_release>
 80233f4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80233f8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80233fc:	6025      	str	r5, [r4, #0]
 80233fe:	61a5      	str	r5, [r4, #24]
 8023400:	2208      	movs	r2, #8
 8023402:	4629      	mov	r1, r5
 8023404:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8023408:	f7ff f96c 	bl	80226e4 <memset>
 802340c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8023410:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8023414:	4620      	mov	r0, r4
 8023416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023418:	3468      	adds	r4, #104	; 0x68
 802341a:	e7d9      	b.n	80233d0 <__sfp+0x1c>
 802341c:	2104      	movs	r1, #4
 802341e:	4638      	mov	r0, r7
 8023420:	f7ff ff62 	bl	80232e8 <__sfmoreglue>
 8023424:	4604      	mov	r4, r0
 8023426:	6030      	str	r0, [r6, #0]
 8023428:	2800      	cmp	r0, #0
 802342a:	d1d5      	bne.n	80233d8 <__sfp+0x24>
 802342c:	f7ff ff78 	bl	8023320 <__sfp_lock_release>
 8023430:	230c      	movs	r3, #12
 8023432:	603b      	str	r3, [r7, #0]
 8023434:	e7ee      	b.n	8023414 <__sfp+0x60>
 8023436:	bf00      	nop
 8023438:	080268fc 	.word	0x080268fc
 802343c:	ffff0001 	.word	0xffff0001

08023440 <_fwalk_reent>:
 8023440:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023444:	4606      	mov	r6, r0
 8023446:	4688      	mov	r8, r1
 8023448:	f100 0448 	add.w	r4, r0, #72	; 0x48
 802344c:	2700      	movs	r7, #0
 802344e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023452:	f1b9 0901 	subs.w	r9, r9, #1
 8023456:	d505      	bpl.n	8023464 <_fwalk_reent+0x24>
 8023458:	6824      	ldr	r4, [r4, #0]
 802345a:	2c00      	cmp	r4, #0
 802345c:	d1f7      	bne.n	802344e <_fwalk_reent+0xe>
 802345e:	4638      	mov	r0, r7
 8023460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023464:	89ab      	ldrh	r3, [r5, #12]
 8023466:	2b01      	cmp	r3, #1
 8023468:	d907      	bls.n	802347a <_fwalk_reent+0x3a>
 802346a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 802346e:	3301      	adds	r3, #1
 8023470:	d003      	beq.n	802347a <_fwalk_reent+0x3a>
 8023472:	4629      	mov	r1, r5
 8023474:	4630      	mov	r0, r6
 8023476:	47c0      	blx	r8
 8023478:	4307      	orrs	r7, r0
 802347a:	3568      	adds	r5, #104	; 0x68
 802347c:	e7e9      	b.n	8023452 <_fwalk_reent+0x12>

0802347e <__retarget_lock_init_recursive>:
 802347e:	4770      	bx	lr

08023480 <__retarget_lock_acquire_recursive>:
 8023480:	4770      	bx	lr

08023482 <__retarget_lock_release>:
 8023482:	4770      	bx	lr

08023484 <__retarget_lock_release_recursive>:
 8023484:	4770      	bx	lr

08023486 <__swhatbuf_r>:
 8023486:	b570      	push	{r4, r5, r6, lr}
 8023488:	460e      	mov	r6, r1
 802348a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802348e:	2900      	cmp	r1, #0
 8023490:	b096      	sub	sp, #88	; 0x58
 8023492:	4614      	mov	r4, r2
 8023494:	461d      	mov	r5, r3
 8023496:	da07      	bge.n	80234a8 <__swhatbuf_r+0x22>
 8023498:	2300      	movs	r3, #0
 802349a:	602b      	str	r3, [r5, #0]
 802349c:	89b3      	ldrh	r3, [r6, #12]
 802349e:	061a      	lsls	r2, r3, #24
 80234a0:	d410      	bmi.n	80234c4 <__swhatbuf_r+0x3e>
 80234a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80234a6:	e00e      	b.n	80234c6 <__swhatbuf_r+0x40>
 80234a8:	466a      	mov	r2, sp
 80234aa:	f000 f8c3 	bl	8023634 <_fstat_r>
 80234ae:	2800      	cmp	r0, #0
 80234b0:	dbf2      	blt.n	8023498 <__swhatbuf_r+0x12>
 80234b2:	9a01      	ldr	r2, [sp, #4]
 80234b4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80234b8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80234bc:	425a      	negs	r2, r3
 80234be:	415a      	adcs	r2, r3
 80234c0:	602a      	str	r2, [r5, #0]
 80234c2:	e7ee      	b.n	80234a2 <__swhatbuf_r+0x1c>
 80234c4:	2340      	movs	r3, #64	; 0x40
 80234c6:	2000      	movs	r0, #0
 80234c8:	6023      	str	r3, [r4, #0]
 80234ca:	b016      	add	sp, #88	; 0x58
 80234cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080234d0 <__smakebuf_r>:
 80234d0:	898b      	ldrh	r3, [r1, #12]
 80234d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80234d4:	079d      	lsls	r5, r3, #30
 80234d6:	4606      	mov	r6, r0
 80234d8:	460c      	mov	r4, r1
 80234da:	d507      	bpl.n	80234ec <__smakebuf_r+0x1c>
 80234dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80234e0:	6023      	str	r3, [r4, #0]
 80234e2:	6123      	str	r3, [r4, #16]
 80234e4:	2301      	movs	r3, #1
 80234e6:	6163      	str	r3, [r4, #20]
 80234e8:	b002      	add	sp, #8
 80234ea:	bd70      	pop	{r4, r5, r6, pc}
 80234ec:	ab01      	add	r3, sp, #4
 80234ee:	466a      	mov	r2, sp
 80234f0:	f7ff ffc9 	bl	8023486 <__swhatbuf_r>
 80234f4:	9900      	ldr	r1, [sp, #0]
 80234f6:	4605      	mov	r5, r0
 80234f8:	4630      	mov	r0, r6
 80234fa:	f7ff f94b 	bl	8022794 <_malloc_r>
 80234fe:	b948      	cbnz	r0, 8023514 <__smakebuf_r+0x44>
 8023500:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023504:	059a      	lsls	r2, r3, #22
 8023506:	d4ef      	bmi.n	80234e8 <__smakebuf_r+0x18>
 8023508:	f023 0303 	bic.w	r3, r3, #3
 802350c:	f043 0302 	orr.w	r3, r3, #2
 8023510:	81a3      	strh	r3, [r4, #12]
 8023512:	e7e3      	b.n	80234dc <__smakebuf_r+0xc>
 8023514:	4b0d      	ldr	r3, [pc, #52]	; (802354c <__smakebuf_r+0x7c>)
 8023516:	62b3      	str	r3, [r6, #40]	; 0x28
 8023518:	89a3      	ldrh	r3, [r4, #12]
 802351a:	6020      	str	r0, [r4, #0]
 802351c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8023520:	81a3      	strh	r3, [r4, #12]
 8023522:	9b00      	ldr	r3, [sp, #0]
 8023524:	6163      	str	r3, [r4, #20]
 8023526:	9b01      	ldr	r3, [sp, #4]
 8023528:	6120      	str	r0, [r4, #16]
 802352a:	b15b      	cbz	r3, 8023544 <__smakebuf_r+0x74>
 802352c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023530:	4630      	mov	r0, r6
 8023532:	f000 f891 	bl	8023658 <_isatty_r>
 8023536:	b128      	cbz	r0, 8023544 <__smakebuf_r+0x74>
 8023538:	89a3      	ldrh	r3, [r4, #12]
 802353a:	f023 0303 	bic.w	r3, r3, #3
 802353e:	f043 0301 	orr.w	r3, r3, #1
 8023542:	81a3      	strh	r3, [r4, #12]
 8023544:	89a0      	ldrh	r0, [r4, #12]
 8023546:	4305      	orrs	r5, r0
 8023548:	81a5      	strh	r5, [r4, #12]
 802354a:	e7cd      	b.n	80234e8 <__smakebuf_r+0x18>
 802354c:	080232dd 	.word	0x080232dd

08023550 <__malloc_lock>:
 8023550:	4801      	ldr	r0, [pc, #4]	; (8023558 <__malloc_lock+0x8>)
 8023552:	f7ff bf95 	b.w	8023480 <__retarget_lock_acquire_recursive>
 8023556:	bf00      	nop
 8023558:	2000a9b8 	.word	0x2000a9b8

0802355c <__malloc_unlock>:
 802355c:	4801      	ldr	r0, [pc, #4]	; (8023564 <__malloc_unlock+0x8>)
 802355e:	f7ff bf91 	b.w	8023484 <__retarget_lock_release_recursive>
 8023562:	bf00      	nop
 8023564:	2000a9b8 	.word	0x2000a9b8

08023568 <__sread>:
 8023568:	b510      	push	{r4, lr}
 802356a:	460c      	mov	r4, r1
 802356c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023570:	f000 f894 	bl	802369c <_read_r>
 8023574:	2800      	cmp	r0, #0
 8023576:	bfab      	itete	ge
 8023578:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 802357a:	89a3      	ldrhlt	r3, [r4, #12]
 802357c:	181b      	addge	r3, r3, r0
 802357e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8023582:	bfac      	ite	ge
 8023584:	6563      	strge	r3, [r4, #84]	; 0x54
 8023586:	81a3      	strhlt	r3, [r4, #12]
 8023588:	bd10      	pop	{r4, pc}

0802358a <__swrite>:
 802358a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802358e:	461f      	mov	r7, r3
 8023590:	898b      	ldrh	r3, [r1, #12]
 8023592:	05db      	lsls	r3, r3, #23
 8023594:	4605      	mov	r5, r0
 8023596:	460c      	mov	r4, r1
 8023598:	4616      	mov	r6, r2
 802359a:	d505      	bpl.n	80235a8 <__swrite+0x1e>
 802359c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80235a0:	2302      	movs	r3, #2
 80235a2:	2200      	movs	r2, #0
 80235a4:	f000 f868 	bl	8023678 <_lseek_r>
 80235a8:	89a3      	ldrh	r3, [r4, #12]
 80235aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80235ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80235b2:	81a3      	strh	r3, [r4, #12]
 80235b4:	4632      	mov	r2, r6
 80235b6:	463b      	mov	r3, r7
 80235b8:	4628      	mov	r0, r5
 80235ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80235be:	f000 b817 	b.w	80235f0 <_write_r>

080235c2 <__sseek>:
 80235c2:	b510      	push	{r4, lr}
 80235c4:	460c      	mov	r4, r1
 80235c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80235ca:	f000 f855 	bl	8023678 <_lseek_r>
 80235ce:	1c43      	adds	r3, r0, #1
 80235d0:	89a3      	ldrh	r3, [r4, #12]
 80235d2:	bf15      	itete	ne
 80235d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80235d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80235da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80235de:	81a3      	strheq	r3, [r4, #12]
 80235e0:	bf18      	it	ne
 80235e2:	81a3      	strhne	r3, [r4, #12]
 80235e4:	bd10      	pop	{r4, pc}

080235e6 <__sclose>:
 80235e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80235ea:	f000 b813 	b.w	8023614 <_close_r>
	...

080235f0 <_write_r>:
 80235f0:	b538      	push	{r3, r4, r5, lr}
 80235f2:	4d07      	ldr	r5, [pc, #28]	; (8023610 <_write_r+0x20>)
 80235f4:	4604      	mov	r4, r0
 80235f6:	4608      	mov	r0, r1
 80235f8:	4611      	mov	r1, r2
 80235fa:	2200      	movs	r2, #0
 80235fc:	602a      	str	r2, [r5, #0]
 80235fe:	461a      	mov	r2, r3
 8023600:	f7f6 f90d 	bl	801981e <_write>
 8023604:	1c43      	adds	r3, r0, #1
 8023606:	d102      	bne.n	802360e <_write_r+0x1e>
 8023608:	682b      	ldr	r3, [r5, #0]
 802360a:	b103      	cbz	r3, 802360e <_write_r+0x1e>
 802360c:	6023      	str	r3, [r4, #0]
 802360e:	bd38      	pop	{r3, r4, r5, pc}
 8023610:	2000a9c4 	.word	0x2000a9c4

08023614 <_close_r>:
 8023614:	b538      	push	{r3, r4, r5, lr}
 8023616:	4d06      	ldr	r5, [pc, #24]	; (8023630 <_close_r+0x1c>)
 8023618:	2300      	movs	r3, #0
 802361a:	4604      	mov	r4, r0
 802361c:	4608      	mov	r0, r1
 802361e:	602b      	str	r3, [r5, #0]
 8023620:	f7f6 f919 	bl	8019856 <_close>
 8023624:	1c43      	adds	r3, r0, #1
 8023626:	d102      	bne.n	802362e <_close_r+0x1a>
 8023628:	682b      	ldr	r3, [r5, #0]
 802362a:	b103      	cbz	r3, 802362e <_close_r+0x1a>
 802362c:	6023      	str	r3, [r4, #0]
 802362e:	bd38      	pop	{r3, r4, r5, pc}
 8023630:	2000a9c4 	.word	0x2000a9c4

08023634 <_fstat_r>:
 8023634:	b538      	push	{r3, r4, r5, lr}
 8023636:	4d07      	ldr	r5, [pc, #28]	; (8023654 <_fstat_r+0x20>)
 8023638:	2300      	movs	r3, #0
 802363a:	4604      	mov	r4, r0
 802363c:	4608      	mov	r0, r1
 802363e:	4611      	mov	r1, r2
 8023640:	602b      	str	r3, [r5, #0]
 8023642:	f7f6 f914 	bl	801986e <_fstat>
 8023646:	1c43      	adds	r3, r0, #1
 8023648:	d102      	bne.n	8023650 <_fstat_r+0x1c>
 802364a:	682b      	ldr	r3, [r5, #0]
 802364c:	b103      	cbz	r3, 8023650 <_fstat_r+0x1c>
 802364e:	6023      	str	r3, [r4, #0]
 8023650:	bd38      	pop	{r3, r4, r5, pc}
 8023652:	bf00      	nop
 8023654:	2000a9c4 	.word	0x2000a9c4

08023658 <_isatty_r>:
 8023658:	b538      	push	{r3, r4, r5, lr}
 802365a:	4d06      	ldr	r5, [pc, #24]	; (8023674 <_isatty_r+0x1c>)
 802365c:	2300      	movs	r3, #0
 802365e:	4604      	mov	r4, r0
 8023660:	4608      	mov	r0, r1
 8023662:	602b      	str	r3, [r5, #0]
 8023664:	f7f6 f913 	bl	801988e <_isatty>
 8023668:	1c43      	adds	r3, r0, #1
 802366a:	d102      	bne.n	8023672 <_isatty_r+0x1a>
 802366c:	682b      	ldr	r3, [r5, #0]
 802366e:	b103      	cbz	r3, 8023672 <_isatty_r+0x1a>
 8023670:	6023      	str	r3, [r4, #0]
 8023672:	bd38      	pop	{r3, r4, r5, pc}
 8023674:	2000a9c4 	.word	0x2000a9c4

08023678 <_lseek_r>:
 8023678:	b538      	push	{r3, r4, r5, lr}
 802367a:	4d07      	ldr	r5, [pc, #28]	; (8023698 <_lseek_r+0x20>)
 802367c:	4604      	mov	r4, r0
 802367e:	4608      	mov	r0, r1
 8023680:	4611      	mov	r1, r2
 8023682:	2200      	movs	r2, #0
 8023684:	602a      	str	r2, [r5, #0]
 8023686:	461a      	mov	r2, r3
 8023688:	f7f6 f90c 	bl	80198a4 <_lseek>
 802368c:	1c43      	adds	r3, r0, #1
 802368e:	d102      	bne.n	8023696 <_lseek_r+0x1e>
 8023690:	682b      	ldr	r3, [r5, #0]
 8023692:	b103      	cbz	r3, 8023696 <_lseek_r+0x1e>
 8023694:	6023      	str	r3, [r4, #0]
 8023696:	bd38      	pop	{r3, r4, r5, pc}
 8023698:	2000a9c4 	.word	0x2000a9c4

0802369c <_read_r>:
 802369c:	b538      	push	{r3, r4, r5, lr}
 802369e:	4d07      	ldr	r5, [pc, #28]	; (80236bc <_read_r+0x20>)
 80236a0:	4604      	mov	r4, r0
 80236a2:	4608      	mov	r0, r1
 80236a4:	4611      	mov	r1, r2
 80236a6:	2200      	movs	r2, #0
 80236a8:	602a      	str	r2, [r5, #0]
 80236aa:	461a      	mov	r2, r3
 80236ac:	f7f6 f89a 	bl	80197e4 <_read>
 80236b0:	1c43      	adds	r3, r0, #1
 80236b2:	d102      	bne.n	80236ba <_read_r+0x1e>
 80236b4:	682b      	ldr	r3, [r5, #0]
 80236b6:	b103      	cbz	r3, 80236ba <_read_r+0x1e>
 80236b8:	6023      	str	r3, [r4, #0]
 80236ba:	bd38      	pop	{r3, r4, r5, pc}
 80236bc:	2000a9c4 	.word	0x2000a9c4

080236c0 <_init>:
 80236c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80236c2:	bf00      	nop
 80236c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80236c6:	bc08      	pop	{r3}
 80236c8:	469e      	mov	lr, r3
 80236ca:	4770      	bx	lr

080236cc <_fini>:
 80236cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80236ce:	bf00      	nop
 80236d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80236d2:	bc08      	pop	{r3}
 80236d4:	469e      	mov	lr, r3
 80236d6:	4770      	bx	lr
