
f746g-disco-test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023294  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000031d4  08023464  08023464  00033464  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 0000775e  08026638  08026638  00036638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 ExtFlashSection 000146b8  0802dd98  0802dd98  0003dd98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 000000a8  08042450  08042450  00052450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  080424f8  080424f8  0006010c  2**0
                  CONTENTS
  7 .ARM          00000008  080424f8  080424f8  000524f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08042500  08042500  0006010c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   00000010  08042500  08042500  00052500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  08042510  08042510  00052510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         0000010c  20000000  08042518  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          0000a8ac  2000010c  08042624  0006010c  2**2
                  ALLOC
 13 ._user_heap_stack 00000600  2000a9b8  08042624  0006a9b8  2**0
                  ALLOC
 14 .ARM.attributes 00000030  00000000  00000000  0006010c  2**0
                  CONTENTS, READONLY
 15 .debug_info   000b44ac  00000000  00000000  0006013c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_abbrev 00019f60  00000000  00000000  001145e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_aranges 000071f8  00000000  00000000  0012e548  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00006a80  00000000  00000000  00135740  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_macro  00044391  00000000  00000000  0013c1c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_line   000669c9  00000000  00000000  00180551  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_str    00144996  00000000  00000000  001e6f1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .comment      000000fa  00000000  00000000  0032b8b0  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0001f554  00000000  00000000  0032b9ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000010c 	.word	0x2000010c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802344c 	.word	0x0802344c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000110 	.word	0x20000110
 800020c:	0802344c 	.word	0x0802344c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	4603      	mov	r3, r0
 80005b8:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 80005ba:	20c8      	movs	r0, #200	; 0xc8
 80005bc:	f013 fdd0 	bl	8014160 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005c0:	f000 fa7a 	bl	8000ab8 <ft5336_I2C_InitializeIfRequired>
}
 80005c4:	bf00      	nop
 80005c6:	3708      	adds	r7, #8
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 80005cc:	b480      	push	{r7}
 80005ce:	b083      	sub	sp, #12
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 80005d6:	bf00      	nop
 80005d8:	370c      	adds	r7, #12
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr

080005e2 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b084      	sub	sp, #16
 80005e6:	af00      	add	r7, sp, #0
 80005e8:	4603      	mov	r3, r0
 80005ea:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80005ec:	2300      	movs	r3, #0
 80005ee:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80005f0:	2300      	movs	r3, #0
 80005f2:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80005f4:	2300      	movs	r3, #0
 80005f6:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005f8:	f000 fa5e 	bl	8000ab8 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005fc:	2300      	movs	r3, #0
 80005fe:	73fb      	strb	r3, [r7, #15]
 8000600:	e010      	b.n	8000624 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000602:	88fb      	ldrh	r3, [r7, #6]
 8000604:	b2db      	uxtb	r3, r3
 8000606:	21a8      	movs	r1, #168	; 0xa8
 8000608:	4618      	mov	r0, r3
 800060a:	f013 fd8b 	bl	8014124 <TS_IO_Read>
 800060e:	4603      	mov	r3, r0
 8000610:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 8000612:	7b7b      	ldrb	r3, [r7, #13]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	2b51      	cmp	r3, #81	; 0x51
 8000618:	d101      	bne.n	800061e <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 800061a:	2301      	movs	r3, #1
 800061c:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800061e:	7bfb      	ldrb	r3, [r7, #15]
 8000620:	3301      	adds	r3, #1
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	7bfb      	ldrb	r3, [r7, #15]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d802      	bhi.n	8000630 <ft5336_ReadID+0x4e>
 800062a:	7bbb      	ldrb	r3, [r7, #14]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0e8      	beq.n	8000602 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000630:	7b7b      	ldrb	r3, [r7, #13]
 8000632:	b2db      	uxtb	r3, r3
 8000634:	b29b      	uxth	r3, r3
}
 8000636:	4618      	mov	r0, r3
 8000638:	3710      	adds	r7, #16
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
 8000644:	4603      	mov	r3, r0
 8000646:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000648:	88fb      	ldrh	r3, [r7, #6]
 800064a:	4618      	mov	r0, r3
 800064c:	f000 fa44 	bl	8000ad8 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000650:	88fb      	ldrh	r3, [r7, #6]
 8000652:	4618      	mov	r0, r3
 8000654:	f000 f932 	bl	80008bc <ft5336_TS_DisableIT>
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b084      	sub	sp, #16
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800066a:	2300      	movs	r3, #0
 800066c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800066e:	88fb      	ldrh	r3, [r7, #6]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2102      	movs	r1, #2
 8000674:	4618      	mov	r0, r3
 8000676:	f013 fd55 	bl	8014124 <TS_IO_Read>
 800067a:	4603      	mov	r3, r0
 800067c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800067e:	7bfb      	ldrb	r3, [r7, #15]
 8000680:	b2db      	uxtb	r3, r3
 8000682:	f003 030f 	and.w	r3, r3, #15
 8000686:	b2db      	uxtb	r3, r3
 8000688:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800068a:	7bfb      	ldrb	r3, [r7, #15]
 800068c:	b2db      	uxtb	r3, r3
 800068e:	2b05      	cmp	r3, #5
 8000690:	d901      	bls.n	8000696 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000696:	7bfb      	ldrb	r3, [r7, #15]
 8000698:	b2da      	uxtb	r2, r3
 800069a:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 800069c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800069e:	4b04      	ldr	r3, [pc, #16]	; (80006b0 <ft5336_TS_DetectTouch+0x50>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	b2db      	uxtb	r3, r3
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3710      	adds	r7, #16
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000128 	.word	0x20000128

080006b4 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	4603      	mov	r3, r0
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80006d6:	4b6d      	ldr	r3, [pc, #436]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006d8:	789a      	ldrb	r2, [r3, #2]
 80006da:	4b6c      	ldr	r3, [pc, #432]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006dc:	785b      	ldrb	r3, [r3, #1]
 80006de:	429a      	cmp	r2, r3
 80006e0:	f080 80cf 	bcs.w	8000882 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80006e4:	4b69      	ldr	r3, [pc, #420]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 80006e6:	789b      	ldrb	r3, [r3, #2]
 80006e8:	2b09      	cmp	r3, #9
 80006ea:	d871      	bhi.n	80007d0 <ft5336_TS_GetXY+0x11c>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <ft5336_TS_GetXY+0x40>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	0800071d 	.word	0x0800071d
 80006f8:	0800072f 	.word	0x0800072f
 80006fc:	08000741 	.word	0x08000741
 8000700:	08000753 	.word	0x08000753
 8000704:	08000765 	.word	0x08000765
 8000708:	08000777 	.word	0x08000777
 800070c:	08000789 	.word	0x08000789
 8000710:	0800079b 	.word	0x0800079b
 8000714:	080007ad 	.word	0x080007ad
 8000718:	080007bf 	.word	0x080007bf
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 800071c:	2304      	movs	r3, #4
 800071e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000720:	2303      	movs	r3, #3
 8000722:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000724:	2306      	movs	r3, #6
 8000726:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000728:	2305      	movs	r3, #5
 800072a:	753b      	strb	r3, [r7, #20]
      break;
 800072c:	e051      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800072e:	230a      	movs	r3, #10
 8000730:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000732:	2309      	movs	r3, #9
 8000734:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000736:	230c      	movs	r3, #12
 8000738:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 800073a:	230b      	movs	r3, #11
 800073c:	753b      	strb	r3, [r7, #20]
      break;
 800073e:	e048      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000740:	2310      	movs	r3, #16
 8000742:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000744:	230f      	movs	r3, #15
 8000746:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000748:	2312      	movs	r3, #18
 800074a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800074c:	2311      	movs	r3, #17
 800074e:	753b      	strb	r3, [r7, #20]
      break;
 8000750:	e03f      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000752:	2316      	movs	r3, #22
 8000754:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000756:	2315      	movs	r3, #21
 8000758:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800075a:	2318      	movs	r3, #24
 800075c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800075e:	2317      	movs	r3, #23
 8000760:	753b      	strb	r3, [r7, #20]
      break;
 8000762:	e036      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000764:	231c      	movs	r3, #28
 8000766:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000768:	231b      	movs	r3, #27
 800076a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800076c:	231e      	movs	r3, #30
 800076e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000770:	231d      	movs	r3, #29
 8000772:	753b      	strb	r3, [r7, #20]
      break;
 8000774:	e02d      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000776:	2322      	movs	r3, #34	; 0x22
 8000778:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800077a:	2321      	movs	r3, #33	; 0x21
 800077c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800077e:	2324      	movs	r3, #36	; 0x24
 8000780:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000782:	2323      	movs	r3, #35	; 0x23
 8000784:	753b      	strb	r3, [r7, #20]
      break;
 8000786:	e024      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000788:	2328      	movs	r3, #40	; 0x28
 800078a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800078c:	2327      	movs	r3, #39	; 0x27
 800078e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000790:	232a      	movs	r3, #42	; 0x2a
 8000792:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000794:	2329      	movs	r3, #41	; 0x29
 8000796:	753b      	strb	r3, [r7, #20]
      break;
 8000798:	e01b      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800079a:	232e      	movs	r3, #46	; 0x2e
 800079c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800079e:	232d      	movs	r3, #45	; 0x2d
 80007a0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 80007a2:	2330      	movs	r3, #48	; 0x30
 80007a4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80007a6:	232f      	movs	r3, #47	; 0x2f
 80007a8:	753b      	strb	r3, [r7, #20]
      break;
 80007aa:	e012      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80007ac:	2334      	movs	r3, #52	; 0x34
 80007ae:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80007b0:	2333      	movs	r3, #51	; 0x33
 80007b2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80007b4:	2336      	movs	r3, #54	; 0x36
 80007b6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80007b8:	2335      	movs	r3, #53	; 0x35
 80007ba:	753b      	strb	r3, [r7, #20]
      break;
 80007bc:	e009      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80007be:	233a      	movs	r3, #58	; 0x3a
 80007c0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80007c2:	2339      	movs	r3, #57	; 0x39
 80007c4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80007c6:	233c      	movs	r3, #60	; 0x3c
 80007c8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80007ca:	233b      	movs	r3, #59	; 0x3b
 80007cc:	753b      	strb	r3, [r7, #20]
      break;
 80007ce:	e000      	b.n	80007d2 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80007d0:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80007d2:	89fb      	ldrh	r3, [r7, #14]
 80007d4:	b2db      	uxtb	r3, r3
 80007d6:	7dfa      	ldrb	r2, [r7, #23]
 80007d8:	4611      	mov	r1, r2
 80007da:	4618      	mov	r0, r3
 80007dc:	f013 fca2 	bl	8014124 <TS_IO_Read>
 80007e0:	4603      	mov	r3, r0
 80007e2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007e4:	7cfb      	ldrb	r3, [r7, #19]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	4b29      	ldr	r3, [pc, #164]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 80007ec:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80007ee:	89fb      	ldrh	r3, [r7, #14]
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	7dba      	ldrb	r2, [r7, #22]
 80007f4:	4611      	mov	r1, r2
 80007f6:	4618      	mov	r0, r3
 80007f8:	f013 fc94 	bl	8014124 <TS_IO_Read>
 80007fc:	4603      	mov	r3, r0
 80007fe:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000800:	7cfb      	ldrb	r3, [r7, #19]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800080a:	b21a      	sxth	r2, r3
 800080c:	4b20      	ldr	r3, [pc, #128]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800080e:	881b      	ldrh	r3, [r3, #0]
 8000810:	b21b      	sxth	r3, r3
 8000812:	4313      	orrs	r3, r2
 8000814:	b21b      	sxth	r3, r3
 8000816:	b29a      	uxth	r2, r3
 8000818:	4b1d      	ldr	r3, [pc, #116]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081a:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 800081c:	4b1c      	ldr	r3, [pc, #112]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800081e:	881a      	ldrh	r2, [r3, #0]
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000824:	89fb      	ldrh	r3, [r7, #14]
 8000826:	b2db      	uxtb	r3, r3
 8000828:	7d7a      	ldrb	r2, [r7, #21]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f013 fc79 	bl	8014124 <TS_IO_Read>
 8000832:	4603      	mov	r3, r0
 8000834:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000836:	7cfb      	ldrb	r3, [r7, #19]
 8000838:	b2db      	uxtb	r3, r3
 800083a:	b29a      	uxth	r2, r3
 800083c:	4b14      	ldr	r3, [pc, #80]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800083e:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000840:	89fb      	ldrh	r3, [r7, #14]
 8000842:	b2db      	uxtb	r3, r3
 8000844:	7d3a      	ldrb	r2, [r7, #20]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f013 fc6b 	bl	8014124 <TS_IO_Read>
 800084e:	4603      	mov	r3, r0
 8000850:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000852:	7cfb      	ldrb	r3, [r7, #19]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800085c:	b21a      	sxth	r2, r3
 800085e:	4b0c      	ldr	r3, [pc, #48]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	b21b      	sxth	r3, r3
 8000864:	4313      	orrs	r3, r2
 8000866:	b21b      	sxth	r3, r3
 8000868:	b29a      	uxth	r2, r3
 800086a:	4b09      	ldr	r3, [pc, #36]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 800086c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800086e:	4b08      	ldr	r3, [pc, #32]	; (8000890 <ft5336_TS_GetXY+0x1dc>)
 8000870:	881a      	ldrh	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000876:	4b05      	ldr	r3, [pc, #20]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000878:	789b      	ldrb	r3, [r3, #2]
 800087a:	3301      	adds	r3, #1
 800087c:	b2da      	uxtb	r2, r3
 800087e:	4b03      	ldr	r3, [pc, #12]	; (800088c <ft5336_TS_GetXY+0x1d8>)
 8000880:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000882:	bf00      	nop
 8000884:	3718      	adds	r7, #24
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
 800088a:	bf00      	nop
 800088c:	20000128 	.word	0x20000128
 8000890:	2000012c 	.word	0x2000012c

08000894 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	4603      	mov	r3, r0
 800089c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008a2:	2301      	movs	r3, #1
 80008a4:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008a6:	88fb      	ldrh	r3, [r7, #6]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	7bfa      	ldrb	r2, [r7, #15]
 80008ac:	21a4      	movs	r1, #164	; 0xa4
 80008ae:	4618      	mov	r0, r3
 80008b0:	f013 fc1e 	bl	80140f0 <TS_IO_Write>
}
 80008b4:	bf00      	nop
 80008b6:	3710      	adds	r7, #16
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80008ca:	2300      	movs	r3, #0
 80008cc:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80008ce:	88fb      	ldrh	r3, [r7, #6]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	7bfa      	ldrb	r2, [r7, #15]
 80008d4:	21a4      	movs	r1, #164	; 0xa4
 80008d6:	4618      	mov	r0, r3
 80008d8:	f013 fc0a 	bl	80140f0 <TS_IO_Write>
}
 80008dc:	bf00      	nop
 80008de:	3710      	adds	r7, #16
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}

080008e4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80008ee:	2300      	movs	r3, #0
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	370c      	adds	r7, #12
 80008f4:	46bd      	mov	sp, r7
 80008f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fa:	4770      	bx	lr

080008fc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b083      	sub	sp, #12
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr

08000912 <ft5336_TS_GetGestureID>:
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @param  pGestureId : Pointer to get last touch gesture Identification.
  * @retval None.
  */
void ft5336_TS_GetGestureID(uint16_t DeviceAddr, uint32_t * pGestureId)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	b084      	sub	sp, #16
 8000916:	af00      	add	r7, sp, #0
 8000918:	4603      	mov	r3, r0
 800091a:	6039      	str	r1, [r7, #0]
 800091c:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadData = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	73fb      	strb	r3, [r7, #15]

  ucReadData = TS_IO_Read(DeviceAddr, FT5336_GEST_ID_REG);
 8000922:	88fb      	ldrh	r3, [r7, #6]
 8000924:	b2db      	uxtb	r3, r3
 8000926:	2101      	movs	r1, #1
 8000928:	4618      	mov	r0, r3
 800092a:	f013 fbfb 	bl	8014124 <TS_IO_Read>
 800092e:	4603      	mov	r3, r0
 8000930:	73fb      	strb	r3, [r7, #15]

  * pGestureId = ucReadData;
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	b2db      	uxtb	r3, r3
 8000936:	461a      	mov	r2, r3
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	601a      	str	r2, [r3, #0]
}
 800093c:	bf00      	nop
 800093e:	3710      	adds	r7, #16
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}

08000944 <ft5336_TS_GetTouchInfo>:
void ft5336_TS_GetTouchInfo(uint16_t   DeviceAddr,
                            uint32_t   touchIdx,
                            uint32_t * pWeight,
                            uint32_t * pArea,
                            uint32_t * pEvent)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b086      	sub	sp, #24
 8000948:	af00      	add	r7, sp, #0
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
 800094e:	603b      	str	r3, [r7, #0]
 8000950:	4603      	mov	r3, r0
 8000952:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000954:	2300      	movs	r3, #0
 8000956:	753b      	strb	r3, [r7, #20]
  uint8_t regAddressXHigh = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressPWeight = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressPMisc = 0;
 8000960:	2300      	movs	r3, #0
 8000962:	757b      	strb	r3, [r7, #21]

  if(touchIdx < ft5336_handle.currActiveTouchNb)
 8000964:	4b4d      	ldr	r3, [pc, #308]	; (8000a9c <ft5336_TS_GetTouchInfo+0x158>)
 8000966:	785b      	ldrb	r3, [r3, #1]
 8000968:	461a      	mov	r2, r3
 800096a:	68bb      	ldr	r3, [r7, #8]
 800096c:	4293      	cmp	r3, r2
 800096e:	f080 8090 	bcs.w	8000a92 <ft5336_TS_GetTouchInfo+0x14e>
  {
    switch(touchIdx)
 8000972:	68bb      	ldr	r3, [r7, #8]
 8000974:	2b09      	cmp	r3, #9
 8000976:	d85d      	bhi.n	8000a34 <ft5336_TS_GetTouchInfo+0xf0>
 8000978:	a201      	add	r2, pc, #4	; (adr r2, 8000980 <ft5336_TS_GetTouchInfo+0x3c>)
 800097a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097e:	bf00      	nop
 8000980:	080009a9 	.word	0x080009a9
 8000984:	080009b7 	.word	0x080009b7
 8000988:	080009c5 	.word	0x080009c5
 800098c:	080009d3 	.word	0x080009d3
 8000990:	080009e1 	.word	0x080009e1
 8000994:	080009ef 	.word	0x080009ef
 8000998:	080009fd 	.word	0x080009fd
 800099c:	08000a0b 	.word	0x08000a0b
 80009a0:	08000a19 	.word	0x08000a19
 80009a4:	08000a27 	.word	0x08000a27
    {
    case 0 :
      regAddressXHigh   = FT5336_P1_XH_REG;
 80009a8:	2303      	movs	r3, #3
 80009aa:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P1_WEIGHT_REG;
 80009ac:	2307      	movs	r3, #7
 80009ae:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P1_MISC_REG;
 80009b0:	2308      	movs	r3, #8
 80009b2:	757b      	strb	r3, [r7, #21]
      break;
 80009b4:	e03f      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 1 :
      regAddressXHigh   = FT5336_P2_XH_REG;
 80009b6:	2309      	movs	r3, #9
 80009b8:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P2_WEIGHT_REG;
 80009ba:	230d      	movs	r3, #13
 80009bc:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P2_MISC_REG;
 80009be:	230e      	movs	r3, #14
 80009c0:	757b      	strb	r3, [r7, #21]
      break;
 80009c2:	e038      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 2 :
      regAddressXHigh   = FT5336_P3_XH_REG;
 80009c4:	230f      	movs	r3, #15
 80009c6:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P3_WEIGHT_REG;
 80009c8:	2313      	movs	r3, #19
 80009ca:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P3_MISC_REG;
 80009cc:	2314      	movs	r3, #20
 80009ce:	757b      	strb	r3, [r7, #21]
      break;
 80009d0:	e031      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 3 :
      regAddressXHigh   = FT5336_P4_XH_REG;
 80009d2:	2315      	movs	r3, #21
 80009d4:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P4_WEIGHT_REG;
 80009d6:	2319      	movs	r3, #25
 80009d8:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P4_MISC_REG;
 80009da:	231a      	movs	r3, #26
 80009dc:	757b      	strb	r3, [r7, #21]
      break;
 80009de:	e02a      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 4 :
      regAddressXHigh   = FT5336_P5_XH_REG;
 80009e0:	231b      	movs	r3, #27
 80009e2:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P5_WEIGHT_REG;
 80009e4:	231f      	movs	r3, #31
 80009e6:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P5_MISC_REG;
 80009e8:	2320      	movs	r3, #32
 80009ea:	757b      	strb	r3, [r7, #21]
      break;
 80009ec:	e023      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 5 :
      regAddressXHigh   = FT5336_P6_XH_REG;
 80009ee:	2321      	movs	r3, #33	; 0x21
 80009f0:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P6_WEIGHT_REG;
 80009f2:	2325      	movs	r3, #37	; 0x25
 80009f4:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P6_MISC_REG;
 80009f6:	2326      	movs	r3, #38	; 0x26
 80009f8:	757b      	strb	r3, [r7, #21]
      break;
 80009fa:	e01c      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 6 :
      regAddressXHigh   = FT5336_P7_XH_REG;
 80009fc:	2327      	movs	r3, #39	; 0x27
 80009fe:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P7_WEIGHT_REG;
 8000a00:	232b      	movs	r3, #43	; 0x2b
 8000a02:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P7_MISC_REG;
 8000a04:	232c      	movs	r3, #44	; 0x2c
 8000a06:	757b      	strb	r3, [r7, #21]
      break;
 8000a08:	e015      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 7 :
      regAddressXHigh   = FT5336_P8_XH_REG;
 8000a0a:	232d      	movs	r3, #45	; 0x2d
 8000a0c:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P8_WEIGHT_REG;
 8000a0e:	2331      	movs	r3, #49	; 0x31
 8000a10:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P8_MISC_REG;
 8000a12:	2332      	movs	r3, #50	; 0x32
 8000a14:	757b      	strb	r3, [r7, #21]
      break;
 8000a16:	e00e      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 8 :
      regAddressXHigh   = FT5336_P9_XH_REG;
 8000a18:	2333      	movs	r3, #51	; 0x33
 8000a1a:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P9_WEIGHT_REG;
 8000a1c:	2337      	movs	r3, #55	; 0x37
 8000a1e:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P9_MISC_REG;
 8000a20:	2338      	movs	r3, #56	; 0x38
 8000a22:	757b      	strb	r3, [r7, #21]
      break;
 8000a24:	e007      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    case 9 :
      regAddressXHigh   = FT5336_P10_XH_REG;
 8000a26:	2339      	movs	r3, #57	; 0x39
 8000a28:	75fb      	strb	r3, [r7, #23]
      regAddressPWeight = FT5336_P10_WEIGHT_REG;
 8000a2a:	233d      	movs	r3, #61	; 0x3d
 8000a2c:	75bb      	strb	r3, [r7, #22]
      regAddressPMisc   = FT5336_P10_MISC_REG;
 8000a2e:	233e      	movs	r3, #62	; 0x3e
 8000a30:	757b      	strb	r3, [r7, #21]
      break;
 8000a32:	e000      	b.n	8000a36 <ft5336_TS_GetTouchInfo+0xf2>

    default :
      break;
 8000a34:	bf00      	nop

    } /* end switch(touchIdx) */

    /* Read Event Id of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000a36:	89fb      	ldrh	r3, [r7, #14]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	7dfa      	ldrb	r2, [r7, #23]
 8000a3c:	4611      	mov	r1, r2
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f013 fb70 	bl	8014124 <TS_IO_Read>
 8000a44:	4603      	mov	r3, r0
 8000a46:	753b      	strb	r3, [r7, #20]
    * pEvent = (ucReadData & FT5336_TOUCH_EVT_FLAG_MASK) >> FT5336_TOUCH_EVT_FLAG_SHIFT;
 8000a48:	7d3b      	ldrb	r3, [r7, #20]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	119b      	asrs	r3, r3, #6
 8000a4e:	f003 0203 	and.w	r2, r3, #3
 8000a52:	6a3b      	ldr	r3, [r7, #32]
 8000a54:	601a      	str	r2, [r3, #0]

    /* Read weight of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPWeight);
 8000a56:	89fb      	ldrh	r3, [r7, #14]
 8000a58:	b2db      	uxtb	r3, r3
 8000a5a:	7dba      	ldrb	r2, [r7, #22]
 8000a5c:	4611      	mov	r1, r2
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f013 fb60 	bl	8014124 <TS_IO_Read>
 8000a64:	4603      	mov	r3, r0
 8000a66:	753b      	strb	r3, [r7, #20]
    * pWeight = (ucReadData & FT5336_TOUCH_WEIGHT_MASK) >> FT5336_TOUCH_WEIGHT_SHIFT;
 8000a68:	7d3b      	ldrb	r3, [r7, #20]
 8000a6a:	b2db      	uxtb	r3, r3
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	601a      	str	r2, [r3, #0]

    /* Read area of touch index */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressPMisc);
 8000a72:	89fb      	ldrh	r3, [r7, #14]
 8000a74:	b2db      	uxtb	r3, r3
 8000a76:	7d7a      	ldrb	r2, [r7, #21]
 8000a78:	4611      	mov	r1, r2
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f013 fb52 	bl	8014124 <TS_IO_Read>
 8000a80:	4603      	mov	r3, r0
 8000a82:	753b      	strb	r3, [r7, #20]
    * pArea = (ucReadData & FT5336_TOUCH_AREA_MASK) >> FT5336_TOUCH_AREA_SHIFT;
 8000a84:	7d3b      	ldrb	r3, [r7, #20]
 8000a86:	b2db      	uxtb	r3, r3
 8000a88:	111b      	asrs	r3, r3, #4
 8000a8a:	f003 0204 	and.w	r2, r3, #4
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	601a      	str	r2, [r3, #0]

  } /* of if(touchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000a92:	bf00      	nop
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000128 	.word	0x20000128

08000aa0 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000128 	.word	0x20000128

08000ab8 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000abc:	f7ff fff0 	bl	8000aa0 <ft5336_Get_I2C_InitializedStatus>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d104      	bne.n	8000ad0 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000ac6:	f013 fb09 	bl	80140dc <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000aca:	4b02      	ldr	r3, [pc, #8]	; (8000ad4 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000acc:	2201      	movs	r2, #1
 8000ace:	701a      	strb	r2, [r3, #0]
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000128 	.word	0x20000128

08000ad8 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000ae6:	68fb      	ldr	r3, [r7, #12]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000af8:	2003      	movs	r0, #3
 8000afa:	f000 fb8c 	bl	8001216 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000afe:	2000      	movs	r0, #0
 8000b00:	f018 fcfc 	bl	80194fc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000b04:	f017 fe82 	bl	801880c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000b08:	2300      	movs	r3, #0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_IncTick+0x20>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	461a      	mov	r2, r3
 8000b1a:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_IncTick+0x24>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4413      	add	r3, r2
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <HAL_IncTick+0x24>)
 8000b22:	6013      	str	r3, [r2, #0]
}
 8000b24:	bf00      	nop
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	20000028 	.word	0x20000028
 8000b34:	20009e68 	.word	0x20009e68

08000b38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000b3c:	4b03      	ldr	r3, [pc, #12]	; (8000b4c <HAL_GetTick+0x14>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
 8000b4a:	bf00      	nop
 8000b4c:	20009e68 	.word	0x20009e68

08000b50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b084      	sub	sp, #16
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b58:	f7ff ffee 	bl	8000b38 <HAL_GetTick>
 8000b5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b62:	68fb      	ldr	r3, [r7, #12]
 8000b64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b68:	d005      	beq.n	8000b76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6a:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <HAL_Delay+0x40>)
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	461a      	mov	r2, r3
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	4413      	add	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b76:	bf00      	nop
 8000b78:	f7ff ffde 	bl	8000b38 <HAL_GetTick>
 8000b7c:	4602      	mov	r2, r0
 8000b7e:	68bb      	ldr	r3, [r7, #8]
 8000b80:	1ad3      	subs	r3, r2, r3
 8000b82:	68fa      	ldr	r2, [r7, #12]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d8f7      	bhi.n	8000b78 <HAL_Delay+0x28>
  {
  }
}
 8000b88:	bf00      	nop
 8000b8a:	3710      	adds	r7, #16
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000028 	.word	0x20000028

08000b94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d101      	bne.n	8000baa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e031      	b.n	8000c0e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d109      	bne.n	8000bc6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f017 fe52 	bl	801885c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2200      	movs	r2, #0
 8000bbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bca:	f003 0310 	and.w	r3, r3, #16
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d116      	bne.n	8000c00 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <HAL_ADC_Init+0x84>)
 8000bd8:	4013      	ands	r3, r2
 8000bda:	f043 0202 	orr.w	r2, r3, #2
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f000 f94e 	bl	8000e84 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	2200      	movs	r2, #0
 8000bec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf2:	f023 0303 	bic.w	r3, r3, #3
 8000bf6:	f043 0201 	orr.w	r2, r3, #1
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	641a      	str	r2, [r3, #64]	; 0x40
 8000bfe:	e001      	b.n	8000c04 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c00:	2301      	movs	r3, #1
 8000c02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	2200      	movs	r2, #0
 8000c08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3710      	adds	r7, #16
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	ffffeefd 	.word	0xffffeefd

08000c1c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b085      	sub	sp, #20
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
 8000c24:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d101      	bne.n	8000c38 <HAL_ADC_ConfigChannel+0x1c>
 8000c34:	2302      	movs	r3, #2
 8000c36:	e115      	b.n	8000e64 <HAL_ADC_ConfigChannel+0x248>
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2b09      	cmp	r3, #9
 8000c46:	d935      	bls.n	8000cb4 <HAL_ADC_ConfigChannel+0x98>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	68d9      	ldr	r1, [r3, #12]
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	b29b      	uxth	r3, r3
 8000c54:	461a      	mov	r2, r3
 8000c56:	4613      	mov	r3, r2
 8000c58:	005b      	lsls	r3, r3, #1
 8000c5a:	4413      	add	r3, r2
 8000c5c:	3b1e      	subs	r3, #30
 8000c5e:	2207      	movs	r2, #7
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	43da      	mvns	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	400a      	ands	r2, r1
 8000c6c:	60da      	str	r2, [r3, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a7f      	ldr	r2, [pc, #508]	; (8000e70 <HAL_ADC_ConfigChannel+0x254>)
 8000c74:	4293      	cmp	r3, r2
 8000c76:	d10a      	bne.n	8000c8e <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	68d9      	ldr	r1, [r3, #12]
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	061a      	lsls	r2, r3, #24
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	60da      	str	r2, [r3, #12]
 8000c8c:	e035      	b.n	8000cfa <HAL_ADC_ConfigChannel+0xde>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	68d9      	ldr	r1, [r3, #12]
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	689a      	ldr	r2, [r3, #8]
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	4403      	add	r3, r0
 8000ca6:	3b1e      	subs	r3, #30
 8000ca8:	409a      	lsls	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	60da      	str	r2, [r3, #12]
 8000cb2:	e022      	b.n	8000cfa <HAL_ADC_ConfigChannel+0xde>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	6919      	ldr	r1, [r3, #16]
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	4413      	add	r3, r2
 8000cc8:	2207      	movs	r2, #7
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43da      	mvns	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	400a      	ands	r2, r1
 8000cd6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6919      	ldr	r1, [r3, #16]
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	689a      	ldr	r2, [r3, #8]
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	b29b      	uxth	r3, r3
 8000ce8:	4618      	mov	r0, r3
 8000cea:	4603      	mov	r3, r0
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	4403      	add	r3, r0
 8000cf0:	409a      	lsls	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	430a      	orrs	r2, r1
 8000cf8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	2b06      	cmp	r3, #6
 8000d00:	d824      	bhi.n	8000d4c <HAL_ADC_ConfigChannel+0x130>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685a      	ldr	r2, [r3, #4]
 8000d0c:	4613      	mov	r3, r2
 8000d0e:	009b      	lsls	r3, r3, #2
 8000d10:	4413      	add	r3, r2
 8000d12:	3b05      	subs	r3, #5
 8000d14:	221f      	movs	r2, #31
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43da      	mvns	r2, r3
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	400a      	ands	r2, r1
 8000d22:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	b29b      	uxth	r3, r3
 8000d30:	4618      	mov	r0, r3
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	4613      	mov	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	3b05      	subs	r3, #5
 8000d3e:	fa00 f203 	lsl.w	r2, r0, r3
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	430a      	orrs	r2, r1
 8000d48:	635a      	str	r2, [r3, #52]	; 0x34
 8000d4a:	e04c      	b.n	8000de6 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	2b0c      	cmp	r3, #12
 8000d52:	d824      	bhi.n	8000d9e <HAL_ADC_ConfigChannel+0x182>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d5a:	683b      	ldr	r3, [r7, #0]
 8000d5c:	685a      	ldr	r2, [r3, #4]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	4413      	add	r3, r2
 8000d64:	3b23      	subs	r3, #35	; 0x23
 8000d66:	221f      	movs	r2, #31
 8000d68:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6c:	43da      	mvns	r2, r3
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	400a      	ands	r2, r1
 8000d74:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	b29b      	uxth	r3, r3
 8000d82:	4618      	mov	r0, r3
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685a      	ldr	r2, [r3, #4]
 8000d88:	4613      	mov	r3, r2
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	4413      	add	r3, r2
 8000d8e:	3b23      	subs	r3, #35	; 0x23
 8000d90:	fa00 f203 	lsl.w	r2, r0, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	430a      	orrs	r2, r1
 8000d9a:	631a      	str	r2, [r3, #48]	; 0x30
 8000d9c:	e023      	b.n	8000de6 <HAL_ADC_ConfigChannel+0x1ca>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	685a      	ldr	r2, [r3, #4]
 8000da8:	4613      	mov	r3, r2
 8000daa:	009b      	lsls	r3, r3, #2
 8000dac:	4413      	add	r3, r2
 8000dae:	3b41      	subs	r3, #65	; 0x41
 8000db0:	221f      	movs	r2, #31
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43da      	mvns	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	400a      	ands	r2, r1
 8000dbe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	4618      	mov	r0, r3
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	4413      	add	r3, r2
 8000dd8:	3b41      	subs	r3, #65	; 0x41
 8000dda:	fa00 f203 	lsl.w	r2, r0, r3
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	430a      	orrs	r2, r1
 8000de4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a22      	ldr	r2, [pc, #136]	; (8000e74 <HAL_ADC_ConfigChannel+0x258>)
 8000dec:	4293      	cmp	r3, r2
 8000dee:	d109      	bne.n	8000e04 <HAL_ADC_ConfigChannel+0x1e8>
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	2b12      	cmp	r3, #18
 8000df6:	d105      	bne.n	8000e04 <HAL_ADC_ConfigChannel+0x1e8>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8000df8:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <HAL_ADC_ConfigChannel+0x25c>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	4a1e      	ldr	r2, [pc, #120]	; (8000e78 <HAL_ADC_ConfigChannel+0x25c>)
 8000dfe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e02:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a1a      	ldr	r2, [pc, #104]	; (8000e74 <HAL_ADC_ConfigChannel+0x258>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d125      	bne.n	8000e5a <HAL_ADC_ConfigChannel+0x23e>
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a17      	ldr	r2, [pc, #92]	; (8000e70 <HAL_ADC_ConfigChannel+0x254>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d003      	beq.n	8000e20 <HAL_ADC_ConfigChannel+0x204>
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b11      	cmp	r3, #17
 8000e1e:	d11c      	bne.n	8000e5a <HAL_ADC_ConfigChannel+0x23e>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <HAL_ADC_ConfigChannel+0x25c>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	4a14      	ldr	r2, [pc, #80]	; (8000e78 <HAL_ADC_ConfigChannel+0x25c>)
 8000e26:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000e2a:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a0f      	ldr	r2, [pc, #60]	; (8000e70 <HAL_ADC_ConfigChannel+0x254>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d111      	bne.n	8000e5a <HAL_ADC_ConfigChannel+0x23e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8000e36:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <HAL_ADC_ConfigChannel+0x260>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	4a11      	ldr	r2, [pc, #68]	; (8000e80 <HAL_ADC_ConfigChannel+0x264>)
 8000e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e40:	0c9a      	lsrs	r2, r3, #18
 8000e42:	4613      	mov	r3, r2
 8000e44:	009b      	lsls	r3, r3, #2
 8000e46:	4413      	add	r3, r2
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000e4c:	e002      	b.n	8000e54 <HAL_ADC_ConfigChannel+0x238>
      {
        counter--;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	3b01      	subs	r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d1f9      	bne.n	8000e4e <HAL_ADC_ConfigChannel+0x232>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000e62:	2300      	movs	r3, #0
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	10000012 	.word	0x10000012
 8000e74:	40012000 	.word	0x40012000
 8000e78:	40012300 	.word	0x40012300
 8000e7c:	20000070 	.word	0x20000070
 8000e80:	431bde83 	.word	0x431bde83

08000e84 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8000e8c:	4b78      	ldr	r3, [pc, #480]	; (8001070 <ADC_Init+0x1ec>)
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	4a77      	ldr	r2, [pc, #476]	; (8001070 <ADC_Init+0x1ec>)
 8000e92:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000e96:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8000e98:	4b75      	ldr	r3, [pc, #468]	; (8001070 <ADC_Init+0x1ec>)
 8000e9a:	685a      	ldr	r2, [r3, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	4973      	ldr	r1, [pc, #460]	; (8001070 <ADC_Init+0x1ec>)
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	685a      	ldr	r2, [r3, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000eb4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	6859      	ldr	r1, [r3, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	691b      	ldr	r3, [r3, #16]
 8000ec0:	021a      	lsls	r2, r3, #8
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	430a      	orrs	r2, r1
 8000ec8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	685a      	ldr	r2, [r3, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000ed8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	6859      	ldr	r1, [r3, #4]
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689a      	ldr	r2, [r3, #8]
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	430a      	orrs	r2, r1
 8000eea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	689a      	ldr	r2, [r3, #8]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000efa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	6899      	ldr	r1, [r3, #8]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	68da      	ldr	r2, [r3, #12]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	430a      	orrs	r2, r1
 8000f0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f12:	4a58      	ldr	r2, [pc, #352]	; (8001074 <ADC_Init+0x1f0>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d022      	beq.n	8000f5e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	689a      	ldr	r2, [r3, #8]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	6899      	ldr	r1, [r3, #8]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	430a      	orrs	r2, r1
 8000f38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	689a      	ldr	r2, [r3, #8]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	6899      	ldr	r1, [r3, #8]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	430a      	orrs	r2, r1
 8000f5a:	609a      	str	r2, [r3, #8]
 8000f5c:	e00f      	b.n	8000f7e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000f6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000f7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	689a      	ldr	r2, [r3, #8]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 0202 	bic.w	r2, r2, #2
 8000f8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	6899      	ldr	r1, [r3, #8]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	005a      	lsls	r2, r3, #1
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d01b      	beq.n	8000fe4 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	685a      	ldr	r2, [r3, #4]
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000fba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8000fca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6859      	ldr	r1, [r3, #4]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd6:	3b01      	subs	r3, #1
 8000fd8:	035a      	lsls	r2, r3, #13
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	e007      	b.n	8000ff4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	685a      	ldr	r2, [r3, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000ff2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001002:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	69db      	ldr	r3, [r3, #28]
 800100e:	3b01      	subs	r3, #1
 8001010:	051a      	lsls	r2, r3, #20
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	430a      	orrs	r2, r1
 8001018:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001028:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	6899      	ldr	r1, [r3, #8]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001036:	025a      	lsls	r2, r3, #9
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	430a      	orrs	r2, r1
 800103e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	689a      	ldr	r2, [r3, #8]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800104e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	6899      	ldr	r1, [r3, #8]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	695b      	ldr	r3, [r3, #20]
 800105a:	029a      	lsls	r2, r3, #10
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	430a      	orrs	r2, r1
 8001062:	609a      	str	r2, [r3, #8]
}
 8001064:	bf00      	nop
 8001066:	370c      	adds	r7, #12
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	40012300 	.word	0x40012300
 8001074:	0f000001 	.word	0x0f000001

08001078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <__NVIC_SetPriorityGrouping+0x40>)
 800108a:	68db      	ldr	r3, [r3, #12]
 800108c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001094:	4013      	ands	r3, r2
 8001096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <__NVIC_SetPriorityGrouping+0x44>)
 80010a2:	4313      	orrs	r3, r2
 80010a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010a6:	4a04      	ldr	r2, [pc, #16]	; (80010b8 <__NVIC_SetPriorityGrouping+0x40>)
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	60d3      	str	r3, [r2, #12]
}
 80010ac:	bf00      	nop
 80010ae:	3714      	adds	r7, #20
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr
 80010b8:	e000ed00 	.word	0xe000ed00
 80010bc:	05fa0000 	.word	0x05fa0000

080010c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <__NVIC_GetPriorityGrouping+0x18>)
 80010c6:	68db      	ldr	r3, [r3, #12]
 80010c8:	0a1b      	lsrs	r3, r3, #8
 80010ca:	f003 0307 	and.w	r3, r3, #7
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	db0b      	blt.n	8001106 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	f003 021f 	and.w	r2, r3, #31
 80010f4:	4907      	ldr	r1, [pc, #28]	; (8001114 <__NVIC_EnableIRQ+0x38>)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	095b      	lsrs	r3, r3, #5
 80010fc:	2001      	movs	r0, #1
 80010fe:	fa00 f202 	lsl.w	r2, r0, r2
 8001102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	e000e100 	.word	0xe000e100

08001118 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	2b00      	cmp	r3, #0
 8001128:	db10      	blt.n	800114c <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800112a:	79fb      	ldrb	r3, [r7, #7]
 800112c:	f003 021f 	and.w	r2, r3, #31
 8001130:	4909      	ldr	r1, [pc, #36]	; (8001158 <__NVIC_DisableIRQ+0x40>)
 8001132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001136:	095b      	lsrs	r3, r3, #5
 8001138:	2001      	movs	r0, #1
 800113a:	fa00 f202 	lsl.w	r2, r0, r2
 800113e:	3320      	adds	r3, #32
 8001140:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001144:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001148:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	e000e100 	.word	0xe000e100

0800115c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	4603      	mov	r3, r0
 8001164:	6039      	str	r1, [r7, #0]
 8001166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116c:	2b00      	cmp	r3, #0
 800116e:	db0a      	blt.n	8001186 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	490c      	ldr	r1, [pc, #48]	; (80011a8 <__NVIC_SetPriority+0x4c>)
 8001176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117a:	0112      	lsls	r2, r2, #4
 800117c:	b2d2      	uxtb	r2, r2
 800117e:	440b      	add	r3, r1
 8001180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001184:	e00a      	b.n	800119c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	b2da      	uxtb	r2, r3
 800118a:	4908      	ldr	r1, [pc, #32]	; (80011ac <__NVIC_SetPriority+0x50>)
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	f003 030f 	and.w	r3, r3, #15
 8001192:	3b04      	subs	r3, #4
 8001194:	0112      	lsls	r2, r2, #4
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	440b      	add	r3, r1
 800119a:	761a      	strb	r2, [r3, #24]
}
 800119c:	bf00      	nop
 800119e:	370c      	adds	r7, #12
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr
 80011a8:	e000e100 	.word	0xe000e100
 80011ac:	e000ed00 	.word	0xe000ed00

080011b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b089      	sub	sp, #36	; 0x24
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f003 0307 	and.w	r3, r3, #7
 80011c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c4:	69fb      	ldr	r3, [r7, #28]
 80011c6:	f1c3 0307 	rsb	r3, r3, #7
 80011ca:	2b04      	cmp	r3, #4
 80011cc:	bf28      	it	cs
 80011ce:	2304      	movcs	r3, #4
 80011d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	3304      	adds	r3, #4
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	d902      	bls.n	80011e0 <NVIC_EncodePriority+0x30>
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3b03      	subs	r3, #3
 80011de:	e000      	b.n	80011e2 <NVIC_EncodePriority+0x32>
 80011e0:	2300      	movs	r3, #0
 80011e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295
 80011e8:	69bb      	ldr	r3, [r7, #24]
 80011ea:	fa02 f303 	lsl.w	r3, r2, r3
 80011ee:	43da      	mvns	r2, r3
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	401a      	ands	r2, r3
 80011f4:	697b      	ldr	r3, [r7, #20]
 80011f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011f8:	f04f 31ff 	mov.w	r1, #4294967295
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001202:	43d9      	mvns	r1, r3
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001208:	4313      	orrs	r3, r2
         );
}
 800120a:	4618      	mov	r0, r3
 800120c:	3724      	adds	r7, #36	; 0x24
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr

08001216 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001216:	b580      	push	{r7, lr}
 8001218:	b082      	sub	sp, #8
 800121a:	af00      	add	r7, sp, #0
 800121c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ff2a 	bl	8001078 <__NVIC_SetPriorityGrouping>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800122c:	b580      	push	{r7, lr}
 800122e:	b086      	sub	sp, #24
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
 8001238:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800123a:	2300      	movs	r3, #0
 800123c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800123e:	f7ff ff3f 	bl	80010c0 <__NVIC_GetPriorityGrouping>
 8001242:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001244:	687a      	ldr	r2, [r7, #4]
 8001246:	68b9      	ldr	r1, [r7, #8]
 8001248:	6978      	ldr	r0, [r7, #20]
 800124a:	f7ff ffb1 	bl	80011b0 <NVIC_EncodePriority>
 800124e:	4602      	mov	r2, r0
 8001250:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001254:	4611      	mov	r1, r2
 8001256:	4618      	mov	r0, r3
 8001258:	f7ff ff80 	bl	800115c <__NVIC_SetPriority>
}
 800125c:	bf00      	nop
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b082      	sub	sp, #8
 8001268:	af00      	add	r7, sp, #0
 800126a:	4603      	mov	r3, r0
 800126c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	4618      	mov	r0, r3
 8001274:	f7ff ff32 	bl	80010dc <__NVIC_EnableIRQ>
}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff ff42 	bl	8001118 <__NVIC_DisableIRQ>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d101      	bne.n	80012ae <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e054      	b.n	8001358 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	7f5b      	ldrb	r3, [r3, #29]
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d105      	bne.n	80012c4 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2200      	movs	r2, #0
 80012bc:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f017 fb26 	bl	8018910 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2202      	movs	r2, #2
 80012c8:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	791b      	ldrb	r3, [r3, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d10c      	bne.n	80012ec <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a22      	ldr	r2, [pc, #136]	; (8001360 <HAL_CRC_Init+0xc4>)
 80012d8:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	689a      	ldr	r2, [r3, #8]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f022 0218 	bic.w	r2, r2, #24
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	e00c      	b.n	8001306 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6899      	ldr	r1, [r3, #8]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	461a      	mov	r2, r3
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 f834 	bl	8001364 <HAL_CRCEx_Polynomial_Set>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e028      	b.n	8001358 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	795b      	ldrb	r3, [r3, #5]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d105      	bne.n	800131a <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f04f 32ff 	mov.w	r2, #4294967295
 8001316:	611a      	str	r2, [r3, #16]
 8001318:	e004      	b.n	8001324 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	687a      	ldr	r2, [r7, #4]
 8001320:	6912      	ldr	r2, [r2, #16]
 8001322:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	695a      	ldr	r2, [r3, #20]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	430a      	orrs	r2, r1
 8001338:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	699a      	ldr	r2, [r3, #24]
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	430a      	orrs	r2, r1
 800134e:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	04c11db7 	.word	0x04c11db7

08001364 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001364:	b480      	push	{r7}
 8001366:	b087      	sub	sp, #28
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001370:	2300      	movs	r3, #0
 8001372:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001374:	231f      	movs	r3, #31
 8001376:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001378:	bf00      	nop
 800137a:	693b      	ldr	r3, [r7, #16]
 800137c:	1e5a      	subs	r2, r3, #1
 800137e:	613a      	str	r2, [r7, #16]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d009      	beq.n	8001398 <HAL_CRCEx_Polynomial_Set+0x34>
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	f003 031f 	and.w	r3, r3, #31
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	fa22 f303 	lsr.w	r3, r2, r3
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0f0      	beq.n	800137a <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b18      	cmp	r3, #24
 800139c:	d846      	bhi.n	800142c <HAL_CRCEx_Polynomial_Set+0xc8>
 800139e:	a201      	add	r2, pc, #4	; (adr r2, 80013a4 <HAL_CRCEx_Polynomial_Set+0x40>)
 80013a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a4:	08001433 	.word	0x08001433
 80013a8:	0800142d 	.word	0x0800142d
 80013ac:	0800142d 	.word	0x0800142d
 80013b0:	0800142d 	.word	0x0800142d
 80013b4:	0800142d 	.word	0x0800142d
 80013b8:	0800142d 	.word	0x0800142d
 80013bc:	0800142d 	.word	0x0800142d
 80013c0:	0800142d 	.word	0x0800142d
 80013c4:	08001421 	.word	0x08001421
 80013c8:	0800142d 	.word	0x0800142d
 80013cc:	0800142d 	.word	0x0800142d
 80013d0:	0800142d 	.word	0x0800142d
 80013d4:	0800142d 	.word	0x0800142d
 80013d8:	0800142d 	.word	0x0800142d
 80013dc:	0800142d 	.word	0x0800142d
 80013e0:	0800142d 	.word	0x0800142d
 80013e4:	08001415 	.word	0x08001415
 80013e8:	0800142d 	.word	0x0800142d
 80013ec:	0800142d 	.word	0x0800142d
 80013f0:	0800142d 	.word	0x0800142d
 80013f4:	0800142d 	.word	0x0800142d
 80013f8:	0800142d 	.word	0x0800142d
 80013fc:	0800142d 	.word	0x0800142d
 8001400:	0800142d 	.word	0x0800142d
 8001404:	08001409 	.word	0x08001409
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	2b06      	cmp	r3, #6
 800140c:	d913      	bls.n	8001436 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001412:	e010      	b.n	8001436 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	2b07      	cmp	r3, #7
 8001418:	d90f      	bls.n	800143a <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800141e:	e00c      	b.n	800143a <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	2b0f      	cmp	r3, #15
 8001424:	d90b      	bls.n	800143e <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800142a:	e008      	b.n	800143e <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	75fb      	strb	r3, [r7, #23]
      break;
 8001430:	e006      	b.n	8001440 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001432:	bf00      	nop
 8001434:	e004      	b.n	8001440 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001436:	bf00      	nop
 8001438:	e002      	b.n	8001440 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800143a:	bf00      	nop
 800143c:	e000      	b.n	8001440 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 800143e:	bf00      	nop
  }
  if (status == HAL_OK)
 8001440:	7dfb      	ldrb	r3, [r7, #23]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10d      	bne.n	8001462 <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68ba      	ldr	r2, [r7, #8]
 800144c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f023 0118 	bic.w	r1, r3, #24
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	430a      	orrs	r2, r1
 8001460:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001462:	7dfb      	ldrb	r3, [r7, #23]
}
 8001464:	4618      	mov	r0, r3
 8001466:	371c      	adds	r7, #28
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{     
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e062      	b.n	8001548 <HAL_DCMI_Init+0xd8>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
                
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001488:	b2db      	uxtb	r3, r3
 800148a:	2b00      	cmp	r3, #0
 800148c:	d102      	bne.n	8001494 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else  
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f017 fa5e 	bl	8018950 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  } 
  
  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY; 
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2202      	movs	r2, #2
 8001498:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6819      	ldr	r1, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681a      	ldr	r2, [r3, #0]
 80014a6:	4b2a      	ldr	r3, [pc, #168]	; (8001550 <HAL_DCMI_Init+0xe0>)
 80014a8:	400b      	ands	r3, r1
 80014aa:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  |\
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6819      	ldr	r1, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80014c0:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	691b      	ldr	r3, [r3, #16]
 80014c6:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80014cc:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80014d8:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014de:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                     hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode |\
 80014e4:	431a      	orrs	r2, r3
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ea:	431a      	orrs	r2, r3
                                     hdcmi->Init.LineSelectStart);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
 80014f0:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	601a      	str	r2, [r3, #0]
                                     
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	2b10      	cmp	r3, #16
 8001500:	d112      	bne.n	8001528 <HAL_DCMI_Init+0xb8>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	7f1b      	ldrb	r3, [r3, #28]
 8001506:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	7f5b      	ldrb	r3, [r3, #29]
 800150c:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 800150e:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	7f9b      	ldrb	r3, [r3, #30]
 8001514:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos)|\
 8001516:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7fdb      	ldrb	r3, [r3, #31]
 800151e:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) |\
 8001524:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |\
 8001526:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68da      	ldr	r2, [r3, #12]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f042 021e 	orr.w	r2, r2, #30
 8001536:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2200      	movs	r2, #0
 800153c:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001546:	2300      	movs	r3, #0
}
 8001548:	4618      	mov	r0, r3
 800154a:	3708      	adds	r7, #8
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	ffe0f007 	.word	0xffe0f007

08001554 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b086      	sub	sp, #24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
 8001560:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001562:	2300      	movs	r3, #0
 8001564:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001572:	2b01      	cmp	r3, #1
 8001574:	d101      	bne.n	800157a <HAL_DMA_Start_IT+0x26>
 8001576:	2302      	movs	r3, #2
 8001578:	e048      	b.n	800160c <HAL_DMA_Start_IT+0xb8>
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2201      	movs	r2, #1
 800157e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001588:	b2db      	uxtb	r3, r3
 800158a:	2b01      	cmp	r3, #1
 800158c:	d137      	bne.n	80015fe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	2202      	movs	r2, #2
 8001592:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	2200      	movs	r2, #0
 800159a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	687a      	ldr	r2, [r7, #4]
 80015a0:	68b9      	ldr	r1, [r7, #8]
 80015a2:	68f8      	ldr	r0, [r7, #12]
 80015a4:	f000 f842 	bl	800162c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015ac:	223f      	movs	r2, #63	; 0x3f
 80015ae:	409a      	lsls	r2, r3
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 0216 	orr.w	r2, r2, #22
 80015c2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	695a      	ldr	r2, [r3, #20]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015d2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d007      	beq.n	80015ec <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f042 0208 	orr.w	r2, r2, #8
 80015ea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681a      	ldr	r2, [r3, #0]
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 0201 	orr.w	r2, r2, #1
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	e005      	b.n	800160a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	2200      	movs	r2, #0
 8001602:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001606:	2302      	movs	r3, #2
 8001608:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800160a:	7dfb      	ldrb	r3, [r7, #23]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}

08001614 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001620:	4618      	mov	r0, r3
 8001622:	370c      	adds	r7, #12
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr

0800162c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800162c:	b480      	push	{r7}
 800162e:	b085      	sub	sp, #20
 8001630:	af00      	add	r7, sp, #0
 8001632:	60f8      	str	r0, [r7, #12]
 8001634:	60b9      	str	r1, [r7, #8]
 8001636:	607a      	str	r2, [r7, #4]
 8001638:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001648:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	683a      	ldr	r2, [r7, #0]
 8001650:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	2b40      	cmp	r3, #64	; 0x40
 8001658:	d108      	bne.n	800166c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	68ba      	ldr	r2, [r7, #8]
 8001668:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800166a:	e007      	b.n	800167c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68ba      	ldr	r2, [r7, #8]
 8001672:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	60da      	str	r2, [r3, #12]
}
 800167c:	bf00      	nop
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d101      	bne.n	800169a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
 8001698:	e039      	b.n	800170e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80016a0:	b2db      	uxtb	r3, r3
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d106      	bne.n	80016b4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f014 fb82 	bl	8015db8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2202      	movs	r2, #2
 80016b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016d8:	f023 0107 	bic.w	r1, r3, #7
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	430a      	orrs	r2, r1
 80016e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ee:	4b0a      	ldr	r3, [pc, #40]	; (8001718 <HAL_DMA2D_Init+0x90>)
 80016f0:	4013      	ands	r3, r2
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68d1      	ldr	r1, [r2, #12]
 80016f6:	687a      	ldr	r2, [r7, #4]
 80016f8:	6812      	ldr	r2, [r2, #0]
 80016fa:	430b      	orrs	r3, r1
 80016fc:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2201      	movs	r2, #1
 8001708:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	ffffc000 	.word	0xffffc000

0800171c <HAL_DMA2D_DeInit>:
  *                 the configuration information for the DMA2D.
  * @retval None
  */

HAL_StatusTypeDef HAL_DMA2D_DeInit(DMA2D_HandleTypeDef *hdma2d)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]

  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <HAL_DMA2D_DeInit+0x12>
  {
     return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e05f      	b.n	80017ee <HAL_DMA2D_DeInit+0xd2>
  }

  /* Before aborting any DMA2D transfer or CLUT loading, check
     first whether or not DMA2D clock is enabled */
  if (__HAL_RCC_DMA2D_IS_CLK_ENABLED())
 800172e:	4b32      	ldr	r3, [pc, #200]	; (80017f8 <HAL_DMA2D_DeInit+0xdc>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d02e      	beq.n	8001798 <HAL_DMA2D_DeInit+0x7c>
  {
    /* Abort DMA2D transfer if any */
    if ((hdma2d->Instance->CR & DMA2D_CR_START) == DMA2D_CR_START)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	2b01      	cmp	r3, #1
 8001746:	d107      	bne.n	8001758 <HAL_DMA2D_DeInit+0x3c>
    {
      if (HAL_DMA2D_Abort(hdma2d) != HAL_OK)
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	f000 f8c1 	bl	80018d0 <HAL_DMA2D_Abort>
 800174e:	4603      	mov	r3, r0
 8001750:	2b00      	cmp	r3, #0
 8001752:	d021      	beq.n	8001798 <HAL_DMA2D_DeInit+0x7c>
      {
        /* Issue when aborting DMA2D transfer */
        return HAL_ERROR;
 8001754:	2301      	movs	r3, #1
 8001756:	e04a      	b.n	80017ee <HAL_DMA2D_DeInit+0xd2>
      }
    }
    else
    {
      /* Abort background CLUT loading if any */
      if ((hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START) == DMA2D_BGPFCCR_START)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175e:	f003 0320 	and.w	r3, r3, #32
 8001762:	2b20      	cmp	r3, #32
 8001764:	d108      	bne.n	8001778 <HAL_DMA2D_DeInit+0x5c>
      {
        if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 0U) != HAL_OK)
 8001766:	2100      	movs	r1, #0
 8001768:	6878      	ldr	r0, [r7, #4]
 800176a:	f000 f8f7 	bl	800195c <HAL_DMA2D_CLUTLoading_Abort>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d011      	beq.n	8001798 <HAL_DMA2D_DeInit+0x7c>
        {
          /* Issue when aborting background CLUT loading */
          return HAL_ERROR;
 8001774:	2301      	movs	r3, #1
 8001776:	e03a      	b.n	80017ee <HAL_DMA2D_DeInit+0xd2>
        }
      }
      else
      {
        /* Abort foreground CLUT loading if any */
        if ((hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START) == DMA2D_FGPFCCR_START)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	69db      	ldr	r3, [r3, #28]
 800177e:	f003 0320 	and.w	r3, r3, #32
 8001782:	2b20      	cmp	r3, #32
 8001784:	d108      	bne.n	8001798 <HAL_DMA2D_DeInit+0x7c>
        {
          if (HAL_DMA2D_CLUTLoading_Abort(hdma2d, 1U) != HAL_OK)
 8001786:	2101      	movs	r1, #1
 8001788:	6878      	ldr	r0, [r7, #4]
 800178a:	f000 f8e7 	bl	800195c <HAL_DMA2D_CLUTLoading_Abort>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <HAL_DMA2D_DeInit+0x7c>
          {
            /* Issue when aborting foreground CLUT loading */
            return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e02a      	b.n	80017ee <HAL_DMA2D_DeInit+0xd2>
      }
    }
  }

  /* Reset DMA2D control registers*/
  hdma2d->Instance->CR       =    0U;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
  hdma2d->Instance->IFCR     = 0x3FU;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	223f      	movs	r2, #63	; 0x3f
 80017a6:	609a      	str	r2, [r3, #8]
  hdma2d->Instance->FGOR     =    0U;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	2200      	movs	r2, #0
 80017ae:	611a      	str	r2, [r3, #16]
  hdma2d->Instance->BGOR     =    0U;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2200      	movs	r2, #0
 80017b6:	619a      	str	r2, [r3, #24]
  hdma2d->Instance->FGPFCCR  =    0U;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2200      	movs	r2, #0
 80017be:	61da      	str	r2, [r3, #28]
  hdma2d->Instance->BGPFCCR  =    0U;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2200      	movs	r2, #0
 80017c6:	625a      	str	r2, [r3, #36]	; 0x24
  hdma2d->Instance->OPFCCR   =    0U;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	2200      	movs	r2, #0
 80017ce:	635a      	str	r2, [r3, #52]	; 0x34
    /* DeInit the low level hardware */
    hdma2d->MspDeInitCallback(hdma2d);

#else
  /* Carry on with de-initialization of low level hardware */
  HAL_DMA2D_MspDeInit(hdma2d);
 80017d0:	6878      	ldr	r0, [r7, #4]
 80017d2:	f014 fb17 	bl	8015e04 <HAL_DMA2D_MspDeInit>
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2200      	movs	r2, #0
 80017da:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_RESET;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Release Lock */
  __HAL_UNLOCK(hdma2d);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2200      	movs	r2, #0
 80017e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40023800 	.word	0x40023800

080017fc <HAL_DMA2D_Start_IT>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af02      	add	r7, sp, #8
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
 8001808:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001810:	2b01      	cmp	r3, #1
 8001812:	d101      	bne.n	8001818 <HAL_DMA2D_Start_IT+0x1c>
 8001814:	2302      	movs	r3, #2
 8001816:	e020      	b.n	800185a <HAL_DMA2D_Start_IT+0x5e>
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2201      	movs	r2, #1
 800181c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2202      	movs	r2, #2
 8001824:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8001828:	69bb      	ldr	r3, [r7, #24]
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	687a      	ldr	r2, [r7, #4]
 8001830:	68b9      	ldr	r1, [r7, #8]
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f000 fa84 	bl	8001d40 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 8001846:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f042 0201 	orr.w	r2, r2, #1
 8001856:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3710      	adds	r7, #16
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <HAL_DMA2D_BlendingStart_IT>:
  * @param  Width       The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height      The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_BlendingStart_IT(DMA2D_HandleTypeDef *hdma2d, uint32_t SrcAddress1, uint32_t  SrcAddress2, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8001862:	b580      	push	{r7, lr}
 8001864:	b086      	sub	sp, #24
 8001866:	af02      	add	r7, sp, #8
 8001868:	60f8      	str	r0, [r7, #12]
 800186a:	60b9      	str	r1, [r7, #8]
 800186c:	607a      	str	r2, [r7, #4]
 800186e:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001876:	2b01      	cmp	r3, #1
 8001878:	d101      	bne.n	800187e <HAL_DMA2D_BlendingStart_IT+0x1c>
 800187a:	2302      	movs	r3, #2
 800187c:	e024      	b.n	80018c8 <HAL_DMA2D_BlendingStart_IT+0x66>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2202      	movs	r2, #2
 800188a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure DMA2D Stream source2 address */
  WRITE_REG(hdma2d->Instance->BGMAR, SrcAddress2);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	687a      	ldr	r2, [r7, #4]
 8001894:	615a      	str	r2, [r3, #20]

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, SrcAddress1, DstAddress, Width, Height);
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	9300      	str	r3, [sp, #0]
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	683a      	ldr	r2, [r7, #0]
 800189e:	68b9      	ldr	r1, [r7, #8]
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f000 fa4d 	bl	8001d40 <DMA2D_SetConfig>

  /* Enable the transfer complete, transfer error and configuration error interrupts */
  __HAL_DMA2D_ENABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f442 520c 	orr.w	r2, r2, #8960	; 0x2300
 80018b4:	601a      	str	r2, [r3, #0]

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681a      	ldr	r2, [r3, #0]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f042 0201 	orr.w	r2, r2, #1
 80018c4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80018c6:	2300      	movs	r3, #0
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3710      	adds	r7, #16
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <HAL_DMA2D_Abort>:
  * @param  hdma2d  pointer to a DMA2D_HandleTypeDef structure that contains
  *                  the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Abort(DMA2D_HandleTypeDef *hdma2d)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b084      	sub	sp, #16
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]

  /* Abort the DMA2D transfer */
  /* START bit is reset to make sure not to set it again, in the event the HW clears it
     between the register read and the register write by the CPU (writing 0 has no
     effect on START bitvalue) */
   MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_ABORT|DMA2D_CR_START, DMA2D_CR_ABORT);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f023 0205 	bic.w	r2, r3, #5
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f042 0204 	orr.w	r2, r2, #4
 80018ea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018ec:	f7ff f924 	bl	8000b38 <HAL_GetTick>
 80018f0:	60f8      	str	r0, [r7, #12]

  /* Check if the DMA2D is effectively disabled */
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80018f2:	e017      	b.n	8001924 <HAL_DMA2D_Abort+0x54>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 80018f4:	f7ff f920 	bl	8000b38 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001902:	d90f      	bls.n	8001924 <HAL_DMA2D_Abort+0x54>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001908:	f043 0220 	orr.w	r2, r3, #32
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2203      	movs	r2, #3
 8001914:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e017      	b.n	8001954 <HAL_DMA2D_Abort+0x84>
  while((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1e0      	bne.n	80018f4 <HAL_DMA2D_Abort+0x24>
    }
  }

  /* Disable the Transfer Complete, Transfer Error and Configuration Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC|DMA2D_IT_TE|DMA2D_IT_CE);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f422 520c 	bic.w	r2, r2, #8960	; 0x2300
 8001940:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	2201      	movs	r2, #1
 8001946:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2200      	movs	r2, #0
 800194e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}

0800195c <HAL_DMA2D_CLUTLoading_Abort>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_CLUTLoading_Abort(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b084      	sub	sp, #16
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  const __IO uint32_t * reg =  &(hdma2d->Instance->BGPFCCR); /* by default, point at background register */
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	3324      	adds	r3, #36	; 0x24
 800196c:	60fb      	str	r3, [r7, #12]

  /* Abort the CLUT loading */
  SET_BIT(hdma2d->Instance->CR, DMA2D_CR_ABORT);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f042 0204 	orr.w	r2, r2, #4
 800197c:	601a      	str	r2, [r3, #0]

  /* If foreground CLUT loading is considered, update local variables */
  if(LayerIdx == DMA2D_FOREGROUND_LAYER)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2b01      	cmp	r3, #1
 8001982:	d103      	bne.n	800198c <HAL_DMA2D_CLUTLoading_Abort+0x30>
  {
    reg  = &(hdma2d->Instance->FGPFCCR);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	331c      	adds	r3, #28
 800198a:	60fb      	str	r3, [r7, #12]
  }


  /* Get tick */
  tickstart = HAL_GetTick();
 800198c:	f7ff f8d4 	bl	8000b38 <HAL_GetTick>
 8001990:	60b8      	str	r0, [r7, #8]

  /* Check if the CLUT loading is aborted */
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 8001992:	e017      	b.n	80019c4 <HAL_DMA2D_CLUTLoading_Abort+0x68>
  {
    if((HAL_GetTick() - tickstart ) > DMA2D_TIMEOUT_ABORT)
 8001994:	f7ff f8d0 	bl	8000b38 <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80019a2:	d90f      	bls.n	80019c4 <HAL_DMA2D_CLUTLoading_Abort+0x68>
    {
      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019a8:	f043 0220 	orr.w	r2, r3, #32
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change the DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2203      	movs	r2, #3
 80019b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      return HAL_TIMEOUT;
 80019c0:	2303      	movs	r3, #3
 80019c2:	e016      	b.n	80019f2 <HAL_DMA2D_CLUTLoading_Abort+0x96>
  while((*reg & DMA2D_BGPFCCR_START) != 0U)
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0320 	and.w	r3, r3, #32
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1e1      	bne.n	8001994 <HAL_DMA2D_CLUTLoading_Abort+0x38>
    }
  }

  /* Disable the CLUT Transfer Complete, Transfer Error, Configuration Error and CLUT Access Error interrupts */
  __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC | DMA2D_IT_TE | DMA2D_IT_CE |DMA2D_IT_CAE);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f422 5264 	bic.w	r2, r2, #14592	; 0x3900
 80019de:	601a      	str	r2, [r3, #0]

  /* Change the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2201      	movs	r2, #1
 80019e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process Unlocked */
  __HAL_UNLOCK(hdma2d);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3710      	adds	r7, #16
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b084      	sub	sp, #16
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	f003 0301 	and.w	r3, r3, #1
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d026      	beq.n	8001a6a <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d021      	beq.n	8001a6a <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a34:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a3a:	f043 0201 	orr.w	r2, r3, #1
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2201      	movs	r2, #1
 8001a48:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2204      	movs	r2, #4
 8001a4e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	695b      	ldr	r3, [r3, #20]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d003      	beq.n	8001a6a <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	695b      	ldr	r3, [r3, #20]
 8001a66:	6878      	ldr	r0, [r7, #4]
 8001a68:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	f003 0320 	and.w	r3, r3, #32
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d026      	beq.n	8001ac2 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d021      	beq.n	8001ac2 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	681a      	ldr	r2, [r3, #0]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a8c:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2220      	movs	r2, #32
 8001a94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9a:	f043 0202 	orr.w	r2, r3, #2
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2204      	movs	r2, #4
 8001aa6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2200      	movs	r2, #0
 8001aae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	f003 0308 	and.w	r3, r3, #8
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d026      	beq.n	8001b1a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d021      	beq.n	8001b1a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ae4:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2208      	movs	r2, #8
 8001aec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001af2:	f043 0204 	orr.w	r2, r3, #4
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2204      	movs	r2, #4
 8001afe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferErrorCallback != NULL)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	695b      	ldr	r3, [r3, #20]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	6878      	ldr	r0, [r7, #4]
 8001b18:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d013      	beq.n	8001b4c <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d00e      	beq.n	8001b4c <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b3c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2204      	movs	r2, #4
 8001b44:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f853 	bl	8001bf2 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 0302 	and.w	r3, r3, #2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d024      	beq.n	8001ba0 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d01f      	beq.n	8001ba0 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b6e:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	2202      	movs	r2, #2
 8001b76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      if(hdma2d->XferCpltCallback != NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d003      	beq.n	8001ba0 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	f003 0310 	and.w	r3, r3, #16
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d01f      	beq.n	8001bea <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d01a      	beq.n	8001bea <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001bc2:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2210      	movs	r2, #16
 8001bca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001be4:	6878      	ldr	r0, [r7, #4]
 8001be6:	f000 f80e 	bl	8001c06 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001bea:	bf00      	nop
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001c06:	b480      	push	{r7}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
	...

08001c1c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d101      	bne.n	8001c3c <HAL_DMA2D_ConfigLayer+0x20>
 8001c38:	2302      	movs	r3, #2
 8001c3a:	e079      	b.n	8001d30 <HAL_DMA2D_ConfigLayer+0x114>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2202      	movs	r2, #2
 8001c48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	011b      	lsls	r3, r3, #4
 8001c50:	3318      	adds	r3, #24
 8001c52:	687a      	ldr	r2, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	041b      	lsls	r3, r3, #16
 8001c62:	4313      	orrs	r3, r2
 8001c64:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001c66:	4b35      	ldr	r3, [pc, #212]	; (8001d3c <HAL_DMA2D_ConfigLayer+0x120>)
 8001c68:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c6a:	693b      	ldr	r3, [r7, #16]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b0a      	cmp	r3, #10
 8001c70:	d003      	beq.n	8001c7a <HAL_DMA2D_ConfigLayer+0x5e>
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b09      	cmp	r3, #9
 8001c78:	d107      	bne.n	8001c8a <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	68db      	ldr	r3, [r3, #12]
 8001c7e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	e005      	b.n	8001c96 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	061b      	lsls	r3, r3, #24
 8001c90:	697a      	ldr	r2, [r7, #20]
 8001c92:	4313      	orrs	r3, r2
 8001c94:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d120      	bne.n	8001cde <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	ea02 0103 	and.w	r1, r2, r3
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	693a      	ldr	r2, [r7, #16]
 8001cba:	6812      	ldr	r2, [r2, #0]
 8001cbc:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	2b0a      	cmp	r3, #10
 8001cc4:	d003      	beq.n	8001cce <HAL_DMA2D_ConfigLayer+0xb2>
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	2b09      	cmp	r3, #9
 8001ccc:	d127      	bne.n	8001d1e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	68da      	ldr	r2, [r3, #12]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001cda:	629a      	str	r2, [r3, #40]	; 0x28
 8001cdc:	e01f      	b.n	8001d1e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	69da      	ldr	r2, [r3, #28]
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	ea02 0103 	and.w	r1, r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	693a      	ldr	r2, [r7, #16]
 8001cfc:	6812      	ldr	r2, [r2, #0]
 8001cfe:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2b0a      	cmp	r3, #10
 8001d06:	d003      	beq.n	8001d10 <HAL_DMA2D_ConfigLayer+0xf4>
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b09      	cmp	r3, #9
 8001d0e:	d106      	bne.n	8001d1e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8001d10:	693b      	ldr	r3, [r7, #16]
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8001d1c:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	371c      	adds	r7, #28
 8001d34:	46bd      	mov	sp, r7
 8001d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3a:	4770      	bx	lr
 8001d3c:	ff03000f 	.word	0xff03000f

08001d40 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8001d40:	b480      	push	{r7}
 8001d42:	b08b      	sub	sp, #44	; 0x2c
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	60b9      	str	r1, [r7, #8]
 8001d4a:	607a      	str	r2, [r7, #4]
 8001d4c:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d54:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	041a      	lsls	r2, r3, #16
 8001d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5e:	431a      	orrs	r2, r3
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	430a      	orrs	r2, r1
 8001d66:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8001d78:	d174      	bne.n	8001e64 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8001d80:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001d88:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8001d8a:	68bb      	ldr	r3, [r7, #8]
 8001d8c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8001d90:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	b2db      	uxtb	r3, r3
 8001d96:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d108      	bne.n	8001db2 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	431a      	orrs	r2, r3
 8001da6:	6a3b      	ldr	r3, [r7, #32]
 8001da8:	4313      	orrs	r3, r2
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	4313      	orrs	r3, r2
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
 8001db0:	e053      	b.n	8001e5a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d106      	bne.n	8001dc8 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8001dba:	69ba      	ldr	r2, [r7, #24]
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	697a      	ldr	r2, [r7, #20]
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc6:	e048      	b.n	8001e5a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	2b02      	cmp	r3, #2
 8001dce:	d111      	bne.n	8001df4 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	0cdb      	lsrs	r3, r3, #19
 8001dd4:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	0a9b      	lsrs	r3, r3, #10
 8001dda:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	08db      	lsrs	r3, r3, #3
 8001de0:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8001de2:	69bb      	ldr	r3, [r7, #24]
 8001de4:	015a      	lsls	r2, r3, #5
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	02db      	lsls	r3, r3, #11
 8001dea:	4313      	orrs	r3, r2
 8001dec:	697a      	ldr	r2, [r7, #20]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
 8001df2:	e032      	b.n	8001e5a <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	2b03      	cmp	r3, #3
 8001dfa:	d117      	bne.n	8001e2c <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8001dfc:	6a3b      	ldr	r3, [r7, #32]
 8001dfe:	0fdb      	lsrs	r3, r3, #31
 8001e00:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	0cdb      	lsrs	r3, r3, #19
 8001e06:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	0adb      	lsrs	r3, r3, #11
 8001e0c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	08db      	lsrs	r3, r3, #3
 8001e12:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	015a      	lsls	r2, r3, #5
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	029b      	lsls	r3, r3, #10
 8001e1c:	431a      	orrs	r2, r3
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	03db      	lsls	r3, r3, #15
 8001e22:	4313      	orrs	r3, r2
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
 8001e2a:	e016      	b.n	8001e5a <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8001e2c:	6a3b      	ldr	r3, [r7, #32]
 8001e2e:	0f1b      	lsrs	r3, r3, #28
 8001e30:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8001e32:	69fb      	ldr	r3, [r7, #28]
 8001e34:	0d1b      	lsrs	r3, r3, #20
 8001e36:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	0b1b      	lsrs	r3, r3, #12
 8001e3c:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	091b      	lsrs	r3, r3, #4
 8001e42:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	011a      	lsls	r2, r3, #4
 8001e48:	69fb      	ldr	r3, [r7, #28]
 8001e4a:	021b      	lsls	r3, r3, #8
 8001e4c:	431a      	orrs	r2, r3
 8001e4e:	6a3b      	ldr	r3, [r7, #32]
 8001e50:	031b      	lsls	r3, r3, #12
 8001e52:	4313      	orrs	r3, r2
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e60:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8001e62:	e003      	b.n	8001e6c <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	68ba      	ldr	r2, [r7, #8]
 8001e6a:	60da      	str	r2, [r3, #12]
}
 8001e6c:	bf00      	nop
 8001e6e:	372c      	adds	r7, #44	; 0x2c
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
 8001e84:	2300      	movs	r3, #0
 8001e86:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 8001e88:	4ba9      	ldr	r3, [pc, #676]	; (8002130 <HAL_ETH_Init+0x2b8>)
 8001e8a:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8001e90:	2300      	movs	r3, #0
 8001e92:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e183      	b.n	80021a6 <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d106      	bne.n	8001eb8 <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f016 fe0a 	bl	8018acc <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb8:	4b9e      	ldr	r3, [pc, #632]	; (8002134 <HAL_ETH_Init+0x2bc>)
 8001eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebc:	4a9d      	ldr	r2, [pc, #628]	; (8002134 <HAL_ETH_Init+0x2bc>)
 8001ebe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ec2:	6453      	str	r3, [r2, #68]	; 0x44
 8001ec4:	4b9b      	ldr	r3, [pc, #620]	; (8002134 <HAL_ETH_Init+0x2bc>)
 8001ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ecc:	60bb      	str	r3, [r7, #8]
 8001ece:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001ed0:	4b99      	ldr	r3, [pc, #612]	; (8002138 <HAL_ETH_Init+0x2c0>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	4a98      	ldr	r2, [pc, #608]	; (8002138 <HAL_ETH_Init+0x2c0>)
 8001ed6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001eda:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001edc:	4b96      	ldr	r3, [pc, #600]	; (8002138 <HAL_ETH_Init+0x2c0>)
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a1b      	ldr	r3, [r3, #32]
 8001ee4:	4994      	ldr	r1, [pc, #592]	; (8002138 <HAL_ETH_Init+0x2c0>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ef2:	681a      	ldr	r2, [r3, #0]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f042 0201 	orr.w	r2, r2, #1
 8001efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f00:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001f02:	f7fe fe19 	bl	8000b38 <HAL_GetTick>
 8001f06:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001f08:	e011      	b.n	8001f2e <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001f0a:	f7fe fe15 	bl	8000b38 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001f18:	d909      	bls.n	8001f2e <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2203      	movs	r2, #3
 8001f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e13b      	b.n	80021a6 <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d1e4      	bne.n	8001f0a <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	f023 031c 	bic.w	r3, r3, #28
 8001f4e:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001f50:	f004 fa5e 	bl	8006410 <HAL_RCC_GetHCLKFreq>
 8001f54:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001f56:	69bb      	ldr	r3, [r7, #24]
 8001f58:	4a78      	ldr	r2, [pc, #480]	; (800213c <HAL_ETH_Init+0x2c4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d908      	bls.n	8001f70 <HAL_ETH_Init+0xf8>
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	4a77      	ldr	r2, [pc, #476]	; (8002140 <HAL_ETH_Init+0x2c8>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d804      	bhi.n	8001f70 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001f66:	69fb      	ldr	r3, [r7, #28]
 8001f68:	f043 0308 	orr.w	r3, r3, #8
 8001f6c:	61fb      	str	r3, [r7, #28]
 8001f6e:	e027      	b.n	8001fc0 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	4a73      	ldr	r2, [pc, #460]	; (8002140 <HAL_ETH_Init+0x2c8>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d908      	bls.n	8001f8a <HAL_ETH_Init+0x112>
 8001f78:	69bb      	ldr	r3, [r7, #24]
 8001f7a:	4a72      	ldr	r2, [pc, #456]	; (8002144 <HAL_ETH_Init+0x2cc>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d804      	bhi.n	8001f8a <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	f043 030c 	orr.w	r3, r3, #12
 8001f86:	61fb      	str	r3, [r7, #28]
 8001f88:	e01a      	b.n	8001fc0 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	4a6d      	ldr	r2, [pc, #436]	; (8002144 <HAL_ETH_Init+0x2cc>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d903      	bls.n	8001f9a <HAL_ETH_Init+0x122>
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	4a6c      	ldr	r2, [pc, #432]	; (8002148 <HAL_ETH_Init+0x2d0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d911      	bls.n	8001fbe <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001f9a:	69bb      	ldr	r3, [r7, #24]
 8001f9c:	4a6a      	ldr	r2, [pc, #424]	; (8002148 <HAL_ETH_Init+0x2d0>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d908      	bls.n	8001fb4 <HAL_ETH_Init+0x13c>
 8001fa2:	69bb      	ldr	r3, [r7, #24]
 8001fa4:	4a69      	ldr	r2, [pc, #420]	; (800214c <HAL_ETH_Init+0x2d4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d804      	bhi.n	8001fb4 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	f043 0304 	orr.w	r3, r3, #4
 8001fb0:	61fb      	str	r3, [r7, #28]
 8001fb2:	e005      	b.n	8001fc0 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	f043 0310 	orr.w	r3, r3, #16
 8001fba:	61fb      	str	r3, [r7, #28]
 8001fbc:	e000      	b.n	8001fc0 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001fbe:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	69fa      	ldr	r2, [r7, #28]
 8001fc6:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001fc8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001fcc:	2100      	movs	r1, #0
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f956 	bl	8002280 <HAL_ETH_WritePHYRegister>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d00b      	beq.n	8001ff2 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001fde:	6939      	ldr	r1, [r7, #16]
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 f9b3 	bl	800234c <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e0d9      	b.n	80021a6 <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001ff2:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001ff6:	f7fe fdab 	bl	8000b50 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	f000 80a6 	beq.w	8002150 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8002004:	f7fe fd98 	bl	8000b38 <HAL_GetTick>
 8002008:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800200a:	f107 030c 	add.w	r3, r7, #12
 800200e:	461a      	mov	r2, r3
 8002010:	2101      	movs	r1, #1
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f8cc 	bl	80021b0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8002018:	f7fe fd8e 	bl	8000b38 <HAL_GetTick>
 800201c:	4602      	mov	r2, r0
 800201e:	697b      	ldr	r3, [r7, #20]
 8002020:	1ad3      	subs	r3, r2, r3
 8002022:	f241 3288 	movw	r2, #5000	; 0x1388
 8002026:	4293      	cmp	r3, r2
 8002028:	d90f      	bls.n	800204a <HAL_ETH_Init+0x1d2>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 800202e:	6939      	ldr	r1, [r7, #16]
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f000 f98b 	bl	800234c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2201      	movs	r2, #1
 800203a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e0ad      	b.n	80021a6 <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	f003 0304 	and.w	r3, r3, #4
 8002050:	2b00      	cmp	r3, #0
 8002052:	d0da      	beq.n	800200a <HAL_ETH_Init+0x192>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8002054:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002058:	2100      	movs	r1, #0
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f000 f910 	bl	8002280 <HAL_ETH_WritePHYRegister>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00b      	beq.n	800207e <HAL_ETH_Init+0x206>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800206a:	6939      	ldr	r1, [r7, #16]
 800206c:	6878      	ldr	r0, [r7, #4]
 800206e:	f000 f96d 	bl	800234c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2201      	movs	r2, #1
 8002076:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800207a:	2301      	movs	r3, #1
 800207c:	e093      	b.n	80021a6 <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 800207e:	f7fe fd5b 	bl	8000b38 <HAL_GetTick>
 8002082:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8002084:	f107 030c 	add.w	r3, r7, #12
 8002088:	461a      	mov	r2, r3
 800208a:	2101      	movs	r1, #1
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f000 f88f 	bl	80021b0 <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8002092:	f7fe fd51 	bl	8000b38 <HAL_GetTick>
 8002096:	4602      	mov	r2, r0
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	1ad3      	subs	r3, r2, r3
 800209c:	f241 3288 	movw	r2, #5000	; 0x1388
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d90f      	bls.n	80020c4 <HAL_ETH_Init+0x24c>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80020a8:	6939      	ldr	r1, [r7, #16]
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 f94e 	bl	800234c <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2201      	movs	r2, #1
 80020b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e070      	b.n	80021a6 <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f003 0320 	and.w	r3, r3, #32
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0da      	beq.n	8002084 <HAL_ETH_Init+0x20c>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80020ce:	f107 030c 	add.w	r3, r7, #12
 80020d2:	461a      	mov	r2, r3
 80020d4:	211f      	movs	r1, #31
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f000 f86a 	bl	80021b0 <HAL_ETH_ReadPHYRegister>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d00b      	beq.n	80020fa <HAL_ETH_Init+0x282>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80020e6:	6939      	ldr	r1, [r7, #16]
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f92f 	bl	800234c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80020f6:	2301      	movs	r3, #1
 80020f8:	e055      	b.n	80021a6 <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	f003 0310 	and.w	r3, r3, #16
 8002100:	2b00      	cmp	r3, #0
 8002102:	d004      	beq.n	800210e <HAL_ETH_Init+0x296>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800210a:	60da      	str	r2, [r3, #12]
 800210c:	e002      	b.n	8002114 <HAL_ETH_Init+0x29c>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	f003 0304 	and.w	r3, r3, #4
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_ETH_Init+0x2ae>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	e036      	b.n	8002194 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	e031      	b.n	8002194 <HAL_ETH_Init+0x31c>
 8002130:	03938700 	.word	0x03938700
 8002134:	40023800 	.word	0x40023800
 8002138:	40013800 	.word	0x40013800
 800213c:	01312cff 	.word	0x01312cff
 8002140:	02160ebf 	.word	0x02160ebf
 8002144:	039386ff 	.word	0x039386ff
 8002148:	05f5e0ff 	.word	0x05f5e0ff
 800214c:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	08db      	lsrs	r3, r3, #3
 8002156:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	085b      	lsrs	r3, r3, #1
 800215e:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8002160:	4313      	orrs	r3, r2
 8002162:	b29b      	uxth	r3, r3
 8002164:	461a      	mov	r2, r3
 8002166:	2100      	movs	r1, #0
 8002168:	6878      	ldr	r0, [r7, #4]
 800216a:	f000 f889 	bl	8002280 <HAL_ETH_WritePHYRegister>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00b      	beq.n	800218c <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8002178:	6939      	ldr	r1, [r7, #16]
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 f8e6 	bl	800234c <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2201      	movs	r2, #1
 8002184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e00c      	b.n	80021a6 <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 800218c:	f640 70ff 	movw	r0, #4095	; 0xfff
 8002190:	f7fe fcde 	bl	8000b50 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8002194:	6939      	ldr	r1, [r7, #16]
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f8d8 	bl	800234c <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2201      	movs	r2, #1
 80021a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80021a4:	2300      	movs	r3, #0
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3720      	adds	r7, #32
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop

080021b0 <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	60f8      	str	r0, [r7, #12]
 80021b8:	460b      	mov	r3, r1
 80021ba:	607a      	str	r2, [r7, #4]
 80021bc:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b82      	cmp	r3, #130	; 0x82
 80021d0:	d101      	bne.n	80021d6 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80021d2:	2302      	movs	r3, #2
 80021d4:	e050      	b.n	8002278 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	2282      	movs	r2, #130	; 0x82
 80021da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	691b      	ldr	r3, [r3, #16]
 80021e4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f003 031c 	and.w	r3, r3, #28
 80021ec:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	8a1b      	ldrh	r3, [r3, #16]
 80021f2:	02db      	lsls	r3, r3, #11
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	4313      	orrs	r3, r2
 80021fa:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80021fc:	897b      	ldrh	r3, [r7, #10]
 80021fe:	019b      	lsls	r3, r3, #6
 8002200:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	4313      	orrs	r3, r2
 8002208:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f023 0302 	bic.w	r3, r3, #2
 8002210:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f043 0301 	orr.w	r3, r3, #1
 8002218:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002222:	f7fe fc89 	bl	8000b38 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002228:	e015      	b.n	8002256 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 800222a:	f7fe fc85 	bl	8000b38 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002238:	d309      	bcc.n	800224e <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800224a:	2303      	movs	r3, #3
 800224c:	e014      	b.n	8002278 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	f003 0301 	and.w	r3, r3, #1
 800225c:	2b00      	cmp	r3, #0
 800225e:	d1e4      	bne.n	800222a <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	695b      	ldr	r3, [r3, #20]
 8002266:	b29b      	uxth	r3, r3
 8002268:	461a      	mov	r2, r3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2201      	movs	r2, #1
 8002272:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3718      	adds	r7, #24
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}

08002280 <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b086      	sub	sp, #24
 8002284:	af00      	add	r7, sp, #0
 8002286:	60f8      	str	r0, [r7, #12]
 8002288:	460b      	mov	r3, r1
 800228a:	607a      	str	r2, [r7, #4]
 800228c:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 8002292:	2300      	movs	r3, #0
 8002294:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b42      	cmp	r3, #66	; 0x42
 80022a0:	d101      	bne.n	80022a6 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 80022a2:	2302      	movs	r3, #2
 80022a4:	e04e      	b.n	8002344 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2242      	movs	r2, #66	; 0x42
 80022aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	691b      	ldr	r3, [r3, #16]
 80022b4:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f003 031c 	and.w	r3, r3, #28
 80022bc:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	8a1b      	ldrh	r3, [r3, #16]
 80022c2:	02db      	lsls	r3, r3, #11
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	4313      	orrs	r3, r2
 80022ca:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80022cc:	897b      	ldrh	r3, [r7, #10]
 80022ce:	019b      	lsls	r3, r3, #6
 80022d0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80022d4:	697a      	ldr	r2, [r7, #20]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	f043 0302 	orr.w	r3, r3, #2
 80022e0:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80022fc:	f7fe fc1c 	bl	8000b38 <HAL_GetTick>
 8002300:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002302:	e015      	b.n	8002330 <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 8002304:	f7fe fc18 	bl	8000b38 <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002312:	d309      	bcc.n	8002328 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e00d      	b.n	8002344 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	691b      	ldr	r3, [r3, #16]
 800232e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	f003 0301 	and.w	r3, r3, #1
 8002336:	2b00      	cmp	r3, #0
 8002338:	d1e4      	bne.n	8002304 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	2201      	movs	r2, #1
 800233e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}

0800234c <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b0b0      	sub	sp, #192	; 0xc0
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d007      	beq.n	8002372 <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002368:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002370:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8002372:	2300      	movs	r3, #0
 8002374:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8002376:	2300      	movs	r3, #0
 8002378:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 800237a:	2300      	movs	r3, #0
 800237c:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 800237e:	2300      	movs	r3, #0
 8002380:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8002382:	2300      	movs	r3, #0
 8002384:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8002386:	2300      	movs	r3, #0
 8002388:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d103      	bne.n	800239a <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8002392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002396:	663b      	str	r3, [r7, #96]	; 0x60
 8002398:	e001      	b.n	800239e <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 800239a:	2300      	movs	r3, #0
 800239c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 800239e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023a2:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80023a4:	2300      	movs	r3, #0
 80023a6:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80023a8:	2300      	movs	r3, #0
 80023aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80023ac:	2300      	movs	r3, #0
 80023ae:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 80023b8:	2340      	movs	r3, #64	; 0x40
 80023ba:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 80023bc:	2300      	movs	r3, #0
 80023be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 80023c2:	2300      	movs	r3, #0
 80023c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 80023c8:	2300      	movs	r3, #0
 80023ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 80023ce:	2300      	movs	r3, #0
 80023d0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 80023d4:	2300      	movs	r3, #0
 80023d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 80023da:	2300      	movs	r3, #0
 80023dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 80023e0:	2300      	movs	r3, #0
 80023e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 80023e6:	2300      	movs	r3, #0
 80023e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80023f2:	2300      	movs	r3, #0
 80023f4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 80023f8:	2300      	movs	r3, #0
 80023fa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 80023fe:	2300      	movs	r3, #0
 8002400:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8002404:	2300      	movs	r3, #0
 8002406:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 800240a:	2300      	movs	r3, #0
 800240c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002410:	2300      	movs	r3, #0
 8002412:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002420:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002424:	4bab      	ldr	r3, [pc, #684]	; (80026d4 <ETH_MACDMAConfig+0x388>)
 8002426:	4013      	ands	r3, r2
 8002428:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 800242c:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 800242e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002430:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8002432:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8002434:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8002436:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002438:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 800243e:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002440:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8002442:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8002444:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8002446:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 800244c:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 800244e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002450:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8002452:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8002454:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8002456:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8002458:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 800245a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 800245c:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 800245e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8002460:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002462:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002466:	4313      	orrs	r3, r2
 8002468:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002474:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002480:	2001      	movs	r0, #1
 8002482:	f7fe fb65 	bl	8000b50 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800248e:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002490:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8002492:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002494:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8002496:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8002498:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 800249a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 800249e:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 80024a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80024a4:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 80024a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80024aa:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 80024ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80024b0:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 80024b4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 80024bc:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80024be:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 80024ca:	2001      	movs	r0, #1
 80024cc:	f7fe fb40 	bl	8000b50 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024d8:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80024e2:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80024ec:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 80024f8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80024fc:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002500:	4013      	ands	r3, r2
 8002502:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002506:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800250a:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 800250c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002510:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002512:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8002516:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8002518:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 800251c:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 800251e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002522:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8002524:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8002528:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800252a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800253c:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002548:	2001      	movs	r0, #1
 800254a:	f7fe fb01 	bl	8000b50 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002556:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002558:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 800255c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	430a      	orrs	r2, r1
 8002566:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	69db      	ldr	r3, [r3, #28]
 800256e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002572:	2001      	movs	r0, #1
 8002574:	f7fe faec 	bl	8000b50 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002580:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8002582:	2300      	movs	r3, #0
 8002584:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8002586:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800258a:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 800258c:	2300      	movs	r3, #0
 800258e:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8002590:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002594:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002596:	2300      	movs	r3, #0
 8002598:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 800259a:	2300      	movs	r3, #0
 800259c:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 800259e:	2300      	movs	r3, #0
 80025a0:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80025a2:	2300      	movs	r3, #0
 80025a4:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80025a6:	2304      	movs	r3, #4
 80025a8:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80025aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80025b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80025b4:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80025b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025ba:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80025bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025c0:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 80025c2:	2380      	movs	r3, #128	; 0x80
 80025c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80025ca:	2300      	movs	r3, #0
 80025cc:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	f241 0318 	movw	r3, #4120	; 0x1018
 80025d6:	4413      	add	r3, r2
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 80025de:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025e2:	4b3d      	ldr	r3, [pc, #244]	; (80026d8 <ETH_MACDMAConfig+0x38c>)
 80025e4:	4013      	ands	r3, r2
 80025e6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80025ea:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 80025ec:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 80025ee:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 80025f0:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 80025f2:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 80025f4:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 80025f6:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 80025f8:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 80025fa:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 80025fc:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 80025fe:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002600:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002602:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8002604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8002606:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8002608:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 800260a:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 800260c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002610:	4313      	orrs	r3, r2
 8002612:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	f241 0318 	movw	r3, #4120	; 0x1018
 800261e:	4413      	add	r3, r2
 8002620:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002624:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	f241 0318 	movw	r3, #4120	; 0x1018
 800262e:	4413      	add	r3, r2
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8002636:	2001      	movs	r0, #1
 8002638:	f7fe fa8a 	bl	8000b50 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	f241 0318 	movw	r3, #4120	; 0x1018
 8002644:	4413      	add	r3, r2
 8002646:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800264a:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800264c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 800264e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002650:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8002654:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8002656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8002658:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 800265a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 800265c:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2) |
 800265e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002660:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8002662:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8002664:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 8002666:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002674:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8002684:	2001      	movs	r0, #1
 8002686:	f7fe fa63 	bl	8000b50 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002692:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002696:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	699b      	ldr	r3, [r3, #24]
 800269c:	2b01      	cmp	r3, #1
 800269e:	d10d      	bne.n	80026bc <ETH_MACDMAConfig+0x370>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	f241 031c 	movw	r3, #4124	; 0x101c
 80026a8:	4413      	add	r3, r2
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	687a      	ldr	r2, [r7, #4]
 80026ae:	6811      	ldr	r1, [r2, #0]
 80026b0:	4a0a      	ldr	r2, [pc, #40]	; (80026dc <ETH_MACDMAConfig+0x390>)
 80026b2:	431a      	orrs	r2, r3
 80026b4:	f241 031c 	movw	r3, #4124	; 0x101c
 80026b8:	440b      	add	r3, r1
 80026ba:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	461a      	mov	r2, r3
 80026c2:	2100      	movs	r1, #0
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	f000 f80b 	bl	80026e0 <ETH_MACAddressConfig>
}
 80026ca:	bf00      	nop
 80026cc:	37c0      	adds	r7, #192	; 0xc0
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	ff20810f 	.word	0xff20810f
 80026d8:	f8de3f23 	.word	0xf8de3f23
 80026dc:	00010040 	.word	0x00010040

080026e0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	3305      	adds	r3, #5
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	021b      	lsls	r3, r3, #8
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	3204      	adds	r2, #4
 80026f8:	7812      	ldrb	r2, [r2, #0]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 80026fe:	68ba      	ldr	r2, [r7, #8]
 8002700:	4b11      	ldr	r3, [pc, #68]	; (8002748 <ETH_MACAddressConfig+0x68>)
 8002702:	4413      	add	r3, r2
 8002704:	461a      	mov	r2, r3
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	3303      	adds	r3, #3
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	061a      	lsls	r2, r3, #24
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	3302      	adds	r3, #2
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	041b      	lsls	r3, r3, #16
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	3301      	adds	r3, #1
 8002720:	781b      	ldrb	r3, [r3, #0]
 8002722:	021b      	lsls	r3, r3, #8
 8002724:	4313      	orrs	r3, r2
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	7812      	ldrb	r2, [r2, #0]
 800272a:	4313      	orrs	r3, r2
 800272c:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 800272e:	68ba      	ldr	r2, [r7, #8]
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <ETH_MACAddressConfig+0x6c>)
 8002732:	4413      	add	r3, r2
 8002734:	461a      	mov	r2, r3
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	6013      	str	r3, [r2, #0]
}
 800273a:	bf00      	nop
 800273c:	371c      	adds	r7, #28
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr
 8002746:	bf00      	nop
 8002748:	40028040 	.word	0x40028040
 800274c:	40028044 	.word	0x40028044

08002750 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002750:	b480      	push	{r7}
 8002752:	b089      	sub	sp, #36	; 0x24
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800275e:	2300      	movs	r3, #0
 8002760:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002762:	2300      	movs	r3, #0
 8002764:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002766:	2300      	movs	r3, #0
 8002768:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800276a:	2300      	movs	r3, #0
 800276c:	61fb      	str	r3, [r7, #28]
 800276e:	e175      	b.n	8002a5c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002770:	2201      	movs	r2, #1
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4013      	ands	r3, r2
 8002782:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002784:	693a      	ldr	r2, [r7, #16]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	429a      	cmp	r2, r3
 800278a:	f040 8164 	bne.w	8002a56 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	2b02      	cmp	r3, #2
 8002794:	d003      	beq.n	800279e <HAL_GPIO_Init+0x4e>
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	685b      	ldr	r3, [r3, #4]
 800279a:	2b12      	cmp	r3, #18
 800279c:	d123      	bne.n	80027e6 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	08da      	lsrs	r2, r3, #3
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	3208      	adds	r2, #8
 80027a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	f003 0307 	and.w	r3, r3, #7
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	220f      	movs	r2, #15
 80027b6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	691a      	ldr	r2, [r3, #16]
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	f003 0307 	and.w	r3, r3, #7
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	fa02 f303 	lsl.w	r3, r2, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	08da      	lsrs	r2, r3, #3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	3208      	adds	r2, #8
 80027e0:	69b9      	ldr	r1, [r7, #24]
 80027e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80027ec:	69fb      	ldr	r3, [r7, #28]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	2203      	movs	r2, #3
 80027f2:	fa02 f303 	lsl.w	r3, r2, r3
 80027f6:	43db      	mvns	r3, r3
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	4013      	ands	r3, r2
 80027fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	f003 0203 	and.w	r2, r3, #3
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d00b      	beq.n	800283a <HAL_GPIO_Init+0xea>
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	2b02      	cmp	r3, #2
 8002828:	d007      	beq.n	800283a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800282e:	2b11      	cmp	r3, #17
 8002830:	d003      	beq.n	800283a <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	2b12      	cmp	r3, #18
 8002838:	d130      	bne.n	800289c <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	2203      	movs	r2, #3
 8002846:	fa02 f303 	lsl.w	r3, r2, r3
 800284a:	43db      	mvns	r3, r3
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	4013      	ands	r3, r2
 8002850:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	fa02 f303 	lsl.w	r3, r2, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4313      	orrs	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002870:	2201      	movs	r2, #1
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	fa02 f303 	lsl.w	r3, r2, r3
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	091b      	lsrs	r3, r3, #4
 8002886:	f003 0201 	and.w	r2, r3, #1
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	fa02 f303 	lsl.w	r3, r2, r3
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	4313      	orrs	r3, r2
 8002894:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	005b      	lsls	r3, r3, #1
 80028a6:	2203      	movs	r2, #3
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	689a      	ldr	r2, [r3, #8]
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	69ba      	ldr	r2, [r7, #24]
 80028c2:	4313      	orrs	r3, r2
 80028c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	685b      	ldr	r3, [r3, #4]
 80028d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 80be 	beq.w	8002a56 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028da:	4b65      	ldr	r3, [pc, #404]	; (8002a70 <HAL_GPIO_Init+0x320>)
 80028dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028de:	4a64      	ldr	r2, [pc, #400]	; (8002a70 <HAL_GPIO_Init+0x320>)
 80028e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028e4:	6453      	str	r3, [r2, #68]	; 0x44
 80028e6:	4b62      	ldr	r3, [pc, #392]	; (8002a70 <HAL_GPIO_Init+0x320>)
 80028e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80028f2:	4a60      	ldr	r2, [pc, #384]	; (8002a74 <HAL_GPIO_Init+0x324>)
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	089b      	lsrs	r3, r3, #2
 80028f8:	3302      	adds	r3, #2
 80028fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	220f      	movs	r2, #15
 800290a:	fa02 f303 	lsl.w	r3, r2, r3
 800290e:	43db      	mvns	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	4013      	ands	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a57      	ldr	r2, [pc, #348]	; (8002a78 <HAL_GPIO_Init+0x328>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d037      	beq.n	800298e <HAL_GPIO_Init+0x23e>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a56      	ldr	r2, [pc, #344]	; (8002a7c <HAL_GPIO_Init+0x32c>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d031      	beq.n	800298a <HAL_GPIO_Init+0x23a>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a55      	ldr	r2, [pc, #340]	; (8002a80 <HAL_GPIO_Init+0x330>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d02b      	beq.n	8002986 <HAL_GPIO_Init+0x236>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a54      	ldr	r2, [pc, #336]	; (8002a84 <HAL_GPIO_Init+0x334>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d025      	beq.n	8002982 <HAL_GPIO_Init+0x232>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a53      	ldr	r2, [pc, #332]	; (8002a88 <HAL_GPIO_Init+0x338>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d01f      	beq.n	800297e <HAL_GPIO_Init+0x22e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a52      	ldr	r2, [pc, #328]	; (8002a8c <HAL_GPIO_Init+0x33c>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d019      	beq.n	800297a <HAL_GPIO_Init+0x22a>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	4a51      	ldr	r2, [pc, #324]	; (8002a90 <HAL_GPIO_Init+0x340>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d013      	beq.n	8002976 <HAL_GPIO_Init+0x226>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	4a50      	ldr	r2, [pc, #320]	; (8002a94 <HAL_GPIO_Init+0x344>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d00d      	beq.n	8002972 <HAL_GPIO_Init+0x222>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	4a4f      	ldr	r2, [pc, #316]	; (8002a98 <HAL_GPIO_Init+0x348>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d007      	beq.n	800296e <HAL_GPIO_Init+0x21e>
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a4e      	ldr	r2, [pc, #312]	; (8002a9c <HAL_GPIO_Init+0x34c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d101      	bne.n	800296a <HAL_GPIO_Init+0x21a>
 8002966:	2309      	movs	r3, #9
 8002968:	e012      	b.n	8002990 <HAL_GPIO_Init+0x240>
 800296a:	230a      	movs	r3, #10
 800296c:	e010      	b.n	8002990 <HAL_GPIO_Init+0x240>
 800296e:	2308      	movs	r3, #8
 8002970:	e00e      	b.n	8002990 <HAL_GPIO_Init+0x240>
 8002972:	2307      	movs	r3, #7
 8002974:	e00c      	b.n	8002990 <HAL_GPIO_Init+0x240>
 8002976:	2306      	movs	r3, #6
 8002978:	e00a      	b.n	8002990 <HAL_GPIO_Init+0x240>
 800297a:	2305      	movs	r3, #5
 800297c:	e008      	b.n	8002990 <HAL_GPIO_Init+0x240>
 800297e:	2304      	movs	r3, #4
 8002980:	e006      	b.n	8002990 <HAL_GPIO_Init+0x240>
 8002982:	2303      	movs	r3, #3
 8002984:	e004      	b.n	8002990 <HAL_GPIO_Init+0x240>
 8002986:	2302      	movs	r3, #2
 8002988:	e002      	b.n	8002990 <HAL_GPIO_Init+0x240>
 800298a:	2301      	movs	r3, #1
 800298c:	e000      	b.n	8002990 <HAL_GPIO_Init+0x240>
 800298e:	2300      	movs	r3, #0
 8002990:	69fa      	ldr	r2, [r7, #28]
 8002992:	f002 0203 	and.w	r2, r2, #3
 8002996:	0092      	lsls	r2, r2, #2
 8002998:	4093      	lsls	r3, r2
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	4313      	orrs	r3, r2
 800299e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80029a0:	4934      	ldr	r1, [pc, #208]	; (8002a74 <HAL_GPIO_Init+0x324>)
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	089b      	lsrs	r3, r3, #2
 80029a6:	3302      	adds	r3, #2
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029ae:	4b3c      	ldr	r3, [pc, #240]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	43db      	mvns	r3, r3
 80029b8:	69ba      	ldr	r2, [r7, #24]
 80029ba:	4013      	ands	r3, r2
 80029bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029d2:	4a33      	ldr	r2, [pc, #204]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80029d8:	4b31      	ldr	r3, [pc, #196]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	43db      	mvns	r3, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80029f4:	69ba      	ldr	r2, [r7, #24]
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029fc:	4a28      	ldr	r2, [pc, #160]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 80029fe:	69bb      	ldr	r3, [r7, #24]
 8002a00:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a02:	4b27      	ldr	r3, [pc, #156]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	43db      	mvns	r3, r3
 8002a0c:	69ba      	ldr	r2, [r7, #24]
 8002a0e:	4013      	ands	r3, r2
 8002a10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a26:	4a1e      	ldr	r2, [pc, #120]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 8002a28:	69bb      	ldr	r3, [r7, #24]
 8002a2a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a2c:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	43db      	mvns	r3, r3
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	4013      	ands	r3, r2
 8002a3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a50:	4a13      	ldr	r2, [pc, #76]	; (8002aa0 <HAL_GPIO_Init+0x350>)
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	61fb      	str	r3, [r7, #28]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	2b0f      	cmp	r3, #15
 8002a60:	f67f ae86 	bls.w	8002770 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002a64:	bf00      	nop
 8002a66:	3724      	adds	r7, #36	; 0x24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	40023800 	.word	0x40023800
 8002a74:	40013800 	.word	0x40013800
 8002a78:	40020000 	.word	0x40020000
 8002a7c:	40020400 	.word	0x40020400
 8002a80:	40020800 	.word	0x40020800
 8002a84:	40020c00 	.word	0x40020c00
 8002a88:	40021000 	.word	0x40021000
 8002a8c:	40021400 	.word	0x40021400
 8002a90:	40021800 	.word	0x40021800
 8002a94:	40021c00 	.word	0x40021c00
 8002a98:	40022000 	.word	0x40022000
 8002a9c:	40022400 	.word	0x40022400
 8002aa0:	40013c00 	.word	0x40013c00

08002aa4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	e0d9      	b.n	8002c74 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ac0:	2201      	movs	r2, #1
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	f040 80c9 	bne.w	8002c6e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8002adc:	4a6a      	ldr	r2, [pc, #424]	; (8002c88 <HAL_GPIO_DeInit+0x1e4>)
 8002ade:	697b      	ldr	r3, [r7, #20]
 8002ae0:	089b      	lsrs	r3, r3, #2
 8002ae2:	3302      	adds	r3, #2
 8002ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ae8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f003 0303 	and.w	r3, r3, #3
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	220f      	movs	r2, #15
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	68ba      	ldr	r2, [r7, #8]
 8002afa:	4013      	ands	r3, r2
 8002afc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4a62      	ldr	r2, [pc, #392]	; (8002c8c <HAL_GPIO_DeInit+0x1e8>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d037      	beq.n	8002b76 <HAL_GPIO_DeInit+0xd2>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a61      	ldr	r2, [pc, #388]	; (8002c90 <HAL_GPIO_DeInit+0x1ec>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d031      	beq.n	8002b72 <HAL_GPIO_DeInit+0xce>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	4a60      	ldr	r2, [pc, #384]	; (8002c94 <HAL_GPIO_DeInit+0x1f0>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d02b      	beq.n	8002b6e <HAL_GPIO_DeInit+0xca>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a5f      	ldr	r2, [pc, #380]	; (8002c98 <HAL_GPIO_DeInit+0x1f4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d025      	beq.n	8002b6a <HAL_GPIO_DeInit+0xc6>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4a5e      	ldr	r2, [pc, #376]	; (8002c9c <HAL_GPIO_DeInit+0x1f8>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d01f      	beq.n	8002b66 <HAL_GPIO_DeInit+0xc2>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a5d      	ldr	r2, [pc, #372]	; (8002ca0 <HAL_GPIO_DeInit+0x1fc>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d019      	beq.n	8002b62 <HAL_GPIO_DeInit+0xbe>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	4a5c      	ldr	r2, [pc, #368]	; (8002ca4 <HAL_GPIO_DeInit+0x200>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d013      	beq.n	8002b5e <HAL_GPIO_DeInit+0xba>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4a5b      	ldr	r2, [pc, #364]	; (8002ca8 <HAL_GPIO_DeInit+0x204>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d00d      	beq.n	8002b5a <HAL_GPIO_DeInit+0xb6>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a5a      	ldr	r2, [pc, #360]	; (8002cac <HAL_GPIO_DeInit+0x208>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d007      	beq.n	8002b56 <HAL_GPIO_DeInit+0xb2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a59      	ldr	r2, [pc, #356]	; (8002cb0 <HAL_GPIO_DeInit+0x20c>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d101      	bne.n	8002b52 <HAL_GPIO_DeInit+0xae>
 8002b4e:	2309      	movs	r3, #9
 8002b50:	e012      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b52:	230a      	movs	r3, #10
 8002b54:	e010      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b56:	2308      	movs	r3, #8
 8002b58:	e00e      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b5a:	2307      	movs	r3, #7
 8002b5c:	e00c      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b5e:	2306      	movs	r3, #6
 8002b60:	e00a      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b62:	2305      	movs	r3, #5
 8002b64:	e008      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b66:	2304      	movs	r3, #4
 8002b68:	e006      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b6a:	2303      	movs	r3, #3
 8002b6c:	e004      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b6e:	2302      	movs	r3, #2
 8002b70:	e002      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b72:	2301      	movs	r3, #1
 8002b74:	e000      	b.n	8002b78 <HAL_GPIO_DeInit+0xd4>
 8002b76:	2300      	movs	r3, #0
 8002b78:	697a      	ldr	r2, [r7, #20]
 8002b7a:	f002 0203 	and.w	r2, r2, #3
 8002b7e:	0092      	lsls	r2, r2, #2
 8002b80:	4093      	lsls	r3, r2
 8002b82:	68ba      	ldr	r2, [r7, #8]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d132      	bne.n	8002bee <HAL_GPIO_DeInit+0x14a>
      {
        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	220f      	movs	r2, #15
 8002b92:	fa02 f303 	lsl.w	r3, r2, r3
 8002b96:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8002b98:	4a3b      	ldr	r2, [pc, #236]	; (8002c88 <HAL_GPIO_DeInit+0x1e4>)
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	089b      	lsrs	r3, r3, #2
 8002b9e:	3302      	adds	r3, #2
 8002ba0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	43da      	mvns	r2, r3
 8002ba8:	4837      	ldr	r0, [pc, #220]	; (8002c88 <HAL_GPIO_DeInit+0x1e4>)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	089b      	lsrs	r3, r3, #2
 8002bae:	400a      	ands	r2, r1
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8002bb6:	4b3f      	ldr	r3, [pc, #252]	; (8002cb4 <HAL_GPIO_DeInit+0x210>)
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	43db      	mvns	r3, r3
 8002bbe:	493d      	ldr	r1, [pc, #244]	; (8002cb4 <HAL_GPIO_DeInit+0x210>)
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002bc4:	4b3b      	ldr	r3, [pc, #236]	; (8002cb4 <HAL_GPIO_DeInit+0x210>)
 8002bc6:	685a      	ldr	r2, [r3, #4]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	43db      	mvns	r3, r3
 8002bcc:	4939      	ldr	r1, [pc, #228]	; (8002cb4 <HAL_GPIO_DeInit+0x210>)
 8002bce:	4013      	ands	r3, r2
 8002bd0:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8002bd2:	4b38      	ldr	r3, [pc, #224]	; (8002cb4 <HAL_GPIO_DeInit+0x210>)
 8002bd4:	689a      	ldr	r2, [r3, #8]
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	4936      	ldr	r1, [pc, #216]	; (8002cb4 <HAL_GPIO_DeInit+0x210>)
 8002bdc:	4013      	ands	r3, r2
 8002bde:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002be0:	4b34      	ldr	r3, [pc, #208]	; (8002cb4 <HAL_GPIO_DeInit+0x210>)
 8002be2:	68da      	ldr	r2, [r3, #12]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	43db      	mvns	r3, r3
 8002be8:	4932      	ldr	r1, [pc, #200]	; (8002cb4 <HAL_GPIO_DeInit+0x210>)
 8002bea:	4013      	ands	r3, r2
 8002bec:	60cb      	str	r3, [r1, #12]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681a      	ldr	r2, [r3, #0]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	005b      	lsls	r3, r3, #1
 8002bf6:	2103      	movs	r1, #3
 8002bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8002bfc:	43db      	mvns	r3, r3
 8002bfe:	401a      	ands	r2, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	08da      	lsrs	r2, r3, #3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	3208      	adds	r2, #8
 8002c0c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	f003 0307 	and.w	r3, r3, #7
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	220f      	movs	r2, #15
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	697a      	ldr	r2, [r7, #20]
 8002c22:	08d2      	lsrs	r2, r2, #3
 8002c24:	4019      	ands	r1, r3
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	3208      	adds	r2, #8
 8002c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689a      	ldr	r2, [r3, #8]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	2103      	movs	r1, #3
 8002c38:	fa01 f303 	lsl.w	r3, r1, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	401a      	ands	r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	2101      	movs	r1, #1
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	fa01 f303 	lsl.w	r3, r1, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	401a      	ands	r2, r3
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	2103      	movs	r1, #3
 8002c62:	fa01 f303 	lsl.w	r3, r1, r3
 8002c66:	43db      	mvns	r3, r3
 8002c68:	401a      	ands	r2, r3
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	60da      	str	r2, [r3, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	3301      	adds	r3, #1
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2b0f      	cmp	r3, #15
 8002c78:	f67f af22 	bls.w	8002ac0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8002c7c:	bf00      	nop
 8002c7e:	371c      	adds	r7, #28
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr
 8002c88:	40013800 	.word	0x40013800
 8002c8c:	40020000 	.word	0x40020000
 8002c90:	40020400 	.word	0x40020400
 8002c94:	40020800 	.word	0x40020800
 8002c98:	40020c00 	.word	0x40020c00
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	40021400 	.word	0x40021400
 8002ca4:	40021800 	.word	0x40021800
 8002ca8:	40021c00 	.word	0x40021c00
 8002cac:	40022000 	.word	0x40022000
 8002cb0:	40022400 	.word	0x40022400
 8002cb4:	40013c00 	.word	0x40013c00

08002cb8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	887b      	ldrh	r3, [r7, #2]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d002      	beq.n	8002cd6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	73fb      	strb	r3, [r7, #15]
 8002cd4:	e001      	b.n	8002cda <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002cda:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3714      	adds	r7, #20
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b083      	sub	sp, #12
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	807b      	strh	r3, [r7, #2]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cf8:	787b      	ldrb	r3, [r7, #1]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cfe:	887a      	ldrh	r2, [r7, #2]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d04:	e003      	b.n	8002d0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d06:	887b      	ldrh	r3, [r7, #2]
 8002d08:	041a      	lsls	r2, r3, #16
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	619a      	str	r2, [r3, #24]
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002d1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d1c:	b08d      	sub	sp, #52	; 0x34
 8002d1e:	af0a      	add	r7, sp, #40	; 0x28
 8002d20:	6078      	str	r0, [r7, #4]
  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d101      	bne.n	8002d2c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e048      	b.n	8002dbe <HAL_HCD_Init+0xa4>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d106      	bne.n	8002d46 <HAL_HCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f016 fdbb 	bl	80198bc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2203      	movs	r2, #3
 8002d4a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4618      	mov	r0, r3
 8002d54:	f008 fc4f 	bl	800b5f6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	603b      	str	r3, [r7, #0]
 8002d5e:	687e      	ldr	r6, [r7, #4]
 8002d60:	466d      	mov	r5, sp
 8002d62:	f106 0410 	add.w	r4, r6, #16
 8002d66:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d68:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d6a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d6e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d72:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d76:	1d33      	adds	r3, r6, #4
 8002d78:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d7a:	6838      	ldr	r0, [r7, #0]
 8002d7c:	f008 fbd2 	bl	800b524 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	2101      	movs	r1, #1
 8002d86:	4618      	mov	r0, r3
 8002d88:	f008 fc46 	bl	800b618 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	603b      	str	r3, [r7, #0]
 8002d92:	687e      	ldr	r6, [r7, #4]
 8002d94:	466d      	mov	r5, sp
 8002d96:	f106 0410 	add.w	r4, r6, #16
 8002d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002da0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002da2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002da6:	e885 0003 	stmia.w	r5, {r0, r1}
 8002daa:	1d33      	adds	r3, r6, #4
 8002dac:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002dae:	6838      	ldr	r0, [r7, #0]
 8002db0:	f008 fd58 	bl	800b864 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2201      	movs	r2, #1
 8002db8:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002dbc:	2300      	movs	r3, #0
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dc6 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002dc6:	b590      	push	{r4, r7, lr}
 8002dc8:	b089      	sub	sp, #36	; 0x24
 8002dca:	af04      	add	r7, sp, #16
 8002dcc:	6078      	str	r0, [r7, #4]
 8002dce:	4608      	mov	r0, r1
 8002dd0:	4611      	mov	r1, r2
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	70fb      	strb	r3, [r7, #3]
 8002dd8:	460b      	mov	r3, r1
 8002dda:	70bb      	strb	r3, [r7, #2]
 8002ddc:	4613      	mov	r3, r2
 8002dde:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002de6:	2b01      	cmp	r3, #1
 8002de8:	d101      	bne.n	8002dee <HAL_HCD_HC_Init+0x28>
 8002dea:	2302      	movs	r3, #2
 8002dec:	e07f      	b.n	8002eee <HAL_HCD_HC_Init+0x128>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2201      	movs	r2, #1
 8002df2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 8002df6:	78fa      	ldrb	r2, [r7, #3]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4413      	add	r3, r2
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	440b      	add	r3, r1
 8002e04:	333d      	adds	r3, #61	; 0x3d
 8002e06:	2200      	movs	r2, #0
 8002e08:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	4413      	add	r3, r2
 8002e14:	00db      	lsls	r3, r3, #3
 8002e16:	440b      	add	r3, r1
 8002e18:	3338      	adds	r3, #56	; 0x38
 8002e1a:	787a      	ldrb	r2, [r7, #1]
 8002e1c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	00db      	lsls	r3, r3, #3
 8002e2a:	440b      	add	r3, r1
 8002e2c:	3340      	adds	r3, #64	; 0x40
 8002e2e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e30:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e32:	78fa      	ldrb	r2, [r7, #3]
 8002e34:	6879      	ldr	r1, [r7, #4]
 8002e36:	4613      	mov	r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	4413      	add	r3, r2
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	440b      	add	r3, r1
 8002e40:	3339      	adds	r3, #57	; 0x39
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002e46:	78fa      	ldrb	r2, [r7, #3]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	4413      	add	r3, r2
 8002e50:	00db      	lsls	r3, r3, #3
 8002e52:	440b      	add	r3, r1
 8002e54:	333f      	adds	r3, #63	; 0x3f
 8002e56:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002e5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002e5c:	78fa      	ldrb	r2, [r7, #3]
 8002e5e:	78bb      	ldrb	r3, [r7, #2]
 8002e60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002e64:	b2d8      	uxtb	r0, r3
 8002e66:	6879      	ldr	r1, [r7, #4]
 8002e68:	4613      	mov	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	00db      	lsls	r3, r3, #3
 8002e70:	440b      	add	r3, r1
 8002e72:	333a      	adds	r3, #58	; 0x3a
 8002e74:	4602      	mov	r2, r0
 8002e76:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002e78:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	da0a      	bge.n	8002e96 <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002e80:	78fa      	ldrb	r2, [r7, #3]
 8002e82:	6879      	ldr	r1, [r7, #4]
 8002e84:	4613      	mov	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	4413      	add	r3, r2
 8002e8a:	00db      	lsls	r3, r3, #3
 8002e8c:	440b      	add	r3, r1
 8002e8e:	333b      	adds	r3, #59	; 0x3b
 8002e90:	2201      	movs	r2, #1
 8002e92:	701a      	strb	r2, [r3, #0]
 8002e94:	e009      	b.n	8002eaa <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002e96:	78fa      	ldrb	r2, [r7, #3]
 8002e98:	6879      	ldr	r1, [r7, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	440b      	add	r3, r1
 8002ea4:	333b      	adds	r3, #59	; 0x3b
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002eaa:	78fa      	ldrb	r2, [r7, #3]
 8002eac:	6879      	ldr	r1, [r7, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	00db      	lsls	r3, r3, #3
 8002eb6:	440b      	add	r3, r1
 8002eb8:	333c      	adds	r3, #60	; 0x3c
 8002eba:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002ebe:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6818      	ldr	r0, [r3, #0]
 8002ec4:	787c      	ldrb	r4, [r7, #1]
 8002ec6:	78ba      	ldrb	r2, [r7, #2]
 8002ec8:	78f9      	ldrb	r1, [r7, #3]
 8002eca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002ecc:	9302      	str	r3, [sp, #8]
 8002ece:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ed2:	9301      	str	r3, [sp, #4]
 8002ed4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ed8:	9300      	str	r3, [sp, #0]
 8002eda:	4623      	mov	r3, r4
 8002edc:	f008 fe38 	bl	800bb50 <USB_HC_Init>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd90      	pop	{r4, r7, pc}

08002ef6 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002ef6:	b580      	push	{r7, lr}
 8002ef8:	b084      	sub	sp, #16
 8002efa:	af00      	add	r7, sp, #0
 8002efc:	6078      	str	r0, [r7, #4]
 8002efe:	460b      	mov	r3, r1
 8002f00:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d101      	bne.n	8002f14 <HAL_HCD_HC_Halt+0x1e>
 8002f10:	2302      	movs	r3, #2
 8002f12:	e00f      	b.n	8002f34 <HAL_HCD_HC_Halt+0x3e>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	2201      	movs	r2, #1
 8002f18:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	78fa      	ldrb	r2, [r7, #3]
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f009 f872 	bl	800c00e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 8002f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3710      	adds	r7, #16
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}

08002f3c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	4608      	mov	r0, r1
 8002f46:	4611      	mov	r1, r2
 8002f48:	461a      	mov	r2, r3
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	70fb      	strb	r3, [r7, #3]
 8002f4e:	460b      	mov	r3, r1
 8002f50:	70bb      	strb	r3, [r7, #2]
 8002f52:	4613      	mov	r3, r2
 8002f54:	707b      	strb	r3, [r7, #1]
  UNUSED(do_ping);

  hhcd->hc[ch_num].ep_is_in = direction;
 8002f56:	78fa      	ldrb	r2, [r7, #3]
 8002f58:	6879      	ldr	r1, [r7, #4]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	009b      	lsls	r3, r3, #2
 8002f5e:	4413      	add	r3, r2
 8002f60:	00db      	lsls	r3, r3, #3
 8002f62:	440b      	add	r3, r1
 8002f64:	333b      	adds	r3, #59	; 0x3b
 8002f66:	78ba      	ldrb	r2, [r7, #2]
 8002f68:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002f6a:	78fa      	ldrb	r2, [r7, #3]
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	4613      	mov	r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	440b      	add	r3, r1
 8002f78:	333f      	adds	r3, #63	; 0x3f
 8002f7a:	787a      	ldrb	r2, [r7, #1]
 8002f7c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002f7e:	7c3b      	ldrb	r3, [r7, #16]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d10a      	bne.n	8002f9a <HAL_HCD_HC_SubmitRequest+0x5e>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002f84:	78fa      	ldrb	r2, [r7, #3]
 8002f86:	6879      	ldr	r1, [r7, #4]
 8002f88:	4613      	mov	r3, r2
 8002f8a:	009b      	lsls	r3, r3, #2
 8002f8c:	4413      	add	r3, r2
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	440b      	add	r3, r1
 8002f92:	3342      	adds	r3, #66	; 0x42
 8002f94:	2203      	movs	r2, #3
 8002f96:	701a      	strb	r2, [r3, #0]
 8002f98:	e009      	b.n	8002fae <HAL_HCD_HC_SubmitRequest+0x72>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f9a:	78fa      	ldrb	r2, [r7, #3]
 8002f9c:	6879      	ldr	r1, [r7, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	440b      	add	r3, r1
 8002fa8:	3342      	adds	r3, #66	; 0x42
 8002faa:	2202      	movs	r2, #2
 8002fac:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002fae:	787b      	ldrb	r3, [r7, #1]
 8002fb0:	2b03      	cmp	r3, #3
 8002fb2:	f200 80d6 	bhi.w	8003162 <HAL_HCD_HC_SubmitRequest+0x226>
 8002fb6:	a201      	add	r2, pc, #4	; (adr r2, 8002fbc <HAL_HCD_HC_SubmitRequest+0x80>)
 8002fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbc:	08002fcd 	.word	0x08002fcd
 8002fc0:	0800314d 	.word	0x0800314d
 8002fc4:	08003039 	.word	0x08003039
 8002fc8:	080030c3 	.word	0x080030c3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002fcc:	7c3b      	ldrb	r3, [r7, #16]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	f040 80c9 	bne.w	8003166 <HAL_HCD_HC_SubmitRequest+0x22a>
 8002fd4:	78bb      	ldrb	r3, [r7, #2]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f040 80c5 	bne.w	8003166 <HAL_HCD_HC_SubmitRequest+0x22a>
      {
        if (length == 0U)
 8002fdc:	8b3b      	ldrh	r3, [r7, #24]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d109      	bne.n	8002ff6 <HAL_HCD_HC_SubmitRequest+0xba>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	4413      	add	r3, r2
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	440b      	add	r3, r1
 8002ff0:	3351      	adds	r3, #81	; 0x51
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ff6:	78fa      	ldrb	r2, [r7, #3]
 8002ff8:	6879      	ldr	r1, [r7, #4]
 8002ffa:	4613      	mov	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	4413      	add	r3, r2
 8003000:	00db      	lsls	r3, r3, #3
 8003002:	440b      	add	r3, r1
 8003004:	3351      	adds	r3, #81	; 0x51
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d10a      	bne.n	8003022 <HAL_HCD_HC_SubmitRequest+0xe6>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800300c:	78fa      	ldrb	r2, [r7, #3]
 800300e:	6879      	ldr	r1, [r7, #4]
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	440b      	add	r3, r1
 800301a:	3342      	adds	r3, #66	; 0x42
 800301c:	2200      	movs	r2, #0
 800301e:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003020:	e0a1      	b.n	8003166 <HAL_HCD_HC_SubmitRequest+0x22a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	4413      	add	r3, r2
 800302c:	00db      	lsls	r3, r3, #3
 800302e:	440b      	add	r3, r1
 8003030:	3342      	adds	r3, #66	; 0x42
 8003032:	2202      	movs	r2, #2
 8003034:	701a      	strb	r2, [r3, #0]
      break;
 8003036:	e096      	b.n	8003166 <HAL_HCD_HC_SubmitRequest+0x22a>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003038:	78bb      	ldrb	r3, [r7, #2]
 800303a:	2b00      	cmp	r3, #0
 800303c:	d120      	bne.n	8003080 <HAL_HCD_HC_SubmitRequest+0x144>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800303e:	78fa      	ldrb	r2, [r7, #3]
 8003040:	6879      	ldr	r1, [r7, #4]
 8003042:	4613      	mov	r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	4413      	add	r3, r2
 8003048:	00db      	lsls	r3, r3, #3
 800304a:	440b      	add	r3, r1
 800304c:	3351      	adds	r3, #81	; 0x51
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10a      	bne.n	800306a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4413      	add	r3, r2
 800305e:	00db      	lsls	r3, r3, #3
 8003060:	440b      	add	r3, r1
 8003062:	3342      	adds	r3, #66	; 0x42
 8003064:	2200      	movs	r2, #0
 8003066:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003068:	e07e      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	6879      	ldr	r1, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	4413      	add	r3, r2
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	440b      	add	r3, r1
 8003078:	3342      	adds	r3, #66	; 0x42
 800307a:	2202      	movs	r2, #2
 800307c:	701a      	strb	r2, [r3, #0]
      break;
 800307e:	e073      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003080:	78fa      	ldrb	r2, [r7, #3]
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	4613      	mov	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	4413      	add	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	440b      	add	r3, r1
 800308e:	3350      	adds	r3, #80	; 0x50
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10a      	bne.n	80030ac <HAL_HCD_HC_SubmitRequest+0x170>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003096:	78fa      	ldrb	r2, [r7, #3]
 8003098:	6879      	ldr	r1, [r7, #4]
 800309a:	4613      	mov	r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	4413      	add	r3, r2
 80030a0:	00db      	lsls	r3, r3, #3
 80030a2:	440b      	add	r3, r1
 80030a4:	3342      	adds	r3, #66	; 0x42
 80030a6:	2200      	movs	r2, #0
 80030a8:	701a      	strb	r2, [r3, #0]
      break;
 80030aa:	e05d      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030ac:	78fa      	ldrb	r2, [r7, #3]
 80030ae:	6879      	ldr	r1, [r7, #4]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	00db      	lsls	r3, r3, #3
 80030b8:	440b      	add	r3, r1
 80030ba:	3342      	adds	r3, #66	; 0x42
 80030bc:	2202      	movs	r2, #2
 80030be:	701a      	strb	r2, [r3, #0]
      break;
 80030c0:	e052      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80030c2:	78bb      	ldrb	r3, [r7, #2]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d120      	bne.n	800310a <HAL_HCD_HC_SubmitRequest+0x1ce>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	4413      	add	r3, r2
 80030d2:	00db      	lsls	r3, r3, #3
 80030d4:	440b      	add	r3, r1
 80030d6:	3351      	adds	r3, #81	; 0x51
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d10a      	bne.n	80030f4 <HAL_HCD_HC_SubmitRequest+0x1b8>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030de:	78fa      	ldrb	r2, [r7, #3]
 80030e0:	6879      	ldr	r1, [r7, #4]
 80030e2:	4613      	mov	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	4413      	add	r3, r2
 80030e8:	00db      	lsls	r3, r3, #3
 80030ea:	440b      	add	r3, r1
 80030ec:	3342      	adds	r3, #66	; 0x42
 80030ee:	2200      	movs	r2, #0
 80030f0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80030f2:	e039      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030f4:	78fa      	ldrb	r2, [r7, #3]
 80030f6:	6879      	ldr	r1, [r7, #4]
 80030f8:	4613      	mov	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4413      	add	r3, r2
 80030fe:	00db      	lsls	r3, r3, #3
 8003100:	440b      	add	r3, r1
 8003102:	3342      	adds	r3, #66	; 0x42
 8003104:	2202      	movs	r2, #2
 8003106:	701a      	strb	r2, [r3, #0]
      break;
 8003108:	e02e      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4413      	add	r3, r2
 8003114:	00db      	lsls	r3, r3, #3
 8003116:	440b      	add	r3, r1
 8003118:	3350      	adds	r3, #80	; 0x50
 800311a:	781b      	ldrb	r3, [r3, #0]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10a      	bne.n	8003136 <HAL_HCD_HC_SubmitRequest+0x1fa>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	6879      	ldr	r1, [r7, #4]
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	00db      	lsls	r3, r3, #3
 800312c:	440b      	add	r3, r1
 800312e:	3342      	adds	r3, #66	; 0x42
 8003130:	2200      	movs	r2, #0
 8003132:	701a      	strb	r2, [r3, #0]
      break;
 8003134:	e018      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003136:	78fa      	ldrb	r2, [r7, #3]
 8003138:	6879      	ldr	r1, [r7, #4]
 800313a:	4613      	mov	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4413      	add	r3, r2
 8003140:	00db      	lsls	r3, r3, #3
 8003142:	440b      	add	r3, r1
 8003144:	3342      	adds	r3, #66	; 0x42
 8003146:	2202      	movs	r2, #2
 8003148:	701a      	strb	r2, [r3, #0]
      break;
 800314a:	e00d      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	440b      	add	r3, r1
 800315a:	3342      	adds	r3, #66	; 0x42
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]
      break;
 8003160:	e002      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>

    default:
      break;
 8003162:	bf00      	nop
 8003164:	e000      	b.n	8003168 <HAL_HCD_HC_SubmitRequest+0x22c>
      break;
 8003166:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	4413      	add	r3, r2
 8003172:	00db      	lsls	r3, r3, #3
 8003174:	440b      	add	r3, r1
 8003176:	3344      	adds	r3, #68	; 0x44
 8003178:	697a      	ldr	r2, [r7, #20]
 800317a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800317c:	78fa      	ldrb	r2, [r7, #3]
 800317e:	8b39      	ldrh	r1, [r7, #24]
 8003180:	6878      	ldr	r0, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	4413      	add	r3, r2
 8003188:	00db      	lsls	r3, r3, #3
 800318a:	4403      	add	r3, r0
 800318c:	3348      	adds	r3, #72	; 0x48
 800318e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003190:	78fa      	ldrb	r2, [r7, #3]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	4613      	mov	r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	4413      	add	r3, r2
 800319a:	00db      	lsls	r3, r3, #3
 800319c:	440b      	add	r3, r1
 800319e:	335c      	adds	r3, #92	; 0x5c
 80031a0:	2200      	movs	r2, #0
 80031a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80031a4:	78fa      	ldrb	r2, [r7, #3]
 80031a6:	6879      	ldr	r1, [r7, #4]
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	440b      	add	r3, r1
 80031b2:	334c      	adds	r3, #76	; 0x4c
 80031b4:	2200      	movs	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	009b      	lsls	r3, r3, #2
 80031c0:	4413      	add	r3, r2
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	440b      	add	r3, r1
 80031c6:	3339      	adds	r3, #57	; 0x39
 80031c8:	78fa      	ldrb	r2, [r7, #3]
 80031ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80031cc:	78fa      	ldrb	r2, [r7, #3]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4413      	add	r3, r2
 80031d6:	00db      	lsls	r3, r3, #3
 80031d8:	440b      	add	r3, r1
 80031da:	335d      	adds	r3, #93	; 0x5d
 80031dc:	2200      	movs	r2, #0
 80031de:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6818      	ldr	r0, [r3, #0]
 80031e4:	78fa      	ldrb	r2, [r7, #3]
 80031e6:	4613      	mov	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4413      	add	r3, r2
 80031ec:	00db      	lsls	r3, r3, #3
 80031ee:	3338      	adds	r3, #56	; 0x38
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	18d1      	adds	r1, r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	461a      	mov	r2, r3
 80031fc:	f008 fdb2 	bl	800bd64 <USB_HC_StartXfer>
 8003200:	4603      	mov	r3, r0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3708      	adds	r7, #8
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop

0800320c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b086      	sub	sp, #24
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f008 fadb 	bl	800b7de <USB_GetMode>
 8003228:	4603      	mov	r3, r0
 800322a:	2b01      	cmp	r3, #1
 800322c:	f040 80f1 	bne.w	8003412 <HAL_HCD_IRQHandler+0x206>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f008 fabf 	bl	800b7b8 <USB_ReadInterrupts>
 800323a:	4603      	mov	r3, r0
 800323c:	2b00      	cmp	r3, #0
 800323e:	f000 80e7 	beq.w	8003410 <HAL_HCD_IRQHandler+0x204>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4618      	mov	r0, r3
 8003248:	f008 fab6 	bl	800b7b8 <USB_ReadInterrupts>
 800324c:	4603      	mov	r3, r0
 800324e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003252:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003256:	d104      	bne.n	8003262 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003260:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4618      	mov	r0, r3
 8003268:	f008 faa6 	bl	800b7b8 <USB_ReadInterrupts>
 800326c:	4603      	mov	r3, r0
 800326e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003276:	d104      	bne.n	8003282 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003280:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4618      	mov	r0, r3
 8003288:	f008 fa96 	bl	800b7b8 <USB_ReadInterrupts>
 800328c:	4603      	mov	r3, r0
 800328e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003292:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003296:	d104      	bne.n	80032a2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80032a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f008 fa86 	bl	800b7b8 <USB_ReadInterrupts>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f003 0302 	and.w	r3, r3, #2
 80032b2:	2b02      	cmp	r3, #2
 80032b4:	d103      	bne.n	80032be <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2202      	movs	r2, #2
 80032bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4618      	mov	r0, r3
 80032c4:	f008 fa78 	bl	800b7b8 <USB_ReadInterrupts>
 80032c8:	4603      	mov	r3, r0
 80032ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032d2:	d117      	bne.n	8003304 <HAL_HCD_IRQHandler+0xf8>
    {

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80032e2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80032e6:	6013      	str	r3, [r2, #0]

      /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->DisconnectCallback(hhcd);
#else
      HAL_HCD_Disconnect_Callback(hhcd);
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f016 fb59 	bl	80199a0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	2101      	movs	r1, #1
 80032f4:	4618      	mov	r0, r3
 80032f6:	f008 fb65 	bl	800b9c4 <USB_InitFSLSPClkSel>
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003302:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f008 fa55 	bl	800b7b8 <USB_ReadInterrupts>
 800330e:	4603      	mov	r3, r0
 8003310:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003314:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003318:	d102      	bne.n	8003320 <HAL_HCD_IRQHandler+0x114>
    {
      HCD_Port_IRQHandler(hhcd);
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	f001 f8c8 	bl	80044b0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f008 fa47 	bl	800b7b8 <USB_ReadInterrupts>
 800332a:	4603      	mov	r3, r0
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	2b08      	cmp	r3, #8
 8003332:	d106      	bne.n	8003342 <HAL_HCD_IRQHandler+0x136>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f016 fb17 	bl	8019968 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2208      	movs	r2, #8
 8003340:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f008 fa36 	bl	800b7b8 <USB_ReadInterrupts>
 800334c:	4603      	mov	r3, r0
 800334e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003352:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003356:	d138      	bne.n	80033ca <HAL_HCD_IRQHandler+0x1be>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f008 fe45 	bl	800bfec <USB_HC_ReadInterrupt>
 8003362:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	e025      	b.n	80033b6 <HAL_HCD_IRQHandler+0x1aa>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	fa22 f303 	lsr.w	r3, r2, r3
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d018      	beq.n	80033b0 <HAL_HCD_IRQHandler+0x1a4>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	015a      	lsls	r2, r3, #5
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	4413      	add	r3, r2
 8003386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003390:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003394:	d106      	bne.n	80033a4 <HAL_HCD_IRQHandler+0x198>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	4619      	mov	r1, r3
 800339c:	6878      	ldr	r0, [r7, #4]
 800339e:	f000 f8cf 	bl	8003540 <HCD_HC_IN_IRQHandler>
 80033a2:	e005      	b.n	80033b0 <HAL_HCD_IRQHandler+0x1a4>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	4619      	mov	r1, r3
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 fc5f 	bl	8003c6e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	3301      	adds	r3, #1
 80033b4:	617b      	str	r3, [r7, #20]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	697a      	ldr	r2, [r7, #20]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d3d4      	bcc.n	800336a <HAL_HCD_IRQHandler+0x15e>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f008 f9f2 	bl	800b7b8 <USB_ReadInterrupts>
 80033d4:	4603      	mov	r3, r0
 80033d6:	f003 0310 	and.w	r3, r3, #16
 80033da:	2b10      	cmp	r3, #16
 80033dc:	d101      	bne.n	80033e2 <HAL_HCD_IRQHandler+0x1d6>
 80033de:	2301      	movs	r3, #1
 80033e0:	e000      	b.n	80033e4 <HAL_HCD_IRQHandler+0x1d8>
 80033e2:	2300      	movs	r3, #0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d014      	beq.n	8003412 <HAL_HCD_IRQHandler+0x206>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0210 	bic.w	r2, r2, #16
 80033f6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80033f8:	6878      	ldr	r0, [r7, #4]
 80033fa:	f000 ffad 	bl	8004358 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	699a      	ldr	r2, [r3, #24]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f042 0210 	orr.w	r2, r2, #16
 800340c:	619a      	str	r2, [r3, #24]
 800340e:	e000      	b.n	8003412 <HAL_HCD_IRQHandler+0x206>
      return;
 8003410:	bf00      	nop
    }
  }
}
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}

08003418 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b082      	sub	sp, #8
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8003426:	2b01      	cmp	r3, #1
 8003428:	d101      	bne.n	800342e <HAL_HCD_Start+0x16>
 800342a:	2302      	movs	r3, #2
 800342c:	e013      	b.n	8003456 <HAL_HCD_Start+0x3e>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f008 f8ca 	bl	800b5d4 <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	2101      	movs	r1, #1
 8003446:	4618      	mov	r0, r3
 8003448:	f008 fb20 	bl	800ba8c <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3708      	adds	r7, #8
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800345e:	b580      	push	{r7, lr}
 8003460:	b082      	sub	sp, #8
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800346c:	2b01      	cmp	r3, #1
 800346e:	d101      	bne.n	8003474 <HAL_HCD_Stop+0x16>
 8003470:	2302      	movs	r3, #2
 8003472:	e00d      	b.n	8003490 <HAL_HCD_Stop+0x32>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2201      	movs	r2, #1
 8003478:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4618      	mov	r0, r3
 8003482:	f008 feff 	bl	800c284 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2200      	movs	r2, #0
 800348a:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  return HAL_OK;
 800348e:	2300      	movs	r3, #0
}
 8003490:	4618      	mov	r0, r3
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4618      	mov	r0, r3
 80034a6:	f008 fac7 	bl	800ba38 <USB_ResetPort>
 80034aa:	4603      	mov	r3, r0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3708      	adds	r7, #8
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034b4:	b480      	push	{r7}
 80034b6:	b083      	sub	sp, #12
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80034c0:	78fa      	ldrb	r2, [r7, #3]
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	4613      	mov	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	4413      	add	r3, r2
 80034ca:	00db      	lsls	r3, r3, #3
 80034cc:	440b      	add	r3, r1
 80034ce:	335c      	adds	r3, #92	; 0x5c
 80034d0:	781b      	ldrb	r3, [r3, #0]
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	370c      	adds	r7, #12
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr

080034de <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034de:	b480      	push	{r7}
 80034e0:	b083      	sub	sp, #12
 80034e2:	af00      	add	r7, sp, #0
 80034e4:	6078      	str	r0, [r7, #4]
 80034e6:	460b      	mov	r3, r1
 80034e8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80034ea:	78fa      	ldrb	r2, [r7, #3]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	4413      	add	r3, r2
 80034f4:	00db      	lsls	r3, r3, #3
 80034f6:	440b      	add	r3, r1
 80034f8:	334c      	adds	r3, #76	; 0x4c
 80034fa:	681b      	ldr	r3, [r3, #0]
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f008 fb09 	bl	800bb2c <USB_GetCurrentFrame>
 800351a:	4603      	mov	r3, r0
}
 800351c:	4618      	mov	r0, r3
 800351e:	3708      	adds	r7, #8
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4618      	mov	r0, r3
 8003532:	f008 fae4 	bl	800bafe <USB_GetHostSpeed>
 8003536:	4603      	mov	r3, r0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3708      	adds	r7, #8
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	460b      	mov	r3, r1
 800354a:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003556:	78fb      	ldrb	r3, [r7, #3]
 8003558:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	015a      	lsls	r2, r3, #5
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	4413      	add	r3, r2
 8003562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003566:	689b      	ldr	r3, [r3, #8]
 8003568:	f003 0304 	and.w	r3, r3, #4
 800356c:	2b04      	cmp	r3, #4
 800356e:	d119      	bne.n	80035a4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	015a      	lsls	r2, r3, #5
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	4413      	add	r3, r2
 8003578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800357c:	461a      	mov	r2, r3
 800357e:	2304      	movs	r3, #4
 8003580:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	015a      	lsls	r2, r3, #5
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4413      	add	r3, r2
 800358a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800358e:	68db      	ldr	r3, [r3, #12]
 8003590:	68fa      	ldr	r2, [r7, #12]
 8003592:	0151      	lsls	r1, r2, #5
 8003594:	693a      	ldr	r2, [r7, #16]
 8003596:	440a      	add	r2, r1
 8003598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800359c:	f043 0302 	orr.w	r3, r3, #2
 80035a0:	60d3      	str	r3, [r2, #12]
 80035a2:	e095      	b.n	80036d0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	015a      	lsls	r2, r3, #5
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	4413      	add	r3, r2
 80035ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	2b20      	cmp	r3, #32
 80035b8:	d109      	bne.n	80035ce <HCD_HC_IN_IRQHandler+0x8e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	015a      	lsls	r2, r3, #5
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	4413      	add	r3, r2
 80035c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035c6:	461a      	mov	r2, r3
 80035c8:	2320      	movs	r3, #32
 80035ca:	6093      	str	r3, [r2, #8]
 80035cc:	e080      	b.n	80036d0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	015a      	lsls	r2, r3, #5
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	4413      	add	r3, r2
 80035d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 0308 	and.w	r3, r3, #8
 80035e0:	2b08      	cmp	r3, #8
 80035e2:	d134      	bne.n	800364e <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	015a      	lsls	r2, r3, #5
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	4413      	add	r3, r2
 80035ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	0151      	lsls	r1, r2, #5
 80035f6:	693a      	ldr	r2, [r7, #16]
 80035f8:	440a      	add	r2, r1
 80035fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80035fe:	f043 0302 	orr.w	r3, r3, #2
 8003602:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	68fa      	ldr	r2, [r7, #12]
 8003608:	4613      	mov	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	4413      	add	r3, r2
 800360e:	00db      	lsls	r3, r3, #3
 8003610:	440b      	add	r3, r1
 8003612:	335d      	adds	r3, #93	; 0x5d
 8003614:	2205      	movs	r2, #5
 8003616:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	015a      	lsls	r2, r3, #5
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	4413      	add	r3, r2
 8003620:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003624:	461a      	mov	r2, r3
 8003626:	2310      	movs	r3, #16
 8003628:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	015a      	lsls	r2, r3, #5
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4413      	add	r3, r2
 8003632:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003636:	461a      	mov	r2, r3
 8003638:	2308      	movs	r3, #8
 800363a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	68fa      	ldr	r2, [r7, #12]
 8003642:	b2d2      	uxtb	r2, r2
 8003644:	4611      	mov	r1, r2
 8003646:	4618      	mov	r0, r3
 8003648:	f008 fce1 	bl	800c00e <USB_HC_Halt>
 800364c:	e040      	b.n	80036d0 <HCD_HC_IN_IRQHandler+0x190>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	4413      	add	r3, r2
 8003656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003664:	d134      	bne.n	80036d0 <HCD_HC_IN_IRQHandler+0x190>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	693b      	ldr	r3, [r7, #16]
 800366c:	4413      	add	r3, r2
 800366e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	68fa      	ldr	r2, [r7, #12]
 8003676:	0151      	lsls	r1, r2, #5
 8003678:	693a      	ldr	r2, [r7, #16]
 800367a:	440a      	add	r2, r1
 800367c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003680:	f043 0302 	orr.w	r3, r3, #2
 8003684:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68fa      	ldr	r2, [r7, #12]
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	4611      	mov	r1, r2
 8003690:	4618      	mov	r0, r3
 8003692:	f008 fcbc 	bl	800c00e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	015a      	lsls	r2, r3, #5
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4413      	add	r3, r2
 800369e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a2:	461a      	mov	r2, r3
 80036a4:	2310      	movs	r3, #16
 80036a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80036a8:	6879      	ldr	r1, [r7, #4]
 80036aa:	68fa      	ldr	r2, [r7, #12]
 80036ac:	4613      	mov	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	4413      	add	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	440b      	add	r3, r1
 80036b6:	335d      	adds	r3, #93	; 0x5d
 80036b8:	2208      	movs	r2, #8
 80036ba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	015a      	lsls	r2, r3, #5
 80036c0:	693b      	ldr	r3, [r7, #16]
 80036c2:	4413      	add	r3, r2
 80036c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036c8:	461a      	mov	r2, r3
 80036ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036ce:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036e6:	d122      	bne.n	800372e <HCD_HC_IN_IRQHandler+0x1ee>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	015a      	lsls	r2, r3, #5
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4413      	add	r3, r2
 80036f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	0151      	lsls	r1, r2, #5
 80036fa:	693a      	ldr	r2, [r7, #16]
 80036fc:	440a      	add	r2, r1
 80036fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003702:	f043 0302 	orr.w	r3, r3, #2
 8003706:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	b2d2      	uxtb	r2, r2
 8003710:	4611      	mov	r1, r2
 8003712:	4618      	mov	r0, r3
 8003714:	f008 fc7b 	bl	800c00e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	015a      	lsls	r2, r3, #5
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	4413      	add	r3, r2
 8003720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003724:	461a      	mov	r2, r3
 8003726:	f44f 7300 	mov.w	r3, #512	; 0x200
 800372a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800372c:	e29b      	b.n	8003c66 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	015a      	lsls	r2, r3, #5
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	4413      	add	r3, r2
 8003736:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f003 0301 	and.w	r3, r3, #1
 8003740:	2b01      	cmp	r3, #1
 8003742:	f040 80c1 	bne.w	80038c8 <HCD_HC_IN_IRQHandler+0x388>
    if (hhcd->Init.dma_enable != 0U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d01b      	beq.n	8003786 <HCD_HC_IN_IRQHandler+0x246>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	4613      	mov	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	00db      	lsls	r3, r3, #3
 800375a:	440b      	add	r3, r1
 800375c:	3348      	adds	r3, #72	; 0x48
 800375e:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	0159      	lsls	r1, r3, #5
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	440b      	add	r3, r1
 8003768:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8003772:	1ad1      	subs	r1, r2, r3
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	68fa      	ldr	r2, [r7, #12]
 8003778:	4613      	mov	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	4403      	add	r3, r0
 8003782:	334c      	adds	r3, #76	; 0x4c
 8003784:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	68fa      	ldr	r2, [r7, #12]
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	440b      	add	r3, r1
 8003794:	335d      	adds	r3, #93	; 0x5d
 8003796:	2201      	movs	r2, #1
 8003798:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800379a:	6879      	ldr	r1, [r7, #4]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	440b      	add	r3, r1
 80037a8:	3358      	adds	r3, #88	; 0x58
 80037aa:	2200      	movs	r2, #0
 80037ac:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ba:	461a      	mov	r2, r3
 80037bc:	2301      	movs	r3, #1
 80037be:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	68fa      	ldr	r2, [r7, #12]
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	440b      	add	r3, r1
 80037ce:	333f      	adds	r3, #63	; 0x3f
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00a      	beq.n	80037ec <HCD_HC_IN_IRQHandler+0x2ac>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80037d6:	6879      	ldr	r1, [r7, #4]
 80037d8:	68fa      	ldr	r2, [r7, #12]
 80037da:	4613      	mov	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4413      	add	r3, r2
 80037e0:	00db      	lsls	r3, r3, #3
 80037e2:	440b      	add	r3, r1
 80037e4:	333f      	adds	r3, #63	; 0x3f
 80037e6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d121      	bne.n	8003830 <HCD_HC_IN_IRQHandler+0x2f0>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	015a      	lsls	r2, r3, #5
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4413      	add	r3, r2
 80037f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	68fa      	ldr	r2, [r7, #12]
 80037fc:	0151      	lsls	r1, r2, #5
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	440a      	add	r2, r1
 8003802:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003806:	f043 0302 	orr.w	r3, r3, #2
 800380a:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	b2d2      	uxtb	r2, r2
 8003814:	4611      	mov	r1, r2
 8003816:	4618      	mov	r0, r3
 8003818:	f008 fbf9 	bl	800c00e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	4413      	add	r3, r2
 8003824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003828:	461a      	mov	r2, r3
 800382a:	2310      	movs	r3, #16
 800382c:	6093      	str	r3, [r2, #8]
 800382e:	e034      	b.n	800389a <HCD_HC_IN_IRQHandler+0x35a>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003830:	6879      	ldr	r1, [r7, #4]
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	440b      	add	r3, r1
 800383e:	333f      	adds	r3, #63	; 0x3f
 8003840:	781b      	ldrb	r3, [r3, #0]
 8003842:	2b03      	cmp	r3, #3
 8003844:	d129      	bne.n	800389a <HCD_HC_IN_IRQHandler+0x35a>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	015a      	lsls	r2, r3, #5
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	4413      	add	r3, r2
 800384e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	0151      	lsls	r1, r2, #5
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	440a      	add	r2, r1
 800385c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003860:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003864:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	4613      	mov	r3, r2
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	4413      	add	r3, r2
 8003870:	00db      	lsls	r3, r3, #3
 8003872:	440b      	add	r3, r1
 8003874:	335c      	adds	r3, #92	; 0x5c
 8003876:	2201      	movs	r2, #1
 8003878:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	b2d8      	uxtb	r0, r3
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	68fa      	ldr	r2, [r7, #12]
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	00db      	lsls	r3, r3, #3
 800388a:	440b      	add	r3, r1
 800388c:	335c      	adds	r3, #92	; 0x5c
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	461a      	mov	r2, r3
 8003892:	4601      	mov	r1, r0
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f016 f891 	bl	80199bc <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800389a:	6879      	ldr	r1, [r7, #4]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4613      	mov	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	4413      	add	r3, r2
 80038a4:	00db      	lsls	r3, r3, #3
 80038a6:	440b      	add	r3, r1
 80038a8:	3350      	adds	r3, #80	; 0x50
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	f083 0301 	eor.w	r3, r3, #1
 80038b0:	b2d8      	uxtb	r0, r3
 80038b2:	6879      	ldr	r1, [r7, #4]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	00db      	lsls	r3, r3, #3
 80038be:	440b      	add	r3, r1
 80038c0:	3350      	adds	r3, #80	; 0x50
 80038c2:	4602      	mov	r2, r0
 80038c4:	701a      	strb	r2, [r3, #0]
}
 80038c6:	e1ce      	b.n	8003c66 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	015a      	lsls	r2, r3, #5
 80038cc:	693b      	ldr	r3, [r7, #16]
 80038ce:	4413      	add	r3, r2
 80038d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b02      	cmp	r3, #2
 80038dc:	f040 80f1 	bne.w	8003ac2 <HCD_HC_IN_IRQHandler+0x582>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ec:	68db      	ldr	r3, [r3, #12]
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	0151      	lsls	r1, r2, #5
 80038f2:	693a      	ldr	r2, [r7, #16]
 80038f4:	440a      	add	r2, r1
 80038f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80038fa:	f023 0302 	bic.w	r3, r3, #2
 80038fe:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	4613      	mov	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	00db      	lsls	r3, r3, #3
 800390c:	440b      	add	r3, r1
 800390e:	335d      	adds	r3, #93	; 0x5d
 8003910:	781b      	ldrb	r3, [r3, #0]
 8003912:	2b01      	cmp	r3, #1
 8003914:	d10a      	bne.n	800392c <HCD_HC_IN_IRQHandler+0x3ec>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	00db      	lsls	r3, r3, #3
 8003922:	440b      	add	r3, r1
 8003924:	335c      	adds	r3, #92	; 0x5c
 8003926:	2201      	movs	r2, #1
 8003928:	701a      	strb	r2, [r3, #0]
 800392a:	e0b0      	b.n	8003a8e <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800392c:	6879      	ldr	r1, [r7, #4]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4613      	mov	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	00db      	lsls	r3, r3, #3
 8003938:	440b      	add	r3, r1
 800393a:	335d      	adds	r3, #93	; 0x5d
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b05      	cmp	r3, #5
 8003940:	d10a      	bne.n	8003958 <HCD_HC_IN_IRQHandler+0x418>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003942:	6879      	ldr	r1, [r7, #4]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	4613      	mov	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4413      	add	r3, r2
 800394c:	00db      	lsls	r3, r3, #3
 800394e:	440b      	add	r3, r1
 8003950:	335c      	adds	r3, #92	; 0x5c
 8003952:	2205      	movs	r2, #5
 8003954:	701a      	strb	r2, [r3, #0]
 8003956:	e09a      	b.n	8003a8e <HCD_HC_IN_IRQHandler+0x54e>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	68fa      	ldr	r2, [r7, #12]
 800395c:	4613      	mov	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	4413      	add	r3, r2
 8003962:	00db      	lsls	r3, r3, #3
 8003964:	440b      	add	r3, r1
 8003966:	335d      	adds	r3, #93	; 0x5d
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b06      	cmp	r3, #6
 800396c:	d00a      	beq.n	8003984 <HCD_HC_IN_IRQHandler+0x444>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800396e:	6879      	ldr	r1, [r7, #4]
 8003970:	68fa      	ldr	r2, [r7, #12]
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	00db      	lsls	r3, r3, #3
 800397a:	440b      	add	r3, r1
 800397c:	335d      	adds	r3, #93	; 0x5d
 800397e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003980:	2b08      	cmp	r3, #8
 8003982:	d156      	bne.n	8003a32 <HCD_HC_IN_IRQHandler+0x4f2>
      hhcd->hc[ch_num].ErrCnt++;
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	68fa      	ldr	r2, [r7, #12]
 8003988:	4613      	mov	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	4413      	add	r3, r2
 800398e:	00db      	lsls	r3, r3, #3
 8003990:	440b      	add	r3, r1
 8003992:	3358      	adds	r3, #88	; 0x58
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	1c59      	adds	r1, r3, #1
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	68fa      	ldr	r2, [r7, #12]
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	4403      	add	r3, r0
 80039a6:	3358      	adds	r3, #88	; 0x58
 80039a8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 80039aa:	6879      	ldr	r1, [r7, #4]
 80039ac:	68fa      	ldr	r2, [r7, #12]
 80039ae:	4613      	mov	r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	4413      	add	r3, r2
 80039b4:	00db      	lsls	r3, r3, #3
 80039b6:	440b      	add	r3, r1
 80039b8:	3358      	adds	r3, #88	; 0x58
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d914      	bls.n	80039ea <HCD_HC_IN_IRQHandler+0x4aa>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4613      	mov	r3, r2
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	4413      	add	r3, r2
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	440b      	add	r3, r1
 80039ce:	3358      	adds	r3, #88	; 0x58
 80039d0:	2200      	movs	r2, #0
 80039d2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	4613      	mov	r3, r2
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	4413      	add	r3, r2
 80039de:	00db      	lsls	r3, r3, #3
 80039e0:	440b      	add	r3, r1
 80039e2:	335c      	adds	r3, #92	; 0x5c
 80039e4:	2204      	movs	r2, #4
 80039e6:	701a      	strb	r2, [r3, #0]
 80039e8:	e009      	b.n	80039fe <HCD_HC_IN_IRQHandler+0x4be>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039ea:	6879      	ldr	r1, [r7, #4]
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	4613      	mov	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	4413      	add	r3, r2
 80039f4:	00db      	lsls	r3, r3, #3
 80039f6:	440b      	add	r3, r1
 80039f8:	335c      	adds	r3, #92	; 0x5c
 80039fa:	2202      	movs	r2, #2
 80039fc:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	015a      	lsls	r2, r3, #5
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	4413      	add	r3, r2
 8003a06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a14:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a1c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	015a      	lsls	r2, r3, #5
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4413      	add	r3, r2
 8003a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2a:	461a      	mov	r2, r3
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	e02d      	b.n	8003a8e <HCD_HC_IN_IRQHandler+0x54e>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	4613      	mov	r3, r2
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	4413      	add	r3, r2
 8003a3c:	00db      	lsls	r3, r3, #3
 8003a3e:	440b      	add	r3, r1
 8003a40:	335d      	adds	r3, #93	; 0x5d
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b03      	cmp	r3, #3
 8003a46:	d122      	bne.n	8003a8e <HCD_HC_IN_IRQHandler+0x54e>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4413      	add	r3, r2
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	440b      	add	r3, r1
 8003a56:	335c      	adds	r3, #92	; 0x5c
 8003a58:	2202      	movs	r2, #2
 8003a5a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	015a      	lsls	r2, r3, #5
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	4413      	add	r3, r2
 8003a64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a72:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a7a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a88:	461a      	mov	r2, r3
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	015a      	lsls	r2, r3, #5
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	4413      	add	r3, r2
 8003a96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a9a:	461a      	mov	r2, r3
 8003a9c:	2302      	movs	r3, #2
 8003a9e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	b2d8      	uxtb	r0, r3
 8003aa4:	6879      	ldr	r1, [r7, #4]
 8003aa6:	68fa      	ldr	r2, [r7, #12]
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	4413      	add	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	440b      	add	r3, r1
 8003ab2:	335c      	adds	r3, #92	; 0x5c
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	4601      	mov	r1, r0
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f015 ff7e 	bl	80199bc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003ac0:	e0d1      	b.n	8003c66 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	015a      	lsls	r2, r3, #5
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	4413      	add	r3, r2
 8003aca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad4:	2b80      	cmp	r3, #128	; 0x80
 8003ad6:	d13e      	bne.n	8003b56 <HCD_HC_IN_IRQHandler+0x616>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	015a      	lsls	r2, r3, #5
 8003adc:	693b      	ldr	r3, [r7, #16]
 8003ade:	4413      	add	r3, r2
 8003ae0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	0151      	lsls	r1, r2, #5
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	440a      	add	r2, r1
 8003aee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003af2:	f043 0302 	orr.w	r3, r3, #2
 8003af6:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 8003af8:	6879      	ldr	r1, [r7, #4]
 8003afa:	68fa      	ldr	r2, [r7, #12]
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	00db      	lsls	r3, r3, #3
 8003b04:	440b      	add	r3, r1
 8003b06:	3358      	adds	r3, #88	; 0x58
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	1c59      	adds	r1, r3, #1
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	4613      	mov	r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	4413      	add	r3, r2
 8003b16:	00db      	lsls	r3, r3, #3
 8003b18:	4403      	add	r3, r0
 8003b1a:	3358      	adds	r3, #88	; 0x58
 8003b1c:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	68fa      	ldr	r2, [r7, #12]
 8003b22:	4613      	mov	r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	4413      	add	r3, r2
 8003b28:	00db      	lsls	r3, r3, #3
 8003b2a:	440b      	add	r3, r1
 8003b2c:	335d      	adds	r3, #93	; 0x5d
 8003b2e:	2206      	movs	r2, #6
 8003b30:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	b2d2      	uxtb	r2, r2
 8003b3a:	4611      	mov	r1, r2
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f008 fa66 	bl	800c00e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	015a      	lsls	r2, r3, #5
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	4413      	add	r3, r2
 8003b4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b4e:	461a      	mov	r2, r3
 8003b50:	2380      	movs	r3, #128	; 0x80
 8003b52:	6093      	str	r3, [r2, #8]
}
 8003b54:	e087      	b.n	8003c66 <HCD_HC_IN_IRQHandler+0x726>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	693b      	ldr	r3, [r7, #16]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f003 0310 	and.w	r3, r3, #16
 8003b68:	2b10      	cmp	r3, #16
 8003b6a:	d17c      	bne.n	8003c66 <HCD_HC_IN_IRQHandler+0x726>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	4613      	mov	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4413      	add	r3, r2
 8003b76:	00db      	lsls	r3, r3, #3
 8003b78:	440b      	add	r3, r1
 8003b7a:	333f      	adds	r3, #63	; 0x3f
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b03      	cmp	r3, #3
 8003b80:	d122      	bne.n	8003bc8 <HCD_HC_IN_IRQHandler+0x688>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003b82:	6879      	ldr	r1, [r7, #4]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	4613      	mov	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	4413      	add	r3, r2
 8003b8c:	00db      	lsls	r3, r3, #3
 8003b8e:	440b      	add	r3, r1
 8003b90:	3358      	adds	r3, #88	; 0x58
 8003b92:	2200      	movs	r2, #0
 8003b94:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	015a      	lsls	r2, r3, #5
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	4413      	add	r3, r2
 8003b9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	0151      	lsls	r1, r2, #5
 8003ba8:	693a      	ldr	r2, [r7, #16]
 8003baa:	440a      	add	r2, r1
 8003bac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bb0:	f043 0302 	orr.w	r3, r3, #2
 8003bb4:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	b2d2      	uxtb	r2, r2
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f008 fa24 	bl	800c00e <USB_HC_Halt>
 8003bc6:	e045      	b.n	8003c54 <HCD_HC_IN_IRQHandler+0x714>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4613      	mov	r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	4413      	add	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	440b      	add	r3, r1
 8003bd6:	333f      	adds	r3, #63	; 0x3f
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HCD_HC_IN_IRQHandler+0x6b4>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003bde:	6879      	ldr	r1, [r7, #4]
 8003be0:	68fa      	ldr	r2, [r7, #12]
 8003be2:	4613      	mov	r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	4413      	add	r3, r2
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	440b      	add	r3, r1
 8003bec:	333f      	adds	r3, #63	; 0x3f
 8003bee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d12f      	bne.n	8003c54 <HCD_HC_IN_IRQHandler+0x714>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003bf4:	6879      	ldr	r1, [r7, #4]
 8003bf6:	68fa      	ldr	r2, [r7, #12]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	440b      	add	r3, r1
 8003c02:	3358      	adds	r3, #88	; 0x58
 8003c04:	2200      	movs	r2, #0
 8003c06:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	691b      	ldr	r3, [r3, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d121      	bne.n	8003c54 <HCD_HC_IN_IRQHandler+0x714>
        hhcd->hc[ch_num].state = HC_NAK;
 8003c10:	6879      	ldr	r1, [r7, #4]
 8003c12:	68fa      	ldr	r2, [r7, #12]
 8003c14:	4613      	mov	r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	4413      	add	r3, r2
 8003c1a:	00db      	lsls	r3, r3, #3
 8003c1c:	440b      	add	r3, r1
 8003c1e:	335d      	adds	r3, #93	; 0x5d
 8003c20:	2203      	movs	r2, #3
 8003c22:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	015a      	lsls	r2, r3, #5
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	0151      	lsls	r1, r2, #5
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	440a      	add	r2, r1
 8003c3a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c3e:	f043 0302 	orr.w	r3, r3, #2
 8003c42:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	b2d2      	uxtb	r2, r2
 8003c4c:	4611      	mov	r1, r2
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f008 f9dd 	bl	800c00e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	015a      	lsls	r2, r3, #5
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	4413      	add	r3, r2
 8003c5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c60:	461a      	mov	r2, r3
 8003c62:	2310      	movs	r3, #16
 8003c64:	6093      	str	r3, [r2, #8]
}
 8003c66:	bf00      	nop
 8003c68:	3718      	adds	r7, #24
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}

08003c6e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003c6e:	b580      	push	{r7, lr}
 8003c70:	b086      	sub	sp, #24
 8003c72:	af00      	add	r7, sp, #0
 8003c74:	6078      	str	r0, [r7, #4]
 8003c76:	460b      	mov	r3, r1
 8003c78:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003c84:	78fb      	ldrb	r3, [r7, #3]
 8003c86:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	015a      	lsls	r2, r3, #5
 8003c8c:	693b      	ldr	r3, [r7, #16]
 8003c8e:	4413      	add	r3, r2
 8003c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d119      	bne.n	8003cd2 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	015a      	lsls	r2, r3, #5
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003caa:	461a      	mov	r2, r3
 8003cac:	2304      	movs	r3, #4
 8003cae:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	015a      	lsls	r2, r3, #5
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	4413      	add	r3, r2
 8003cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	0151      	lsls	r1, r2, #5
 8003cc2:	693a      	ldr	r2, [r7, #16]
 8003cc4:	440a      	add	r2, r1
 8003cc6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003cca:	f043 0302 	orr.w	r3, r3, #2
 8003cce:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 8003cd0:	e33e      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f003 0320 	and.w	r3, r3, #32
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d141      	bne.n	8003d6c <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	015a      	lsls	r2, r3, #5
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	4413      	add	r3, r2
 8003cf0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	2320      	movs	r3, #32
 8003cf8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4613      	mov	r3, r2
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	4413      	add	r3, r2
 8003d04:	00db      	lsls	r3, r3, #3
 8003d06:	440b      	add	r3, r1
 8003d08:	333d      	adds	r3, #61	; 0x3d
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	f040 831f 	bne.w	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8003d12:	6879      	ldr	r1, [r7, #4]
 8003d14:	68fa      	ldr	r2, [r7, #12]
 8003d16:	4613      	mov	r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4413      	add	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	440b      	add	r3, r1
 8003d20:	333d      	adds	r3, #61	; 0x3d
 8003d22:	2200      	movs	r2, #0
 8003d24:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	4613      	mov	r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	4413      	add	r3, r2
 8003d30:	00db      	lsls	r3, r3, #3
 8003d32:	440b      	add	r3, r1
 8003d34:	335c      	adds	r3, #92	; 0x5c
 8003d36:	2202      	movs	r2, #2
 8003d38:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	0151      	lsls	r1, r2, #5
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	440a      	add	r2, r1
 8003d50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d54:	f043 0302 	orr.w	r3, r3, #2
 8003d58:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68fa      	ldr	r2, [r7, #12]
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	4611      	mov	r1, r2
 8003d64:	4618      	mov	r0, r3
 8003d66:	f008 f952 	bl	800c00e <USB_HC_Halt>
}
 8003d6a:	e2f1      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d7e:	2b40      	cmp	r3, #64	; 0x40
 8003d80:	d13f      	bne.n	8003e02 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	4613      	mov	r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	4413      	add	r3, r2
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	440b      	add	r3, r1
 8003d90:	335d      	adds	r3, #93	; 0x5d
 8003d92:	2204      	movs	r2, #4
 8003d94:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	4413      	add	r3, r2
 8003da0:	00db      	lsls	r3, r3, #3
 8003da2:	440b      	add	r3, r1
 8003da4:	333d      	adds	r3, #61	; 0x3d
 8003da6:	2201      	movs	r2, #1
 8003da8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003daa:	6879      	ldr	r1, [r7, #4]
 8003dac:	68fa      	ldr	r2, [r7, #12]
 8003dae:	4613      	mov	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	440b      	add	r3, r1
 8003db8:	3358      	adds	r3, #88	; 0x58
 8003dba:	2200      	movs	r2, #0
 8003dbc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	015a      	lsls	r2, r3, #5
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	0151      	lsls	r1, r2, #5
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	440a      	add	r2, r1
 8003dd4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003dd8:	f043 0302 	orr.w	r3, r3, #2
 8003ddc:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	b2d2      	uxtb	r2, r2
 8003de6:	4611      	mov	r1, r2
 8003de8:	4618      	mov	r0, r3
 8003dea:	f008 f910 	bl	800c00e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	015a      	lsls	r2, r3, #5
 8003df2:	693b      	ldr	r3, [r7, #16]
 8003df4:	4413      	add	r3, r2
 8003df6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dfa:	461a      	mov	r2, r3
 8003dfc:	2340      	movs	r3, #64	; 0x40
 8003dfe:	6093      	str	r3, [r2, #8]
}
 8003e00:	e2a6      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	015a      	lsls	r2, r3, #5
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	4413      	add	r3, r2
 8003e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e18:	d122      	bne.n	8003e60 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	015a      	lsls	r2, r3, #5
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	4413      	add	r3, r2
 8003e22:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	0151      	lsls	r1, r2, #5
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	440a      	add	r2, r1
 8003e30:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003e34:	f043 0302 	orr.w	r3, r3, #2
 8003e38:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	4611      	mov	r1, r2
 8003e44:	4618      	mov	r0, r3
 8003e46:	f008 f8e2 	bl	800c00e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e56:	461a      	mov	r2, r3
 8003e58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e5c:	6093      	str	r3, [r2, #8]
}
 8003e5e:	e277      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	015a      	lsls	r2, r3, #5
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	4413      	add	r3, r2
 8003e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 0301 	and.w	r3, r3, #1
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d135      	bne.n	8003ee2 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e76:	6879      	ldr	r1, [r7, #4]
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	00db      	lsls	r3, r3, #3
 8003e82:	440b      	add	r3, r1
 8003e84:	3358      	adds	r3, #88	; 0x58
 8003e86:	2200      	movs	r2, #0
 8003e88:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e96:	68db      	ldr	r3, [r3, #12]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	0151      	lsls	r1, r2, #5
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	440a      	add	r2, r1
 8003ea0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003ea4:	f043 0302 	orr.w	r3, r3, #2
 8003ea8:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	68fa      	ldr	r2, [r7, #12]
 8003eb0:	b2d2      	uxtb	r2, r2
 8003eb2:	4611      	mov	r1, r2
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f008 f8aa 	bl	800c00e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	2301      	movs	r3, #1
 8003eca:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003ecc:	6879      	ldr	r1, [r7, #4]
 8003ece:	68fa      	ldr	r2, [r7, #12]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	00db      	lsls	r3, r3, #3
 8003ed8:	440b      	add	r3, r1
 8003eda:	335d      	adds	r3, #93	; 0x5d
 8003edc:	2201      	movs	r2, #1
 8003ede:	701a      	strb	r2, [r3, #0]
}
 8003ee0:	e236      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	015a      	lsls	r2, r3, #5
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	4413      	add	r3, r2
 8003eea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 0308 	and.w	r3, r3, #8
 8003ef4:	2b08      	cmp	r3, #8
 8003ef6:	d12b      	bne.n	8003f50 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f04:	461a      	mov	r2, r3
 8003f06:	2308      	movs	r3, #8
 8003f08:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	015a      	lsls	r2, r3, #5
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	4413      	add	r3, r2
 8003f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	0151      	lsls	r1, r2, #5
 8003f1c:	693a      	ldr	r2, [r7, #16]
 8003f1e:	440a      	add	r2, r1
 8003f20:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003f24:	f043 0302 	orr.w	r3, r3, #2
 8003f28:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	4611      	mov	r1, r2
 8003f34:	4618      	mov	r0, r3
 8003f36:	f008 f86a 	bl	800c00e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	68fa      	ldr	r2, [r7, #12]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4413      	add	r3, r2
 8003f44:	00db      	lsls	r3, r3, #3
 8003f46:	440b      	add	r3, r1
 8003f48:	335d      	adds	r3, #93	; 0x5d
 8003f4a:	2205      	movs	r2, #5
 8003f4c:	701a      	strb	r2, [r3, #0]
}
 8003f4e:	e1ff      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f003 0310 	and.w	r3, r3, #16
 8003f62:	2b10      	cmp	r3, #16
 8003f64:	d155      	bne.n	8004012 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003f66:	6879      	ldr	r1, [r7, #4]
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4613      	mov	r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	4413      	add	r3, r2
 8003f70:	00db      	lsls	r3, r3, #3
 8003f72:	440b      	add	r3, r1
 8003f74:	3358      	adds	r3, #88	; 0x58
 8003f76:	2200      	movs	r2, #0
 8003f78:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003f7a:	6879      	ldr	r1, [r7, #4]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	4613      	mov	r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	4413      	add	r3, r2
 8003f84:	00db      	lsls	r3, r3, #3
 8003f86:	440b      	add	r3, r1
 8003f88:	335d      	adds	r3, #93	; 0x5d
 8003f8a:	2203      	movs	r2, #3
 8003f8c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	4613      	mov	r3, r2
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	4413      	add	r3, r2
 8003f98:	00db      	lsls	r3, r3, #3
 8003f9a:	440b      	add	r3, r1
 8003f9c:	333d      	adds	r3, #61	; 0x3d
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d114      	bne.n	8003fce <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	68fa      	ldr	r2, [r7, #12]
 8003fa8:	4613      	mov	r3, r2
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	4413      	add	r3, r2
 8003fae:	00db      	lsls	r3, r3, #3
 8003fb0:	440b      	add	r3, r1
 8003fb2:	333c      	adds	r3, #60	; 0x3c
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d109      	bne.n	8003fce <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 8003fba:	6879      	ldr	r1, [r7, #4]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	4413      	add	r3, r2
 8003fc4:	00db      	lsls	r3, r3, #3
 8003fc6:	440b      	add	r3, r1
 8003fc8:	333d      	adds	r3, #61	; 0x3d
 8003fca:	2201      	movs	r2, #1
 8003fcc:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	015a      	lsls	r2, r3, #5
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	4413      	add	r3, r2
 8003fd6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fda:	68db      	ldr	r3, [r3, #12]
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	0151      	lsls	r1, r2, #5
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	440a      	add	r2, r1
 8003fe4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003fe8:	f043 0302 	orr.w	r3, r3, #2
 8003fec:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68fa      	ldr	r2, [r7, #12]
 8003ff4:	b2d2      	uxtb	r2, r2
 8003ff6:	4611      	mov	r1, r2
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	f008 f808 	bl	800c00e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	015a      	lsls	r2, r3, #5
 8004002:	693b      	ldr	r3, [r7, #16]
 8004004:	4413      	add	r3, r2
 8004006:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800400a:	461a      	mov	r2, r3
 800400c:	2310      	movs	r3, #16
 800400e:	6093      	str	r3, [r2, #8]
}
 8004010:	e19e      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	015a      	lsls	r2, r3, #5
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	4413      	add	r3, r2
 800401a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004024:	2b80      	cmp	r3, #128	; 0x80
 8004026:	d12b      	bne.n	8004080 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4413      	add	r3, r2
 8004030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	0151      	lsls	r1, r2, #5
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	440a      	add	r2, r1
 800403e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004042:	f043 0302 	orr.w	r3, r3, #2
 8004046:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	4611      	mov	r1, r2
 8004052:	4618      	mov	r0, r3
 8004054:	f007 ffdb 	bl	800c00e <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004058:	6879      	ldr	r1, [r7, #4]
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	4613      	mov	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	440b      	add	r3, r1
 8004066:	335d      	adds	r3, #93	; 0x5d
 8004068:	2206      	movs	r2, #6
 800406a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	4413      	add	r3, r2
 8004074:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004078:	461a      	mov	r2, r3
 800407a:	2380      	movs	r3, #128	; 0x80
 800407c:	6093      	str	r3, [r2, #8]
}
 800407e:	e167      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	4413      	add	r3, r2
 8004088:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004096:	d135      	bne.n	8004104 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	015a      	lsls	r2, r3, #5
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	4413      	add	r3, r2
 80040a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a4:	68db      	ldr	r3, [r3, #12]
 80040a6:	68fa      	ldr	r2, [r7, #12]
 80040a8:	0151      	lsls	r1, r2, #5
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	440a      	add	r2, r1
 80040ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040b2:	f043 0302 	orr.w	r3, r3, #2
 80040b6:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	b2d2      	uxtb	r2, r2
 80040c0:	4611      	mov	r1, r2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f007 ffa3 	bl	800c00e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	015a      	lsls	r2, r3, #5
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	4413      	add	r3, r2
 80040d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d4:	461a      	mov	r2, r3
 80040d6:	2310      	movs	r3, #16
 80040d8:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	015a      	lsls	r2, r3, #5
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	4413      	add	r3, r2
 80040e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e6:	461a      	mov	r2, r3
 80040e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	4613      	mov	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	440b      	add	r3, r1
 80040fc:	335d      	adds	r3, #93	; 0x5d
 80040fe:	2208      	movs	r2, #8
 8004100:	701a      	strb	r2, [r3, #0]
}
 8004102:	e125      	b.n	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	015a      	lsls	r2, r3, #5
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	4413      	add	r3, r2
 800410c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f003 0302 	and.w	r3, r3, #2
 8004116:	2b02      	cmp	r3, #2
 8004118:	f040 811a 	bne.w	8004350 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	4413      	add	r3, r2
 8004124:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	0151      	lsls	r1, r2, #5
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	440a      	add	r2, r1
 8004132:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004136:	f023 0302 	bic.w	r3, r3, #2
 800413a:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	68fa      	ldr	r2, [r7, #12]
 8004140:	4613      	mov	r3, r2
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	4413      	add	r3, r2
 8004146:	00db      	lsls	r3, r3, #3
 8004148:	440b      	add	r3, r1
 800414a:	335d      	adds	r3, #93	; 0x5d
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	2b01      	cmp	r3, #1
 8004150:	d137      	bne.n	80041c2 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004152:	6879      	ldr	r1, [r7, #4]
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4613      	mov	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	4413      	add	r3, r2
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	440b      	add	r3, r1
 8004160:	335c      	adds	r3, #92	; 0x5c
 8004162:	2201      	movs	r2, #1
 8004164:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004166:	6879      	ldr	r1, [r7, #4]
 8004168:	68fa      	ldr	r2, [r7, #12]
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	00db      	lsls	r3, r3, #3
 8004172:	440b      	add	r3, r1
 8004174:	333f      	adds	r3, #63	; 0x3f
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b02      	cmp	r3, #2
 800417a:	d00b      	beq.n	8004194 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800417c:	6879      	ldr	r1, [r7, #4]
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	4613      	mov	r3, r2
 8004182:	009b      	lsls	r3, r3, #2
 8004184:	4413      	add	r3, r2
 8004186:	00db      	lsls	r3, r3, #3
 8004188:	440b      	add	r3, r1
 800418a:	333f      	adds	r3, #63	; 0x3f
 800418c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800418e:	2b03      	cmp	r3, #3
 8004190:	f040 80c5 	bne.w	800431e <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8004194:	6879      	ldr	r1, [r7, #4]
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	4613      	mov	r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	4413      	add	r3, r2
 800419e:	00db      	lsls	r3, r3, #3
 80041a0:	440b      	add	r3, r1
 80041a2:	3351      	adds	r3, #81	; 0x51
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	f083 0301 	eor.w	r3, r3, #1
 80041aa:	b2d8      	uxtb	r0, r3
 80041ac:	6879      	ldr	r1, [r7, #4]
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	4613      	mov	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	00db      	lsls	r3, r3, #3
 80041b8:	440b      	add	r3, r1
 80041ba:	3351      	adds	r3, #81	; 0x51
 80041bc:	4602      	mov	r2, r0
 80041be:	701a      	strb	r2, [r3, #0]
 80041c0:	e0ad      	b.n	800431e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80041c2:	6879      	ldr	r1, [r7, #4]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	4613      	mov	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	4413      	add	r3, r2
 80041cc:	00db      	lsls	r3, r3, #3
 80041ce:	440b      	add	r3, r1
 80041d0:	335d      	adds	r3, #93	; 0x5d
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b03      	cmp	r3, #3
 80041d6:	d10a      	bne.n	80041ee <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80041d8:	6879      	ldr	r1, [r7, #4]
 80041da:	68fa      	ldr	r2, [r7, #12]
 80041dc:	4613      	mov	r3, r2
 80041de:	009b      	lsls	r3, r3, #2
 80041e0:	4413      	add	r3, r2
 80041e2:	00db      	lsls	r3, r3, #3
 80041e4:	440b      	add	r3, r1
 80041e6:	335c      	adds	r3, #92	; 0x5c
 80041e8:	2202      	movs	r2, #2
 80041ea:	701a      	strb	r2, [r3, #0]
 80041ec:	e097      	b.n	800431e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80041ee:	6879      	ldr	r1, [r7, #4]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	4613      	mov	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	00db      	lsls	r3, r3, #3
 80041fa:	440b      	add	r3, r1
 80041fc:	335d      	adds	r3, #93	; 0x5d
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b04      	cmp	r3, #4
 8004202:	d10a      	bne.n	800421a <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004204:	6879      	ldr	r1, [r7, #4]
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	4613      	mov	r3, r2
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	4413      	add	r3, r2
 800420e:	00db      	lsls	r3, r3, #3
 8004210:	440b      	add	r3, r1
 8004212:	335c      	adds	r3, #92	; 0x5c
 8004214:	2202      	movs	r2, #2
 8004216:	701a      	strb	r2, [r3, #0]
 8004218:	e081      	b.n	800431e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	68fa      	ldr	r2, [r7, #12]
 800421e:	4613      	mov	r3, r2
 8004220:	009b      	lsls	r3, r3, #2
 8004222:	4413      	add	r3, r2
 8004224:	00db      	lsls	r3, r3, #3
 8004226:	440b      	add	r3, r1
 8004228:	335d      	adds	r3, #93	; 0x5d
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	2b05      	cmp	r3, #5
 800422e:	d10a      	bne.n	8004246 <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004230:	6879      	ldr	r1, [r7, #4]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	4613      	mov	r3, r2
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	440b      	add	r3, r1
 800423e:	335c      	adds	r3, #92	; 0x5c
 8004240:	2205      	movs	r2, #5
 8004242:	701a      	strb	r2, [r3, #0]
 8004244:	e06b      	b.n	800431e <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	4613      	mov	r3, r2
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4413      	add	r3, r2
 8004250:	00db      	lsls	r3, r3, #3
 8004252:	440b      	add	r3, r1
 8004254:	335d      	adds	r3, #93	; 0x5d
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2b06      	cmp	r3, #6
 800425a:	d00a      	beq.n	8004272 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 800425c:	6879      	ldr	r1, [r7, #4]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	4613      	mov	r3, r2
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	4413      	add	r3, r2
 8004266:	00db      	lsls	r3, r3, #3
 8004268:	440b      	add	r3, r1
 800426a:	335d      	adds	r3, #93	; 0x5d
 800426c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800426e:	2b08      	cmp	r3, #8
 8004270:	d155      	bne.n	800431e <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4613      	mov	r3, r2
 8004278:	009b      	lsls	r3, r3, #2
 800427a:	4413      	add	r3, r2
 800427c:	00db      	lsls	r3, r3, #3
 800427e:	440b      	add	r3, r1
 8004280:	3358      	adds	r3, #88	; 0x58
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	1c59      	adds	r1, r3, #1
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	4613      	mov	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4413      	add	r3, r2
 8004290:	00db      	lsls	r3, r3, #3
 8004292:	4403      	add	r3, r0
 8004294:	3358      	adds	r3, #88	; 0x58
 8004296:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8004298:	6879      	ldr	r1, [r7, #4]
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4613      	mov	r3, r2
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	4413      	add	r3, r2
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	440b      	add	r3, r1
 80042a6:	3358      	adds	r3, #88	; 0x58
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	2b03      	cmp	r3, #3
 80042ac:	d914      	bls.n	80042d8 <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4613      	mov	r3, r2
 80042b4:	009b      	lsls	r3, r3, #2
 80042b6:	4413      	add	r3, r2
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	440b      	add	r3, r1
 80042bc:	3358      	adds	r3, #88	; 0x58
 80042be:	2200      	movs	r2, #0
 80042c0:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80042c2:	6879      	ldr	r1, [r7, #4]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4613      	mov	r3, r2
 80042c8:	009b      	lsls	r3, r3, #2
 80042ca:	4413      	add	r3, r2
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	440b      	add	r3, r1
 80042d0:	335c      	adds	r3, #92	; 0x5c
 80042d2:	2204      	movs	r2, #4
 80042d4:	701a      	strb	r2, [r3, #0]
 80042d6:	e009      	b.n	80042ec <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80042d8:	6879      	ldr	r1, [r7, #4]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4613      	mov	r3, r2
 80042de:	009b      	lsls	r3, r3, #2
 80042e0:	4413      	add	r3, r2
 80042e2:	00db      	lsls	r3, r3, #3
 80042e4:	440b      	add	r3, r1
 80042e6:	335c      	adds	r3, #92	; 0x5c
 80042e8:	2202      	movs	r2, #2
 80042ea:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	015a      	lsls	r2, r3, #5
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	4413      	add	r3, r2
 80042f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004302:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800430a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	015a      	lsls	r2, r3, #5
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	4413      	add	r3, r2
 8004314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004318:	461a      	mov	r2, r3
 800431a:	68bb      	ldr	r3, [r7, #8]
 800431c:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	015a      	lsls	r2, r3, #5
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	4413      	add	r3, r2
 8004326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800432a:	461a      	mov	r2, r3
 800432c:	2302      	movs	r3, #2
 800432e:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	b2d8      	uxtb	r0, r3
 8004334:	6879      	ldr	r1, [r7, #4]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	4613      	mov	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	4413      	add	r3, r2
 800433e:	00db      	lsls	r3, r3, #3
 8004340:	440b      	add	r3, r1
 8004342:	335c      	adds	r3, #92	; 0x5c
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	461a      	mov	r2, r3
 8004348:	4601      	mov	r1, r0
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f015 fb36 	bl	80199bc <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004350:	bf00      	nop
 8004352:	3718      	adds	r7, #24
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}

08004358 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b08a      	sub	sp, #40	; 0x28
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6a1b      	ldr	r3, [r3, #32]
 8004370:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	f003 030f 	and.w	r3, r3, #15
 8004378:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	0c5b      	lsrs	r3, r3, #17
 800437e:	f003 030f 	and.w	r3, r3, #15
 8004382:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	091b      	lsrs	r3, r3, #4
 8004388:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800438c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	2b02      	cmp	r3, #2
 8004392:	d003      	beq.n	800439c <HCD_RXQLVL_IRQHandler+0x44>
 8004394:	2b05      	cmp	r3, #5
 8004396:	f000 8082 	beq.w	800449e <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800439a:	e083      	b.n	80044a4 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d07f      	beq.n	80044a2 <HCD_RXQLVL_IRQHandler+0x14a>
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	4613      	mov	r3, r2
 80043a8:	009b      	lsls	r3, r3, #2
 80043aa:	4413      	add	r3, r2
 80043ac:	00db      	lsls	r3, r3, #3
 80043ae:	440b      	add	r3, r1
 80043b0:	3344      	adds	r3, #68	; 0x44
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d074      	beq.n	80044a2 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6818      	ldr	r0, [r3, #0]
 80043bc:	6879      	ldr	r1, [r7, #4]
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4613      	mov	r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4413      	add	r3, r2
 80043c6:	00db      	lsls	r3, r3, #3
 80043c8:	440b      	add	r3, r1
 80043ca:	3344      	adds	r3, #68	; 0x44
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	b292      	uxth	r2, r2
 80043d2:	4619      	mov	r1, r3
 80043d4:	f007 f9c7 	bl	800b766 <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	69ba      	ldr	r2, [r7, #24]
 80043dc:	4613      	mov	r3, r2
 80043de:	009b      	lsls	r3, r3, #2
 80043e0:	4413      	add	r3, r2
 80043e2:	00db      	lsls	r3, r3, #3
 80043e4:	440b      	add	r3, r1
 80043e6:	3344      	adds	r3, #68	; 0x44
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	18d1      	adds	r1, r2, r3
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	69ba      	ldr	r2, [r7, #24]
 80043f2:	4613      	mov	r3, r2
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4413      	add	r3, r2
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	4403      	add	r3, r0
 80043fc:	3344      	adds	r3, #68	; 0x44
 80043fe:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8004400:	6879      	ldr	r1, [r7, #4]
 8004402:	69ba      	ldr	r2, [r7, #24]
 8004404:	4613      	mov	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4413      	add	r3, r2
 800440a:	00db      	lsls	r3, r3, #3
 800440c:	440b      	add	r3, r1
 800440e:	334c      	adds	r3, #76	; 0x4c
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	18d1      	adds	r1, r2, r3
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	4613      	mov	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	4413      	add	r3, r2
 8004420:	00db      	lsls	r3, r3, #3
 8004422:	4403      	add	r3, r0
 8004424:	334c      	adds	r3, #76	; 0x4c
 8004426:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	4413      	add	r3, r2
 8004430:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004434:	691a      	ldr	r2, [r3, #16]
 8004436:	4b1d      	ldr	r3, [pc, #116]	; (80044ac <HCD_RXQLVL_IRQHandler+0x154>)
 8004438:	4013      	ands	r3, r2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d031      	beq.n	80044a2 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	015a      	lsls	r2, r3, #5
 8004442:	6a3b      	ldr	r3, [r7, #32]
 8004444:	4413      	add	r3, r2
 8004446:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004454:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800445c:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	015a      	lsls	r2, r3, #5
 8004462:	6a3b      	ldr	r3, [r7, #32]
 8004464:	4413      	add	r3, r2
 8004466:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800446a:	461a      	mov	r2, r3
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	4613      	mov	r3, r2
 8004476:	009b      	lsls	r3, r3, #2
 8004478:	4413      	add	r3, r2
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	440b      	add	r3, r1
 800447e:	3350      	adds	r3, #80	; 0x50
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	f083 0301 	eor.w	r3, r3, #1
 8004486:	b2d8      	uxtb	r0, r3
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	4613      	mov	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	440b      	add	r3, r1
 8004496:	3350      	adds	r3, #80	; 0x50
 8004498:	4602      	mov	r2, r0
 800449a:	701a      	strb	r2, [r3, #0]
      break;
 800449c:	e001      	b.n	80044a2 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 800449e:	bf00      	nop
 80044a0:	e000      	b.n	80044a4 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 80044a2:	bf00      	nop
  }
}
 80044a4:	bf00      	nop
 80044a6:	3728      	adds	r7, #40	; 0x28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}
 80044ac:	1ff80000 	.word	0x1ff80000

080044b0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b086      	sub	sp, #24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80044dc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b02      	cmp	r3, #2
 80044e6:	d113      	bne.n	8004510 <HCD_Port_IRQHandler+0x60>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d10a      	bne.n	8004508 <HCD_Port_IRQHandler+0x58>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	699a      	ldr	r2, [r3, #24]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8004500:	619a      	str	r2, [r3, #24]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f015 fa3e 	bl	8019984 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	f043 0302 	orr.w	r3, r3, #2
 800450e:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b08      	cmp	r3, #8
 8004518:	d147      	bne.n	80045aa <HCD_Port_IRQHandler+0xfa>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	f043 0308 	orr.w	r3, r3, #8
 8004520:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f003 0304 	and.w	r3, r3, #4
 8004528:	2b04      	cmp	r3, #4
 800452a:	d129      	bne.n	8004580 <HCD_Port_IRQHandler+0xd0>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	2b02      	cmp	r3, #2
 8004532:	d113      	bne.n	800455c <HCD_Port_IRQHandler+0xac>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800453a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800453e:	d106      	bne.n	800454e <HCD_Port_IRQHandler+0x9e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	2102      	movs	r1, #2
 8004546:	4618      	mov	r0, r3
 8004548:	f007 fa3c 	bl	800b9c4 <USB_InitFSLSPClkSel>
 800454c:	e011      	b.n	8004572 <HCD_Port_IRQHandler+0xc2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2101      	movs	r1, #1
 8004554:	4618      	mov	r0, r3
 8004556:	f007 fa35 	bl	800b9c4 <USB_InitFSLSPClkSel>
 800455a:	e00a      	b.n	8004572 <HCD_Port_IRQHandler+0xc2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	68db      	ldr	r3, [r3, #12]
 8004560:	2b03      	cmp	r3, #3
 8004562:	d106      	bne.n	8004572 <HCD_Port_IRQHandler+0xc2>
        {
          USBx_HOST->HFIR = 60000U;
 8004564:	693b      	ldr	r3, [r7, #16]
 8004566:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800456a:	461a      	mov	r2, r3
 800456c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004570:	6053      	str	r3, [r2, #4]
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f015 fa34 	bl	80199e0 <HAL_HCD_PortEnabled_Callback>
      HAL_HCD_Connect_Callback(hhcd);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f015 fa03 	bl	8019984 <HAL_HCD_Connect_Callback>
 800457e:	e014      	b.n	80045aa <HCD_Port_IRQHandler+0xfa>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f015 fa3b 	bl	80199fc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      /* Cleanup HPRT */
      USBx_HPRT0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	693a      	ldr	r2, [r7, #16]
 8004590:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8004594:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004598:	6013      	str	r3, [r2, #0]
                      USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_DISCINT);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	699a      	ldr	r2, [r3, #24]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80045a8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f003 0320 	and.w	r3, r3, #32
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	d103      	bne.n	80045bc <HCD_Port_IRQHandler+0x10c>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f043 0320 	orr.w	r3, r3, #32
 80045ba:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80045c2:	461a      	mov	r2, r3
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	6013      	str	r3, [r2, #0]
}
 80045c8:	bf00      	nop
 80045ca:	3718      	adds	r7, #24
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bd80      	pop	{r7, pc}

080045d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b082      	sub	sp, #8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e07f      	b.n	80046e2 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d106      	bne.n	80045fc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f014 fb00 	bl	8018bfc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2224      	movs	r2, #36	; 0x24
 8004600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f022 0201 	bic.w	r2, r2, #1
 8004612:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004620:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689a      	ldr	r2, [r3, #8]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004630:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68db      	ldr	r3, [r3, #12]
 8004636:	2b01      	cmp	r3, #1
 8004638:	d107      	bne.n	800464a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	689a      	ldr	r2, [r3, #8]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004646:	609a      	str	r2, [r3, #8]
 8004648:	e006      	b.n	8004658 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	689a      	ldr	r2, [r3, #8]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8004656:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	2b02      	cmp	r3, #2
 800465e:	d104      	bne.n	800466a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004668:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	6859      	ldr	r1, [r3, #4]
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	4b1d      	ldr	r3, [pc, #116]	; (80046ec <HAL_I2C_Init+0x11c>)
 8004676:	430b      	orrs	r3, r1
 8004678:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	68da      	ldr	r2, [r3, #12]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004688:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691a      	ldr	r2, [r3, #16]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	ea42 0103 	orr.w	r1, r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	021a      	lsls	r2, r3, #8
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	430a      	orrs	r2, r1
 80046a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	69d9      	ldr	r1, [r3, #28]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6a1a      	ldr	r2, [r3, #32]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	430a      	orrs	r2, r1
 80046b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f042 0201 	orr.w	r2, r2, #1
 80046c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2200      	movs	r2, #0
 80046c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2220      	movs	r2, #32
 80046ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2200      	movs	r2, #0
 80046d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	02008000 	.word	0x02008000

080046f0 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d101      	bne.n	8004702 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80046fe:	2301      	movs	r3, #1
 8004700:	e021      	b.n	8004746 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2224      	movs	r2, #36	; 0x24
 8004706:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0201 	bic.w	r2, r2, #1
 8004718:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f014 fae6 	bl	8018cec <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3708      	adds	r7, #8
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
	...

08004750 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b088      	sub	sp, #32
 8004754:	af02      	add	r7, sp, #8
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	4608      	mov	r0, r1
 800475a:	4611      	mov	r1, r2
 800475c:	461a      	mov	r2, r3
 800475e:	4603      	mov	r3, r0
 8004760:	817b      	strh	r3, [r7, #10]
 8004762:	460b      	mov	r3, r1
 8004764:	813b      	strh	r3, [r7, #8]
 8004766:	4613      	mov	r3, r2
 8004768:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004770:	b2db      	uxtb	r3, r3
 8004772:	2b20      	cmp	r3, #32
 8004774:	f040 80f9 	bne.w	800496a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <HAL_I2C_Mem_Write+0x34>
 800477e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004780:	2b00      	cmp	r3, #0
 8004782:	d105      	bne.n	8004790 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f44f 7200 	mov.w	r2, #512	; 0x200
 800478a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e0ed      	b.n	800496c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004796:	2b01      	cmp	r3, #1
 8004798:	d101      	bne.n	800479e <HAL_I2C_Mem_Write+0x4e>
 800479a:	2302      	movs	r3, #2
 800479c:	e0e6      	b.n	800496c <HAL_I2C_Mem_Write+0x21c>
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80047a6:	f7fc f9c7 	bl	8000b38 <HAL_GetTick>
 80047aa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	2319      	movs	r3, #25
 80047b2:	2201      	movs	r2, #1
 80047b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 fad1 	bl	8004d60 <I2C_WaitOnFlagUntilTimeout>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d001      	beq.n	80047c8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80047c4:	2301      	movs	r3, #1
 80047c6:	e0d1      	b.n	800496c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2221      	movs	r2, #33	; 0x21
 80047cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	2240      	movs	r2, #64	; 0x40
 80047d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	2200      	movs	r2, #0
 80047dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6a3a      	ldr	r2, [r7, #32]
 80047e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80047e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80047f0:	88f8      	ldrh	r0, [r7, #6]
 80047f2:	893a      	ldrh	r2, [r7, #8]
 80047f4:	8979      	ldrh	r1, [r7, #10]
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	9301      	str	r3, [sp, #4]
 80047fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	4603      	mov	r3, r0
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f000 f9e1 	bl	8004bc8 <I2C_RequestMemoryWrite>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d005      	beq.n	8004818 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	2200      	movs	r2, #0
 8004810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	e0a9      	b.n	800496c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800481c:	b29b      	uxth	r3, r3
 800481e:	2bff      	cmp	r3, #255	; 0xff
 8004820:	d90e      	bls.n	8004840 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	22ff      	movs	r2, #255	; 0xff
 8004826:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800482c:	b2da      	uxtb	r2, r3
 800482e:	8979      	ldrh	r1, [r7, #10]
 8004830:	2300      	movs	r3, #0
 8004832:	9300      	str	r3, [sp, #0]
 8004834:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004838:	68f8      	ldr	r0, [r7, #12]
 800483a:	f000 fbb3 	bl	8004fa4 <I2C_TransferConfig>
 800483e:	e00f      	b.n	8004860 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004844:	b29a      	uxth	r2, r3
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800484e:	b2da      	uxtb	r2, r3
 8004850:	8979      	ldrh	r1, [r7, #10]
 8004852:	2300      	movs	r3, #0
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f000 fba2 	bl	8004fa4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004860:	697a      	ldr	r2, [r7, #20]
 8004862:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004864:	68f8      	ldr	r0, [r7, #12]
 8004866:	f000 fabb 	bl	8004de0 <I2C_WaitOnTXISFlagUntilTimeout>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d001      	beq.n	8004874 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8004870:	2301      	movs	r3, #1
 8004872:	e07b      	b.n	800496c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004878:	781a      	ldrb	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800488e:	b29b      	uxth	r3, r3
 8004890:	3b01      	subs	r3, #1
 8004892:	b29a      	uxth	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800489c:	3b01      	subs	r3, #1
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048a8:	b29b      	uxth	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d034      	beq.n	8004918 <HAL_I2C_Mem_Write+0x1c8>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d130      	bne.n	8004918 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048bc:	2200      	movs	r2, #0
 80048be:	2180      	movs	r1, #128	; 0x80
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 fa4d 	bl	8004d60 <I2C_WaitOnFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e04d      	b.n	800496c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	2bff      	cmp	r3, #255	; 0xff
 80048d8:	d90e      	bls.n	80048f8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	22ff      	movs	r2, #255	; 0xff
 80048de:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80048e4:	b2da      	uxtb	r2, r3
 80048e6:	8979      	ldrh	r1, [r7, #10]
 80048e8:	2300      	movs	r3, #0
 80048ea:	9300      	str	r3, [sp, #0]
 80048ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80048f0:	68f8      	ldr	r0, [r7, #12]
 80048f2:	f000 fb57 	bl	8004fa4 <I2C_TransferConfig>
 80048f6:	e00f      	b.n	8004918 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048fc:	b29a      	uxth	r2, r3
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004906:	b2da      	uxtb	r2, r3
 8004908:	8979      	ldrh	r1, [r7, #10]
 800490a:	2300      	movs	r3, #0
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004912:	68f8      	ldr	r0, [r7, #12]
 8004914:	f000 fb46 	bl	8004fa4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491c:	b29b      	uxth	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d19e      	bne.n	8004860 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004926:	68f8      	ldr	r0, [r7, #12]
 8004928:	f000 fa9a 	bl	8004e60 <I2C_WaitOnSTOPFlagUntilTimeout>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e01a      	b.n	800496c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	2220      	movs	r2, #32
 800493c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	6859      	ldr	r1, [r3, #4]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	4b0a      	ldr	r3, [pc, #40]	; (8004974 <HAL_I2C_Mem_Write+0x224>)
 800494a:	400b      	ands	r3, r1
 800494c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	2220      	movs	r2, #32
 8004952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2200      	movs	r2, #0
 800495a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2200      	movs	r2, #0
 8004962:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004966:	2300      	movs	r3, #0
 8004968:	e000      	b.n	800496c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800496a:	2302      	movs	r3, #2
  }
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}
 8004974:	fe00e800 	.word	0xfe00e800

08004978 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af02      	add	r7, sp, #8
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	4608      	mov	r0, r1
 8004982:	4611      	mov	r1, r2
 8004984:	461a      	mov	r2, r3
 8004986:	4603      	mov	r3, r0
 8004988:	817b      	strh	r3, [r7, #10]
 800498a:	460b      	mov	r3, r1
 800498c:	813b      	strh	r3, [r7, #8]
 800498e:	4613      	mov	r3, r2
 8004990:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004998:	b2db      	uxtb	r3, r3
 800499a:	2b20      	cmp	r3, #32
 800499c:	f040 80fd 	bne.w	8004b9a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80049a0:	6a3b      	ldr	r3, [r7, #32]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d002      	beq.n	80049ac <HAL_I2C_Mem_Read+0x34>
 80049a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d105      	bne.n	80049b8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049b2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e0f1      	b.n	8004b9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d101      	bne.n	80049c6 <HAL_I2C_Mem_Read+0x4e>
 80049c2:	2302      	movs	r3, #2
 80049c4:	e0ea      	b.n	8004b9c <HAL_I2C_Mem_Read+0x224>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80049ce:	f7fc f8b3 	bl	8000b38 <HAL_GetTick>
 80049d2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	2319      	movs	r3, #25
 80049da:	2201      	movs	r2, #1
 80049dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80049e0:	68f8      	ldr	r0, [r7, #12]
 80049e2:	f000 f9bd 	bl	8004d60 <I2C_WaitOnFlagUntilTimeout>
 80049e6:	4603      	mov	r3, r0
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d001      	beq.n	80049f0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80049ec:	2301      	movs	r3, #1
 80049ee:	e0d5      	b.n	8004b9c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2222      	movs	r2, #34	; 0x22
 80049f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2240      	movs	r2, #64	; 0x40
 80049fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2200      	movs	r2, #0
 8004a04:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6a3a      	ldr	r2, [r7, #32]
 8004a0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004a10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004a18:	88f8      	ldrh	r0, [r7, #6]
 8004a1a:	893a      	ldrh	r2, [r7, #8]
 8004a1c:	8979      	ldrh	r1, [r7, #10]
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	9301      	str	r3, [sp, #4]
 8004a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	4603      	mov	r3, r0
 8004a28:	68f8      	ldr	r0, [r7, #12]
 8004a2a:	f000 f921 	bl	8004c70 <I2C_RequestMemoryRead>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e0ad      	b.n	8004b9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a44:	b29b      	uxth	r3, r3
 8004a46:	2bff      	cmp	r3, #255	; 0xff
 8004a48:	d90e      	bls.n	8004a68 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	22ff      	movs	r2, #255	; 0xff
 8004a4e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a54:	b2da      	uxtb	r2, r3
 8004a56:	8979      	ldrh	r1, [r7, #10]
 8004a58:	4b52      	ldr	r3, [pc, #328]	; (8004ba4 <HAL_I2C_Mem_Read+0x22c>)
 8004a5a:	9300      	str	r3, [sp, #0]
 8004a5c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 fa9f 	bl	8004fa4 <I2C_TransferConfig>
 8004a66:	e00f      	b.n	8004a88 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6c:	b29a      	uxth	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a76:	b2da      	uxtb	r2, r3
 8004a78:	8979      	ldrh	r1, [r7, #10]
 8004a7a:	4b4a      	ldr	r3, [pc, #296]	; (8004ba4 <HAL_I2C_Mem_Read+0x22c>)
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f000 fa8e 	bl	8004fa4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	9300      	str	r3, [sp, #0]
 8004a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a8e:	2200      	movs	r2, #0
 8004a90:	2104      	movs	r1, #4
 8004a92:	68f8      	ldr	r0, [r7, #12]
 8004a94:	f000 f964 	bl	8004d60 <I2C_WaitOnFlagUntilTimeout>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e07c      	b.n	8004b9c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aac:	b2d2      	uxtb	r2, r2
 8004aae:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab4:	1c5a      	adds	r2, r3, #1
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004abe:	3b01      	subs	r3, #1
 8004ac0:	b29a      	uxth	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	3b01      	subs	r3, #1
 8004ace:	b29a      	uxth	r2, r3
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ad8:	b29b      	uxth	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d034      	beq.n	8004b48 <HAL_I2C_Mem_Read+0x1d0>
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d130      	bne.n	8004b48 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004ae6:	697b      	ldr	r3, [r7, #20]
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aec:	2200      	movs	r2, #0
 8004aee:	2180      	movs	r1, #128	; 0x80
 8004af0:	68f8      	ldr	r0, [r7, #12]
 8004af2:	f000 f935 	bl	8004d60 <I2C_WaitOnFlagUntilTimeout>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d001      	beq.n	8004b00 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8004afc:	2301      	movs	r3, #1
 8004afe:	e04d      	b.n	8004b9c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b04:	b29b      	uxth	r3, r3
 8004b06:	2bff      	cmp	r3, #255	; 0xff
 8004b08:	d90e      	bls.n	8004b28 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	22ff      	movs	r2, #255	; 0xff
 8004b0e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	8979      	ldrh	r1, [r7, #10]
 8004b18:	2300      	movs	r3, #0
 8004b1a:	9300      	str	r3, [sp, #0]
 8004b1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 fa3f 	bl	8004fa4 <I2C_TransferConfig>
 8004b26:	e00f      	b.n	8004b48 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b2c:	b29a      	uxth	r2, r3
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b36:	b2da      	uxtb	r2, r3
 8004b38:	8979      	ldrh	r1, [r7, #10]
 8004b3a:	2300      	movs	r3, #0
 8004b3c:	9300      	str	r3, [sp, #0]
 8004b3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004b42:	68f8      	ldr	r0, [r7, #12]
 8004b44:	f000 fa2e 	bl	8004fa4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d19a      	bne.n	8004a88 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004b52:	697a      	ldr	r2, [r7, #20]
 8004b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004b56:	68f8      	ldr	r0, [r7, #12]
 8004b58:	f000 f982 	bl	8004e60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d001      	beq.n	8004b66 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e01a      	b.n	8004b9c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	6859      	ldr	r1, [r3, #4]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	4b0b      	ldr	r3, [pc, #44]	; (8004ba8 <HAL_I2C_Mem_Read+0x230>)
 8004b7a:	400b      	ands	r3, r1
 8004b7c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004b96:	2300      	movs	r3, #0
 8004b98:	e000      	b.n	8004b9c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8004b9a:	2302      	movs	r3, #2
  }
}
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	3718      	adds	r7, #24
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	80002400 	.word	0x80002400
 8004ba8:	fe00e800 	.word	0xfe00e800

08004bac <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b083      	sub	sp, #12
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bba:	b2db      	uxtb	r3, r3
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	370c      	adds	r7, #12
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b086      	sub	sp, #24
 8004bcc:	af02      	add	r7, sp, #8
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	4608      	mov	r0, r1
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	461a      	mov	r2, r3
 8004bd6:	4603      	mov	r3, r0
 8004bd8:	817b      	strh	r3, [r7, #10]
 8004bda:	460b      	mov	r3, r1
 8004bdc:	813b      	strh	r3, [r7, #8]
 8004bde:	4613      	mov	r3, r2
 8004be0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8004be2:	88fb      	ldrh	r3, [r7, #6]
 8004be4:	b2da      	uxtb	r2, r3
 8004be6:	8979      	ldrh	r1, [r7, #10]
 8004be8:	4b20      	ldr	r3, [pc, #128]	; (8004c6c <I2C_RequestMemoryWrite+0xa4>)
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004bf0:	68f8      	ldr	r0, [r7, #12]
 8004bf2:	f000 f9d7 	bl	8004fa4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bf6:	69fa      	ldr	r2, [r7, #28]
 8004bf8:	69b9      	ldr	r1, [r7, #24]
 8004bfa:	68f8      	ldr	r0, [r7, #12]
 8004bfc:	f000 f8f0 	bl	8004de0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d001      	beq.n	8004c0a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e02c      	b.n	8004c64 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004c0a:	88fb      	ldrh	r3, [r7, #6]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d105      	bne.n	8004c1c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c10:	893b      	ldrh	r3, [r7, #8]
 8004c12:	b2da      	uxtb	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	629a      	str	r2, [r3, #40]	; 0x28
 8004c1a:	e015      	b.n	8004c48 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004c1c:	893b      	ldrh	r3, [r7, #8]
 8004c1e:	0a1b      	lsrs	r3, r3, #8
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	69b9      	ldr	r1, [r7, #24]
 8004c2e:	68f8      	ldr	r0, [r7, #12]
 8004c30:	f000 f8d6 	bl	8004de0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	e012      	b.n	8004c64 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004c3e:	893b      	ldrh	r3, [r7, #8]
 8004c40:	b2da      	uxtb	r2, r3
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	69bb      	ldr	r3, [r7, #24]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	2180      	movs	r1, #128	; 0x80
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 f884 	bl	8004d60 <I2C_WaitOnFlagUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e000      	b.n	8004c64 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8004c62:	2300      	movs	r3, #0
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	3710      	adds	r7, #16
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	bd80      	pop	{r7, pc}
 8004c6c:	80002000 	.word	0x80002000

08004c70 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b086      	sub	sp, #24
 8004c74:	af02      	add	r7, sp, #8
 8004c76:	60f8      	str	r0, [r7, #12]
 8004c78:	4608      	mov	r0, r1
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	4603      	mov	r3, r0
 8004c80:	817b      	strh	r3, [r7, #10]
 8004c82:	460b      	mov	r3, r1
 8004c84:	813b      	strh	r3, [r7, #8]
 8004c86:	4613      	mov	r3, r2
 8004c88:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8004c8a:	88fb      	ldrh	r3, [r7, #6]
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	8979      	ldrh	r1, [r7, #10]
 8004c90:	4b20      	ldr	r3, [pc, #128]	; (8004d14 <I2C_RequestMemoryRead+0xa4>)
 8004c92:	9300      	str	r3, [sp, #0]
 8004c94:	2300      	movs	r3, #0
 8004c96:	68f8      	ldr	r0, [r7, #12]
 8004c98:	f000 f984 	bl	8004fa4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c9c:	69fa      	ldr	r2, [r7, #28]
 8004c9e:	69b9      	ldr	r1, [r7, #24]
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 f89d 	bl	8004de0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	e02c      	b.n	8004d0a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004cb0:	88fb      	ldrh	r3, [r7, #6]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d105      	bne.n	8004cc2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004cb6:	893b      	ldrh	r3, [r7, #8]
 8004cb8:	b2da      	uxtb	r2, r3
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	629a      	str	r2, [r3, #40]	; 0x28
 8004cc0:	e015      	b.n	8004cee <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8004cc2:	893b      	ldrh	r3, [r7, #8]
 8004cc4:	0a1b      	lsrs	r3, r3, #8
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	b2da      	uxtb	r2, r3
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cd0:	69fa      	ldr	r2, [r7, #28]
 8004cd2:	69b9      	ldr	r1, [r7, #24]
 8004cd4:	68f8      	ldr	r0, [r7, #12]
 8004cd6:	f000 f883 	bl	8004de0 <I2C_WaitOnTXISFlagUntilTimeout>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d001      	beq.n	8004ce4 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e012      	b.n	8004d0a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8004ce4:	893b      	ldrh	r3, [r7, #8]
 8004ce6:	b2da      	uxtb	r2, r3
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	9300      	str	r3, [sp, #0]
 8004cf2:	69bb      	ldr	r3, [r7, #24]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	2140      	movs	r1, #64	; 0x40
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 f831 	bl	8004d60 <I2C_WaitOnFlagUntilTimeout>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d001      	beq.n	8004d08 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8004d04:	2301      	movs	r3, #1
 8004d06:	e000      	b.n	8004d0a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
 8004d12:	bf00      	nop
 8004d14:	80002000 	.word	0x80002000

08004d18 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699b      	ldr	r3, [r3, #24]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d103      	bne.n	8004d36 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2200      	movs	r2, #0
 8004d34:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	f003 0301 	and.w	r3, r3, #1
 8004d40:	2b01      	cmp	r3, #1
 8004d42:	d007      	beq.n	8004d54 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	699a      	ldr	r2, [r3, #24]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0201 	orr.w	r2, r2, #1
 8004d52:	619a      	str	r2, [r3, #24]
  }
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b084      	sub	sp, #16
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	603b      	str	r3, [r7, #0]
 8004d6c:	4613      	mov	r3, r2
 8004d6e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d70:	e022      	b.n	8004db8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d78:	d01e      	beq.n	8004db8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d7a:	f7fb fedd 	bl	8000b38 <HAL_GetTick>
 8004d7e:	4602      	mov	r2, r0
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	1ad3      	subs	r3, r2, r3
 8004d84:	683a      	ldr	r2, [r7, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d302      	bcc.n	8004d90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d113      	bne.n	8004db8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d94:	f043 0220 	orr.w	r2, r3, #32
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2220      	movs	r2, #32
 8004da0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	e00f      	b.n	8004dd8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	699a      	ldr	r2, [r3, #24]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	bf0c      	ite	eq
 8004dc8:	2301      	moveq	r3, #1
 8004dca:	2300      	movne	r3, #0
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	461a      	mov	r2, r3
 8004dd0:	79fb      	ldrb	r3, [r7, #7]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d0cd      	beq.n	8004d72 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3710      	adds	r7, #16
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}

08004de0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004dec:	e02c      	b.n	8004e48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	68b9      	ldr	r1, [r7, #8]
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 f870 	bl	8004ed8 <I2C_IsAcknowledgeFailed>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e02a      	b.n	8004e58 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e08:	d01e      	beq.n	8004e48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e0a:	f7fb fe95 	bl	8000b38 <HAL_GetTick>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	1ad3      	subs	r3, r2, r3
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	429a      	cmp	r2, r3
 8004e18:	d302      	bcc.n	8004e20 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004e1a:	68bb      	ldr	r3, [r7, #8]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d113      	bne.n	8004e48 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e24:	f043 0220 	orr.w	r2, r3, #32
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2220      	movs	r2, #32
 8004e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e007      	b.n	8004e58 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d1cb      	bne.n	8004dee <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004e56:	2300      	movs	r3, #0
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004e6c:	e028      	b.n	8004ec0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	68b9      	ldr	r1, [r7, #8]
 8004e72:	68f8      	ldr	r0, [r7, #12]
 8004e74:	f000 f830 	bl	8004ed8 <I2C_IsAcknowledgeFailed>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d001      	beq.n	8004e82 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e026      	b.n	8004ed0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e82:	f7fb fe59 	bl	8000b38 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d302      	bcc.n	8004e98 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d113      	bne.n	8004ec0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9c:	f043 0220 	orr.w	r2, r3, #32
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2220      	movs	r2, #32
 8004ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2200      	movs	r2, #0
 8004eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e007      	b.n	8004ed0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	f003 0320 	and.w	r3, r3, #32
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	d1cf      	bne.n	8004e6e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ece:	2300      	movs	r3, #0
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3710      	adds	r7, #16
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	f003 0310 	and.w	r3, r3, #16
 8004eee:	2b10      	cmp	r3, #16
 8004ef0:	d151      	bne.n	8004f96 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004ef2:	e022      	b.n	8004f3a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004efa:	d01e      	beq.n	8004f3a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004efc:	f7fb fe1c 	bl	8000b38 <HAL_GetTick>
 8004f00:	4602      	mov	r2, r0
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	1ad3      	subs	r3, r2, r3
 8004f06:	68ba      	ldr	r2, [r7, #8]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d302      	bcc.n	8004f12 <I2C_IsAcknowledgeFailed+0x3a>
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d113      	bne.n	8004f3a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f16:	f043 0220 	orr.w	r2, r3, #32
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2220      	movs	r2, #32
 8004f22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e02e      	b.n	8004f98 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	699b      	ldr	r3, [r3, #24]
 8004f40:	f003 0320 	and.w	r3, r3, #32
 8004f44:	2b20      	cmp	r3, #32
 8004f46:	d1d5      	bne.n	8004ef4 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	2210      	movs	r2, #16
 8004f4e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2220      	movs	r2, #32
 8004f56:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f7ff fedd 	bl	8004d18 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6859      	ldr	r1, [r3, #4]
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	4b0d      	ldr	r3, [pc, #52]	; (8004fa0 <I2C_IsAcknowledgeFailed+0xc8>)
 8004f6a:	400b      	ands	r3, r1
 8004f6c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f72:	f043 0204 	orr.w	r2, r3, #4
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2200      	movs	r2, #0
 8004f86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004f92:	2301      	movs	r3, #1
 8004f94:	e000      	b.n	8004f98 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8004f96:	2300      	movs	r3, #0
}
 8004f98:	4618      	mov	r0, r3
 8004f9a:	3710      	adds	r7, #16
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bd80      	pop	{r7, pc}
 8004fa0:	fe00e800 	.word	0xfe00e800

08004fa4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b085      	sub	sp, #20
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	607b      	str	r3, [r7, #4]
 8004fae:	460b      	mov	r3, r1
 8004fb0:	817b      	strh	r3, [r7, #10]
 8004fb2:	4613      	mov	r3, r2
 8004fb4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	0d5b      	lsrs	r3, r3, #21
 8004fc0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004fc4:	4b0d      	ldr	r3, [pc, #52]	; (8004ffc <I2C_TransferConfig+0x58>)
 8004fc6:	430b      	orrs	r3, r1
 8004fc8:	43db      	mvns	r3, r3
 8004fca:	ea02 0103 	and.w	r1, r2, r3
 8004fce:	897b      	ldrh	r3, [r7, #10]
 8004fd0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8004fd4:	7a7b      	ldrb	r3, [r7, #9]
 8004fd6:	041b      	lsls	r3, r3, #16
 8004fd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004fdc:	431a      	orrs	r2, r3
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	431a      	orrs	r2, r3
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	431a      	orrs	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8004fee:	bf00      	nop
 8004ff0:	3714      	adds	r7, #20
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff8:	4770      	bx	lr
 8004ffa:	bf00      	nop
 8004ffc:	03ff63ff 	.word	0x03ff63ff

08005000 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005010:	b2db      	uxtb	r3, r3
 8005012:	2b20      	cmp	r3, #32
 8005014:	d138      	bne.n	8005088 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800501c:	2b01      	cmp	r3, #1
 800501e:	d101      	bne.n	8005024 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8005020:	2302      	movs	r3, #2
 8005022:	e032      	b.n	800508a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2224      	movs	r2, #36	; 0x24
 8005030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0201 	bic.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005052:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6819      	ldr	r1, [r3, #0]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	430a      	orrs	r2, r1
 8005062:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f042 0201 	orr.w	r2, r2, #1
 8005072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2220      	movs	r2, #32
 8005078:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005084:	2300      	movs	r3, #0
 8005086:	e000      	b.n	800508a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005088:	2302      	movs	r3, #2
  }
}
 800508a:	4618      	mov	r0, r3
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr

08005096 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005096:	b480      	push	{r7}
 8005098:	b085      	sub	sp, #20
 800509a:	af00      	add	r7, sp, #0
 800509c:	6078      	str	r0, [r7, #4]
 800509e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	d139      	bne.n	8005120 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050b2:	2b01      	cmp	r3, #1
 80050b4:	d101      	bne.n	80050ba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80050b6:	2302      	movs	r3, #2
 80050b8:	e033      	b.n	8005122 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2201      	movs	r2, #1
 80050be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2224      	movs	r2, #36	; 0x24
 80050c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0201 	bic.w	r2, r2, #1
 80050d8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80050e8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	021b      	lsls	r3, r3, #8
 80050ee:	68fa      	ldr	r2, [r7, #12]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0201 	orr.w	r2, r2, #1
 800510a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2220      	movs	r2, #32
 8005110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2200      	movs	r2, #0
 8005118:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800511c:	2300      	movs	r3, #0
 800511e:	e000      	b.n	8005122 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8005120:	2302      	movs	r3, #2
  }
}
 8005122:	4618      	mov	r0, r3
 8005124:	3714      	adds	r7, #20
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr
	...

08005130 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d101      	bne.n	8005142 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e0bf      	b.n	80052c2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8005148:	b2db      	uxtb	r3, r3
 800514a:	2b00      	cmp	r3, #0
 800514c:	d106      	bne.n	800515c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005156:	6878      	ldr	r0, [r7, #4]
 8005158:	f010 fc90 	bl	8015a7c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699a      	ldr	r2, [r3, #24]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005172:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	6999      	ldr	r1, [r3, #24]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	685a      	ldr	r2, [r3, #4]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005188:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	430a      	orrs	r2, r1
 8005196:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6899      	ldr	r1, [r3, #8]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	4b4a      	ldr	r3, [pc, #296]	; (80052cc <HAL_LTDC_Init+0x19c>)
 80051a4:	400b      	ands	r3, r1
 80051a6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	041b      	lsls	r3, r3, #16
 80051ae:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	6899      	ldr	r1, [r3, #8]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	699a      	ldr	r2, [r3, #24]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	431a      	orrs	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	430a      	orrs	r2, r1
 80051c4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	68d9      	ldr	r1, [r3, #12]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	4b3e      	ldr	r3, [pc, #248]	; (80052cc <HAL_LTDC_Init+0x19c>)
 80051d2:	400b      	ands	r3, r1
 80051d4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	041b      	lsls	r3, r3, #16
 80051dc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68d9      	ldr	r1, [r3, #12]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6a1a      	ldr	r2, [r3, #32]
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	431a      	orrs	r2, r3
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	430a      	orrs	r2, r1
 80051f2:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	6919      	ldr	r1, [r3, #16]
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681a      	ldr	r2, [r3, #0]
 80051fe:	4b33      	ldr	r3, [pc, #204]	; (80052cc <HAL_LTDC_Init+0x19c>)
 8005200:	400b      	ands	r3, r1
 8005202:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	041b      	lsls	r3, r3, #16
 800520a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	6919      	ldr	r1, [r3, #16]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	431a      	orrs	r2, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	6959      	ldr	r1, [r3, #20]
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681a      	ldr	r2, [r3, #0]
 800522c:	4b27      	ldr	r3, [pc, #156]	; (80052cc <HAL_LTDC_Init+0x19c>)
 800522e:	400b      	ands	r3, r1
 8005230:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005236:	041b      	lsls	r3, r3, #16
 8005238:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6959      	ldr	r1, [r3, #20]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	431a      	orrs	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	430a      	orrs	r2, r1
 800524e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005256:	021b      	lsls	r3, r3, #8
 8005258:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005260:	041b      	lsls	r3, r3, #16
 8005262:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8005272:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4313      	orrs	r3, r2
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8005286:	431a      	orrs	r2, r3
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	430a      	orrs	r2, r1
 800528e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f042 0206 	orr.w	r2, r2, #6
 800529e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	699a      	ldr	r2, [r3, #24]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0201 	orr.w	r2, r2, #1
 80052ae:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2200      	movs	r2, #0
 80052b4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80052c0:	2300      	movs	r3, #0
}
 80052c2:	4618      	mov	r0, r3
 80052c4:	3710      	adds	r7, #16
 80052c6:	46bd      	mov	sp, r7
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	f000f800 	.word	0xf000f800

080052d0 <HAL_LTDC_DeInit>:
  *                the configuration information for the LTDC.
  * @retval None
  */

HAL_StatusTypeDef HAL_LTDC_DeInit(LTDC_HandleTypeDef *hltdc)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  }
  /* DeInit the low level hardware */
  hltdc->MspDeInitCallback(hltdc);
#else
  /* DeInit the low level hardware */
  HAL_LTDC_MspDeInit(hltdc);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f010 fc97 	bl	8015c0c <HAL_LTDC_MspDeInit>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_RESET;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Release Lock */
  __HAL_UNLOCK(hltdc);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3708      	adds	r7, #8
 80052fc:	46bd      	mov	sp, r7
 80052fe:	bd80      	pop	{r7, pc}

08005300 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b084      	sub	sp, #16
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800530e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005316:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f003 0304 	and.w	r3, r3, #4
 800531e:	2b00      	cmp	r3, #0
 8005320:	d023      	beq.n	800536a <HAL_LTDC_IRQHandler+0x6a>
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b00      	cmp	r3, #0
 800532a:	d01e      	beq.n	800536a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f022 0204 	bic.w	r2, r2, #4
 800533a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2204      	movs	r2, #4
 8005342:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800534a:	f043 0201 	orr.w	r2, r3, #1
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2204      	movs	r2, #4
 8005358:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f86f 	bl	8005448 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	f003 0302 	and.w	r3, r3, #2
 8005370:	2b00      	cmp	r3, #0
 8005372:	d023      	beq.n	80053bc <HAL_LTDC_IRQHandler+0xbc>
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	f003 0302 	and.w	r3, r3, #2
 800537a:	2b00      	cmp	r3, #0
 800537c:	d01e      	beq.n	80053bc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 0202 	bic.w	r2, r2, #2
 800538c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	2202      	movs	r2, #2
 8005394:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800539c:	f043 0202 	orr.w	r2, r3, #2
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2204      	movs	r2, #4
 80053aa:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2200      	movs	r2, #0
 80053b2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f846 	bl	8005448 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d01b      	beq.n	80053fe <HAL_LTDC_IRQHandler+0xfe>
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	f003 0301 	and.w	r3, r3, #1
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d016      	beq.n	80053fe <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 0201 	bic.w	r2, r2, #1
 80053de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2201      	movs	r2, #1
 80053e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f011 fc37 	bl	8016c6c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f003 0308 	and.w	r3, r3, #8
 8005404:	2b00      	cmp	r3, #0
 8005406:	d01b      	beq.n	8005440 <HAL_LTDC_IRQHandler+0x140>
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	f003 0308 	and.w	r3, r3, #8
 800540e:	2b00      	cmp	r3, #0
 8005410:	d016      	beq.n	8005440 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 0208 	bic.w	r2, r2, #8
 8005420:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	2208      	movs	r2, #8
 8005428:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800543a:	6878      	ldr	r0, [r7, #4]
 800543c:	f000 f80e 	bl	800545c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8005440:	bf00      	nop
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8005448:	b480      	push	{r7}
 800544a:	b083      	sub	sp, #12
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8005450:	bf00      	nop
 8005452:	370c      	adds	r7, #12
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr

0800545c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800545c:	b480      	push	{r7}
 800545e:	b083      	sub	sp, #12
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8005464:	bf00      	nop
 8005466:	370c      	adds	r7, #12
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr

08005470 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005470:	b5b0      	push	{r4, r5, r7, lr}
 8005472:	b084      	sub	sp, #16
 8005474:	af00      	add	r7, sp, #0
 8005476:	60f8      	str	r0, [r7, #12]
 8005478:	60b9      	str	r1, [r7, #8]
 800547a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005482:	2b01      	cmp	r3, #1
 8005484:	d101      	bne.n	800548a <HAL_LTDC_ConfigLayer+0x1a>
 8005486:	2302      	movs	r3, #2
 8005488:	e02c      	b.n	80054e4 <HAL_LTDC_ConfigLayer+0x74>
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2201      	movs	r2, #1
 800548e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	2202      	movs	r2, #2
 8005496:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800549a:	68fa      	ldr	r2, [r7, #12]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2134      	movs	r1, #52	; 0x34
 80054a0:	fb01 f303 	mul.w	r3, r1, r3
 80054a4:	4413      	add	r3, r2
 80054a6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	4614      	mov	r4, r2
 80054ae:	461d      	mov	r5, r3
 80054b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80054ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80054bc:	682b      	ldr	r3, [r5, #0]
 80054be:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	68b9      	ldr	r1, [r7, #8]
 80054c4:	68f8      	ldr	r0, [r7, #12]
 80054c6:	f000 f8cf 	bl	8005668 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	2201      	movs	r2, #1
 80054d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80054e2:	2300      	movs	r3, #0
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3710      	adds	r7, #16
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bdb0      	pop	{r4, r5, r7, pc}

080054ec <HAL_LTDC_SetPitch>:
  * @param  LinePitchInPixels  New line pitch in pixels to configure for LTDC layer 'LayerIdx'.
  * @param  LayerIdx           LTDC layer index concerned by the modification of line pitch.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_SetPitch(LTDC_HandleTypeDef *hltdc, uint32_t LinePitchInPixels, uint32_t LayerIdx)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b089      	sub	sp, #36	; 0x24
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	60f8      	str	r0, [r7, #12]
 80054f4:	60b9      	str	r1, [r7, #8]
 80054f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80054fe:	2b01      	cmp	r3, #1
 8005500:	d101      	bne.n	8005506 <HAL_LTDC_SetPitch+0x1a>
 8005502:	2302      	movs	r3, #2
 8005504:	e06e      	b.n	80055e4 <HAL_LTDC_SetPitch+0xf8>
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	2201      	movs	r2, #1
 800550a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	2202      	movs	r2, #2
 8005512:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* get LayerIdx used pixel format */
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2134      	movs	r1, #52	; 0x34
 800551c:	fb01 f303 	mul.w	r3, r1, r3
 8005520:	4413      	add	r3, r2
 8005522:	3348      	adds	r3, #72	; 0x48
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	61bb      	str	r3, [r7, #24]

  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d102      	bne.n	8005534 <HAL_LTDC_SetPitch+0x48>
  {
    tmp = 4U;
 800552e:	2304      	movs	r3, #4
 8005530:	61fb      	str	r3, [r7, #28]
 8005532:	e016      	b.n	8005562 <HAL_LTDC_SetPitch+0x76>
  }
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d102      	bne.n	8005540 <HAL_LTDC_SetPitch+0x54>
  {
    tmp = 3U;
 800553a:	2303      	movs	r3, #3
 800553c:	61fb      	str	r3, [r7, #28]
 800553e:	e010      	b.n	8005562 <HAL_LTDC_SetPitch+0x76>
  }
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	2b04      	cmp	r3, #4
 8005544:	d008      	beq.n	8005558 <HAL_LTDC_SetPitch+0x6c>
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	2b02      	cmp	r3, #2
 800554a:	d005      	beq.n	8005558 <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800554c:	69bb      	ldr	r3, [r7, #24]
 800554e:	2b03      	cmp	r3, #3
 8005550:	d002      	beq.n	8005558 <HAL_LTDC_SetPitch+0x6c>
           (pixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	2b07      	cmp	r3, #7
 8005556:	d102      	bne.n	800555e <HAL_LTDC_SetPitch+0x72>
           (pixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8005558:	2302      	movs	r3, #2
 800555a:	61fb      	str	r3, [r7, #28]
 800555c:	e001      	b.n	8005562 <HAL_LTDC_SetPitch+0x76>
  }
  else
  {
    tmp = 1U;
 800555e:	2301      	movs	r3, #1
 8005560:	61fb      	str	r3, [r7, #28]
  }

  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	69fa      	ldr	r2, [r7, #28]
 8005566:	fb02 f303 	mul.w	r3, r2, r3
 800556a:	041b      	lsls	r3, r3, #16
 800556c:	617b      	str	r3, [r7, #20]

  /* Clear previously set standard pitch */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	461a      	mov	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	01db      	lsls	r3, r3, #7
 8005578:	4413      	add	r3, r2
 800557a:	3384      	adds	r3, #132	; 0x84
 800557c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	4619      	mov	r1, r3
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	01db      	lsls	r3, r3, #7
 8005588:	440b      	add	r3, r1
 800558a:	3384      	adds	r3, #132	; 0x84
 800558c:	4619      	mov	r1, r3
 800558e:	4b18      	ldr	r3, [pc, #96]	; (80055f0 <HAL_LTDC_SetPitch+0x104>)
 8005590:	4013      	ands	r3, r2
 8005592:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8005594:	4b17      	ldr	r3, [pc, #92]	; (80055f4 <HAL_LTDC_SetPitch+0x108>)
 8005596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005598:	4a16      	ldr	r2, [pc, #88]	; (80055f4 <HAL_LTDC_SetPitch+0x108>)
 800559a:	f043 0301 	orr.w	r3, r3, #1
 800559e:	6253      	str	r3, [r2, #36]	; 0x24

  /* Set new line pitch value */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	461a      	mov	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	01db      	lsls	r3, r3, #7
 80055aa:	4413      	add	r3, r2
 80055ac:	3384      	adds	r3, #132	; 0x84
 80055ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	4619      	mov	r1, r3
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	01db      	lsls	r3, r3, #7
 80055ba:	440b      	add	r3, r1
 80055bc:	3384      	adds	r3, #132	; 0x84
 80055be:	4619      	mov	r1, r3
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	4313      	orrs	r3, r2
 80055c4:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Set the Reload type as immediate update of LTDC pitch configured above */
  LTDC->SRCR |= LTDC_SRCR_IMR;
 80055c6:	4b0b      	ldr	r3, [pc, #44]	; (80055f4 <HAL_LTDC_SetPitch+0x108>)
 80055c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ca:	4a0a      	ldr	r2, [pc, #40]	; (80055f4 <HAL_LTDC_SetPitch+0x108>)
 80055cc:	f043 0301 	orr.w	r3, r3, #1
 80055d0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2201      	movs	r2, #1
 80055d6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2200      	movs	r2, #0
 80055de:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80055e2:	2300      	movs	r3, #0
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	3724      	adds	r7, #36	; 0x24
 80055e8:	46bd      	mov	sp, r7
 80055ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ee:	4770      	bx	lr
 80055f0:	e000ffff 	.word	0xe000ffff
 80055f4:	40016800 	.word	0x40016800

080055f8 <HAL_LTDC_ProgramLineEvent>:
  * @param  Line    Line Interrupt Position.
  * @note   User application may resort to HAL_LTDC_LineEventCallback() at line interrupt generation.
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ProgramLineEvent(LTDC_HandleTypeDef *hltdc, uint32_t Line)
{
 80055f8:	b480      	push	{r7}
 80055fa:	b083      	sub	sp, #12
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
 8005600:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LIPOS(Line));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8005608:	2b01      	cmp	r3, #1
 800560a:	d101      	bne.n	8005610 <HAL_LTDC_ProgramLineEvent+0x18>
 800560c:	2302      	movs	r3, #2
 800560e:	e023      	b.n	8005658 <HAL_LTDC_ProgramLineEvent+0x60>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2202      	movs	r2, #2
 800561c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Disable the Line interrupt */
  __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f022 0201 	bic.w	r2, r2, #1
 800562e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Set the Line Interrupt position */
  LTDC->LIPCR = (uint32_t)Line;
 8005630:	4a0c      	ldr	r2, [pc, #48]	; (8005664 <HAL_LTDC_ProgramLineEvent+0x6c>)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	6413      	str	r3, [r2, #64]	; 0x40

  /* Enable the Line interrupt */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_LI);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f042 0201 	orr.w	r2, r2, #1
 8005644:	635a      	str	r2, [r3, #52]	; 0x34

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	4618      	mov	r0, r3
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	40016800 	.word	0x40016800

08005668 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005668:	b480      	push	{r7}
 800566a:	b089      	sub	sp, #36	; 0x24
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	0c1b      	lsrs	r3, r3, #16
 8005680:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005684:	4413      	add	r3, r2
 8005686:	041b      	lsls	r3, r3, #16
 8005688:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	01db      	lsls	r3, r3, #7
 8005694:	4413      	add	r3, r2
 8005696:	3384      	adds	r3, #132	; 0x84
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	6812      	ldr	r2, [r2, #0]
 800569e:	4611      	mov	r1, r2
 80056a0:	687a      	ldr	r2, [r7, #4]
 80056a2:	01d2      	lsls	r2, r2, #7
 80056a4:	440a      	add	r2, r1
 80056a6:	3284      	adds	r2, #132	; 0x84
 80056a8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80056ac:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	681a      	ldr	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	0c1b      	lsrs	r3, r3, #16
 80056ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056be:	4413      	add	r3, r2
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4619      	mov	r1, r3
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	01db      	lsls	r3, r3, #7
 80056cc:	440b      	add	r3, r1
 80056ce:	3384      	adds	r3, #132	; 0x84
 80056d0:	4619      	mov	r1, r3
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	4313      	orrs	r3, r2
 80056d6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	68da      	ldr	r2, [r3, #12]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	68db      	ldr	r3, [r3, #12]
 80056e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056e6:	4413      	add	r3, r2
 80056e8:	041b      	lsls	r3, r3, #16
 80056ea:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	461a      	mov	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	01db      	lsls	r3, r3, #7
 80056f6:	4413      	add	r3, r2
 80056f8:	3384      	adds	r3, #132	; 0x84
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	6812      	ldr	r2, [r2, #0]
 8005700:	4611      	mov	r1, r2
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	01d2      	lsls	r2, r2, #7
 8005706:	440a      	add	r2, r1
 8005708:	3284      	adds	r2, #132	; 0x84
 800570a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800570e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800571e:	4413      	add	r3, r2
 8005720:	1c5a      	adds	r2, r3, #1
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4619      	mov	r1, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	01db      	lsls	r3, r3, #7
 800572c:	440b      	add	r3, r1
 800572e:	3384      	adds	r3, #132	; 0x84
 8005730:	4619      	mov	r1, r3
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	4313      	orrs	r3, r2
 8005736:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	461a      	mov	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	01db      	lsls	r3, r3, #7
 8005742:	4413      	add	r3, r2
 8005744:	3384      	adds	r3, #132	; 0x84
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	6812      	ldr	r2, [r2, #0]
 800574c:	4611      	mov	r1, r2
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	01d2      	lsls	r2, r2, #7
 8005752:	440a      	add	r2, r1
 8005754:	3284      	adds	r2, #132	; 0x84
 8005756:	f023 0307 	bic.w	r3, r3, #7
 800575a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	461a      	mov	r2, r3
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	01db      	lsls	r3, r3, #7
 8005766:	4413      	add	r3, r2
 8005768:	3384      	adds	r3, #132	; 0x84
 800576a:	461a      	mov	r2, r3
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005778:	021b      	lsls	r3, r3, #8
 800577a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8005782:	041b      	lsls	r3, r3, #16
 8005784:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005786:	68bb      	ldr	r3, [r7, #8]
 8005788:	699b      	ldr	r3, [r3, #24]
 800578a:	061b      	lsls	r3, r3, #24
 800578c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	461a      	mov	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	01db      	lsls	r3, r3, #7
 8005798:	4413      	add	r3, r2
 800579a:	3384      	adds	r3, #132	; 0x84
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	461a      	mov	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	01db      	lsls	r3, r3, #7
 80057a8:	4413      	add	r3, r2
 80057aa:	3384      	adds	r3, #132	; 0x84
 80057ac:	461a      	mov	r2, r3
 80057ae:	2300      	movs	r3, #0
 80057b0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80057b8:	461a      	mov	r2, r3
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	431a      	orrs	r2, r3
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	431a      	orrs	r2, r3
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4619      	mov	r1, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	01db      	lsls	r3, r3, #7
 80057cc:	440b      	add	r3, r1
 80057ce:	3384      	adds	r3, #132	; 0x84
 80057d0:	4619      	mov	r1, r3
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	4313      	orrs	r3, r2
 80057d6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	461a      	mov	r2, r3
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	01db      	lsls	r3, r3, #7
 80057e2:	4413      	add	r3, r2
 80057e4:	3384      	adds	r3, #132	; 0x84
 80057e6:	695b      	ldr	r3, [r3, #20]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	6812      	ldr	r2, [r2, #0]
 80057ec:	4611      	mov	r1, r2
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	01d2      	lsls	r2, r2, #7
 80057f2:	440a      	add	r2, r1
 80057f4:	3284      	adds	r2, #132	; 0x84
 80057f6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80057fa:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	461a      	mov	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	01db      	lsls	r3, r3, #7
 8005806:	4413      	add	r3, r2
 8005808:	3384      	adds	r3, #132	; 0x84
 800580a:	461a      	mov	r2, r3
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	461a      	mov	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	01db      	lsls	r3, r3, #7
 800581c:	4413      	add	r3, r2
 800581e:	3384      	adds	r3, #132	; 0x84
 8005820:	69da      	ldr	r2, [r3, #28]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4619      	mov	r1, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	01db      	lsls	r3, r3, #7
 800582c:	440b      	add	r3, r1
 800582e:	3384      	adds	r3, #132	; 0x84
 8005830:	4619      	mov	r1, r3
 8005832:	4b58      	ldr	r3, [pc, #352]	; (8005994 <LTDC_SetConfig+0x32c>)
 8005834:	4013      	ands	r3, r2
 8005836:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	69da      	ldr	r2, [r3, #28]
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	68f9      	ldr	r1, [r7, #12]
 8005842:	6809      	ldr	r1, [r1, #0]
 8005844:	4608      	mov	r0, r1
 8005846:	6879      	ldr	r1, [r7, #4]
 8005848:	01c9      	lsls	r1, r1, #7
 800584a:	4401      	add	r1, r0
 800584c:	3184      	adds	r1, #132	; 0x84
 800584e:	4313      	orrs	r3, r2
 8005850:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	461a      	mov	r2, r3
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	01db      	lsls	r3, r3, #7
 800585c:	4413      	add	r3, r2
 800585e:	3384      	adds	r3, #132	; 0x84
 8005860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	461a      	mov	r2, r3
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	01db      	lsls	r3, r3, #7
 800586c:	4413      	add	r3, r2
 800586e:	3384      	adds	r3, #132	; 0x84
 8005870:	461a      	mov	r2, r3
 8005872:	2300      	movs	r3, #0
 8005874:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	461a      	mov	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	01db      	lsls	r3, r3, #7
 8005880:	4413      	add	r3, r2
 8005882:	3384      	adds	r3, #132	; 0x84
 8005884:	461a      	mov	r2, r3
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800588a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800588c:	68bb      	ldr	r3, [r7, #8]
 800588e:	691b      	ldr	r3, [r3, #16]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d102      	bne.n	800589a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8005894:	2304      	movs	r3, #4
 8005896:	61fb      	str	r3, [r7, #28]
 8005898:	e01b      	b.n	80058d2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d102      	bne.n	80058a8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80058a2:	2303      	movs	r3, #3
 80058a4:	61fb      	str	r3, [r7, #28]
 80058a6:	e014      	b.n	80058d2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	691b      	ldr	r3, [r3, #16]
 80058ac:	2b04      	cmp	r3, #4
 80058ae:	d00b      	beq.n	80058c8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80058b4:	2b02      	cmp	r3, #2
 80058b6:	d007      	beq.n	80058c8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80058bc:	2b03      	cmp	r3, #3
 80058be:	d003      	beq.n	80058c8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80058c4:	2b07      	cmp	r3, #7
 80058c6:	d102      	bne.n	80058ce <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80058c8:	2302      	movs	r3, #2
 80058ca:	61fb      	str	r3, [r7, #28]
 80058cc:	e001      	b.n	80058d2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80058ce:	2301      	movs	r3, #1
 80058d0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	461a      	mov	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	01db      	lsls	r3, r3, #7
 80058dc:	4413      	add	r3, r2
 80058de:	3384      	adds	r3, #132	; 0x84
 80058e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	6812      	ldr	r2, [r2, #0]
 80058e6:	4611      	mov	r1, r2
 80058e8:	687a      	ldr	r2, [r7, #4]
 80058ea:	01d2      	lsls	r2, r2, #7
 80058ec:	440a      	add	r2, r1
 80058ee:	3284      	adds	r2, #132	; 0x84
 80058f0:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80058f4:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80058f6:	68bb      	ldr	r3, [r7, #8]
 80058f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fa:	69fa      	ldr	r2, [r7, #28]
 80058fc:	fb02 f303 	mul.w	r3, r2, r3
 8005900:	041a      	lsls	r2, r3, #16
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	6859      	ldr	r1, [r3, #4]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	1acb      	subs	r3, r1, r3
 800590c:	69f9      	ldr	r1, [r7, #28]
 800590e:	fb01 f303 	mul.w	r3, r1, r3
 8005912:	3303      	adds	r3, #3
 8005914:	68f9      	ldr	r1, [r7, #12]
 8005916:	6809      	ldr	r1, [r1, #0]
 8005918:	4608      	mov	r0, r1
 800591a:	6879      	ldr	r1, [r7, #4]
 800591c:	01c9      	lsls	r1, r1, #7
 800591e:	4401      	add	r1, r0
 8005920:	3184      	adds	r1, #132	; 0x84
 8005922:	4313      	orrs	r3, r2
 8005924:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	461a      	mov	r2, r3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	01db      	lsls	r3, r3, #7
 8005930:	4413      	add	r3, r2
 8005932:	3384      	adds	r3, #132	; 0x84
 8005934:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4619      	mov	r1, r3
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	01db      	lsls	r3, r3, #7
 8005940:	440b      	add	r3, r1
 8005942:	3384      	adds	r3, #132	; 0x84
 8005944:	4619      	mov	r1, r3
 8005946:	4b14      	ldr	r3, [pc, #80]	; (8005998 <LTDC_SetConfig+0x330>)
 8005948:	4013      	ands	r3, r2
 800594a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	461a      	mov	r2, r3
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	01db      	lsls	r3, r3, #7
 8005956:	4413      	add	r3, r2
 8005958:	3384      	adds	r3, #132	; 0x84
 800595a:	461a      	mov	r2, r3
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005960:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	461a      	mov	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	01db      	lsls	r3, r3, #7
 800596c:	4413      	add	r3, r2
 800596e:	3384      	adds	r3, #132	; 0x84
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	6812      	ldr	r2, [r2, #0]
 8005976:	4611      	mov	r1, r2
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	01d2      	lsls	r2, r2, #7
 800597c:	440a      	add	r2, r1
 800597e:	3284      	adds	r2, #132	; 0x84
 8005980:	f043 0301 	orr.w	r3, r3, #1
 8005984:	6013      	str	r3, [r2, #0]
}
 8005986:	bf00      	nop
 8005988:	3724      	adds	r7, #36	; 0x24
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr
 8005992:	bf00      	nop
 8005994:	fffff8f8 	.word	0xfffff8f8
 8005998:	fffff800 	.word	0xfffff800

0800599c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800599c:	b480      	push	{r7}
 800599e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059a0:	4b05      	ldr	r3, [pc, #20]	; (80059b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a04      	ldr	r2, [pc, #16]	; (80059b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80059a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059aa:	6013      	str	r3, [r2, #0]
}
 80059ac:	bf00      	nop
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	40007000 	.word	0x40007000

080059bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80059c2:	2300      	movs	r3, #0
 80059c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80059c6:	4b23      	ldr	r3, [pc, #140]	; (8005a54 <HAL_PWREx_EnableOverDrive+0x98>)
 80059c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ca:	4a22      	ldr	r2, [pc, #136]	; (8005a54 <HAL_PWREx_EnableOverDrive+0x98>)
 80059cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059d0:	6413      	str	r3, [r2, #64]	; 0x40
 80059d2:	4b20      	ldr	r3, [pc, #128]	; (8005a54 <HAL_PWREx_EnableOverDrive+0x98>)
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059da:	603b      	str	r3, [r7, #0]
 80059dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80059de:	4b1e      	ldr	r3, [pc, #120]	; (8005a58 <HAL_PWREx_EnableOverDrive+0x9c>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a1d      	ldr	r2, [pc, #116]	; (8005a58 <HAL_PWREx_EnableOverDrive+0x9c>)
 80059e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059e8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80059ea:	f7fb f8a5 	bl	8000b38 <HAL_GetTick>
 80059ee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80059f0:	e009      	b.n	8005a06 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80059f2:	f7fb f8a1 	bl	8000b38 <HAL_GetTick>
 80059f6:	4602      	mov	r2, r0
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a00:	d901      	bls.n	8005a06 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8005a02:	2303      	movs	r3, #3
 8005a04:	e022      	b.n	8005a4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8005a06:	4b14      	ldr	r3, [pc, #80]	; (8005a58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a08:	685b      	ldr	r3, [r3, #4]
 8005a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a12:	d1ee      	bne.n	80059f2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8005a14:	4b10      	ldr	r3, [pc, #64]	; (8005a58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	4a0f      	ldr	r2, [pc, #60]	; (8005a58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a1e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a20:	f7fb f88a 	bl	8000b38 <HAL_GetTick>
 8005a24:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005a26:	e009      	b.n	8005a3c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8005a28:	f7fb f886 	bl	8000b38 <HAL_GetTick>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005a36:	d901      	bls.n	8005a3c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8005a38:	2303      	movs	r3, #3
 8005a3a:	e007      	b.n	8005a4c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8005a3c:	4b06      	ldr	r3, [pc, #24]	; (8005a58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8005a3e:	685b      	ldr	r3, [r3, #4]
 8005a40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a44:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a48:	d1ee      	bne.n	8005a28 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	40023800 	.word	0x40023800
 8005a58:	40007000 	.word	0x40007000

08005a5c <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and creates the associated handle.
  * @param hqspi qspi handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af02      	add	r7, sp, #8
 8005a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8005a68:	f7fb f866 	bl	8000b38 <HAL_GetTick>
 8005a6c:	60b8      	str	r0, [r7, #8]
  
  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d101      	bne.n	8005a78 <HAL_QSPI_Init+0x1c>
  {
    return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e073      	b.n	8005b60 <HAL_QSPI_Init+0x104>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
  
  /* Process locked */
  __HAL_LOCK(hqspi);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2b01      	cmp	r3, #1
 8005a82:	d101      	bne.n	8005a88 <HAL_QSPI_Init+0x2c>
 8005a84:	2302      	movs	r3, #2
 8005a86:	e06b      	b.n	8005b60 <HAL_QSPI_Init+0x104>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d10b      	bne.n	8005ab4 <HAL_QSPI_Init+0x58>
  { 
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8005aa4:	6878      	ldr	r0, [r7, #4]
 8005aa6:	f013 f955 	bl	8018d54 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QPSI_TIMEOUT_DEFAULT_VALUE);
 8005aaa:	f241 3188 	movw	r1, #5000	; 0x1388
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 f85e 	bl	8005b70 <HAL_QSPI_SetTimeout>
  }
  
  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES, ((hqspi->Init.FifoThreshold - 1) << 8));
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	3b01      	subs	r3, #1
 8005ac4:	021a      	lsls	r2, r3, #8
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	430a      	orrs	r2, r1
 8005acc:	601a      	str	r2, [r3, #0]

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ad2:	9300      	str	r3, [sp, #0]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	2120      	movs	r1, #32
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f856 	bl	8005b8c <QSPI_WaitFlagStateUntilTimeout>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d135      	bne.n	8005b56 <HAL_QSPI_Init+0xfa>
  {
                
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR,(QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM), ((hqspi->Init.ClockPrescaler << 24)| hqspi->Init.SampleShifting | hqspi->Init.FlashID| hqspi->Init.DualFlash ));
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	681a      	ldr	r2, [r3, #0]
 8005af0:	4b1d      	ldr	r3, [pc, #116]	; (8005b68 <HAL_QSPI_Init+0x10c>)
 8005af2:	4013      	ands	r3, r2
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6852      	ldr	r2, [r2, #4]
 8005af8:	0611      	lsls	r1, r2, #24
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	68d2      	ldr	r2, [r2, #12]
 8005afe:	4311      	orrs	r1, r2
 8005b00:	687a      	ldr	r2, [r7, #4]
 8005b02:	69d2      	ldr	r2, [r2, #28]
 8005b04:	4311      	orrs	r1, r2
 8005b06:	687a      	ldr	r2, [r7, #4]
 8005b08:	6a12      	ldr	r2, [r2, #32]
 8005b0a:	4311      	orrs	r1, r2
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	6812      	ldr	r2, [r2, #0]
 8005b10:	430b      	orrs	r3, r1
 8005b12:	6013      	str	r3, [r2, #0]
        
    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE), 
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	4b14      	ldr	r3, [pc, #80]	; (8005b6c <HAL_QSPI_Init+0x110>)
 8005b1c:	4013      	ands	r3, r2
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	6912      	ldr	r2, [r2, #16]
 8005b22:	0411      	lsls	r1, r2, #16
 8005b24:	687a      	ldr	r2, [r7, #4]
 8005b26:	6952      	ldr	r2, [r2, #20]
 8005b28:	4311      	orrs	r1, r2
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	6992      	ldr	r2, [r2, #24]
 8005b2e:	4311      	orrs	r1, r2
 8005b30:	687a      	ldr	r2, [r7, #4]
 8005b32:	6812      	ldr	r2, [r2, #0]
 8005b34:	430b      	orrs	r3, r1
 8005b36:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << 16) | hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));
    
    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0201 	orr.w	r2, r2, #1
 8005b46:	601a      	str	r2, [r3, #0]
  
    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;  
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Return function status */
  return status;
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}
 8005b68:	00ffff2f 	.word	0x00ffff2f
 8005b6c:	ffe0f8fe 	.word	0xffe0f8fe

08005b70 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8005b70:	b480      	push	{r7}
 8005b72:	b083      	sub	sp, #12
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
 8005b78:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	649a      	str	r2, [r3, #72]	; 0x48
}
 8005b80:	bf00      	nop
 8005b82:	370c      	adds	r7, #12
 8005b84:	46bd      	mov	sp, r7
 8005b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8a:	4770      	bx	lr

08005b8c <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the time out
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag, 
                                                        FlagStatus State, uint32_t tickstart, uint32_t Timeout)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	603b      	str	r3, [r7, #0]
 8005b98:	4613      	mov	r3, r2
 8005b9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */    
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005b9c:	e01a      	b.n	8005bd4 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b9e:	69bb      	ldr	r3, [r7, #24]
 8005ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ba4:	d016      	beq.n	8005bd4 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart) > Timeout))
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d007      	beq.n	8005bbc <QSPI_WaitFlagStateUntilTimeout+0x30>
 8005bac:	f7fa ffc4 	bl	8000b38 <HAL_GetTick>
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	1ad3      	subs	r3, r2, r3
 8005bb6:	69ba      	ldr	r2, [r7, #24]
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d20b      	bcs.n	8005bd4 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2204      	movs	r2, #4
 8005bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc8:	f043 0201 	orr.w	r2, r3, #1
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	645a      	str	r2, [r3, #68]	; 0x44
        
        return HAL_ERROR;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e00e      	b.n	8005bf2 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((FlagStatus)(__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689a      	ldr	r2, [r3, #8]
 8005bda:	68bb      	ldr	r3, [r7, #8]
 8005bdc:	4013      	ands	r3, r2
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	bf14      	ite	ne
 8005be2:	2301      	movne	r3, #1
 8005be4:	2300      	moveq	r3, #0
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	461a      	mov	r2, r3
 8005bea:	79fb      	ldrb	r3, [r7, #7]
 8005bec:	429a      	cmp	r2, r3
 8005bee:	d1d6      	bne.n	8005b9e <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	3710      	adds	r7, #16
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	bd80      	pop	{r7, pc}
	...

08005bfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b086      	sub	sp, #24
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8005c04:	2300      	movs	r3, #0
 8005c06:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	e25c      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0301 	and.w	r3, r3, #1
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 8087 	beq.w	8005d2e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005c20:	4b96      	ldr	r3, [pc, #600]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c22:	689b      	ldr	r3, [r3, #8]
 8005c24:	f003 030c 	and.w	r3, r3, #12
 8005c28:	2b04      	cmp	r3, #4
 8005c2a:	d00c      	beq.n	8005c46 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005c2c:	4b93      	ldr	r3, [pc, #588]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	f003 030c 	and.w	r3, r3, #12
 8005c34:	2b08      	cmp	r3, #8
 8005c36:	d112      	bne.n	8005c5e <HAL_RCC_OscConfig+0x62>
 8005c38:	4b90      	ldr	r3, [pc, #576]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c44:	d10b      	bne.n	8005c5e <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c46:	4b8d      	ldr	r3, [pc, #564]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d06c      	beq.n	8005d2c <HAL_RCC_OscConfig+0x130>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d168      	bne.n	8005d2c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e236      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c66:	d106      	bne.n	8005c76 <HAL_RCC_OscConfig+0x7a>
 8005c68:	4b84      	ldr	r3, [pc, #528]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a83      	ldr	r2, [pc, #524]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c72:	6013      	str	r3, [r2, #0]
 8005c74:	e02e      	b.n	8005cd4 <HAL_RCC_OscConfig+0xd8>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10c      	bne.n	8005c98 <HAL_RCC_OscConfig+0x9c>
 8005c7e:	4b7f      	ldr	r3, [pc, #508]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4a7e      	ldr	r2, [pc, #504]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c88:	6013      	str	r3, [r2, #0]
 8005c8a:	4b7c      	ldr	r3, [pc, #496]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a7b      	ldr	r2, [pc, #492]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005c90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c94:	6013      	str	r3, [r2, #0]
 8005c96:	e01d      	b.n	8005cd4 <HAL_RCC_OscConfig+0xd8>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ca0:	d10c      	bne.n	8005cbc <HAL_RCC_OscConfig+0xc0>
 8005ca2:	4b76      	ldr	r3, [pc, #472]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a75      	ldr	r2, [pc, #468]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005ca8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005cac:	6013      	str	r3, [r2, #0]
 8005cae:	4b73      	ldr	r3, [pc, #460]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a72      	ldr	r2, [pc, #456]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005cb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	e00b      	b.n	8005cd4 <HAL_RCC_OscConfig+0xd8>
 8005cbc:	4b6f      	ldr	r3, [pc, #444]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a6e      	ldr	r2, [pc, #440]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005cc6:	6013      	str	r3, [r2, #0]
 8005cc8:	4b6c      	ldr	r3, [pc, #432]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	4a6b      	ldr	r2, [pc, #428]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005cce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	685b      	ldr	r3, [r3, #4]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d013      	beq.n	8005d04 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cdc:	f7fa ff2c 	bl	8000b38 <HAL_GetTick>
 8005ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ce2:	e008      	b.n	8005cf6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005ce4:	f7fa ff28 	bl	8000b38 <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	2b64      	cmp	r3, #100	; 0x64
 8005cf0:	d901      	bls.n	8005cf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005cf2:	2303      	movs	r3, #3
 8005cf4:	e1ea      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cf6:	4b61      	ldr	r3, [pc, #388]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d0f0      	beq.n	8005ce4 <HAL_RCC_OscConfig+0xe8>
 8005d02:	e014      	b.n	8005d2e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d04:	f7fa ff18 	bl	8000b38 <HAL_GetTick>
 8005d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d0a:	e008      	b.n	8005d1e <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d0c:	f7fa ff14 	bl	8000b38 <HAL_GetTick>
 8005d10:	4602      	mov	r2, r0
 8005d12:	693b      	ldr	r3, [r7, #16]
 8005d14:	1ad3      	subs	r3, r2, r3
 8005d16:	2b64      	cmp	r3, #100	; 0x64
 8005d18:	d901      	bls.n	8005d1e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8005d1a:	2303      	movs	r3, #3
 8005d1c:	e1d6      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d1e:	4b57      	ldr	r3, [pc, #348]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d1f0      	bne.n	8005d0c <HAL_RCC_OscConfig+0x110>
 8005d2a:	e000      	b.n	8005d2e <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0302 	and.w	r3, r3, #2
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d069      	beq.n	8005e0e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d3a:	4b50      	ldr	r3, [pc, #320]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	f003 030c 	and.w	r3, r3, #12
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d00b      	beq.n	8005d5e <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005d46:	4b4d      	ldr	r3, [pc, #308]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005d48:	689b      	ldr	r3, [r3, #8]
 8005d4a:	f003 030c 	and.w	r3, r3, #12
 8005d4e:	2b08      	cmp	r3, #8
 8005d50:	d11c      	bne.n	8005d8c <HAL_RCC_OscConfig+0x190>
 8005d52:	4b4a      	ldr	r3, [pc, #296]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005d54:	685b      	ldr	r3, [r3, #4]
 8005d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d116      	bne.n	8005d8c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d5e:	4b47      	ldr	r3, [pc, #284]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0302 	and.w	r3, r3, #2
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d005      	beq.n	8005d76 <HAL_RCC_OscConfig+0x17a>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	68db      	ldr	r3, [r3, #12]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d001      	beq.n	8005d76 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e1aa      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d76:	4b41      	ldr	r3, [pc, #260]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	00db      	lsls	r3, r3, #3
 8005d84:	493d      	ldr	r1, [pc, #244]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005d86:	4313      	orrs	r3, r2
 8005d88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005d8a:	e040      	b.n	8005e0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d023      	beq.n	8005ddc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d94:	4b39      	ldr	r3, [pc, #228]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a38      	ldr	r2, [pc, #224]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005d9a:	f043 0301 	orr.w	r3, r3, #1
 8005d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005da0:	f7fa feca 	bl	8000b38 <HAL_GetTick>
 8005da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005da6:	e008      	b.n	8005dba <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005da8:	f7fa fec6 	bl	8000b38 <HAL_GetTick>
 8005dac:	4602      	mov	r2, r0
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	1ad3      	subs	r3, r2, r3
 8005db2:	2b02      	cmp	r3, #2
 8005db4:	d901      	bls.n	8005dba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8005db6:	2303      	movs	r3, #3
 8005db8:	e188      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dba:	4b30      	ldr	r3, [pc, #192]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d0f0      	beq.n	8005da8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dc6:	4b2d      	ldr	r3, [pc, #180]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	00db      	lsls	r3, r3, #3
 8005dd4:	4929      	ldr	r1, [pc, #164]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005dd6:	4313      	orrs	r3, r2
 8005dd8:	600b      	str	r3, [r1, #0]
 8005dda:	e018      	b.n	8005e0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005ddc:	4b27      	ldr	r3, [pc, #156]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a26      	ldr	r2, [pc, #152]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005de2:	f023 0301 	bic.w	r3, r3, #1
 8005de6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005de8:	f7fa fea6 	bl	8000b38 <HAL_GetTick>
 8005dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005dee:	e008      	b.n	8005e02 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005df0:	f7fa fea2 	bl	8000b38 <HAL_GetTick>
 8005df4:	4602      	mov	r2, r0
 8005df6:	693b      	ldr	r3, [r7, #16]
 8005df8:	1ad3      	subs	r3, r2, r3
 8005dfa:	2b02      	cmp	r3, #2
 8005dfc:	d901      	bls.n	8005e02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8005dfe:	2303      	movs	r3, #3
 8005e00:	e164      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e02:	4b1e      	ldr	r3, [pc, #120]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f003 0302 	and.w	r3, r3, #2
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d1f0      	bne.n	8005df0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0308 	and.w	r3, r3, #8
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d038      	beq.n	8005e8c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	695b      	ldr	r3, [r3, #20]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d019      	beq.n	8005e56 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e22:	4b16      	ldr	r3, [pc, #88]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005e24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e26:	4a15      	ldr	r2, [pc, #84]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005e28:	f043 0301 	orr.w	r3, r3, #1
 8005e2c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e2e:	f7fa fe83 	bl	8000b38 <HAL_GetTick>
 8005e32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e34:	e008      	b.n	8005e48 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e36:	f7fa fe7f 	bl	8000b38 <HAL_GetTick>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	1ad3      	subs	r3, r2, r3
 8005e40:	2b02      	cmp	r3, #2
 8005e42:	d901      	bls.n	8005e48 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005e44:	2303      	movs	r3, #3
 8005e46:	e141      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e48:	4b0c      	ldr	r3, [pc, #48]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005e4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e4c:	f003 0302 	and.w	r3, r3, #2
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d0f0      	beq.n	8005e36 <HAL_RCC_OscConfig+0x23a>
 8005e54:	e01a      	b.n	8005e8c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e56:	4b09      	ldr	r3, [pc, #36]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005e58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e5a:	4a08      	ldr	r2, [pc, #32]	; (8005e7c <HAL_RCC_OscConfig+0x280>)
 8005e5c:	f023 0301 	bic.w	r3, r3, #1
 8005e60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e62:	f7fa fe69 	bl	8000b38 <HAL_GetTick>
 8005e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e68:	e00a      	b.n	8005e80 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e6a:	f7fa fe65 	bl	8000b38 <HAL_GetTick>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d903      	bls.n	8005e80 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	e127      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
 8005e7c:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005e80:	4b94      	ldr	r3, [pc, #592]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005e82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d1ee      	bne.n	8005e6a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f003 0304 	and.w	r3, r3, #4
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f000 80a4 	beq.w	8005fe2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e9a:	4b8e      	ldr	r3, [pc, #568]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10d      	bne.n	8005ec2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8005ea6:	4b8b      	ldr	r3, [pc, #556]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eaa:	4a8a      	ldr	r2, [pc, #552]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8005eb2:	4b88      	ldr	r3, [pc, #544]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005eba:	60fb      	str	r3, [r7, #12]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ebe:	2301      	movs	r3, #1
 8005ec0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ec2:	4b85      	ldr	r3, [pc, #532]	; (80060d8 <HAL_RCC_OscConfig+0x4dc>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d118      	bne.n	8005f00 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8005ece:	4b82      	ldr	r3, [pc, #520]	; (80060d8 <HAL_RCC_OscConfig+0x4dc>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a81      	ldr	r2, [pc, #516]	; (80060d8 <HAL_RCC_OscConfig+0x4dc>)
 8005ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ed8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005eda:	f7fa fe2d 	bl	8000b38 <HAL_GetTick>
 8005ede:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ee0:	e008      	b.n	8005ef4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005ee2:	f7fa fe29 	bl	8000b38 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	693b      	ldr	r3, [r7, #16]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	2b64      	cmp	r3, #100	; 0x64
 8005eee:	d901      	bls.n	8005ef4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e0eb      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ef4:	4b78      	ldr	r3, [pc, #480]	; (80060d8 <HAL_RCC_OscConfig+0x4dc>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d0f0      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d106      	bne.n	8005f16 <HAL_RCC_OscConfig+0x31a>
 8005f08:	4b72      	ldr	r3, [pc, #456]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f0c:	4a71      	ldr	r2, [pc, #452]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f0e:	f043 0301 	orr.w	r3, r3, #1
 8005f12:	6713      	str	r3, [r2, #112]	; 0x70
 8005f14:	e02d      	b.n	8005f72 <HAL_RCC_OscConfig+0x376>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d10c      	bne.n	8005f38 <HAL_RCC_OscConfig+0x33c>
 8005f1e:	4b6d      	ldr	r3, [pc, #436]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f22:	4a6c      	ldr	r2, [pc, #432]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f24:	f023 0301 	bic.w	r3, r3, #1
 8005f28:	6713      	str	r3, [r2, #112]	; 0x70
 8005f2a:	4b6a      	ldr	r3, [pc, #424]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f2e:	4a69      	ldr	r2, [pc, #420]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f30:	f023 0304 	bic.w	r3, r3, #4
 8005f34:	6713      	str	r3, [r2, #112]	; 0x70
 8005f36:	e01c      	b.n	8005f72 <HAL_RCC_OscConfig+0x376>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	2b05      	cmp	r3, #5
 8005f3e:	d10c      	bne.n	8005f5a <HAL_RCC_OscConfig+0x35e>
 8005f40:	4b64      	ldr	r3, [pc, #400]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f44:	4a63      	ldr	r2, [pc, #396]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f46:	f043 0304 	orr.w	r3, r3, #4
 8005f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8005f4c:	4b61      	ldr	r3, [pc, #388]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f50:	4a60      	ldr	r2, [pc, #384]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f52:	f043 0301 	orr.w	r3, r3, #1
 8005f56:	6713      	str	r3, [r2, #112]	; 0x70
 8005f58:	e00b      	b.n	8005f72 <HAL_RCC_OscConfig+0x376>
 8005f5a:	4b5e      	ldr	r3, [pc, #376]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f5e:	4a5d      	ldr	r2, [pc, #372]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f60:	f023 0301 	bic.w	r3, r3, #1
 8005f64:	6713      	str	r3, [r2, #112]	; 0x70
 8005f66:	4b5b      	ldr	r3, [pc, #364]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f6a:	4a5a      	ldr	r2, [pc, #360]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f6c:	f023 0304 	bic.w	r3, r3, #4
 8005f70:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	689b      	ldr	r3, [r3, #8]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d015      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f7a:	f7fa fddd 	bl	8000b38 <HAL_GetTick>
 8005f7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f80:	e00a      	b.n	8005f98 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005f82:	f7fa fdd9 	bl	8000b38 <HAL_GetTick>
 8005f86:	4602      	mov	r2, r0
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	1ad3      	subs	r3, r2, r3
 8005f8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d901      	bls.n	8005f98 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8005f94:	2303      	movs	r3, #3
 8005f96:	e099      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f98:	4b4e      	ldr	r3, [pc, #312]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005f9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9c:	f003 0302 	and.w	r3, r3, #2
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d0ee      	beq.n	8005f82 <HAL_RCC_OscConfig+0x386>
 8005fa4:	e014      	b.n	8005fd0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fa6:	f7fa fdc7 	bl	8000b38 <HAL_GetTick>
 8005faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fac:	e00a      	b.n	8005fc4 <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fae:	f7fa fdc3 	bl	8000b38 <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	693b      	ldr	r3, [r7, #16]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	d901      	bls.n	8005fc4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8005fc0:	2303      	movs	r3, #3
 8005fc2:	e083      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005fc4:	4b43      	ldr	r3, [pc, #268]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc8:	f003 0302 	and.w	r3, r3, #2
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d1ee      	bne.n	8005fae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005fd0:	7dfb      	ldrb	r3, [r7, #23]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d105      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fd6:	4b3f      	ldr	r3, [pc, #252]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fda:	4a3e      	ldr	r2, [pc, #248]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005fdc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005fe0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	699b      	ldr	r3, [r3, #24]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d06f      	beq.n	80060ca <HAL_RCC_OscConfig+0x4ce>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005fea:	4b3a      	ldr	r3, [pc, #232]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8005fec:	689b      	ldr	r3, [r3, #8]
 8005fee:	f003 030c 	and.w	r3, r3, #12
 8005ff2:	2b08      	cmp	r3, #8
 8005ff4:	d067      	beq.n	80060c6 <HAL_RCC_OscConfig+0x4ca>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	699b      	ldr	r3, [r3, #24]
 8005ffa:	2b02      	cmp	r3, #2
 8005ffc:	d149      	bne.n	8006092 <HAL_RCC_OscConfig+0x496>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ffe:	4b35      	ldr	r3, [pc, #212]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a34      	ldr	r2, [pc, #208]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8006004:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800600a:	f7fa fd95 	bl	8000b38 <HAL_GetTick>
 800600e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006010:	e008      	b.n	8006024 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006012:	f7fa fd91 	bl	8000b38 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	2b02      	cmp	r3, #2
 800601e:	d901      	bls.n	8006024 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e053      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006024:	4b2b      	ldr	r3, [pc, #172]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1f0      	bne.n	8006012 <HAL_RCC_OscConfig+0x416>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	69da      	ldr	r2, [r3, #28]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a1b      	ldr	r3, [r3, #32]
 8006038:	431a      	orrs	r2, r3
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603e:	019b      	lsls	r3, r3, #6
 8006040:	431a      	orrs	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006046:	085b      	lsrs	r3, r3, #1
 8006048:	3b01      	subs	r3, #1
 800604a:	041b      	lsls	r3, r3, #16
 800604c:	431a      	orrs	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006052:	061b      	lsls	r3, r3, #24
 8006054:	4313      	orrs	r3, r2
 8006056:	4a1f      	ldr	r2, [pc, #124]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8006058:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800605c:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800605e:	4b1d      	ldr	r3, [pc, #116]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a1c      	ldr	r2, [pc, #112]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8006064:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006068:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800606a:	f7fa fd65 	bl	8000b38 <HAL_GetTick>
 800606e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006070:	e008      	b.n	8006084 <HAL_RCC_OscConfig+0x488>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006072:	f7fa fd61 	bl	8000b38 <HAL_GetTick>
 8006076:	4602      	mov	r2, r0
 8006078:	693b      	ldr	r3, [r7, #16]
 800607a:	1ad3      	subs	r3, r2, r3
 800607c:	2b02      	cmp	r3, #2
 800607e:	d901      	bls.n	8006084 <HAL_RCC_OscConfig+0x488>
          {
            return HAL_TIMEOUT;
 8006080:	2303      	movs	r3, #3
 8006082:	e023      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006084:	4b13      	ldr	r3, [pc, #76]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d0f0      	beq.n	8006072 <HAL_RCC_OscConfig+0x476>
 8006090:	e01b      	b.n	80060ca <HAL_RCC_OscConfig+0x4ce>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006092:	4b10      	ldr	r3, [pc, #64]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	4a0f      	ldr	r2, [pc, #60]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 8006098:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800609c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800609e:	f7fa fd4b 	bl	8000b38 <HAL_GetTick>
 80060a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060a4:	e008      	b.n	80060b8 <HAL_RCC_OscConfig+0x4bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060a6:	f7fa fd47 	bl	8000b38 <HAL_GetTick>
 80060aa:	4602      	mov	r2, r0
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	1ad3      	subs	r3, r2, r3
 80060b0:	2b02      	cmp	r3, #2
 80060b2:	d901      	bls.n	80060b8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e009      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060b8:	4b06      	ldr	r3, [pc, #24]	; (80060d4 <HAL_RCC_OscConfig+0x4d8>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d1f0      	bne.n	80060a6 <HAL_RCC_OscConfig+0x4aa>
 80060c4:	e001      	b.n	80060ca <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e000      	b.n	80060cc <HAL_RCC_OscConfig+0x4d0>
    }
  }
  return HAL_OK;
 80060ca:	2300      	movs	r3, #0
}
 80060cc:	4618      	mov	r0, r3
 80060ce:	3718      	adds	r7, #24
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bd80      	pop	{r7, pc}
 80060d4:	40023800 	.word	0x40023800
 80060d8:	40007000 	.word	0x40007000

080060dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80060e6:	2300      	movs	r3, #0
 80060e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d101      	bne.n	80060f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e0ce      	b.n	8006292 <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80060f4:	4b69      	ldr	r3, [pc, #420]	; (800629c <HAL_RCC_ClockConfig+0x1c0>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f003 030f 	and.w	r3, r3, #15
 80060fc:	683a      	ldr	r2, [r7, #0]
 80060fe:	429a      	cmp	r2, r3
 8006100:	d910      	bls.n	8006124 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006102:	4b66      	ldr	r3, [pc, #408]	; (800629c <HAL_RCC_ClockConfig+0x1c0>)
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f023 020f 	bic.w	r2, r3, #15
 800610a:	4964      	ldr	r1, [pc, #400]	; (800629c <HAL_RCC_ClockConfig+0x1c0>)
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	4313      	orrs	r3, r2
 8006110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006112:	4b62      	ldr	r3, [pc, #392]	; (800629c <HAL_RCC_ClockConfig+0x1c0>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 030f 	and.w	r3, r3, #15
 800611a:	683a      	ldr	r2, [r7, #0]
 800611c:	429a      	cmp	r2, r3
 800611e:	d001      	beq.n	8006124 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	e0b6      	b.n	8006292 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0302 	and.w	r3, r3, #2
 800612c:	2b00      	cmp	r3, #0
 800612e:	d020      	beq.n	8006172 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0304 	and.w	r3, r3, #4
 8006138:	2b00      	cmp	r3, #0
 800613a:	d005      	beq.n	8006148 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800613c:	4b58      	ldr	r3, [pc, #352]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 800613e:	689b      	ldr	r3, [r3, #8]
 8006140:	4a57      	ldr	r2, [pc, #348]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006142:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006146:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f003 0308 	and.w	r3, r3, #8
 8006150:	2b00      	cmp	r3, #0
 8006152:	d005      	beq.n	8006160 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006154:	4b52      	ldr	r3, [pc, #328]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	4a51      	ldr	r2, [pc, #324]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 800615a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800615e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006160:	4b4f      	ldr	r3, [pc, #316]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006162:	689b      	ldr	r3, [r3, #8]
 8006164:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	494c      	ldr	r1, [pc, #304]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 800616e:	4313      	orrs	r3, r2
 8006170:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f003 0301 	and.w	r3, r3, #1
 800617a:	2b00      	cmp	r3, #0
 800617c:	d040      	beq.n	8006200 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d107      	bne.n	8006196 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006186:	4b46      	ldr	r3, [pc, #280]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d115      	bne.n	80061be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006192:	2301      	movs	r3, #1
 8006194:	e07d      	b.n	8006292 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	2b02      	cmp	r3, #2
 800619c:	d107      	bne.n	80061ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800619e:	4b40      	ldr	r3, [pc, #256]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d109      	bne.n	80061be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80061aa:	2301      	movs	r3, #1
 80061ac:	e071      	b.n	8006292 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80061ae:	4b3c      	ldr	r3, [pc, #240]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0302 	and.w	r3, r3, #2
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80061ba:	2301      	movs	r3, #1
 80061bc:	e069      	b.n	8006292 <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80061be:	4b38      	ldr	r3, [pc, #224]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 80061c0:	689b      	ldr	r3, [r3, #8]
 80061c2:	f023 0203 	bic.w	r2, r3, #3
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	4935      	ldr	r1, [pc, #212]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 80061cc:	4313      	orrs	r3, r2
 80061ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80061d0:	f7fa fcb2 	bl	8000b38 <HAL_GetTick>
 80061d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061d6:	e00a      	b.n	80061ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061d8:	f7fa fcae 	bl	8000b38 <HAL_GetTick>
 80061dc:	4602      	mov	r2, r0
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d901      	bls.n	80061ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80061ea:	2303      	movs	r3, #3
 80061ec:	e051      	b.n	8006292 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80061ee:	4b2c      	ldr	r3, [pc, #176]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f003 020c 	and.w	r2, r3, #12
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	009b      	lsls	r3, r3, #2
 80061fc:	429a      	cmp	r2, r3
 80061fe:	d1eb      	bne.n	80061d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006200:	4b26      	ldr	r3, [pc, #152]	; (800629c <HAL_RCC_ClockConfig+0x1c0>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 030f 	and.w	r3, r3, #15
 8006208:	683a      	ldr	r2, [r7, #0]
 800620a:	429a      	cmp	r2, r3
 800620c:	d210      	bcs.n	8006230 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800620e:	4b23      	ldr	r3, [pc, #140]	; (800629c <HAL_RCC_ClockConfig+0x1c0>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f023 020f 	bic.w	r2, r3, #15
 8006216:	4921      	ldr	r1, [pc, #132]	; (800629c <HAL_RCC_ClockConfig+0x1c0>)
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	4313      	orrs	r3, r2
 800621c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800621e:	4b1f      	ldr	r3, [pc, #124]	; (800629c <HAL_RCC_ClockConfig+0x1c0>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 030f 	and.w	r3, r3, #15
 8006226:	683a      	ldr	r2, [r7, #0]
 8006228:	429a      	cmp	r2, r3
 800622a:	d001      	beq.n	8006230 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e030      	b.n	8006292 <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f003 0304 	and.w	r3, r3, #4
 8006238:	2b00      	cmp	r3, #0
 800623a:	d008      	beq.n	800624e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800623c:	4b18      	ldr	r3, [pc, #96]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	68db      	ldr	r3, [r3, #12]
 8006248:	4915      	ldr	r1, [pc, #84]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 800624a:	4313      	orrs	r3, r2
 800624c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0308 	and.w	r3, r3, #8
 8006256:	2b00      	cmp	r3, #0
 8006258:	d009      	beq.n	800626e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800625a:	4b11      	ldr	r3, [pc, #68]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	00db      	lsls	r3, r3, #3
 8006268:	490d      	ldr	r1, [pc, #52]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 800626a:	4313      	orrs	r3, r2
 800626c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800626e:	f000 f81d 	bl	80062ac <HAL_RCC_GetSysClockFreq>
 8006272:	4601      	mov	r1, r0
 8006274:	4b0a      	ldr	r3, [pc, #40]	; (80062a0 <HAL_RCC_ClockConfig+0x1c4>)
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	091b      	lsrs	r3, r3, #4
 800627a:	f003 030f 	and.w	r3, r3, #15
 800627e:	4a09      	ldr	r2, [pc, #36]	; (80062a4 <HAL_RCC_ClockConfig+0x1c8>)
 8006280:	5cd3      	ldrb	r3, [r2, r3]
 8006282:	fa21 f303 	lsr.w	r3, r1, r3
 8006286:	4a08      	ldr	r2, [pc, #32]	; (80062a8 <HAL_RCC_ClockConfig+0x1cc>)
 8006288:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800628a:	2000      	movs	r0, #0
 800628c:	f013 f936 	bl	80194fc <HAL_InitTick>

  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	40023c00 	.word	0x40023c00
 80062a0:	40023800 	.word	0x40023800
 80062a4:	08024b94 	.word	0x08024b94
 80062a8:	20000070 	.word	0x20000070

080062ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80062ae:	b085      	sub	sp, #20
 80062b0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80062b2:	2300      	movs	r3, #0
 80062b4:	607b      	str	r3, [r7, #4]
 80062b6:	2300      	movs	r3, #0
 80062b8:	60fb      	str	r3, [r7, #12]
 80062ba:	2300      	movs	r3, #0
 80062bc:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80062be:	2300      	movs	r3, #0
 80062c0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80062c2:	4b50      	ldr	r3, [pc, #320]	; (8006404 <HAL_RCC_GetSysClockFreq+0x158>)
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f003 030c 	and.w	r3, r3, #12
 80062ca:	2b04      	cmp	r3, #4
 80062cc:	d007      	beq.n	80062de <HAL_RCC_GetSysClockFreq+0x32>
 80062ce:	2b08      	cmp	r3, #8
 80062d0:	d008      	beq.n	80062e4 <HAL_RCC_GetSysClockFreq+0x38>
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	f040 808d 	bne.w	80063f2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80062d8:	4b4b      	ldr	r3, [pc, #300]	; (8006408 <HAL_RCC_GetSysClockFreq+0x15c>)
 80062da:	60bb      	str	r3, [r7, #8]
       break;
 80062dc:	e08c      	b.n	80063f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80062de:	4b4b      	ldr	r3, [pc, #300]	; (800640c <HAL_RCC_GetSysClockFreq+0x160>)
 80062e0:	60bb      	str	r3, [r7, #8]
      break;
 80062e2:	e089      	b.n	80063f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80062e4:	4b47      	ldr	r3, [pc, #284]	; (8006404 <HAL_RCC_GetSysClockFreq+0x158>)
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80062ec:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80062ee:	4b45      	ldr	r3, [pc, #276]	; (8006404 <HAL_RCC_GetSysClockFreq+0x158>)
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d023      	beq.n	8006342 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062fa:	4b42      	ldr	r3, [pc, #264]	; (8006404 <HAL_RCC_GetSysClockFreq+0x158>)
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	099b      	lsrs	r3, r3, #6
 8006300:	f04f 0400 	mov.w	r4, #0
 8006304:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006308:	f04f 0200 	mov.w	r2, #0
 800630c:	ea03 0501 	and.w	r5, r3, r1
 8006310:	ea04 0602 	and.w	r6, r4, r2
 8006314:	4a3d      	ldr	r2, [pc, #244]	; (800640c <HAL_RCC_GetSysClockFreq+0x160>)
 8006316:	fb02 f106 	mul.w	r1, r2, r6
 800631a:	2200      	movs	r2, #0
 800631c:	fb02 f205 	mul.w	r2, r2, r5
 8006320:	440a      	add	r2, r1
 8006322:	493a      	ldr	r1, [pc, #232]	; (800640c <HAL_RCC_GetSysClockFreq+0x160>)
 8006324:	fba5 0101 	umull	r0, r1, r5, r1
 8006328:	1853      	adds	r3, r2, r1
 800632a:	4619      	mov	r1, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f04f 0400 	mov.w	r4, #0
 8006332:	461a      	mov	r2, r3
 8006334:	4623      	mov	r3, r4
 8006336:	f7f9 ffbb 	bl	80002b0 <__aeabi_uldivmod>
 800633a:	4603      	mov	r3, r0
 800633c:	460c      	mov	r4, r1
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	e049      	b.n	80063d6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006342:	4b30      	ldr	r3, [pc, #192]	; (8006404 <HAL_RCC_GetSysClockFreq+0x158>)
 8006344:	685b      	ldr	r3, [r3, #4]
 8006346:	099b      	lsrs	r3, r3, #6
 8006348:	f04f 0400 	mov.w	r4, #0
 800634c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8006350:	f04f 0200 	mov.w	r2, #0
 8006354:	ea03 0501 	and.w	r5, r3, r1
 8006358:	ea04 0602 	and.w	r6, r4, r2
 800635c:	4629      	mov	r1, r5
 800635e:	4632      	mov	r2, r6
 8006360:	f04f 0300 	mov.w	r3, #0
 8006364:	f04f 0400 	mov.w	r4, #0
 8006368:	0154      	lsls	r4, r2, #5
 800636a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800636e:	014b      	lsls	r3, r1, #5
 8006370:	4619      	mov	r1, r3
 8006372:	4622      	mov	r2, r4
 8006374:	1b49      	subs	r1, r1, r5
 8006376:	eb62 0206 	sbc.w	r2, r2, r6
 800637a:	f04f 0300 	mov.w	r3, #0
 800637e:	f04f 0400 	mov.w	r4, #0
 8006382:	0194      	lsls	r4, r2, #6
 8006384:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006388:	018b      	lsls	r3, r1, #6
 800638a:	1a5b      	subs	r3, r3, r1
 800638c:	eb64 0402 	sbc.w	r4, r4, r2
 8006390:	f04f 0100 	mov.w	r1, #0
 8006394:	f04f 0200 	mov.w	r2, #0
 8006398:	00e2      	lsls	r2, r4, #3
 800639a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800639e:	00d9      	lsls	r1, r3, #3
 80063a0:	460b      	mov	r3, r1
 80063a2:	4614      	mov	r4, r2
 80063a4:	195b      	adds	r3, r3, r5
 80063a6:	eb44 0406 	adc.w	r4, r4, r6
 80063aa:	f04f 0100 	mov.w	r1, #0
 80063ae:	f04f 0200 	mov.w	r2, #0
 80063b2:	02a2      	lsls	r2, r4, #10
 80063b4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80063b8:	0299      	lsls	r1, r3, #10
 80063ba:	460b      	mov	r3, r1
 80063bc:	4614      	mov	r4, r2
 80063be:	4618      	mov	r0, r3
 80063c0:	4621      	mov	r1, r4
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f04f 0400 	mov.w	r4, #0
 80063c8:	461a      	mov	r2, r3
 80063ca:	4623      	mov	r3, r4
 80063cc:	f7f9 ff70 	bl	80002b0 <__aeabi_uldivmod>
 80063d0:	4603      	mov	r3, r0
 80063d2:	460c      	mov	r4, r1
 80063d4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 80063d6:	4b0b      	ldr	r3, [pc, #44]	; (8006404 <HAL_RCC_GetSysClockFreq+0x158>)
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	0c1b      	lsrs	r3, r3, #16
 80063dc:	f003 0303 	and.w	r3, r3, #3
 80063e0:	3301      	adds	r3, #1
 80063e2:	005b      	lsls	r3, r3, #1
 80063e4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80063ee:	60bb      	str	r3, [r7, #8]
      break;
 80063f0:	e002      	b.n	80063f8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80063f2:	4b05      	ldr	r3, [pc, #20]	; (8006408 <HAL_RCC_GetSysClockFreq+0x15c>)
 80063f4:	60bb      	str	r3, [r7, #8]
      break;
 80063f6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80063f8:	68bb      	ldr	r3, [r7, #8]
}
 80063fa:	4618      	mov	r0, r3
 80063fc:	3714      	adds	r7, #20
 80063fe:	46bd      	mov	sp, r7
 8006400:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006402:	bf00      	nop
 8006404:	40023800 	.word	0x40023800
 8006408:	00f42400 	.word	0x00f42400
 800640c:	017d7840 	.word	0x017d7840

08006410 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006410:	b480      	push	{r7}
 8006412:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006414:	4b03      	ldr	r3, [pc, #12]	; (8006424 <HAL_RCC_GetHCLKFreq+0x14>)
 8006416:	681b      	ldr	r3, [r3, #0]
}
 8006418:	4618      	mov	r0, r3
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop
 8006424:	20000070 	.word	0x20000070

08006428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800642c:	f7ff fff0 	bl	8006410 <HAL_RCC_GetHCLKFreq>
 8006430:	4601      	mov	r1, r0
 8006432:	4b05      	ldr	r3, [pc, #20]	; (8006448 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006434:	689b      	ldr	r3, [r3, #8]
 8006436:	0a9b      	lsrs	r3, r3, #10
 8006438:	f003 0307 	and.w	r3, r3, #7
 800643c:	4a03      	ldr	r2, [pc, #12]	; (800644c <HAL_RCC_GetPCLK1Freq+0x24>)
 800643e:	5cd3      	ldrb	r3, [r2, r3]
 8006440:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006444:	4618      	mov	r0, r3
 8006446:	bd80      	pop	{r7, pc}
 8006448:	40023800 	.word	0x40023800
 800644c:	08024ba4 	.word	0x08024ba4

08006450 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006454:	f7ff ffdc 	bl	8006410 <HAL_RCC_GetHCLKFreq>
 8006458:	4601      	mov	r1, r0
 800645a:	4b05      	ldr	r3, [pc, #20]	; (8006470 <HAL_RCC_GetPCLK2Freq+0x20>)
 800645c:	689b      	ldr	r3, [r3, #8]
 800645e:	0b5b      	lsrs	r3, r3, #13
 8006460:	f003 0307 	and.w	r3, r3, #7
 8006464:	4a03      	ldr	r2, [pc, #12]	; (8006474 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006466:	5cd3      	ldrb	r3, [r2, r3]
 8006468:	fa21 f303 	lsr.w	r3, r1, r3
}
 800646c:	4618      	mov	r0, r3
 800646e:	bd80      	pop	{r7, pc}
 8006470:	40023800 	.word	0x40023800
 8006474:	08024ba4 	.word	0x08024ba4

08006478 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006478:	b480      	push	{r7}
 800647a:	b083      	sub	sp, #12
 800647c:	af00      	add	r7, sp, #0
 800647e:	6078      	str	r0, [r7, #4]
 8006480:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	220f      	movs	r2, #15
 8006486:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006488:	4b12      	ldr	r3, [pc, #72]	; (80064d4 <HAL_RCC_GetClockConfig+0x5c>)
 800648a:	689b      	ldr	r3, [r3, #8]
 800648c:	f003 0203 	and.w	r2, r3, #3
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006494:	4b0f      	ldr	r3, [pc, #60]	; (80064d4 <HAL_RCC_GetClockConfig+0x5c>)
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80064a0:	4b0c      	ldr	r3, [pc, #48]	; (80064d4 <HAL_RCC_GetClockConfig+0x5c>)
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80064ac:	4b09      	ldr	r3, [pc, #36]	; (80064d4 <HAL_RCC_GetClockConfig+0x5c>)
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	08db      	lsrs	r3, r3, #3
 80064b2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80064ba:	4b07      	ldr	r3, [pc, #28]	; (80064d8 <HAL_RCC_GetClockConfig+0x60>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 020f 	and.w	r2, r3, #15
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	601a      	str	r2, [r3, #0]
}
 80064c6:	bf00      	nop
 80064c8:	370c      	adds	r7, #12
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr
 80064d2:	bf00      	nop
 80064d4:	40023800 	.word	0x40023800
 80064d8:	40023c00 	.word	0x40023c00

080064dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b088      	sub	sp, #32
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80064e4:	2300      	movs	r3, #0
 80064e6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80064e8:	2300      	movs	r3, #0
 80064ea:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80064ec:	2300      	movs	r3, #0
 80064ee:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80064f0:	2300      	movs	r3, #0
 80064f2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80064f4:	2300      	movs	r3, #0
 80064f6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0301 	and.w	r3, r3, #1
 8006500:	2b00      	cmp	r3, #0
 8006502:	d012      	beq.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006504:	4b69      	ldr	r3, [pc, #420]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	4a68      	ldr	r2, [pc, #416]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800650a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800650e:	6093      	str	r3, [r2, #8]
 8006510:	4b66      	ldr	r3, [pc, #408]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006512:	689a      	ldr	r2, [r3, #8]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006518:	4964      	ldr	r1, [pc, #400]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800651a:	4313      	orrs	r3, r2
 800651c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006526:	2301      	movs	r3, #1
 8006528:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006532:	2b00      	cmp	r3, #0
 8006534:	d017      	beq.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006536:	4b5d      	ldr	r3, [pc, #372]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800653c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006544:	4959      	ldr	r1, [pc, #356]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006546:	4313      	orrs	r3, r2
 8006548:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006550:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006554:	d101      	bne.n	800655a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006556:	2301      	movs	r3, #1
 8006558:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800655e:	2b00      	cmp	r3, #0
 8006560:	d101      	bne.n	8006566 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006562:	2301      	movs	r3, #1
 8006564:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800656e:	2b00      	cmp	r3, #0
 8006570:	d017      	beq.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006572:	4b4e      	ldr	r3, [pc, #312]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006578:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006580:	494a      	ldr	r1, [pc, #296]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006582:	4313      	orrs	r3, r2
 8006584:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006590:	d101      	bne.n	8006596 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006592:	2301      	movs	r3, #1
 8006594:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800659a:	2b00      	cmp	r3, #0
 800659c:	d101      	bne.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800659e:	2301      	movs	r3, #1
 80065a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d001      	beq.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80065ae:	2301      	movs	r3, #1
 80065b0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0320 	and.w	r3, r3, #32
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	f000 808b 	beq.w	80066d6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80065c0:	4b3a      	ldr	r3, [pc, #232]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065c4:	4a39      	ldr	r2, [pc, #228]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065ca:	6413      	str	r3, [r2, #64]	; 0x40
 80065cc:	4b37      	ldr	r3, [pc, #220]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80065ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065d4:	60bb      	str	r3, [r7, #8]
 80065d6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80065d8:	4b35      	ldr	r3, [pc, #212]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a34      	ldr	r2, [pc, #208]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80065de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80065e4:	f7fa faa8 	bl	8000b38 <HAL_GetTick>
 80065e8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80065ea:	e008      	b.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065ec:	f7fa faa4 	bl	8000b38 <HAL_GetTick>
 80065f0:	4602      	mov	r2, r0
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	1ad3      	subs	r3, r2, r3
 80065f6:	2b64      	cmp	r3, #100	; 0x64
 80065f8:	d901      	bls.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80065fa:	2303      	movs	r3, #3
 80065fc:	e355      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80065fe:	4b2c      	ldr	r3, [pc, #176]	; (80066b0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006606:	2b00      	cmp	r3, #0
 8006608:	d0f0      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800660a:	4b28      	ldr	r3, [pc, #160]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800660c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006612:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d035      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800661e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	429a      	cmp	r2, r3
 8006626:	d02e      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006628:	4b20      	ldr	r3, [pc, #128]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800662a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800662c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006630:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006632:	4b1e      	ldr	r3, [pc, #120]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006636:	4a1d      	ldr	r2, [pc, #116]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800663c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800663e:	4b1b      	ldr	r3, [pc, #108]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006642:	4a1a      	ldr	r2, [pc, #104]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006644:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006648:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800664a:	4a18      	ldr	r2, [pc, #96]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006650:	4b16      	ldr	r3, [pc, #88]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	2b01      	cmp	r3, #1
 800665a:	d114      	bne.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800665c:	f7fa fa6c 	bl	8000b38 <HAL_GetTick>
 8006660:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006662:	e00a      	b.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006664:	f7fa fa68 	bl	8000b38 <HAL_GetTick>
 8006668:	4602      	mov	r2, r0
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	1ad3      	subs	r3, r2, r3
 800666e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006672:	4293      	cmp	r3, r2
 8006674:	d901      	bls.n	800667a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e317      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800667a:	4b0c      	ldr	r3, [pc, #48]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800667c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800667e:	f003 0302 	and.w	r3, r3, #2
 8006682:	2b00      	cmp	r3, #0
 8006684:	d0ee      	beq.n	8006664 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800668e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006692:	d111      	bne.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006694:	4b05      	ldr	r3, [pc, #20]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80066a0:	4b04      	ldr	r3, [pc, #16]	; (80066b4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80066a2:	400b      	ands	r3, r1
 80066a4:	4901      	ldr	r1, [pc, #4]	; (80066ac <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066a6:	4313      	orrs	r3, r2
 80066a8:	608b      	str	r3, [r1, #8]
 80066aa:	e00b      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80066ac:	40023800 	.word	0x40023800
 80066b0:	40007000 	.word	0x40007000
 80066b4:	0ffffcff 	.word	0x0ffffcff
 80066b8:	4bb0      	ldr	r3, [pc, #704]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	4aaf      	ldr	r2, [pc, #700]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066be:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80066c2:	6093      	str	r3, [r2, #8]
 80066c4:	4bad      	ldr	r3, [pc, #692]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066c6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066d0:	49aa      	ldr	r1, [pc, #680]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066d2:	4313      	orrs	r3, r2
 80066d4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f003 0310 	and.w	r3, r3, #16
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d010      	beq.n	8006704 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066e2:	4ba6      	ldr	r3, [pc, #664]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066e8:	4aa4      	ldr	r2, [pc, #656]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066ee:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80066f2:	4ba2      	ldr	r3, [pc, #648]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066f4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fc:	499f      	ldr	r1, [pc, #636]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800670c:	2b00      	cmp	r3, #0
 800670e:	d00a      	beq.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006710:	4b9a      	ldr	r3, [pc, #616]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006716:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800671e:	4997      	ldr	r1, [pc, #604]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006720:	4313      	orrs	r3, r2
 8006722:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00a      	beq.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006732:	4b92      	ldr	r3, [pc, #584]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006738:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006740:	498e      	ldr	r1, [pc, #568]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006742:	4313      	orrs	r3, r2
 8006744:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006750:	2b00      	cmp	r3, #0
 8006752:	d00a      	beq.n	800676a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006754:	4b89      	ldr	r3, [pc, #548]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800675a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006762:	4986      	ldr	r1, [pc, #536]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006764:	4313      	orrs	r3, r2
 8006766:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006772:	2b00      	cmp	r3, #0
 8006774:	d00a      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006776:	4b81      	ldr	r3, [pc, #516]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800677c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006784:	497d      	ldr	r1, [pc, #500]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006786:	4313      	orrs	r3, r2
 8006788:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006794:	2b00      	cmp	r3, #0
 8006796:	d00a      	beq.n	80067ae <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006798:	4b78      	ldr	r3, [pc, #480]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800679a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800679e:	f023 0203 	bic.w	r2, r3, #3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067a6:	4975      	ldr	r1, [pc, #468]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d00a      	beq.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80067ba:	4b70      	ldr	r3, [pc, #448]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067c0:	f023 020c 	bic.w	r2, r3, #12
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80067c8:	496c      	ldr	r1, [pc, #432]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067ca:	4313      	orrs	r3, r2
 80067cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d00a      	beq.n	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80067dc:	4b67      	ldr	r3, [pc, #412]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067e2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ea:	4964      	ldr	r1, [pc, #400]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80067ec:	4313      	orrs	r3, r2
 80067ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d00a      	beq.n	8006814 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80067fe:	4b5f      	ldr	r3, [pc, #380]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006804:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800680c:	495b      	ldr	r1, [pc, #364]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800680e:	4313      	orrs	r3, r2
 8006810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800681c:	2b00      	cmp	r3, #0
 800681e:	d00a      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006820:	4b56      	ldr	r3, [pc, #344]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006826:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800682e:	4953      	ldr	r1, [pc, #332]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006830:	4313      	orrs	r3, r2
 8006832:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800683e:	2b00      	cmp	r3, #0
 8006840:	d00a      	beq.n	8006858 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006842:	4b4e      	ldr	r3, [pc, #312]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006848:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006850:	494a      	ldr	r1, [pc, #296]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006852:	4313      	orrs	r3, r2
 8006854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00a      	beq.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006864:	4b45      	ldr	r3, [pc, #276]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800686a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006872:	4942      	ldr	r1, [pc, #264]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006874:	4313      	orrs	r3, r2
 8006876:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006882:	2b00      	cmp	r3, #0
 8006884:	d00a      	beq.n	800689c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006886:	4b3d      	ldr	r3, [pc, #244]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800688c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006894:	4939      	ldr	r1, [pc, #228]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006896:	4313      	orrs	r3, r2
 8006898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d00a      	beq.n	80068be <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80068a8:	4b34      	ldr	r3, [pc, #208]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068ae:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068b6:	4931      	ldr	r1, [pc, #196]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068b8:	4313      	orrs	r3, r2
 80068ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d011      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80068ca:	4b2c      	ldr	r3, [pc, #176]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068d0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068d8:	4928      	ldr	r1, [pc, #160]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80068da:	4313      	orrs	r3, r2
 80068dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068e8:	d101      	bne.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80068ea:	2301      	movs	r3, #1
 80068ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0308 	and.w	r3, r3, #8
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d001      	beq.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80068fa:	2301      	movs	r3, #1
 80068fc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006906:	2b00      	cmp	r3, #0
 8006908:	d00a      	beq.n	8006920 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800690a:	4b1c      	ldr	r3, [pc, #112]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800690c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006910:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006918:	4918      	ldr	r1, [pc, #96]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800691a:	4313      	orrs	r3, r2
 800691c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d00b      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800692c:	4b13      	ldr	r3, [pc, #76]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800692e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006932:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800693c:	490f      	ldr	r1, [pc, #60]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800693e:	4313      	orrs	r3, r2
 8006940:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8006944:	69fb      	ldr	r3, [r7, #28]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d005      	beq.n	8006956 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006952:	f040 80d8 	bne.w	8006b06 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006956:	4b09      	ldr	r3, [pc, #36]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4a08      	ldr	r2, [pc, #32]	; (800697c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800695c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006960:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006962:	f7fa f8e9 	bl	8000b38 <HAL_GetTick>
 8006966:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006968:	e00a      	b.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800696a:	f7fa f8e5 	bl	8000b38 <HAL_GetTick>
 800696e:	4602      	mov	r2, r0
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	1ad3      	subs	r3, r2, r3
 8006974:	2b64      	cmp	r3, #100	; 0x64
 8006976:	d903      	bls.n	8006980 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006978:	2303      	movs	r3, #3
 800697a:	e196      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800697c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006980:	4b6c      	ldr	r3, [pc, #432]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d1ee      	bne.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	f003 0301 	and.w	r3, r3, #1
 8006994:	2b00      	cmp	r3, #0
 8006996:	d021      	beq.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x500>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800699c:	2b00      	cmp	r3, #0
 800699e:	d11d      	bne.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80069a0:	4b64      	ldr	r3, [pc, #400]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80069a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069a6:	0c1b      	lsrs	r3, r3, #16
 80069a8:	f003 0303 	and.w	r3, r3, #3
 80069ac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80069ae:	4b61      	ldr	r3, [pc, #388]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80069b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069b4:	0e1b      	lsrs	r3, r3, #24
 80069b6:	f003 030f 	and.w	r3, r3, #15
 80069ba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	685b      	ldr	r3, [r3, #4]
 80069c0:	019a      	lsls	r2, r3, #6
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	041b      	lsls	r3, r3, #16
 80069c6:	431a      	orrs	r2, r3
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	061b      	lsls	r3, r3, #24
 80069cc:	431a      	orrs	r2, r3
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	071b      	lsls	r3, r3, #28
 80069d4:	4957      	ldr	r1, [pc, #348]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d004      	beq.n	80069f2 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80069f0:	d00a      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d02e      	beq.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006a06:	d129      	bne.n	8006a5c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006a08:	4b4a      	ldr	r3, [pc, #296]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a0e:	0c1b      	lsrs	r3, r3, #16
 8006a10:	f003 0303 	and.w	r3, r3, #3
 8006a14:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a16:	4b47      	ldr	r3, [pc, #284]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a1c:	0f1b      	lsrs	r3, r3, #28
 8006a1e:	f003 0307 	and.w	r3, r3, #7
 8006a22:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	019a      	lsls	r2, r3, #6
 8006a2a:	693b      	ldr	r3, [r7, #16]
 8006a2c:	041b      	lsls	r3, r3, #16
 8006a2e:	431a      	orrs	r2, r3
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	061b      	lsls	r3, r3, #24
 8006a36:	431a      	orrs	r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	071b      	lsls	r3, r3, #28
 8006a3c:	493d      	ldr	r1, [pc, #244]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a3e:	4313      	orrs	r3, r2
 8006a40:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8006a44:	4b3b      	ldr	r3, [pc, #236]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a46:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006a4a:	f023 021f 	bic.w	r2, r3, #31
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a52:	3b01      	subs	r3, #1
 8006a54:	4937      	ldr	r1, [pc, #220]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d01d      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006a68:	4b32      	ldr	r3, [pc, #200]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a6e:	0e1b      	lsrs	r3, r3, #24
 8006a70:	f003 030f 	and.w	r3, r3, #15
 8006a74:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006a76:	4b2f      	ldr	r3, [pc, #188]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a7c:	0f1b      	lsrs	r3, r3, #28
 8006a7e:	f003 0307 	and.w	r3, r3, #7
 8006a82:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	019a      	lsls	r2, r3, #6
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	691b      	ldr	r3, [r3, #16]
 8006a8e:	041b      	lsls	r3, r3, #16
 8006a90:	431a      	orrs	r2, r3
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	061b      	lsls	r3, r3, #24
 8006a96:	431a      	orrs	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	071b      	lsls	r3, r3, #28
 8006a9c:	4925      	ldr	r1, [pc, #148]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006a9e:	4313      	orrs	r3, r2
 8006aa0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d011      	beq.n	8006ad4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	019a      	lsls	r2, r3, #6
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	041b      	lsls	r3, r3, #16
 8006abc:	431a      	orrs	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	061b      	lsls	r3, r3, #24
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	071b      	lsls	r3, r3, #28
 8006acc:	4919      	ldr	r1, [pc, #100]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006ad4:	4b17      	ldr	r3, [pc, #92]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a16      	ldr	r2, [pc, #88]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006ada:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006ade:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ae0:	f7fa f82a 	bl	8000b38 <HAL_GetTick>
 8006ae4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006ae6:	e008      	b.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006ae8:	f7fa f826 	bl	8000b38 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	697b      	ldr	r3, [r7, #20]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	2b64      	cmp	r3, #100	; 0x64
 8006af4:	d901      	bls.n	8006afa <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e0d7      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006afa:	4b0e      	ldr	r3, [pc, #56]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d0f0      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	f040 80cd 	bne.w	8006ca8 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006b0e:	4b09      	ldr	r3, [pc, #36]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	4a08      	ldr	r2, [pc, #32]	; (8006b34 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8006b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006b1a:	f7fa f80d 	bl	8000b38 <HAL_GetTick>
 8006b1e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b20:	e00a      	b.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006b22:	f7fa f809 	bl	8000b38 <HAL_GetTick>
 8006b26:	4602      	mov	r2, r0
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	1ad3      	subs	r3, r2, r3
 8006b2c:	2b64      	cmp	r3, #100	; 0x64
 8006b2e:	d903      	bls.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006b30:	2303      	movs	r3, #3
 8006b32:	e0ba      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8006b34:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006b38:	4b5e      	ldr	r3, [pc, #376]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006b40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b44:	d0ed      	beq.n	8006b22 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d003      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d009      	beq.n	8006b6e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d02e      	beq.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d12a      	bne.n	8006bc4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006b6e:	4b51      	ldr	r3, [pc, #324]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b74:	0c1b      	lsrs	r3, r3, #16
 8006b76:	f003 0303 	and.w	r3, r3, #3
 8006b7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006b7c:	4b4d      	ldr	r3, [pc, #308]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b82:	0f1b      	lsrs	r3, r3, #28
 8006b84:	f003 0307 	and.w	r3, r3, #7
 8006b88:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	695b      	ldr	r3, [r3, #20]
 8006b8e:	019a      	lsls	r2, r3, #6
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	041b      	lsls	r3, r3, #16
 8006b94:	431a      	orrs	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	699b      	ldr	r3, [r3, #24]
 8006b9a:	061b      	lsls	r3, r3, #24
 8006b9c:	431a      	orrs	r2, r3
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	071b      	lsls	r3, r3, #28
 8006ba2:	4944      	ldr	r1, [pc, #272]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006baa:	4b42      	ldr	r3, [pc, #264]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006bac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bb0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	021b      	lsls	r3, r3, #8
 8006bbc:	493d      	ldr	r1, [pc, #244]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006bbe:	4313      	orrs	r3, r2
 8006bc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d022      	beq.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006bd4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006bd8:	d11d      	bne.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006bda:	4b36      	ldr	r3, [pc, #216]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006be0:	0e1b      	lsrs	r3, r3, #24
 8006be2:	f003 030f 	and.w	r3, r3, #15
 8006be6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8006be8:	4b32      	ldr	r3, [pc, #200]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bee:	0f1b      	lsrs	r3, r3, #28
 8006bf0:	f003 0307 	and.w	r3, r3, #7
 8006bf4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	695b      	ldr	r3, [r3, #20]
 8006bfa:	019a      	lsls	r2, r3, #6
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6a1b      	ldr	r3, [r3, #32]
 8006c00:	041b      	lsls	r3, r3, #16
 8006c02:	431a      	orrs	r2, r3
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	061b      	lsls	r3, r3, #24
 8006c08:	431a      	orrs	r2, r3
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	071b      	lsls	r3, r3, #28
 8006c0e:	4929      	ldr	r1, [pc, #164]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c10:	4313      	orrs	r3, r2
 8006c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 0308 	and.w	r3, r3, #8
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d028      	beq.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006c22:	4b24      	ldr	r3, [pc, #144]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c28:	0e1b      	lsrs	r3, r3, #24
 8006c2a:	f003 030f 	and.w	r3, r3, #15
 8006c2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8006c30:	4b20      	ldr	r3, [pc, #128]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c36:	0c1b      	lsrs	r3, r3, #16
 8006c38:	f003 0303 	and.w	r3, r3, #3
 8006c3c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	695b      	ldr	r3, [r3, #20]
 8006c42:	019a      	lsls	r2, r3, #6
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	041b      	lsls	r3, r3, #16
 8006c48:	431a      	orrs	r2, r3
 8006c4a:	693b      	ldr	r3, [r7, #16]
 8006c4c:	061b      	lsls	r3, r3, #24
 8006c4e:	431a      	orrs	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	69db      	ldr	r3, [r3, #28]
 8006c54:	071b      	lsls	r3, r3, #28
 8006c56:	4917      	ldr	r1, [pc, #92]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c58:	4313      	orrs	r3, r2
 8006c5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8006c5e:	4b15      	ldr	r3, [pc, #84]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c64:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c6c:	4911      	ldr	r1, [pc, #68]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8006c74:	4b0f      	ldr	r3, [pc, #60]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a0e      	ldr	r2, [pc, #56]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c80:	f7f9 ff5a 	bl	8000b38 <HAL_GetTick>
 8006c84:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c86:	e008      	b.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8006c88:	f7f9 ff56 	bl	8000b38 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	2b64      	cmp	r3, #100	; 0x64
 8006c94:	d901      	bls.n	8006c9a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e007      	b.n	8006caa <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8006c9a:	4b06      	ldr	r3, [pc, #24]	; (8006cb4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ca2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ca6:	d1ef      	bne.n	8006c88 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8006ca8:	2300      	movs	r3, #0
}
 8006caa:	4618      	mov	r0, r3
 8006cac:	3720      	adds	r7, #32
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}
 8006cb2:	bf00      	nop
 8006cb4:	40023800 	.word	0x40023800

08006cb8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b087      	sub	sp, #28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006cd6:	f040 8086 	bne.w	8006de6 <HAL_RCCEx_GetPeriphCLKFreq+0x12e>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006cda:	4b8d      	ldr	r3, [pc, #564]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006cdc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ce0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8006ce8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cf0:	d03e      	beq.n	8006d70 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
 8006cf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006cf6:	d073      	beq.n	8006de0 <HAL_RCCEx_GetPeriphCLKFreq+0x128>
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d000      	beq.n	8006cfe <HAL_RCCEx_GetPeriphCLKFreq+0x46>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006cfc:	e074      	b.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006cfe:	4b84      	ldr	r3, [pc, #528]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d108      	bne.n	8006d1c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d0a:	4b81      	ldr	r3, [pc, #516]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d12:	4a80      	ldr	r2, [pc, #512]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d18:	613b      	str	r3, [r7, #16]
 8006d1a:	e007      	b.n	8006d2c <HAL_RCCEx_GetPeriphCLKFreq+0x74>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006d1c:	4b7c      	ldr	r3, [pc, #496]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d24:	4a7c      	ldr	r2, [pc, #496]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d2a:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006d2c:	4b78      	ldr	r3, [pc, #480]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d32:	0e1b      	lsrs	r3, r3, #24
 8006d34:	f003 030f 	and.w	r3, r3, #15
 8006d38:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006d3a:	4b75      	ldr	r3, [pc, #468]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d40:	099b      	lsrs	r3, r3, #6
 8006d42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	fb02 f203 	mul.w	r2, r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d52:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006d54:	4b6e      	ldr	r3, [pc, #440]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d5a:	0a1b      	lsrs	r3, r3, #8
 8006d5c:	f003 031f 	and.w	r3, r3, #31
 8006d60:	3301      	adds	r3, #1
 8006d62:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d6c:	617b      	str	r3, [r7, #20]
        break;
 8006d6e:	e03b      	b.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006d70:	4b67      	ldr	r3, [pc, #412]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d108      	bne.n	8006d8e <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006d7c:	4b64      	ldr	r3, [pc, #400]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d84:	4a63      	ldr	r2, [pc, #396]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d8a:	613b      	str	r3, [r7, #16]
 8006d8c:	e007      	b.n	8006d9e <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006d8e:	4b60      	ldr	r3, [pc, #384]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006d96:	4a60      	ldr	r2, [pc, #384]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006d98:	fbb2 f3f3 	udiv	r3, r2, r3
 8006d9c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006d9e:	4b5c      	ldr	r3, [pc, #368]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006da0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006da4:	0e1b      	lsrs	r3, r3, #24
 8006da6:	f003 030f 	and.w	r3, r3, #15
 8006daa:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006dac:	4b58      	ldr	r3, [pc, #352]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006dae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006db2:	099b      	lsrs	r3, r3, #6
 8006db4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006db8:	693a      	ldr	r2, [r7, #16]
 8006dba:	fb02 f203 	mul.w	r2, r2, r3
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dc4:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006dc6:	4b52      	ldr	r3, [pc, #328]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006dcc:	f003 031f 	and.w	r3, r3, #31
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006dd4:	697a      	ldr	r2, [r7, #20]
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ddc:	617b      	str	r3, [r7, #20]
        break;
 8006dde:	e003      	b.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006de0:	4b4e      	ldr	r3, [pc, #312]	; (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006de2:	617b      	str	r3, [r7, #20]
        break;
 8006de4:	e000      	b.n	8006de8 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
      }
    }
  }
 8006de6:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dee:	f040 8086 	bne.w	8006efe <HAL_RCCEx_GetPeriphCLKFreq+0x246>
  {
    saiclocksource = RCC->DCKCFGR1;
 8006df2:	4b47      	ldr	r3, [pc, #284]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006df8:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8006e00:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006e08:	d03e      	beq.n	8006e88 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8006e0a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006e0e:	d073      	beq.n	8006ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d000      	beq.n	8006e16 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8006e14:	e074      	b.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006e16:	4b3e      	ldr	r3, [pc, #248]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d108      	bne.n	8006e34 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006e22:	4b3b      	ldr	r3, [pc, #236]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e24:	685b      	ldr	r3, [r3, #4]
 8006e26:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e2a:	4a3a      	ldr	r2, [pc, #232]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e30:	613b      	str	r3, [r7, #16]
 8006e32:	e007      	b.n	8006e44 <HAL_RCCEx_GetPeriphCLKFreq+0x18c>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006e34:	4b36      	ldr	r3, [pc, #216]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e3c:	4a36      	ldr	r2, [pc, #216]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e42:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8006e44:	4b32      	ldr	r3, [pc, #200]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e4a:	0e1b      	lsrs	r3, r3, #24
 8006e4c:	f003 030f 	and.w	r3, r3, #15
 8006e50:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8006e52:	4b2f      	ldr	r3, [pc, #188]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e58:	099b      	lsrs	r3, r3, #6
 8006e5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	fb02 f203 	mul.w	r2, r2, r3
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e6a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8006e6c:	4b28      	ldr	r3, [pc, #160]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e72:	0a1b      	lsrs	r3, r3, #8
 8006e74:	f003 031f 	and.w	r3, r3, #31
 8006e78:	3301      	adds	r3, #1
 8006e7a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e84:	617b      	str	r3, [r7, #20]
        break;
 8006e86:	e03b      	b.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8006e88:	4b21      	ldr	r3, [pc, #132]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d108      	bne.n	8006ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006e94:	4b1e      	ldr	r3, [pc, #120]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e9c:	4a1d      	ldr	r2, [pc, #116]	; (8006f14 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>)
 8006e9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ea2:	613b      	str	r3, [r7, #16]
 8006ea4:	e007      	b.n	8006eb6 <HAL_RCCEx_GetPeriphCLKFreq+0x1fe>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8006ea6:	4b1a      	ldr	r3, [pc, #104]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006eae:	4a1a      	ldr	r2, [pc, #104]	; (8006f18 <HAL_RCCEx_GetPeriphCLKFreq+0x260>)
 8006eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb4:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8006eb6:	4b16      	ldr	r3, [pc, #88]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ebc:	0e1b      	lsrs	r3, r3, #24
 8006ebe:	f003 030f 	and.w	r3, r3, #15
 8006ec2:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8006ec4:	4b12      	ldr	r3, [pc, #72]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006ec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006eca:	099b      	lsrs	r3, r3, #6
 8006ecc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	fb02 f203 	mul.w	r2, r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006edc:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8006ede:	4b0c      	ldr	r3, [pc, #48]	; (8006f10 <HAL_RCCEx_GetPeriphCLKFreq+0x258>)
 8006ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ee4:	f003 031f 	and.w	r3, r3, #31
 8006ee8:	3301      	adds	r3, #1
 8006eea:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8006eec:	697a      	ldr	r2, [r7, #20]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ef4:	617b      	str	r3, [r7, #20]
        break;
 8006ef6:	e003      	b.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
        frequency = EXTERNAL_CLOCK_VALUE;
 8006ef8:	4b08      	ldr	r3, [pc, #32]	; (8006f1c <HAL_RCCEx_GetPeriphCLKFreq+0x264>)
 8006efa:	617b      	str	r3, [r7, #20]
        break;
 8006efc:	e000      	b.n	8006f00 <HAL_RCCEx_GetPeriphCLKFreq+0x248>
      }
    }
  }
 8006efe:	bf00      	nop

  return frequency;
 8006f00:	697b      	ldr	r3, [r7, #20]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	371c      	adds	r7, #28
 8006f06:	46bd      	mov	sp, r7
 8006f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0c:	4770      	bx	lr
 8006f0e:	bf00      	nop
 8006f10:	40023800 	.word	0x40023800
 8006f14:	00f42400 	.word	0x00f42400
 8006f18:	017d7840 	.word	0x017d7840
 8006f1c:	00bb8000 	.word	0x00bb8000

08006f20 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b082      	sub	sp, #8
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d101      	bne.n	8006f32 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	e06b      	b.n	800700a <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	7f5b      	ldrb	r3, [r3, #29]
 8006f36:	b2db      	uxtb	r3, r3
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d105      	bne.n	8006f48 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006f42:	6878      	ldr	r0, [r7, #4]
 8006f44:	f011 ff96 	bl	8018e74 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2202      	movs	r2, #2
 8006f4c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	22ca      	movs	r2, #202	; 0xca
 8006f54:	625a      	str	r2, [r3, #36]	; 0x24
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2253      	movs	r2, #83	; 0x53
 8006f5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fb00 	bl	8007564 <RTC_EnterInitMode>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d008      	beq.n	8006f7c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	22ff      	movs	r2, #255	; 0xff
 8006f70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2204      	movs	r2, #4
 8006f76:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e046      	b.n	800700a <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6899      	ldr	r1, [r3, #8]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	4b23      	ldr	r3, [pc, #140]	; (8007014 <HAL_RTC_Init+0xf4>)
 8006f88:	400b      	ands	r3, r1
 8006f8a:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	6899      	ldr	r1, [r3, #8]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	685a      	ldr	r2, [r3, #4]
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	691b      	ldr	r3, [r3, #16]
 8006f9a:	431a      	orrs	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	695b      	ldr	r3, [r3, #20]
 8006fa0:	431a      	orrs	r2, r3
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	430a      	orrs	r2, r1
 8006fa8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	68d2      	ldr	r2, [r2, #12]
 8006fb2:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6919      	ldr	r1, [r3, #16]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	041a      	lsls	r2, r3, #16
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	430a      	orrs	r2, r1
 8006fc6:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68da      	ldr	r2, [r3, #12]
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fd6:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f022 0208 	bic.w	r2, r2, #8
 8006fe6:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	699a      	ldr	r2, [r3, #24]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	22ff      	movs	r2, #255	; 0xff
 8007000:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	2201      	movs	r2, #1
 8007006:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8007008:	2300      	movs	r3, #0
  }
}
 800700a:	4618      	mov	r0, r3
 800700c:	3708      	adds	r7, #8
 800700e:	46bd      	mov	sp, r7
 8007010:	bd80      	pop	{r7, pc}
 8007012:	bf00      	nop
 8007014:	ff8fffbf 	.word	0xff8fffbf

08007018 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007018:	b590      	push	{r4, r7, lr}
 800701a:	b087      	sub	sp, #28
 800701c:	af00      	add	r7, sp, #0
 800701e:	60f8      	str	r0, [r7, #12]
 8007020:	60b9      	str	r1, [r7, #8]
 8007022:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007024:	2300      	movs	r3, #0
 8007026:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	7f1b      	ldrb	r3, [r3, #28]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d101      	bne.n	8007034 <HAL_RTC_SetTime+0x1c>
 8007030:	2302      	movs	r3, #2
 8007032:	e0a8      	b.n	8007186 <HAL_RTC_SetTime+0x16e>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2201      	movs	r2, #1
 8007038:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2202      	movs	r2, #2
 800703e:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d126      	bne.n	8007094 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007050:	2b00      	cmp	r3, #0
 8007052:	d102      	bne.n	800705a <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8007054:	68bb      	ldr	r3, [r7, #8]
 8007056:	2200      	movs	r2, #0
 8007058:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	781b      	ldrb	r3, [r3, #0]
 800705e:	4618      	mov	r0, r3
 8007060:	f000 faac 	bl	80075bc <RTC_ByteToBcd2>
 8007064:	4603      	mov	r3, r0
 8007066:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	785b      	ldrb	r3, [r3, #1]
 800706c:	4618      	mov	r0, r3
 800706e:	f000 faa5 	bl	80075bc <RTC_ByteToBcd2>
 8007072:	4603      	mov	r3, r0
 8007074:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8007076:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8007078:	68bb      	ldr	r3, [r7, #8]
 800707a:	789b      	ldrb	r3, [r3, #2]
 800707c:	4618      	mov	r0, r3
 800707e:	f000 fa9d 	bl	80075bc <RTC_ByteToBcd2>
 8007082:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8007084:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	7b1b      	ldrb	r3, [r3, #12]
 800708c:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800708e:	4313      	orrs	r3, r2
 8007090:	617b      	str	r3, [r7, #20]
 8007092:	e018      	b.n	80070c6 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d102      	bne.n	80070a8 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	2200      	movs	r2, #0
 80070a6:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	781b      	ldrb	r3, [r3, #0]
 80070ac:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	785b      	ldrb	r3, [r3, #1]
 80070b2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80070b4:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80070b6:	68ba      	ldr	r2, [r7, #8]
 80070b8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80070ba:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	7b1b      	ldrb	r3, [r3, #12]
 80070c0:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80070c2:	4313      	orrs	r3, r2
 80070c4:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	22ca      	movs	r2, #202	; 0xca
 80070cc:	625a      	str	r2, [r3, #36]	; 0x24
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	2253      	movs	r2, #83	; 0x53
 80070d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f000 fa44 	bl	8007564 <RTC_EnterInitMode>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d00b      	beq.n	80070fa <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	22ff      	movs	r2, #255	; 0xff
 80070e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2204      	movs	r2, #4
 80070ee:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e045      	b.n	8007186 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681a      	ldr	r2, [r3, #0]
 80070fe:	6979      	ldr	r1, [r7, #20]
 8007100:	4b23      	ldr	r3, [pc, #140]	; (8007190 <HAL_RTC_SetTime+0x178>)
 8007102:	400b      	ands	r3, r1
 8007104:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	689a      	ldr	r2, [r3, #8]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007114:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	6899      	ldr	r1, [r3, #8]
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	691a      	ldr	r2, [r3, #16]
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	431a      	orrs	r2, r3
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	430a      	orrs	r2, r1
 800712c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68da      	ldr	r2, [r3, #12]
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800713c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	f003 0320 	and.w	r3, r3, #32
 8007148:	2b00      	cmp	r3, #0
 800714a:	d111      	bne.n	8007170 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800714c:	68f8      	ldr	r0, [r7, #12]
 800714e:	f000 f9e1 	bl	8007514 <HAL_RTC_WaitForSynchro>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d00b      	beq.n	8007170 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	22ff      	movs	r2, #255	; 0xff
 800715e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2204      	movs	r2, #4
 8007164:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800716c:	2301      	movs	r3, #1
 800716e:	e00a      	b.n	8007186 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	22ff      	movs	r2, #255	; 0xff
 8007176:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2201      	movs	r2, #1
 800717c:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8007184:	2300      	movs	r3, #0
  }
}
 8007186:	4618      	mov	r0, r3
 8007188:	371c      	adds	r7, #28
 800718a:	46bd      	mov	sp, r7
 800718c:	bd90      	pop	{r4, r7, pc}
 800718e:	bf00      	nop
 8007190:	007f7f7f 	.word	0x007f7f7f

08007194 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007194:	b590      	push	{r4, r7, lr}
 8007196:	b087      	sub	sp, #28
 8007198:	af00      	add	r7, sp, #0
 800719a:	60f8      	str	r0, [r7, #12]
 800719c:	60b9      	str	r1, [r7, #8]
 800719e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80071a0:	2300      	movs	r3, #0
 80071a2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	7f1b      	ldrb	r3, [r3, #28]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d101      	bne.n	80071b0 <HAL_RTC_SetDate+0x1c>
 80071ac:	2302      	movs	r3, #2
 80071ae:	e092      	b.n	80072d6 <HAL_RTC_SetDate+0x142>
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2201      	movs	r2, #1
 80071b4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2202      	movs	r2, #2
 80071ba:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10e      	bne.n	80071e0 <HAL_RTC_SetDate+0x4c>
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	785b      	ldrb	r3, [r3, #1]
 80071c6:	f003 0310 	and.w	r3, r3, #16
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d008      	beq.n	80071e0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	785b      	ldrb	r3, [r3, #1]
 80071d2:	f023 0310 	bic.w	r3, r3, #16
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	330a      	adds	r3, #10
 80071da:	b2da      	uxtb	r2, r3
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d11c      	bne.n	8007220 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	78db      	ldrb	r3, [r3, #3]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 f9e6 	bl	80075bc <RTC_ByteToBcd2>
 80071f0:	4603      	mov	r3, r0
 80071f2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	785b      	ldrb	r3, [r3, #1]
 80071f8:	4618      	mov	r0, r3
 80071fa:	f000 f9df 	bl	80075bc <RTC_ByteToBcd2>
 80071fe:	4603      	mov	r3, r0
 8007200:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8007202:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	789b      	ldrb	r3, [r3, #2]
 8007208:	4618      	mov	r0, r3
 800720a:	f000 f9d7 	bl	80075bc <RTC_ByteToBcd2>
 800720e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8007210:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 800721a:	4313      	orrs	r3, r2
 800721c:	617b      	str	r3, [r7, #20]
 800721e:	e00e      	b.n	800723e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	78db      	ldrb	r3, [r3, #3]
 8007224:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	785b      	ldrb	r3, [r3, #1]
 800722a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800722c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8007232:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	781b      	ldrb	r3, [r3, #0]
 8007238:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 800723a:	4313      	orrs	r3, r2
 800723c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	22ca      	movs	r2, #202	; 0xca
 8007244:	625a      	str	r2, [r3, #36]	; 0x24
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2253      	movs	r2, #83	; 0x53
 800724c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800724e:	68f8      	ldr	r0, [r7, #12]
 8007250:	f000 f988 	bl	8007564 <RTC_EnterInitMode>
 8007254:	4603      	mov	r3, r0
 8007256:	2b00      	cmp	r3, #0
 8007258:	d00b      	beq.n	8007272 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	22ff      	movs	r2, #255	; 0xff
 8007260:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	2204      	movs	r2, #4
 8007266:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e031      	b.n	80072d6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	6979      	ldr	r1, [r7, #20]
 8007278:	4b19      	ldr	r3, [pc, #100]	; (80072e0 <HAL_RTC_SetDate+0x14c>)
 800727a:	400b      	ands	r3, r1
 800727c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	68da      	ldr	r2, [r3, #12]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800728c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f003 0320 	and.w	r3, r3, #32
 8007298:	2b00      	cmp	r3, #0
 800729a:	d111      	bne.n	80072c0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f000 f939 	bl	8007514 <HAL_RTC_WaitForSynchro>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d00b      	beq.n	80072c0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	22ff      	movs	r2, #255	; 0xff
 80072ae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2204      	movs	r2, #4
 80072b4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80072bc:	2301      	movs	r3, #1
 80072be:	e00a      	b.n	80072d6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	22ff      	movs	r2, #255	; 0xff
 80072c6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2201      	movs	r2, #1
 80072cc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80072d4:	2300      	movs	r3, #0
  }
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	371c      	adds	r7, #28
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd90      	pop	{r4, r7, pc}
 80072de:	bf00      	nop
 80072e0:	00ffff3f 	.word	0x00ffff3f

080072e4 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80072e4:	b590      	push	{r4, r7, lr}
 80072e6:	b089      	sub	sp, #36	; 0x24
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 80072f0:	2300      	movs	r3, #0
 80072f2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 80072f4:	2300      	movs	r3, #0
 80072f6:	61fb      	str	r3, [r7, #28]
 80072f8:	2300      	movs	r3, #0
 80072fa:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	7f1b      	ldrb	r3, [r3, #28]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d101      	bne.n	8007308 <HAL_RTC_SetAlarm+0x24>
 8007304:	2302      	movs	r3, #2
 8007306:	e101      	b.n	800750c <HAL_RTC_SetAlarm+0x228>
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2201      	movs	r2, #1
 800730c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2202      	movs	r2, #2
 8007312:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d137      	bne.n	800738a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007324:	2b00      	cmp	r3, #0
 8007326:	d102      	bne.n	800732e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2200      	movs	r2, #0
 800732c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	4618      	mov	r0, r3
 8007334:	f000 f942 	bl	80075bc <RTC_ByteToBcd2>
 8007338:	4603      	mov	r3, r0
 800733a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800733c:	68bb      	ldr	r3, [r7, #8]
 800733e:	785b      	ldrb	r3, [r3, #1]
 8007340:	4618      	mov	r0, r3
 8007342:	f000 f93b 	bl	80075bc <RTC_ByteToBcd2>
 8007346:	4603      	mov	r3, r0
 8007348:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800734a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	789b      	ldrb	r3, [r3, #2]
 8007350:	4618      	mov	r0, r3
 8007352:	f000 f933 	bl	80075bc <RTC_ByteToBcd2>
 8007356:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8007358:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	7b1b      	ldrb	r3, [r3, #12]
 8007360:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007362:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800736c:	4618      	mov	r0, r3
 800736e:	f000 f925 	bl	80075bc <RTC_ByteToBcd2>
 8007372:	4603      	mov	r3, r0
 8007374:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8007376:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800737e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8007384:	4313      	orrs	r3, r2
 8007386:	61fb      	str	r3, [r7, #28]
 8007388:	e023      	b.n	80073d2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	689b      	ldr	r3, [r3, #8]
 8007390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007394:	2b00      	cmp	r3, #0
 8007396:	d102      	bne.n	800739e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	2200      	movs	r2, #0
 800739c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80073a4:	68bb      	ldr	r3, [r7, #8]
 80073a6:	785b      	ldrb	r3, [r3, #1]
 80073a8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80073aa:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 80073b0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80073b2:	68bb      	ldr	r3, [r7, #8]
 80073b4:	7b1b      	ldrb	r3, [r3, #12]
 80073b6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80073b8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80073c0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80073c2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80073c8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80073ca:	68bb      	ldr	r3, [r7, #8]
 80073cc:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80073ce:	4313      	orrs	r3, r2
 80073d0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	685a      	ldr	r2, [r3, #4]
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	69db      	ldr	r3, [r3, #28]
 80073da:	4313      	orrs	r3, r2
 80073dc:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	22ca      	movs	r2, #202	; 0xca
 80073e4:	625a      	str	r2, [r3, #36]	; 0x24
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	2253      	movs	r2, #83	; 0x53
 80073ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80073ee:	68bb      	ldr	r3, [r7, #8]
 80073f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80073f6:	d13f      	bne.n	8007478 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	689a      	ldr	r2, [r3, #8]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007406:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	689a      	ldr	r2, [r3, #8]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007416:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007418:	f7f9 fb8e 	bl	8000b38 <HAL_GetTick>
 800741c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800741e:	e013      	b.n	8007448 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007420:	f7f9 fb8a 	bl	8000b38 <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800742e:	d90b      	bls.n	8007448 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	22ff      	movs	r2, #255	; 0xff
 8007436:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2203      	movs	r2, #3
 800743c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2200      	movs	r2, #0
 8007442:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8007444:	2303      	movs	r3, #3
 8007446:	e061      	b.n	800750c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	68db      	ldr	r3, [r3, #12]
 800744e:	f003 0301 	and.w	r3, r3, #1
 8007452:	2b00      	cmp	r3, #0
 8007454:	d0e4      	beq.n	8007420 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	69fa      	ldr	r2, [r7, #28]
 800745c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	697a      	ldr	r2, [r7, #20]
 8007464:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	689a      	ldr	r2, [r3, #8]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007474:	609a      	str	r2, [r3, #8]
 8007476:	e03e      	b.n	80074f6 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689a      	ldr	r2, [r3, #8]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007486:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	689a      	ldr	r2, [r3, #8]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007496:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007498:	f7f9 fb4e 	bl	8000b38 <HAL_GetTick>
 800749c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800749e:	e013      	b.n	80074c8 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80074a0:	f7f9 fb4a 	bl	8000b38 <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	69bb      	ldr	r3, [r7, #24]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80074ae:	d90b      	bls.n	80074c8 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	22ff      	movs	r2, #255	; 0xff
 80074b6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2203      	movs	r2, #3
 80074bc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e021      	b.n	800750c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	68db      	ldr	r3, [r3, #12]
 80074ce:	f003 0302 	and.w	r3, r3, #2
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d0e4      	beq.n	80074a0 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	69fa      	ldr	r2, [r7, #28]
 80074dc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	697a      	ldr	r2, [r7, #20]
 80074e4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	689a      	ldr	r2, [r3, #8]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074f4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	22ff      	movs	r2, #255	; 0xff
 80074fc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2201      	movs	r2, #1
 8007502:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800750a:	2300      	movs	r3, #0
}
 800750c:	4618      	mov	r0, r3
 800750e:	3724      	adds	r7, #36	; 0x24
 8007510:	46bd      	mov	sp, r7
 8007512:	bd90      	pop	{r4, r7, pc}

08007514 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800751c:	2300      	movs	r3, #0
 800751e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	68da      	ldr	r2, [r3, #12]
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800752e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007530:	f7f9 fb02 	bl	8000b38 <HAL_GetTick>
 8007534:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007536:	e009      	b.n	800754c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007538:	f7f9 fafe 	bl	8000b38 <HAL_GetTick>
 800753c:	4602      	mov	r2, r0
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	1ad3      	subs	r3, r2, r3
 8007542:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007546:	d901      	bls.n	800754c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007548:	2303      	movs	r3, #3
 800754a:	e007      	b.n	800755c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68db      	ldr	r3, [r3, #12]
 8007552:	f003 0320 	and.w	r3, r3, #32
 8007556:	2b00      	cmp	r3, #0
 8007558:	d0ee      	beq.n	8007538 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800755a:	2300      	movs	r3, #0
}
 800755c:	4618      	mov	r0, r3
 800755e:	3710      	adds	r7, #16
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}

08007564 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800756c:	2300      	movs	r3, #0
 800756e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800757a:	2b00      	cmp	r3, #0
 800757c:	d119      	bne.n	80075b2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f04f 32ff 	mov.w	r2, #4294967295
 8007586:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007588:	f7f9 fad6 	bl	8000b38 <HAL_GetTick>
 800758c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800758e:	e009      	b.n	80075a4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007590:	f7f9 fad2 	bl	8000b38 <HAL_GetTick>
 8007594:	4602      	mov	r2, r0
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	1ad3      	subs	r3, r2, r3
 800759a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800759e:	d901      	bls.n	80075a4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80075a0:	2303      	movs	r3, #3
 80075a2:	e007      	b.n	80075b4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	68db      	ldr	r3, [r3, #12]
 80075aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d0ee      	beq.n	8007590 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80075b2:	2300      	movs	r3, #0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80075bc:	b480      	push	{r7}
 80075be:	b085      	sub	sp, #20
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	4603      	mov	r3, r0
 80075c4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80075c6:	2300      	movs	r3, #0
 80075c8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80075ca:	e005      	b.n	80075d8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	3301      	adds	r3, #1
 80075d0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80075d2:	79fb      	ldrb	r3, [r7, #7]
 80075d4:	3b0a      	subs	r3, #10
 80075d6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80075d8:	79fb      	ldrb	r3, [r7, #7]
 80075da:	2b09      	cmp	r3, #9
 80075dc:	d8f6      	bhi.n	80075cc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	b2db      	uxtb	r3, r3
 80075e2:	011b      	lsls	r3, r3, #4
 80075e4:	b2da      	uxtb	r2, r3
 80075e6:	79fb      	ldrb	r3, [r7, #7]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	b2db      	uxtb	r3, r3
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3714      	adds	r7, #20
 80075f0:	46bd      	mov	sp, r7
 80075f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f6:	4770      	bx	lr

080075f8 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b087      	sub	sp, #28
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	60f8      	str	r0, [r7, #12]
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8007604:	2300      	movs	r3, #0
 8007606:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	7f1b      	ldrb	r3, [r3, #28]
 800760c:	2b01      	cmp	r3, #1
 800760e:	d101      	bne.n	8007614 <HAL_RTCEx_SetTimeStamp+0x1c>
 8007610:	2302      	movs	r3, #2
 8007612:	e03e      	b.n	8007692 <HAL_RTCEx_SetTimeStamp+0x9a>
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2201      	movs	r2, #1
 8007618:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	2202      	movs	r2, #2
 800761e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	689a      	ldr	r2, [r3, #8]
 8007626:	4b1e      	ldr	r3, [pc, #120]	; (80076a0 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8007628:	4013      	ands	r3, r2
 800762a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	4313      	orrs	r3, r2
 8007632:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	22ca      	movs	r2, #202	; 0xca
 800763a:	625a      	str	r2, [r3, #36]	; 0x24
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	2253      	movs	r2, #83	; 0x53
 8007642:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f022 0206 	bic.w	r2, r2, #6
 8007652:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	430a      	orrs	r2, r1
 8007662:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	697a      	ldr	r2, [r7, #20]
 800766a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	689a      	ldr	r2, [r3, #8]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800767a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	22ff      	movs	r2, #255	; 0xff
 8007682:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2201      	movs	r2, #1
 8007688:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2200      	movs	r2, #0
 800768e:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	371c      	adds	r7, #28
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr
 800769e:	bf00      	nop
 80076a0:	fffff7f7 	.word	0xfffff7f7

080076a4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80076a4:	b580      	push	{r7, lr}
 80076a6:	b088      	sub	sp, #32
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80076ac:	2300      	movs	r3, #0
 80076ae:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80076b0:	2300      	movs	r3, #0
 80076b2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80076b4:	2300      	movs	r3, #0
 80076b6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if(hsai == NULL)
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80076be:	2301      	movs	r3, #1
 80076c0:	e149      	b.n	8007956 <HAL_SAI_Init+0x2b2>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if(hsai->State == HAL_SAI_STATE_RESET)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d106      	bne.n	80076dc <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f011 fea6 	bl	8019428 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2202      	movs	r2, #2
 80076e0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f94f 	bl	8007988 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch(hsai->Init.SynchroExt)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d007      	beq.n	8007702 <HAL_SAI_Init+0x5e>
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d302      	bcc.n	80076fc <HAL_SAI_Init+0x58>
 80076f6:	2b02      	cmp	r3, #2
 80076f8:	d006      	beq.n	8007708 <HAL_SAI_Init+0x64>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
  default:
    break;
 80076fa:	e008      	b.n	800770e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = 0;
 80076fc:	2300      	movs	r3, #0
 80076fe:	61fb      	str	r3, [r7, #28]
      break;
 8007700:	e005      	b.n	800770e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8007702:	2310      	movs	r3, #16
 8007704:	61fb      	str	r3, [r7, #28]
      break;
 8007706:	e002      	b.n	800770e <HAL_SAI_Init+0x6a>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8007708:	2320      	movs	r3, #32
 800770a:	61fb      	str	r3, [r7, #28]
      break;
 800770c:	bf00      	nop
  }

  switch(hsai->Init.Synchro)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	689b      	ldr	r3, [r3, #8]
 8007712:	2b03      	cmp	r3, #3
 8007714:	d81d      	bhi.n	8007752 <HAL_SAI_Init+0xae>
 8007716:	a201      	add	r2, pc, #4	; (adr r2, 800771c <HAL_SAI_Init+0x78>)
 8007718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771c:	0800772d 	.word	0x0800772d
 8007720:	08007733 	.word	0x08007733
 8007724:	0800773b 	.word	0x0800773b
 8007728:	08007743 	.word	0x08007743
  {
    case SAI_ASYNCHRONOUS :
      {
        syncen_bits = 0;
 800772c:	2300      	movs	r3, #0
 800772e:	617b      	str	r3, [r7, #20]
      }
      break;
 8007730:	e010      	b.n	8007754 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS :
      {
        syncen_bits = SAI_xCR1_SYNCEN_0;
 8007732:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007736:	617b      	str	r3, [r7, #20]
      }
      break;
 8007738:	e00c      	b.n	8007754 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 800773a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800773e:	617b      	str	r3, [r7, #20]
      }
      break;
 8007740:	e008      	b.n	8007754 <HAL_SAI_Init+0xb0>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      {
        syncen_bits = SAI_xCR1_SYNCEN_1;
 8007742:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007746:	617b      	str	r3, [r7, #20]
        tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8007748:	69fb      	ldr	r3, [r7, #28]
 800774a:	f043 0301 	orr.w	r3, r3, #1
 800774e:	61fb      	str	r3, [r7, #28]
      }
      break;
 8007750:	e000      	b.n	8007754 <HAL_SAI_Init+0xb0>
  default:
    break;
 8007752:	bf00      	nop
  }

  if((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a81      	ldr	r2, [pc, #516]	; (8007960 <HAL_SAI_Init+0x2bc>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d004      	beq.n	8007768 <HAL_SAI_Init+0xc4>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a80      	ldr	r2, [pc, #512]	; (8007964 <HAL_SAI_Init+0x2c0>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d103      	bne.n	8007770 <HAL_SAI_Init+0xcc>
  {
    SAI1->GCR = tmpregisterGCR;
 8007768:	4a7f      	ldr	r2, [pc, #508]	; (8007968 <HAL_SAI_Init+0x2c4>)
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	6013      	str	r3, [r2, #0]
 800776e:	e002      	b.n	8007776 <HAL_SAI_Init+0xd2>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8007770:	4a7e      	ldr	r2, [pc, #504]	; (800796c <HAL_SAI_Init+0x2c8>)
 8007772:	69fb      	ldr	r3, [r7, #28]
 8007774:	6013      	str	r3, [r2, #0]
  }

  if(hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	69db      	ldr	r3, [r3, #28]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d043      	beq.n	8007806 <HAL_SAI_Init+0x162>
  {
    uint32_t freq = 0;
 800777e:	2300      	movs	r3, #0
 8007780:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if((hsai->Instance == SAI1_Block_A ) || (hsai->Instance == SAI1_Block_B ))
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a76      	ldr	r2, [pc, #472]	; (8007960 <HAL_SAI_Init+0x2bc>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d004      	beq.n	8007796 <HAL_SAI_Init+0xf2>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	4a74      	ldr	r2, [pc, #464]	; (8007964 <HAL_SAI_Init+0x2c0>)
 8007792:	4293      	cmp	r3, r2
 8007794:	d104      	bne.n	80077a0 <HAL_SAI_Init+0xfc>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8007796:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800779a:	f7ff fa8d 	bl	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq>
 800779e:	6138      	str	r0, [r7, #16]
    }
    if((hsai->Instance == SAI2_Block_A ) || (hsai->Instance == SAI2_Block_B ))
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a72      	ldr	r2, [pc, #456]	; (8007970 <HAL_SAI_Init+0x2cc>)
 80077a6:	4293      	cmp	r3, r2
 80077a8:	d004      	beq.n	80077b4 <HAL_SAI_Init+0x110>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	4a71      	ldr	r2, [pc, #452]	; (8007974 <HAL_SAI_Init+0x2d0>)
 80077b0:	4293      	cmp	r3, r2
 80077b2:	d104      	bne.n	80077be <HAL_SAI_Init+0x11a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80077b4:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80077b8:	f7ff fa7e 	bl	8006cb8 <HAL_RCCEx_GetPeriphCLKFreq>
 80077bc:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80077be:	693a      	ldr	r2, [r7, #16]
 80077c0:	4613      	mov	r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	4413      	add	r3, r2
 80077c6:	005b      	lsls	r3, r3, #1
 80077c8:	461a      	mov	r2, r3
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	69db      	ldr	r3, [r3, #28]
 80077ce:	025b      	lsls	r3, r3, #9
 80077d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80077d4:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	4a67      	ldr	r2, [pc, #412]	; (8007978 <HAL_SAI_Init+0x2d4>)
 80077da:	fba2 2303 	umull	r2, r3, r2, r3
 80077de:	08da      	lsrs	r2, r3, #3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if((tmpval % 10) > 8)
 80077e4:	68f9      	ldr	r1, [r7, #12]
 80077e6:	4b64      	ldr	r3, [pc, #400]	; (8007978 <HAL_SAI_Init+0x2d4>)
 80077e8:	fba3 2301 	umull	r2, r3, r3, r1
 80077ec:	08da      	lsrs	r2, r3, #3
 80077ee:	4613      	mov	r3, r2
 80077f0:	009b      	lsls	r3, r3, #2
 80077f2:	4413      	add	r3, r2
 80077f4:	005b      	lsls	r3, r3, #1
 80077f6:	1aca      	subs	r2, r1, r3
 80077f8:	2a08      	cmp	r2, #8
 80077fa:	d904      	bls.n	8007806 <HAL_SAI_Init+0x162>
    {
      hsai->Init.Mckdiv+= 1;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	6a1b      	ldr	r3, [r3, #32]
 8007800:	1c5a      	adds	r2, r3, #1
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	621a      	str	r2, [r3, #32]
    }
  }

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d003      	beq.n	8007816 <HAL_SAI_Init+0x172>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	2b02      	cmp	r3, #2
 8007814:	d109      	bne.n	800782a <HAL_SAI_Init+0x186>
  { /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781a:	2b01      	cmp	r3, #1
 800781c:	d101      	bne.n	8007822 <HAL_SAI_Init+0x17e>
 800781e:	2300      	movs	r3, #0
 8007820:	e001      	b.n	8007826 <HAL_SAI_Init+0x182>
 8007822:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007826:	61bb      	str	r3, [r7, #24]
 8007828:	e008      	b.n	800783c <HAL_SAI_Init+0x198>
  }
  else
  { /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800782e:	2b01      	cmp	r3, #1
 8007830:	d102      	bne.n	8007838 <HAL_SAI_Init+0x194>
 8007832:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007836:	e000      	b.n	800783a <HAL_SAI_Init+0x196>
 8007838:	2300      	movs	r3, #0
 800783a:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1&=~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	6819      	ldr	r1, [r3, #0]
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	4b4d      	ldr	r3, [pc, #308]	; (800797c <HAL_SAI_Init+0x2d8>)
 8007848:	400b      	ands	r3, r1
 800784a:	6013      	str	r3, [r2, #0]
                         SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN |\
                         SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                         SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	6819      	ldr	r1, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	685a      	ldr	r2, [r3, #4]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800785a:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8007860:	431a      	orrs	r2, r3
                        hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007866:	431a      	orrs	r2, r3
 8007868:	69bb      	ldr	r3, [r7, #24]
 800786a:	431a      	orrs	r2, r3
                        ckstr_bits | syncen_bits |                               \
 800786c:	697b      	ldr	r3, [r7, #20]
 800786e:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ckstr_bits | syncen_bits |                               \
 8007874:	431a      	orrs	r2, r3
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	691b      	ldr	r3, [r3, #16]
 800787a:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	695b      	ldr	r3, [r3, #20]
                        hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8007880:	431a      	orrs	r2, r3
                        hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6a1b      	ldr	r3, [r3, #32]
 8007886:	051b      	lsls	r3, r3, #20
 8007888:	431a      	orrs	r2, r3
  hsai->Instance->CR1|=(hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	430a      	orrs	r2, r1
 8007890:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2&= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	6859      	ldr	r1, [r3, #4]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681a      	ldr	r2, [r3, #0]
 800789c:	4b38      	ldr	r3, [pc, #224]	; (8007980 <HAL_SAI_Init+0x2dc>)
 800789e:	400b      	ands	r3, r1
 80078a0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2|=  (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	6859      	ldr	r1, [r3, #4]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	699a      	ldr	r2, [r3, #24]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b0:	431a      	orrs	r2, r3
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b6:	431a      	orrs	r2, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	430a      	orrs	r2, r1
 80078be:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR&=(~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	6899      	ldr	r1, [r3, #8]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681a      	ldr	r2, [r3, #0]
 80078ca:	4b2e      	ldr	r3, [pc, #184]	; (8007984 <HAL_SAI_Init+0x2e0>)
 80078cc:	400b      	ands	r3, r1
 80078ce:	6093      	str	r3, [r2, #8]
                           SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	6899      	ldr	r1, [r3, #8]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078da:	1e5a      	subs	r2, r3, #1
                          hsai->FrameInit.FSOffset |
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80078e0:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSDefinition |
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                          hsai->FrameInit.FSOffset |
 80078e6:	431a      	orrs	r2, r3
                          hsai->FrameInit.FSPolarity   |
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                          hsai->FrameInit.FSDefinition |
 80078ec:	431a      	orrs	r2, r3
                          ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078f2:	3b01      	subs	r3, #1
 80078f4:	021b      	lsls	r3, r3, #8
                          hsai->FrameInit.FSPolarity   |
 80078f6:	431a      	orrs	r2, r3
  hsai->Instance->FRCR|=((hsai->FrameInit.FrameLength - 1) |
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	430a      	orrs	r2, r1
 80078fe:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR&= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68d9      	ldr	r1, [r3, #12]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681a      	ldr	r2, [r3, #0]
 800790a:	f24f 0320 	movw	r3, #61472	; 0xf020
 800790e:	400b      	ands	r3, r1
 8007910:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN ));

  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	68d9      	ldr	r1, [r3, #12]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007920:	431a      	orrs	r2, r3
                          | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007926:	041b      	lsls	r3, r3, #16
 8007928:	431a      	orrs	r2, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800792e:	3b01      	subs	r3, #1
 8007930:	021b      	lsls	r3, r3, #8
 8007932:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR|=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	430a      	orrs	r2, r1
 800793a:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State= HAL_SAI_STATE_READY;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2200      	movs	r2, #0
 8007950:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3720      	adds	r7, #32
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	40015804 	.word	0x40015804
 8007964:	40015824 	.word	0x40015824
 8007968:	40015800 	.word	0x40015800
 800796c:	40015c00 	.word	0x40015c00
 8007970:	40015c04 	.word	0x40015c04
 8007974:	40015c24 	.word	0x40015c24
 8007978:	cccccccd 	.word	0xcccccccd
 800797c:	ff05c010 	.word	0xff05c010
 8007980:	ffff1ff0 	.word	0xffff1ff0
 8007984:	fff88000 	.word	0xfff88000

08007988 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8007988:	b490      	push	{r4, r7}
 800798a:	b084      	sub	sp, #16
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  register uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock /7/1000);
 8007990:	4b16      	ldr	r3, [pc, #88]	; (80079ec <SAI_Disable+0x64>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a16      	ldr	r2, [pc, #88]	; (80079f0 <SAI_Disable+0x68>)
 8007996:	fba2 2303 	umull	r2, r3, r2, r3
 800799a:	0b1b      	lsrs	r3, r3, #12
 800799c:	009c      	lsls	r4, r3, #2
  HAL_StatusTypeDef status = HAL_OK;
 800799e:	2300      	movs	r3, #0
 80079a0:	73fb      	strb	r3, [r7, #15]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	681a      	ldr	r2, [r3, #0]
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80079b0:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 80079b2:	4623      	mov	r3, r4
 80079b4:	1e5c      	subs	r4, r3, #1
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10a      	bne.n	80079d0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80079c0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 80079ca:	2303      	movs	r3, #3
 80079cc:	73fb      	strb	r3, [r7, #15]
      break;
 80079ce:	e006      	b.n	80079de <SAI_Disable+0x56>
    }
  } while((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1e9      	bne.n	80079b2 <SAI_Disable+0x2a>

  return status;
 80079de:	7bfb      	ldrb	r3, [r7, #15]
}
 80079e0:	4618      	mov	r0, r3
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bc90      	pop	{r4, r7}
 80079e8:	4770      	bx	lr
 80079ea:	bf00      	nop
 80079ec:	20000070 	.word	0x20000070
 80079f0:	95cbec1b 	.word	0x95cbec1b

080079f4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd Pointer to the SD handle  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b082      	sub	sp, #8
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d101      	bne.n	8007a06 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e01d      	b.n	8007a42 <HAL_SD_Init+0x4e>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d105      	bne.n	8007a1e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007a18:	6878      	ldr	r0, [r7, #4]
 8007a1a:	f011 fa45 	bl	8018ea8 <HAL_SD_MspInit>
#endif
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2203      	movs	r2, #3
 8007a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  HAL_SD_InitCard(hsd);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f80f 	bl	8007a4a <HAL_SD_InitCard>

  /* Initialize the error code */
  hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	2200      	movs	r2, #0
 8007a36:	631a      	str	r2, [r3, #48]	; 0x30
                                                                                     
  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2201      	movs	r2, #1
 8007a3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007a40:	2300      	movs	r3, #0
}
 8007a42:	4618      	mov	r0, r3
 8007a44:	3708      	adds	r7, #8
 8007a46:	46bd      	mov	sp, r7
 8007a48:	bd80      	pop	{r7, pc}

08007a4a <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card 
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007a4a:	b5b0      	push	{r4, r5, r7, lr}
 8007a4c:	b08e      	sub	sp, #56	; 0x38
 8007a4e:	af04      	add	r7, sp, #16
 8007a50:	6078      	str	r0, [r7, #4]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007a52:	2300      	movs	r3, #0
 8007a54:	627b      	str	r3, [r7, #36]	; 0x24
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007a56:	2300      	movs	r3, #0
 8007a58:	60fb      	str	r3, [r7, #12]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	613b      	str	r3, [r7, #16]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007a5e:	2300      	movs	r3, #0
 8007a60:	617b      	str	r3, [r7, #20]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007a62:	2300      	movs	r3, #0
 8007a64:	61bb      	str	r3, [r7, #24]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007a66:	2300      	movs	r3, #0
 8007a68:	61fb      	str	r3, [r7, #28]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007a6a:	2376      	movs	r3, #118	; 0x76
 8007a6c:	623b      	str	r3, [r7, #32]

  /* Initialize SDMMC peripheral interface with default configuration */
  SDMMC_Init(hsd->Instance, Init);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681d      	ldr	r5, [r3, #0]
 8007a72:	466c      	mov	r4, sp
 8007a74:	f107 0318 	add.w	r3, r7, #24
 8007a78:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007a7c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007a80:	f107 030c 	add.w	r3, r7, #12
 8007a84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007a86:	4628      	mov	r0, r5
 8007a88:	f002 fffa 	bl	800aa80 <SDMMC_Init>

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd); 
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	685a      	ldr	r2, [r3, #4]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a9a:	605a      	str	r2, [r3, #4]
  
  /* Set Power State to ON */
  SDMMC_PowerState_ON(hsd->Instance);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	f003 f826 	bl	800aaf2 <SDMMC_PowerState_ON>
  
  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ab4:	605a      	str	r2, [r3, #4]
  
  /* Required power up waiting time before starting the SD initialization sequence */
  HAL_Delay(2);
 8007ab6:	2002      	movs	r0, #2
 8007ab8:	f7f9 f84a 	bl	8000b50 <HAL_Delay>
  
  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f000 fe24 	bl	800870a <SD_PowerON>
 8007ac2:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d00b      	beq.n	8007ae2 <HAL_SD_InitCard+0x98>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad8:	431a      	orrs	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e013      	b.n	8007b0a <HAL_SD_InitCard+0xc0>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fd48 	bl	8008578 <SD_InitCard>
 8007ae8:	6278      	str	r0, [r7, #36]	; 0x24
  if(errorstate != HAL_SD_ERROR_NONE)
 8007aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d00b      	beq.n	8007b08 <HAL_SD_InitCard+0xbe>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afe:	431a      	orrs	r2, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b04:	2301      	movs	r3, #1
 8007b06:	e000      	b.n	8007b0a <HAL_SD_InitCard+0xc0>
  }

  return HAL_OK;
 8007b08:	2300      	movs	r3, #0
}
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	3728      	adds	r7, #40	; 0x28
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bdb0      	pop	{r4, r5, r7, pc}
	...

08007b14 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd Block Address from where data is to be read  
  * @param  NumberOfBlocks Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007b14:	b580      	push	{r7, lr}
 8007b16:	b08c      	sub	sp, #48	; 0x30
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	60f8      	str	r0, [r7, #12]
 8007b1c:	60b9      	str	r1, [r7, #8]
 8007b1e:	607a      	str	r2, [r7, #4]
 8007b20:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007b22:	2300      	movs	r3, #0
 8007b24:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d107      	bne.n	8007b3c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b30:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e0b0      	b.n	8007c9e <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	2b01      	cmp	r3, #1
 8007b46:	f040 80a9 	bne.w	8007c9c <HAL_SD_ReadBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2200      	movs	r2, #0
 8007b4e:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	441a      	add	r2, r3
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d907      	bls.n	8007b6e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b62:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e097      	b.n	8007c9e <HAL_SD_ReadBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2203      	movs	r2, #3
 8007b72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8007b8c:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b92:	4a45      	ldr	r2, [pc, #276]	; (8007ca8 <HAL_SD_ReadBlocks_DMA+0x194>)
 8007b94:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9a:	4a44      	ldr	r2, [pc, #272]	; (8007cac <HAL_SD_ReadBlocks_DMA+0x198>)
 8007b9c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	3380      	adds	r3, #128	; 0x80
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	68ba      	ldr	r2, [r7, #8]
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	025b      	lsls	r3, r3, #9
 8007bb8:	089b      	lsrs	r3, r3, #2
 8007bba:	f7f9 fccb 	bl	8001554 <HAL_DMA_Start_IT>
    
    /* Enable SD DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f042 0208 	orr.w	r2, r2, #8
 8007bcc:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bd2:	2b01      	cmp	r3, #1
 8007bd4:	d002      	beq.n	8007bdc <HAL_SD_ReadBlocks_DMA+0xc8>
    {
      BlockAdd *= 512U;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	025b      	lsls	r3, r3, #9
 8007bda:	607b      	str	r3, [r7, #4]
    }
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8007be0:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007be2:	683b      	ldr	r3, [r7, #0]
 8007be4:	025b      	lsls	r3, r3, #9
 8007be6:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007be8:	2390      	movs	r3, #144	; 0x90
 8007bea:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8007bec:	2302      	movs	r3, #2
 8007bee:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f107 0214 	add.w	r2, r7, #20
 8007c00:	4611      	mov	r1, r2
 8007c02:	4618      	mov	r0, r3
 8007c04:	f002 ffde 	bl	800abc4 <SDMMC_ConfigData>

    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007c10:	4618      	mov	r0, r3
 8007c12:	f003 f803 	bl	800ac1c <SDMMC_CmdBlockLength>
 8007c16:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d010      	beq.n	8007c40 <HAL_SD_ReadBlocks_DMA+0x12c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007c26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c2e:	431a      	orrs	r2, r3
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	2201      	movs	r2, #1
 8007c38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e02e      	b.n	8007c9e <HAL_SD_ReadBlocks_DMA+0x18a>
    }
        
    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 8007c40:	683b      	ldr	r3, [r7, #0]
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d90a      	bls.n	8007c5c <HAL_SD_ReadBlocks_DMA+0x148>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	2282      	movs	r2, #130	; 0x82
 8007c4a:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Multi Block command */ 
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, BlockAdd);
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	6879      	ldr	r1, [r7, #4]
 8007c52:	4618      	mov	r0, r3
 8007c54:	f003 f82a 	bl	800acac <SDMMC_CmdReadMultiBlock>
 8007c58:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007c5a:	e009      	b.n	8007c70 <HAL_SD_ReadBlocks_DMA+0x15c>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2281      	movs	r2, #129	; 0x81
 8007c60:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Read Single Block command */ 
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, BlockAdd);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	6879      	ldr	r1, [r7, #4]
 8007c68:	4618      	mov	r0, r3
 8007c6a:	f002 fffb 	bl	800ac64 <SDMMC_CmdReadSingleBlock>
 8007c6e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d010      	beq.n	8007c98 <HAL_SD_ReadBlocks_DMA+0x184>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007c7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c86:	431a      	orrs	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007c94:	2301      	movs	r3, #1
 8007c96:	e002      	b.n	8007c9e <HAL_SD_ReadBlocks_DMA+0x18a>
    }

    return HAL_OK;
 8007c98:	2300      	movs	r3, #0
 8007c9a:	e000      	b.n	8007c9e <HAL_SD_ReadBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8007c9c:	2302      	movs	r3, #2
  }
}
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	3730      	adds	r7, #48	; 0x30
 8007ca2:	46bd      	mov	sp, r7
 8007ca4:	bd80      	pop	{r7, pc}
 8007ca6:	bf00      	nop
 8007ca8:	08008475 	.word	0x08008475
 8007cac:	080084e3 	.word	0x080084e3

08007cb0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd Block Address where data will be written  
  * @param  NumberOfBlocks Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8007cb0:	b580      	push	{r7, lr}
 8007cb2:	b08c      	sub	sp, #48	; 0x30
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	60f8      	str	r0, [r7, #12]
 8007cb8:	60b9      	str	r1, [r7, #8]
 8007cba:	607a      	str	r2, [r7, #4]
 8007cbc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  if(NULL == pData)
 8007cc2:	68bb      	ldr	r3, [r7, #8]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d107      	bne.n	8007cd8 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ccc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e0b0      	b.n	8007e3a <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  
  if(hsd->State == HAL_SD_STATE_READY)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	f040 80a9 	bne.w	8007e38 <HAL_SD_WriteBlocks_DMA+0x188>
  {
    hsd->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	639a      	str	r2, [r3, #56]	; 0x38
    
    if((BlockAdd + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007cec:	687a      	ldr	r2, [r7, #4]
 8007cee:	683b      	ldr	r3, [r7, #0]
 8007cf0:	441a      	add	r2, r3
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cf6:	429a      	cmp	r2, r3
 8007cf8:	d907      	bls.n	8007d0a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	e097      	b.n	8007e3a <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    hsd->State = HAL_SD_STATE_BUSY;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	2203      	movs	r2, #3
 8007d0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2200      	movs	r2, #0
 8007d18:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));    
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f042 021a 	orr.w	r2, r2, #26
 8007d28:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d2e:	4a45      	ldr	r2, [pc, #276]	; (8007e44 <HAL_SD_WriteBlocks_DMA+0x194>)
 8007d30:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d36:	4a44      	ldr	r2, [pc, #272]	; (8007e48 <HAL_SD_WriteBlocks_DMA+0x198>)
 8007d38:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3e:	2200      	movs	r2, #0
 8007d40:	651a      	str	r2, [r3, #80]	; 0x50
    
    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d002      	beq.n	8007d50 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      BlockAdd *= 512U;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	025b      	lsls	r3, r3, #9
 8007d4e:	607b      	str	r3, [r7, #4]
    }
    
    /* Set Block Size for Card */ 
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f002 ff5f 	bl	800ac1c <SDMMC_CmdBlockLength>
 8007d5e:	62f8      	str	r0, [r7, #44]	; 0x2c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d010      	beq.n	8007d88 <HAL_SD_WriteBlocks_DMA+0xd8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007d6e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d76:	431a      	orrs	r2, r3
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007d84:	2301      	movs	r3, #1
 8007d86:	e058      	b.n	8007e3a <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	2b01      	cmp	r3, #1
 8007d8c:	d90a      	bls.n	8007da4 <HAL_SD_WriteBlocks_DMA+0xf4>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	22a0      	movs	r2, #160	; 0xa0
 8007d92:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Multi Block command */ 
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, BlockAdd);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	6879      	ldr	r1, [r7, #4]
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f002 ffce 	bl	800ad3c <SDMMC_CmdWriteMultiBlock>
 8007da0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8007da2:	e009      	b.n	8007db8 <HAL_SD_WriteBlocks_DMA+0x108>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	2290      	movs	r2, #144	; 0x90
 8007da8:	631a      	str	r2, [r3, #48]	; 0x30
      
      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, BlockAdd);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	6879      	ldr	r1, [r7, #4]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f002 ff9f 	bl	800acf4 <SDMMC_CmdWriteSingleBlock>
 8007db6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d010      	beq.n	8007de0 <HAL_SD_WriteBlocks_DMA+0x130>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS); 
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8007dc6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dce:	431a      	orrs	r2, r3
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8007ddc:	2301      	movs	r3, #1
 8007dde:	e02c      	b.n	8007e3a <HAL_SD_WriteBlocks_DMA+0x18a>
    }
    
    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	f042 0208 	orr.w	r2, r2, #8
 8007dee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Enable the DMA Channel */
    HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4);
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8007df4:	68b9      	ldr	r1, [r7, #8]
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3380      	adds	r3, #128	; 0x80
 8007dfc:	461a      	mov	r2, r3
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	025b      	lsls	r3, r3, #9
 8007e02:	089b      	lsrs	r3, r3, #2
 8007e04:	f7f9 fba6 	bl	8001554 <HAL_DMA_Start_IT>
    
    /* Configure the SD DPSM (Data Path State Machine) */ 
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007e08:	f04f 33ff 	mov.w	r3, #4294967295
 8007e0c:	617b      	str	r3, [r7, #20]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	025b      	lsls	r3, r3, #9
 8007e12:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007e14:	2390      	movs	r3, #144	; 0x90
 8007e16:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007e20:	2301      	movs	r3, #1
 8007e22:	62bb      	str	r3, [r7, #40]	; 0x28
    SDMMC_ConfigData(hsd->Instance, &config);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	f107 0214 	add.w	r2, r7, #20
 8007e2c:	4611      	mov	r1, r2
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f002 fec8 	bl	800abc4 <SDMMC_ConfigData>
    
    return HAL_OK;
 8007e34:	2300      	movs	r3, #0
 8007e36:	e000      	b.n	8007e3a <HAL_SD_WriteBlocks_DMA+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8007e38:	2302      	movs	r3, #2
  }
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3730      	adds	r7, #48	; 0x30
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	0800844b 	.word	0x0800844b
 8007e48:	080084e3 	.word	0x080084e3

08007e4c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);
 
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */ 
}
 8007e54:	bf00      	nop
 8007e56:	370c      	adds	r7, #12
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <HAL_SD_GetCardCSD>:
  * @param  pCSD Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007e60:	b480      	push	{r7}
 8007e62:	b085      	sub	sp, #20
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	6078      	str	r0, [r7, #4]
 8007e68:	6039      	str	r1, [r7, #0]
  uint32_t tmp = 0;
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	60fb      	str	r3, [r7, #12]
  
  /* Byte 0 */
  tmp = (hsd->CSD[0] & 0xFF000000U) >> 24;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e72:	0e1b      	lsrs	r3, r3, #24
 8007e74:	60fb      	str	r3, [r7, #12]
  pCSD->CSDStruct      = (uint8_t)((tmp & 0xC0) >> 6);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	099b      	lsrs	r3, r3, #6
 8007e7a:	b2db      	uxtb	r3, r3
 8007e7c:	f003 0303 	and.w	r3, r3, #3
 8007e80:	b2da      	uxtb	r2, r3
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	701a      	strb	r2, [r3, #0]
  pCSD->SysSpecVersion = (uint8_t)((tmp & 0x3C) >> 2);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	089b      	lsrs	r3, r3, #2
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	f003 030f 	and.w	r3, r3, #15
 8007e90:	b2da      	uxtb	r2, r3
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	705a      	strb	r2, [r3, #1]
  pCSD->Reserved1      = tmp & 0x03;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	b2db      	uxtb	r3, r3
 8007e9a:	f003 0303 	and.w	r3, r3, #3
 8007e9e:	b2da      	uxtb	r2, r3
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	709a      	strb	r2, [r3, #2]
  
  /* Byte 1 */
  tmp = (hsd->CSD[0] & 0x00FF0000) >> 16;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ea8:	0c1b      	lsrs	r3, r3, #16
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	60fb      	str	r3, [r7, #12]
  pCSD->TAAC = (uint8_t)tmp;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	b2da      	uxtb	r2, r3
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	70da      	strb	r2, [r3, #3]
  
  /* Byte 2 */
  tmp = (hsd->CSD[0] & 0x0000FF00) >> 8;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007eba:	0a1b      	lsrs	r3, r3, #8
 8007ebc:	b2db      	uxtb	r3, r3
 8007ebe:	60fb      	str	r3, [r7, #12]
  pCSD->NSAC = (uint8_t)tmp;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	b2da      	uxtb	r2, r3
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	711a      	strb	r2, [r3, #4]
  
  /* Byte 3 */
  tmp = hsd->CSD[0] & 0x000000FF;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ecc:	b2db      	uxtb	r3, r3
 8007ece:	60fb      	str	r3, [r7, #12]
  pCSD->MaxBusClkFrec = (uint8_t)tmp;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	b2da      	uxtb	r2, r3
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	715a      	strb	r2, [r3, #5]
  
  /* Byte 4 */
  tmp = (hsd->CSD[1] & 0xFF000000U) >> 24;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007edc:	0e1b      	lsrs	r3, r3, #24
 8007ede:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses = (uint16_t)(tmp << 4);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	b29b      	uxth	r3, r3
 8007ee4:	011b      	lsls	r3, r3, #4
 8007ee6:	b29a      	uxth	r2, r3
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	80da      	strh	r2, [r3, #6]
  
  /* Byte 5 */
  tmp = (hsd->CSD[1] & 0x00FF0000U) >> 16;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007ef0:	0c1b      	lsrs	r3, r3, #16
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	60fb      	str	r3, [r7, #12]
  pCSD->CardComdClasses |= (uint16_t)((tmp & 0xF0) >> 4);
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	88db      	ldrh	r3, [r3, #6]
 8007efa:	b29a      	uxth	r2, r3
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	091b      	lsrs	r3, r3, #4
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	f003 030f 	and.w	r3, r3, #15
 8007f06:	b29b      	uxth	r3, r3
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	b29a      	uxth	r2, r3
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	80da      	strh	r2, [r3, #6]
  pCSD->RdBlockLen       = (uint8_t)(tmp & 0x0F);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	f003 030f 	and.w	r3, r3, #15
 8007f18:	b2da      	uxtb	r2, r3
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	721a      	strb	r2, [r3, #8]
  
  /* Byte 6 */
  tmp = (hsd->CSD[1] & 0x0000FF00U) >> 8;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f22:	0a1b      	lsrs	r3, r3, #8
 8007f24:	b2db      	uxtb	r3, r3
 8007f26:	60fb      	str	r3, [r7, #12]
  pCSD->PartBlockRead   = (uint8_t)((tmp & 0x80) >> 7);
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	09db      	lsrs	r3, r3, #7
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	f003 0301 	and.w	r3, r3, #1
 8007f32:	b2da      	uxtb	r2, r3
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	725a      	strb	r2, [r3, #9]
  pCSD->WrBlockMisalign = (uint8_t)((tmp & 0x40) >> 6);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	099b      	lsrs	r3, r3, #6
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	f003 0301 	and.w	r3, r3, #1
 8007f42:	b2da      	uxtb	r2, r3
 8007f44:	683b      	ldr	r3, [r7, #0]
 8007f46:	729a      	strb	r2, [r3, #10]
  pCSD->RdBlockMisalign = (uint8_t)((tmp & 0x20) >> 5);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	095b      	lsrs	r3, r3, #5
 8007f4c:	b2db      	uxtb	r3, r3
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	b2da      	uxtb	r2, r3
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	72da      	strb	r2, [r3, #11]
  pCSD->DSRImpl         = (uint8_t)((tmp & 0x10) >> 4);
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	091b      	lsrs	r3, r3, #4
 8007f5c:	b2db      	uxtb	r3, r3
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	b2da      	uxtb	r2, r3
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	731a      	strb	r2, [r3, #12]
  pCSD->Reserved2       = 0; /*!< Reserved */
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	735a      	strb	r2, [r3, #13]
       
  if(hsd->SdCard.CardType == CARD_SDSC)
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	f040 8086 	bne.w	8008084 <HAL_SD_GetCardCSD+0x224>
  {
    pCSD->DeviceSize = (tmp & 0x03) << 10;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	029b      	lsls	r3, r3, #10
 8007f7c:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8007f80:	683b      	ldr	r3, [r7, #0]
 8007f82:	611a      	str	r2, [r3, #16]
    
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp) << 2;
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	691a      	ldr	r2, [r3, #16]
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	009b      	lsls	r3, r3, #2
 8007f94:	431a      	orrs	r2, r3
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f9e:	0e1b      	lsrs	r3, r3, #24
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize |= (tmp & 0xC0) >> 6;
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	691a      	ldr	r2, [r3, #16]
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	099b      	lsrs	r3, r3, #6
 8007fac:	f003 0303 	and.w	r3, r3, #3
 8007fb0:	431a      	orrs	r2, r3
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	611a      	str	r2, [r3, #16]
    
    pCSD->MaxRdCurrentVDDMin = (tmp & 0x38) >> 3;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	08db      	lsrs	r3, r3, #3
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	f003 0307 	and.w	r3, r3, #7
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	683b      	ldr	r3, [r7, #0]
 8007fc4:	751a      	strb	r2, [r3, #20]
    pCSD->MaxRdCurrentVDDMax = (tmp & 0x07);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	b2db      	uxtb	r3, r3
 8007fca:	f003 0307 	and.w	r3, r3, #7
 8007fce:	b2da      	uxtb	r2, r3
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	755a      	strb	r2, [r3, #21]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007fd8:	0c1b      	lsrs	r3, r3, #16
 8007fda:	b2db      	uxtb	r3, r3
 8007fdc:	60fb      	str	r3, [r7, #12]
    pCSD->MaxWrCurrentVDDMin = (tmp & 0xE0) >> 5;
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	095b      	lsrs	r3, r3, #5
 8007fe2:	b2db      	uxtb	r3, r3
 8007fe4:	f003 0307 	and.w	r3, r3, #7
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	759a      	strb	r2, [r3, #22]
    pCSD->MaxWrCurrentVDDMax = (tmp & 0x1C) >> 2;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	089b      	lsrs	r3, r3, #2
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	f003 0307 	and.w	r3, r3, #7
 8007ff8:	b2da      	uxtb	r2, r3
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	75da      	strb	r2, [r3, #23]
    pCSD->DeviceSizeMul      = (tmp & 0x03) << 1;
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	b2db      	uxtb	r3, r3
 8008002:	005b      	lsls	r3, r3, #1
 8008004:	b2db      	uxtb	r3, r3
 8008006:	f003 0306 	and.w	r3, r3, #6
 800800a:	b2da      	uxtb	r2, r3
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	761a      	strb	r2, [r3, #24]
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008014:	0a1b      	lsrs	r3, r3, #8
 8008016:	b2db      	uxtb	r3, r3
 8008018:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSizeMul |= (tmp & 0x80) >> 7;
 800801a:	683b      	ldr	r3, [r7, #0]
 800801c:	7e1b      	ldrb	r3, [r3, #24]
 800801e:	b2da      	uxtb	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	09db      	lsrs	r3, r3, #7
 8008024:	b2db      	uxtb	r3, r3
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	b2db      	uxtb	r3, r3
 800802c:	4313      	orrs	r3, r2
 800802e:	b2da      	uxtb	r2, r3
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	761a      	strb	r2, [r3, #24]
    
    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1) ;
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	691b      	ldr	r3, [r3, #16]
 8008038:	1c5a      	adds	r2, r3, #1
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1 << (pCSD->DeviceSizeMul + 2));
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	7e1b      	ldrb	r3, [r3, #24]
 8008042:	b2db      	uxtb	r3, r3
 8008044:	3302      	adds	r3, #2
 8008046:	2201      	movs	r2, #1
 8008048:	409a      	lsls	r2, r3
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800804e:	fb02 f203 	mul.w	r2, r2, r3
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 1 << (pCSD->RdBlockLen);
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	7a1b      	ldrb	r3, [r3, #8]
 800805a:	b2db      	uxtb	r3, r3
 800805c:	461a      	mov	r2, r3
 800805e:	2301      	movs	r3, #1
 8008060:	4093      	lsls	r3, r2
 8008062:	461a      	mov	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512); 
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800806c:	687a      	ldr	r2, [r7, #4]
 800806e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008070:	0a52      	lsrs	r2, r2, #9
 8008072:	fb02 f203 	mul.w	r2, r2, r3
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008080:	661a      	str	r2, [r3, #96]	; 0x60
 8008082:	e04d      	b.n	8008120 <HAL_SD_GetCardCSD+0x2c0>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008088:	2b01      	cmp	r3, #1
 800808a:	d138      	bne.n	80080fe <HAL_SD_GetCardCSD+0x29e>
  {
    /* Byte 7 */
    tmp = (uint8_t)(hsd->CSD[1] & 0x000000FFU);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008090:	b2db      	uxtb	r3, r3
 8008092:	60fb      	str	r3, [r7, #12]
    pCSD->DeviceSize = (tmp & 0x3F) << 16;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	041b      	lsls	r3, r3, #16
 8008098:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	611a      	str	r2, [r3, #16]
    
    /* Byte 8 */
    tmp = (uint8_t)((hsd->CSD[2] & 0xFF000000U) >> 24);
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080a4:	0e1b      	lsrs	r3, r3, #24
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp << 8);
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	691a      	ldr	r2, [r3, #16]
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	021b      	lsls	r3, r3, #8
 80080b2:	431a      	orrs	r2, r3
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	611a      	str	r2, [r3, #16]
    
    /* Byte 9 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x00FF0000U) >> 16);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080bc:	0c1b      	lsrs	r3, r3, #16
 80080be:	b2db      	uxtb	r3, r3
 80080c0:	60fb      	str	r3, [r7, #12]
    
    pCSD->DeviceSize |= (tmp);
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	691a      	ldr	r2, [r3, #16]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	431a      	orrs	r2, r3
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	611a      	str	r2, [r3, #16]
    
    /* Byte 10 */
    tmp = (uint8_t)((hsd->CSD[2] & 0x0000FF00U) >> 8);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080d2:	0a1b      	lsrs	r3, r3, #8
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	60fb      	str	r3, [r7, #12]
    
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr = (((uint64_t)pCSD->DeviceSize + 1) * 1024);
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	691b      	ldr	r3, [r3, #16]
 80080dc:	3301      	adds	r3, #1
 80080de:	029a      	lsls	r2, r3, #10
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	655a      	str	r2, [r3, #84]	; 0x54
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize = 512;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080f2:	659a      	str	r2, [r3, #88]	; 0x58
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	661a      	str	r2, [r3, #96]	; 0x60
 80080fc:	e010      	b.n	8008120 <HAL_SD_GetCardCSD+0x2c0>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);   
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008106:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800810c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800811c:	2301      	movs	r3, #1
 800811e:	e0c1      	b.n	80082a4 <HAL_SD_GetCardCSD+0x444>
  }
  
  pCSD->EraseGrSize = (tmp & 0x40) >> 6;
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	099b      	lsrs	r3, r3, #6
 8008124:	b2db      	uxtb	r3, r3
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	b2da      	uxtb	r2, r3
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	765a      	strb	r2, [r3, #25]
  pCSD->EraseGrMul  = (tmp & 0x3F) << 1;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	b2db      	uxtb	r3, r3
 8008134:	005b      	lsls	r3, r3, #1
 8008136:	b2db      	uxtb	r3, r3
 8008138:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800813c:	b2da      	uxtb	r2, r3
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	769a      	strb	r2, [r3, #26]
  
  /* Byte 11 */
  tmp = (uint8_t)(hsd->CSD[2] & 0x000000FF);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008146:	b2db      	uxtb	r3, r3
 8008148:	60fb      	str	r3, [r7, #12]
  pCSD->EraseGrMul     |= (tmp & 0x80) >> 7;
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	7e9b      	ldrb	r3, [r3, #26]
 800814e:	b2da      	uxtb	r2, r3
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	09db      	lsrs	r3, r3, #7
 8008154:	b2db      	uxtb	r3, r3
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	b2db      	uxtb	r3, r3
 800815c:	4313      	orrs	r3, r2
 800815e:	b2da      	uxtb	r2, r3
 8008160:	683b      	ldr	r3, [r7, #0]
 8008162:	769a      	strb	r2, [r3, #26]
  pCSD->WrProtectGrSize = (tmp & 0x7F);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	b2db      	uxtb	r3, r3
 8008168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800816c:	b2da      	uxtb	r2, r3
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	76da      	strb	r2, [r3, #27]
  
  /* Byte 12 */
  tmp = (uint8_t)((hsd->CSD[3] & 0xFF000000U) >> 24);
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008176:	0e1b      	lsrs	r3, r3, #24
 8008178:	b2db      	uxtb	r3, r3
 800817a:	60fb      	str	r3, [r7, #12]
  pCSD->WrProtectGrEnable = (tmp & 0x80) >> 7;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	09db      	lsrs	r3, r3, #7
 8008180:	b2db      	uxtb	r3, r3
 8008182:	f003 0301 	and.w	r3, r3, #1
 8008186:	b2da      	uxtb	r2, r3
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	771a      	strb	r2, [r3, #28]
  pCSD->ManDeflECC        = (tmp & 0x60) >> 5;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	095b      	lsrs	r3, r3, #5
 8008190:	b2db      	uxtb	r3, r3
 8008192:	f003 0303 	and.w	r3, r3, #3
 8008196:	b2da      	uxtb	r2, r3
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	775a      	strb	r2, [r3, #29]
  pCSD->WrSpeedFact       = (tmp & 0x1C) >> 2;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	089b      	lsrs	r3, r3, #2
 80081a0:	b2db      	uxtb	r3, r3
 80081a2:	f003 0307 	and.w	r3, r3, #7
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	683b      	ldr	r3, [r7, #0]
 80081aa:	779a      	strb	r2, [r3, #30]
  pCSD->MaxWrBlockLen     = (tmp & 0x03) << 2;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	b2db      	uxtb	r3, r3
 80081b0:	009b      	lsls	r3, r3, #2
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	f003 030c 	and.w	r3, r3, #12
 80081b8:	b2da      	uxtb	r2, r3
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	77da      	strb	r2, [r3, #31]
  
  /* Byte 13 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x00FF0000) >> 16);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081c2:	0c1b      	lsrs	r3, r3, #16
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	60fb      	str	r3, [r7, #12]
  pCSD->MaxWrBlockLen      |= (tmp & 0xC0) >> 6;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	7fdb      	ldrb	r3, [r3, #31]
 80081cc:	b2da      	uxtb	r2, r3
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	099b      	lsrs	r3, r3, #6
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	f003 0303 	and.w	r3, r3, #3
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	4313      	orrs	r3, r2
 80081dc:	b2da      	uxtb	r2, r3
 80081de:	683b      	ldr	r3, [r7, #0]
 80081e0:	77da      	strb	r2, [r3, #31]
  pCSD->WriteBlockPaPartial = (tmp & 0x20) >> 5;
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	095b      	lsrs	r3, r3, #5
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	f003 0301 	and.w	r3, r3, #1
 80081ec:	b2da      	uxtb	r2, r3
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	f883 2020 	strb.w	r2, [r3, #32]
  pCSD->Reserved3           = 0;
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  pCSD->ContentProtectAppli = (tmp & 0x01);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	b2db      	uxtb	r3, r3
 8008200:	f003 0301 	and.w	r3, r3, #1
 8008204:	b2da      	uxtb	r2, r3
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
  
  /* Byte 14 */
  tmp = (uint8_t)((hsd->CSD[3] & 0x0000FF00) >> 8);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008210:	0a1b      	lsrs	r3, r3, #8
 8008212:	b2db      	uxtb	r3, r3
 8008214:	60fb      	str	r3, [r7, #12]
  pCSD->FileFormatGrouop = (tmp & 0x80) >> 7;
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	09db      	lsrs	r3, r3, #7
 800821a:	b2db      	uxtb	r3, r3
 800821c:	f003 0301 	and.w	r3, r3, #1
 8008220:	b2da      	uxtb	r2, r3
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
  pCSD->CopyFlag         = (tmp & 0x40) >> 6;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	099b      	lsrs	r3, r3, #6
 800822c:	b2db      	uxtb	r3, r3
 800822e:	f003 0301 	and.w	r3, r3, #1
 8008232:	b2da      	uxtb	r2, r3
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  pCSD->PermWrProtect    = (tmp & 0x20) >> 5;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	095b      	lsrs	r3, r3, #5
 800823e:	b2db      	uxtb	r3, r3
 8008240:	f003 0301 	and.w	r3, r3, #1
 8008244:	b2da      	uxtb	r2, r3
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  pCSD->TempWrProtect    = (tmp & 0x10) >> 4;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	091b      	lsrs	r3, r3, #4
 8008250:	b2db      	uxtb	r3, r3
 8008252:	f003 0301 	and.w	r3, r3, #1
 8008256:	b2da      	uxtb	r2, r3
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  pCSD->FileFormat       = (tmp & 0x0C) >> 2;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	089b      	lsrs	r3, r3, #2
 8008262:	b2db      	uxtb	r3, r3
 8008264:	f003 0303 	and.w	r3, r3, #3
 8008268:	b2da      	uxtb	r2, r3
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  pCSD->ECC              = (tmp & 0x03);
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	b2db      	uxtb	r3, r3
 8008274:	f003 0303 	and.w	r3, r3, #3
 8008278:	b2da      	uxtb	r2, r3
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  
  /* Byte 15 */
  tmp = (uint8_t)(hsd->CSD[3] & 0x000000FF);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008284:	b2db      	uxtb	r3, r3
 8008286:	60fb      	str	r3, [r7, #12]
  pCSD->CSD_CRC   = (tmp & 0xFE) >> 1;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	085b      	lsrs	r3, r3, #1
 800828c:	b2db      	uxtb	r3, r3
 800828e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008292:	b2da      	uxtb	r2, r3
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  pCSD->Reserved4 = 1;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	2201      	movs	r2, #1
 800829e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  return HAL_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr

080082b0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo Pointer to the HAL_SD_CardInfoTypeDef structure that 
  *         will contain the SD card status information 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80082b0:	b480      	push	{r7}
 80082b2:	b083      	sub	sp, #12
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
 80082b8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80082de:	683b      	ldr	r3, [r7, #0]
 80082e0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80082e6:	683b      	ldr	r3, [r7, #0]
 80082e8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80082ee:	683b      	ldr	r3, [r7, #0]
 80082f0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	61da      	str	r2, [r3, #28]
  
  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008308:	b5b0      	push	{r4, r5, r7, lr}
 800830a:	b08e      	sub	sp, #56	; 0x38
 800830c:	af04      	add	r7, sp, #16
 800830e:	6078      	str	r0, [r7, #4]
 8008310:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008312:	2300      	movs	r3, #0
 8008314:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));
  
  /* Chnage Satte */
  hsd->State = HAL_SD_STATE_BUSY;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2203      	movs	r2, #3
 800831a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008322:	2b03      	cmp	r3, #3
 8008324:	d02e      	beq.n	8008384 <HAL_SD_ConfigWideBusOperation+0x7c>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800832c:	d106      	bne.n	800833c <HAL_SD_ConfigWideBusOperation+0x34>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008332:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	639a      	str	r2, [r3, #56]	; 0x38
 800833a:	e029      	b.n	8008390 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008342:	d10a      	bne.n	800835a <HAL_SD_ConfigWideBusOperation+0x52>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fab2 	bl	80088ae <SD_WideBus_Enable>
 800834a:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008352:	431a      	orrs	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	639a      	str	r2, [r3, #56]	; 0x38
 8008358:	e01a      	b.n	8008390 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d10a      	bne.n	8008376 <HAL_SD_ConfigWideBusOperation+0x6e>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 faf1 	bl	8008948 <SD_WideBus_Disable>
 8008366:	6278      	str	r0, [r7, #36]	; 0x24
      
      hsd->ErrorCode |= errorstate;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800836c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800836e:	431a      	orrs	r2, r3
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	639a      	str	r2, [r3, #56]	; 0x38
 8008374:	e00c      	b.n	8008390 <HAL_SD_ConfigWideBusOperation+0x88>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800837a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	639a      	str	r2, [r3, #56]	; 0x38
 8008382:	e005      	b.n	8008390 <HAL_SD_ConfigWideBusOperation+0x88>
    }
  }  
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008388:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008394:	2b00      	cmp	r3, #0
 8008396:	d00a      	beq.n	80083ae <HAL_SD_ConfigWideBusOperation+0xa6>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80083a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2201      	movs	r2, #1
 80083a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80083aa:	2301      	movs	r3, #1
 80083ac:	e024      	b.n	80083f8 <HAL_SD_ConfigWideBusOperation+0xf0>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	695b      	ldr	r3, [r3, #20]
 80083c8:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	699b      	ldr	r3, [r3, #24]
 80083ce:	623b      	str	r3, [r7, #32]
    SDMMC_Init(hsd->Instance, Init);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681d      	ldr	r5, [r3, #0]
 80083d4:	466c      	mov	r4, sp
 80083d6:	f107 0318 	add.w	r3, r7, #24
 80083da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80083de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80083e2:	f107 030c 	add.w	r3, r7, #12
 80083e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80083e8:	4628      	mov	r0, r5
 80083ea:	f002 fb49 	bl	800aa80 <SDMMC_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	2201      	movs	r2, #1
 80083f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  return HAL_OK;
 80083f6:	2300      	movs	r3, #0
}
 80083f8:	4618      	mov	r0, r3
 80083fa:	3728      	adds	r7, #40	; 0x28
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bdb0      	pop	{r4, r5, r7, pc}

08008400 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStateTypeDef cardstate =  HAL_SD_CARD_TRANSFER;
 8008408:	2304      	movs	r3, #4
 800840a:	75fb      	strb	r3, [r7, #23]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800840c:	2300      	movs	r3, #0
 800840e:	613b      	str	r3, [r7, #16]
  uint32_t resp1 = 0;
 8008410:	2300      	movs	r3, #0
 8008412:	60fb      	str	r3, [r7, #12]
  
  errorstate = SD_SendStatus(hsd, &resp1);
 8008414:	f107 030c 	add.w	r3, r7, #12
 8008418:	4619      	mov	r1, r3
 800841a:	6878      	ldr	r0, [r7, #4]
 800841c:	f000 fa1d 	bl	800885a <SD_SendStatus>
 8008420:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_OK)
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d005      	beq.n	8008434 <HAL_SD_GetCardState+0x34>
  {
    hsd->ErrorCode |= errorstate;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800842c:	693b      	ldr	r3, [r7, #16]
 800842e:	431a      	orrs	r2, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = (HAL_SD_CardStateTypeDef)((resp1 >> 9) & 0x0F);
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	0a5b      	lsrs	r3, r3, #9
 8008438:	b2db      	uxtb	r3, r3
 800843a:	f003 030f 	and.w	r3, r3, #15
 800843e:	75fb      	strb	r3, [r7, #23]
  
  return cardstate;
 8008440:	7dfb      	ldrb	r3, [r7, #23]
}
 8008442:	4618      	mov	r0, r3
 8008444:	3718      	adds	r7, #24
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)     
{
 800844a:	b480      	push	{r7}
 800844c:	b085      	sub	sp, #20
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008456:	60fb      	str	r3, [r7, #12]
  
  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008466:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8008468:	bf00      	nop
 800846a:	3714      	adds	r7, #20
 800846c:	46bd      	mov	sp, r7
 800846e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008472:	4770      	bx	lr

08008474 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback 
  * @param  hdma DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)  
{
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008480:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008482:	2300      	movs	r3, #0
 8008484:	60bb      	str	r3, [r7, #8]
  
  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800848a:	2b82      	cmp	r3, #130	; 0x82
 800848c:	d111      	bne.n	80084b2 <SD_DMAReceiveCplt+0x3e>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4618      	mov	r0, r3
 8008494:	f002 fc76 	bl	800ad84 <SDMMC_CmdStopTransfer>
 8008498:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d008      	beq.n	80084b2 <SD_DMAReceiveCplt+0x3e>
    {
      hsd->ErrorCode |= errorstate;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084a4:	68bb      	ldr	r3, [r7, #8]
 80084a6:	431a      	orrs	r2, r3
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 80084ac:	68f8      	ldr	r0, [r7, #12]
 80084ae:	f7ff fccd 	bl	8007e4c <HAL_SD_ErrorCallback>
    }
  }
  
  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	f022 0208 	bic.w	r2, r2, #8
 80084c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f240 52ff 	movw	r2, #1535	; 0x5ff
 80084ca:	639a      	str	r2, [r3, #56]	; 0x38
  
  hsd->State = HAL_SD_STATE_READY;
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	2201      	movs	r2, #1
 80084d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 80084d4:	68f8      	ldr	r0, [r7, #12]
 80084d6:	f00e fe1f 	bl	8017118 <HAL_SD_RxCpltCallback>
#endif
}
 80084da:	bf00      	nop
 80084dc:	3710      	adds	r7, #16
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <SD_DMAError>:
* @brief  DMA SD communication error callback 
* @param  hdma DMA handle
* @retval None
*/
static void SD_DMAError(DMA_HandleTypeDef *hdma)   
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b084      	sub	sp, #16
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ee:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;
  
  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80084f0:	6878      	ldr	r0, [r7, #4]
 80084f2:	f7f9 f88f 	bl	8001614 <HAL_DMA_GetError>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b02      	cmp	r3, #2
 80084fa:	d039      	beq.n	8008570 <SD_DMAError+0x8e>
  {
    if((hsd->hdmarx->ErrorCode == HAL_DMA_ERROR_TE) || (hsd->hdmatx->ErrorCode == HAL_DMA_ERROR_TE))
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008502:	2b01      	cmp	r3, #1
 8008504:	d004      	beq.n	8008510 <SD_DMAError+0x2e>
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800850c:	2b01      	cmp	r3, #1
 800850e:	d12c      	bne.n	800856a <SD_DMAError+0x88>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008518:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008528:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);
      
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8008536:	68f8      	ldr	r0, [r7, #12]
 8008538:	f7ff ff62 	bl	8008400 <HAL_SD_GetCardState>
 800853c:	4603      	mov	r3, r0
 800853e:	72fb      	strb	r3, [r7, #11]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8008540:	7afb      	ldrb	r3, [r7, #11]
 8008542:	2b06      	cmp	r3, #6
 8008544:	d002      	beq.n	800854c <SD_DMAError+0x6a>
 8008546:	7afb      	ldrb	r3, [r7, #11]
 8008548:	2b05      	cmp	r3, #5
 800854a:	d10a      	bne.n	8008562 <SD_DMAError+0x80>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4618      	mov	r0, r3
 8008552:	f002 fc17 	bl	800ad84 <SDMMC_CmdStopTransfer>
 8008556:	4602      	mov	r2, r0
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855c:	431a      	orrs	r2, r3
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	639a      	str	r2, [r3, #56]	; 0x38
      }
      
      hsd->State= HAL_SD_STATE_READY;
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	2201      	movs	r2, #1
 8008566:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f7ff fc6e 	bl	8007e4c <HAL_SD_ErrorCallback>
#endif
  }
}
 8008570:	bf00      	nop
 8008572:	3710      	adds	r7, #16
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}

08008578 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008578:	b5b0      	push	{r4, r5, r7, lr}
 800857a:	b094      	sub	sp, #80	; 0x50
 800857c:	af04      	add	r7, sp, #16
 800857e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008580:	2300      	movs	r3, #0
 8008582:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint16_t sd_rca = 1;
 8008584:	2301      	movs	r3, #1
 8008586:	81fb      	strh	r3, [r7, #14]
  
  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0) 
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4618      	mov	r0, r3
 800858e:	f002 fabe 	bl	800ab0e <SDMMC_GetPowerState>
 8008592:	4603      	mov	r3, r0
 8008594:	2b00      	cmp	r3, #0
 8008596:	d102      	bne.n	800859e <SD_InitCard+0x26>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008598:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800859c:	e0b1      	b.n	8008702 <SD_InitCard+0x18a>
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085a2:	2b03      	cmp	r3, #3
 80085a4:	d02f      	beq.n	8008606 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4618      	mov	r0, r3
 80085ac:	f002 fd05 	bl	800afba <SDMMC_CmdSendCID>
 80085b0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80085b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d001      	beq.n	80085bc <SD_InitCard+0x44>
    {
      return errorstate;
 80085b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80085ba:	e0a2      	b.n	8008702 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	2100      	movs	r1, #0
 80085c2:	4618      	mov	r0, r3
 80085c4:	f002 fae9 	bl	800ab9a <SDMMC_GetResponse>
 80085c8:	4602      	mov	r2, r0
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2104      	movs	r1, #4
 80085d4:	4618      	mov	r0, r3
 80085d6:	f002 fae0 	bl	800ab9a <SDMMC_GetResponse>
 80085da:	4602      	mov	r2, r0
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2108      	movs	r1, #8
 80085e6:	4618      	mov	r0, r3
 80085e8:	f002 fad7 	bl	800ab9a <SDMMC_GetResponse>
 80085ec:	4602      	mov	r2, r0
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	210c      	movs	r1, #12
 80085f8:	4618      	mov	r0, r3
 80085fa:	f002 face 	bl	800ab9a <SDMMC_GetResponse>
 80085fe:	4602      	mov	r2, r0
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }
  
  if(hsd->SdCard.CardType != CARD_SECURED) 
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800860a:	2b03      	cmp	r3, #3
 800860c:	d00d      	beq.n	800862a <SD_InitCard+0xb2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f107 020e 	add.w	r2, r7, #14
 8008616:	4611      	mov	r1, r2
 8008618:	4618      	mov	r0, r3
 800861a:	f002 fd0f 	bl	800b03c <SDMMC_CmdSetRelAdd>
 800861e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008622:	2b00      	cmp	r3, #0
 8008624:	d001      	beq.n	800862a <SD_InitCard+0xb2>
    {
      return errorstate;
 8008626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008628:	e06b      	b.n	8008702 <SD_InitCard+0x18a>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED) 
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800862e:	2b03      	cmp	r3, #3
 8008630:	d036      	beq.n	80086a0 <SD_InitCard+0x128>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008632:	89fb      	ldrh	r3, [r7, #14]
 8008634:	461a      	mov	r2, r3
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681a      	ldr	r2, [r3, #0]
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008642:	041b      	lsls	r3, r3, #16
 8008644:	4619      	mov	r1, r3
 8008646:	4610      	mov	r0, r2
 8008648:	f002 fcd7 	bl	800affa <SDMMC_CmdSendCSD>
 800864c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800864e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008650:	2b00      	cmp	r3, #0
 8008652:	d001      	beq.n	8008658 <SD_InitCard+0xe0>
    {
      return errorstate;
 8008654:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008656:	e054      	b.n	8008702 <SD_InitCard+0x18a>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2100      	movs	r1, #0
 800865e:	4618      	mov	r0, r3
 8008660:	f002 fa9b 	bl	800ab9a <SDMMC_GetResponse>
 8008664:	4602      	mov	r2, r0
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2104      	movs	r1, #4
 8008670:	4618      	mov	r0, r3
 8008672:	f002 fa92 	bl	800ab9a <SDMMC_GetResponse>
 8008676:	4602      	mov	r2, r0
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	2108      	movs	r1, #8
 8008682:	4618      	mov	r0, r3
 8008684:	f002 fa89 	bl	800ab9a <SDMMC_GetResponse>
 8008688:	4602      	mov	r2, r0
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	210c      	movs	r1, #12
 8008694:	4618      	mov	r0, r3
 8008696:	f002 fa80 	bl	800ab9a <SDMMC_GetResponse>
 800869a:	4602      	mov	r2, r0
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }
  
  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2104      	movs	r1, #4
 80086a6:	4618      	mov	r0, r3
 80086a8:	f002 fa77 	bl	800ab9a <SDMMC_GetResponse>
 80086ac:	4603      	mov	r3, r0
 80086ae:	0d1a      	lsrs	r2, r3, #20
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	64da      	str	r2, [r3, #76]	; 0x4c
  
  /* Get CSD parameters */
  HAL_SD_GetCardCSD(hsd, &CSD);
 80086b4:	f107 0310 	add.w	r3, r7, #16
 80086b8:	4619      	mov	r1, r3
 80086ba:	6878      	ldr	r0, [r7, #4]
 80086bc:	f7ff fbd0 	bl	8007e60 <HAL_SD_GetCardCSD>

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16));
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6819      	ldr	r1, [r3, #0]
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086c8:	041b      	lsls	r3, r3, #16
 80086ca:	f04f 0400 	mov.w	r4, #0
 80086ce:	461a      	mov	r2, r3
 80086d0:	4623      	mov	r3, r4
 80086d2:	4608      	mov	r0, r1
 80086d4:	f002 fb7a 	bl	800adcc <SDMMC_CmdSelDesel>
 80086d8:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80086da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d001      	beq.n	80086e4 <SD_InitCard+0x16c>
  {
    return errorstate;
 80086e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086e2:	e00e      	b.n	8008702 <SD_InitCard+0x18a>
  }

  /* Configure SDMMC peripheral interface */     
  SDMMC_Init(hsd->Instance, hsd->Init);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681d      	ldr	r5, [r3, #0]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	466c      	mov	r4, sp
 80086ec:	f103 0210 	add.w	r2, r3, #16
 80086f0:	ca07      	ldmia	r2, {r0, r1, r2}
 80086f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80086f6:	3304      	adds	r3, #4
 80086f8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80086fa:	4628      	mov	r0, r5
 80086fc:	f002 f9c0 	bl	800aa80 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008700:	2300      	movs	r3, #0
}
 8008702:	4618      	mov	r0, r3
 8008704:	3740      	adds	r7, #64	; 0x40
 8008706:	46bd      	mov	sp, r7
 8008708:	bdb0      	pop	{r4, r5, r7, pc}

0800870a <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800870a:	b580      	push	{r7, lr}
 800870c:	b086      	sub	sp, #24
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8008712:	2300      	movs	r3, #0
 8008714:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0, validvoltage = 0;
 8008716:	2300      	movs	r3, #0
 8008718:	617b      	str	r3, [r7, #20]
 800871a:	2300      	movs	r3, #0
 800871c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 800871e:	2300      	movs	r3, #0
 8008720:	60fb      	str	r3, [r7, #12]
  
  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4618      	mov	r0, r3
 8008728:	f002 fb75 	bl	800ae16 <SDMMC_CmdGoIdleState>
 800872c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d001      	beq.n	8008738 <SD_PowerON+0x2e>
  {
    return errorstate;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	e08c      	b.n	8008852 <SD_PowerON+0x148>
  }
  
  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	4618      	mov	r0, r3
 800873e:	f002 fb8a 	bl	800ae56 <SDMMC_CmdOperCond>
 8008742:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d03d      	beq.n	80087c6 <SD_PowerON+0xbc>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	649a      	str	r2, [r3, #72]	; 0x48
      
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 8008750:	e032      	b.n	80087b8 <SD_PowerON+0xae>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	1c5a      	adds	r2, r3, #1
 8008756:	60ba      	str	r2, [r7, #8]
 8008758:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800875c:	4293      	cmp	r3, r2
 800875e:	d102      	bne.n	8008766 <SD_PowerON+0x5c>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008760:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008764:	e075      	b.n	8008852 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	2100      	movs	r1, #0
 800876c:	4618      	mov	r0, r3
 800876e:	f002 fb93 	bl	800ae98 <SDMMC_CmdAppCommand>
 8008772:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d002      	beq.n	8008780 <SD_PowerON+0x76>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800877a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800877e:	e068      	b.n	8008852 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_STD_CAPACITY);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	2100      	movs	r1, #0
 8008786:	4618      	mov	r0, r3
 8008788:	f002 fbaa 	bl	800aee0 <SDMMC_CmdAppOperCommand>
 800878c:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d002      	beq.n	800879a <SD_PowerON+0x90>
      {
        return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008794:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008798:	e05b      	b.n	8008852 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2100      	movs	r1, #0
 80087a0:	4618      	mov	r0, r3
 80087a2:	f002 f9fa 	bl	800ab9a <SDMMC_GetResponse>
 80087a6:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	0fdb      	lsrs	r3, r3, #31
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	bf0c      	ite	eq
 80087b0:	2301      	moveq	r3, #1
 80087b2:	2300      	movne	r3, #0
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d0c9      	beq.n	8008752 <SD_PowerON+0x48>
    }
    /* Card type is SDSC */
    hsd->SdCard.CardType = CARD_SDSC;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	645a      	str	r2, [r3, #68]	; 0x44
 80087c4:	e044      	b.n	8008850 <SD_PowerON+0x146>
  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2201      	movs	r2, #1
 80087ca:	649a      	str	r2, [r3, #72]	; 0x48
        
    /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
    while(validvoltage == 0)
 80087cc:	e031      	b.n	8008832 <SD_PowerON+0x128>
    {
      if(count++ == SDMMC_MAX_VOLT_TRIAL)
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	1c5a      	adds	r2, r3, #1
 80087d2:	60ba      	str	r2, [r7, #8]
 80087d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80087d8:	4293      	cmp	r3, r2
 80087da:	d102      	bne.n	80087e2 <SD_PowerON+0xd8>
      {
        return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80087dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80087e0:	e037      	b.n	8008852 <SD_PowerON+0x148>
      }
      
      /* SEND CMD55 APP_CMD with RCA as 0 */
      errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	2100      	movs	r1, #0
 80087e8:	4618      	mov	r0, r3
 80087ea:	f002 fb55 	bl	800ae98 <SDMMC_CmdAppCommand>
 80087ee:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d001      	beq.n	80087fa <SD_PowerON+0xf0>
      {
        return errorstate;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	e02b      	b.n	8008852 <SD_PowerON+0x148>
      }
      
      /* Send CMD41 */
      errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_HIGH_CAPACITY);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8008802:	4618      	mov	r0, r3
 8008804:	f002 fb6c 	bl	800aee0 <SDMMC_CmdAppOperCommand>
 8008808:	60f8      	str	r0, [r7, #12]
      if(errorstate != HAL_SD_ERROR_NONE)
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d001      	beq.n	8008814 <SD_PowerON+0x10a>
      {
        return errorstate;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	e01e      	b.n	8008852 <SD_PowerON+0x148>
      }
      
      /* Get command response */
      response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	2100      	movs	r1, #0
 800881a:	4618      	mov	r0, r3
 800881c:	f002 f9bd 	bl	800ab9a <SDMMC_GetResponse>
 8008820:	6178      	str	r0, [r7, #20]
      
      /* Get operating voltage*/
      validvoltage = (((response >> 31) == 1) ? 1 : 0);
 8008822:	697b      	ldr	r3, [r7, #20]
 8008824:	0fdb      	lsrs	r3, r3, #31
 8008826:	2b01      	cmp	r3, #1
 8008828:	bf0c      	ite	eq
 800882a:	2301      	moveq	r3, #1
 800882c:	2300      	movne	r3, #0
 800882e:	b2db      	uxtb	r3, r3
 8008830:	613b      	str	r3, [r7, #16]
    while(validvoltage == 0)
 8008832:	693b      	ldr	r3, [r7, #16]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d0ca      	beq.n	80087ce <SD_PowerON+0xc4>
    }
    
    if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008838:	697b      	ldr	r3, [r7, #20]
 800883a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800883e:	2b00      	cmp	r3, #0
 8008840:	d003      	beq.n	800884a <SD_PowerON+0x140>
    {
      hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2201      	movs	r2, #1
 8008846:	645a      	str	r2, [r3, #68]	; 0x44
 8008848:	e002      	b.n	8008850 <SD_PowerON+0x146>
    }
    else
    {
      hsd->SdCard.CardType = CARD_SDSC;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2200      	movs	r2, #0
 800884e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }
  
  return HAL_SD_ERROR_NONE;
 8008850:	2300      	movs	r3, #0
}
 8008852:	4618      	mov	r0, r3
 8008854:	3718      	adds	r7, #24
 8008856:	46bd      	mov	sp, r7
 8008858:	bd80      	pop	{r7, pc}

0800885a <SD_SendStatus>:
  * @param  pCardStatus pointer to the buffer that will contain the SD card 
  *         status (Card Status register)  
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800885a:	b580      	push	{r7, lr}
 800885c:	b084      	sub	sp, #16
 800885e:	af00      	add	r7, sp, #0
 8008860:	6078      	str	r0, [r7, #4]
 8008862:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008864:	2300      	movs	r3, #0
 8008866:	60fb      	str	r3, [r7, #12]
  
  if(pCardStatus == NULL)
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	2b00      	cmp	r3, #0
 800886c:	d102      	bne.n	8008874 <SD_SendStatus+0x1a>
  {
    return HAL_SD_ERROR_PARAM;
 800886e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008872:	e018      	b.n	80088a6 <SD_SendStatus+0x4c>
  }
  
  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681a      	ldr	r2, [r3, #0]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800887c:	041b      	lsls	r3, r3, #16
 800887e:	4619      	mov	r1, r3
 8008880:	4610      	mov	r0, r2
 8008882:	f002 fbfe 	bl	800b082 <SDMMC_CmdSendStatus>
 8008886:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_OK)
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <SD_SendStatus+0x38>
  {
    return errorstate;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	e009      	b.n	80088a6 <SD_SendStatus+0x4c>
  }
  
  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2100      	movs	r1, #0
 8008898:	4618      	mov	r0, r3
 800889a:	f002 f97e 	bl	800ab9a <SDMMC_GetResponse>
 800889e:	4602      	mov	r2, r0
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	601a      	str	r2, [r3, #0]
  
  return HAL_SD_ERROR_NONE;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b086      	sub	sp, #24
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 80088b6:	2300      	movs	r3, #0
 80088b8:	60fb      	str	r3, [r7, #12]
 80088ba:	2300      	movs	r3, #0
 80088bc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80088be:	2300      	movs	r3, #0
 80088c0:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	2100      	movs	r1, #0
 80088c8:	4618      	mov	r0, r3
 80088ca:	f002 f966 	bl	800ab9a <SDMMC_GetResponse>
 80088ce:	4603      	mov	r3, r0
 80088d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80088d8:	d102      	bne.n	80088e0 <SD_WideBus_Enable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80088da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80088de:	e02f      	b.n	8008940 <SD_WideBus_Enable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80088e0:	f107 030c 	add.w	r3, r7, #12
 80088e4:	4619      	mov	r1, r3
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f87b 	bl	80089e2 <SD_FindSCR>
 80088ec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d001      	beq.n	80088f8 <SD_WideBus_Enable+0x4a>
  {
    return errorstate;
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	e023      	b.n	8008940 <SD_WideBus_Enable+0x92>
  }
  
  /* If requested card supports wide bus operation */
  if((scr[1] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d01c      	beq.n	800893c <SD_WideBus_Enable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681a      	ldr	r2, [r3, #0]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800890a:	041b      	lsls	r3, r3, #16
 800890c:	4619      	mov	r1, r3
 800890e:	4610      	mov	r0, r2
 8008910:	f002 fac2 	bl	800ae98 <SDMMC_CmdAppCommand>
 8008914:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d001      	beq.n	8008920 <SD_WideBus_Enable+0x72>
    {
      return errorstate;
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	e00f      	b.n	8008940 <SD_WideBus_Enable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	2102      	movs	r1, #2
 8008926:	4618      	mov	r0, r3
 8008928:	f002 fb00 	bl	800af2c <SDMMC_CmdBusWidth>
 800892c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d001      	beq.n	8008938 <SD_WideBus_Enable+0x8a>
    {
      return errorstate;
 8008934:	697b      	ldr	r3, [r7, #20]
 8008936:	e003      	b.n	8008940 <SD_WideBus_Enable+0x92>
    }

    return HAL_SD_ERROR_NONE;
 8008938:	2300      	movs	r3, #0
 800893a:	e001      	b.n	8008940 <SD_WideBus_Enable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800893c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8008940:	4618      	mov	r0, r3
 8008942:	3718      	adds	r7, #24
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b086      	sub	sp, #24
 800894c:	af00      	add	r7, sp, #0
 800894e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2] = {0, 0};
 8008950:	2300      	movs	r3, #0
 8008952:	60fb      	str	r3, [r7, #12]
 8008954:	2300      	movs	r3, #0
 8008956:	613b      	str	r3, [r7, #16]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 8008958:	2300      	movs	r3, #0
 800895a:	617b      	str	r3, [r7, #20]
  
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2100      	movs	r1, #0
 8008962:	4618      	mov	r0, r3
 8008964:	f002 f919 	bl	800ab9a <SDMMC_GetResponse>
 8008968:	4603      	mov	r3, r0
 800896a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800896e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008972:	d102      	bne.n	800897a <SD_WideBus_Disable+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8008974:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008978:	e02f      	b.n	80089da <SD_WideBus_Disable+0x92>
  }
  
  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800897a:	f107 030c 	add.w	r3, r7, #12
 800897e:	4619      	mov	r1, r3
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 f82e 	bl	80089e2 <SD_FindSCR>
 8008986:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_OK)
 8008988:	697b      	ldr	r3, [r7, #20]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d001      	beq.n	8008992 <SD_WideBus_Disable+0x4a>
  {
    return errorstate;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	e023      	b.n	80089da <SD_WideBus_Disable+0x92>
  }
  
  /* If requested card supports 1 bit mode operation */
  if((scr[1] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008998:	2b00      	cmp	r3, #0
 800899a:	d01c      	beq.n	80089d6 <SD_WideBus_Disable+0x8e>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16));
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681a      	ldr	r2, [r3, #0]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089a4:	041b      	lsls	r3, r3, #16
 80089a6:	4619      	mov	r1, r3
 80089a8:	4610      	mov	r0, r2
 80089aa:	f002 fa75 	bl	800ae98 <SDMMC_CmdAppCommand>
 80089ae:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80089b0:	697b      	ldr	r3, [r7, #20]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d001      	beq.n	80089ba <SD_WideBus_Disable+0x72>
    {
      return errorstate;
 80089b6:	697b      	ldr	r3, [r7, #20]
 80089b8:	e00f      	b.n	80089da <SD_WideBus_Disable+0x92>
    }
    
    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	2100      	movs	r1, #0
 80089c0:	4618      	mov	r0, r3
 80089c2:	f002 fab3 	bl	800af2c <SDMMC_CmdBusWidth>
 80089c6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_OK)
 80089c8:	697b      	ldr	r3, [r7, #20]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d001      	beq.n	80089d2 <SD_WideBus_Disable+0x8a>
    {
      return errorstate;
 80089ce:	697b      	ldr	r3, [r7, #20]
 80089d0:	e003      	b.n	80089da <SD_WideBus_Disable+0x92>
    }
    
    return HAL_SD_ERROR_NONE;
 80089d2:	2300      	movs	r3, #0
 80089d4:	e001      	b.n	80089da <SD_WideBus_Disable+0x92>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80089d6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80089da:	4618      	mov	r0, r3
 80089dc:	3718      	adds	r7, #24
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}

080089e2 <SD_FindSCR>:
  * @param  hsd Pointer to SD handle
  * @param  pSCR pointer to the buffer that will contain the SCR value  
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80089e2:	b590      	push	{r4, r7, lr}
 80089e4:	b08f      	sub	sp, #60	; 0x3c
 80089e6:	af00      	add	r7, sp, #0
 80089e8:	6078      	str	r0, [r7, #4]
 80089ea:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 80089ec:	2300      	movs	r3, #0
 80089ee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80089f0:	f7f8 f8a2 	bl	8000b38 <HAL_GetTick>
 80089f4:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t index = 0;
 80089f6:	2300      	movs	r3, #0
 80089f8:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2] = {0, 0};
 80089fa:	2300      	movs	r3, #0
 80089fc:	60fb      	str	r3, [r7, #12]
 80089fe:	2300      	movs	r3, #0
 8008a00:	613b      	str	r3, [r7, #16]
  
  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2108      	movs	r1, #8
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f002 f907 	bl	800ac1c <SDMMC_CmdBlockLength>
 8008a0e:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <SD_FindSCR+0x38>
  {
    return errorstate;
 8008a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a18:	e0a8      	b.n	8008b6c <SD_FindSCR+0x18a>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16));
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681a      	ldr	r2, [r3, #0]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a22:	041b      	lsls	r3, r3, #16
 8008a24:	4619      	mov	r1, r3
 8008a26:	4610      	mov	r0, r2
 8008a28:	f002 fa36 	bl	800ae98 <SDMMC_CmdAppCommand>
 8008a2c:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d001      	beq.n	8008a38 <SD_FindSCR+0x56>
  {
    return errorstate;
 8008a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a36:	e099      	b.n	8008b6c <SD_FindSCR+0x18a>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008a38:	f04f 33ff 	mov.w	r3, #4294967295
 8008a3c:	617b      	str	r3, [r7, #20]
  config.DataLength    = 8;
 8008a3e:	2308      	movs	r3, #8
 8008a40:	61bb      	str	r3, [r7, #24]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8008a42:	2330      	movs	r3, #48	; 0x30
 8008a44:	61fb      	str	r3, [r7, #28]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008a46:	2302      	movs	r3, #2
 8008a48:	623b      	str	r3, [r7, #32]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	627b      	str	r3, [r7, #36]	; 0x24
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	62bb      	str	r3, [r7, #40]	; 0x28
  SDMMC_ConfigData(hsd->Instance, &config);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f107 0214 	add.w	r2, r7, #20
 8008a5a:	4611      	mov	r1, r2
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f002 f8b1 	bl	800abc4 <SDMMC_ConfigData>
  
  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4618      	mov	r0, r3
 8008a68:	f002 fa84 	bl	800af74 <SDMMC_CmdSendSCR>
 8008a6c:	6338      	str	r0, [r7, #48]	; 0x30
  if(errorstate != HAL_OK)
 8008a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d022      	beq.n	8008aba <SD_FindSCR+0xd8>
  {
    return errorstate;
 8008a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a76:	e079      	b.n	8008b6c <SD_FindSCR+0x18a>
  }
  
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d00e      	beq.n	8008aa4 <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	6819      	ldr	r1, [r3, #0]
 8008a8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	f107 020c 	add.w	r2, r7, #12
 8008a92:	18d4      	adds	r4, r2, r3
 8008a94:	4608      	mov	r0, r1
 8008a96:	f002 f81f 	bl	800aad8 <SDMMC_ReadFIFO>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	6023      	str	r3, [r4, #0]
      index++;
 8008a9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	637b      	str	r3, [r7, #52]	; 0x34
    }
    
    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008aa4:	f7f8 f848 	bl	8000b38 <HAL_GetTick>
 8008aa8:	4602      	mov	r2, r0
 8008aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aac:	1ad3      	subs	r3, r2, r3
 8008aae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008ab2:	d102      	bne.n	8008aba <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8008ab4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008ab8:	e058      	b.n	8008b6c <SD_FindSCR+0x18a>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ac0:	f240 432a 	movw	r3, #1066	; 0x42a
 8008ac4:	4013      	ands	r3, r2
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d0d6      	beq.n	8008a78 <SD_FindSCR+0x96>
    }
  }
  
  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ad0:	f003 0308 	and.w	r3, r3, #8
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d005      	beq.n	8008ae4 <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	2208      	movs	r2, #8
 8008ade:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8008ae0:	2308      	movs	r3, #8
 8008ae2:	e043      	b.n	8008b6c <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aea:	f003 0302 	and.w	r3, r3, #2
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d005      	beq.n	8008afe <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	2202      	movs	r2, #2
 8008af8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8008afa:	2302      	movs	r3, #2
 8008afc:	e036      	b.n	8008b6c <SD_FindSCR+0x18a>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b04:	f003 0320 	and.w	r3, r3, #32
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d005      	beq.n	8008b18 <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2220      	movs	r2, #32
 8008b12:	639a      	str	r2, [r3, #56]	; 0x38
    
    return HAL_SD_ERROR_RX_OVERRUN;
 8008b14:	2320      	movs	r3, #32
 8008b16:	e029      	b.n	8008b6c <SD_FindSCR+0x18a>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 8008b20:	639a      	str	r2, [r3, #56]	; 0x38
    
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	061a      	lsls	r2, r3, #24
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	021b      	lsls	r3, r3, #8
 8008b2a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b2e:	431a      	orrs	r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	0a1b      	lsrs	r3, r3, #8
 8008b34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b38:	ea42 0103 	orr.w	r1, r2, r3
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	0e1a      	lsrs	r2, r3, #24
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	3304      	adds	r3, #4
      ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24);
 8008b44:	430a      	orrs	r2, r1
    *(pSCR + 1) = ((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8008b46:	601a      	str	r2, [r3, #0]
    
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008b48:	693b      	ldr	r3, [r7, #16]
 8008b4a:	061a      	lsls	r2, r3, #24
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	021b      	lsls	r3, r3, #8
 8008b50:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b54:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	0a1b      	lsrs	r3, r3, #8
 8008b5a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008b5e:	431a      	orrs	r2, r3
      ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24);
 8008b60:	693b      	ldr	r3, [r7, #16]
 8008b62:	0e1b      	lsrs	r3, r3, #24
 8008b64:	431a      	orrs	r2, r3
    *(pSCR) = ((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	601a      	str	r2, [r3, #0]
  }

  return HAL_SD_ERROR_NONE;
 8008b6a:	2300      	movs	r3, #0
}
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	373c      	adds	r7, #60	; 0x3c
 8008b70:	46bd      	mov	sp, r7
 8008b72:	bd90      	pop	{r4, r7, pc}

08008b74 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008b74:	b580      	push	{r7, lr}
 8008b76:	b082      	sub	sp, #8
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
 8008b7c:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d101      	bne.n	8008b88 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008b84:	2301      	movs	r3, #1
 8008b86:	e025      	b.n	8008bd4 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008b8e:	b2db      	uxtb	r3, r3
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d106      	bne.n	8008ba2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2200      	movs	r2, #0
 8008b98:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008b9c:	6878      	ldr	r0, [r7, #4]
 8008b9e:	f00d f901 	bl	8015da4 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2202      	movs	r2, #2
 8008ba6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681a      	ldr	r2, [r3, #0]
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	3304      	adds	r3, #4
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	f001 fe3d 	bl	800a834 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	6818      	ldr	r0, [r3, #0]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	461a      	mov	r2, r3
 8008bc4:	6839      	ldr	r1, [r7, #0]
 8008bc6:	f001 fea7 	bl	800a918 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2201      	movs	r2, #1
 8008bce:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008bd2:	2300      	movs	r3, #0
}
 8008bd4:	4618      	mov	r0, r3
 8008bd6:	3708      	adds	r7, #8
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	bd80      	pop	{r7, pc}

08008bdc <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	b084      	sub	sp, #16
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	60f8      	str	r0, [r7, #12]
 8008be4:	60b9      	str	r1, [r7, #8]
 8008be6:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008bee:	b2db      	uxtb	r3, r3
 8008bf0:	2b02      	cmp	r3, #2
 8008bf2:	d101      	bne.n	8008bf8 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008bf4:	2302      	movs	r3, #2
 8008bf6:	e018      	b.n	8008c2a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	2202      	movs	r2, #2
 8008bfc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	687a      	ldr	r2, [r7, #4]
 8008c06:	68b9      	ldr	r1, [r7, #8]
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f001 ff05 	bl	800aa18 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008c0e:	68bb      	ldr	r3, [r7, #8]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d104      	bne.n	8008c20 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2205      	movs	r2, #5
 8008c1a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008c1e:	e003      	b.n	8008c28 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008c28:	2300      	movs	r3, #0
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3710      	adds	r7, #16
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	bd80      	pop	{r7, pc}

08008c32 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008c32:	b580      	push	{r7, lr}
 8008c34:	b082      	sub	sp, #8
 8008c36:	af00      	add	r7, sp, #0
 8008c38:	6078      	str	r0, [r7, #4]
 8008c3a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	2b02      	cmp	r3, #2
 8008c46:	d101      	bne.n	8008c4c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008c48:	2302      	movs	r3, #2
 8008c4a:	e00e      	b.n	8008c6a <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2202      	movs	r2, #2
 8008c50:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	6839      	ldr	r1, [r7, #0]
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	f001 fefd 	bl	800aa5a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	2201      	movs	r2, #1
 8008c64:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008c68:	2300      	movs	r3, #0
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3708      	adds	r7, #8
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
	...

08008c74 <HAL_SPDIFRX_Init>:
  *        in the SPDIFRX_InitTypeDef and create the associated handle.
  * @param hspdif SPDIFRX handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPDIFRX_Init(SPDIFRX_HandleTypeDef *hspdif)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b084      	sub	sp, #16
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Check the SPDIFRX handle allocation */
  if(hspdif == NULL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d101      	bne.n	8008c86 <HAL_SPDIFRX_Init+0x12>
  {
    return HAL_ERROR;
 8008c82:	2301      	movs	r3, #1
 8008c84:	e04c      	b.n	8008d20 <HAL_SPDIFRX_Init+0xac>

    /* Init the low level hardware */
    hspdif->MspInitCallback(hspdif);
  }
#else
  if(hspdif->State == HAL_SPDIFRX_STATE_RESET)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008c8c:	b2db      	uxtb	r3, r3
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d106      	bne.n	8008ca0 <HAL_SPDIFRX_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hspdif->Lock = HAL_UNLOCKED;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SPDIFRX_MspInit(hspdif);
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f010 f966 	bl	8018f6c <HAL_SPDIFRX_MspInit>
  }
#endif /* USE_HAL_SPDIFRX_REGISTER_CALLBACKS */

  /* SPDIFRX peripheral state is BUSY */
  hspdif->State = HAL_SPDIFRX_STATE_BUSY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2202      	movs	r2, #2
 8008ca4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Disable SPDIFRX interface (IDLE State) */
  __HAL_SPDIFRX_IDLE(hspdif);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	681a      	ldr	r2, [r3, #0]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f022 0203 	bic.w	r2, r2, #3
 8008cb6:	601a      	str	r2, [r3, #0]

  /* Reset the old SPDIFRX CR configuration */
  tmpreg = hspdif->Instance->CR;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	60fb      	str	r3, [r7, #12]

  tmpreg &= ~(SPDIFRX_CR_RXSTEO  | SPDIFRX_CR_DRFMT  | SPDIFRX_CR_PMSK |
 8008cc0:	68fa      	ldr	r2, [r7, #12]
 8008cc2:	4b19      	ldr	r3, [pc, #100]	; (8008d28 <HAL_SPDIFRX_Init+0xb4>)
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	60fb      	str	r3, [r7, #12]
              SPDIFRX_CR_VMSK | SPDIFRX_CR_CUMSK | SPDIFRX_CR_PTMSK  |
              SPDIFRX_CR_CHSEL | SPDIFRX_CR_NBTR | SPDIFRX_CR_WFA |
              SPDIFRX_CR_INSEL);

  /* Sets the new configuration of the SPDIFRX peripheral */
  tmpreg |= (hspdif->Init.StereoMode |
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	699a      	ldr	r2, [r3, #24]
             hspdif->Init.InputSelection |
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	685b      	ldr	r3, [r3, #4]
  tmpreg |= (hspdif->Init.StereoMode |
 8008cd0:	431a      	orrs	r2, r3
             hspdif->Init.Retries |
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	689b      	ldr	r3, [r3, #8]
             hspdif->Init.InputSelection |
 8008cd6:	431a      	orrs	r2, r3
             hspdif->Init.WaitForActivity |
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	68db      	ldr	r3, [r3, #12]
             hspdif->Init.Retries |
 8008cdc:	431a      	orrs	r2, r3
             hspdif->Init.ChannelSelection |
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	691b      	ldr	r3, [r3, #16]
             hspdif->Init.WaitForActivity |
 8008ce2:	431a      	orrs	r2, r3
             hspdif->Init.DataFormat |
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	695b      	ldr	r3, [r3, #20]
             hspdif->Init.ChannelSelection |
 8008ce8:	431a      	orrs	r2, r3
             hspdif->Init.PreambleTypeMask |
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	69db      	ldr	r3, [r3, #28]
             hspdif->Init.DataFormat |
 8008cee:	431a      	orrs	r2, r3
             hspdif->Init.ChannelStatusMask |
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6a1b      	ldr	r3, [r3, #32]
             hspdif->Init.PreambleTypeMask |
 8008cf4:	431a      	orrs	r2, r3
             hspdif->Init.ValidityBitMask |
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
             hspdif->Init.ChannelStatusMask |
 8008cfa:	431a      	orrs	r2, r3
             hspdif->Init.ParityErrorMask
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
             hspdif->Init.ValidityBitMask |
 8008d00:	4313      	orrs	r3, r2
  tmpreg |= (hspdif->Init.StereoMode |
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	60fb      	str	r3, [r7, #12]
             );


  hspdif->Instance->CR = tmpreg;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	68fa      	ldr	r2, [r7, #12]
 8008d0e:	601a      	str	r2, [r3, #0]

  hspdif->ErrorCode = HAL_SPDIFRX_ERROR_NONE;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	2200      	movs	r2, #0
 8008d14:	649a      	str	r2, [r3, #72]	; 0x48

  /* SPDIFRX peripheral state is READY*/
  hspdif->State = HAL_SPDIFRX_STATE_READY;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8008d1e:	2300      	movs	r3, #0
}
 8008d20:	4618      	mov	r0, r3
 8008d22:	3710      	adds	r7, #16
 8008d24:	46bd      	mov	sp, r7
 8008d26:	bd80      	pop	{r7, pc}
 8008d28:	fff88407 	.word	0xfff88407

08008d2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b084      	sub	sp, #16
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d101      	bne.n	8008d3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e084      	b.n	8008e48 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8008d4a:	b2db      	uxtb	r3, r3
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d106      	bne.n	8008d5e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d58:	6878      	ldr	r0, [r7, #4]
 8008d5a:	f010 f949 	bl	8018ff0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2202      	movs	r2, #2
 8008d62:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d74:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	68db      	ldr	r3, [r3, #12]
 8008d7a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d7e:	d902      	bls.n	8008d86 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8008d80:	2300      	movs	r3, #0
 8008d82:	60fb      	str	r3, [r7, #12]
 8008d84:	e002      	b.n	8008d8c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8008d86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008d8a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8008d94:	d007      	beq.n	8008da6 <HAL_SPI_Init+0x7a>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	68db      	ldr	r3, [r3, #12]
 8008d9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008d9e:	d002      	beq.n	8008da6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d10b      	bne.n	8008dc6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	68db      	ldr	r3, [r3, #12]
 8008db2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8008db6:	d903      	bls.n	8008dc0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	2202      	movs	r2, #2
 8008dbc:	631a      	str	r2, [r3, #48]	; 0x30
 8008dbe:	e002      	b.n	8008dc6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685a      	ldr	r2, [r3, #4]
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	431a      	orrs	r2, r3
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	691b      	ldr	r3, [r3, #16]
 8008dd4:	431a      	orrs	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	695b      	ldr	r3, [r3, #20]
 8008dda:	431a      	orrs	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	699b      	ldr	r3, [r3, #24]
 8008de0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008de4:	431a      	orrs	r2, r3
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	69db      	ldr	r3, [r3, #28]
 8008dea:	431a      	orrs	r2, r3
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6a1b      	ldr	r3, [r3, #32]
 8008df0:	ea42 0103 	orr.w	r1, r2, r3
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	430a      	orrs	r2, r1
 8008dfe:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	699b      	ldr	r3, [r3, #24]
 8008e04:	0c1b      	lsrs	r3, r3, #16
 8008e06:	f003 0204 	and.w	r2, r3, #4
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e0e:	431a      	orrs	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e14:	431a      	orrs	r2, r3
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	68db      	ldr	r3, [r3, #12]
 8008e1a:	ea42 0103 	orr.w	r1, r2, r3
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	430a      	orrs	r2, r1
 8008e26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	69da      	ldr	r2, [r3, #28]
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008e36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2201      	movs	r2, #1
 8008e42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8008e46:	2300      	movs	r3, #0
}
 8008e48:	4618      	mov	r0, r3
 8008e4a:	3710      	adds	r7, #16
 8008e4c:	46bd      	mov	sp, r7
 8008e4e:	bd80      	pop	{r7, pc}

08008e50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b082      	sub	sp, #8
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d101      	bne.n	8008e62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e01d      	b.n	8008e9e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e68:	b2db      	uxtb	r3, r3
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d106      	bne.n	8008e7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f010 f91c 	bl	80190b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2202      	movs	r2, #2
 8008e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681a      	ldr	r2, [r3, #0]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	3304      	adds	r3, #4
 8008e8c:	4619      	mov	r1, r3
 8008e8e:	4610      	mov	r0, r2
 8008e90:	f000 fba2 	bl	80095d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2201      	movs	r2, #1
 8008e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
	...

08008ea8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b085      	sub	sp, #20
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	2202      	movs	r2, #2
 8008eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	689a      	ldr	r2, [r3, #8]
 8008ebe:	4b0e      	ldr	r3, [pc, #56]	; (8008ef8 <HAL_TIM_Base_Start+0x50>)
 8008ec0:	4013      	ands	r3, r2
 8008ec2:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	2b06      	cmp	r3, #6
 8008ec8:	d00b      	beq.n	8008ee2 <HAL_TIM_Base_Start+0x3a>
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ed0:	d007      	beq.n	8008ee2 <HAL_TIM_Base_Start+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f042 0201 	orr.w	r2, r2, #1
 8008ee0:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	2201      	movs	r2, #1
 8008ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008eea:	2300      	movs	r3, #0
}
 8008eec:	4618      	mov	r0, r3
 8008eee:	3714      	adds	r7, #20
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr
 8008ef8:	00010007 	.word	0x00010007

08008efc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b085      	sub	sp, #20
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	68da      	ldr	r2, [r3, #12]
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f042 0201 	orr.w	r2, r2, #1
 8008f12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	689a      	ldr	r2, [r3, #8]
 8008f1a:	4b0c      	ldr	r3, [pc, #48]	; (8008f4c <HAL_TIM_Base_Start_IT+0x50>)
 8008f1c:	4013      	ands	r3, r2
 8008f1e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	2b06      	cmp	r3, #6
 8008f24:	d00b      	beq.n	8008f3e <HAL_TIM_Base_Start_IT+0x42>
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f2c:	d007      	beq.n	8008f3e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	681a      	ldr	r2, [r3, #0]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f042 0201 	orr.w	r2, r2, #1
 8008f3c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f3e:	2300      	movs	r3, #0
}
 8008f40:	4618      	mov	r0, r3
 8008f42:	3714      	adds	r7, #20
 8008f44:	46bd      	mov	sp, r7
 8008f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4a:	4770      	bx	lr
 8008f4c:	00010007 	.word	0x00010007

08008f50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b082      	sub	sp, #8
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d101      	bne.n	8008f62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008f5e:	2301      	movs	r3, #1
 8008f60:	e01d      	b.n	8008f9e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f68:	b2db      	uxtb	r3, r3
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d106      	bne.n	8008f7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	2200      	movs	r2, #0
 8008f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f010 f8f8 	bl	801916c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2202      	movs	r2, #2
 8008f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681a      	ldr	r2, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	3304      	adds	r3, #4
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	4610      	mov	r0, r2
 8008f90:	f000 fb22 	bl	80095d8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2201      	movs	r2, #1
 8008f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008f9c:	2300      	movs	r3, #0
}
 8008f9e:	4618      	mov	r0, r3
 8008fa0:	3708      	adds	r7, #8
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}

08008fa6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b082      	sub	sp, #8
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	f003 0302 	and.w	r3, r3, #2
 8008fb8:	2b02      	cmp	r3, #2
 8008fba:	d122      	bne.n	8009002 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	68db      	ldr	r3, [r3, #12]
 8008fc2:	f003 0302 	and.w	r3, r3, #2
 8008fc6:	2b02      	cmp	r3, #2
 8008fc8:	d11b      	bne.n	8009002 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f06f 0202 	mvn.w	r2, #2
 8008fd2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	699b      	ldr	r3, [r3, #24]
 8008fe0:	f003 0303 	and.w	r3, r3, #3
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d003      	beq.n	8008ff0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008fe8:	6878      	ldr	r0, [r7, #4]
 8008fea:	f000 fad7 	bl	800959c <HAL_TIM_IC_CaptureCallback>
 8008fee:	e005      	b.n	8008ffc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ff0:	6878      	ldr	r0, [r7, #4]
 8008ff2:	f000 fac9 	bl	8009588 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 fada 	bl	80095b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2200      	movs	r2, #0
 8009000:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	691b      	ldr	r3, [r3, #16]
 8009008:	f003 0304 	and.w	r3, r3, #4
 800900c:	2b04      	cmp	r3, #4
 800900e:	d122      	bne.n	8009056 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	68db      	ldr	r3, [r3, #12]
 8009016:	f003 0304 	and.w	r3, r3, #4
 800901a:	2b04      	cmp	r3, #4
 800901c:	d11b      	bne.n	8009056 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f06f 0204 	mvn.w	r2, #4
 8009026:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2202      	movs	r2, #2
 800902c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	699b      	ldr	r3, [r3, #24]
 8009034:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009038:	2b00      	cmp	r3, #0
 800903a:	d003      	beq.n	8009044 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 faad 	bl	800959c <HAL_TIM_IC_CaptureCallback>
 8009042:	e005      	b.n	8009050 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 fa9f 	bl	8009588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800904a:	6878      	ldr	r0, [r7, #4]
 800904c:	f000 fab0 	bl	80095b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	2200      	movs	r2, #0
 8009054:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	691b      	ldr	r3, [r3, #16]
 800905c:	f003 0308 	and.w	r3, r3, #8
 8009060:	2b08      	cmp	r3, #8
 8009062:	d122      	bne.n	80090aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	68db      	ldr	r3, [r3, #12]
 800906a:	f003 0308 	and.w	r3, r3, #8
 800906e:	2b08      	cmp	r3, #8
 8009070:	d11b      	bne.n	80090aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	f06f 0208 	mvn.w	r2, #8
 800907a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2204      	movs	r2, #4
 8009080:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	69db      	ldr	r3, [r3, #28]
 8009088:	f003 0303 	and.w	r3, r3, #3
 800908c:	2b00      	cmp	r3, #0
 800908e:	d003      	beq.n	8009098 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009090:	6878      	ldr	r0, [r7, #4]
 8009092:	f000 fa83 	bl	800959c <HAL_TIM_IC_CaptureCallback>
 8009096:	e005      	b.n	80090a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009098:	6878      	ldr	r0, [r7, #4]
 800909a:	f000 fa75 	bl	8009588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 fa86 	bl	80095b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	2200      	movs	r2, #0
 80090a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	691b      	ldr	r3, [r3, #16]
 80090b0:	f003 0310 	and.w	r3, r3, #16
 80090b4:	2b10      	cmp	r3, #16
 80090b6:	d122      	bne.n	80090fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	68db      	ldr	r3, [r3, #12]
 80090be:	f003 0310 	and.w	r3, r3, #16
 80090c2:	2b10      	cmp	r3, #16
 80090c4:	d11b      	bne.n	80090fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f06f 0210 	mvn.w	r2, #16
 80090ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2208      	movs	r2, #8
 80090d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	69db      	ldr	r3, [r3, #28]
 80090dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d003      	beq.n	80090ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090e4:	6878      	ldr	r0, [r7, #4]
 80090e6:	f000 fa59 	bl	800959c <HAL_TIM_IC_CaptureCallback>
 80090ea:	e005      	b.n	80090f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090ec:	6878      	ldr	r0, [r7, #4]
 80090ee:	f000 fa4b 	bl	8009588 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090f2:	6878      	ldr	r0, [r7, #4]
 80090f4:	f000 fa5c 	bl	80095b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	2200      	movs	r2, #0
 80090fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	691b      	ldr	r3, [r3, #16]
 8009104:	f003 0301 	and.w	r3, r3, #1
 8009108:	2b01      	cmp	r3, #1
 800910a:	d10e      	bne.n	800912a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	f003 0301 	and.w	r3, r3, #1
 8009116:	2b01      	cmp	r3, #1
 8009118:	d107      	bne.n	800912a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f06f 0201 	mvn.w	r2, #1
 8009122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f00f f945 	bl	80183b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	691b      	ldr	r3, [r3, #16]
 8009130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009134:	2b80      	cmp	r3, #128	; 0x80
 8009136:	d10e      	bne.n	8009156 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	68db      	ldr	r3, [r3, #12]
 800913e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009142:	2b80      	cmp	r3, #128	; 0x80
 8009144:	d107      	bne.n	8009156 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800914e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 febd 	bl	8009ed0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	691b      	ldr	r3, [r3, #16]
 800915c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009164:	d10e      	bne.n	8009184 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	68db      	ldr	r3, [r3, #12]
 800916c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009170:	2b80      	cmp	r3, #128	; 0x80
 8009172:	d107      	bne.n	8009184 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800917c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	f000 feb0 	bl	8009ee4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	691b      	ldr	r3, [r3, #16]
 800918a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800918e:	2b40      	cmp	r3, #64	; 0x40
 8009190:	d10e      	bne.n	80091b0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800919c:	2b40      	cmp	r3, #64	; 0x40
 800919e:	d107      	bne.n	80091b0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80091a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 fa0a 	bl	80095c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	f003 0320 	and.w	r3, r3, #32
 80091ba:	2b20      	cmp	r3, #32
 80091bc:	d10e      	bne.n	80091dc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	f003 0320 	and.w	r3, r3, #32
 80091c8:	2b20      	cmp	r3, #32
 80091ca:	d107      	bne.n	80091dc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f06f 0220 	mvn.w	r2, #32
 80091d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f000 fe70 	bl	8009ebc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80091dc:	bf00      	nop
 80091de:	3708      	adds	r7, #8
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}

080091e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	60f8      	str	r0, [r7, #12]
 80091ec:	60b9      	str	r1, [r7, #8]
 80091ee:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80091f6:	2b01      	cmp	r3, #1
 80091f8:	d101      	bne.n	80091fe <HAL_TIM_PWM_ConfigChannel+0x1a>
 80091fa:	2302      	movs	r3, #2
 80091fc:	e105      	b.n	800940a <HAL_TIM_PWM_ConfigChannel+0x226>
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	2201      	movs	r2, #1
 8009202:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2202      	movs	r2, #2
 800920a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	2b14      	cmp	r3, #20
 8009212:	f200 80f0 	bhi.w	80093f6 <HAL_TIM_PWM_ConfigChannel+0x212>
 8009216:	a201      	add	r2, pc, #4	; (adr r2, 800921c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800921c:	08009271 	.word	0x08009271
 8009220:	080093f7 	.word	0x080093f7
 8009224:	080093f7 	.word	0x080093f7
 8009228:	080093f7 	.word	0x080093f7
 800922c:	080092b1 	.word	0x080092b1
 8009230:	080093f7 	.word	0x080093f7
 8009234:	080093f7 	.word	0x080093f7
 8009238:	080093f7 	.word	0x080093f7
 800923c:	080092f3 	.word	0x080092f3
 8009240:	080093f7 	.word	0x080093f7
 8009244:	080093f7 	.word	0x080093f7
 8009248:	080093f7 	.word	0x080093f7
 800924c:	08009333 	.word	0x08009333
 8009250:	080093f7 	.word	0x080093f7
 8009254:	080093f7 	.word	0x080093f7
 8009258:	080093f7 	.word	0x080093f7
 800925c:	08009375 	.word	0x08009375
 8009260:	080093f7 	.word	0x080093f7
 8009264:	080093f7 	.word	0x080093f7
 8009268:	080093f7 	.word	0x080093f7
 800926c:	080093b5 	.word	0x080093b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68b9      	ldr	r1, [r7, #8]
 8009276:	4618      	mov	r0, r3
 8009278:	f000 fa4e 	bl	8009718 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	699a      	ldr	r2, [r3, #24]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f042 0208 	orr.w	r2, r2, #8
 800928a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	699a      	ldr	r2, [r3, #24]
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f022 0204 	bic.w	r2, r2, #4
 800929a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	6999      	ldr	r1, [r3, #24]
 80092a2:	68bb      	ldr	r3, [r7, #8]
 80092a4:	691a      	ldr	r2, [r3, #16]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	430a      	orrs	r2, r1
 80092ac:	619a      	str	r2, [r3, #24]
      break;
 80092ae:	e0a3      	b.n	80093f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	68b9      	ldr	r1, [r7, #8]
 80092b6:	4618      	mov	r0, r3
 80092b8:	f000 faa0 	bl	80097fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	699a      	ldr	r2, [r3, #24]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092ca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	699a      	ldr	r2, [r3, #24]
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6999      	ldr	r1, [r3, #24]
 80092e2:	68bb      	ldr	r3, [r7, #8]
 80092e4:	691b      	ldr	r3, [r3, #16]
 80092e6:	021a      	lsls	r2, r3, #8
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	430a      	orrs	r2, r1
 80092ee:	619a      	str	r2, [r3, #24]
      break;
 80092f0:	e082      	b.n	80093f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	68b9      	ldr	r1, [r7, #8]
 80092f8:	4618      	mov	r0, r3
 80092fa:	f000 faf7 	bl	80098ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	69da      	ldr	r2, [r3, #28]
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	f042 0208 	orr.w	r2, r2, #8
 800930c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	69da      	ldr	r2, [r3, #28]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f022 0204 	bic.w	r2, r2, #4
 800931c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	69d9      	ldr	r1, [r3, #28]
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	691a      	ldr	r2, [r3, #16]
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	430a      	orrs	r2, r1
 800932e:	61da      	str	r2, [r3, #28]
      break;
 8009330:	e062      	b.n	80093f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	68b9      	ldr	r1, [r7, #8]
 8009338:	4618      	mov	r0, r3
 800933a:	f000 fb4d 	bl	80099d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	69da      	ldr	r2, [r3, #28]
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800934c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	69da      	ldr	r2, [r3, #28]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800935c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	69d9      	ldr	r1, [r3, #28]
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	691b      	ldr	r3, [r3, #16]
 8009368:	021a      	lsls	r2, r3, #8
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	430a      	orrs	r2, r1
 8009370:	61da      	str	r2, [r3, #28]
      break;
 8009372:	e041      	b.n	80093f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	68b9      	ldr	r1, [r7, #8]
 800937a:	4618      	mov	r0, r3
 800937c:	f000 fb84 	bl	8009a88 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f042 0208 	orr.w	r2, r2, #8
 800938e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	f022 0204 	bic.w	r2, r2, #4
 800939e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	691a      	ldr	r2, [r3, #16]
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	430a      	orrs	r2, r1
 80093b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80093b2:	e021      	b.n	80093f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	68b9      	ldr	r1, [r7, #8]
 80093ba:	4618      	mov	r0, r3
 80093bc:	f000 fbb6 	bl	8009b2c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80093ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80093de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	021a      	lsls	r2, r3, #8
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	430a      	orrs	r2, r1
 80093f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80093f4:	e000      	b.n	80093f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80093f6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	2200      	movs	r2, #0
 8009404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009408:	2300      	movs	r3, #0
}
 800940a:	4618      	mov	r0, r3
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}
 8009412:	bf00      	nop

08009414 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009414:	b580      	push	{r7, lr}
 8009416:	b084      	sub	sp, #16
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009424:	2b01      	cmp	r3, #1
 8009426:	d101      	bne.n	800942c <HAL_TIM_ConfigClockSource+0x18>
 8009428:	2302      	movs	r3, #2
 800942a:	e0a6      	b.n	800957a <HAL_TIM_ConfigClockSource+0x166>
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	2201      	movs	r2, #1
 8009430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2202      	movs	r2, #2
 8009438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	689b      	ldr	r3, [r3, #8]
 8009442:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009444:	68fa      	ldr	r2, [r7, #12]
 8009446:	4b4f      	ldr	r3, [pc, #316]	; (8009584 <HAL_TIM_ConfigClockSource+0x170>)
 8009448:	4013      	ands	r3, r2
 800944a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009452:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	68fa      	ldr	r2, [r7, #12]
 800945a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b40      	cmp	r3, #64	; 0x40
 8009462:	d067      	beq.n	8009534 <HAL_TIM_ConfigClockSource+0x120>
 8009464:	2b40      	cmp	r3, #64	; 0x40
 8009466:	d80b      	bhi.n	8009480 <HAL_TIM_ConfigClockSource+0x6c>
 8009468:	2b10      	cmp	r3, #16
 800946a:	d073      	beq.n	8009554 <HAL_TIM_ConfigClockSource+0x140>
 800946c:	2b10      	cmp	r3, #16
 800946e:	d802      	bhi.n	8009476 <HAL_TIM_ConfigClockSource+0x62>
 8009470:	2b00      	cmp	r3, #0
 8009472:	d06f      	beq.n	8009554 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009474:	e078      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009476:	2b20      	cmp	r3, #32
 8009478:	d06c      	beq.n	8009554 <HAL_TIM_ConfigClockSource+0x140>
 800947a:	2b30      	cmp	r3, #48	; 0x30
 800947c:	d06a      	beq.n	8009554 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800947e:	e073      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009480:	2b70      	cmp	r3, #112	; 0x70
 8009482:	d00d      	beq.n	80094a0 <HAL_TIM_ConfigClockSource+0x8c>
 8009484:	2b70      	cmp	r3, #112	; 0x70
 8009486:	d804      	bhi.n	8009492 <HAL_TIM_ConfigClockSource+0x7e>
 8009488:	2b50      	cmp	r3, #80	; 0x50
 800948a:	d033      	beq.n	80094f4 <HAL_TIM_ConfigClockSource+0xe0>
 800948c:	2b60      	cmp	r3, #96	; 0x60
 800948e:	d041      	beq.n	8009514 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009490:	e06a      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009492:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009496:	d066      	beq.n	8009566 <HAL_TIM_ConfigClockSource+0x152>
 8009498:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800949c:	d017      	beq.n	80094ce <HAL_TIM_ConfigClockSource+0xba>
      break;
 800949e:	e063      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	6818      	ldr	r0, [r3, #0]
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	6899      	ldr	r1, [r3, #8]
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	685a      	ldr	r2, [r3, #4]
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	f000 fc0a 	bl	8009cc8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	689b      	ldr	r3, [r3, #8]
 80094ba:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80094c2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	68fa      	ldr	r2, [r7, #12]
 80094ca:	609a      	str	r2, [r3, #8]
      break;
 80094cc:	e04c      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6818      	ldr	r0, [r3, #0]
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	6899      	ldr	r1, [r3, #8]
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	685a      	ldr	r2, [r3, #4]
 80094da:	683b      	ldr	r3, [r7, #0]
 80094dc:	68db      	ldr	r3, [r3, #12]
 80094de:	f000 fbf3 	bl	8009cc8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	689a      	ldr	r2, [r3, #8]
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80094f0:	609a      	str	r2, [r3, #8]
      break;
 80094f2:	e039      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6818      	ldr	r0, [r3, #0]
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	6859      	ldr	r1, [r3, #4]
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	68db      	ldr	r3, [r3, #12]
 8009500:	461a      	mov	r2, r3
 8009502:	f000 fb67 	bl	8009bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2150      	movs	r1, #80	; 0x50
 800950c:	4618      	mov	r0, r3
 800950e:	f000 fbc0 	bl	8009c92 <TIM_ITRx_SetConfig>
      break;
 8009512:	e029      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6818      	ldr	r0, [r3, #0]
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	6859      	ldr	r1, [r3, #4]
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	461a      	mov	r2, r3
 8009522:	f000 fb86 	bl	8009c32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	2160      	movs	r1, #96	; 0x60
 800952c:	4618      	mov	r0, r3
 800952e:	f000 fbb0 	bl	8009c92 <TIM_ITRx_SetConfig>
      break;
 8009532:	e019      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6818      	ldr	r0, [r3, #0]
 8009538:	683b      	ldr	r3, [r7, #0]
 800953a:	6859      	ldr	r1, [r3, #4]
 800953c:	683b      	ldr	r3, [r7, #0]
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	461a      	mov	r2, r3
 8009542:	f000 fb47 	bl	8009bd4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2140      	movs	r1, #64	; 0x40
 800954c:	4618      	mov	r0, r3
 800954e:	f000 fba0 	bl	8009c92 <TIM_ITRx_SetConfig>
      break;
 8009552:	e009      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681a      	ldr	r2, [r3, #0]
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	4619      	mov	r1, r3
 800955e:	4610      	mov	r0, r2
 8009560:	f000 fb97 	bl	8009c92 <TIM_ITRx_SetConfig>
      break;
 8009564:	e000      	b.n	8009568 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009566:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2201      	movs	r2, #1
 800956c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	2200      	movs	r2, #0
 8009574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009578:	2300      	movs	r3, #0
}
 800957a:	4618      	mov	r0, r3
 800957c:	3710      	adds	r7, #16
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}
 8009582:	bf00      	nop
 8009584:	fffeff88 	.word	0xfffeff88

08009588 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009588:	b480      	push	{r7}
 800958a:	b083      	sub	sp, #12
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009590:	bf00      	nop
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800959c:	b480      	push	{r7}
 800959e:	b083      	sub	sp, #12
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80095a4:	bf00      	nop
 80095a6:	370c      	adds	r7, #12
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr

080095b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80095b0:	b480      	push	{r7}
 80095b2:	b083      	sub	sp, #12
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80095b8:	bf00      	nop
 80095ba:	370c      	adds	r7, #12
 80095bc:	46bd      	mov	sp, r7
 80095be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c2:	4770      	bx	lr

080095c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80095c4:	b480      	push	{r7}
 80095c6:	b083      	sub	sp, #12
 80095c8:	af00      	add	r7, sp, #0
 80095ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80095cc:	bf00      	nop
 80095ce:	370c      	adds	r7, #12
 80095d0:	46bd      	mov	sp, r7
 80095d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d6:	4770      	bx	lr

080095d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80095d8:	b480      	push	{r7}
 80095da:	b085      	sub	sp, #20
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	4a40      	ldr	r2, [pc, #256]	; (80096ec <TIM_Base_SetConfig+0x114>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d013      	beq.n	8009618 <TIM_Base_SetConfig+0x40>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095f6:	d00f      	beq.n	8009618 <TIM_Base_SetConfig+0x40>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	4a3d      	ldr	r2, [pc, #244]	; (80096f0 <TIM_Base_SetConfig+0x118>)
 80095fc:	4293      	cmp	r3, r2
 80095fe:	d00b      	beq.n	8009618 <TIM_Base_SetConfig+0x40>
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	4a3c      	ldr	r2, [pc, #240]	; (80096f4 <TIM_Base_SetConfig+0x11c>)
 8009604:	4293      	cmp	r3, r2
 8009606:	d007      	beq.n	8009618 <TIM_Base_SetConfig+0x40>
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	4a3b      	ldr	r2, [pc, #236]	; (80096f8 <TIM_Base_SetConfig+0x120>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d003      	beq.n	8009618 <TIM_Base_SetConfig+0x40>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4a3a      	ldr	r2, [pc, #232]	; (80096fc <TIM_Base_SetConfig+0x124>)
 8009614:	4293      	cmp	r3, r2
 8009616:	d108      	bne.n	800962a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800961e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	68fa      	ldr	r2, [r7, #12]
 8009626:	4313      	orrs	r3, r2
 8009628:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a2f      	ldr	r2, [pc, #188]	; (80096ec <TIM_Base_SetConfig+0x114>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d02b      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009638:	d027      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a2c      	ldr	r2, [pc, #176]	; (80096f0 <TIM_Base_SetConfig+0x118>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d023      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4a2b      	ldr	r2, [pc, #172]	; (80096f4 <TIM_Base_SetConfig+0x11c>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d01f      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a2a      	ldr	r2, [pc, #168]	; (80096f8 <TIM_Base_SetConfig+0x120>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d01b      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a29      	ldr	r2, [pc, #164]	; (80096fc <TIM_Base_SetConfig+0x124>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d017      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	4a28      	ldr	r2, [pc, #160]	; (8009700 <TIM_Base_SetConfig+0x128>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d013      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	4a27      	ldr	r2, [pc, #156]	; (8009704 <TIM_Base_SetConfig+0x12c>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d00f      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4a26      	ldr	r2, [pc, #152]	; (8009708 <TIM_Base_SetConfig+0x130>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d00b      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4a25      	ldr	r2, [pc, #148]	; (800970c <TIM_Base_SetConfig+0x134>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d007      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4a24      	ldr	r2, [pc, #144]	; (8009710 <TIM_Base_SetConfig+0x138>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d003      	beq.n	800968a <TIM_Base_SetConfig+0xb2>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a23      	ldr	r2, [pc, #140]	; (8009714 <TIM_Base_SetConfig+0x13c>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d108      	bne.n	800969c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	68fa      	ldr	r2, [r7, #12]
 8009698:	4313      	orrs	r3, r2
 800969a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	695b      	ldr	r3, [r3, #20]
 80096a6:	4313      	orrs	r3, r2
 80096a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	68fa      	ldr	r2, [r7, #12]
 80096ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80096b0:	683b      	ldr	r3, [r7, #0]
 80096b2:	689a      	ldr	r2, [r3, #8]
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80096b8:	683b      	ldr	r3, [r7, #0]
 80096ba:	681a      	ldr	r2, [r3, #0]
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	4a0a      	ldr	r2, [pc, #40]	; (80096ec <TIM_Base_SetConfig+0x114>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d003      	beq.n	80096d0 <TIM_Base_SetConfig+0xf8>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	4a0c      	ldr	r2, [pc, #48]	; (80096fc <TIM_Base_SetConfig+0x124>)
 80096cc:	4293      	cmp	r3, r2
 80096ce:	d103      	bne.n	80096d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	691a      	ldr	r2, [r3, #16]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2201      	movs	r2, #1
 80096dc:	615a      	str	r2, [r3, #20]
}
 80096de:	bf00      	nop
 80096e0:	3714      	adds	r7, #20
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	40010000 	.word	0x40010000
 80096f0:	40000400 	.word	0x40000400
 80096f4:	40000800 	.word	0x40000800
 80096f8:	40000c00 	.word	0x40000c00
 80096fc:	40010400 	.word	0x40010400
 8009700:	40014000 	.word	0x40014000
 8009704:	40014400 	.word	0x40014400
 8009708:	40014800 	.word	0x40014800
 800970c:	40001800 	.word	0x40001800
 8009710:	40001c00 	.word	0x40001c00
 8009714:	40002000 	.word	0x40002000

08009718 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009718:	b480      	push	{r7}
 800971a:	b087      	sub	sp, #28
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
 8009720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6a1b      	ldr	r3, [r3, #32]
 8009726:	f023 0201 	bic.w	r2, r3, #1
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6a1b      	ldr	r3, [r3, #32]
 8009732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	685b      	ldr	r3, [r3, #4]
 8009738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	699b      	ldr	r3, [r3, #24]
 800973e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009740:	68fa      	ldr	r2, [r7, #12]
 8009742:	4b2b      	ldr	r3, [pc, #172]	; (80097f0 <TIM_OC1_SetConfig+0xd8>)
 8009744:	4013      	ands	r3, r2
 8009746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	f023 0303 	bic.w	r3, r3, #3
 800974e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009750:	683b      	ldr	r3, [r7, #0]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	4313      	orrs	r3, r2
 8009758:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	f023 0302 	bic.w	r3, r3, #2
 8009760:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	697a      	ldr	r2, [r7, #20]
 8009768:	4313      	orrs	r3, r2
 800976a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	4a21      	ldr	r2, [pc, #132]	; (80097f4 <TIM_OC1_SetConfig+0xdc>)
 8009770:	4293      	cmp	r3, r2
 8009772:	d003      	beq.n	800977c <TIM_OC1_SetConfig+0x64>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	4a20      	ldr	r2, [pc, #128]	; (80097f8 <TIM_OC1_SetConfig+0xe0>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d10c      	bne.n	8009796 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	f023 0308 	bic.w	r3, r3, #8
 8009782:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009784:	683b      	ldr	r3, [r7, #0]
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	697a      	ldr	r2, [r7, #20]
 800978a:	4313      	orrs	r3, r2
 800978c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	f023 0304 	bic.w	r3, r3, #4
 8009794:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	4a16      	ldr	r2, [pc, #88]	; (80097f4 <TIM_OC1_SetConfig+0xdc>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d003      	beq.n	80097a6 <TIM_OC1_SetConfig+0x8e>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4a15      	ldr	r2, [pc, #84]	; (80097f8 <TIM_OC1_SetConfig+0xe0>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d111      	bne.n	80097ca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80097b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80097b6:	683b      	ldr	r3, [r7, #0]
 80097b8:	695b      	ldr	r3, [r3, #20]
 80097ba:	693a      	ldr	r2, [r7, #16]
 80097bc:	4313      	orrs	r3, r2
 80097be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	699b      	ldr	r3, [r3, #24]
 80097c4:	693a      	ldr	r2, [r7, #16]
 80097c6:	4313      	orrs	r3, r2
 80097c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	693a      	ldr	r2, [r7, #16]
 80097ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	68fa      	ldr	r2, [r7, #12]
 80097d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80097d6:	683b      	ldr	r3, [r7, #0]
 80097d8:	685a      	ldr	r2, [r3, #4]
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	697a      	ldr	r2, [r7, #20]
 80097e2:	621a      	str	r2, [r3, #32]
}
 80097e4:	bf00      	nop
 80097e6:	371c      	adds	r7, #28
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr
 80097f0:	fffeff8f 	.word	0xfffeff8f
 80097f4:	40010000 	.word	0x40010000
 80097f8:	40010400 	.word	0x40010400

080097fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80097fc:	b480      	push	{r7}
 80097fe:	b087      	sub	sp, #28
 8009800:	af00      	add	r7, sp, #0
 8009802:	6078      	str	r0, [r7, #4]
 8009804:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	6a1b      	ldr	r3, [r3, #32]
 800980a:	f023 0210 	bic.w	r2, r3, #16
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6a1b      	ldr	r3, [r3, #32]
 8009816:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	685b      	ldr	r3, [r3, #4]
 800981c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	699b      	ldr	r3, [r3, #24]
 8009822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009824:	68fa      	ldr	r2, [r7, #12]
 8009826:	4b2e      	ldr	r3, [pc, #184]	; (80098e0 <TIM_OC2_SetConfig+0xe4>)
 8009828:	4013      	ands	r3, r2
 800982a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009832:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009834:	683b      	ldr	r3, [r7, #0]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	021b      	lsls	r3, r3, #8
 800983a:	68fa      	ldr	r2, [r7, #12]
 800983c:	4313      	orrs	r3, r2
 800983e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009840:	697b      	ldr	r3, [r7, #20]
 8009842:	f023 0320 	bic.w	r3, r3, #32
 8009846:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	689b      	ldr	r3, [r3, #8]
 800984c:	011b      	lsls	r3, r3, #4
 800984e:	697a      	ldr	r2, [r7, #20]
 8009850:	4313      	orrs	r3, r2
 8009852:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a23      	ldr	r2, [pc, #140]	; (80098e4 <TIM_OC2_SetConfig+0xe8>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d003      	beq.n	8009864 <TIM_OC2_SetConfig+0x68>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a22      	ldr	r2, [pc, #136]	; (80098e8 <TIM_OC2_SetConfig+0xec>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d10d      	bne.n	8009880 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009864:	697b      	ldr	r3, [r7, #20]
 8009866:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800986a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800986c:	683b      	ldr	r3, [r7, #0]
 800986e:	68db      	ldr	r3, [r3, #12]
 8009870:	011b      	lsls	r3, r3, #4
 8009872:	697a      	ldr	r2, [r7, #20]
 8009874:	4313      	orrs	r3, r2
 8009876:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009878:	697b      	ldr	r3, [r7, #20]
 800987a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800987e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a18      	ldr	r2, [pc, #96]	; (80098e4 <TIM_OC2_SetConfig+0xe8>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d003      	beq.n	8009890 <TIM_OC2_SetConfig+0x94>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	4a17      	ldr	r2, [pc, #92]	; (80098e8 <TIM_OC2_SetConfig+0xec>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d113      	bne.n	80098b8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009896:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009898:	693b      	ldr	r3, [r7, #16]
 800989a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800989e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80098a0:	683b      	ldr	r3, [r7, #0]
 80098a2:	695b      	ldr	r3, [r3, #20]
 80098a4:	009b      	lsls	r3, r3, #2
 80098a6:	693a      	ldr	r2, [r7, #16]
 80098a8:	4313      	orrs	r3, r2
 80098aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	699b      	ldr	r3, [r3, #24]
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	693a      	ldr	r2, [r7, #16]
 80098b4:	4313      	orrs	r3, r2
 80098b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	693a      	ldr	r2, [r7, #16]
 80098bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	68fa      	ldr	r2, [r7, #12]
 80098c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	685a      	ldr	r2, [r3, #4]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	621a      	str	r2, [r3, #32]
}
 80098d2:	bf00      	nop
 80098d4:	371c      	adds	r7, #28
 80098d6:	46bd      	mov	sp, r7
 80098d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098dc:	4770      	bx	lr
 80098de:	bf00      	nop
 80098e0:	feff8fff 	.word	0xfeff8fff
 80098e4:	40010000 	.word	0x40010000
 80098e8:	40010400 	.word	0x40010400

080098ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b087      	sub	sp, #28
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6a1b      	ldr	r3, [r3, #32]
 80098fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	6a1b      	ldr	r3, [r3, #32]
 8009906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	685b      	ldr	r3, [r3, #4]
 800990c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	69db      	ldr	r3, [r3, #28]
 8009912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009914:	68fa      	ldr	r2, [r7, #12]
 8009916:	4b2d      	ldr	r3, [pc, #180]	; (80099cc <TIM_OC3_SetConfig+0xe0>)
 8009918:	4013      	ands	r3, r2
 800991a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f023 0303 	bic.w	r3, r3, #3
 8009922:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	68fa      	ldr	r2, [r7, #12]
 800992a:	4313      	orrs	r3, r2
 800992c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009934:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	021b      	lsls	r3, r3, #8
 800993c:	697a      	ldr	r2, [r7, #20]
 800993e:	4313      	orrs	r3, r2
 8009940:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a22      	ldr	r2, [pc, #136]	; (80099d0 <TIM_OC3_SetConfig+0xe4>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d003      	beq.n	8009952 <TIM_OC3_SetConfig+0x66>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	4a21      	ldr	r2, [pc, #132]	; (80099d4 <TIM_OC3_SetConfig+0xe8>)
 800994e:	4293      	cmp	r3, r2
 8009950:	d10d      	bne.n	800996e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009958:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	68db      	ldr	r3, [r3, #12]
 800995e:	021b      	lsls	r3, r3, #8
 8009960:	697a      	ldr	r2, [r7, #20]
 8009962:	4313      	orrs	r3, r2
 8009964:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800996c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	4a17      	ldr	r2, [pc, #92]	; (80099d0 <TIM_OC3_SetConfig+0xe4>)
 8009972:	4293      	cmp	r3, r2
 8009974:	d003      	beq.n	800997e <TIM_OC3_SetConfig+0x92>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	4a16      	ldr	r2, [pc, #88]	; (80099d4 <TIM_OC3_SetConfig+0xe8>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d113      	bne.n	80099a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800997e:	693b      	ldr	r3, [r7, #16]
 8009980:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009984:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800998c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800998e:	683b      	ldr	r3, [r7, #0]
 8009990:	695b      	ldr	r3, [r3, #20]
 8009992:	011b      	lsls	r3, r3, #4
 8009994:	693a      	ldr	r2, [r7, #16]
 8009996:	4313      	orrs	r3, r2
 8009998:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800999a:	683b      	ldr	r3, [r7, #0]
 800999c:	699b      	ldr	r3, [r3, #24]
 800999e:	011b      	lsls	r3, r3, #4
 80099a0:	693a      	ldr	r2, [r7, #16]
 80099a2:	4313      	orrs	r3, r2
 80099a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	693a      	ldr	r2, [r7, #16]
 80099aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	68fa      	ldr	r2, [r7, #12]
 80099b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	685a      	ldr	r2, [r3, #4]
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	697a      	ldr	r2, [r7, #20]
 80099be:	621a      	str	r2, [r3, #32]
}
 80099c0:	bf00      	nop
 80099c2:	371c      	adds	r7, #28
 80099c4:	46bd      	mov	sp, r7
 80099c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ca:	4770      	bx	lr
 80099cc:	fffeff8f 	.word	0xfffeff8f
 80099d0:	40010000 	.word	0x40010000
 80099d4:	40010400 	.word	0x40010400

080099d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80099d8:	b480      	push	{r7}
 80099da:	b087      	sub	sp, #28
 80099dc:	af00      	add	r7, sp, #0
 80099de:	6078      	str	r0, [r7, #4]
 80099e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6a1b      	ldr	r3, [r3, #32]
 80099e6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6a1b      	ldr	r3, [r3, #32]
 80099f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	69db      	ldr	r3, [r3, #28]
 80099fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009a00:	68fa      	ldr	r2, [r7, #12]
 8009a02:	4b1e      	ldr	r3, [pc, #120]	; (8009a7c <TIM_OC4_SetConfig+0xa4>)
 8009a04:	4013      	ands	r3, r2
 8009a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	021b      	lsls	r3, r3, #8
 8009a16:	68fa      	ldr	r2, [r7, #12]
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009a22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	689b      	ldr	r3, [r3, #8]
 8009a28:	031b      	lsls	r3, r3, #12
 8009a2a:	693a      	ldr	r2, [r7, #16]
 8009a2c:	4313      	orrs	r3, r2
 8009a2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	4a13      	ldr	r2, [pc, #76]	; (8009a80 <TIM_OC4_SetConfig+0xa8>)
 8009a34:	4293      	cmp	r3, r2
 8009a36:	d003      	beq.n	8009a40 <TIM_OC4_SetConfig+0x68>
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	4a12      	ldr	r2, [pc, #72]	; (8009a84 <TIM_OC4_SetConfig+0xac>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d109      	bne.n	8009a54 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009a46:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	695b      	ldr	r3, [r3, #20]
 8009a4c:	019b      	lsls	r3, r3, #6
 8009a4e:	697a      	ldr	r2, [r7, #20]
 8009a50:	4313      	orrs	r3, r2
 8009a52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	697a      	ldr	r2, [r7, #20]
 8009a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	68fa      	ldr	r2, [r7, #12]
 8009a5e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	685a      	ldr	r2, [r3, #4]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	693a      	ldr	r2, [r7, #16]
 8009a6c:	621a      	str	r2, [r3, #32]
}
 8009a6e:	bf00      	nop
 8009a70:	371c      	adds	r7, #28
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr
 8009a7a:	bf00      	nop
 8009a7c:	feff8fff 	.word	0xfeff8fff
 8009a80:	40010000 	.word	0x40010000
 8009a84:	40010400 	.word	0x40010400

08009a88 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009a88:	b480      	push	{r7}
 8009a8a:	b087      	sub	sp, #28
 8009a8c:	af00      	add	r7, sp, #0
 8009a8e:	6078      	str	r0, [r7, #4]
 8009a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6a1b      	ldr	r3, [r3, #32]
 8009a96:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	685b      	ldr	r3, [r3, #4]
 8009aa8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009ab0:	68fa      	ldr	r2, [r7, #12]
 8009ab2:	4b1b      	ldr	r3, [pc, #108]	; (8009b20 <TIM_OC5_SetConfig+0x98>)
 8009ab4:	4013      	ands	r3, r2
 8009ab6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009ac2:	693b      	ldr	r3, [r7, #16]
 8009ac4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009ac8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009aca:	683b      	ldr	r3, [r7, #0]
 8009acc:	689b      	ldr	r3, [r3, #8]
 8009ace:	041b      	lsls	r3, r3, #16
 8009ad0:	693a      	ldr	r2, [r7, #16]
 8009ad2:	4313      	orrs	r3, r2
 8009ad4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4a12      	ldr	r2, [pc, #72]	; (8009b24 <TIM_OC5_SetConfig+0x9c>)
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d003      	beq.n	8009ae6 <TIM_OC5_SetConfig+0x5e>
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	4a11      	ldr	r2, [pc, #68]	; (8009b28 <TIM_OC5_SetConfig+0xa0>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d109      	bne.n	8009afa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009ae6:	697b      	ldr	r3, [r7, #20]
 8009ae8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009aec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	695b      	ldr	r3, [r3, #20]
 8009af2:	021b      	lsls	r3, r3, #8
 8009af4:	697a      	ldr	r2, [r7, #20]
 8009af6:	4313      	orrs	r3, r2
 8009af8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	697a      	ldr	r2, [r7, #20]
 8009afe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	68fa      	ldr	r2, [r7, #12]
 8009b04:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	685a      	ldr	r2, [r3, #4]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	693a      	ldr	r2, [r7, #16]
 8009b12:	621a      	str	r2, [r3, #32]
}
 8009b14:	bf00      	nop
 8009b16:	371c      	adds	r7, #28
 8009b18:	46bd      	mov	sp, r7
 8009b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1e:	4770      	bx	lr
 8009b20:	fffeff8f 	.word	0xfffeff8f
 8009b24:	40010000 	.word	0x40010000
 8009b28:	40010400 	.word	0x40010400

08009b2c <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b087      	sub	sp, #28
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
 8009b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6a1b      	ldr	r3, [r3, #32]
 8009b3a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a1b      	ldr	r3, [r3, #32]
 8009b46:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	685b      	ldr	r3, [r3, #4]
 8009b4c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009b54:	68fa      	ldr	r2, [r7, #12]
 8009b56:	4b1c      	ldr	r3, [pc, #112]	; (8009bc8 <TIM_OC6_SetConfig+0x9c>)
 8009b58:	4013      	ands	r3, r2
 8009b5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	021b      	lsls	r3, r3, #8
 8009b62:	68fa      	ldr	r2, [r7, #12]
 8009b64:	4313      	orrs	r3, r2
 8009b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009b68:	693b      	ldr	r3, [r7, #16]
 8009b6a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009b6e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	051b      	lsls	r3, r3, #20
 8009b76:	693a      	ldr	r2, [r7, #16]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	4a13      	ldr	r2, [pc, #76]	; (8009bcc <TIM_OC6_SetConfig+0xa0>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d003      	beq.n	8009b8c <TIM_OC6_SetConfig+0x60>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4a12      	ldr	r2, [pc, #72]	; (8009bd0 <TIM_OC6_SetConfig+0xa4>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d109      	bne.n	8009ba0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009b92:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	695b      	ldr	r3, [r3, #20]
 8009b98:	029b      	lsls	r3, r3, #10
 8009b9a:	697a      	ldr	r2, [r7, #20]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	697a      	ldr	r2, [r7, #20]
 8009ba4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	68fa      	ldr	r2, [r7, #12]
 8009baa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	685a      	ldr	r2, [r3, #4]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	693a      	ldr	r2, [r7, #16]
 8009bb8:	621a      	str	r2, [r3, #32]
}
 8009bba:	bf00      	nop
 8009bbc:	371c      	adds	r7, #28
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc4:	4770      	bx	lr
 8009bc6:	bf00      	nop
 8009bc8:	feff8fff 	.word	0xfeff8fff
 8009bcc:	40010000 	.word	0x40010000
 8009bd0:	40010400 	.word	0x40010400

08009bd4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b087      	sub	sp, #28
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	6a1b      	ldr	r3, [r3, #32]
 8009be4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009be6:	68fb      	ldr	r3, [r7, #12]
 8009be8:	6a1b      	ldr	r3, [r3, #32]
 8009bea:	f023 0201 	bic.w	r2, r3, #1
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	699b      	ldr	r3, [r3, #24]
 8009bf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009bf8:	693b      	ldr	r3, [r7, #16]
 8009bfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009bfe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	011b      	lsls	r3, r3, #4
 8009c04:	693a      	ldr	r2, [r7, #16]
 8009c06:	4313      	orrs	r3, r2
 8009c08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	f023 030a 	bic.w	r3, r3, #10
 8009c10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009c12:	697a      	ldr	r2, [r7, #20]
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	4313      	orrs	r3, r2
 8009c18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	693a      	ldr	r2, [r7, #16]
 8009c1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	697a      	ldr	r2, [r7, #20]
 8009c24:	621a      	str	r2, [r3, #32]
}
 8009c26:	bf00      	nop
 8009c28:	371c      	adds	r7, #28
 8009c2a:	46bd      	mov	sp, r7
 8009c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c30:	4770      	bx	lr

08009c32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009c32:	b480      	push	{r7}
 8009c34:	b087      	sub	sp, #28
 8009c36:	af00      	add	r7, sp, #0
 8009c38:	60f8      	str	r0, [r7, #12]
 8009c3a:	60b9      	str	r1, [r7, #8]
 8009c3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6a1b      	ldr	r3, [r3, #32]
 8009c42:	f023 0210 	bic.w	r2, r3, #16
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	699b      	ldr	r3, [r3, #24]
 8009c4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	6a1b      	ldr	r3, [r3, #32]
 8009c54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c5c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	031b      	lsls	r3, r3, #12
 8009c62:	697a      	ldr	r2, [r7, #20]
 8009c64:	4313      	orrs	r3, r2
 8009c66:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009c6e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	011b      	lsls	r3, r3, #4
 8009c74:	693a      	ldr	r2, [r7, #16]
 8009c76:	4313      	orrs	r3, r2
 8009c78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	697a      	ldr	r2, [r7, #20]
 8009c7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	693a      	ldr	r2, [r7, #16]
 8009c84:	621a      	str	r2, [r3, #32]
}
 8009c86:	bf00      	nop
 8009c88:	371c      	adds	r7, #28
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c90:	4770      	bx	lr

08009c92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009c92:	b480      	push	{r7}
 8009c94:	b085      	sub	sp, #20
 8009c96:	af00      	add	r7, sp, #0
 8009c98:	6078      	str	r0, [r7, #4]
 8009c9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ca8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009caa:	683a      	ldr	r2, [r7, #0]
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	f043 0307 	orr.w	r3, r3, #7
 8009cb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	609a      	str	r2, [r3, #8]
}
 8009cbc:	bf00      	nop
 8009cbe:	3714      	adds	r7, #20
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b087      	sub	sp, #28
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	607a      	str	r2, [r7, #4]
 8009cd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009cd6:	68fb      	ldr	r3, [r7, #12]
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ce2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	021a      	lsls	r2, r3, #8
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	431a      	orrs	r2, r3
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	697a      	ldr	r2, [r7, #20]
 8009cf2:	4313      	orrs	r3, r2
 8009cf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	697a      	ldr	r2, [r7, #20]
 8009cfa:	609a      	str	r2, [r3, #8]
}
 8009cfc:	bf00      	nop
 8009cfe:	371c      	adds	r7, #28
 8009d00:	46bd      	mov	sp, r7
 8009d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d06:	4770      	bx	lr

08009d08 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009d08:	b480      	push	{r7}
 8009d0a:	b085      	sub	sp, #20
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d18:	2b01      	cmp	r3, #1
 8009d1a:	d101      	bne.n	8009d20 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009d1c:	2302      	movs	r3, #2
 8009d1e:	e045      	b.n	8009dac <HAL_TIMEx_MasterConfigSynchronization+0xa4>
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2201      	movs	r2, #1
 8009d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2202      	movs	r2, #2
 8009d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	685b      	ldr	r3, [r3, #4]
 8009d36:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	689b      	ldr	r3, [r3, #8]
 8009d3e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a1c      	ldr	r2, [pc, #112]	; (8009db8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8009d46:	4293      	cmp	r3, r2
 8009d48:	d004      	beq.n	8009d54 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	4a1b      	ldr	r2, [pc, #108]	; (8009dbc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009d50:	4293      	cmp	r3, r2
 8009d52:	d108      	bne.n	8009d66 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009d5a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	685b      	ldr	r3, [r3, #4]
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	4313      	orrs	r3, r2
 8009d64:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d6c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	68fa      	ldr	r2, [r7, #12]
 8009d74:	4313      	orrs	r3, r2
 8009d76:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8009d78:	68bb      	ldr	r3, [r7, #8]
 8009d7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009d7e:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	68ba      	ldr	r2, [r7, #8]
 8009d86:	4313      	orrs	r3, r2
 8009d88:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	68fa      	ldr	r2, [r7, #12]
 8009d90:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	68ba      	ldr	r2, [r7, #8]
 8009d98:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2201      	movs	r2, #1
 8009d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2200      	movs	r2, #0
 8009da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009daa:	2300      	movs	r3, #0
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3714      	adds	r7, #20
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr
 8009db8:	40010000 	.word	0x40010000
 8009dbc:	40010400 	.word	0x40010400

08009dc0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b085      	sub	sp, #20
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009dd4:	2b01      	cmp	r3, #1
 8009dd6:	d101      	bne.n	8009ddc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009dd8:	2302      	movs	r3, #2
 8009dda:	e065      	b.n	8009ea8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2201      	movs	r2, #1
 8009de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	4313      	orrs	r3, r2
 8009df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	689b      	ldr	r3, [r3, #8]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8009e06:	683b      	ldr	r3, [r7, #0]
 8009e08:	685b      	ldr	r3, [r3, #4]
 8009e0a:	4313      	orrs	r3, r2
 8009e0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4313      	orrs	r3, r2
 8009e1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	691b      	ldr	r3, [r3, #16]
 8009e26:	4313      	orrs	r3, r2
 8009e28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	695b      	ldr	r3, [r3, #20]
 8009e34:	4313      	orrs	r3, r2
 8009e36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009e3e:	683b      	ldr	r3, [r7, #0]
 8009e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e42:	4313      	orrs	r3, r2
 8009e44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	699b      	ldr	r3, [r3, #24]
 8009e50:	041b      	lsls	r3, r3, #16
 8009e52:	4313      	orrs	r3, r2
 8009e54:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a16      	ldr	r2, [pc, #88]	; (8009eb4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d004      	beq.n	8009e6a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4a14      	ldr	r2, [pc, #80]	; (8009eb8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d115      	bne.n	8009e96 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e74:	051b      	lsls	r3, r3, #20
 8009e76:	4313      	orrs	r3, r2
 8009e78:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009e80:	683b      	ldr	r3, [r7, #0]
 8009e82:	69db      	ldr	r3, [r3, #28]
 8009e84:	4313      	orrs	r3, r2
 8009e86:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8009e8e:	683b      	ldr	r3, [r7, #0]
 8009e90:	6a1b      	ldr	r3, [r3, #32]
 8009e92:	4313      	orrs	r3, r2
 8009e94:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	68fa      	ldr	r2, [r7, #12]
 8009e9c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ea6:	2300      	movs	r3, #0
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3714      	adds	r7, #20
 8009eac:	46bd      	mov	sp, r7
 8009eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb2:	4770      	bx	lr
 8009eb4:	40010000 	.word	0x40010000
 8009eb8:	40010400 	.word	0x40010400

08009ebc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ec4:	bf00      	nop
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009ed8:	bf00      	nop
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009eec:	bf00      	nop
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b082      	sub	sp, #8
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d101      	bne.n	8009f0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009f06:	2301      	movs	r3, #1
 8009f08:	e040      	b.n	8009f8c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d106      	bne.n	8009f20 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2200      	movs	r2, #0
 8009f16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009f1a:	6878      	ldr	r0, [r7, #4]
 8009f1c:	f00f f9f0 	bl	8019300 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2224      	movs	r2, #36	; 0x24
 8009f24:	675a      	str	r2, [r3, #116]	; 0x74

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f022 0201 	bic.w	r2, r2, #1
 8009f34:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f000 f8be 	bl	800a0b8 <UART_SetConfig>
 8009f3c:	4603      	mov	r3, r0
 8009f3e:	2b01      	cmp	r3, #1
 8009f40:	d101      	bne.n	8009f46 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009f42:	2301      	movs	r3, #1
 8009f44:	e022      	b.n	8009f8c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d002      	beq.n	8009f54 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009f4e:	6878      	ldr	r0, [r7, #4]
 8009f50:	f000 fb56 	bl	800a600 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	685a      	ldr	r2, [r3, #4]
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009f62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	681b      	ldr	r3, [r3, #0]
 8009f68:	689a      	ldr	r2, [r3, #8]
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009f72:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f042 0201 	orr.w	r2, r2, #1
 8009f82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f000 fbdd 	bl	800a744 <UART_CheckIdleState>
 8009f8a:	4603      	mov	r3, r0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3708      	adds	r7, #8
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}

08009f94 <HAL_UART_Transmit>:
  * @param Size    Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f94:	b580      	push	{r7, lr}
 8009f96:	b08a      	sub	sp, #40	; 0x28
 8009f98:	af02      	add	r7, sp, #8
 8009f9a:	60f8      	str	r0, [r7, #12]
 8009f9c:	60b9      	str	r1, [r7, #8]
 8009f9e:	603b      	str	r3, [r7, #0]
 8009fa0:	4613      	mov	r3, r2
 8009fa2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009fa8:	2b20      	cmp	r3, #32
 8009faa:	d17f      	bne.n	800a0ac <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d002      	beq.n	8009fb8 <HAL_UART_Transmit+0x24>
 8009fb2:	88fb      	ldrh	r3, [r7, #6]
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d101      	bne.n	8009fbc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	e078      	b.n	800a0ae <HAL_UART_Transmit+0x11a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009fc2:	2b01      	cmp	r3, #1
 8009fc4:	d101      	bne.n	8009fca <HAL_UART_Transmit+0x36>
 8009fc6:	2302      	movs	r3, #2
 8009fc8:	e071      	b.n	800a0ae <HAL_UART_Transmit+0x11a>
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	2201      	movs	r2, #1
 8009fce:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2221      	movs	r2, #33	; 0x21
 8009fdc:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009fde:	f7f6 fdab 	bl	8000b38 <HAL_GetTick>
 8009fe2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	88fa      	ldrh	r2, [r7, #6]
 8009fe8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	88fa      	ldrh	r2, [r7, #6]
 8009ff0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

        /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ffc:	d108      	bne.n	800a010 <HAL_UART_Transmit+0x7c>
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	691b      	ldr	r3, [r3, #16]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d104      	bne.n	800a010 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 800a006:	2300      	movs	r3, #0
 800a008:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	61bb      	str	r3, [r7, #24]
 800a00e:	e003      	b.n	800a018 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 800a010:	68bb      	ldr	r3, [r7, #8]
 800a012:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a014:	2300      	movs	r3, #0
 800a016:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a018:	e02c      	b.n	800a074 <HAL_UART_Transmit+0xe0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a01a:	683b      	ldr	r3, [r7, #0]
 800a01c:	9300      	str	r3, [sp, #0]
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	2200      	movs	r2, #0
 800a022:	2180      	movs	r1, #128	; 0x80
 800a024:	68f8      	ldr	r0, [r7, #12]
 800a026:	f000 fbbc 	bl	800a7a2 <UART_WaitOnFlagUntilTimeout>
 800a02a:	4603      	mov	r3, r0
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d001      	beq.n	800a034 <HAL_UART_Transmit+0xa0>
      {
        return HAL_TIMEOUT;
 800a030:	2303      	movs	r3, #3
 800a032:	e03c      	b.n	800a0ae <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 800a034:	69fb      	ldr	r3, [r7, #28]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d10b      	bne.n	800a052 <HAL_UART_Transmit+0xbe>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a03a:	69bb      	ldr	r3, [r7, #24]
 800a03c:	881b      	ldrh	r3, [r3, #0]
 800a03e:	461a      	mov	r2, r3
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a048:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	3302      	adds	r3, #2
 800a04e:	61bb      	str	r3, [r7, #24]
 800a050:	e007      	b.n	800a062 <HAL_UART_Transmit+0xce>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a052:	69fb      	ldr	r3, [r7, #28]
 800a054:	781a      	ldrb	r2, [r3, #0]
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a05c:	69fb      	ldr	r3, [r7, #28]
 800a05e:	3301      	adds	r3, #1
 800a060:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a068:	b29b      	uxth	r3, r3
 800a06a:	3b01      	subs	r3, #1
 800a06c:	b29a      	uxth	r2, r3
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a07a:	b29b      	uxth	r3, r3
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d1cc      	bne.n	800a01a <HAL_UART_Transmit+0x86>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a080:	683b      	ldr	r3, [r7, #0]
 800a082:	9300      	str	r3, [sp, #0]
 800a084:	697b      	ldr	r3, [r7, #20]
 800a086:	2200      	movs	r2, #0
 800a088:	2140      	movs	r1, #64	; 0x40
 800a08a:	68f8      	ldr	r0, [r7, #12]
 800a08c:	f000 fb89 	bl	800a7a2 <UART_WaitOnFlagUntilTimeout>
 800a090:	4603      	mov	r3, r0
 800a092:	2b00      	cmp	r3, #0
 800a094:	d001      	beq.n	800a09a <HAL_UART_Transmit+0x106>
    {
      return HAL_TIMEOUT;
 800a096:	2303      	movs	r3, #3
 800a098:	e009      	b.n	800a0ae <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2220      	movs	r2, #32
 800a09e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    return HAL_OK;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	e000      	b.n	800a0ae <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 800a0ac:	2302      	movs	r3, #2
  }
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3720      	adds	r7, #32
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bd80      	pop	{r7, pc}
	...

0800a0b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b088      	sub	sp, #32
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a0c0:	2300      	movs	r3, #0
 800a0c2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	689a      	ldr	r2, [r3, #8]
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	691b      	ldr	r3, [r3, #16]
 800a0d0:	431a      	orrs	r2, r3
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	695b      	ldr	r3, [r3, #20]
 800a0d6:	431a      	orrs	r2, r3
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	69db      	ldr	r3, [r3, #28]
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	4bb1      	ldr	r3, [pc, #708]	; (800a3ac <UART_SetConfig+0x2f4>)
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	687a      	ldr	r2, [r7, #4]
 800a0ec:	6812      	ldr	r2, [r2, #0]
 800a0ee:	6939      	ldr	r1, [r7, #16]
 800a0f0:	430b      	orrs	r3, r1
 800a0f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	68da      	ldr	r2, [r3, #12]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	430a      	orrs	r2, r1
 800a108:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	699b      	ldr	r3, [r3, #24]
 800a10e:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6a1b      	ldr	r3, [r3, #32]
 800a114:	693a      	ldr	r2, [r7, #16]
 800a116:	4313      	orrs	r3, r2
 800a118:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	689b      	ldr	r3, [r3, #8]
 800a120:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	693a      	ldr	r2, [r7, #16]
 800a12a:	430a      	orrs	r2, r1
 800a12c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4a9f      	ldr	r2, [pc, #636]	; (800a3b0 <UART_SetConfig+0x2f8>)
 800a134:	4293      	cmp	r3, r2
 800a136:	d121      	bne.n	800a17c <UART_SetConfig+0xc4>
 800a138:	4b9e      	ldr	r3, [pc, #632]	; (800a3b4 <UART_SetConfig+0x2fc>)
 800a13a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a13e:	f003 0303 	and.w	r3, r3, #3
 800a142:	2b03      	cmp	r3, #3
 800a144:	d816      	bhi.n	800a174 <UART_SetConfig+0xbc>
 800a146:	a201      	add	r2, pc, #4	; (adr r2, 800a14c <UART_SetConfig+0x94>)
 800a148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a14c:	0800a15d 	.word	0x0800a15d
 800a150:	0800a169 	.word	0x0800a169
 800a154:	0800a163 	.word	0x0800a163
 800a158:	0800a16f 	.word	0x0800a16f
 800a15c:	2301      	movs	r3, #1
 800a15e:	77fb      	strb	r3, [r7, #31]
 800a160:	e151      	b.n	800a406 <UART_SetConfig+0x34e>
 800a162:	2302      	movs	r3, #2
 800a164:	77fb      	strb	r3, [r7, #31]
 800a166:	e14e      	b.n	800a406 <UART_SetConfig+0x34e>
 800a168:	2304      	movs	r3, #4
 800a16a:	77fb      	strb	r3, [r7, #31]
 800a16c:	e14b      	b.n	800a406 <UART_SetConfig+0x34e>
 800a16e:	2308      	movs	r3, #8
 800a170:	77fb      	strb	r3, [r7, #31]
 800a172:	e148      	b.n	800a406 <UART_SetConfig+0x34e>
 800a174:	2310      	movs	r3, #16
 800a176:	77fb      	strb	r3, [r7, #31]
 800a178:	bf00      	nop
 800a17a:	e144      	b.n	800a406 <UART_SetConfig+0x34e>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a8d      	ldr	r2, [pc, #564]	; (800a3b8 <UART_SetConfig+0x300>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d134      	bne.n	800a1f0 <UART_SetConfig+0x138>
 800a186:	4b8b      	ldr	r3, [pc, #556]	; (800a3b4 <UART_SetConfig+0x2fc>)
 800a188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a18c:	f003 030c 	and.w	r3, r3, #12
 800a190:	2b0c      	cmp	r3, #12
 800a192:	d829      	bhi.n	800a1e8 <UART_SetConfig+0x130>
 800a194:	a201      	add	r2, pc, #4	; (adr r2, 800a19c <UART_SetConfig+0xe4>)
 800a196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a19a:	bf00      	nop
 800a19c:	0800a1d1 	.word	0x0800a1d1
 800a1a0:	0800a1e9 	.word	0x0800a1e9
 800a1a4:	0800a1e9 	.word	0x0800a1e9
 800a1a8:	0800a1e9 	.word	0x0800a1e9
 800a1ac:	0800a1dd 	.word	0x0800a1dd
 800a1b0:	0800a1e9 	.word	0x0800a1e9
 800a1b4:	0800a1e9 	.word	0x0800a1e9
 800a1b8:	0800a1e9 	.word	0x0800a1e9
 800a1bc:	0800a1d7 	.word	0x0800a1d7
 800a1c0:	0800a1e9 	.word	0x0800a1e9
 800a1c4:	0800a1e9 	.word	0x0800a1e9
 800a1c8:	0800a1e9 	.word	0x0800a1e9
 800a1cc:	0800a1e3 	.word	0x0800a1e3
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	77fb      	strb	r3, [r7, #31]
 800a1d4:	e117      	b.n	800a406 <UART_SetConfig+0x34e>
 800a1d6:	2302      	movs	r3, #2
 800a1d8:	77fb      	strb	r3, [r7, #31]
 800a1da:	e114      	b.n	800a406 <UART_SetConfig+0x34e>
 800a1dc:	2304      	movs	r3, #4
 800a1de:	77fb      	strb	r3, [r7, #31]
 800a1e0:	e111      	b.n	800a406 <UART_SetConfig+0x34e>
 800a1e2:	2308      	movs	r3, #8
 800a1e4:	77fb      	strb	r3, [r7, #31]
 800a1e6:	e10e      	b.n	800a406 <UART_SetConfig+0x34e>
 800a1e8:	2310      	movs	r3, #16
 800a1ea:	77fb      	strb	r3, [r7, #31]
 800a1ec:	bf00      	nop
 800a1ee:	e10a      	b.n	800a406 <UART_SetConfig+0x34e>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a71      	ldr	r2, [pc, #452]	; (800a3bc <UART_SetConfig+0x304>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d120      	bne.n	800a23c <UART_SetConfig+0x184>
 800a1fa:	4b6e      	ldr	r3, [pc, #440]	; (800a3b4 <UART_SetConfig+0x2fc>)
 800a1fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a200:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a204:	2b10      	cmp	r3, #16
 800a206:	d00f      	beq.n	800a228 <UART_SetConfig+0x170>
 800a208:	2b10      	cmp	r3, #16
 800a20a:	d802      	bhi.n	800a212 <UART_SetConfig+0x15a>
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d005      	beq.n	800a21c <UART_SetConfig+0x164>
 800a210:	e010      	b.n	800a234 <UART_SetConfig+0x17c>
 800a212:	2b20      	cmp	r3, #32
 800a214:	d005      	beq.n	800a222 <UART_SetConfig+0x16a>
 800a216:	2b30      	cmp	r3, #48	; 0x30
 800a218:	d009      	beq.n	800a22e <UART_SetConfig+0x176>
 800a21a:	e00b      	b.n	800a234 <UART_SetConfig+0x17c>
 800a21c:	2300      	movs	r3, #0
 800a21e:	77fb      	strb	r3, [r7, #31]
 800a220:	e0f1      	b.n	800a406 <UART_SetConfig+0x34e>
 800a222:	2302      	movs	r3, #2
 800a224:	77fb      	strb	r3, [r7, #31]
 800a226:	e0ee      	b.n	800a406 <UART_SetConfig+0x34e>
 800a228:	2304      	movs	r3, #4
 800a22a:	77fb      	strb	r3, [r7, #31]
 800a22c:	e0eb      	b.n	800a406 <UART_SetConfig+0x34e>
 800a22e:	2308      	movs	r3, #8
 800a230:	77fb      	strb	r3, [r7, #31]
 800a232:	e0e8      	b.n	800a406 <UART_SetConfig+0x34e>
 800a234:	2310      	movs	r3, #16
 800a236:	77fb      	strb	r3, [r7, #31]
 800a238:	bf00      	nop
 800a23a:	e0e4      	b.n	800a406 <UART_SetConfig+0x34e>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a5f      	ldr	r2, [pc, #380]	; (800a3c0 <UART_SetConfig+0x308>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d120      	bne.n	800a288 <UART_SetConfig+0x1d0>
 800a246:	4b5b      	ldr	r3, [pc, #364]	; (800a3b4 <UART_SetConfig+0x2fc>)
 800a248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a24c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a250:	2b40      	cmp	r3, #64	; 0x40
 800a252:	d00f      	beq.n	800a274 <UART_SetConfig+0x1bc>
 800a254:	2b40      	cmp	r3, #64	; 0x40
 800a256:	d802      	bhi.n	800a25e <UART_SetConfig+0x1a6>
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d005      	beq.n	800a268 <UART_SetConfig+0x1b0>
 800a25c:	e010      	b.n	800a280 <UART_SetConfig+0x1c8>
 800a25e:	2b80      	cmp	r3, #128	; 0x80
 800a260:	d005      	beq.n	800a26e <UART_SetConfig+0x1b6>
 800a262:	2bc0      	cmp	r3, #192	; 0xc0
 800a264:	d009      	beq.n	800a27a <UART_SetConfig+0x1c2>
 800a266:	e00b      	b.n	800a280 <UART_SetConfig+0x1c8>
 800a268:	2300      	movs	r3, #0
 800a26a:	77fb      	strb	r3, [r7, #31]
 800a26c:	e0cb      	b.n	800a406 <UART_SetConfig+0x34e>
 800a26e:	2302      	movs	r3, #2
 800a270:	77fb      	strb	r3, [r7, #31]
 800a272:	e0c8      	b.n	800a406 <UART_SetConfig+0x34e>
 800a274:	2304      	movs	r3, #4
 800a276:	77fb      	strb	r3, [r7, #31]
 800a278:	e0c5      	b.n	800a406 <UART_SetConfig+0x34e>
 800a27a:	2308      	movs	r3, #8
 800a27c:	77fb      	strb	r3, [r7, #31]
 800a27e:	e0c2      	b.n	800a406 <UART_SetConfig+0x34e>
 800a280:	2310      	movs	r3, #16
 800a282:	77fb      	strb	r3, [r7, #31]
 800a284:	bf00      	nop
 800a286:	e0be      	b.n	800a406 <UART_SetConfig+0x34e>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a4d      	ldr	r2, [pc, #308]	; (800a3c4 <UART_SetConfig+0x30c>)
 800a28e:	4293      	cmp	r3, r2
 800a290:	d124      	bne.n	800a2dc <UART_SetConfig+0x224>
 800a292:	4b48      	ldr	r3, [pc, #288]	; (800a3b4 <UART_SetConfig+0x2fc>)
 800a294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a298:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a29c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2a0:	d012      	beq.n	800a2c8 <UART_SetConfig+0x210>
 800a2a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2a6:	d802      	bhi.n	800a2ae <UART_SetConfig+0x1f6>
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	d007      	beq.n	800a2bc <UART_SetConfig+0x204>
 800a2ac:	e012      	b.n	800a2d4 <UART_SetConfig+0x21c>
 800a2ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2b2:	d006      	beq.n	800a2c2 <UART_SetConfig+0x20a>
 800a2b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a2b8:	d009      	beq.n	800a2ce <UART_SetConfig+0x216>
 800a2ba:	e00b      	b.n	800a2d4 <UART_SetConfig+0x21c>
 800a2bc:	2300      	movs	r3, #0
 800a2be:	77fb      	strb	r3, [r7, #31]
 800a2c0:	e0a1      	b.n	800a406 <UART_SetConfig+0x34e>
 800a2c2:	2302      	movs	r3, #2
 800a2c4:	77fb      	strb	r3, [r7, #31]
 800a2c6:	e09e      	b.n	800a406 <UART_SetConfig+0x34e>
 800a2c8:	2304      	movs	r3, #4
 800a2ca:	77fb      	strb	r3, [r7, #31]
 800a2cc:	e09b      	b.n	800a406 <UART_SetConfig+0x34e>
 800a2ce:	2308      	movs	r3, #8
 800a2d0:	77fb      	strb	r3, [r7, #31]
 800a2d2:	e098      	b.n	800a406 <UART_SetConfig+0x34e>
 800a2d4:	2310      	movs	r3, #16
 800a2d6:	77fb      	strb	r3, [r7, #31]
 800a2d8:	bf00      	nop
 800a2da:	e094      	b.n	800a406 <UART_SetConfig+0x34e>
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a39      	ldr	r2, [pc, #228]	; (800a3c8 <UART_SetConfig+0x310>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d124      	bne.n	800a330 <UART_SetConfig+0x278>
 800a2e6:	4b33      	ldr	r3, [pc, #204]	; (800a3b4 <UART_SetConfig+0x2fc>)
 800a2e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a2f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2f4:	d012      	beq.n	800a31c <UART_SetConfig+0x264>
 800a2f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2fa:	d802      	bhi.n	800a302 <UART_SetConfig+0x24a>
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d007      	beq.n	800a310 <UART_SetConfig+0x258>
 800a300:	e012      	b.n	800a328 <UART_SetConfig+0x270>
 800a302:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a306:	d006      	beq.n	800a316 <UART_SetConfig+0x25e>
 800a308:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a30c:	d009      	beq.n	800a322 <UART_SetConfig+0x26a>
 800a30e:	e00b      	b.n	800a328 <UART_SetConfig+0x270>
 800a310:	2301      	movs	r3, #1
 800a312:	77fb      	strb	r3, [r7, #31]
 800a314:	e077      	b.n	800a406 <UART_SetConfig+0x34e>
 800a316:	2302      	movs	r3, #2
 800a318:	77fb      	strb	r3, [r7, #31]
 800a31a:	e074      	b.n	800a406 <UART_SetConfig+0x34e>
 800a31c:	2304      	movs	r3, #4
 800a31e:	77fb      	strb	r3, [r7, #31]
 800a320:	e071      	b.n	800a406 <UART_SetConfig+0x34e>
 800a322:	2308      	movs	r3, #8
 800a324:	77fb      	strb	r3, [r7, #31]
 800a326:	e06e      	b.n	800a406 <UART_SetConfig+0x34e>
 800a328:	2310      	movs	r3, #16
 800a32a:	77fb      	strb	r3, [r7, #31]
 800a32c:	bf00      	nop
 800a32e:	e06a      	b.n	800a406 <UART_SetConfig+0x34e>
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	4a25      	ldr	r2, [pc, #148]	; (800a3cc <UART_SetConfig+0x314>)
 800a336:	4293      	cmp	r3, r2
 800a338:	d124      	bne.n	800a384 <UART_SetConfig+0x2cc>
 800a33a:	4b1e      	ldr	r3, [pc, #120]	; (800a3b4 <UART_SetConfig+0x2fc>)
 800a33c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a340:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a344:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a348:	d012      	beq.n	800a370 <UART_SetConfig+0x2b8>
 800a34a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a34e:	d802      	bhi.n	800a356 <UART_SetConfig+0x29e>
 800a350:	2b00      	cmp	r3, #0
 800a352:	d007      	beq.n	800a364 <UART_SetConfig+0x2ac>
 800a354:	e012      	b.n	800a37c <UART_SetConfig+0x2c4>
 800a356:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a35a:	d006      	beq.n	800a36a <UART_SetConfig+0x2b2>
 800a35c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a360:	d009      	beq.n	800a376 <UART_SetConfig+0x2be>
 800a362:	e00b      	b.n	800a37c <UART_SetConfig+0x2c4>
 800a364:	2300      	movs	r3, #0
 800a366:	77fb      	strb	r3, [r7, #31]
 800a368:	e04d      	b.n	800a406 <UART_SetConfig+0x34e>
 800a36a:	2302      	movs	r3, #2
 800a36c:	77fb      	strb	r3, [r7, #31]
 800a36e:	e04a      	b.n	800a406 <UART_SetConfig+0x34e>
 800a370:	2304      	movs	r3, #4
 800a372:	77fb      	strb	r3, [r7, #31]
 800a374:	e047      	b.n	800a406 <UART_SetConfig+0x34e>
 800a376:	2308      	movs	r3, #8
 800a378:	77fb      	strb	r3, [r7, #31]
 800a37a:	e044      	b.n	800a406 <UART_SetConfig+0x34e>
 800a37c:	2310      	movs	r3, #16
 800a37e:	77fb      	strb	r3, [r7, #31]
 800a380:	bf00      	nop
 800a382:	e040      	b.n	800a406 <UART_SetConfig+0x34e>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a11      	ldr	r2, [pc, #68]	; (800a3d0 <UART_SetConfig+0x318>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d139      	bne.n	800a402 <UART_SetConfig+0x34a>
 800a38e:	4b09      	ldr	r3, [pc, #36]	; (800a3b4 <UART_SetConfig+0x2fc>)
 800a390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a394:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a398:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a39c:	d027      	beq.n	800a3ee <UART_SetConfig+0x336>
 800a39e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a3a2:	d817      	bhi.n	800a3d4 <UART_SetConfig+0x31c>
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d01c      	beq.n	800a3e2 <UART_SetConfig+0x32a>
 800a3a8:	e027      	b.n	800a3fa <UART_SetConfig+0x342>
 800a3aa:	bf00      	nop
 800a3ac:	efff69f3 	.word	0xefff69f3
 800a3b0:	40011000 	.word	0x40011000
 800a3b4:	40023800 	.word	0x40023800
 800a3b8:	40004400 	.word	0x40004400
 800a3bc:	40004800 	.word	0x40004800
 800a3c0:	40004c00 	.word	0x40004c00
 800a3c4:	40005000 	.word	0x40005000
 800a3c8:	40011400 	.word	0x40011400
 800a3cc:	40007800 	.word	0x40007800
 800a3d0:	40007c00 	.word	0x40007c00
 800a3d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a3d8:	d006      	beq.n	800a3e8 <UART_SetConfig+0x330>
 800a3da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a3de:	d009      	beq.n	800a3f4 <UART_SetConfig+0x33c>
 800a3e0:	e00b      	b.n	800a3fa <UART_SetConfig+0x342>
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	77fb      	strb	r3, [r7, #31]
 800a3e6:	e00e      	b.n	800a406 <UART_SetConfig+0x34e>
 800a3e8:	2302      	movs	r3, #2
 800a3ea:	77fb      	strb	r3, [r7, #31]
 800a3ec:	e00b      	b.n	800a406 <UART_SetConfig+0x34e>
 800a3ee:	2304      	movs	r3, #4
 800a3f0:	77fb      	strb	r3, [r7, #31]
 800a3f2:	e008      	b.n	800a406 <UART_SetConfig+0x34e>
 800a3f4:	2308      	movs	r3, #8
 800a3f6:	77fb      	strb	r3, [r7, #31]
 800a3f8:	e005      	b.n	800a406 <UART_SetConfig+0x34e>
 800a3fa:	2310      	movs	r3, #16
 800a3fc:	77fb      	strb	r3, [r7, #31]
 800a3fe:	bf00      	nop
 800a400:	e001      	b.n	800a406 <UART_SetConfig+0x34e>
 800a402:	2310      	movs	r3, #16
 800a404:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	69db      	ldr	r3, [r3, #28]
 800a40a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a40e:	d17c      	bne.n	800a50a <UART_SetConfig+0x452>
  {
    switch (clocksource)
 800a410:	7ffb      	ldrb	r3, [r7, #31]
 800a412:	2b08      	cmp	r3, #8
 800a414:	d859      	bhi.n	800a4ca <UART_SetConfig+0x412>
 800a416:	a201      	add	r2, pc, #4	; (adr r2, 800a41c <UART_SetConfig+0x364>)
 800a418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a41c:	0800a441 	.word	0x0800a441
 800a420:	0800a45f 	.word	0x0800a45f
 800a424:	0800a47d 	.word	0x0800a47d
 800a428:	0800a4cb 	.word	0x0800a4cb
 800a42c:	0800a495 	.word	0x0800a495
 800a430:	0800a4cb 	.word	0x0800a4cb
 800a434:	0800a4cb 	.word	0x0800a4cb
 800a438:	0800a4cb 	.word	0x0800a4cb
 800a43c:	0800a4b3 	.word	0x0800a4b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800a440:	f7fb fff2 	bl	8006428 <HAL_RCC_GetPCLK1Freq>
 800a444:	4603      	mov	r3, r0
 800a446:	005a      	lsls	r2, r3, #1
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	685b      	ldr	r3, [r3, #4]
 800a44c:	085b      	lsrs	r3, r3, #1
 800a44e:	441a      	add	r2, r3
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	685b      	ldr	r3, [r3, #4]
 800a454:	fbb2 f3f3 	udiv	r3, r2, r3
 800a458:	b29b      	uxth	r3, r3
 800a45a:	61bb      	str	r3, [r7, #24]
        break;
 800a45c:	e038      	b.n	800a4d0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800a45e:	f7fb fff7 	bl	8006450 <HAL_RCC_GetPCLK2Freq>
 800a462:	4603      	mov	r3, r0
 800a464:	005a      	lsls	r2, r3, #1
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	685b      	ldr	r3, [r3, #4]
 800a46a:	085b      	lsrs	r3, r3, #1
 800a46c:	441a      	add	r2, r3
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	685b      	ldr	r3, [r3, #4]
 800a472:	fbb2 f3f3 	udiv	r3, r2, r3
 800a476:	b29b      	uxth	r3, r3
 800a478:	61bb      	str	r3, [r7, #24]
        break;
 800a47a:	e029      	b.n	800a4d0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	685b      	ldr	r3, [r3, #4]
 800a480:	085a      	lsrs	r2, r3, #1
 800a482:	4b5d      	ldr	r3, [pc, #372]	; (800a5f8 <UART_SetConfig+0x540>)
 800a484:	4413      	add	r3, r2
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	6852      	ldr	r2, [r2, #4]
 800a48a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a48e:	b29b      	uxth	r3, r3
 800a490:	61bb      	str	r3, [r7, #24]
        break;
 800a492:	e01d      	b.n	800a4d0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800a494:	f7fb ff0a 	bl	80062ac <HAL_RCC_GetSysClockFreq>
 800a498:	4603      	mov	r3, r0
 800a49a:	005a      	lsls	r2, r3, #1
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	085b      	lsrs	r3, r3, #1
 800a4a2:	441a      	add	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	685b      	ldr	r3, [r3, #4]
 800a4a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4ac:	b29b      	uxth	r3, r3
 800a4ae:	61bb      	str	r3, [r7, #24]
        break;
 800a4b0:	e00e      	b.n	800a4d0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	685b      	ldr	r3, [r3, #4]
 800a4b6:	085b      	lsrs	r3, r3, #1
 800a4b8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	61bb      	str	r3, [r7, #24]
        break;
 800a4c8:	e002      	b.n	800a4d0 <UART_SetConfig+0x418>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	75fb      	strb	r3, [r7, #23]
        break;
 800a4ce:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4d0:	69bb      	ldr	r3, [r7, #24]
 800a4d2:	2b0f      	cmp	r3, #15
 800a4d4:	d916      	bls.n	800a504 <UART_SetConfig+0x44c>
 800a4d6:	69bb      	ldr	r3, [r7, #24]
 800a4d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4dc:	d212      	bcs.n	800a504 <UART_SetConfig+0x44c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	f023 030f 	bic.w	r3, r3, #15
 800a4e6:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a4e8:	69bb      	ldr	r3, [r7, #24]
 800a4ea:	085b      	lsrs	r3, r3, #1
 800a4ec:	b29b      	uxth	r3, r3
 800a4ee:	f003 0307 	and.w	r3, r3, #7
 800a4f2:	b29a      	uxth	r2, r3
 800a4f4:	89fb      	ldrh	r3, [r7, #14]
 800a4f6:	4313      	orrs	r3, r2
 800a4f8:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	89fa      	ldrh	r2, [r7, #14]
 800a500:	60da      	str	r2, [r3, #12]
 800a502:	e06e      	b.n	800a5e2 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800a504:	2301      	movs	r3, #1
 800a506:	75fb      	strb	r3, [r7, #23]
 800a508:	e06b      	b.n	800a5e2 <UART_SetConfig+0x52a>
    }
  }
  else
  {
    switch (clocksource)
 800a50a:	7ffb      	ldrb	r3, [r7, #31]
 800a50c:	2b08      	cmp	r3, #8
 800a50e:	d857      	bhi.n	800a5c0 <UART_SetConfig+0x508>
 800a510:	a201      	add	r2, pc, #4	; (adr r2, 800a518 <UART_SetConfig+0x460>)
 800a512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a516:	bf00      	nop
 800a518:	0800a53d 	.word	0x0800a53d
 800a51c:	0800a559 	.word	0x0800a559
 800a520:	0800a575 	.word	0x0800a575
 800a524:	0800a5c1 	.word	0x0800a5c1
 800a528:	0800a58d 	.word	0x0800a58d
 800a52c:	0800a5c1 	.word	0x0800a5c1
 800a530:	0800a5c1 	.word	0x0800a5c1
 800a534:	0800a5c1 	.word	0x0800a5c1
 800a538:	0800a5a9 	.word	0x0800a5a9
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800a53c:	f7fb ff74 	bl	8006428 <HAL_RCC_GetPCLK1Freq>
 800a540:	4602      	mov	r2, r0
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	685b      	ldr	r3, [r3, #4]
 800a546:	085b      	lsrs	r3, r3, #1
 800a548:	441a      	add	r2, r3
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a552:	b29b      	uxth	r3, r3
 800a554:	61bb      	str	r3, [r7, #24]
        break;
 800a556:	e036      	b.n	800a5c6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800a558:	f7fb ff7a 	bl	8006450 <HAL_RCC_GetPCLK2Freq>
 800a55c:	4602      	mov	r2, r0
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	085b      	lsrs	r3, r3, #1
 800a564:	441a      	add	r2, r3
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	685b      	ldr	r3, [r3, #4]
 800a56a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a56e:	b29b      	uxth	r3, r3
 800a570:	61bb      	str	r3, [r7, #24]
        break;
 800a572:	e028      	b.n	800a5c6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	685b      	ldr	r3, [r3, #4]
 800a578:	085a      	lsrs	r2, r3, #1
 800a57a:	4b20      	ldr	r3, [pc, #128]	; (800a5fc <UART_SetConfig+0x544>)
 800a57c:	4413      	add	r3, r2
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	6852      	ldr	r2, [r2, #4]
 800a582:	fbb3 f3f2 	udiv	r3, r3, r2
 800a586:	b29b      	uxth	r3, r3
 800a588:	61bb      	str	r3, [r7, #24]
        break;
 800a58a:	e01c      	b.n	800a5c6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800a58c:	f7fb fe8e 	bl	80062ac <HAL_RCC_GetSysClockFreq>
 800a590:	4602      	mov	r2, r0
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	685b      	ldr	r3, [r3, #4]
 800a596:	085b      	lsrs	r3, r3, #1
 800a598:	441a      	add	r2, r3
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	685b      	ldr	r3, [r3, #4]
 800a59e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5a2:	b29b      	uxth	r3, r3
 800a5a4:	61bb      	str	r3, [r7, #24]
        break;
 800a5a6:	e00e      	b.n	800a5c6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	685b      	ldr	r3, [r3, #4]
 800a5ac:	085b      	lsrs	r3, r3, #1
 800a5ae:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	685b      	ldr	r3, [r3, #4]
 800a5b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5ba:	b29b      	uxth	r3, r3
 800a5bc:	61bb      	str	r3, [r7, #24]
        break;
 800a5be:	e002      	b.n	800a5c6 <UART_SetConfig+0x50e>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	75fb      	strb	r3, [r7, #23]
        break;
 800a5c4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5c6:	69bb      	ldr	r3, [r7, #24]
 800a5c8:	2b0f      	cmp	r3, #15
 800a5ca:	d908      	bls.n	800a5de <UART_SetConfig+0x526>
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5d2:	d204      	bcs.n	800a5de <UART_SetConfig+0x526>
    {
      huart->Instance->BRR = usartdiv;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	69ba      	ldr	r2, [r7, #24]
 800a5da:	60da      	str	r2, [r3, #12]
 800a5dc:	e001      	b.n	800a5e2 <UART_SetConfig+0x52a>
    }
    else
    {
      ret = HAL_ERROR;
 800a5de:	2301      	movs	r3, #1
 800a5e0:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a5ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	3720      	adds	r7, #32
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	bd80      	pop	{r7, pc}
 800a5f8:	01e84800 	.word	0x01e84800
 800a5fc:	00f42400 	.word	0x00f42400

0800a600 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a600:	b480      	push	{r7}
 800a602:	b083      	sub	sp, #12
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60c:	f003 0301 	and.w	r3, r3, #1
 800a610:	2b00      	cmp	r3, #0
 800a612:	d00a      	beq.n	800a62a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	430a      	orrs	r2, r1
 800a628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62e:	f003 0302 	and.w	r3, r3, #2
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00a      	beq.n	800a64c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	430a      	orrs	r2, r1
 800a64a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a650:	f003 0304 	and.w	r3, r3, #4
 800a654:	2b00      	cmp	r3, #0
 800a656:	d00a      	beq.n	800a66e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	685b      	ldr	r3, [r3, #4]
 800a65e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	430a      	orrs	r2, r1
 800a66c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a672:	f003 0308 	and.w	r3, r3, #8
 800a676:	2b00      	cmp	r3, #0
 800a678:	d00a      	beq.n	800a690 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	430a      	orrs	r2, r1
 800a68e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a694:	f003 0310 	and.w	r3, r3, #16
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d00a      	beq.n	800a6b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	689b      	ldr	r3, [r3, #8]
 800a6a2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	430a      	orrs	r2, r1
 800a6b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b6:	f003 0320 	and.w	r3, r3, #32
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00a      	beq.n	800a6d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	430a      	orrs	r2, r1
 800a6d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d01a      	beq.n	800a716 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	685b      	ldr	r3, [r3, #4]
 800a6e6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	430a      	orrs	r2, r1
 800a6f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a6fe:	d10a      	bne.n	800a716 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	430a      	orrs	r2, r1
 800a714:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d00a      	beq.n	800a738 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	685b      	ldr	r3, [r3, #4]
 800a728:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	430a      	orrs	r2, r1
 800a736:	605a      	str	r2, [r3, #4]
  }
}
 800a738:	bf00      	nop
 800a73a:	370c      	adds	r7, #12
 800a73c:	46bd      	mov	sp, r7
 800a73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a742:	4770      	bx	lr

0800a744 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b086      	sub	sp, #24
 800a748:	af02      	add	r7, sp, #8
 800a74a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2200      	movs	r2, #0
 800a750:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a752:	f7f6 f9f1 	bl	8000b38 <HAL_GetTick>
 800a756:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f003 0308 	and.w	r3, r3, #8
 800a762:	2b08      	cmp	r3, #8
 800a764:	d10e      	bne.n	800a784 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a766:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a76a:	9300      	str	r3, [sp, #0]
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2200      	movs	r2, #0
 800a770:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a774:	6878      	ldr	r0, [r7, #4]
 800a776:	f000 f814 	bl	800a7a2 <UART_WaitOnFlagUntilTimeout>
 800a77a:	4603      	mov	r3, r0
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d001      	beq.n	800a784 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a780:	2303      	movs	r3, #3
 800a782:	e00a      	b.n	800a79a <UART_CheckIdleState+0x56>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	2220      	movs	r2, #32
 800a788:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	2220      	movs	r2, #32
 800a78e:	679a      	str	r2, [r3, #120]	; 0x78

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a798:	2300      	movs	r3, #0
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3710      	adds	r7, #16
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}

0800a7a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800a7a2:	b580      	push	{r7, lr}
 800a7a4:	b084      	sub	sp, #16
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	60f8      	str	r0, [r7, #12]
 800a7aa:	60b9      	str	r1, [r7, #8]
 800a7ac:	603b      	str	r3, [r7, #0]
 800a7ae:	4613      	mov	r3, r2
 800a7b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7b2:	e02a      	b.n	800a80a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7b4:	69bb      	ldr	r3, [r7, #24]
 800a7b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ba:	d026      	beq.n	800a80a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7bc:	f7f6 f9bc 	bl	8000b38 <HAL_GetTick>
 800a7c0:	4602      	mov	r2, r0
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	1ad3      	subs	r3, r2, r3
 800a7c6:	69ba      	ldr	r2, [r7, #24]
 800a7c8:	429a      	cmp	r2, r3
 800a7ca:	d302      	bcc.n	800a7d2 <UART_WaitOnFlagUntilTimeout+0x30>
 800a7cc:	69bb      	ldr	r3, [r7, #24]
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d11b      	bne.n	800a80a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a7e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	689a      	ldr	r2, [r3, #8]
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f022 0201 	bic.w	r2, r2, #1
 800a7f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2220      	movs	r2, #32
 800a7f6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2220      	movs	r2, #32
 800a7fc:	679a      	str	r2, [r3, #120]	; 0x78

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	2200      	movs	r2, #0
 800a802:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a806:	2303      	movs	r3, #3
 800a808:	e00f      	b.n	800a82a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	69da      	ldr	r2, [r3, #28]
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	4013      	ands	r3, r2
 800a814:	68ba      	ldr	r2, [r7, #8]
 800a816:	429a      	cmp	r2, r3
 800a818:	bf0c      	ite	eq
 800a81a:	2301      	moveq	r3, #1
 800a81c:	2300      	movne	r3, #0
 800a81e:	b2db      	uxtb	r3, r3
 800a820:	461a      	mov	r2, r3
 800a822:	79fb      	ldrb	r3, [r7, #7]
 800a824:	429a      	cmp	r2, r3
 800a826:	d0c5      	beq.n	800a7b4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a828:	2300      	movs	r3, #0
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3710      	adds	r7, #16
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
	...

0800a834 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800a834:	b480      	push	{r7}
 800a836:	b085      	sub	sp, #20
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800a83e:	2300      	movs	r3, #0
 800a840:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800a842:	2300      	movs	r3, #0
 800a844:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800a846:	683b      	ldr	r3, [r7, #0]
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	2b01      	cmp	r3, #1
 800a84c:	d027      	beq.n	800a89e <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a854:	68fa      	ldr	r2, [r7, #12]
 800a856:	4b2f      	ldr	r3, [pc, #188]	; (800a914 <FMC_SDRAM_Init+0xe0>)
 800a858:	4013      	ands	r3, r2
 800a85a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a85c:	683b      	ldr	r3, [r7, #0]
 800a85e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a864:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800a86a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800a870:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800a876:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800a87c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800a882:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800a888:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a88e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a890:	68fa      	ldr	r2, [r7, #12]
 800a892:	4313      	orrs	r3, r2
 800a894:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	68fa      	ldr	r2, [r7, #12]
 800a89a:	601a      	str	r2, [r3, #0]
 800a89c:	e032      	b.n	800a904 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a8aa:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a8b4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800a8ba:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800a8bc:	68fa      	ldr	r2, [r7, #12]
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	685b      	ldr	r3, [r3, #4]
 800a8c6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800a8c8:	68ba      	ldr	r2, [r7, #8]
 800a8ca:	4b12      	ldr	r3, [pc, #72]	; (800a914 <FMC_SDRAM_Init+0xe0>)
 800a8cc:	4013      	ands	r3, r2
 800a8ce:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a8d0:	683b      	ldr	r3, [r7, #0]
 800a8d2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a8d8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800a8de:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800a8e4:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800a8ea:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800a8f0:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800a8f2:	68ba      	ldr	r2, [r7, #8]
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	68fa      	ldr	r2, [r7, #12]
 800a8fc:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	68ba      	ldr	r2, [r7, #8]
 800a902:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800a904:	2300      	movs	r3, #0
}
 800a906:	4618      	mov	r0, r3
 800a908:	3714      	adds	r7, #20
 800a90a:	46bd      	mov	sp, r7
 800a90c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a910:	4770      	bx	lr
 800a912:	bf00      	nop
 800a914:	ffff8000 	.word	0xffff8000

0800a918 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800a918:	b480      	push	{r7}
 800a91a:	b087      	sub	sp, #28
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	60f8      	str	r0, [r7, #12]
 800a920:	60b9      	str	r1, [r7, #8]
 800a922:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800a924:	2300      	movs	r3, #0
 800a926:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800a928:	2300      	movs	r3, #0
 800a92a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2b01      	cmp	r3, #1
 800a930:	d02e      	beq.n	800a990 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a938:	697b      	ldr	r3, [r7, #20]
 800a93a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a93e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a940:	68bb      	ldr	r3, [r7, #8]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a946:	68bb      	ldr	r3, [r7, #8]
 800a948:	685b      	ldr	r3, [r3, #4]
 800a94a:	3b01      	subs	r3, #1
 800a94c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a94e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	689b      	ldr	r3, [r3, #8]
 800a954:	3b01      	subs	r3, #1
 800a956:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800a958:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a95a:	68bb      	ldr	r3, [r7, #8]
 800a95c:	68db      	ldr	r3, [r3, #12]
 800a95e:	3b01      	subs	r3, #1
 800a960:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800a962:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	691b      	ldr	r3, [r3, #16]
 800a968:	3b01      	subs	r3, #1
 800a96a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800a96c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	695b      	ldr	r3, [r3, #20]
 800a972:	3b01      	subs	r3, #1
 800a974:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800a976:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800a978:	68bb      	ldr	r3, [r7, #8]
 800a97a:	699b      	ldr	r3, [r3, #24]
 800a97c:	3b01      	subs	r3, #1
 800a97e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a980:	4313      	orrs	r3, r2
 800a982:	697a      	ldr	r2, [r7, #20]
 800a984:	4313      	orrs	r3, r2
 800a986:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	697a      	ldr	r2, [r7, #20]
 800a98c:	609a      	str	r2, [r3, #8]
 800a98e:	e039      	b.n	800aa04 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	689b      	ldr	r3, [r3, #8]
 800a994:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800a996:	697a      	ldr	r2, [r7, #20]
 800a998:	4b1e      	ldr	r3, [pc, #120]	; (800aa14 <FMC_SDRAM_Timing_Init+0xfc>)
 800a99a:	4013      	ands	r3, r2
 800a99c:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a99e:	68bb      	ldr	r3, [r7, #8]
 800a9a0:	68db      	ldr	r3, [r3, #12]
 800a9a2:	3b01      	subs	r3, #1
 800a9a4:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800a9a6:	68bb      	ldr	r3, [r7, #8]
 800a9a8:	695b      	ldr	r3, [r3, #20]
 800a9aa:	3b01      	subs	r3, #1
 800a9ac:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800a9ae:	4313      	orrs	r3, r2
 800a9b0:	697a      	ldr	r2, [r7, #20]
 800a9b2:	4313      	orrs	r3, r2
 800a9b4:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	68db      	ldr	r3, [r3, #12]
 800a9ba:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800a9bc:	693b      	ldr	r3, [r7, #16]
 800a9be:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800a9c2:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	685b      	ldr	r3, [r3, #4]
 800a9ce:	3b01      	subs	r3, #1
 800a9d0:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a9d2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	689b      	ldr	r3, [r3, #8]
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800a9dc:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	691b      	ldr	r3, [r3, #16]
 800a9e2:	3b01      	subs	r3, #1
 800a9e4:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800a9e6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	699b      	ldr	r3, [r3, #24]
 800a9ec:	3b01      	subs	r3, #1
 800a9ee:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800a9f0:	4313      	orrs	r3, r2
 800a9f2:	693a      	ldr	r2, [r7, #16]
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	697a      	ldr	r2, [r7, #20]
 800a9fc:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	693a      	ldr	r2, [r7, #16]
 800aa02:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800aa04:	2300      	movs	r3, #0
}
 800aa06:	4618      	mov	r0, r3
 800aa08:	371c      	adds	r7, #28
 800aa0a:	46bd      	mov	sp, r7
 800aa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa10:	4770      	bx	lr
 800aa12:	bf00      	nop
 800aa14:	ff0f0fff 	.word	0xff0f0fff

0800aa18 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b087      	sub	sp, #28
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	60b9      	str	r1, [r7, #8]
 800aa22:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800aa24:	2300      	movs	r3, #0
 800aa26:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800aa28:	68bb      	ldr	r3, [r7, #8]
 800aa2a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800aa2c:	68bb      	ldr	r3, [r7, #8]
 800aa2e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800aa30:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	689b      	ldr	r3, [r3, #8]
 800aa36:	3b01      	subs	r3, #1
 800aa38:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800aa3a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	68db      	ldr	r3, [r3, #12]
 800aa40:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800aa42:	4313      	orrs	r3, r2
 800aa44:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800aa46:	697a      	ldr	r2, [r7, #20]
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800aa4c:	2300      	movs	r3, #0
}
 800aa4e:	4618      	mov	r0, r3
 800aa50:	371c      	adds	r7, #28
 800aa52:	46bd      	mov	sp, r7
 800aa54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa58:	4770      	bx	lr

0800aa5a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800aa5a:	b480      	push	{r7}
 800aa5c:	b083      	sub	sp, #12
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
 800aa62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	695a      	ldr	r2, [r3, #20]
 800aa68:	683b      	ldr	r3, [r7, #0]
 800aa6a:	005b      	lsls	r3, r3, #1
 800aa6c:	431a      	orrs	r2, r3
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800aa72:	2300      	movs	r3, #0
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <SDMMC_Init>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  Init SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800aa80:	b084      	sub	sp, #16
 800aa82:	b480      	push	{r7}
 800aa84:	b085      	sub	sp, #20
 800aa86:	af00      	add	r7, sp, #0
 800aa88:	6078      	str	r0, [r7, #4]
 800aa8a:	f107 001c 	add.w	r0, r7, #28
 800aa8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800aa92:	2300      	movs	r3, #0
 800aa94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800aa96:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800aa98:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800aa9a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800aa9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800aa9e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800aaa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800aaa2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800aaa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800aaa6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800aaa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800aaaa:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	4313      	orrs	r3, r2
 800aab0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	685a      	ldr	r2, [r3, #4]
 800aab6:	4b07      	ldr	r3, [pc, #28]	; (800aad4 <SDMMC_Init+0x54>)
 800aab8:	4013      	ands	r3, r2
 800aaba:	68fa      	ldr	r2, [r7, #12]
 800aabc:	431a      	orrs	r2, r3
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800aac2:	2300      	movs	r3, #0
}
 800aac4:	4618      	mov	r0, r3
 800aac6:	3714      	adds	r7, #20
 800aac8:	46bd      	mov	sp, r7
 800aaca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aace:	b004      	add	sp, #16
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop
 800aad4:	ffff8100 	.word	0xffff8100

0800aad8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800aad8:	b480      	push	{r7}
 800aada:	b083      	sub	sp, #12
 800aadc:	af00      	add	r7, sp, #0
 800aade:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800aae6:	4618      	mov	r0, r3
 800aae8:	370c      	adds	r7, #12
 800aaea:	46bd      	mov	sp, r7
 800aaec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf0:	4770      	bx	lr

0800aaf2 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800aaf2:	b480      	push	{r7}
 800aaf4:	b083      	sub	sp, #12
 800aaf6:	af00      	add	r7, sp, #0
 800aaf8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	2203      	movs	r2, #3
 800aafe:	601a      	str	r2, [r3, #0]
  
  return HAL_OK; 
 800ab00:	2300      	movs	r3, #0
}
 800ab02:	4618      	mov	r0, r3
 800ab04:	370c      	adds	r7, #12
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr

0800ab0e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800ab0e:	b480      	push	{r7}
 800ab10:	b083      	sub	sp, #12
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	f003 0303 	and.w	r3, r3, #3
}
 800ab1e:	4618      	mov	r0, r3
 800ab20:	370c      	adds	r7, #12
 800ab22:	46bd      	mov	sp, r7
 800ab24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab28:	4770      	bx	lr
	...

0800ab2c <SDMMC_SendCommand>:
  * @param  Command pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b085      	sub	sp, #20
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ab36:	2300      	movs	r3, #0
 800ab38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ab3a:	683b      	ldr	r3, [r7, #0]
 800ab3c:	681a      	ldr	r2, [r3, #0]
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab4a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ab50:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ab56:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	4313      	orrs	r3, r2
 800ab5c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	68da      	ldr	r2, [r3, #12]
 800ab62:	4b06      	ldr	r3, [pc, #24]	; (800ab7c <SDMMC_SendCommand+0x50>)
 800ab64:	4013      	ands	r3, r2
 800ab66:	68fa      	ldr	r2, [r7, #12]
 800ab68:	431a      	orrs	r2, r3
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ab6e:	2300      	movs	r3, #0
}
 800ab70:	4618      	mov	r0, r3
 800ab72:	3714      	adds	r7, #20
 800ab74:	46bd      	mov	sp, r7
 800ab76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab7a:	4770      	bx	lr
 800ab7c:	fffff000 	.word	0xfffff000

0800ab80 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800ab80:	b480      	push	{r7}
 800ab82:	b083      	sub	sp, #12
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	691b      	ldr	r3, [r3, #16]
 800ab8c:	b2db      	uxtb	r3, r3
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	370c      	adds	r7, #12
 800ab92:	46bd      	mov	sp, r7
 800ab94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab98:	4770      	bx	lr

0800ab9a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800ab9a:	b480      	push	{r7}
 800ab9c:	b085      	sub	sp, #20
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	6078      	str	r0, [r7, #4]
 800aba2:	6039      	str	r1, [r7, #0]
  __IO uint32_t tmp = 0;
 800aba4:	2300      	movs	r3, #0
 800aba6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)&(SDMMCx->RESP1) + Response;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	3314      	adds	r3, #20
 800abac:	461a      	mov	r2, r3
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	4413      	add	r3, r2
 800abb2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	681b      	ldr	r3, [r3, #0]
}  
 800abb8:	4618      	mov	r0, r3
 800abba:	3714      	adds	r7, #20
 800abbc:	46bd      	mov	sp, r7
 800abbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc2:	4770      	bx	lr

0800abc4 <SDMMC_ConfigData>:
  * @param  Data  pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800abc4:	b480      	push	{r7}
 800abc6:	b085      	sub	sp, #20
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800abce:	2300      	movs	r3, #0
 800abd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	681a      	ldr	r2, [r3, #0]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800abda:	683b      	ldr	r3, [r7, #0]
 800abdc:	685a      	ldr	r2, [r3, #4]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800abea:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800abec:	683b      	ldr	r3, [r7, #0]
 800abee:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800abf0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800abf6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800abf8:	68fa      	ldr	r2, [r7, #12]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac02:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	431a      	orrs	r2, r3
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ac0e:	2300      	movs	r3, #0

}
 800ac10:	4618      	mov	r0, r3
 800ac12:	3714      	adds	r7, #20
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr

0800ac1c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b088      	sub	sp, #32
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ac26:	2300      	movs	r3, #0
 800ac28:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ac2a:	683b      	ldr	r3, [r7, #0]
 800ac2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ac2e:	2310      	movs	r3, #16
 800ac30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac32:	2340      	movs	r3, #64	; 0x40
 800ac34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac36:	2300      	movs	r3, #0
 800ac38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac3e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac40:	f107 0308 	add.w	r3, r7, #8
 800ac44:	4619      	mov	r1, r3
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f7ff ff70 	bl	800ab2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ac4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac50:	2110      	movs	r1, #16
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f000 fa64 	bl	800b120 <SDMMC_GetCmdResp1>
 800ac58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac5a:	69fb      	ldr	r3, [r7, #28]
}
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	3720      	adds	r7, #32
 800ac60:	46bd      	mov	sp, r7
 800ac62:	bd80      	pop	{r7, pc}

0800ac64 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ac64:	b580      	push	{r7, lr}
 800ac66:	b088      	sub	sp, #32
 800ac68:	af00      	add	r7, sp, #0
 800ac6a:	6078      	str	r0, [r7, #4]
 800ac6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ac76:	2311      	movs	r3, #17
 800ac78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac7a:	2340      	movs	r3, #64	; 0x40
 800ac7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac7e:	2300      	movs	r3, #0
 800ac80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ac86:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac88:	f107 0308 	add.w	r3, r7, #8
 800ac8c:	4619      	mov	r1, r3
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f7ff ff4c 	bl	800ab2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ac94:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac98:	2111      	movs	r1, #17
 800ac9a:	6878      	ldr	r0, [r7, #4]
 800ac9c:	f000 fa40 	bl	800b120 <SDMMC_GetCmdResp1>
 800aca0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aca2:	69fb      	ldr	r3, [r7, #28]
}
 800aca4:	4618      	mov	r0, r3
 800aca6:	3720      	adds	r7, #32
 800aca8:	46bd      	mov	sp, r7
 800acaa:	bd80      	pop	{r7, pc}

0800acac <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b088      	sub	sp, #32
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800acb6:	2300      	movs	r3, #0
 800acb8:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800acbe:	2312      	movs	r3, #18
 800acc0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acc2:	2340      	movs	r3, #64	; 0x40
 800acc4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acc6:	2300      	movs	r3, #0
 800acc8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800acce:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acd0:	f107 0308 	add.w	r3, r7, #8
 800acd4:	4619      	mov	r1, r3
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f7ff ff28 	bl	800ab2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800acdc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ace0:	2112      	movs	r1, #18
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 fa1c 	bl	800b120 <SDMMC_GetCmdResp1>
 800ace8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acea:	69fb      	ldr	r3, [r7, #28]
}
 800acec:	4618      	mov	r0, r3
 800acee:	3720      	adds	r7, #32
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b088      	sub	sp, #32
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800acfe:	2300      	movs	r3, #0
 800ad00:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ad06:	2318      	movs	r3, #24
 800ad08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad0a:	2340      	movs	r3, #64	; 0x40
 800ad0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad16:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad18:	f107 0308 	add.w	r3, r7, #8
 800ad1c:	4619      	mov	r1, r3
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f7ff ff04 	bl	800ab2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ad24:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad28:	2118      	movs	r1, #24
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 f9f8 	bl	800b120 <SDMMC_GetCmdResp1>
 800ad30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad32:	69fb      	ldr	r3, [r7, #28]
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3720      	adds	r7, #32
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b088      	sub	sp, #32
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ad46:	2300      	movs	r3, #0
 800ad48:	61fb      	str	r3, [r7, #28]
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ad4e:	2319      	movs	r3, #25
 800ad50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad52:	2340      	movs	r3, #64	; 0x40
 800ad54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad56:	2300      	movs	r3, #0
 800ad58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad5e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad60:	f107 0308 	add.w	r3, r7, #8
 800ad64:	4619      	mov	r1, r3
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f7ff fee0 	bl	800ab2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ad6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad70:	2119      	movs	r1, #25
 800ad72:	6878      	ldr	r0, [r7, #4]
 800ad74:	f000 f9d4 	bl	800b120 <SDMMC_GetCmdResp1>
 800ad78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad7a:	69fb      	ldr	r3, [r7, #28]
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3720      	adds	r7, #32
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}

0800ad84 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b088      	sub	sp, #32
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0;
 800ad90:	2300      	movs	r3, #0
 800ad92:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ad94:	230c      	movs	r3, #12
 800ad96:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad98:	2340      	movs	r3, #64	; 0x40
 800ad9a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ada0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ada4:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ada6:	f107 0308 	add.w	r3, r7, #8
 800adaa:	4619      	mov	r1, r3
 800adac:	6878      	ldr	r0, [r7, #4]
 800adae:	f7ff febd 	bl	800ab2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, 100000000/*SDMMC_CMDTIMEOUT*/);
 800adb2:	4a05      	ldr	r2, [pc, #20]	; (800adc8 <SDMMC_CmdStopTransfer+0x44>)
 800adb4:	210c      	movs	r1, #12
 800adb6:	6878      	ldr	r0, [r7, #4]
 800adb8:	f000 f9b2 	bl	800b120 <SDMMC_GetCmdResp1>
 800adbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adbe:	69fb      	ldr	r3, [r7, #28]
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	3720      	adds	r7, #32
 800adc4:	46bd      	mov	sp, r7
 800adc6:	bd80      	pop	{r7, pc}
 800adc8:	05f5e100 	.word	0x05f5e100

0800adcc <SDMMC_CmdSelDesel>:
  * @param  SDMMCx Pointer to SDMMC register base 
  * @param  addr Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b08a      	sub	sp, #40	; 0x28
 800add0:	af00      	add	r7, sp, #0
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800add8:	2300      	movs	r3, #0
 800adda:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800addc:	683b      	ldr	r3, [r7, #0]
 800adde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800ade0:	2307      	movs	r3, #7
 800ade2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ade4:	2340      	movs	r3, #64	; 0x40
 800ade6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ade8:	2300      	movs	r3, #0
 800adea:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adf0:	623b      	str	r3, [r7, #32]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adf2:	f107 0310 	add.w	r3, r7, #16
 800adf6:	4619      	mov	r1, r3
 800adf8:	68f8      	ldr	r0, [r7, #12]
 800adfa:	f7ff fe97 	bl	800ab2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800adfe:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae02:	2107      	movs	r1, #7
 800ae04:	68f8      	ldr	r0, [r7, #12]
 800ae06:	f000 f98b 	bl	800b120 <SDMMC_GetCmdResp1>
 800ae0a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800ae0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae0e:	4618      	mov	r0, r3
 800ae10:	3728      	adds	r7, #40	; 0x28
 800ae12:	46bd      	mov	sp, r7
 800ae14:	bd80      	pop	{r7, pc}

0800ae16 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800ae16:	b580      	push	{r7, lr}
 800ae18:	b088      	sub	sp, #32
 800ae1a:	af00      	add	r7, sp, #0
 800ae1c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ae1e:	2300      	movs	r3, #0
 800ae20:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = 0;
 800ae22:	2300      	movs	r3, #0
 800ae24:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800ae26:	2300      	movs	r3, #0
 800ae28:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae2e:	2300      	movs	r3, #0
 800ae30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae36:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae38:	f107 0308 	add.w	r3, r7, #8
 800ae3c:	4619      	mov	r1, r3
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f7ff fe74 	bl	800ab2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ae44:	6878      	ldr	r0, [r7, #4]
 800ae46:	f000 f941 	bl	800b0cc <SDMMC_GetCmdError>
 800ae4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae4c:	69fb      	ldr	r3, [r7, #28]
}
 800ae4e:	4618      	mov	r0, r3
 800ae50:	3720      	adds	r7, #32
 800ae52:	46bd      	mov	sp, r7
 800ae54:	bd80      	pop	{r7, pc}

0800ae56 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ae56:	b580      	push	{r7, lr}
 800ae58:	b088      	sub	sp, #32
 800ae5a:	af00      	add	r7, sp, #0
 800ae5c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	61fb      	str	r3, [r7, #28]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ae62:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ae66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ae68:	2308      	movs	r3, #8
 800ae6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae6c:	2340      	movs	r3, #64	; 0x40
 800ae6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae70:	2300      	movs	r3, #0
 800ae72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae78:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae7a:	f107 0308 	add.w	r3, r7, #8
 800ae7e:	4619      	mov	r1, r3
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f7ff fe53 	bl	800ab2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f000 fb12 	bl	800b4b0 <SDMMC_GetCmdResp7>
 800ae8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae8e:	69fb      	ldr	r3, [r7, #28]
}
 800ae90:	4618      	mov	r0, r3
 800ae92:	3720      	adds	r7, #32
 800ae94:	46bd      	mov	sp, r7
 800ae96:	bd80      	pop	{r7, pc}

0800ae98 <SDMMC_CmdAppCommand>:
  *         and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ae98:	b580      	push	{r7, lr}
 800ae9a:	b088      	sub	sp, #32
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
 800aea0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800aea2:	2300      	movs	r3, #0
 800aea4:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800aeaa:	2337      	movs	r3, #55	; 0x37
 800aeac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aeae:	2340      	movs	r3, #64	; 0x40
 800aeb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aeb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeba:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aebc:	f107 0308 	add.w	r3, r7, #8
 800aec0:	4619      	mov	r1, r3
 800aec2:	6878      	ldr	r0, [r7, #4]
 800aec4:	f7ff fe32 	bl	800ab2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800aec8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aecc:	2137      	movs	r1, #55	; 0x37
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f000 f926 	bl	800b120 <SDMMC_GetCmdResp1>
 800aed4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aed6:	69fb      	ldr	r3, [r7, #28]
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3720      	adds	r7, #32
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}

0800aee0 <SDMMC_CmdAppOperCommand>:
  *         condition register (OCR)
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t SdType)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b088      	sub	sp, #32
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	6078      	str	r0, [r7, #4]
 800aee8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800aeea:	2300      	movs	r3, #0
 800aeec:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | SdType;
 800aeee:	683a      	ldr	r2, [r7, #0]
 800aef0:	4b0d      	ldr	r3, [pc, #52]	; (800af28 <SDMMC_CmdAppOperCommand+0x48>)
 800aef2:	4313      	orrs	r3, r2
 800aef4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800aef6:	2329      	movs	r3, #41	; 0x29
 800aef8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aefa:	2340      	movs	r3, #64	; 0x40
 800aefc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aefe:	2300      	movs	r3, #0
 800af00:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af06:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af08:	f107 0308 	add.w	r3, r7, #8
 800af0c:	4619      	mov	r1, r3
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	f7ff fe0c 	bl	800ab2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800af14:	6878      	ldr	r0, [r7, #4]
 800af16:	f000 fa29 	bl	800b36c <SDMMC_GetCmdResp3>
 800af1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af1c:	69fb      	ldr	r3, [r7, #28]
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3720      	adds	r7, #32
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	80100000 	.word	0x80100000

0800af2c <SDMMC_CmdBusWidth>:
  * @brief  Send the Bus Width command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800af2c:	b580      	push	{r7, lr}
 800af2e:	b088      	sub	sp, #32
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
 800af34:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800af36:	2300      	movs	r3, #0
 800af38:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800af3a:	683b      	ldr	r3, [r7, #0]
 800af3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800af3e:	2306      	movs	r3, #6
 800af40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af42:	2340      	movs	r3, #64	; 0x40
 800af44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af46:	2300      	movs	r3, #0
 800af48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af4e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af50:	f107 0308 	add.w	r3, r7, #8
 800af54:	4619      	mov	r1, r3
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f7ff fde8 	bl	800ab2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800af5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800af60:	2106      	movs	r1, #6
 800af62:	6878      	ldr	r0, [r7, #4]
 800af64:	f000 f8dc 	bl	800b120 <SDMMC_GetCmdResp1>
 800af68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af6a:	69fb      	ldr	r3, [r7, #28]
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3720      	adds	r7, #32
 800af70:	46bd      	mov	sp, r7
 800af72:	bd80      	pop	{r7, pc}

0800af74 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b088      	sub	sp, #32
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800af7c:	2300      	movs	r3, #0
 800af7e:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0;
 800af80:	2300      	movs	r3, #0
 800af82:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800af84:	2333      	movs	r3, #51	; 0x33
 800af86:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af88:	2340      	movs	r3, #64	; 0x40
 800af8a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af8c:	2300      	movs	r3, #0
 800af8e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af94:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af96:	f107 0308 	add.w	r3, r7, #8
 800af9a:	4619      	mov	r1, r3
 800af9c:	6878      	ldr	r0, [r7, #4]
 800af9e:	f7ff fdc5 	bl	800ab2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800afa2:	f241 3288 	movw	r2, #5000	; 0x1388
 800afa6:	2133      	movs	r1, #51	; 0x33
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 f8b9 	bl	800b120 <SDMMC_GetCmdResp1>
 800afae:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afb0:	69fb      	ldr	r3, [r7, #28]
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3720      	adds	r7, #32
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}

0800afba <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800afba:	b580      	push	{r7, lr}
 800afbc:	b088      	sub	sp, #32
 800afbe:	af00      	add	r7, sp, #0
 800afc0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800afc2:	2300      	movs	r3, #0
 800afc4:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0;
 800afc6:	2300      	movs	r3, #0
 800afc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800afca:	2302      	movs	r3, #2
 800afcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800afce:	23c0      	movs	r3, #192	; 0xc0
 800afd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afd2:	2300      	movs	r3, #0
 800afd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afda:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afdc:	f107 0308 	add.w	r3, r7, #8
 800afe0:	4619      	mov	r1, r3
 800afe2:	6878      	ldr	r0, [r7, #4]
 800afe4:	f7ff fda2 	bl	800ab2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 f97f 	bl	800b2ec <SDMMC_GetCmdResp2>
 800afee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aff0:	69fb      	ldr	r3, [r7, #28]
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3720      	adds	r7, #32
 800aff6:	46bd      	mov	sp, r7
 800aff8:	bd80      	pop	{r7, pc}

0800affa <SDMMC_CmdSendCSD>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800affa:	b580      	push	{r7, lr}
 800affc:	b088      	sub	sp, #32
 800affe:	af00      	add	r7, sp, #0
 800b000:	6078      	str	r0, [r7, #4]
 800b002:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b004:	2300      	movs	r3, #0
 800b006:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b008:	683b      	ldr	r3, [r7, #0]
 800b00a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b00c:	2309      	movs	r3, #9
 800b00e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b010:	23c0      	movs	r3, #192	; 0xc0
 800b012:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b014:	2300      	movs	r3, #0
 800b016:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b018:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b01c:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b01e:	f107 0308 	add.w	r3, r7, #8
 800b022:	4619      	mov	r1, r3
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f7ff fd81 	bl	800ab2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	f000 f95e 	bl	800b2ec <SDMMC_GetCmdResp2>
 800b030:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b032:	69fb      	ldr	r3, [r7, #28]
}
 800b034:	4618      	mov	r0, r3
 800b036:	3720      	adds	r7, #32
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <SDMMC_CmdSetRelAdd>:
  * @brief  Send the Send CSD command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b088      	sub	sp, #32
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
 800b044:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b046:	2300      	movs	r3, #0
 800b048:	61fb      	str	r3, [r7, #28]
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0;
 800b04a:	2300      	movs	r3, #0
 800b04c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b04e:	2303      	movs	r3, #3
 800b050:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b052:	2340      	movs	r3, #64	; 0x40
 800b054:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b056:	2300      	movs	r3, #0
 800b058:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b05a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b05e:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b060:	f107 0308 	add.w	r3, r7, #8
 800b064:	4619      	mov	r1, r3
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f7ff fd60 	bl	800ab2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b06c:	683a      	ldr	r2, [r7, #0]
 800b06e:	2103      	movs	r1, #3
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 f9af 	bl	800b3d4 <SDMMC_GetCmdResp6>
 800b076:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b078:	69fb      	ldr	r3, [r7, #28]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3720      	adds	r7, #32
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}

0800b082 <SDMMC_CmdSendStatus>:
  * @brief  Send the Status command and check the response.
  * @param  SDMMCx Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b082:	b580      	push	{r7, lr}
 800b084:	b088      	sub	sp, #32
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
 800b08a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate = SDMMC_ERROR_NONE;
 800b08c:	2300      	movs	r3, #0
 800b08e:	61fb      	str	r3, [r7, #28]
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b090:	683b      	ldr	r3, [r7, #0]
 800b092:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b094:	230d      	movs	r3, #13
 800b096:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b098:	2340      	movs	r3, #64	; 0x40
 800b09a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b09c:	2300      	movs	r3, #0
 800b09e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0a4:	61bb      	str	r3, [r7, #24]
  SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0a6:	f107 0308 	add.w	r3, r7, #8
 800b0aa:	4619      	mov	r1, r3
 800b0ac:	6878      	ldr	r0, [r7, #4]
 800b0ae:	f7ff fd3d 	bl	800ab2c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b0b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0b6:	210d      	movs	r1, #13
 800b0b8:	6878      	ldr	r0, [r7, #4]
 800b0ba:	f000 f831 	bl	800b120 <SDMMC_GetCmdResp1>
 800b0be:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0c0:	69fb      	ldr	r3, [r7, #28]
}
 800b0c2:	4618      	mov	r0, r3
 800b0c4:	3720      	adds	r7, #32
 800b0c6:	46bd      	mov	sp, r7
 800b0c8:	bd80      	pop	{r7, pc}
	...

0800b0cc <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b0cc:	b490      	push	{r4, r7}
 800b0ce:	b082      	sub	sp, #8
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800b0d4:	4b10      	ldr	r3, [pc, #64]	; (800b118 <SDMMC_GetCmdError+0x4c>)
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	4a10      	ldr	r2, [pc, #64]	; (800b11c <SDMMC_GetCmdError+0x50>)
 800b0da:	fba2 2303 	umull	r2, r3, r2, r3
 800b0de:	0a5b      	lsrs	r3, r3, #9
 800b0e0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b0e4:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b0e8:	4623      	mov	r3, r4
 800b0ea:	1e5c      	subs	r4, r3, #1
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d102      	bne.n	800b0f6 <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b0f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b0f4:	e00a      	b.n	800b10c <SDMMC_GetCmdError+0x40>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b0fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d0f2      	beq.n	800b0e8 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b108:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b10a:	2300      	movs	r3, #0
}
 800b10c:	4618      	mov	r0, r3
 800b10e:	3708      	adds	r7, #8
 800b110:	46bd      	mov	sp, r7
 800b112:	bc90      	pop	{r4, r7}
 800b114:	4770      	bx	lr
 800b116:	bf00      	nop
 800b118:	20000070 	.word	0x20000070
 800b11c:	10624dd3 	.word	0x10624dd3

0800b120 <SDMMC_GetCmdResp1>:
  * @param  hsd SD handle
  * @param  SD_CMD The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b120:	b590      	push	{r4, r7, lr}
 800b122:	b087      	sub	sp, #28
 800b124:	af00      	add	r7, sp, #0
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	460b      	mov	r3, r1
 800b12a:	607a      	str	r2, [r7, #4]
 800b12c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8 /1000);
 800b12e:	4b6c      	ldr	r3, [pc, #432]	; (800b2e0 <SDMMC_GetCmdResp1+0x1c0>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a6c      	ldr	r2, [pc, #432]	; (800b2e4 <SDMMC_GetCmdResp1+0x1c4>)
 800b134:	fba2 2303 	umull	r2, r3, r2, r3
 800b138:	0a5b      	lsrs	r3, r3, #9
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b140:	4623      	mov	r3, r4
 800b142:	1e5c      	subs	r4, r3, #1
 800b144:	2b00      	cmp	r3, #0
 800b146:	d102      	bne.n	800b14e <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b148:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b14c:	e0c3      	b.n	800b2d6 <SDMMC_GetCmdResp1+0x1b6>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b152:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b156:	2b00      	cmp	r3, #0
 800b158:	d0f2      	beq.n	800b140 <SDMMC_GetCmdResp1+0x20>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b15e:	f003 0304 	and.w	r3, r3, #4
 800b162:	2b00      	cmp	r3, #0
 800b164:	d004      	beq.n	800b170 <SDMMC_GetCmdResp1+0x50>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	2204      	movs	r2, #4
 800b16a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b16c:	2304      	movs	r3, #4
 800b16e:	e0b2      	b.n	800b2d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b174:	f003 0301 	and.w	r3, r3, #1
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d004      	beq.n	800b186 <SDMMC_GetCmdResp1+0x66>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	2201      	movs	r2, #1
 800b180:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b182:	2301      	movs	r3, #1
 800b184:	e0a7      	b.n	800b2d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b186:	68f8      	ldr	r0, [r7, #12]
 800b188:	f7ff fcfa 	bl	800ab80 <SDMMC_GetCommandResponse>
 800b18c:	4603      	mov	r3, r0
 800b18e:	461a      	mov	r2, r3
 800b190:	7afb      	ldrb	r3, [r7, #11]
 800b192:	4293      	cmp	r3, r2
 800b194:	d001      	beq.n	800b19a <SDMMC_GetCmdResp1+0x7a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b196:	2301      	movs	r3, #1
 800b198:	e09d      	b.n	800b2d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b1a0:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b1a2:	2100      	movs	r1, #0
 800b1a4:	68f8      	ldr	r0, [r7, #12]
 800b1a6:	f7ff fcf8 	bl	800ab9a <SDMMC_GetResponse>
 800b1aa:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b1ac:	697a      	ldr	r2, [r7, #20]
 800b1ae:	4b4e      	ldr	r3, [pc, #312]	; (800b2e8 <SDMMC_GetCmdResp1+0x1c8>)
 800b1b0:	4013      	ands	r3, r2
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d101      	bne.n	800b1ba <SDMMC_GetCmdResp1+0x9a>
  {
    return SDMMC_ERROR_NONE;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	e08d      	b.n	800b2d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	da02      	bge.n	800b1c6 <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b1c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b1c4:	e087      	b.n	800b2d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d001      	beq.n	800b1d4 <SDMMC_GetCmdResp1+0xb4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b1d0:	2340      	movs	r3, #64	; 0x40
 800b1d2:	e080      	b.n	800b2d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d001      	beq.n	800b1e2 <SDMMC_GetCmdResp1+0xc2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b1de:	2380      	movs	r3, #128	; 0x80
 800b1e0:	e079      	b.n	800b2d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d002      	beq.n	800b1f2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b1ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b1f0:	e071      	b.n	800b2d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d002      	beq.n	800b202 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b1fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b200:	e069      	b.n	800b2d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b202:	697b      	ldr	r3, [r7, #20]
 800b204:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d002      	beq.n	800b212 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b20c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b210:	e061      	b.n	800b2d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b212:	697b      	ldr	r3, [r7, #20]
 800b214:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d002      	beq.n	800b222 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b21c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b220:	e059      	b.n	800b2d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b222:	697b      	ldr	r3, [r7, #20]
 800b224:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b228:	2b00      	cmp	r3, #0
 800b22a:	d002      	beq.n	800b232 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b22c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b230:	e051      	b.n	800b2d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b232:	697b      	ldr	r3, [r7, #20]
 800b234:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d002      	beq.n	800b242 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b23c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b240:	e049      	b.n	800b2d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b242:	697b      	ldr	r3, [r7, #20]
 800b244:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d002      	beq.n	800b252 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b24c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b250:	e041      	b.n	800b2d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b252:	697b      	ldr	r3, [r7, #20]
 800b254:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b258:	2b00      	cmp	r3, #0
 800b25a:	d002      	beq.n	800b262 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CC_ERR;
 800b25c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b260:	e039      	b.n	800b2d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b262:	697b      	ldr	r3, [r7, #20]
 800b264:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d002      	beq.n	800b272 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b26c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b270:	e031      	b.n	800b2d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d002      	beq.n	800b282 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b27c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b280:	e029      	b.n	800b2d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d002      	beq.n	800b292 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b28c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b290:	e021      	b.n	800b2d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d002      	beq.n	800b2a2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b29c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b2a0:	e019      	b.n	800b2d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b2a2:	697b      	ldr	r3, [r7, #20]
 800b2a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d002      	beq.n	800b2b2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b2ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b2b0:	e011      	b.n	800b2d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d002      	beq.n	800b2c2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b2bc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b2c0:	e009      	b.n	800b2d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b2c2:	697b      	ldr	r3, [r7, #20]
 800b2c4:	f003 0308 	and.w	r3, r3, #8
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d002      	beq.n	800b2d2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b2cc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b2d0:	e001      	b.n	800b2d6 <SDMMC_GetCmdResp1+0x1b6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b2d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	371c      	adds	r7, #28
 800b2da:	46bd      	mov	sp, r7
 800b2dc:	bd90      	pop	{r4, r7, pc}
 800b2de:	bf00      	nop
 800b2e0:	20000070 	.word	0x20000070
 800b2e4:	10624dd3 	.word	0x10624dd3
 800b2e8:	fdffe008 	.word	0xfdffe008

0800b2ec <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b2ec:	b490      	push	{r4, r7}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800b2f4:	4b1b      	ldr	r3, [pc, #108]	; (800b364 <SDMMC_GetCmdResp2+0x78>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4a1b      	ldr	r2, [pc, #108]	; (800b368 <SDMMC_GetCmdResp2+0x7c>)
 800b2fa:	fba2 2303 	umull	r2, r3, r2, r3
 800b2fe:	0a5b      	lsrs	r3, r3, #9
 800b300:	f241 3288 	movw	r2, #5000	; 0x1388
 800b304:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b308:	4623      	mov	r3, r4
 800b30a:	1e5c      	subs	r4, r3, #1
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d102      	bne.n	800b316 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b310:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b314:	e020      	b.n	800b358 <SDMMC_GetCmdResp2+0x6c>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b31a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d0f2      	beq.n	800b308 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b326:	f003 0304 	and.w	r3, r3, #4
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d004      	beq.n	800b338 <SDMMC_GetCmdResp2+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	2204      	movs	r2, #4
 800b332:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b334:	2304      	movs	r3, #4
 800b336:	e00f      	b.n	800b358 <SDMMC_GetCmdResp2+0x6c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b33c:	f003 0301 	and.w	r3, r3, #1
 800b340:	2b00      	cmp	r3, #0
 800b342:	d004      	beq.n	800b34e <SDMMC_GetCmdResp2+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2201      	movs	r2, #1
 800b348:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b34a:	2301      	movs	r3, #1
 800b34c:	e004      	b.n	800b358 <SDMMC_GetCmdResp2+0x6c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b354:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b356:	2300      	movs	r3, #0
}
 800b358:	4618      	mov	r0, r3
 800b35a:	3708      	adds	r7, #8
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bc90      	pop	{r4, r7}
 800b360:	4770      	bx	lr
 800b362:	bf00      	nop
 800b364:	20000070 	.word	0x20000070
 800b368:	10624dd3 	.word	0x10624dd3

0800b36c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b36c:	b490      	push	{r4, r7}
 800b36e:	b082      	sub	sp, #8
 800b370:	af00      	add	r7, sp, #0
 800b372:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800b374:	4b15      	ldr	r3, [pc, #84]	; (800b3cc <SDMMC_GetCmdResp3+0x60>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	4a15      	ldr	r2, [pc, #84]	; (800b3d0 <SDMMC_GetCmdResp3+0x64>)
 800b37a:	fba2 2303 	umull	r2, r3, r2, r3
 800b37e:	0a5b      	lsrs	r3, r3, #9
 800b380:	f241 3288 	movw	r2, #5000	; 0x1388
 800b384:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b388:	4623      	mov	r3, r4
 800b38a:	1e5c      	subs	r4, r3, #1
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d102      	bne.n	800b396 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b390:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b394:	e015      	b.n	800b3c2 <SDMMC_GetCmdResp3+0x56>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b39a:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d0f2      	beq.n	800b388 <SDMMC_GetCmdResp3+0x1c>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3a6:	f003 0304 	and.w	r3, r3, #4
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d004      	beq.n	800b3b8 <SDMMC_GetCmdResp3+0x4c>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2204      	movs	r2, #4
 800b3b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3b4:	2304      	movs	r3, #4
 800b3b6:	e004      	b.n	800b3c2 <SDMMC_GetCmdResp3+0x56>
  }
  else
 
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b3be:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b3c0:	2300      	movs	r3, #0
}
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	3708      	adds	r7, #8
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bc90      	pop	{r4, r7}
 800b3ca:	4770      	bx	lr
 800b3cc:	20000070 	.word	0x20000070
 800b3d0:	10624dd3 	.word	0x10624dd3

0800b3d4 <SDMMC_GetCmdResp6>:
  * @param  pRCA Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b3d4:	b590      	push	{r4, r7, lr}
 800b3d6:	b087      	sub	sp, #28
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	60f8      	str	r0, [r7, #12]
 800b3dc:	460b      	mov	r3, r1
 800b3de:	607a      	str	r2, [r7, #4]
 800b3e0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800b3e2:	4b31      	ldr	r3, [pc, #196]	; (800b4a8 <SDMMC_GetCmdResp6+0xd4>)
 800b3e4:	681b      	ldr	r3, [r3, #0]
 800b3e6:	4a31      	ldr	r2, [pc, #196]	; (800b4ac <SDMMC_GetCmdResp6+0xd8>)
 800b3e8:	fba2 2303 	umull	r2, r3, r2, r3
 800b3ec:	0a5b      	lsrs	r3, r3, #9
 800b3ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3f2:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b3f6:	4623      	mov	r3, r4
 800b3f8:	1e5c      	subs	r4, r3, #1
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d102      	bne.n	800b404 <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b402:	e04c      	b.n	800b49e <SDMMC_GetCmdResp6+0xca>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b408:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d0f2      	beq.n	800b3f6 <SDMMC_GetCmdResp6+0x22>
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b414:	f003 0304 	and.w	r3, r3, #4
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d004      	beq.n	800b426 <SDMMC_GetCmdResp6+0x52>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	2204      	movs	r2, #4
 800b420:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b422:	2304      	movs	r3, #4
 800b424:	e03b      	b.n	800b49e <SDMMC_GetCmdResp6+0xca>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b42a:	f003 0301 	and.w	r3, r3, #1
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d004      	beq.n	800b43c <SDMMC_GetCmdResp6+0x68>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2201      	movs	r2, #1
 800b436:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b438:	2301      	movs	r3, #1
 800b43a:	e030      	b.n	800b49e <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b43c:	68f8      	ldr	r0, [r7, #12]
 800b43e:	f7ff fb9f 	bl	800ab80 <SDMMC_GetCommandResponse>
 800b442:	4603      	mov	r3, r0
 800b444:	461a      	mov	r2, r3
 800b446:	7afb      	ldrb	r3, [r7, #11]
 800b448:	4293      	cmp	r3, r2
 800b44a:	d001      	beq.n	800b450 <SDMMC_GetCmdResp6+0x7c>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b44c:	2301      	movs	r3, #1
 800b44e:	e026      	b.n	800b49e <SDMMC_GetCmdResp6+0xca>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_FLAGS);
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	f240 52ff 	movw	r2, #1535	; 0x5ff
 800b456:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b458:	2100      	movs	r1, #0
 800b45a:	68f8      	ldr	r0, [r7, #12]
 800b45c:	f7ff fb9d 	bl	800ab9a <SDMMC_GetResponse>
 800b460:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b462:	697b      	ldr	r3, [r7, #20]
 800b464:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d106      	bne.n	800b47a <SDMMC_GetCmdResp6+0xa6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	0c1b      	lsrs	r3, r3, #16
 800b470:	b29a      	uxth	r2, r3
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b476:	2300      	movs	r3, #0
 800b478:	e011      	b.n	800b49e <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b480:	2b00      	cmp	r3, #0
 800b482:	d002      	beq.n	800b48a <SDMMC_GetCmdResp6+0xb6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b484:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b488:	e009      	b.n	800b49e <SDMMC_GetCmdResp6+0xca>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b48a:	697b      	ldr	r3, [r7, #20]
 800b48c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b490:	2b00      	cmp	r3, #0
 800b492:	d002      	beq.n	800b49a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b498:	e001      	b.n	800b49e <SDMMC_GetCmdResp6+0xca>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b49a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b49e:	4618      	mov	r0, r3
 800b4a0:	371c      	adds	r7, #28
 800b4a2:	46bd      	mov	sp, r7
 800b4a4:	bd90      	pop	{r4, r7, pc}
 800b4a6:	bf00      	nop
 800b4a8:	20000070 	.word	0x20000070
 800b4ac:	10624dd3 	.word	0x10624dd3

0800b4b0 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b4b0:	b490      	push	{r4, r7}
 800b4b2:	b082      	sub	sp, #8
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8 /1000);
 800b4b8:	4b18      	ldr	r3, [pc, #96]	; (800b51c <SDMMC_GetCmdResp7+0x6c>)
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	4a18      	ldr	r2, [pc, #96]	; (800b520 <SDMMC_GetCmdResp7+0x70>)
 800b4be:	fba2 2303 	umull	r2, r3, r2, r3
 800b4c2:	0a5b      	lsrs	r3, r3, #9
 800b4c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4c8:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0)
 800b4cc:	4623      	mov	r3, r4
 800b4ce:	1e5c      	subs	r4, r3, #1
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d102      	bne.n	800b4da <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b4d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b4d8:	e01a      	b.n	800b510 <SDMMC_GetCmdResp7+0x60>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT));
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4de:	f003 0345 	and.w	r3, r3, #69	; 0x45
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d0f2      	beq.n	800b4cc <SDMMC_GetCmdResp7+0x1c>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4ea:	f003 0304 	and.w	r3, r3, #4
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d004      	beq.n	800b4fc <SDMMC_GetCmdResp7+0x4c>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2240      	movs	r2, #64	; 0x40
 800b4f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b4f8:	2304      	movs	r3, #4
 800b4fa:	e009      	b.n	800b510 <SDMMC_GetCmdResp7+0x60>
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b500:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b504:	2b00      	cmp	r3, #0
 800b506:	d002      	beq.n	800b50e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2240      	movs	r2, #64	; 0x40
 800b50c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b50e:	2300      	movs	r3, #0
  
}
 800b510:	4618      	mov	r0, r3
 800b512:	3708      	adds	r7, #8
 800b514:	46bd      	mov	sp, r7
 800b516:	bc90      	pop	{r4, r7}
 800b518:	4770      	bx	lr
 800b51a:	bf00      	nop
 800b51c:	20000070 	.word	0x20000070
 800b520:	10624dd3 	.word	0x10624dd3

0800b524 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b524:	b084      	sub	sp, #16
 800b526:	b580      	push	{r7, lr}
 800b528:	b084      	sub	sp, #16
 800b52a:	af00      	add	r7, sp, #0
 800b52c:	6078      	str	r0, [r7, #4]
 800b52e:	f107 001c 	add.w	r0, r7, #28
 800b532:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b538:	2b01      	cmp	r3, #1
 800b53a:	d120      	bne.n	800b57e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b540:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	68da      	ldr	r2, [r3, #12]
 800b54c:	4b20      	ldr	r3, [pc, #128]	; (800b5d0 <USB_CoreInit+0xac>)
 800b54e:	4013      	ands	r3, r2
 800b550:	687a      	ldr	r2, [r7, #4]
 800b552:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	68db      	ldr	r3, [r3, #12]
 800b558:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b562:	2b01      	cmp	r3, #1
 800b564:	d105      	bne.n	800b572 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	68db      	ldr	r3, [r3, #12]
 800b56a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	f000 f942 	bl	800b7fc <USB_CoreReset>
 800b578:	4603      	mov	r3, r0
 800b57a:	73fb      	strb	r3, [r7, #15]
 800b57c:	e010      	b.n	800b5a0 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	68db      	ldr	r3, [r3, #12]
 800b582:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f000 f936 	bl	800b7fc <USB_CoreReset>
 800b590:	4603      	mov	r3, r0
 800b592:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b598:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800b5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5a2:	2b01      	cmp	r3, #1
 800b5a4:	d10b      	bne.n	800b5be <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	689b      	ldr	r3, [r3, #8]
 800b5aa:	f043 0206 	orr.w	r2, r3, #6
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	689b      	ldr	r3, [r3, #8]
 800b5b6:	f043 0220 	orr.w	r2, r3, #32
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b5be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3710      	adds	r7, #16
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b5ca:	b004      	add	sp, #16
 800b5cc:	4770      	bx	lr
 800b5ce:	bf00      	nop
 800b5d0:	ffbdffbf 	.word	0xffbdffbf

0800b5d4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b5d4:	b480      	push	{r7}
 800b5d6:	b083      	sub	sp, #12
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	689b      	ldr	r3, [r3, #8]
 800b5e0:	f043 0201 	orr.w	r2, r3, #1
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b5e8:	2300      	movs	r3, #0
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	370c      	adds	r7, #12
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr

0800b5f6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b5f6:	b480      	push	{r7}
 800b5f8:	b083      	sub	sp, #12
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	689b      	ldr	r3, [r3, #8]
 800b602:	f023 0201 	bic.w	r2, r3, #1
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b60a:	2300      	movs	r3, #0
}
 800b60c:	4618      	mov	r0, r3
 800b60e:	370c      	adds	r7, #12
 800b610:	46bd      	mov	sp, r7
 800b612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b616:	4770      	bx	lr

0800b618 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b618:	b580      	push	{r7, lr}
 800b61a:	b082      	sub	sp, #8
 800b61c:	af00      	add	r7, sp, #0
 800b61e:	6078      	str	r0, [r7, #4]
 800b620:	460b      	mov	r3, r1
 800b622:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	68db      	ldr	r3, [r3, #12]
 800b628:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b630:	78fb      	ldrb	r3, [r7, #3]
 800b632:	2b01      	cmp	r3, #1
 800b634:	d106      	bne.n	800b644 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	60da      	str	r2, [r3, #12]
 800b642:	e00b      	b.n	800b65c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b644:	78fb      	ldrb	r3, [r7, #3]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d106      	bne.n	800b658 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	68db      	ldr	r3, [r3, #12]
 800b64e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	60da      	str	r2, [r3, #12]
 800b656:	e001      	b.n	800b65c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b658:	2301      	movs	r3, #1
 800b65a:	e003      	b.n	800b664 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b65c:	2032      	movs	r0, #50	; 0x32
 800b65e:	f7f5 fa77 	bl	8000b50 <HAL_Delay>

  return HAL_OK;
 800b662:	2300      	movs	r3, #0
}
 800b664:	4618      	mov	r0, r3
 800b666:	3708      	adds	r7, #8
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd80      	pop	{r7, pc}

0800b66c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b66c:	b480      	push	{r7}
 800b66e:	b085      	sub	sp, #20
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b676:	2300      	movs	r3, #0
 800b678:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b67a:	683b      	ldr	r3, [r7, #0]
 800b67c:	019b      	lsls	r3, r3, #6
 800b67e:	f043 0220 	orr.w	r2, r3, #32
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	3301      	adds	r3, #1
 800b68a:	60fb      	str	r3, [r7, #12]
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	4a09      	ldr	r2, [pc, #36]	; (800b6b4 <USB_FlushTxFifo+0x48>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d901      	bls.n	800b698 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b694:	2303      	movs	r3, #3
 800b696:	e006      	b.n	800b6a6 <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	691b      	ldr	r3, [r3, #16]
 800b69c:	f003 0320 	and.w	r3, r3, #32
 800b6a0:	2b20      	cmp	r3, #32
 800b6a2:	d0f0      	beq.n	800b686 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b6a4:	2300      	movs	r3, #0
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3714      	adds	r7, #20
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6b0:	4770      	bx	lr
 800b6b2:	bf00      	nop
 800b6b4:	00030d40 	.word	0x00030d40

0800b6b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b6b8:	b480      	push	{r7}
 800b6ba:	b085      	sub	sp, #20
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2210      	movs	r2, #16
 800b6c8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	3301      	adds	r3, #1
 800b6ce:	60fb      	str	r3, [r7, #12]
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	4a09      	ldr	r2, [pc, #36]	; (800b6f8 <USB_FlushRxFifo+0x40>)
 800b6d4:	4293      	cmp	r3, r2
 800b6d6:	d901      	bls.n	800b6dc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b6d8:	2303      	movs	r3, #3
 800b6da:	e006      	b.n	800b6ea <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	691b      	ldr	r3, [r3, #16]
 800b6e0:	f003 0310 	and.w	r3, r3, #16
 800b6e4:	2b10      	cmp	r3, #16
 800b6e6:	d0f0      	beq.n	800b6ca <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b6e8:	2300      	movs	r3, #0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3714      	adds	r7, #20
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f4:	4770      	bx	lr
 800b6f6:	bf00      	nop
 800b6f8:	00030d40 	.word	0x00030d40

0800b6fc <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b089      	sub	sp, #36	; 0x24
 800b700:	af00      	add	r7, sp, #0
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	60b9      	str	r1, [r7, #8]
 800b706:	4611      	mov	r1, r2
 800b708:	461a      	mov	r2, r3
 800b70a:	460b      	mov	r3, r1
 800b70c:	71fb      	strb	r3, [r7, #7]
 800b70e:	4613      	mov	r3, r2
 800b710:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800b71a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d11a      	bne.n	800b758 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b722:	88bb      	ldrh	r3, [r7, #4]
 800b724:	3303      	adds	r3, #3
 800b726:	089b      	lsrs	r3, r3, #2
 800b728:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b72a:	2300      	movs	r3, #0
 800b72c:	61bb      	str	r3, [r7, #24]
 800b72e:	e00f      	b.n	800b750 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = *((__packed uint32_t *)pSrc);
 800b730:	79fb      	ldrb	r3, [r7, #7]
 800b732:	031a      	lsls	r2, r3, #12
 800b734:	697b      	ldr	r3, [r7, #20]
 800b736:	4413      	add	r3, r2
 800b738:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b73c:	461a      	mov	r2, r3
 800b73e:	69fb      	ldr	r3, [r7, #28]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b744:	69fb      	ldr	r3, [r7, #28]
 800b746:	3304      	adds	r3, #4
 800b748:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b74a:	69bb      	ldr	r3, [r7, #24]
 800b74c:	3301      	adds	r3, #1
 800b74e:	61bb      	str	r3, [r7, #24]
 800b750:	69ba      	ldr	r2, [r7, #24]
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	429a      	cmp	r2, r3
 800b756:	d3eb      	bcc.n	800b730 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b758:	2300      	movs	r3, #0
}
 800b75a:	4618      	mov	r0, r3
 800b75c:	3724      	adds	r7, #36	; 0x24
 800b75e:	46bd      	mov	sp, r7
 800b760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b764:	4770      	bx	lr

0800b766 <USB_ReadPacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b766:	b480      	push	{r7}
 800b768:	b089      	sub	sp, #36	; 0x24
 800b76a:	af00      	add	r7, sp, #0
 800b76c:	60f8      	str	r0, [r7, #12]
 800b76e:	60b9      	str	r1, [r7, #8]
 800b770:	4613      	mov	r3, r2
 800b772:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800b778:	68bb      	ldr	r3, [r7, #8]
 800b77a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800b77c:	88fb      	ldrh	r3, [r7, #6]
 800b77e:	3303      	adds	r3, #3
 800b780:	089b      	lsrs	r3, r3, #2
 800b782:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800b784:	2300      	movs	r3, #0
 800b786:	61bb      	str	r3, [r7, #24]
 800b788:	e00b      	b.n	800b7a2 <USB_ReadPacket+0x3c>
  {
    *(__packed uint32_t *)pDest = USBx_DFIFO(0U);
 800b78a:	697b      	ldr	r3, [r7, #20]
 800b78c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b790:	681a      	ldr	r2, [r3, #0]
 800b792:	69fb      	ldr	r3, [r7, #28]
 800b794:	601a      	str	r2, [r3, #0]
    pDest++;
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	3304      	adds	r3, #4
 800b79a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800b79c:	69bb      	ldr	r3, [r7, #24]
 800b79e:	3301      	adds	r3, #1
 800b7a0:	61bb      	str	r3, [r7, #24]
 800b7a2:	69ba      	ldr	r2, [r7, #24]
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d3ef      	bcc.n	800b78a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800b7aa:	69fb      	ldr	r3, [r7, #28]
}
 800b7ac:	4618      	mov	r0, r3
 800b7ae:	3724      	adds	r7, #36	; 0x24
 800b7b0:	46bd      	mov	sp, r7
 800b7b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7b6:	4770      	bx	lr

0800b7b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800b7b8:	b480      	push	{r7}
 800b7ba:	b085      	sub	sp, #20
 800b7bc:	af00      	add	r7, sp, #0
 800b7be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	695b      	ldr	r3, [r3, #20]
 800b7c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	699b      	ldr	r3, [r3, #24]
 800b7ca:	68fa      	ldr	r2, [r7, #12]
 800b7cc:	4013      	ands	r3, r2
 800b7ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800b7d0:	68fb      	ldr	r3, [r7, #12]
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3714      	adds	r7, #20
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr

0800b7de <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b7de:	b480      	push	{r7}
 800b7e0:	b083      	sub	sp, #12
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	695b      	ldr	r3, [r3, #20]
 800b7ea:	f003 0301 	and.w	r3, r3, #1
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	370c      	adds	r7, #12
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr
	...

0800b7fc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b7fc:	b480      	push	{r7}
 800b7fe:	b085      	sub	sp, #20
 800b800:	af00      	add	r7, sp, #0
 800b802:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800b804:	2300      	movs	r3, #0
 800b806:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	3301      	adds	r3, #1
 800b80c:	60fb      	str	r3, [r7, #12]
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	4a13      	ldr	r2, [pc, #76]	; (800b860 <USB_CoreReset+0x64>)
 800b812:	4293      	cmp	r3, r2
 800b814:	d901      	bls.n	800b81a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b816:	2303      	movs	r3, #3
 800b818:	e01b      	b.n	800b852 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	691b      	ldr	r3, [r3, #16]
 800b81e:	2b00      	cmp	r3, #0
 800b820:	daf2      	bge.n	800b808 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b822:	2300      	movs	r3, #0
 800b824:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	691b      	ldr	r3, [r3, #16]
 800b82a:	f043 0201 	orr.w	r2, r3, #1
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	3301      	adds	r3, #1
 800b836:	60fb      	str	r3, [r7, #12]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	4a09      	ldr	r2, [pc, #36]	; (800b860 <USB_CoreReset+0x64>)
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d901      	bls.n	800b844 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b840:	2303      	movs	r3, #3
 800b842:	e006      	b.n	800b852 <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	691b      	ldr	r3, [r3, #16]
 800b848:	f003 0301 	and.w	r3, r3, #1
 800b84c:	2b01      	cmp	r3, #1
 800b84e:	d0f0      	beq.n	800b832 <USB_CoreReset+0x36>

  return HAL_OK;
 800b850:	2300      	movs	r3, #0
}
 800b852:	4618      	mov	r0, r3
 800b854:	3714      	adds	r7, #20
 800b856:	46bd      	mov	sp, r7
 800b858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85c:	4770      	bx	lr
 800b85e:	bf00      	nop
 800b860:	00030d40 	.word	0x00030d40

0800b864 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b864:	b084      	sub	sp, #16
 800b866:	b580      	push	{r7, lr}
 800b868:	b084      	sub	sp, #16
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
 800b86e:	f107 001c 	add.w	r0, r7, #28
 800b872:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b880:	461a      	mov	r2, r3
 800b882:	2300      	movs	r3, #0
 800b884:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b88a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d018      	beq.n	800b8d0 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USB_OTG_SPEED_FULL)
 800b89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a0:	2b03      	cmp	r3, #3
 800b8a2:	d10a      	bne.n	800b8ba <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800b8a4:	68bb      	ldr	r3, [r7, #8]
 800b8a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	68ba      	ldr	r2, [r7, #8]
 800b8ae:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b8b2:	f043 0304 	orr.w	r3, r3, #4
 800b8b6:	6013      	str	r3, [r2, #0]
 800b8b8:	e014      	b.n	800b8e4 <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b8ba:	68bb      	ldr	r3, [r7, #8]
 800b8bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	68ba      	ldr	r2, [r7, #8]
 800b8c4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b8c8:	f023 0304 	bic.w	r3, r3, #4
 800b8cc:	6013      	str	r3, [r2, #0]
 800b8ce:	e009      	b.n	800b8e4 <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800b8d0:	68bb      	ldr	r3, [r7, #8]
 800b8d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	68ba      	ldr	r2, [r7, #8]
 800b8da:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b8de:	f023 0304 	bic.w	r3, r3, #4
 800b8e2:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 800b8e4:	2110      	movs	r1, #16
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f7ff fec0 	bl	800b66c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800b8ec:	6878      	ldr	r0, [r7, #4]
 800b8ee:	f7ff fee3 	bl	800b6b8 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	60fb      	str	r3, [r7, #12]
 800b8f6:	e015      	b.n	800b924 <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800b8f8:	68fb      	ldr	r3, [r7, #12]
 800b8fa:	015a      	lsls	r2, r3, #5
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	4413      	add	r3, r2
 800b900:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b904:	461a      	mov	r2, r3
 800b906:	f04f 33ff 	mov.w	r3, #4294967295
 800b90a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800b90c:	68fb      	ldr	r3, [r7, #12]
 800b90e:	015a      	lsls	r2, r3, #5
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	4413      	add	r3, r2
 800b914:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800b918:	461a      	mov	r2, r3
 800b91a:	2300      	movs	r3, #0
 800b91c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	3301      	adds	r3, #1
 800b922:	60fb      	str	r3, [r7, #12]
 800b924:	6a3b      	ldr	r3, [r7, #32]
 800b926:	68fa      	ldr	r2, [r7, #12]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d3e5      	bcc.n	800b8f8 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 800b92c:	2101      	movs	r1, #1
 800b92e:	6878      	ldr	r0, [r7, #4]
 800b930:	f000 f8ac 	bl	800ba8c <USB_DriveVbus>

  HAL_Delay(200U);
 800b934:	20c8      	movs	r0, #200	; 0xc8
 800b936:	f7f5 f90b 	bl	8000b50 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	2200      	movs	r2, #0
 800b93e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	f04f 32ff 	mov.w	r2, #4294967295
 800b946:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b94c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b950:	2b00      	cmp	r3, #0
 800b952:	d00b      	beq.n	800b96c <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b95a:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	4a14      	ldr	r2, [pc, #80]	; (800b9b0 <USB_HostInit+0x14c>)
 800b960:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	4a13      	ldr	r2, [pc, #76]	; (800b9b4 <USB_HostInit+0x150>)
 800b966:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800b96a:	e009      	b.n	800b980 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2280      	movs	r2, #128	; 0x80
 800b970:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	4a10      	ldr	r2, [pc, #64]	; (800b9b8 <USB_HostInit+0x154>)
 800b976:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	4a10      	ldr	r2, [pc, #64]	; (800b9bc <USB_HostInit+0x158>)
 800b97c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b980:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b982:	2b00      	cmp	r3, #0
 800b984:	d105      	bne.n	800b992 <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	699b      	ldr	r3, [r3, #24]
 800b98a:	f043 0210 	orr.w	r2, r3, #16
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	699a      	ldr	r2, [r3, #24]
 800b996:	4b0a      	ldr	r3, [pc, #40]	; (800b9c0 <USB_HostInit+0x15c>)
 800b998:	4313      	orrs	r3, r2
 800b99a:	687a      	ldr	r2, [r7, #4]
 800b99c:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 800b99e:	2300      	movs	r3, #0
}
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	3710      	adds	r7, #16
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b9aa:	b004      	add	sp, #16
 800b9ac:	4770      	bx	lr
 800b9ae:	bf00      	nop
 800b9b0:	01000200 	.word	0x01000200
 800b9b4:	00e00300 	.word	0x00e00300
 800b9b8:	00600080 	.word	0x00600080
 800b9bc:	004000e0 	.word	0x004000e0
 800b9c0:	a3200008 	.word	0xa3200008

0800b9c4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b085      	sub	sp, #20
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	6078      	str	r0, [r7, #4]
 800b9cc:	460b      	mov	r3, r1
 800b9ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	68fa      	ldr	r2, [r7, #12]
 800b9de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800b9e2:	f023 0303 	bic.w	r3, r3, #3
 800b9e6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800b9ee:	681a      	ldr	r2, [r3, #0]
 800b9f0:	78fb      	ldrb	r3, [r7, #3]
 800b9f2:	f003 0303 	and.w	r3, r3, #3
 800b9f6:	68f9      	ldr	r1, [r7, #12]
 800b9f8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800b9fc:	4313      	orrs	r3, r2
 800b9fe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800ba00:	78fb      	ldrb	r3, [r7, #3]
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d107      	bne.n	800ba16 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800ba12:	6053      	str	r3, [r2, #4]
 800ba14:	e009      	b.n	800ba2a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800ba16:	78fb      	ldrb	r3, [r7, #3]
 800ba18:	2b02      	cmp	r3, #2
 800ba1a:	d106      	bne.n	800ba2a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ba22:	461a      	mov	r2, r3
 800ba24:	f241 7370 	movw	r3, #6000	; 0x1770
 800ba28:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800ba2a:	2300      	movs	r3, #0
}
 800ba2c:	4618      	mov	r0, r3
 800ba2e:	3714      	adds	r7, #20
 800ba30:	46bd      	mov	sp, r7
 800ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba36:	4770      	bx	lr

0800ba38 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800ba44:	2300      	movs	r3, #0
 800ba46:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800ba4e:	681b      	ldr	r3, [r3, #0]
 800ba50:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800ba58:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800ba5a:	68bb      	ldr	r3, [r7, #8]
 800ba5c:	68fa      	ldr	r2, [r7, #12]
 800ba5e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ba62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba66:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800ba68:	2064      	movs	r0, #100	; 0x64
 800ba6a:	f7f5 f871 	bl	8000b50 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	68fa      	ldr	r2, [r7, #12]
 800ba72:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800ba76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ba7a:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800ba7c:	200a      	movs	r0, #10
 800ba7e:	f7f5 f867 	bl	8000b50 <HAL_Delay>

  return HAL_OK;
 800ba82:	2300      	movs	r3, #0
}
 800ba84:	4618      	mov	r0, r3
 800ba86:	3710      	adds	r7, #16
 800ba88:	46bd      	mov	sp, r7
 800ba8a:	bd80      	pop	{r7, pc}

0800ba8c <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b085      	sub	sp, #20
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	460b      	mov	r3, r1
 800ba96:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800baaa:	68bb      	ldr	r3, [r7, #8]
 800baac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800bab0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d109      	bne.n	800bad0 <USB_DriveVbus+0x44>
 800babc:	78fb      	ldrb	r3, [r7, #3]
 800babe:	2b01      	cmp	r3, #1
 800bac0:	d106      	bne.n	800bad0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800bac2:	68bb      	ldr	r3, [r7, #8]
 800bac4:	68fa      	ldr	r2, [r7, #12]
 800bac6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800baca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bace:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800bad0:	68bb      	ldr	r3, [r7, #8]
 800bad2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bada:	d109      	bne.n	800baf0 <USB_DriveVbus+0x64>
 800badc:	78fb      	ldrb	r3, [r7, #3]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d106      	bne.n	800baf0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800bae2:	68bb      	ldr	r3, [r7, #8]
 800bae4:	68fa      	ldr	r2, [r7, #12]
 800bae6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800baea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800baee:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800baf0:	2300      	movs	r3, #0
}
 800baf2:	4618      	mov	r0, r3
 800baf4:	3714      	adds	r7, #20
 800baf6:	46bd      	mov	sp, r7
 800baf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafc:	4770      	bx	lr

0800bafe <USB_GetHostSpeed>:
  *            @arg USB_OTG_SPEED_HIGH: High speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  *            @arg USB_OTG_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bafe:	b480      	push	{r7}
 800bb00:	b085      	sub	sp, #20
 800bb02:	af00      	add	r7, sp, #0
 800bb04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800bb0a:	2300      	movs	r3, #0
 800bb0c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bb0e:	68fb      	ldr	r3, [r7, #12]
 800bb10:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	0c5b      	lsrs	r3, r3, #17
 800bb1c:	f003 0303 	and.w	r3, r3, #3
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3714      	adds	r7, #20
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr

0800bb2c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b085      	sub	sp, #20
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bb3e:	689b      	ldr	r3, [r3, #8]
 800bb40:	b29b      	uxth	r3, r3
}
 800bb42:	4618      	mov	r0, r3
 800bb44:	3714      	adds	r7, #20
 800bb46:	46bd      	mov	sp, r7
 800bb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4c:	4770      	bx	lr
	...

0800bb50 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 800bb50:	b480      	push	{r7}
 800bb52:	b087      	sub	sp, #28
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	4608      	mov	r0, r1
 800bb5a:	4611      	mov	r1, r2
 800bb5c:	461a      	mov	r2, r3
 800bb5e:	4603      	mov	r3, r0
 800bb60:	70fb      	strb	r3, [r7, #3]
 800bb62:	460b      	mov	r3, r1
 800bb64:	70bb      	strb	r3, [r7, #2]
 800bb66:	4613      	mov	r3, r2
 800bb68:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800bb72:	78fb      	ldrb	r3, [r7, #3]
 800bb74:	015a      	lsls	r2, r3, #5
 800bb76:	68bb      	ldr	r3, [r7, #8]
 800bb78:	4413      	add	r3, r2
 800bb7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb7e:	461a      	mov	r2, r3
 800bb80:	f04f 33ff 	mov.w	r3, #4294967295
 800bb84:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800bb86:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bb8a:	2b03      	cmp	r3, #3
 800bb8c:	d87e      	bhi.n	800bc8c <USB_HC_Init+0x13c>
 800bb8e:	a201      	add	r2, pc, #4	; (adr r2, 800bb94 <USB_HC_Init+0x44>)
 800bb90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bb94:	0800bba5 	.word	0x0800bba5
 800bb98:	0800bc4f 	.word	0x0800bc4f
 800bb9c:	0800bba5 	.word	0x0800bba5
 800bba0:	0800bc11 	.word	0x0800bc11
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bba4:	78fb      	ldrb	r3, [r7, #3]
 800bba6:	015a      	lsls	r2, r3, #5
 800bba8:	68bb      	ldr	r3, [r7, #8]
 800bbaa:	4413      	add	r3, r2
 800bbac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbb0:	461a      	mov	r2, r3
 800bbb2:	f240 439d 	movw	r3, #1181	; 0x49d
 800bbb6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800bbb8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	da10      	bge.n	800bbe2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800bbc0:	78fb      	ldrb	r3, [r7, #3]
 800bbc2:	015a      	lsls	r2, r3, #5
 800bbc4:	68bb      	ldr	r3, [r7, #8]
 800bbc6:	4413      	add	r3, r2
 800bbc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbcc:	68db      	ldr	r3, [r3, #12]
 800bbce:	78fa      	ldrb	r2, [r7, #3]
 800bbd0:	0151      	lsls	r1, r2, #5
 800bbd2:	68ba      	ldr	r2, [r7, #8]
 800bbd4:	440a      	add	r2, r1
 800bbd6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bbda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bbde:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 800bbe0:	e057      	b.n	800bc92 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d051      	beq.n	800bc92 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800bbee:	78fb      	ldrb	r3, [r7, #3]
 800bbf0:	015a      	lsls	r2, r3, #5
 800bbf2:	68bb      	ldr	r3, [r7, #8]
 800bbf4:	4413      	add	r3, r2
 800bbf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bbfa:	68db      	ldr	r3, [r3, #12]
 800bbfc:	78fa      	ldrb	r2, [r7, #3]
 800bbfe:	0151      	lsls	r1, r2, #5
 800bc00:	68ba      	ldr	r2, [r7, #8]
 800bc02:	440a      	add	r2, r1
 800bc04:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc08:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800bc0c:	60d3      	str	r3, [r2, #12]
      break;
 800bc0e:	e040      	b.n	800bc92 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bc10:	78fb      	ldrb	r3, [r7, #3]
 800bc12:	015a      	lsls	r2, r3, #5
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	4413      	add	r3, r2
 800bc18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc1c:	461a      	mov	r2, r3
 800bc1e:	f240 639d 	movw	r3, #1693	; 0x69d
 800bc22:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800bc24:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	da34      	bge.n	800bc96 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800bc2c:	78fb      	ldrb	r3, [r7, #3]
 800bc2e:	015a      	lsls	r2, r3, #5
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	4413      	add	r3, r2
 800bc34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc38:	68db      	ldr	r3, [r3, #12]
 800bc3a:	78fa      	ldrb	r2, [r7, #3]
 800bc3c:	0151      	lsls	r1, r2, #5
 800bc3e:	68ba      	ldr	r2, [r7, #8]
 800bc40:	440a      	add	r2, r1
 800bc42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc4a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800bc4c:	e023      	b.n	800bc96 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800bc4e:	78fb      	ldrb	r3, [r7, #3]
 800bc50:	015a      	lsls	r2, r3, #5
 800bc52:	68bb      	ldr	r3, [r7, #8]
 800bc54:	4413      	add	r3, r2
 800bc56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	f240 2325 	movw	r3, #549	; 0x225
 800bc60:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800bc62:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	da17      	bge.n	800bc9a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800bc6a:	78fb      	ldrb	r3, [r7, #3]
 800bc6c:	015a      	lsls	r2, r3, #5
 800bc6e:	68bb      	ldr	r3, [r7, #8]
 800bc70:	4413      	add	r3, r2
 800bc72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc76:	68db      	ldr	r3, [r3, #12]
 800bc78:	78fa      	ldrb	r2, [r7, #3]
 800bc7a:	0151      	lsls	r1, r2, #5
 800bc7c:	68ba      	ldr	r2, [r7, #8]
 800bc7e:	440a      	add	r2, r1
 800bc80:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bc84:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800bc88:	60d3      	str	r3, [r2, #12]
      }
      break;
 800bc8a:	e006      	b.n	800bc9a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800bc8c:	2301      	movs	r3, #1
 800bc8e:	75fb      	strb	r3, [r7, #23]
      break;
 800bc90:	e004      	b.n	800bc9c <USB_HC_Init+0x14c>
      break;
 800bc92:	bf00      	nop
 800bc94:	e002      	b.n	800bc9c <USB_HC_Init+0x14c>
      break;
 800bc96:	bf00      	nop
 800bc98:	e000      	b.n	800bc9c <USB_HC_Init+0x14c>
      break;
 800bc9a:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bca2:	699a      	ldr	r2, [r3, #24]
 800bca4:	78fb      	ldrb	r3, [r7, #3]
 800bca6:	f003 030f 	and.w	r3, r3, #15
 800bcaa:	2101      	movs	r1, #1
 800bcac:	fa01 f303 	lsl.w	r3, r1, r3
 800bcb0:	68b9      	ldr	r1, [r7, #8]
 800bcb2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bcb6:	4313      	orrs	r3, r2
 800bcb8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	699b      	ldr	r3, [r3, #24]
 800bcbe:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800bcc6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800bcca:	2b00      	cmp	r3, #0
 800bccc:	da03      	bge.n	800bcd6 <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800bcce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bcd2:	613b      	str	r3, [r7, #16]
 800bcd4:	e001      	b.n	800bcda <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 800bcda:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bcde:	2b02      	cmp	r3, #2
 800bce0:	d103      	bne.n	800bcea <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800bce2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bce6:	60fb      	str	r3, [r7, #12]
 800bce8:	e001      	b.n	800bcee <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800bcea:	2300      	movs	r3, #0
 800bcec:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bcee:	787b      	ldrb	r3, [r7, #1]
 800bcf0:	059b      	lsls	r3, r3, #22
 800bcf2:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bcf6:	78bb      	ldrb	r3, [r7, #2]
 800bcf8:	02db      	lsls	r3, r3, #11
 800bcfa:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bcfe:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800bd00:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bd04:	049b      	lsls	r3, r3, #18
 800bd06:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800bd0a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bd0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800bd0e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800bd12:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bd14:	693b      	ldr	r3, [r7, #16]
 800bd16:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bd18:	78fb      	ldrb	r3, [r7, #3]
 800bd1a:	0159      	lsls	r1, r3, #5
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	440b      	add	r3, r1
 800bd20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd24:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800bd2a:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 800bd2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800bd30:	2b03      	cmp	r3, #3
 800bd32:	d10f      	bne.n	800bd54 <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 800bd34:	78fb      	ldrb	r3, [r7, #3]
 800bd36:	015a      	lsls	r2, r3, #5
 800bd38:	68bb      	ldr	r3, [r7, #8]
 800bd3a:	4413      	add	r3, r2
 800bd3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	78fa      	ldrb	r2, [r7, #3]
 800bd44:	0151      	lsls	r1, r2, #5
 800bd46:	68ba      	ldr	r2, [r7, #8]
 800bd48:	440a      	add	r2, r1
 800bd4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bd4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bd52:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800bd54:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd56:	4618      	mov	r0, r3
 800bd58:	371c      	adds	r7, #28
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd60:	4770      	bx	lr
 800bd62:	bf00      	nop

0800bd64 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800bd64:	b580      	push	{r7, lr}
 800bd66:	b08c      	sub	sp, #48	; 0x30
 800bd68:	af02      	add	r7, sp, #8
 800bd6a:	60f8      	str	r0, [r7, #12]
 800bd6c:	60b9      	str	r1, [r7, #8]
 800bd6e:	4613      	mov	r3, r2
 800bd70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	785b      	ldrb	r3, [r3, #1]
 800bd7a:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800bd7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bd80:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USB_OTG_SPEED_HIGH))
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d028      	beq.n	800bde0 <USB_HC_StartXfer+0x7c>
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	791b      	ldrb	r3, [r3, #4]
 800bd92:	2b00      	cmp	r3, #0
 800bd94:	d124      	bne.n	800bde0 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800bd96:	79fb      	ldrb	r3, [r7, #7]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d10b      	bne.n	800bdb4 <USB_HC_StartXfer+0x50>
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	795b      	ldrb	r3, [r3, #5]
 800bda0:	2b01      	cmp	r3, #1
 800bda2:	d107      	bne.n	800bdb4 <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	785b      	ldrb	r3, [r3, #1]
 800bda8:	4619      	mov	r1, r3
 800bdaa:	68f8      	ldr	r0, [r7, #12]
 800bdac:	f000 fa2e 	bl	800c20c <USB_DoPing>
      return HAL_OK;
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	e112      	b.n	800bfda <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800bdb4:	79fb      	ldrb	r3, [r7, #7]
 800bdb6:	2b01      	cmp	r3, #1
 800bdb8:	d112      	bne.n	800bde0 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 800bdba:	69fb      	ldr	r3, [r7, #28]
 800bdbc:	015a      	lsls	r2, r3, #5
 800bdbe:	6a3b      	ldr	r3, [r7, #32]
 800bdc0:	4413      	add	r3, r2
 800bdc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bdc6:	68db      	ldr	r3, [r3, #12]
 800bdc8:	69fa      	ldr	r2, [r7, #28]
 800bdca:	0151      	lsls	r1, r2, #5
 800bdcc:	6a3a      	ldr	r2, [r7, #32]
 800bdce:	440a      	add	r2, r1
 800bdd0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800bdd4:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800bdd8:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 800bdda:	68bb      	ldr	r3, [r7, #8]
 800bddc:	2200      	movs	r2, #0
 800bdde:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800bde0:	68bb      	ldr	r3, [r7, #8]
 800bde2:	691b      	ldr	r3, [r3, #16]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d018      	beq.n	800be1a <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800bde8:	68bb      	ldr	r3, [r7, #8]
 800bdea:	691b      	ldr	r3, [r3, #16]
 800bdec:	68ba      	ldr	r2, [r7, #8]
 800bdee:	8912      	ldrh	r2, [r2, #8]
 800bdf0:	4413      	add	r3, r2
 800bdf2:	3b01      	subs	r3, #1
 800bdf4:	68ba      	ldr	r2, [r7, #8]
 800bdf6:	8912      	ldrh	r2, [r2, #8]
 800bdf8:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdfc:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800bdfe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800be00:	8b7b      	ldrh	r3, [r7, #26]
 800be02:	429a      	cmp	r2, r3
 800be04:	d90b      	bls.n	800be1e <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800be06:	8b7b      	ldrh	r3, [r7, #26]
 800be08:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800be0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800be0c:	68ba      	ldr	r2, [r7, #8]
 800be0e:	8912      	ldrh	r2, [r2, #8]
 800be10:	fb02 f203 	mul.w	r2, r2, r3
 800be14:	68bb      	ldr	r3, [r7, #8]
 800be16:	611a      	str	r2, [r3, #16]
 800be18:	e001      	b.n	800be1e <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 800be1a:	2301      	movs	r3, #1
 800be1c:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	78db      	ldrb	r3, [r3, #3]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d006      	beq.n	800be34 <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 800be26:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800be28:	68ba      	ldr	r2, [r7, #8]
 800be2a:	8912      	ldrh	r2, [r2, #8]
 800be2c:	fb02 f203 	mul.w	r2, r2, r3
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800be34:	68bb      	ldr	r3, [r7, #8]
 800be36:	691b      	ldr	r3, [r3, #16]
 800be38:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800be3c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800be3e:	04d9      	lsls	r1, r3, #19
 800be40:	4b68      	ldr	r3, [pc, #416]	; (800bfe4 <USB_HC_StartXfer+0x280>)
 800be42:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800be44:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800be46:	68bb      	ldr	r3, [r7, #8]
 800be48:	7a9b      	ldrb	r3, [r3, #10]
 800be4a:	075b      	lsls	r3, r3, #29
 800be4c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800be50:	69f9      	ldr	r1, [r7, #28]
 800be52:	0148      	lsls	r0, r1, #5
 800be54:	6a39      	ldr	r1, [r7, #32]
 800be56:	4401      	add	r1, r0
 800be58:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800be5c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 800be5e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800be60:	79fb      	ldrb	r3, [r7, #7]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d009      	beq.n	800be7a <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	68d9      	ldr	r1, [r3, #12]
 800be6a:	69fb      	ldr	r3, [r7, #28]
 800be6c:	015a      	lsls	r2, r3, #5
 800be6e:	6a3b      	ldr	r3, [r7, #32]
 800be70:	4413      	add	r3, r2
 800be72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be76:	460a      	mov	r2, r1
 800be78:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800be7a:	6a3b      	ldr	r3, [r7, #32]
 800be7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be80:	689b      	ldr	r3, [r3, #8]
 800be82:	f003 0301 	and.w	r3, r3, #1
 800be86:	2b00      	cmp	r3, #0
 800be88:	bf0c      	ite	eq
 800be8a:	2301      	moveq	r3, #1
 800be8c:	2300      	movne	r3, #0
 800be8e:	b2db      	uxtb	r3, r3
 800be90:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800be92:	69fb      	ldr	r3, [r7, #28]
 800be94:	015a      	lsls	r2, r3, #5
 800be96:	6a3b      	ldr	r3, [r7, #32]
 800be98:	4413      	add	r3, r2
 800be9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	69fa      	ldr	r2, [r7, #28]
 800bea2:	0151      	lsls	r1, r2, #5
 800bea4:	6a3a      	ldr	r2, [r7, #32]
 800bea6:	440a      	add	r2, r1
 800bea8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800beac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800beb0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800beb2:	69fb      	ldr	r3, [r7, #28]
 800beb4:	015a      	lsls	r2, r3, #5
 800beb6:	6a3b      	ldr	r3, [r7, #32]
 800beb8:	4413      	add	r3, r2
 800beba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bebe:	681a      	ldr	r2, [r3, #0]
 800bec0:	7e7b      	ldrb	r3, [r7, #25]
 800bec2:	075b      	lsls	r3, r3, #29
 800bec4:	69f9      	ldr	r1, [r7, #28]
 800bec6:	0148      	lsls	r0, r1, #5
 800bec8:	6a39      	ldr	r1, [r7, #32]
 800beca:	4401      	add	r1, r0
 800becc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800bed0:	4313      	orrs	r3, r2
 800bed2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800bed4:	69fb      	ldr	r3, [r7, #28]
 800bed6:	015a      	lsls	r2, r3, #5
 800bed8:	6a3b      	ldr	r3, [r7, #32]
 800beda:	4413      	add	r3, r2
 800bedc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	4a41      	ldr	r2, [pc, #260]	; (800bfe8 <USB_HC_StartXfer+0x284>)
 800bee4:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800bee6:	4b40      	ldr	r3, [pc, #256]	; (800bfe8 <USB_HC_StartXfer+0x284>)
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800beee:	4a3e      	ldr	r2, [pc, #248]	; (800bfe8 <USB_HC_StartXfer+0x284>)
 800bef0:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	78db      	ldrb	r3, [r3, #3]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d006      	beq.n	800bf08 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800befa:	4b3b      	ldr	r3, [pc, #236]	; (800bfe8 <USB_HC_StartXfer+0x284>)
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf02:	4a39      	ldr	r2, [pc, #228]	; (800bfe8 <USB_HC_StartXfer+0x284>)
 800bf04:	6013      	str	r3, [r2, #0]
 800bf06:	e005      	b.n	800bf14 <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800bf08:	4b37      	ldr	r3, [pc, #220]	; (800bfe8 <USB_HC_StartXfer+0x284>)
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bf10:	4a35      	ldr	r2, [pc, #212]	; (800bfe8 <USB_HC_StartXfer+0x284>)
 800bf12:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800bf14:	4b34      	ldr	r3, [pc, #208]	; (800bfe8 <USB_HC_StartXfer+0x284>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800bf1c:	4a32      	ldr	r2, [pc, #200]	; (800bfe8 <USB_HC_StartXfer+0x284>)
 800bf1e:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800bf20:	69fb      	ldr	r3, [r7, #28]
 800bf22:	015a      	lsls	r2, r3, #5
 800bf24:	6a3b      	ldr	r3, [r7, #32]
 800bf26:	4413      	add	r3, r2
 800bf28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bf2c:	461a      	mov	r2, r3
 800bf2e:	4b2e      	ldr	r3, [pc, #184]	; (800bfe8 <USB_HC_StartXfer+0x284>)
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 800bf34:	79fb      	ldrb	r3, [r7, #7]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d14e      	bne.n	800bfd8 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800bf3a:	68bb      	ldr	r3, [r7, #8]
 800bf3c:	78db      	ldrb	r3, [r3, #3]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d14a      	bne.n	800bfd8 <USB_HC_StartXfer+0x274>
 800bf42:	68bb      	ldr	r3, [r7, #8]
 800bf44:	691b      	ldr	r3, [r3, #16]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d046      	beq.n	800bfd8 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	79db      	ldrb	r3, [r3, #7]
 800bf4e:	2b03      	cmp	r3, #3
 800bf50:	d830      	bhi.n	800bfb4 <USB_HC_StartXfer+0x250>
 800bf52:	a201      	add	r2, pc, #4	; (adr r2, 800bf58 <USB_HC_StartXfer+0x1f4>)
 800bf54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf58:	0800bf69 	.word	0x0800bf69
 800bf5c:	0800bf8d 	.word	0x0800bf8d
 800bf60:	0800bf69 	.word	0x0800bf69
 800bf64:	0800bf8d 	.word	0x0800bf8d
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800bf68:	68bb      	ldr	r3, [r7, #8]
 800bf6a:	691b      	ldr	r3, [r3, #16]
 800bf6c:	3303      	adds	r3, #3
 800bf6e:	089b      	lsrs	r3, r3, #2
 800bf70:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800bf72:	8afa      	ldrh	r2, [r7, #22]
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf78:	b29b      	uxth	r3, r3
 800bf7a:	429a      	cmp	r2, r3
 800bf7c:	d91c      	bls.n	800bfb8 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	699b      	ldr	r3, [r3, #24]
 800bf82:	f043 0220 	orr.w	r2, r3, #32
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	619a      	str	r2, [r3, #24]
          }
          break;
 800bf8a:	e015      	b.n	800bfb8 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	691b      	ldr	r3, [r3, #16]
 800bf90:	3303      	adds	r3, #3
 800bf92:	089b      	lsrs	r3, r3, #2
 800bf94:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800bf96:	8afa      	ldrh	r2, [r7, #22]
 800bf98:	6a3b      	ldr	r3, [r7, #32]
 800bf9a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf9e:	691b      	ldr	r3, [r3, #16]
 800bfa0:	b29b      	uxth	r3, r3
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d90a      	bls.n	800bfbc <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	699b      	ldr	r3, [r3, #24]
 800bfaa:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	619a      	str	r2, [r3, #24]
          }
          break;
 800bfb2:	e003      	b.n	800bfbc <USB_HC_StartXfer+0x258>

        default:
          break;
 800bfb4:	bf00      	nop
 800bfb6:	e002      	b.n	800bfbe <USB_HC_StartXfer+0x25a>
          break;
 800bfb8:	bf00      	nop
 800bfba:	e000      	b.n	800bfbe <USB_HC_StartXfer+0x25a>
          break;
 800bfbc:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	68d9      	ldr	r1, [r3, #12]
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	785a      	ldrb	r2, [r3, #1]
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	691b      	ldr	r3, [r3, #16]
 800bfca:	b298      	uxth	r0, r3
 800bfcc:	2300      	movs	r3, #0
 800bfce:	9300      	str	r3, [sp, #0]
 800bfd0:	4603      	mov	r3, r0
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	f7ff fb92 	bl	800b6fc <USB_WritePacket>
    }
  }

  return HAL_OK;
 800bfd8:	2300      	movs	r3, #0
}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3728      	adds	r7, #40	; 0x28
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}
 800bfe2:	bf00      	nop
 800bfe4:	1ff80000 	.word	0x1ff80000
 800bfe8:	20000130 	.word	0x20000130

0800bfec <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bfec:	b480      	push	{r7}
 800bfee:	b085      	sub	sp, #20
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bffe:	695b      	ldr	r3, [r3, #20]
 800c000:	b29b      	uxth	r3, r3
}
 800c002:	4618      	mov	r0, r3
 800c004:	3714      	adds	r7, #20
 800c006:	46bd      	mov	sp, r7
 800c008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00c:	4770      	bx	lr

0800c00e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c00e:	b480      	push	{r7}
 800c010:	b087      	sub	sp, #28
 800c012:	af00      	add	r7, sp, #0
 800c014:	6078      	str	r0, [r7, #4]
 800c016:	460b      	mov	r3, r1
 800c018:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 800c01e:	78fb      	ldrb	r3, [r7, #3]
 800c020:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c022:	2300      	movs	r3, #0
 800c024:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	015a      	lsls	r2, r3, #5
 800c02a:	693b      	ldr	r3, [r7, #16]
 800c02c:	4413      	add	r3, r2
 800c02e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	0c9b      	lsrs	r3, r3, #18
 800c036:	f003 0303 	and.w	r3, r3, #3
 800c03a:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d002      	beq.n	800c048 <USB_HC_Halt+0x3a>
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	2b02      	cmp	r3, #2
 800c046:	d16c      	bne.n	800c122 <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	015a      	lsls	r2, r3, #5
 800c04c:	693b      	ldr	r3, [r7, #16]
 800c04e:	4413      	add	r3, r2
 800c050:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	68fa      	ldr	r2, [r7, #12]
 800c058:	0151      	lsls	r1, r2, #5
 800c05a:	693a      	ldr	r2, [r7, #16]
 800c05c:	440a      	add	r2, r1
 800c05e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c062:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c066:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c06c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c070:	2b00      	cmp	r3, #0
 800c072:	d143      	bne.n	800c0fc <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	015a      	lsls	r2, r3, #5
 800c078:	693b      	ldr	r3, [r7, #16]
 800c07a:	4413      	add	r3, r2
 800c07c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	68fa      	ldr	r2, [r7, #12]
 800c084:	0151      	lsls	r1, r2, #5
 800c086:	693a      	ldr	r2, [r7, #16]
 800c088:	440a      	add	r2, r1
 800c08a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c08e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c092:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	015a      	lsls	r2, r3, #5
 800c098:	693b      	ldr	r3, [r7, #16]
 800c09a:	4413      	add	r3, r2
 800c09c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	68fa      	ldr	r2, [r7, #12]
 800c0a4:	0151      	lsls	r1, r2, #5
 800c0a6:	693a      	ldr	r2, [r7, #16]
 800c0a8:	440a      	add	r2, r1
 800c0aa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c0ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c0b2:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	015a      	lsls	r2, r3, #5
 800c0b8:	693b      	ldr	r3, [r7, #16]
 800c0ba:	4413      	add	r3, r2
 800c0bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	68fa      	ldr	r2, [r7, #12]
 800c0c4:	0151      	lsls	r1, r2, #5
 800c0c6:	693a      	ldr	r2, [r7, #16]
 800c0c8:	440a      	add	r2, r1
 800c0ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c0ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c0d2:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c0d4:	697b      	ldr	r3, [r7, #20]
 800c0d6:	3301      	adds	r3, #1
 800c0d8:	617b      	str	r3, [r7, #20]
 800c0da:	697b      	ldr	r3, [r7, #20]
 800c0dc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c0e0:	d81d      	bhi.n	800c11e <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	015a      	lsls	r2, r3, #5
 800c0e6:	693b      	ldr	r3, [r7, #16]
 800c0e8:	4413      	add	r3, r2
 800c0ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c0f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c0f8:	d0ec      	beq.n	800c0d4 <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c0fa:	e080      	b.n	800c1fe <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	015a      	lsls	r2, r3, #5
 800c100:	693b      	ldr	r3, [r7, #16]
 800c102:	4413      	add	r3, r2
 800c104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c108:	681b      	ldr	r3, [r3, #0]
 800c10a:	68fa      	ldr	r2, [r7, #12]
 800c10c:	0151      	lsls	r1, r2, #5
 800c10e:	693a      	ldr	r2, [r7, #16]
 800c110:	440a      	add	r2, r1
 800c112:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c116:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c11a:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c11c:	e06f      	b.n	800c1fe <USB_HC_Halt+0x1f0>
          break;
 800c11e:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c120:	e06d      	b.n	800c1fe <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	015a      	lsls	r2, r3, #5
 800c126:	693b      	ldr	r3, [r7, #16]
 800c128:	4413      	add	r3, r2
 800c12a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	68fa      	ldr	r2, [r7, #12]
 800c132:	0151      	lsls	r1, r2, #5
 800c134:	693a      	ldr	r2, [r7, #16]
 800c136:	440a      	add	r2, r1
 800c138:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c13c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c140:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c142:	693b      	ldr	r3, [r7, #16]
 800c144:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c148:	691b      	ldr	r3, [r3, #16]
 800c14a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d143      	bne.n	800c1da <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	015a      	lsls	r2, r3, #5
 800c156:	693b      	ldr	r3, [r7, #16]
 800c158:	4413      	add	r3, r2
 800c15a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	68fa      	ldr	r2, [r7, #12]
 800c162:	0151      	lsls	r1, r2, #5
 800c164:	693a      	ldr	r2, [r7, #16]
 800c166:	440a      	add	r2, r1
 800c168:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c16c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c170:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	015a      	lsls	r2, r3, #5
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	4413      	add	r3, r2
 800c17a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	68fa      	ldr	r2, [r7, #12]
 800c182:	0151      	lsls	r1, r2, #5
 800c184:	693a      	ldr	r2, [r7, #16]
 800c186:	440a      	add	r2, r1
 800c188:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c18c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c190:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	015a      	lsls	r2, r3, #5
 800c196:	693b      	ldr	r3, [r7, #16]
 800c198:	4413      	add	r3, r2
 800c19a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	68fa      	ldr	r2, [r7, #12]
 800c1a2:	0151      	lsls	r1, r2, #5
 800c1a4:	693a      	ldr	r2, [r7, #16]
 800c1a6:	440a      	add	r2, r1
 800c1a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c1ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c1b0:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800c1b2:	697b      	ldr	r3, [r7, #20]
 800c1b4:	3301      	adds	r3, #1
 800c1b6:	617b      	str	r3, [r7, #20]
 800c1b8:	697b      	ldr	r3, [r7, #20]
 800c1ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c1be:	d81d      	bhi.n	800c1fc <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	015a      	lsls	r2, r3, #5
 800c1c4:	693b      	ldr	r3, [r7, #16]
 800c1c6:	4413      	add	r3, r2
 800c1c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1d6:	d0ec      	beq.n	800c1b2 <USB_HC_Halt+0x1a4>
 800c1d8:	e011      	b.n	800c1fe <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	015a      	lsls	r2, r3, #5
 800c1de:	693b      	ldr	r3, [r7, #16]
 800c1e0:	4413      	add	r3, r2
 800c1e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	68fa      	ldr	r2, [r7, #12]
 800c1ea:	0151      	lsls	r1, r2, #5
 800c1ec:	693a      	ldr	r2, [r7, #16]
 800c1ee:	440a      	add	r2, r1
 800c1f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c1f4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c1f8:	6013      	str	r3, [r2, #0]
 800c1fa:	e000      	b.n	800c1fe <USB_HC_Halt+0x1f0>
          break;
 800c1fc:	bf00      	nop
    }
  }

  return HAL_OK;
 800c1fe:	2300      	movs	r3, #0
}
 800c200:	4618      	mov	r0, r3
 800c202:	371c      	adds	r7, #28
 800c204:	46bd      	mov	sp, r7
 800c206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c20a:	4770      	bx	lr

0800c20c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c20c:	b480      	push	{r7}
 800c20e:	b087      	sub	sp, #28
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
 800c214:	460b      	mov	r3, r1
 800c216:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c21c:	78fb      	ldrb	r3, [r7, #3]
 800c21e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c220:	2301      	movs	r3, #1
 800c222:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	04da      	lsls	r2, r3, #19
 800c228:	4b15      	ldr	r3, [pc, #84]	; (800c280 <USB_DoPing+0x74>)
 800c22a:	4013      	ands	r3, r2
 800c22c:	693a      	ldr	r2, [r7, #16]
 800c22e:	0151      	lsls	r1, r2, #5
 800c230:	697a      	ldr	r2, [r7, #20]
 800c232:	440a      	add	r2, r1
 800c234:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c238:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c23c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	015a      	lsls	r2, r3, #5
 800c242:	697b      	ldr	r3, [r7, #20]
 800c244:	4413      	add	r3, r2
 800c246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c254:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c25c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c25e:	693b      	ldr	r3, [r7, #16]
 800c260:	015a      	lsls	r2, r3, #5
 800c262:	697b      	ldr	r3, [r7, #20]
 800c264:	4413      	add	r3, r2
 800c266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c26a:	461a      	mov	r2, r3
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c270:	2300      	movs	r3, #0
}
 800c272:	4618      	mov	r0, r3
 800c274:	371c      	adds	r7, #28
 800c276:	46bd      	mov	sp, r7
 800c278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27c:	4770      	bx	lr
 800c27e:	bf00      	nop
 800c280:	1ff80000 	.word	0x1ff80000

0800c284 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c284:	b580      	push	{r7, lr}
 800c286:	b086      	sub	sp, #24
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 800c290:	2300      	movs	r3, #0
 800c292:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;


  (void)USB_DisableGlobalInt(USBx);
 800c294:	6878      	ldr	r0, [r7, #4]
 800c296:	f7ff f9ae 	bl	800b5f6 <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 800c29a:	2110      	movs	r1, #16
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f7ff f9e5 	bl	800b66c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f7ff fa08 	bl	800b6b8 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	613b      	str	r3, [r7, #16]
 800c2ac:	e01f      	b.n	800c2ee <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 800c2ae:	693b      	ldr	r3, [r7, #16]
 800c2b0:	015a      	lsls	r2, r3, #5
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	4413      	add	r3, r2
 800c2b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c2c4:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c2cc:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c2d4:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c2d6:	693b      	ldr	r3, [r7, #16]
 800c2d8:	015a      	lsls	r2, r3, #5
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	4413      	add	r3, r2
 800c2de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2e2:	461a      	mov	r2, r3
 800c2e4:	68bb      	ldr	r3, [r7, #8]
 800c2e6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	3301      	adds	r3, #1
 800c2ec:	613b      	str	r3, [r7, #16]
 800c2ee:	693b      	ldr	r3, [r7, #16]
 800c2f0:	2b0f      	cmp	r3, #15
 800c2f2:	d9dc      	bls.n	800c2ae <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	613b      	str	r3, [r7, #16]
 800c2f8:	e034      	b.n	800c364 <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	015a      	lsls	r2, r3, #5
 800c2fe:	68fb      	ldr	r3, [r7, #12]
 800c300:	4413      	add	r3, r2
 800c302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c30a:	68bb      	ldr	r3, [r7, #8]
 800c30c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c310:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800c312:	68bb      	ldr	r3, [r7, #8]
 800c314:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c318:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c320:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800c322:	693b      	ldr	r3, [r7, #16]
 800c324:	015a      	lsls	r2, r3, #5
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	4413      	add	r3, r2
 800c32a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c32e:	461a      	mov	r2, r3
 800c330:	68bb      	ldr	r3, [r7, #8]
 800c332:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	3301      	adds	r3, #1
 800c338:	617b      	str	r3, [r7, #20]
 800c33a:	697b      	ldr	r3, [r7, #20]
 800c33c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c340:	d80c      	bhi.n	800c35c <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	015a      	lsls	r2, r3, #5
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	4413      	add	r3, r2
 800c34a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c354:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c358:	d0ec      	beq.n	800c334 <USB_StopHost+0xb0>
 800c35a:	e000      	b.n	800c35e <USB_StopHost+0xda>
        break;
 800c35c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c35e:	693b      	ldr	r3, [r7, #16]
 800c360:	3301      	adds	r3, #1
 800c362:	613b      	str	r3, [r7, #16]
 800c364:	693b      	ldr	r3, [r7, #16]
 800c366:	2b0f      	cmp	r3, #15
 800c368:	d9c7      	bls.n	800c2fa <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c370:	461a      	mov	r2, r3
 800c372:	f04f 33ff 	mov.w	r3, #4294967295
 800c376:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f04f 32ff 	mov.w	r2, #4294967295
 800c37e:	615a      	str	r2, [r3, #20]
  (void)USB_EnableGlobalInt(USBx);
 800c380:	6878      	ldr	r0, [r7, #4]
 800c382:	f7ff f927 	bl	800b5d4 <USB_EnableGlobalInt>

  return HAL_OK;
 800c386:	2300      	movs	r3, #0
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3718      	adds	r7, #24
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}

0800c390 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit (USBH_HandleTypeDef *phost)
{
 800c390:	b590      	push	{r4, r7, lr}
 800c392:	b089      	sub	sp, #36	; 0x24
 800c394:	af04      	add	r7, sp, #16
 800c396:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_FAIL ;
 800c398:	2302      	movs	r3, #2
 800c39a:	73fb      	strb	r3, [r7, #15]
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost,
 800c39c:	2301      	movs	r3, #1
 800c39e:	2202      	movs	r2, #2
 800c3a0:	2102      	movs	r1, #2
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 fc8c 	bl	800ccc0 <USBH_FindInterface>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	73bb      	strb	r3, [r7, #14]
                                 COMMUNICATION_INTERFACE_CLASS_CODE,
                                 ABSTRACT_CONTROL_MODEL,
                                 COMMON_AT_COMMAND);

  if(interface == 0xFFU) /* No Valid Interface */
 800c3ac:	7bbb      	ldrb	r3, [r7, #14]
 800c3ae:	2bff      	cmp	r3, #255	; 0xff
 800c3b0:	f000 812a 	beq.w	800c608 <USBH_CDC_InterfaceInit+0x278>
  {
    USBH_DbgLog ("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
  }
  else
  {
    USBH_SelectInterface (phost, interface);
 800c3b4:	7bbb      	ldrb	r3, [r7, #14]
 800c3b6:	4619      	mov	r1, r3
 800c3b8:	6878      	ldr	r0, [r7, #4]
 800c3ba:	f000 fc65 	bl	800cc88 <USBH_SelectInterface>
    phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc (sizeof(CDC_HandleTypeDef));
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	f8d3 4378 	ldr.w	r4, [r3, #888]	; 0x378
 800c3c4:	2050      	movs	r0, #80	; 0x50
 800c3c6:	f016 f8a9 	bl	802251c <malloc>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	61e3      	str	r3, [r4, #28]
    CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c3d4:	69db      	ldr	r3, [r3, #28]
 800c3d6:	60bb      	str	r3, [r7, #8]

    /*Collect the notification endpoint address and length*/
    if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c3d8:	7bbb      	ldrb	r3, [r7, #14]
 800c3da:	687a      	ldr	r2, [r7, #4]
 800c3dc:	211a      	movs	r1, #26
 800c3de:	fb01 f303 	mul.w	r3, r1, r3
 800c3e2:	4413      	add	r3, r2
 800c3e4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	b25b      	sxtb	r3, r3
 800c3ec:	2b00      	cmp	r3, #0
 800c3ee:	da15      	bge.n	800c41c <USBH_CDC_InterfaceInit+0x8c>
    {
      CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c3f0:	7bbb      	ldrb	r3, [r7, #14]
 800c3f2:	687a      	ldr	r2, [r7, #4]
 800c3f4:	211a      	movs	r1, #26
 800c3f6:	fb01 f303 	mul.w	r3, r1, r3
 800c3fa:	4413      	add	r3, r2
 800c3fc:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800c400:	781a      	ldrb	r2, [r3, #0]
 800c402:	68bb      	ldr	r3, [r7, #8]
 800c404:	705a      	strb	r2, [r3, #1]
      CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c406:	7bbb      	ldrb	r3, [r7, #14]
 800c408:	687a      	ldr	r2, [r7, #4]
 800c40a:	211a      	movs	r1, #26
 800c40c:	fb01 f303 	mul.w	r3, r1, r3
 800c410:	4413      	add	r3, r2
 800c412:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800c416:	881a      	ldrh	r2, [r3, #0]
 800c418:	68bb      	ldr	r3, [r7, #8]
 800c41a:	815a      	strh	r2, [r3, #10]
    }

    /*Allocate the length for host channel number in*/
    CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	785b      	ldrb	r3, [r3, #1]
 800c420:	4619      	mov	r1, r3
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f001 ff2f 	bl	800e286 <USBH_AllocPipe>
 800c428:	4603      	mov	r3, r0
 800c42a:	461a      	mov	r2, r3
 800c42c:	68bb      	ldr	r3, [r7, #8]
 800c42e:	701a      	strb	r2, [r3, #0]

    /* Open pipe for Notification endpoint */
    USBH_OpenPipe  (phost,
 800c430:	68bb      	ldr	r3, [r7, #8]
 800c432:	7819      	ldrb	r1, [r3, #0]
 800c434:	68bb      	ldr	r3, [r7, #8]
 800c436:	7858      	ldrb	r0, [r3, #1]
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c444:	68ba      	ldr	r2, [r7, #8]
 800c446:	8952      	ldrh	r2, [r2, #10]
 800c448:	9202      	str	r2, [sp, #8]
 800c44a:	2203      	movs	r2, #3
 800c44c:	9201      	str	r2, [sp, #4]
 800c44e:	9300      	str	r3, [sp, #0]
 800c450:	4623      	mov	r3, r4
 800c452:	4602      	mov	r2, r0
 800c454:	6878      	ldr	r0, [r7, #4]
 800c456:	f001 fee7 	bl	800e228 <USBH_OpenPipe>
                    phost->device.address,
                    phost->device.speed,
                    USB_EP_TYPE_INTR,
                    CDC_Handle->CommItf.NotifEpSize);

    USBH_LL_SetToggle (phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800c45a:	68bb      	ldr	r3, [r7, #8]
 800c45c:	781b      	ldrb	r3, [r3, #0]
 800c45e:	2200      	movs	r2, #0
 800c460:	4619      	mov	r1, r3
 800c462:	6878      	ldr	r0, [r7, #4]
 800c464:	f00d fc46 	bl	8019cf4 <USBH_LL_SetToggle>

    interface = USBH_FindInterface(phost,
 800c468:	2300      	movs	r3, #0
 800c46a:	2200      	movs	r2, #0
 800c46c:	210a      	movs	r1, #10
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 fc26 	bl	800ccc0 <USBH_FindInterface>
 800c474:	4603      	mov	r3, r0
 800c476:	73bb      	strb	r3, [r7, #14]
                                   DATA_INTERFACE_CLASS_CODE,
                                   RESERVED,
                                   NO_CLASS_SPECIFIC_PROTOCOL_CODE);

    if(interface == 0xFFU) /* No Valid Interface */
 800c478:	7bbb      	ldrb	r3, [r7, #14]
 800c47a:	2bff      	cmp	r3, #255	; 0xff
 800c47c:	f000 80c4 	beq.w	800c608 <USBH_CDC_InterfaceInit+0x278>
      USBH_DbgLog ("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    }
    else
    {
      /*Collect the class specific endpoint address and length*/
      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 800c480:	7bbb      	ldrb	r3, [r7, #14]
 800c482:	687a      	ldr	r2, [r7, #4]
 800c484:	211a      	movs	r1, #26
 800c486:	fb01 f303 	mul.w	r3, r1, r3
 800c48a:	4413      	add	r3, r2
 800c48c:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	b25b      	sxtb	r3, r3
 800c494:	2b00      	cmp	r3, #0
 800c496:	da16      	bge.n	800c4c6 <USBH_CDC_InterfaceInit+0x136>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c498:	7bbb      	ldrb	r3, [r7, #14]
 800c49a:	687a      	ldr	r2, [r7, #4]
 800c49c:	211a      	movs	r1, #26
 800c49e:	fb01 f303 	mul.w	r3, r1, r3
 800c4a2:	4413      	add	r3, r2
 800c4a4:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800c4a8:	781a      	ldrb	r2, [r3, #0]
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c4ae:	7bbb      	ldrb	r3, [r7, #14]
 800c4b0:	687a      	ldr	r2, [r7, #4]
 800c4b2:	211a      	movs	r1, #26
 800c4b4:	fb01 f303 	mul.w	r3, r1, r3
 800c4b8:	4413      	add	r3, r2
 800c4ba:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800c4be:	881a      	ldrh	r2, [r3, #0]
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	835a      	strh	r2, [r3, #26]
 800c4c4:	e015      	b.n	800c4f2 <USBH_CDC_InterfaceInit+0x162>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800c4c6:	7bbb      	ldrb	r3, [r7, #14]
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	211a      	movs	r1, #26
 800c4cc:	fb01 f303 	mul.w	r3, r1, r3
 800c4d0:	4413      	add	r3, r2
 800c4d2:	f203 334a 	addw	r3, r3, #842	; 0x34a
 800c4d6:	781a      	ldrb	r2, [r3, #0]
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800c4dc:	7bbb      	ldrb	r3, [r7, #14]
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	211a      	movs	r1, #26
 800c4e2:	fb01 f303 	mul.w	r3, r1, r3
 800c4e6:	4413      	add	r3, r2
 800c4e8:	f503 7353 	add.w	r3, r3, #844	; 0x34c
 800c4ec:	881a      	ldrh	r2, [r3, #0]
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	831a      	strh	r2, [r3, #24]
      }

      if(phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 800c4f2:	7bbb      	ldrb	r3, [r7, #14]
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	211a      	movs	r1, #26
 800c4f8:	fb01 f303 	mul.w	r3, r1, r3
 800c4fc:	4413      	add	r3, r2
 800c4fe:	f203 3352 	addw	r3, r3, #850	; 0x352
 800c502:	781b      	ldrb	r3, [r3, #0]
 800c504:	b25b      	sxtb	r3, r3
 800c506:	2b00      	cmp	r3, #0
 800c508:	da16      	bge.n	800c538 <USBH_CDC_InterfaceInit+0x1a8>
      {
        CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c50a:	7bbb      	ldrb	r3, [r7, #14]
 800c50c:	687a      	ldr	r2, [r7, #4]
 800c50e:	211a      	movs	r1, #26
 800c510:	fb01 f303 	mul.w	r3, r1, r3
 800c514:	4413      	add	r3, r2
 800c516:	f203 3352 	addw	r3, r3, #850	; 0x352
 800c51a:	781a      	ldrb	r2, [r3, #0]
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	73da      	strb	r2, [r3, #15]
        CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c520:	7bbb      	ldrb	r3, [r7, #14]
 800c522:	687a      	ldr	r2, [r7, #4]
 800c524:	211a      	movs	r1, #26
 800c526:	fb01 f303 	mul.w	r3, r1, r3
 800c52a:	4413      	add	r3, r2
 800c52c:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800c530:	881a      	ldrh	r2, [r3, #0]
 800c532:	68bb      	ldr	r3, [r7, #8]
 800c534:	835a      	strh	r2, [r3, #26]
 800c536:	e015      	b.n	800c564 <USBH_CDC_InterfaceInit+0x1d4>
      }
      else
      {
        CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800c538:	7bbb      	ldrb	r3, [r7, #14]
 800c53a:	687a      	ldr	r2, [r7, #4]
 800c53c:	211a      	movs	r1, #26
 800c53e:	fb01 f303 	mul.w	r3, r1, r3
 800c542:	4413      	add	r3, r2
 800c544:	f203 3352 	addw	r3, r3, #850	; 0x352
 800c548:	781a      	ldrb	r2, [r3, #0]
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	739a      	strb	r2, [r3, #14]
        CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800c54e:	7bbb      	ldrb	r3, [r7, #14]
 800c550:	687a      	ldr	r2, [r7, #4]
 800c552:	211a      	movs	r1, #26
 800c554:	fb01 f303 	mul.w	r3, r1, r3
 800c558:	4413      	add	r3, r2
 800c55a:	f503 7355 	add.w	r3, r3, #852	; 0x354
 800c55e:	881a      	ldrh	r2, [r3, #0]
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	831a      	strh	r2, [r3, #24]
      }

      /*Allocate the length for host channel number out*/
      CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800c564:	68bb      	ldr	r3, [r7, #8]
 800c566:	7b9b      	ldrb	r3, [r3, #14]
 800c568:	4619      	mov	r1, r3
 800c56a:	6878      	ldr	r0, [r7, #4]
 800c56c:	f001 fe8b 	bl	800e286 <USBH_AllocPipe>
 800c570:	4603      	mov	r3, r0
 800c572:	461a      	mov	r2, r3
 800c574:	68bb      	ldr	r3, [r7, #8]
 800c576:	735a      	strb	r2, [r3, #13]

      /*Allocate the length for host channel number in*/
      CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	7bdb      	ldrb	r3, [r3, #15]
 800c57c:	4619      	mov	r1, r3
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f001 fe81 	bl	800e286 <USBH_AllocPipe>
 800c584:	4603      	mov	r3, r0
 800c586:	461a      	mov	r2, r3
 800c588:	68bb      	ldr	r3, [r7, #8]
 800c58a:	731a      	strb	r2, [r3, #12]

      /* Open channel for OUT endpoint */
      USBH_OpenPipe  (phost,
 800c58c:	68bb      	ldr	r3, [r7, #8]
 800c58e:	7b59      	ldrb	r1, [r3, #13]
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	7b98      	ldrb	r0, [r3, #14]
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c5a0:	68ba      	ldr	r2, [r7, #8]
 800c5a2:	8b12      	ldrh	r2, [r2, #24]
 800c5a4:	9202      	str	r2, [sp, #8]
 800c5a6:	2202      	movs	r2, #2
 800c5a8:	9201      	str	r2, [sp, #4]
 800c5aa:	9300      	str	r3, [sp, #0]
 800c5ac:	4623      	mov	r3, r4
 800c5ae:	4602      	mov	r2, r0
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f001 fe39 	bl	800e228 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);
      /* Open channel for IN endpoint */
      USBH_OpenPipe  (phost,
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	7b19      	ldrb	r1, [r3, #12]
 800c5ba:	68bb      	ldr	r3, [r7, #8]
 800c5bc:	7bd8      	ldrb	r0, [r3, #15]
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800c5ca:	68ba      	ldr	r2, [r7, #8]
 800c5cc:	8b52      	ldrh	r2, [r2, #26]
 800c5ce:	9202      	str	r2, [sp, #8]
 800c5d0:	2202      	movs	r2, #2
 800c5d2:	9201      	str	r2, [sp, #4]
 800c5d4:	9300      	str	r3, [sp, #0]
 800c5d6:	4623      	mov	r3, r4
 800c5d8:	4602      	mov	r2, r0
 800c5da:	6878      	ldr	r0, [r7, #4]
 800c5dc:	f001 fe24 	bl	800e228 <USBH_OpenPipe>
                      phost->device.address,
                      phost->device.speed,
                      USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

      CDC_Handle->state = CDC_IDLE_STATE;
 800c5e0:	68bb      	ldr	r3, [r7, #8]
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.OutPipe, 0U);
 800c5e8:	68bb      	ldr	r3, [r7, #8]
 800c5ea:	7b5b      	ldrb	r3, [r3, #13]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	4619      	mov	r1, r3
 800c5f0:	6878      	ldr	r0, [r7, #4]
 800c5f2:	f00d fb7f 	bl	8019cf4 <USBH_LL_SetToggle>
      USBH_LL_SetToggle (phost, CDC_Handle->DataItf.InPipe, 0U);
 800c5f6:	68bb      	ldr	r3, [r7, #8]
 800c5f8:	7b1b      	ldrb	r3, [r3, #12]
 800c5fa:	2200      	movs	r2, #0
 800c5fc:	4619      	mov	r1, r3
 800c5fe:	6878      	ldr	r0, [r7, #4]
 800c600:	f00d fb78 	bl	8019cf4 <USBH_LL_SetToggle>
      status = USBH_OK;
 800c604:	2300      	movs	r3, #0
 800c606:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 800c608:	7bfb      	ldrb	r3, [r7, #15]
}
 800c60a:	4618      	mov	r0, r3
 800c60c:	3714      	adds	r7, #20
 800c60e:	46bd      	mov	sp, r7
 800c610:	bd90      	pop	{r4, r7, pc}

0800c612 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit (USBH_HandleTypeDef *phost)
{
 800c612:	b580      	push	{r7, lr}
 800c614:	b084      	sub	sp, #16
 800c616:	af00      	add	r7, sp, #0
 800c618:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c620:	69db      	ldr	r3, [r3, #28]
 800c622:	60fb      	str	r3, [r7, #12]

  if ( CDC_Handle->CommItf.NotifPipe)
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	781b      	ldrb	r3, [r3, #0]
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d00e      	beq.n	800c64a <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	781b      	ldrb	r3, [r3, #0]
 800c630:	4619      	mov	r1, r3
 800c632:	6878      	ldr	r0, [r7, #4]
 800c634:	f001 fe17 	bl	800e266 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->CommItf.NotifPipe);
 800c638:	68fb      	ldr	r3, [r7, #12]
 800c63a:	781b      	ldrb	r3, [r3, #0]
 800c63c:	4619      	mov	r1, r3
 800c63e:	6878      	ldr	r0, [r7, #4]
 800c640:	f001 fe3f 	bl	800e2c2 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800c644:	68fb      	ldr	r3, [r7, #12]
 800c646:	2200      	movs	r2, #0
 800c648:	701a      	strb	r2, [r3, #0]
  }

  if ( CDC_Handle->DataItf.InPipe)
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	7b1b      	ldrb	r3, [r3, #12]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d00e      	beq.n	800c670 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800c652:	68fb      	ldr	r3, [r7, #12]
 800c654:	7b1b      	ldrb	r3, [r3, #12]
 800c656:	4619      	mov	r1, r3
 800c658:	6878      	ldr	r0, [r7, #4]
 800c65a:	f001 fe04 	bl	800e266 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.InPipe);
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	7b1b      	ldrb	r3, [r3, #12]
 800c662:	4619      	mov	r1, r3
 800c664:	6878      	ldr	r0, [r7, #4]
 800c666:	f001 fe2c 	bl	800e2c2 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	2200      	movs	r2, #0
 800c66e:	731a      	strb	r2, [r3, #12]
  }

  if ( CDC_Handle->DataItf.OutPipe)
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	7b5b      	ldrb	r3, [r3, #13]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d00e      	beq.n	800c696 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800c678:	68fb      	ldr	r3, [r7, #12]
 800c67a:	7b5b      	ldrb	r3, [r3, #13]
 800c67c:	4619      	mov	r1, r3
 800c67e:	6878      	ldr	r0, [r7, #4]
 800c680:	f001 fdf1 	bl	800e266 <USBH_ClosePipe>
    USBH_FreePipe  (phost, CDC_Handle->DataItf.OutPipe);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	7b5b      	ldrb	r3, [r3, #13]
 800c688:	4619      	mov	r1, r3
 800c68a:	6878      	ldr	r0, [r7, #4]
 800c68c:	f001 fe19 	bl	800e2c2 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	2200      	movs	r2, #0
 800c694:	735a      	strb	r2, [r3, #13]
  }

  if(phost->pActiveClass->pData)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c69c:	69db      	ldr	r3, [r3, #28]
 800c69e:	2b00      	cmp	r3, #0
 800c6a0:	d00b      	beq.n	800c6ba <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free (phost->pActiveClass->pData);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c6a8:	69db      	ldr	r3, [r3, #28]
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f015 ff3e 	bl	802252c <free>
    phost->pActiveClass->pData = 0U;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c6b6:	2200      	movs	r2, #0
 800c6b8:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800c6ba:	2300      	movs	r3, #0
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3710      	adds	r7, #16
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bd80      	pop	{r7, pc}

0800c6c4 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest (USBH_HandleTypeDef *phost)
{
 800c6c4:	b580      	push	{r7, lr}
 800c6c6:	b084      	sub	sp, #16
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_FAIL ;
 800c6cc:	2302      	movs	r3, #2
 800c6ce:	73fb      	strb	r3, [r7, #15]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c6d6:	69db      	ldr	r3, [r3, #28]
 800c6d8:	60bb      	str	r3, [r7, #8]

  /*Issue the get line coding request*/
  status =   GetLineCoding(phost, &CDC_Handle->LineCoding);
 800c6da:	68bb      	ldr	r3, [r7, #8]
 800c6dc:	3340      	adds	r3, #64	; 0x40
 800c6de:	4619      	mov	r1, r3
 800c6e0:	6878      	ldr	r0, [r7, #4]
 800c6e2:	f000 f8b2 	bl	800c84a <GetLineCoding>
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	73fb      	strb	r3, [r7, #15]
  if(status == USBH_OK)
 800c6ea:	7bfb      	ldrb	r3, [r7, #15]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d105      	bne.n	800c6fc <USBH_CDC_ClassRequest+0x38>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800c6f6:	2102      	movs	r1, #2
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	4798      	blx	r3
  }
  return status;
 800c6fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3710      	adds	r7, #16
 800c702:	46bd      	mov	sp, r7
 800c704:	bd80      	pop	{r7, pc}
	...

0800c708 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process (USBH_HandleTypeDef *phost)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c710:	2301      	movs	r3, #1
 800c712:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800c714:	2300      	movs	r3, #0
 800c716:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c71e:	69db      	ldr	r3, [r3, #28]
 800c720:	60bb      	str	r3, [r7, #8]

  switch(CDC_Handle->state)
 800c722:	68bb      	ldr	r3, [r7, #8]
 800c724:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800c728:	2b04      	cmp	r3, #4
 800c72a:	d877      	bhi.n	800c81c <USBH_CDC_Process+0x114>
 800c72c:	a201      	add	r2, pc, #4	; (adr r2, 800c734 <USBH_CDC_Process+0x2c>)
 800c72e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c732:	bf00      	nop
 800c734:	0800c749 	.word	0x0800c749
 800c738:	0800c74f 	.word	0x0800c74f
 800c73c:	0800c77f 	.word	0x0800c77f
 800c740:	0800c7f3 	.word	0x0800c7f3
 800c744:	0800c801 	.word	0x0800c801
  {

  case CDC_IDLE_STATE:
    status = USBH_OK;
 800c748:	2300      	movs	r3, #0
 800c74a:	73fb      	strb	r3, [r7, #15]
    break;
 800c74c:	e06d      	b.n	800c82a <USBH_CDC_Process+0x122>

  case CDC_SET_LINE_CODING_STATE:
    req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800c74e:	68bb      	ldr	r3, [r7, #8]
 800c750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c752:	4619      	mov	r1, r3
 800c754:	6878      	ldr	r0, [r7, #4]
 800c756:	f000 f897 	bl	800c888 <SetLineCoding>
 800c75a:	4603      	mov	r3, r0
 800c75c:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800c75e:	7bbb      	ldrb	r3, [r7, #14]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d104      	bne.n	800c76e <USBH_CDC_Process+0x66>
    {
      CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	2202      	movs	r2, #2
 800c768:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800c76c:	e058      	b.n	800c820 <USBH_CDC_Process+0x118>
      if(req_status != USBH_BUSY)
 800c76e:	7bbb      	ldrb	r3, [r7, #14]
 800c770:	2b01      	cmp	r3, #1
 800c772:	d055      	beq.n	800c820 <USBH_CDC_Process+0x118>
        CDC_Handle->state = CDC_ERROR_STATE;
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	2204      	movs	r2, #4
 800c778:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800c77c:	e050      	b.n	800c820 <USBH_CDC_Process+0x118>


  case CDC_GET_LAST_LINE_CODING_STATE:
    req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800c77e:	68bb      	ldr	r3, [r7, #8]
 800c780:	3340      	adds	r3, #64	; 0x40
 800c782:	4619      	mov	r1, r3
 800c784:	6878      	ldr	r0, [r7, #4]
 800c786:	f000 f860 	bl	800c84a <GetLineCoding>
 800c78a:	4603      	mov	r3, r0
 800c78c:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK)
 800c78e:	7bbb      	ldrb	r3, [r7, #14]
 800c790:	2b00      	cmp	r3, #0
 800c792:	d126      	bne.n	800c7e2 <USBH_CDC_Process+0xda>
    {
      CDC_Handle->state = CDC_IDLE_STATE;
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	2200      	movs	r2, #0
 800c798:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800c7a2:	68bb      	ldr	r3, [r7, #8]
 800c7a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7a6:	791b      	ldrb	r3, [r3, #4]
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d13b      	bne.n	800c824 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c7ac:	68bb      	ldr	r3, [r7, #8]
 800c7ae:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800c7b2:	68bb      	ldr	r3, [r7, #8]
 800c7b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7b6:	799b      	ldrb	r3, [r3, #6]
      if((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800c7b8:	429a      	cmp	r2, r3
 800c7ba:	d133      	bne.n	800c824 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800c7c2:	68bb      	ldr	r3, [r7, #8]
 800c7c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7c6:	795b      	ldrb	r3, [r3, #5]
         (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d12b      	bne.n	800c824 <USBH_CDC_Process+0x11c>
         (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c7d0:	68bb      	ldr	r3, [r7, #8]
 800c7d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c7d4:	681b      	ldr	r3, [r3, #0]
         (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800c7d6:	429a      	cmp	r2, r3
 800c7d8:	d124      	bne.n	800c824 <USBH_CDC_Process+0x11c>
      {
        USBH_CDC_LineCodingChanged(phost);
 800c7da:	6878      	ldr	r0, [r7, #4]
 800c7dc:	f000 f984 	bl	800cae8 <USBH_CDC_LineCodingChanged>
      if(req_status != USBH_BUSY)
      {
        CDC_Handle->state = CDC_ERROR_STATE;
      }
    }
    break;
 800c7e0:	e020      	b.n	800c824 <USBH_CDC_Process+0x11c>
      if(req_status != USBH_BUSY)
 800c7e2:	7bbb      	ldrb	r3, [r7, #14]
 800c7e4:	2b01      	cmp	r3, #1
 800c7e6:	d01d      	beq.n	800c824 <USBH_CDC_Process+0x11c>
        CDC_Handle->state = CDC_ERROR_STATE;
 800c7e8:	68bb      	ldr	r3, [r7, #8]
 800c7ea:	2204      	movs	r2, #4
 800c7ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    break;
 800c7f0:	e018      	b.n	800c824 <USBH_CDC_Process+0x11c>

  case CDC_TRANSFER_DATA:
    CDC_ProcessTransmission(phost);
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f000 f867 	bl	800c8c6 <CDC_ProcessTransmission>
    CDC_ProcessReception(phost);
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 f8f8 	bl	800c9ee <CDC_ProcessReception>
    break;
 800c7fe:	e014      	b.n	800c82a <USBH_CDC_Process+0x122>

  case CDC_ERROR_STATE:
    req_status = USBH_ClrFeature(phost, 0x00U);
 800c800:	2100      	movs	r1, #0
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f000 fffa 	bl	800d7fc <USBH_ClrFeature>
 800c808:	4603      	mov	r3, r0
 800c80a:	73bb      	strb	r3, [r7, #14]

    if(req_status == USBH_OK )
 800c80c:	7bbb      	ldrb	r3, [r7, #14]
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d10a      	bne.n	800c828 <USBH_CDC_Process+0x120>
    {
      /*Change the state to waiting*/
      CDC_Handle->state = CDC_IDLE_STATE ;
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	2200      	movs	r2, #0
 800c816:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    }
    break;
 800c81a:	e005      	b.n	800c828 <USBH_CDC_Process+0x120>

  default:
    break;
 800c81c:	bf00      	nop
 800c81e:	e004      	b.n	800c82a <USBH_CDC_Process+0x122>
    break;
 800c820:	bf00      	nop
 800c822:	e002      	b.n	800c82a <USBH_CDC_Process+0x122>
    break;
 800c824:	bf00      	nop
 800c826:	e000      	b.n	800c82a <USBH_CDC_Process+0x122>
    break;
 800c828:	bf00      	nop

  }

  return status;
 800c82a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3710      	adds	r7, #16
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}

0800c834 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess (USBH_HandleTypeDef *phost)
{
 800c834:	b480      	push	{r7}
 800c836:	b083      	sub	sp, #12
 800c838:	af00      	add	r7, sp, #0
 800c83a:	6078      	str	r0, [r7, #4]
  return USBH_OK;
 800c83c:	2300      	movs	r3, #0
}
 800c83e:	4618      	mov	r0, r3
 800c840:	370c      	adds	r7, #12
 800c842:	46bd      	mov	sp, r7
 800c844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c848:	4770      	bx	lr

0800c84a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800c84a:	b580      	push	{r7, lr}
 800c84c:	b082      	sub	sp, #8
 800c84e:	af00      	add	r7, sp, #0
 800c850:	6078      	str	r0, [r7, #4]
 800c852:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	22a1      	movs	r2, #161	; 0xa1
 800c858:	741a      	strb	r2, [r3, #16]
                              USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2221      	movs	r2, #33	; 0x21
 800c85e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2200      	movs	r2, #0
 800c864:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2200      	movs	r2, #0
 800c86a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2207      	movs	r2, #7
 800c870:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c872:	683b      	ldr	r3, [r7, #0]
 800c874:	2207      	movs	r2, #7
 800c876:	4619      	mov	r1, r3
 800c878:	6878      	ldr	r0, [r7, #4]
 800c87a:	f001 f99f 	bl	800dbbc <USBH_CtlReq>
 800c87e:	4603      	mov	r3, r0
}
 800c880:	4618      	mov	r0, r3
 800c882:	3708      	adds	r7, #8
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}

0800c888 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800c888:	b580      	push	{r7, lr}
 800c88a:	b082      	sub	sp, #8
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
 800c890:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	2221      	movs	r2, #33	; 0x21
 800c896:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	2220      	movs	r2, #32
 800c89c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2207      	movs	r2, #7
 800c8ae:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	2207      	movs	r2, #7
 800c8b4:	4619      	mov	r1, r3
 800c8b6:	6878      	ldr	r0, [r7, #4]
 800c8b8:	f001 f980 	bl	800dbbc <USBH_CtlReq>
 800c8bc:	4603      	mov	r3, r0
}
 800c8be:	4618      	mov	r0, r3
 800c8c0:	3708      	adds	r7, #8
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}

0800c8c6 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800c8c6:	b580      	push	{r7, lr}
 800c8c8:	b086      	sub	sp, #24
 800c8ca:	af02      	add	r7, sp, #8
 800c8cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c8d4:	69db      	ldr	r3, [r3, #28]
 800c8d6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c8d8:	2300      	movs	r3, #0
 800c8da:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800c8dc:	68fb      	ldr	r3, [r7, #12]
 800c8de:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800c8e2:	2b01      	cmp	r3, #1
 800c8e4:	d002      	beq.n	800c8ec <CDC_ProcessTransmission+0x26>
 800c8e6:	2b02      	cmp	r3, #2
 800c8e8:	d025      	beq.n	800c936 <CDC_ProcessTransmission+0x70>
      }
    }
    break;

  default:
    break;
 800c8ea:	e07c      	b.n	800c9e6 <CDC_ProcessTransmission+0x120>
    if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c8ec:	68fb      	ldr	r3, [r7, #12]
 800c8ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8f0:	68fa      	ldr	r2, [r7, #12]
 800c8f2:	8b12      	ldrh	r2, [r2, #24]
 800c8f4:	4293      	cmp	r3, r2
 800c8f6:	d90c      	bls.n	800c912 <CDC_ProcessTransmission+0x4c>
      USBH_BulkSendData (phost,
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	69d9      	ldr	r1, [r3, #28]
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	8b1a      	ldrh	r2, [r3, #24]
 800c900:	68fb      	ldr	r3, [r7, #12]
 800c902:	7b58      	ldrb	r0, [r3, #13]
 800c904:	2301      	movs	r3, #1
 800c906:	9300      	str	r3, [sp, #0]
 800c908:	4603      	mov	r3, r0
 800c90a:	6878      	ldr	r0, [r7, #4]
 800c90c:	f001 fc49 	bl	800e1a2 <USBH_BulkSendData>
 800c910:	e00c      	b.n	800c92c <CDC_ProcessTransmission+0x66>
      USBH_BulkSendData (phost,
 800c912:	68fb      	ldr	r3, [r7, #12]
 800c914:	69d9      	ldr	r1, [r3, #28]
                         (uint16_t)CDC_Handle->TxDataLength,
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      USBH_BulkSendData (phost,
 800c91a:	b29a      	uxth	r2, r3
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	7b58      	ldrb	r0, [r3, #13]
 800c920:	2301      	movs	r3, #1
 800c922:	9300      	str	r3, [sp, #0]
 800c924:	4603      	mov	r3, r0
 800c926:	6878      	ldr	r0, [r7, #4]
 800c928:	f001 fc3b 	bl	800e1a2 <USBH_BulkSendData>
    CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	2202      	movs	r2, #2
 800c930:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
    break;
 800c934:	e057      	b.n	800c9e6 <CDC_ProcessTransmission+0x120>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	7b5b      	ldrb	r3, [r3, #13]
 800c93a:	4619      	mov	r1, r3
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f00d f9af 	bl	8019ca0 <USBH_LL_GetURBState>
 800c942:	4603      	mov	r3, r0
 800c944:	72fb      	strb	r3, [r7, #11]
    if (URB_Status == USBH_URB_DONE)
 800c946:	7afb      	ldrb	r3, [r7, #11]
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d136      	bne.n	800c9ba <CDC_ProcessTransmission+0xf4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c950:	68fa      	ldr	r2, [r7, #12]
 800c952:	8b12      	ldrh	r2, [r2, #24]
 800c954:	4293      	cmp	r3, r2
 800c956:	d90e      	bls.n	800c976 <CDC_ProcessTransmission+0xb0>
        CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c95c:	68fa      	ldr	r2, [r7, #12]
 800c95e:	8b12      	ldrh	r2, [r2, #24]
 800c960:	1a9a      	subs	r2, r3, r2
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	625a      	str	r2, [r3, #36]	; 0x24
        CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	69db      	ldr	r3, [r3, #28]
 800c96a:	68fa      	ldr	r2, [r7, #12]
 800c96c:	8b12      	ldrh	r2, [r2, #24]
 800c96e:	441a      	add	r2, r3
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	61da      	str	r2, [r3, #28]
 800c974:	e002      	b.n	800c97c <CDC_ProcessTransmission+0xb6>
        CDC_Handle->TxDataLength = 0U;
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	2200      	movs	r2, #0
 800c97a:	625a      	str	r2, [r3, #36]	; 0x24
      if (CDC_Handle->TxDataLength > 0U)
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c980:	2b00      	cmp	r3, #0
 800c982:	d004      	beq.n	800c98e <CDC_ProcessTransmission+0xc8>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	2201      	movs	r2, #1
 800c988:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
 800c98c:	e006      	b.n	800c99c <CDC_ProcessTransmission+0xd6>
        CDC_Handle->data_tx_state = CDC_IDLE;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	2200      	movs	r2, #0
 800c992:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        USBH_CDC_TransmitCallback(phost);
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f000 f892 	bl	800cac0 <USBH_CDC_TransmitCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2204      	movs	r2, #4
 800c9a0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	4619      	mov	r1, r3
 800c9b4:	f004 fd56 	bl	8011464 <osMessagePut>
    break;
 800c9b8:	e014      	b.n	800c9e4 <CDC_ProcessTransmission+0x11e>
      if (URB_Status == USBH_URB_NOTREADY)
 800c9ba:	7afb      	ldrb	r3, [r7, #11]
 800c9bc:	2b02      	cmp	r3, #2
 800c9be:	d111      	bne.n	800c9e4 <CDC_ProcessTransmission+0x11e>
        CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	2201      	movs	r2, #1
 800c9c4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
        phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	2204      	movs	r2, #4
 800c9cc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800c9d0:	687b      	ldr	r3, [r7, #4]
 800c9d2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800c9dc:	2200      	movs	r2, #0
 800c9de:	4619      	mov	r1, r3
 800c9e0:	f004 fd40 	bl	8011464 <osMessagePut>
    break;
 800c9e4:	bf00      	nop
  }
}
 800c9e6:	bf00      	nop
 800c9e8:	3710      	adds	r7, #16
 800c9ea:	46bd      	mov	sp, r7
 800c9ec:	bd80      	pop	{r7, pc}

0800c9ee <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800c9ee:	b580      	push	{r7, lr}
 800c9f0:	b086      	sub	sp, #24
 800c9f2:	af00      	add	r7, sp, #0
 800c9f4:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle =  (CDC_HandleTypeDef*) phost->pActiveClass->pData;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800c9fc:	69db      	ldr	r3, [r3, #28]
 800c9fe:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ca00:	2300      	movs	r3, #0
 800ca02:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch(CDC_Handle->data_rx_state)
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800ca0a:	2b03      	cmp	r3, #3
 800ca0c:	d002      	beq.n	800ca14 <CDC_ProcessReception+0x26>
 800ca0e:	2b04      	cmp	r3, #4
 800ca10:	d00e      	beq.n	800ca30 <CDC_ProcessReception+0x42>
#endif
    }
    break;

  default:
    break;
 800ca12:	e051      	b.n	800cab8 <CDC_ProcessReception+0xca>
    USBH_BulkReceiveData (phost,
 800ca14:	697b      	ldr	r3, [r7, #20]
 800ca16:	6a19      	ldr	r1, [r3, #32]
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	8b5a      	ldrh	r2, [r3, #26]
 800ca1c:	697b      	ldr	r3, [r7, #20]
 800ca1e:	7b1b      	ldrb	r3, [r3, #12]
 800ca20:	6878      	ldr	r0, [r7, #4]
 800ca22:	f001 fbe3 	bl	800e1ec <USBH_BulkReceiveData>
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	2204      	movs	r2, #4
 800ca2a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
    break;
 800ca2e:	e043      	b.n	800cab8 <CDC_ProcessReception+0xca>
    URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800ca30:	697b      	ldr	r3, [r7, #20]
 800ca32:	7b1b      	ldrb	r3, [r3, #12]
 800ca34:	4619      	mov	r1, r3
 800ca36:	6878      	ldr	r0, [r7, #4]
 800ca38:	f00d f932 	bl	8019ca0 <USBH_LL_GetURBState>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	74fb      	strb	r3, [r7, #19]
    if(URB_Status == USBH_URB_DONE)
 800ca40:	7cfb      	ldrb	r3, [r7, #19]
 800ca42:	2b01      	cmp	r3, #1
 800ca44:	d137      	bne.n	800cab6 <CDC_ProcessReception+0xc8>
      length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800ca46:	697b      	ldr	r3, [r7, #20]
 800ca48:	7b1b      	ldrb	r3, [r3, #12]
 800ca4a:	4619      	mov	r1, r3
 800ca4c:	6878      	ldr	r0, [r7, #4]
 800ca4e:	f00d f895 	bl	8019b7c <USBH_LL_GetLastXferSize>
 800ca52:	60f8      	str	r0, [r7, #12]
      if(((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800ca54:	697b      	ldr	r3, [r7, #20]
 800ca56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca58:	68fa      	ldr	r2, [r7, #12]
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d016      	beq.n	800ca8c <CDC_ProcessReception+0x9e>
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	8b5b      	ldrh	r3, [r3, #26]
 800ca62:	461a      	mov	r2, r3
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	4293      	cmp	r3, r2
 800ca68:	d910      	bls.n	800ca8c <CDC_ProcessReception+0x9e>
        CDC_Handle->RxDataLength -= length ;
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	1ad2      	subs	r2, r2, r3
 800ca72:	697b      	ldr	r3, [r7, #20]
 800ca74:	629a      	str	r2, [r3, #40]	; 0x28
        CDC_Handle->pRxData += length;
 800ca76:	697b      	ldr	r3, [r7, #20]
 800ca78:	6a1a      	ldr	r2, [r3, #32]
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	441a      	add	r2, r3
 800ca7e:	697b      	ldr	r3, [r7, #20]
 800ca80:	621a      	str	r2, [r3, #32]
        CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	2203      	movs	r2, #3
 800ca86:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
 800ca8a:	e006      	b.n	800ca9a <CDC_ProcessReception+0xac>
        CDC_Handle->data_rx_state = CDC_IDLE;
 800ca8c:	697b      	ldr	r3, [r7, #20]
 800ca8e:	2200      	movs	r2, #0
 800ca90:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
        USBH_CDC_ReceiveCallback(phost);
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f000 f81d 	bl	800cad4 <USBH_CDC_ReceiveCallback>
      phost->os_msg = (uint32_t)USBH_CLASS_EVENT;
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2204      	movs	r2, #4
 800ca9e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800caae:	2200      	movs	r2, #0
 800cab0:	4619      	mov	r1, r3
 800cab2:	f004 fcd7 	bl	8011464 <osMessagePut>
    break;
 800cab6:	bf00      	nop
  }
}
 800cab8:	bf00      	nop
 800caba:	3718      	adds	r7, #24
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}

0800cac0 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800cac0:	b480      	push	{r7}
 800cac2:	b083      	sub	sp, #12
 800cac4:	af00      	add	r7, sp, #0
 800cac6:	6078      	str	r0, [r7, #4]

}
 800cac8:	bf00      	nop
 800caca:	370c      	adds	r7, #12
 800cacc:	46bd      	mov	sp, r7
 800cace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad2:	4770      	bx	lr

0800cad4 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800cad4:	b480      	push	{r7}
 800cad6:	b083      	sub	sp, #12
 800cad8:	af00      	add	r7, sp, #0
 800cada:	6078      	str	r0, [r7, #4]

}
 800cadc:	bf00      	nop
 800cade:	370c      	adds	r7, #12
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr

0800cae8 <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800cae8:	b480      	push	{r7}
 800caea:	b083      	sub	sp, #12
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]

}
 800caf0:	bf00      	nop
 800caf2:	370c      	adds	r7, #12
 800caf4:	46bd      	mov	sp, r7
 800caf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cafa:	4770      	bx	lr

0800cafc <USBH_Init>:
  * @param  phost: Host Handle
  * @param  pUsrFunc: User Callback
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost, void (*pUsrFunc)(USBH_HandleTypeDef *phost, uint8_t id), uint8_t id)
{
 800cafc:	b5b0      	push	{r4, r5, r7, lr}
 800cafe:	b08c      	sub	sp, #48	; 0x30
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	60f8      	str	r0, [r7, #12]
 800cb04:	60b9      	str	r1, [r7, #8]
 800cb06:	4613      	mov	r3, r2
 800cb08:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(phost == NULL)
 800cb0a:	68fb      	ldr	r3, [r7, #12]
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	d101      	bne.n	800cb14 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800cb10:	2302      	movs	r3, #2
 800cb12:	e03c      	b.n	800cb8e <USBH_Init+0x92>
  }

  /* Set DRiver ID */
  phost->id = id;
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	79fa      	ldrb	r2, [r7, #7]
 800cb18:	f883 23c0 	strb.w	r2, [r3, #960]	; 0x3c0

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	2200      	movs	r2, #0
 800cb20:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
  phost->ClassNumber = 0U;
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2200      	movs	r2, #0
 800cb28:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 800cb2c:	68f8      	ldr	r0, [r7, #12]
 800cb2e:	f000 f837 	bl	800cba0 <DeInitStateMachine>

  /* Assign User process */
  if(pUsrFunc != NULL)
 800cb32:	68bb      	ldr	r3, [r7, #8]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d003      	beq.n	800cb40 <USBH_Init+0x44>
  {
    phost->pUser = pUsrFunc;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	68ba      	ldr	r2, [r7, #8]
 800cb3c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8

#if (USBH_USE_OS == 1U)
#if (osCMSIS < 0x20000U)

  /* Create USB Host Queue */
  osMessageQDef(USBH_Queue, MSGQUEUE_OBJECTS, uint16_t);
 800cb40:	4a15      	ldr	r2, [pc, #84]	; (800cb98 <USBH_Init+0x9c>)
 800cb42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cb46:	e892 0003 	ldmia.w	r2, {r0, r1}
 800cb4a:	e883 0003 	stmia.w	r3, {r0, r1}
  phost->os_event = osMessageCreate (osMessageQ(USBH_Queue), NULL);
 800cb4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800cb52:	2100      	movs	r1, #0
 800cb54:	4618      	mov	r0, r3
 800cb56:	f004 fc73 	bl	8011440 <osMessageCreate>
 800cb5a:	4602      	mov	r2, r0
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	f8c3 23cc 	str.w	r2, [r3, #972]	; 0x3cc

  /* Create USB Host Task */
#if defined (USBH_PROCESS_STACK_SIZE)
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, USBH_PROCESS_STACK_SIZE);
 800cb62:	4b0e      	ldr	r3, [pc, #56]	; (800cb9c <USBH_Init+0xa0>)
 800cb64:	f107 0414 	add.w	r4, r7, #20
 800cb68:	461d      	mov	r5, r3
 800cb6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800cb6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800cb6e:	682b      	ldr	r3, [r5, #0]
 800cb70:	6023      	str	r3, [r4, #0]
#else
  osThreadDef(USBH_Thread, USBH_Process_OS, USBH_PROCESS_PRIO, 0U, 8U * configMINIMAL_STACK_SIZE);
#endif /* defined (USBH_PROCESS_STACK_SIZE) */

  phost->thread = osThreadCreate (osThread(USBH_Thread), phost);
 800cb72:	f107 0314 	add.w	r3, r7, #20
 800cb76:	68f9      	ldr	r1, [r7, #12]
 800cb78:	4618      	mov	r0, r3
 800cb7a:	f004 fb7d 	bl	8011278 <osThreadCreate>
 800cb7e:	4602      	mov	r2, r0
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 800cb86:	68f8      	ldr	r0, [r7, #12]
 800cb88:	f00c ff46 	bl	8019a18 <USBH_LL_Init>

  return USBH_OK;
 800cb8c:	2300      	movs	r3, #0
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3730      	adds	r7, #48	; 0x30
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bdb0      	pop	{r4, r5, r7, pc}
 800cb96:	bf00      	nop
 800cb98:	08023468 	.word	0x08023468
 800cb9c:	0802347c 	.word	0x0802347c

0800cba0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef  DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800cba0:	b480      	push	{r7}
 800cba2:	b085      	sub	sp, #20
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800cba8:	2300      	movs	r3, #0
 800cbaa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800cbac:	e008      	b.n	800cbc0 <DeInitStateMachine+0x20>
  {
    phost->Pipes[i] = 0U;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	68fa      	ldr	r2, [r7, #12]
 800cbb2:	32e0      	adds	r2, #224	; 0xe0
 800cbb4:	2100      	movs	r1, #0
 800cbb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for ( ; i < USBH_MAX_PIPES_NBR; i++)
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	3301      	adds	r3, #1
 800cbbe:	60fb      	str	r3, [r7, #12]
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	2b0e      	cmp	r3, #14
 800cbc4:	d9f3      	bls.n	800cbae <DeInitStateMachine+0xe>
  }

  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	60fb      	str	r3, [r7, #12]
 800cbca:	e009      	b.n	800cbe0 <DeInitStateMachine+0x40>
  {
    phost->device.Data[i] = 0U;
 800cbcc:	687a      	ldr	r2, [r7, #4]
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	4413      	add	r3, r2
 800cbd2:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	701a      	strb	r2, [r3, #0]
  for(i = 0U; i< USBH_MAX_DATA_BUFFER; i++)
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	3301      	adds	r3, #1
 800cbde:	60fb      	str	r3, [r7, #12]
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cbe6:	d3f1      	bcc.n	800cbcc <DeInitStateMachine+0x2c>
  }

  phost->gState = HOST_IDLE;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	2200      	movs	r2, #0
 800cbec:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	2201      	movs	r2, #1
 800cbf8:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	2200      	movs	r2, #0
 800cbfe:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc

  phost->Control.state = CTRL_SETUP;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	2201      	movs	r2, #1
 800cc06:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2240      	movs	r2, #64	; 0x40
 800cc0c:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2200      	movs	r2, #0
 800cc12:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	2200      	movs	r2, #0
 800cc18:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed   = USBH_SPEED_FULL;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2201      	movs	r2, #1
 800cc20:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

  return USBH_OK;
 800cc24:	2300      	movs	r3, #0
}
 800cc26:	4618      	mov	r0, r3
 800cc28:	3714      	adds	r7, #20
 800cc2a:	46bd      	mov	sp, r7
 800cc2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc30:	4770      	bx	lr

0800cc32 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800cc32:	b480      	push	{r7}
 800cc34:	b085      	sub	sp, #20
 800cc36:	af00      	add	r7, sp, #0
 800cc38:	6078      	str	r0, [r7, #4]
 800cc3a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_OK;
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	73fb      	strb	r3, [r7, #15]

  if(pclass != 0)
 800cc40:	683b      	ldr	r3, [r7, #0]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d017      	beq.n	800cc76 <USBH_RegisterClass+0x44>
  {
    if(phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d10f      	bne.n	800cc70 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cc56:	1c59      	adds	r1, r3, #1
 800cc58:	687a      	ldr	r2, [r7, #4]
 800cc5a:	f8c2 137c 	str.w	r1, [r2, #892]	; 0x37c
 800cc5e:	687a      	ldr	r2, [r7, #4]
 800cc60:	33dc      	adds	r3, #220	; 0xdc
 800cc62:	009b      	lsls	r3, r3, #2
 800cc64:	4413      	add	r3, r2
 800cc66:	683a      	ldr	r2, [r7, #0]
 800cc68:	605a      	str	r2, [r3, #4]
      status = USBH_OK;
 800cc6a:	2300      	movs	r3, #0
 800cc6c:	73fb      	strb	r3, [r7, #15]
 800cc6e:	e004      	b.n	800cc7a <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800cc70:	2302      	movs	r3, #2
 800cc72:	73fb      	strb	r3, [r7, #15]
 800cc74:	e001      	b.n	800cc7a <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800cc76:	2302      	movs	r3, #2
 800cc78:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cc7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc7c:	4618      	mov	r0, r3
 800cc7e:	3714      	adds	r7, #20
 800cc80:	46bd      	mov	sp, r7
 800cc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc86:	4770      	bx	lr

0800cc88 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800cc88:	b480      	push	{r7}
 800cc8a:	b085      	sub	sp, #20
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	460b      	mov	r3, r1
 800cc92:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_OK;
 800cc94:	2300      	movs	r3, #0
 800cc96:	73fb      	strb	r3, [r7, #15]

  if(interface < phost->device.CfgDesc.bNumInterfaces)
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f893 3338 	ldrb.w	r3, [r3, #824]	; 0x338
 800cc9e:	78fa      	ldrb	r2, [r7, #3]
 800cca0:	429a      	cmp	r2, r3
 800cca2:	d204      	bcs.n	800ccae <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	78fa      	ldrb	r2, [r7, #3]
 800cca8:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
 800ccac:	e001      	b.n	800ccb2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog ("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol );
  }
  else
  {
    USBH_ErrLog ("Cannot Select This Interface.");
    status = USBH_FAIL;
 800ccae:	2302      	movs	r3, #2
 800ccb0:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800ccb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	3714      	adds	r7, #20
 800ccb8:	46bd      	mov	sp, r7
 800ccba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccbe:	4770      	bx	lr

0800ccc0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800ccc0:	b480      	push	{r7}
 800ccc2:	b087      	sub	sp, #28
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	4608      	mov	r0, r1
 800ccca:	4611      	mov	r1, r2
 800cccc:	461a      	mov	r2, r3
 800ccce:	4603      	mov	r3, r0
 800ccd0:	70fb      	strb	r3, [r7, #3]
 800ccd2:	460b      	mov	r3, r1
 800ccd4:	70bb      	strb	r3, [r7, #2]
 800ccd6:	4613      	mov	r3, r2
 800ccd8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_CfgDescTypeDef          *pcfg ;
  uint8_t                        if_ix = 0U;
 800ccda:	2300      	movs	r3, #0
 800ccdc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800ccde:	2300      	movs	r3, #0
 800cce0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800cce8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800ccea:	e025      	b.n	800cd38 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800ccec:	7dfb      	ldrb	r3, [r7, #23]
 800ccee:	221a      	movs	r2, #26
 800ccf0:	fb02 f303 	mul.w	r3, r2, r3
 800ccf4:	3308      	adds	r3, #8
 800ccf6:	68fa      	ldr	r2, [r7, #12]
 800ccf8:	4413      	add	r3, r2
 800ccfa:	3302      	adds	r3, #2
 800ccfc:	613b      	str	r3, [r7, #16]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	795b      	ldrb	r3, [r3, #5]
 800cd02:	78fa      	ldrb	r2, [r7, #3]
 800cd04:	429a      	cmp	r2, r3
 800cd06:	d002      	beq.n	800cd0e <USBH_FindInterface+0x4e>
 800cd08:	78fb      	ldrb	r3, [r7, #3]
 800cd0a:	2bff      	cmp	r3, #255	; 0xff
 800cd0c:	d111      	bne.n	800cd32 <USBH_FindInterface+0x72>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800cd0e:	693b      	ldr	r3, [r7, #16]
 800cd10:	799b      	ldrb	r3, [r3, #6]
    if(((pif->bInterfaceClass == Class) || (Class == 0xFFU))&&
 800cd12:	78ba      	ldrb	r2, [r7, #2]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	d002      	beq.n	800cd1e <USBH_FindInterface+0x5e>
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800cd18:	78bb      	ldrb	r3, [r7, #2]
 800cd1a:	2bff      	cmp	r3, #255	; 0xff
 800cd1c:	d109      	bne.n	800cd32 <USBH_FindInterface+0x72>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cd1e:	693b      	ldr	r3, [r7, #16]
 800cd20:	79db      	ldrb	r3, [r3, #7]
       ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU))&&
 800cd22:	787a      	ldrb	r2, [r7, #1]
 800cd24:	429a      	cmp	r2, r3
 800cd26:	d002      	beq.n	800cd2e <USBH_FindInterface+0x6e>
         ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800cd28:	787b      	ldrb	r3, [r7, #1]
 800cd2a:	2bff      	cmp	r3, #255	; 0xff
 800cd2c:	d101      	bne.n	800cd32 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800cd2e:	7dfb      	ldrb	r3, [r7, #23]
 800cd30:	e006      	b.n	800cd40 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800cd32:	7dfb      	ldrb	r3, [r7, #23]
 800cd34:	3301      	adds	r3, #1
 800cd36:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800cd38:	7dfb      	ldrb	r3, [r7, #23]
 800cd3a:	2b01      	cmp	r3, #1
 800cd3c:	d9d6      	bls.n	800ccec <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800cd3e:	23ff      	movs	r3, #255	; 0xff
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	371c      	adds	r7, #28
 800cd44:	46bd      	mov	sp, r7
 800cd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4a:	4770      	bx	lr

0800cd4c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start  (USBH_HandleTypeDef *phost)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b082      	sub	sp, #8
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f00c fe9b 	bl	8019a90 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS (phost, TRUE);
 800cd5a:	2101      	movs	r1, #1
 800cd5c:	6878      	ldr	r0, [r7, #4]
 800cd5e:	f00c ffb2 	bl	8019cc6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800cd62:	2300      	movs	r3, #0
}
 800cd64:	4618      	mov	r0, r3
 800cd66:	3708      	adds	r7, #8
 800cd68:	46bd      	mov	sp, r7
 800cd6a:	bd80      	pop	{r7, pc}

0800cd6c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b088      	sub	sp, #32
 800cd70:	af04      	add	r7, sp, #16
 800cd72:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800cd74:	2302      	movs	r3, #2
 800cd76:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800cd78:	2300      	movs	r3, #0
 800cd7a:	73fb      	strb	r3, [r7, #15]

  /* check for Host port events */
  if (((USBH_IsPortEnabled(phost) == 0U)) && (phost->gState != HOST_IDLE))
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f000 fb7e 	bl	800d47e <USBH_IsPortEnabled>
 800cd82:	4603      	mov	r3, r0
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d10c      	bne.n	800cda2 <USBH_Process+0x36>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	781b      	ldrb	r3, [r3, #0]
 800cd8c:	b2db      	uxtb	r3, r3
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d007      	beq.n	800cda2 <USBH_Process+0x36>
  {
    if(phost->gState != HOST_DEV_DISCONNECTED)
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	781b      	ldrb	r3, [r3, #0]
 800cd96:	b2db      	uxtb	r3, r3
 800cd98:	2b03      	cmp	r3, #3
 800cd9a:	d002      	beq.n	800cda2 <USBH_Process+0x36>
    {
      phost->gState = HOST_DEV_DISCONNECTED;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2203      	movs	r2, #3
 800cda0:	701a      	strb	r2, [r3, #0]
    }
  }

  switch (phost->gState)
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	781b      	ldrb	r3, [r3, #0]
 800cda6:	b2db      	uxtb	r3, r3
 800cda8:	2b0b      	cmp	r3, #11
 800cdaa:	f200 81ab 	bhi.w	800d104 <USBH_Process+0x398>
 800cdae:	a201      	add	r2, pc, #4	; (adr r2, 800cdb4 <USBH_Process+0x48>)
 800cdb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cdb4:	0800cde5 	.word	0x0800cde5
 800cdb8:	0800ce23 	.word	0x0800ce23
 800cdbc:	0800ce37 	.word	0x0800ce37
 800cdc0:	0800d0df 	.word	0x0800d0df
 800cdc4:	0800d105 	.word	0x0800d105
 800cdc8:	0800cee1 	.word	0x0800cee1
 800cdcc:	0800d079 	.word	0x0800d079
 800cdd0:	0800cf11 	.word	0x0800cf11
 800cdd4:	0800cf4d 	.word	0x0800cf4d
 800cdd8:	0800cf87 	.word	0x0800cf87
 800cddc:	0800cfcf 	.word	0x0800cfcf
 800cde0:	0800d0c7 	.word	0x0800d0c7
  {
  case HOST_IDLE :

    if (phost->device.is_connected)
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800cdea:	b2db      	uxtb	r3, r3
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	f000 818b 	beq.w	800d108 <USBH_Process+0x39c>
    {
      /* Wait for 200 ms after connection */
      phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	2201      	movs	r2, #1
 800cdf6:	701a      	strb	r2, [r3, #0]
      USBH_Delay(200U);
 800cdf8:	20c8      	movs	r0, #200	; 0xc8
 800cdfa:	f00c ffae 	bl	8019d5a <USBH_Delay>
      USBH_LL_ResetPort(phost);
 800cdfe:	6878      	ldr	r0, [r7, #4]
 800ce00:	f00c fea1 	bl	8019b46 <USBH_LL_ResetPort>

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	2201      	movs	r2, #1
 800ce08:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ce18:	2200      	movs	r2, #0
 800ce1a:	4619      	mov	r1, r3
 800ce1c:	f004 fb22 	bl	8011464 <osMessagePut>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800ce20:	e172      	b.n	800d108 <USBH_Process+0x39c>

  case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Eabled */

    if (phost->device.PortEnabled == 1U)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800ce28:	2b01      	cmp	r3, #1
 800ce2a:	f040 816f 	bne.w	800d10c <USBH_Process+0x3a0>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	2202      	movs	r2, #2
 800ce32:	701a      	strb	r2, [r3, #0]
    }
    break;
 800ce34:	e16a      	b.n	800d10c <USBH_Process+0x3a0>
  case HOST_DEV_ATTACHED :

    USBH_UsrLog("USB Device Attached");

    /* Wait for 100 ms after Reset */
    USBH_Delay(100U);
 800ce36:	2064      	movs	r0, #100	; 0x64
 800ce38:	f00c ff8f 	bl	8019d5a <USBH_Delay>

    phost->device.speed = USBH_LL_GetSpeed(phost);
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f00c fe5d 	bl	8019afc <USBH_LL_GetSpeed>
 800ce42:	4603      	mov	r3, r0
 800ce44:	461a      	mov	r2, r3
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

    phost->gState = HOST_ENUMERATION;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2205      	movs	r2, #5
 800ce50:	701a      	strb	r2, [r3, #0]

    phost->Control.pipe_out = USBH_AllocPipe (phost, 0x00U);
 800ce52:	2100      	movs	r1, #0
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f001 fa16 	bl	800e286 <USBH_AllocPipe>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	461a      	mov	r2, r3
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	715a      	strb	r2, [r3, #5]
    phost->Control.pipe_in  = USBH_AllocPipe (phost, 0x80U);
 800ce62:	2180      	movs	r1, #128	; 0x80
 800ce64:	6878      	ldr	r0, [r7, #4]
 800ce66:	f001 fa0e 	bl	800e286 <USBH_AllocPipe>
 800ce6a:	4603      	mov	r3, r0
 800ce6c:	461a      	mov	r2, r3
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	711a      	strb	r2, [r3, #4]


    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	7919      	ldrb	r1, [r3, #4]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_in,
                   0x80U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800ce82:	687a      	ldr	r2, [r7, #4]
 800ce84:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800ce86:	b292      	uxth	r2, r2
 800ce88:	9202      	str	r2, [sp, #8]
 800ce8a:	2200      	movs	r2, #0
 800ce8c:	9201      	str	r2, [sp, #4]
 800ce8e:	9300      	str	r3, [sp, #0]
 800ce90:	4603      	mov	r3, r0
 800ce92:	2280      	movs	r2, #128	; 0x80
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f001 f9c7 	bl	800e228 <USBH_OpenPipe>

    /* Open Control pipes */
    USBH_OpenPipe (phost,
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	7959      	ldrb	r1, [r3, #5]
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                   phost->Control.pipe_out,
                   0x00U,
                   phost->device.address,
                   phost->device.speed,
                   USBH_EP_CONTROL,
                   (uint16_t)phost->Control.pipe_size);
 800ceaa:	687a      	ldr	r2, [r7, #4]
 800ceac:	7992      	ldrb	r2, [r2, #6]
    USBH_OpenPipe (phost,
 800ceae:	b292      	uxth	r2, r2
 800ceb0:	9202      	str	r2, [sp, #8]
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	9201      	str	r2, [sp, #4]
 800ceb6:	9300      	str	r3, [sp, #0]
 800ceb8:	4603      	mov	r3, r0
 800ceba:	2200      	movs	r2, #0
 800cebc:	6878      	ldr	r0, [r7, #4]
 800cebe:	f001 f9b3 	bl	800e228 <USBH_OpenPipe>

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2201      	movs	r2, #1
 800cec6:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ced6:	2200      	movs	r2, #0
 800ced8:	4619      	mov	r1, r3
 800ceda:	f004 fac3 	bl	8011464 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800cede:	e120      	b.n	800d122 <USBH_Process+0x3b6>

  case HOST_ENUMERATION:
    /* Check for enumeration status */
    if ( USBH_HandleEnum(phost) == USBH_OK)
 800cee0:	6878      	ldr	r0, [r7, #4]
 800cee2:	f000 f923 	bl	800d12c <USBH_HandleEnum>
 800cee6:	4603      	mov	r3, r0
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	f040 8111 	bne.w	800d110 <USBH_Process+0x3a4>
    {
      /* The function shall return USBH_OK when full enumeration is complete */
      USBH_UsrLog ("Enumeration done.");
      phost->device.current_interface = 0U;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2200      	movs	r2, #0
 800cef2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
      if(phost->device.DevDesc.bNumConfigurations == 1U)
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f893 3333 	ldrb.w	r3, [r3, #819]	; 0x333
 800cefc:	2b01      	cmp	r3, #1
 800cefe:	d103      	bne.n	800cf08 <USBH_Process+0x19c>
      {
        USBH_UsrLog ("This device has only 1 configuration.");
        phost->gState  = HOST_SET_CONFIGURATION;
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2208      	movs	r2, #8
 800cf04:	701a      	strb	r2, [r3, #0]
      {
        phost->gState  = HOST_INPUT;
      }

    }
    break;
 800cf06:	e103      	b.n	800d110 <USBH_Process+0x3a4>
        phost->gState  = HOST_INPUT;
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2207      	movs	r2, #7
 800cf0c:	701a      	strb	r2, [r3, #0]
    break;
 800cf0e:	e0ff      	b.n	800d110 <USBH_Process+0x3a4>

  case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if(phost->pUser != NULL)
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	f000 80fc 	beq.w	800d114 <USBH_Process+0x3a8>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800cf22:	2101      	movs	r1, #1
 800cf24:	6878      	ldr	r0, [r7, #4]
 800cf26:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2208      	movs	r2, #8
 800cf2c:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2205      	movs	r2, #5
 800cf32:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cf42:	2200      	movs	r2, #0
 800cf44:	4619      	mov	r1, r3
 800cf46:	f004 fa8d 	bl	8011464 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800cf4a:	e0e3      	b.n	800d114 <USBH_Process+0x3a8>

  case HOST_SET_CONFIGURATION:
    /* set configuration */
    if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	f893 3339 	ldrb.w	r3, [r3, #825]	; 0x339
 800cf52:	b29b      	uxth	r3, r3
 800cf54:	4619      	mov	r1, r3
 800cf56:	6878      	ldr	r0, [r7, #4]
 800cf58:	f000 fc09 	bl	800d76e <USBH_SetCfg>
 800cf5c:	4603      	mov	r3, r0
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d102      	bne.n	800cf68 <USBH_Process+0x1fc>
    {
      phost->gState  = HOST_SET_WAKEUP_FEATURE;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	2209      	movs	r2, #9
 800cf66:	701a      	strb	r2, [r3, #0]
      USBH_UsrLog ("Default configuration set.");
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	4619      	mov	r1, r3
 800cf80:	f004 fa70 	bl	8011464 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800cf84:	e0cd      	b.n	800d122 <USBH_Process+0x3b6>

  case  HOST_SET_WAKEUP_FEATURE:

    if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	f893 333b 	ldrb.w	r3, [r3, #827]	; 0x33b
 800cf8c:	f003 0320 	and.w	r3, r3, #32
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d00a      	beq.n	800cfaa <USBH_Process+0x23e>
    {
      if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 800cf94:	2101      	movs	r1, #1
 800cf96:	6878      	ldr	r0, [r7, #4]
 800cf98:	f000 fc0c 	bl	800d7b4 <USBH_SetFeature>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d106      	bne.n	800cfb0 <USBH_Process+0x244>
      {
        USBH_UsrLog ("Device remote wakeup enabled");
        phost->gState  = HOST_CHECK_CLASS;
 800cfa2:	687b      	ldr	r3, [r7, #4]
 800cfa4:	220a      	movs	r2, #10
 800cfa6:	701a      	strb	r2, [r3, #0]
 800cfa8:	e002      	b.n	800cfb0 <USBH_Process+0x244>
      }
    }
    else
    {
      phost->gState  = HOST_CHECK_CLASS;
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	220a      	movs	r2, #10
 800cfae:	701a      	strb	r2, [r3, #0]
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	2201      	movs	r2, #1
 800cfb4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800cfc4:	2200      	movs	r2, #0
 800cfc6:	4619      	mov	r1, r3
 800cfc8:	f004 fa4c 	bl	8011464 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800cfcc:	e0a9      	b.n	800d122 <USBH_Process+0x3b6>

  case HOST_CHECK_CLASS:

    if(phost->ClassNumber == 0U)
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d040      	beq.n	800d05a <USBH_Process+0x2ee>
    {
      USBH_UsrLog ("No Class has been registered.");
    }
    else
    {
      phost->pActiveClass = NULL;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378

      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	73fb      	strb	r3, [r7, #15]
 800cfe4:	e017      	b.n	800d016 <USBH_Process+0x2aa>
      {
        if(phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800cfe6:	7bfb      	ldrb	r3, [r7, #15]
 800cfe8:	687a      	ldr	r2, [r7, #4]
 800cfea:	33dc      	adds	r3, #220	; 0xdc
 800cfec:	009b      	lsls	r3, r3, #2
 800cfee:	4413      	add	r3, r2
 800cff0:	685b      	ldr	r3, [r3, #4]
 800cff2:	791a      	ldrb	r2, [r3, #4]
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 800cffa:	429a      	cmp	r2, r3
 800cffc:	d108      	bne.n	800d010 <USBH_Process+0x2a4>
        {
          phost->pActiveClass = phost->pClass[idx];
 800cffe:	7bfb      	ldrb	r3, [r7, #15]
 800d000:	687a      	ldr	r2, [r7, #4]
 800d002:	33dc      	adds	r3, #220	; 0xdc
 800d004:	009b      	lsls	r3, r3, #2
 800d006:	4413      	add	r3, r2
 800d008:	685a      	ldr	r2, [r3, #4]
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
      for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d010:	7bfb      	ldrb	r3, [r7, #15]
 800d012:	3301      	adds	r3, #1
 800d014:	73fb      	strb	r3, [r7, #15]
 800d016:	7bfb      	ldrb	r3, [r7, #15]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d0e4      	beq.n	800cfe6 <USBH_Process+0x27a>
        }
      }

      if(phost->pActiveClass != NULL)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d022:	2b00      	cmp	r3, #0
 800d024:	d016      	beq.n	800d054 <USBH_Process+0x2e8>
      {
        if(phost->pActiveClass->Init(phost)== USBH_OK)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d02c:	689b      	ldr	r3, [r3, #8]
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	4798      	blx	r3
 800d032:	4603      	mov	r3, r0
 800d034:	2b00      	cmp	r3, #0
 800d036:	d109      	bne.n	800d04c <USBH_Process+0x2e0>
        {
          phost->gState  = HOST_CLASS_REQUEST;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	2206      	movs	r2, #6
 800d03c:	701a      	strb	r2, [r3, #0]
          USBH_UsrLog ("%s class started.", phost->pActiveClass->Name);

          /* Inform user that a class has been activated */
          phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d044:	2103      	movs	r1, #3
 800d046:	6878      	ldr	r0, [r7, #4]
 800d048:	4798      	blx	r3
 800d04a:	e006      	b.n	800d05a <USBH_Process+0x2ee>
        }
        else
        {
          phost->gState  = HOST_ABORT_STATE;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	220d      	movs	r2, #13
 800d050:	701a      	strb	r2, [r3, #0]
 800d052:	e002      	b.n	800d05a <USBH_Process+0x2ee>
          USBH_UsrLog ("Device not supporting %s class.", phost->pActiveClass->Name);
        }
      }
      else
      {
        phost->gState  = HOST_ABORT_STATE;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	220d      	movs	r2, #13
 800d058:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog ("No registered class for this device.");
      }
    }

#if (USBH_USE_OS == 1U)
    phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	2205      	movs	r2, #5
 800d05e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d06e:	2200      	movs	r2, #0
 800d070:	4619      	mov	r1, r3
 800d072:	f004 f9f7 	bl	8011464 <osMessagePut>
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    break;
 800d076:	e054      	b.n	800d122 <USBH_Process+0x3b6>

  case HOST_CLASS_REQUEST:
    /* process class standard control requests state machine */
    if(phost->pActiveClass != NULL)
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d00f      	beq.n	800d0a2 <USBH_Process+0x336>
    {
      status = phost->pActiveClass->Requests(phost);
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d088:	691b      	ldr	r3, [r3, #16]
 800d08a:	6878      	ldr	r0, [r7, #4]
 800d08c:	4798      	blx	r3
 800d08e:	4603      	mov	r3, r0
 800d090:	73bb      	strb	r3, [r7, #14]

      if(status == USBH_OK)
 800d092:	7bbb      	ldrb	r3, [r7, #14]
 800d094:	b2db      	uxtb	r3, r3
 800d096:	2b00      	cmp	r3, #0
 800d098:	d13e      	bne.n	800d118 <USBH_Process+0x3ac>
      {
        phost->gState  = HOST_CLASS;
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	220b      	movs	r2, #11
 800d09e:	701a      	strb	r2, [r3, #0]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }

    break;
 800d0a0:	e03a      	b.n	800d118 <USBH_Process+0x3ac>
      phost->gState  = HOST_ABORT_STATE;
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	220d      	movs	r2, #13
 800d0a6:	701a      	strb	r2, [r3, #0]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2205      	movs	r2, #5
 800d0ac:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d0bc:	2200      	movs	r2, #0
 800d0be:	4619      	mov	r1, r3
 800d0c0:	f004 f9d0 	bl	8011464 <osMessagePut>
    break;
 800d0c4:	e028      	b.n	800d118 <USBH_Process+0x3ac>
  case HOST_CLASS:
    /* process class state machine */
    if(phost->pActiveClass != NULL)
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d025      	beq.n	800d11c <USBH_Process+0x3b0>
    {
      phost->pActiveClass->BgndProcess(phost);
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d0d6:	695b      	ldr	r3, [r3, #20]
 800d0d8:	6878      	ldr	r0, [r7, #4]
 800d0da:	4798      	blx	r3
    }
    break;
 800d0dc:	e01e      	b.n	800d11c <USBH_Process+0x3b0>

  case HOST_DEV_DISCONNECTED :

    DeInitStateMachine(phost);
 800d0de:	6878      	ldr	r0, [r7, #4]
 800d0e0:	f7ff fd5e 	bl	800cba0 <DeInitStateMachine>

    /* Re-Initilaize Host for new Enumeration */
    if(phost->pActiveClass != NULL)
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d018      	beq.n	800d120 <USBH_Process+0x3b4>
    {
      phost->pActiveClass->DeInit(phost);
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d0f4:	68db      	ldr	r3, [r3, #12]
 800d0f6:	6878      	ldr	r0, [r7, #4]
 800d0f8:	4798      	blx	r3
      phost->pActiveClass = NULL;
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378
    }
    break;
 800d102:	e00d      	b.n	800d120 <USBH_Process+0x3b4>

  case HOST_ABORT_STATE:
  default :
    break;
 800d104:	bf00      	nop
 800d106:	e00c      	b.n	800d122 <USBH_Process+0x3b6>
    break;
 800d108:	bf00      	nop
 800d10a:	e00a      	b.n	800d122 <USBH_Process+0x3b6>
    break;
 800d10c:	bf00      	nop
 800d10e:	e008      	b.n	800d122 <USBH_Process+0x3b6>
    break;
 800d110:	bf00      	nop
 800d112:	e006      	b.n	800d122 <USBH_Process+0x3b6>
    break;
 800d114:	bf00      	nop
 800d116:	e004      	b.n	800d122 <USBH_Process+0x3b6>
    break;
 800d118:	bf00      	nop
 800d11a:	e002      	b.n	800d122 <USBH_Process+0x3b6>
    break;
 800d11c:	bf00      	nop
 800d11e:	e000      	b.n	800d122 <USBH_Process+0x3b6>
    break;
 800d120:	bf00      	nop
  }
 return USBH_OK;
 800d122:	2300      	movs	r3, #0
}
 800d124:	4618      	mov	r0, r3
 800d126:	3710      	adds	r7, #16
 800d128:	46bd      	mov	sp, r7
 800d12a:	bd80      	pop	{r7, pc}

0800d12c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum (USBH_HandleTypeDef *phost)
{
 800d12c:	b580      	push	{r7, lr}
 800d12e:	b088      	sub	sp, #32
 800d130:	af04      	add	r7, sp, #16
 800d132:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800d134:	2301      	movs	r3, #1
 800d136:	73fb      	strb	r3, [r7, #15]

  switch (phost->EnumState)
 800d138:	687b      	ldr	r3, [r7, #4]
 800d13a:	785b      	ldrb	r3, [r3, #1]
 800d13c:	2b07      	cmp	r3, #7
 800d13e:	f200 8132 	bhi.w	800d3a6 <USBH_HandleEnum+0x27a>
 800d142:	a201      	add	r2, pc, #4	; (adr r2, 800d148 <USBH_HandleEnum+0x1c>)
 800d144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d148:	0800d169 	.word	0x0800d169
 800d14c:	0800d1db 	.word	0x0800d1db
 800d150:	0800d1f3 	.word	0x0800d1f3
 800d154:	0800d269 	.word	0x0800d269
 800d158:	0800d281 	.word	0x0800d281
 800d15c:	0800d29f 	.word	0x0800d29f
 800d160:	0800d30b 	.word	0x0800d30b
 800d164:	0800d35b 	.word	0x0800d35b
  {
  case ENUM_IDLE:
    /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
    if ( USBH_Get_DevDesc(phost, 8U) == USBH_OK)
 800d168:	2108      	movs	r1, #8
 800d16a:	6878      	ldr	r0, [r7, #4]
 800d16c:	f000 fa2f 	bl	800d5ce <USBH_Get_DevDesc>
 800d170:	4603      	mov	r3, r0
 800d172:	2b00      	cmp	r3, #0
 800d174:	f040 8119 	bne.w	800d3aa <USBH_HandleEnum+0x27e>
    {
      phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	f893 2329 	ldrb.w	r2, [r3, #809]	; 0x329
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	719a      	strb	r2, [r3, #6]

      phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2201      	movs	r2, #1
 800d186:	705a      	strb	r2, [r3, #1]

      /* modify control channels configuration for MaxPacket size */
      USBH_OpenPipe (phost,
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	7919      	ldrb	r1, [r3, #4]
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800d198:	687a      	ldr	r2, [r7, #4]
 800d19a:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800d19c:	b292      	uxth	r2, r2
 800d19e:	9202      	str	r2, [sp, #8]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	9201      	str	r2, [sp, #4]
 800d1a4:	9300      	str	r3, [sp, #0]
 800d1a6:	4603      	mov	r3, r0
 800d1a8:	2280      	movs	r2, #128	; 0x80
 800d1aa:	6878      	ldr	r0, [r7, #4]
 800d1ac:	f001 f83c 	bl	800e228 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	7959      	ldrb	r1, [r3, #5]
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800d1c0:	687a      	ldr	r2, [r7, #4]
 800d1c2:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800d1c4:	b292      	uxth	r2, r2
 800d1c6:	9202      	str	r2, [sp, #8]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	9201      	str	r2, [sp, #4]
 800d1cc:	9300      	str	r3, [sp, #0]
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f001 f828 	bl	800e228 <USBH_OpenPipe>

    }
    break;
 800d1d8:	e0e7      	b.n	800d3aa <USBH_HandleEnum+0x27e>

  case ENUM_GET_FULL_DEV_DESC:
    /* Get FULL Device Desc  */
    if ( USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE)== USBH_OK)
 800d1da:	2112      	movs	r1, #18
 800d1dc:	6878      	ldr	r0, [r7, #4]
 800d1de:	f000 f9f6 	bl	800d5ce <USBH_Get_DevDesc>
 800d1e2:	4603      	mov	r3, r0
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	f040 80e2 	bne.w	800d3ae <USBH_HandleEnum+0x282>
    {
      USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct );
      USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor );

      phost->EnumState = ENUM_SET_ADDR;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2202      	movs	r2, #2
 800d1ee:	705a      	strb	r2, [r3, #1]

    }
    break;
 800d1f0:	e0dd      	b.n	800d3ae <USBH_HandleEnum+0x282>

  case ENUM_SET_ADDR:
    /* set address */
    if ( USBH_SetAddress(phost, USBH_DEVICE_ADDRESS) == USBH_OK)
 800d1f2:	2101      	movs	r1, #1
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f000 fa96 	bl	800d726 <USBH_SetAddress>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	f040 80d8 	bne.w	800d3b2 <USBH_HandleEnum+0x286>
    {
      USBH_Delay(2U);
 800d202:	2002      	movs	r0, #2
 800d204:	f00c fda9 	bl	8019d5a <USBH_Delay>
      phost->device.address = USBH_DEVICE_ADDRESS;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	2201      	movs	r2, #1
 800d20c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

      /* user callback for device address assigned */
      USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
      phost->EnumState = ENUM_GET_CFG_DESC;
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	2203      	movs	r2, #3
 800d214:	705a      	strb	r2, [r3, #1]

      /* modify control channels to update device address */
      USBH_OpenPipe (phost,
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	7919      	ldrb	r1, [r3, #4]
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_in,
                           0x80U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800d226:	687a      	ldr	r2, [r7, #4]
 800d228:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800d22a:	b292      	uxth	r2, r2
 800d22c:	9202      	str	r2, [sp, #8]
 800d22e:	2200      	movs	r2, #0
 800d230:	9201      	str	r2, [sp, #4]
 800d232:	9300      	str	r3, [sp, #0]
 800d234:	4603      	mov	r3, r0
 800d236:	2280      	movs	r2, #128	; 0x80
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f000 fff5 	bl	800e228 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe (phost,
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	7959      	ldrb	r1, [r3, #5]
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                           phost->Control.pipe_out,
                           0x00U,
                           phost->device.address,
                           phost->device.speed,
                           USBH_EP_CONTROL,
                           (uint16_t)phost->Control.pipe_size);
 800d24e:	687a      	ldr	r2, [r7, #4]
 800d250:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe (phost,
 800d252:	b292      	uxth	r2, r2
 800d254:	9202      	str	r2, [sp, #8]
 800d256:	2200      	movs	r2, #0
 800d258:	9201      	str	r2, [sp, #4]
 800d25a:	9300      	str	r3, [sp, #0]
 800d25c:	4603      	mov	r3, r0
 800d25e:	2200      	movs	r2, #0
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	f000 ffe1 	bl	800e228 <USBH_OpenPipe>
    }
    break;
 800d266:	e0a4      	b.n	800d3b2 <USBH_HandleEnum+0x286>

  case ENUM_GET_CFG_DESC:
    /* get standard configuration descriptor */
    if ( USBH_Get_CfgDesc(phost,
 800d268:	2109      	movs	r1, #9
 800d26a:	6878      	ldr	r0, [r7, #4]
 800d26c:	f000 f9d7 	bl	800d61e <USBH_Get_CfgDesc>
 800d270:	4603      	mov	r3, r0
 800d272:	2b00      	cmp	r3, #0
 800d274:	f040 809f 	bne.w	800d3b6 <USBH_HandleEnum+0x28a>
                          USB_CONFIGURATION_DESC_SIZE) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2204      	movs	r2, #4
 800d27c:	705a      	strb	r2, [r3, #1]
    }
    break;
 800d27e:	e09a      	b.n	800d3b6 <USBH_HandleEnum+0x28a>

  case ENUM_GET_FULL_CFG_DESC:
    /* get FULL config descriptor (config, interface, endpoints) */
    if (USBH_Get_CfgDesc(phost,
 800d280:	687b      	ldr	r3, [r7, #4]
 800d282:	f8b3 3336 	ldrh.w	r3, [r3, #822]	; 0x336
 800d286:	4619      	mov	r1, r3
 800d288:	6878      	ldr	r0, [r7, #4]
 800d28a:	f000 f9c8 	bl	800d61e <USBH_Get_CfgDesc>
 800d28e:	4603      	mov	r3, r0
 800d290:	2b00      	cmp	r3, #0
 800d292:	f040 8092 	bne.w	800d3ba <USBH_HandleEnum+0x28e>
                         phost->device.CfgDesc.wTotalLength) == USBH_OK)
    {
      phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	2205      	movs	r2, #5
 800d29a:	705a      	strb	r2, [r3, #1]
    }
    break;
 800d29c:	e08d      	b.n	800d3ba <USBH_HandleEnum+0x28e>

  case ENUM_GET_MFC_STRING_DESC:
    if (phost->device.DevDesc.iManufacturer != 0U)
 800d29e:	687b      	ldr	r3, [r7, #4]
 800d2a0:	f893 3330 	ldrb.w	r3, [r3, #816]	; 0x330
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d01e      	beq.n	800d2e6 <USBH_HandleEnum+0x1ba>
    { /* Check that Manufacturer String is available */

      if ( USBH_Get_StringDesc(phost,
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	f893 1330 	ldrb.w	r1, [r3, #816]	; 0x330
                               phost->device.DevDesc.iManufacturer,
                               phost->device.Data,
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800d2b4:	23ff      	movs	r3, #255	; 0xff
 800d2b6:	6878      	ldr	r0, [r7, #4]
 800d2b8:	f000 f9d5 	bl	800d666 <USBH_Get_StringDesc>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d17d      	bne.n	800d3be <USBH_HandleEnum+0x292>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Manufacturing string */
        USBH_UsrLog("Manufacturer : %s",  (char *)(void*)phost->device.Data);
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	2206      	movs	r2, #6
 800d2c6:	705a      	strb	r2, [r3, #1]

#if (USBH_USE_OS == 1U)
        phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2205      	movs	r2, #5
 800d2cc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d2dc:	2200      	movs	r2, #0
 800d2de:	4619      	mov	r1, r3
 800d2e0:	f004 f8c0 	bl	8011464 <osMessagePut>
#else
     (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800d2e4:	e06b      	b.n	800d3be <USBH_HandleEnum+0x292>
     phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	2206      	movs	r2, #6
 800d2ea:	705a      	strb	r2, [r3, #1]
     phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	2205      	movs	r2, #5
 800d2f0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
     (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d300:	2200      	movs	r2, #0
 800d302:	4619      	mov	r1, r3
 800d304:	f004 f8ae 	bl	8011464 <osMessagePut>
    break;
 800d308:	e059      	b.n	800d3be <USBH_HandleEnum+0x292>

  case ENUM_GET_PRODUCT_STRING_DESC:
    if (phost->device.DevDesc.iProduct != 0U)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 800d310:	2b00      	cmp	r3, #0
 800d312:	d010      	beq.n	800d336 <USBH_HandleEnum+0x20a>
    { /* Check that Product string is available */
      if ( USBH_Get_StringDesc(phost,
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	f893 1331 	ldrb.w	r1, [r3, #817]	; 0x331
                               phost->device.DevDesc.iProduct,
                               phost->device.Data,
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800d320:	23ff      	movs	r3, #255	; 0xff
 800d322:	6878      	ldr	r0, [r7, #4]
 800d324:	f000 f99f 	bl	800d666 <USBH_Get_StringDesc>
 800d328:	4603      	mov	r3, r0
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d149      	bne.n	800d3c2 <USBH_HandleEnum+0x296>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Product string */
        USBH_UsrLog("Product : %s",  (char *)(void *)phost->device.Data);
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	2207      	movs	r2, #7
 800d332:	705a      	strb	r2, [r3, #1]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800d334:	e045      	b.n	800d3c2 <USBH_HandleEnum+0x296>
      phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2207      	movs	r2, #7
 800d33a:	705a      	strb	r2, [r3, #1]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	2205      	movs	r2, #5
 800d340:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d350:	2200      	movs	r2, #0
 800d352:	4619      	mov	r1, r3
 800d354:	f004 f886 	bl	8011464 <osMessagePut>
    break;
 800d358:	e033      	b.n	800d3c2 <USBH_HandleEnum+0x296>

  case ENUM_GET_SERIALNUM_STRING_DESC:
    if (phost->device.DevDesc.iSerialNumber != 0U)
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 800d360:	2b00      	cmp	r3, #0
 800d362:	d00f      	beq.n	800d384 <USBH_HandleEnum+0x258>
    { /* Check that Serial number string is available */
      if ( USBH_Get_StringDesc(phost,
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f893 1332 	ldrb.w	r1, [r3, #818]	; 0x332
                               phost->device.DevDesc.iSerialNumber,
                               phost->device.Data,
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f503 728e 	add.w	r2, r3, #284	; 0x11c
      if ( USBH_Get_StringDesc(phost,
 800d370:	23ff      	movs	r3, #255	; 0xff
 800d372:	6878      	ldr	r0, [r7, #4]
 800d374:	f000 f977 	bl	800d666 <USBH_Get_StringDesc>
 800d378:	4603      	mov	r3, r0
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d123      	bne.n	800d3c6 <USBH_HandleEnum+0x29a>
                               0xFFU) == USBH_OK)
      {
        /* User callback for Serial number string */
         USBH_UsrLog("Serial Number : %s",  (char *)(void*)phost->device.Data);
        Status = USBH_OK;
 800d37e:	2300      	movs	r3, #0
 800d380:	73fb      	strb	r3, [r7, #15]
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
    }
    break;
 800d382:	e020      	b.n	800d3c6 <USBH_HandleEnum+0x29a>
      Status = USBH_OK;
 800d384:	2300      	movs	r3, #0
 800d386:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_STATE_CHANGED_EVENT;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2205      	movs	r2, #5
 800d38c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d390:	687b      	ldr	r3, [r7, #4]
 800d392:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d39c:	2200      	movs	r2, #0
 800d39e:	4619      	mov	r1, r3
 800d3a0:	f004 f860 	bl	8011464 <osMessagePut>
    break;
 800d3a4:	e00f      	b.n	800d3c6 <USBH_HandleEnum+0x29a>

  default:
    break;
 800d3a6:	bf00      	nop
 800d3a8:	e00e      	b.n	800d3c8 <USBH_HandleEnum+0x29c>
    break;
 800d3aa:	bf00      	nop
 800d3ac:	e00c      	b.n	800d3c8 <USBH_HandleEnum+0x29c>
    break;
 800d3ae:	bf00      	nop
 800d3b0:	e00a      	b.n	800d3c8 <USBH_HandleEnum+0x29c>
    break;
 800d3b2:	bf00      	nop
 800d3b4:	e008      	b.n	800d3c8 <USBH_HandleEnum+0x29c>
    break;
 800d3b6:	bf00      	nop
 800d3b8:	e006      	b.n	800d3c8 <USBH_HandleEnum+0x29c>
    break;
 800d3ba:	bf00      	nop
 800d3bc:	e004      	b.n	800d3c8 <USBH_HandleEnum+0x29c>
    break;
 800d3be:	bf00      	nop
 800d3c0:	e002      	b.n	800d3c8 <USBH_HandleEnum+0x29c>
    break;
 800d3c2:	bf00      	nop
 800d3c4:	e000      	b.n	800d3c8 <USBH_HandleEnum+0x29c>
    break;
 800d3c6:	bf00      	nop
  }
  return Status;
 800d3c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d3ca:	4618      	mov	r0, r3
 800d3cc:	3710      	adds	r7, #16
 800d3ce:	46bd      	mov	sp, r7
 800d3d0:	bd80      	pop	{r7, pc}
 800d3d2:	bf00      	nop

0800d3d4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer  (USBH_HandleTypeDef *phost, uint32_t time)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b083      	sub	sp, #12
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
 800d3dc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	683a      	ldr	r2, [r7, #0]
 800d3e2:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
}
 800d3e6:	bf00      	nop
 800d3e8:	370c      	adds	r7, #12
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f0:	4770      	bx	lr

0800d3f2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer  (USBH_HandleTypeDef *phost)
{
 800d3f2:	b580      	push	{r7, lr}
 800d3f4:	b082      	sub	sp, #8
 800d3f6:	af00      	add	r7, sp, #0
 800d3f8:	6078      	str	r0, [r7, #4]
  phost->Timer ++;
 800d3fa:	687b      	ldr	r3, [r7, #4]
 800d3fc:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800d400:	1c5a      	adds	r2, r3, #1
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	f8c3 23bc 	str.w	r2, [r3, #956]	; 0x3bc
  USBH_HandleSof(phost);
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	f000 f804 	bl	800d416 <USBH_HandleSof>
}
 800d40e:	bf00      	nop
 800d410:	3708      	adds	r7, #8
 800d412:	46bd      	mov	sp, r7
 800d414:	bd80      	pop	{r7, pc}

0800d416 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof  (USBH_HandleTypeDef *phost)
{
 800d416:	b580      	push	{r7, lr}
 800d418:	b082      	sub	sp, #8
 800d41a:	af00      	add	r7, sp, #0
 800d41c:	6078      	str	r0, [r7, #4]
  if((phost->gState == HOST_CLASS)&&(phost->pActiveClass != NULL))
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	781b      	ldrb	r3, [r3, #0]
 800d422:	b2db      	uxtb	r3, r3
 800d424:	2b0b      	cmp	r3, #11
 800d426:	d10a      	bne.n	800d43e <USBH_HandleSof+0x28>
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d005      	beq.n	800d43e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f8d3 3378 	ldr.w	r3, [r3, #888]	; 0x378
 800d438:	699b      	ldr	r3, [r3, #24]
 800d43a:	6878      	ldr	r0, [r7, #4]
 800d43c:	4798      	blx	r3
  }
}
 800d43e:	bf00      	nop
 800d440:	3708      	adds	r7, #8
 800d442:	46bd      	mov	sp, r7
 800d444:	bd80      	pop	{r7, pc}

0800d446 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled (USBH_HandleTypeDef *phost)
{
 800d446:	b480      	push	{r7}
 800d448:	b083      	sub	sp, #12
 800d44a:	af00      	add	r7, sp, #0
 800d44c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	2201      	movs	r2, #1
 800d452:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800d456:	bf00      	nop
}
 800d458:	370c      	adds	r7, #12
 800d45a:	46bd      	mov	sp, r7
 800d45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d460:	4770      	bx	lr

0800d462 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled (USBH_HandleTypeDef *phost)
{
 800d462:	b480      	push	{r7}
 800d464:	b083      	sub	sp, #12
 800d466:	af00      	add	r7, sp, #0
 800d468:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2200      	movs	r2, #0
 800d46e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f

  return;
 800d472:	bf00      	nop
}
 800d474:	370c      	adds	r7, #12
 800d476:	46bd      	mov	sp, r7
 800d478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47c:	4770      	bx	lr

0800d47e <USBH_IsPortEnabled>:
  *         Is Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
uint8_t USBH_IsPortEnabled(USBH_HandleTypeDef *phost)
{
 800d47e:	b480      	push	{r7}
 800d480:	b083      	sub	sp, #12
 800d482:	af00      	add	r7, sp, #0
 800d484:	6078      	str	r0, [r7, #4]
  return(phost->device.PortEnabled);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
}
 800d48c:	4618      	mov	r0, r3
 800d48e:	370c      	adds	r7, #12
 800d490:	46bd      	mov	sp, r7
 800d492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d496:	4770      	bx	lr

0800d498 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect (USBH_HandleTypeDef *phost)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b082      	sub	sp, #8
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
  if(phost->gState == HOST_IDLE )
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	781b      	ldrb	r3, [r3, #0]
 800d4a4:	b2db      	uxtb	r3, r3
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d10f      	bne.n	800d4ca <USBH_LL_Connect+0x32>
  {
    phost->device.is_connected = 1U;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2201      	movs	r2, #1
 800d4ae:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

    if(phost->pUser != NULL)
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d00e      	beq.n	800d4da <USBH_LL_Connect+0x42>
    {
      phost->pUser(phost, HOST_USER_CONNECTION);
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d4c2:	2104      	movs	r1, #4
 800d4c4:	6878      	ldr	r0, [r7, #4]
 800d4c6:	4798      	blx	r3
 800d4c8:	e007      	b.n	800d4da <USBH_LL_Connect+0x42>
    }
  }
  else
  {
    if (phost->device.PortEnabled == 1U)
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800d4d0:	2b01      	cmp	r3, #1
 800d4d2:	d102      	bne.n	800d4da <USBH_LL_Connect+0x42>
    {
      phost->gState = HOST_DEV_ATTACHED;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	2202      	movs	r2, #2
 800d4d8:	701a      	strb	r2, [r3, #0]
    }
  }

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d4da:	687b      	ldr	r3, [r7, #4]
 800d4dc:	2201      	movs	r2, #1
 800d4de:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	4619      	mov	r1, r3
 800d4f2:	f003 ffb7 	bl	8011464 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d4f6:	2300      	movs	r3, #0
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	3708      	adds	r7, #8
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}

0800d500 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect  (USBH_HandleTypeDef *phost)
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b082      	sub	sp, #8
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]
  /*Stop Host */
  USBH_LL_Stop(phost);
 800d508:	6878      	ldr	r0, [r7, #4]
 800d50a:	f00c fadc 	bl	8019ac6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe  (phost, phost->Control.pipe_in);
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	791b      	ldrb	r3, [r3, #4]
 800d512:	4619      	mov	r1, r3
 800d514:	6878      	ldr	r0, [r7, #4]
 800d516:	f000 fed4 	bl	800e2c2 <USBH_FreePipe>
  USBH_FreePipe  (phost, phost->Control.pipe_out);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	795b      	ldrb	r3, [r3, #5]
 800d51e:	4619      	mov	r1, r3
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f000 fece 	bl	800e2c2 <USBH_FreePipe>

  phost->device.is_connected = 0U;
 800d526:	687b      	ldr	r3, [r7, #4]
 800d528:	2200      	movs	r2, #0
 800d52a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  if(phost->pUser != NULL)
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d534:	2b00      	cmp	r3, #0
 800d536:	d005      	beq.n	800d544 <USBH_LL_Disconnect+0x44>
  {
    phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d538:	687b      	ldr	r3, [r7, #4]
 800d53a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800d53e:	2105      	movs	r1, #5
 800d540:	6878      	ldr	r0, [r7, #4]
 800d542:	4798      	blx	r3
  }
  USBH_UsrLog("USB Device disconnected");

  /* Start the low level driver  */
  USBH_LL_Start(phost);
 800d544:	6878      	ldr	r0, [r7, #4]
 800d546:	f00c faa3 	bl	8019a90 <USBH_LL_Start>

  phost->gState = HOST_DEV_DISCONNECTED;
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2203      	movs	r2, #3
 800d54e:	701a      	strb	r2, [r3, #0]

#if (USBH_USE_OS == 1U)
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2201      	movs	r2, #1
 800d554:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d558:	687b      	ldr	r3, [r7, #4]
 800d55a:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d564:	2200      	movs	r2, #0
 800d566:	4619      	mov	r1, r3
 800d568:	f003 ff7c 	bl	8011464 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 800d56c:	2300      	movs	r3, #0
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3708      	adds	r7, #8
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}

0800d576 <USBH_Process_OS>:
  * @retval None
  */

#if (osCMSIS < 0x20000U)
static void USBH_Process_OS(void const *argument)
{
 800d576:	b580      	push	{r7, lr}
 800d578:	b086      	sub	sp, #24
 800d57a:	af00      	add	r7, sp, #0
 800d57c:	6078      	str	r0, [r7, #4]
  osEvent event;

  for(;;)
  {
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	f8d3 13cc 	ldr.w	r1, [r3, #972]	; 0x3cc
 800d584:	f107 030c 	add.w	r3, r7, #12
 800d588:	f04f 32ff 	mov.w	r2, #4294967295
 800d58c:	4618      	mov	r0, r3
 800d58e:	f003 ffa9 	bl	80114e4 <osMessageGet>
    if(event.status == osEventMessage)
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	2b10      	cmp	r3, #16
 800d596:	d1f2      	bne.n	800d57e <USBH_Process_OS+0x8>
    {
      USBH_Process((USBH_HandleTypeDef *)argument);
 800d598:	6878      	ldr	r0, [r7, #4]
 800d59a:	f7ff fbe7 	bl	800cd6c <USBH_Process>
    event = osMessageGet(((USBH_HandleTypeDef *)argument)->os_event, osWaitForever);
 800d59e:	e7ee      	b.n	800d57e <USBH_Process_OS+0x8>

0800d5a0 <USBH_LL_NotifyURBChange>:
*         Notify URB state Change
* @param  phost: Host handle
* @retval USBH Status
*/
USBH_StatusTypeDef  USBH_LL_NotifyURBChange (USBH_HandleTypeDef *phost)
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b082      	sub	sp, #8
 800d5a4:	af00      	add	r7, sp, #0
 800d5a6:	6078      	str	r0, [r7, #4]
  phost->os_msg = (uint32_t)USBH_PORT_EVENT;
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	2201      	movs	r2, #1
 800d5ac:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#if (osCMSIS < 0x20000U)
  (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800d5bc:	2200      	movs	r2, #0
 800d5be:	4619      	mov	r1, r3
 800d5c0:	f003 ff50 	bl	8011464 <osMessagePut>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif

  return USBH_OK;
 800d5c4:	2300      	movs	r3, #0
}
 800d5c6:	4618      	mov	r0, r3
 800d5c8:	3708      	adds	r7, #8
 800d5ca:	46bd      	mov	sp, r7
 800d5cc:	bd80      	pop	{r7, pc}

0800d5ce <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800d5ce:	b580      	push	{r7, lr}
 800d5d0:	b086      	sub	sp, #24
 800d5d2:	af02      	add	r7, sp, #8
 800d5d4:	6078      	str	r0, [r7, #4]
 800d5d6:	460b      	mov	r3, r1
 800d5d8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if((status = USBH_GetDescriptor(phost,
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_DEVICE,
                                  phost->device.Data,
 800d5da:	687b      	ldr	r3, [r7, #4]
 800d5dc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800d5e0:	78fb      	ldrb	r3, [r7, #3]
 800d5e2:	b29b      	uxth	r3, r3
 800d5e4:	9300      	str	r3, [sp, #0]
 800d5e6:	4613      	mov	r3, r2
 800d5e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d5ec:	2100      	movs	r1, #0
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f000 f864 	bl	800d6bc <USBH_GetDescriptor>
 800d5f4:	4603      	mov	r3, r0
 800d5f6:	73fb      	strb	r3, [r7, #15]
 800d5f8:	7bfb      	ldrb	r3, [r7, #15]
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d10a      	bne.n	800d614 <USBH_Get_DevDesc+0x46>
                                  (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	f203 3022 	addw	r0, r3, #802	; 0x322
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d60a:	78fa      	ldrb	r2, [r7, #3]
 800d60c:	b292      	uxth	r2, r2
 800d60e:	4619      	mov	r1, r3
 800d610:	f000 f918 	bl	800d844 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }
  return status;
 800d614:	7bfb      	ldrb	r3, [r7, #15]
}
 800d616:	4618      	mov	r0, r3
 800d618:	3710      	adds	r7, #16
 800d61a:	46bd      	mov	sp, r7
 800d61c:	bd80      	pop	{r7, pc}

0800d61e <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                             uint16_t length)

{
 800d61e:	b580      	push	{r7, lr}
 800d620:	b086      	sub	sp, #24
 800d622:	af02      	add	r7, sp, #8
 800d624:	6078      	str	r0, [r7, #4]
 800d626:	460b      	mov	r3, r1
 800d628:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData;
#if (USBH_KEEP_CFG_DESCRIPTOR == 1U)
  pData = phost->device.CfgDesc_Raw;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	331c      	adds	r3, #28
 800d62e:	60fb      	str	r3, [r7, #12]
#else
  pData = phost->device.Data;
#endif
  if((status = USBH_GetDescriptor(phost,
 800d630:	887b      	ldrh	r3, [r7, #2]
 800d632:	9300      	str	r3, [sp, #0]
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d63a:	2100      	movs	r1, #0
 800d63c:	6878      	ldr	r0, [r7, #4]
 800d63e:	f000 f83d 	bl	800d6bc <USBH_GetDescriptor>
 800d642:	4603      	mov	r3, r0
 800d644:	72fb      	strb	r3, [r7, #11]
 800d646:	7afb      	ldrb	r3, [r7, #11]
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d107      	bne.n	800d65c <USBH_Get_CfgDesc+0x3e>
                                  pData,
                                  length)) == USBH_OK)
  {

    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc (&phost->device.CfgDesc,
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f503 734d 	add.w	r3, r3, #820	; 0x334
 800d652:	887a      	ldrh	r2, [r7, #2]
 800d654:	68f9      	ldr	r1, [r7, #12]
 800d656:	4618      	mov	r0, r3
 800d658:	f000 f964 	bl	800d924 <USBH_ParseCfgDesc>
                       pData,
                       length);

  }
  return status;
 800d65c:	7afb      	ldrb	r3, [r7, #11]
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3710      	adds	r7, #16
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}

0800d666 <USBH_Get_StringDesc>:
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                uint8_t string_index,
                                uint8_t *buff,
                                uint16_t length)
{
 800d666:	b580      	push	{r7, lr}
 800d668:	b088      	sub	sp, #32
 800d66a:	af02      	add	r7, sp, #8
 800d66c:	60f8      	str	r0, [r7, #12]
 800d66e:	607a      	str	r2, [r7, #4]
 800d670:	461a      	mov	r2, r3
 800d672:	460b      	mov	r3, r1
 800d674:	72fb      	strb	r3, [r7, #11]
 800d676:	4613      	mov	r3, r2
 800d678:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;
  if((status = USBH_GetDescriptor(phost,
 800d67a:	7afb      	ldrb	r3, [r7, #11]
 800d67c:	b29b      	uxth	r3, r3
 800d67e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800d682:	b29a      	uxth	r2, r3
                                  USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                  USB_DESC_STRING | string_index,
                                  phost->device.Data,
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if((status = USBH_GetDescriptor(phost,
 800d68a:	893b      	ldrh	r3, [r7, #8]
 800d68c:	9300      	str	r3, [sp, #0]
 800d68e:	460b      	mov	r3, r1
 800d690:	2100      	movs	r1, #0
 800d692:	68f8      	ldr	r0, [r7, #12]
 800d694:	f000 f812 	bl	800d6bc <USBH_GetDescriptor>
 800d698:	4603      	mov	r3, r0
 800d69a:	75fb      	strb	r3, [r7, #23]
 800d69c:	7dfb      	ldrb	r3, [r7, #23]
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d107      	bne.n	800d6b2 <USBH_Get_StringDesc+0x4c>
                                  length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data,buff, length);
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800d6a8:	893a      	ldrh	r2, [r7, #8]
 800d6aa:	6879      	ldr	r1, [r7, #4]
 800d6ac:	4618      	mov	r0, r3
 800d6ae:	f000 fa37 	bl	800db20 <USBH_ParseStringDesc>
  }
  return status;
 800d6b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	3718      	adds	r7, #24
 800d6b8:	46bd      	mov	sp, r7
 800d6ba:	bd80      	pop	{r7, pc}

0800d6bc <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                               uint8_t  req_type,
                               uint16_t value_idx,
                               uint8_t* buff,
                               uint16_t length)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	60f8      	str	r0, [r7, #12]
 800d6c4:	607b      	str	r3, [r7, #4]
 800d6c6:	460b      	mov	r3, r1
 800d6c8:	72fb      	strb	r3, [r7, #11]
 800d6ca:	4613      	mov	r3, r2
 800d6cc:	813b      	strh	r3, [r7, #8]
  if(phost->RequestState == CMD_SEND)
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	789b      	ldrb	r3, [r3, #2]
 800d6d2:	2b01      	cmp	r3, #1
 800d6d4:	d11c      	bne.n	800d710 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d6d6:	7afb      	ldrb	r3, [r7, #11]
 800d6d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d6dc:	b2da      	uxtb	r2, r3
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	2206      	movs	r2, #6
 800d6e6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	893a      	ldrh	r2, [r7, #8]
 800d6ec:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d6ee:	893b      	ldrh	r3, [r7, #8]
 800d6f0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800d6f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d6f8:	d104      	bne.n	800d704 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	f240 4209 	movw	r2, #1033	; 0x409
 800d700:	829a      	strh	r2, [r3, #20]
 800d702:	e002      	b.n	800d70a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2200      	movs	r2, #0
 800d708:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	8b3a      	ldrh	r2, [r7, #24]
 800d70e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, buff, length);
 800d710:	8b3b      	ldrh	r3, [r7, #24]
 800d712:	461a      	mov	r2, r3
 800d714:	6879      	ldr	r1, [r7, #4]
 800d716:	68f8      	ldr	r0, [r7, #12]
 800d718:	f000 fa50 	bl	800dbbc <USBH_CtlReq>
 800d71c:	4603      	mov	r3, r0
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3710      	adds	r7, #16
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}

0800d726 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d726:	b580      	push	{r7, lr}
 800d728:	b082      	sub	sp, #8
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	6078      	str	r0, [r7, #4]
 800d72e:	460b      	mov	r3, r1
 800d730:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	789b      	ldrb	r3, [r3, #2]
 800d736:	2b01      	cmp	r3, #1
 800d738:	d10f      	bne.n	800d75a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	2200      	movs	r2, #0
 800d73e:	741a      	strb	r2, [r3, #16]
      USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2205      	movs	r2, #5
 800d744:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d746:	78fb      	ldrb	r3, [r7, #3]
 800d748:	b29a      	uxth	r2, r3
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2200      	movs	r2, #0
 800d752:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2200      	movs	r2, #0
 800d758:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 800d75a:	2200      	movs	r2, #0
 800d75c:	2100      	movs	r1, #0
 800d75e:	6878      	ldr	r0, [r7, #4]
 800d760:	f000 fa2c 	bl	800dbbc <USBH_CtlReq>
 800d764:	4603      	mov	r3, r0
}
 800d766:	4618      	mov	r0, r3
 800d768:	3708      	adds	r7, #8
 800d76a:	46bd      	mov	sp, r7
 800d76c:	bd80      	pop	{r7, pc}

0800d76e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d76e:	b580      	push	{r7, lr}
 800d770:	b082      	sub	sp, #8
 800d772:	af00      	add	r7, sp, #0
 800d774:	6078      	str	r0, [r7, #4]
 800d776:	460b      	mov	r3, r1
 800d778:	807b      	strh	r3, [r7, #2]
  if(phost->RequestState == CMD_SEND)
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	789b      	ldrb	r3, [r3, #2]
 800d77e:	2b01      	cmp	r3, #1
 800d780:	d10e      	bne.n	800d7a0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d782:	687b      	ldr	r3, [r7, #4]
 800d784:	2200      	movs	r2, #0
 800d786:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	2209      	movs	r2, #9
 800d78c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	887a      	ldrh	r2, [r7, #2]
 800d792:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	2200      	movs	r2, #0
 800d798:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	2200      	movs	r2, #0
 800d79e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U , 0U);
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	2100      	movs	r1, #0
 800d7a4:	6878      	ldr	r0, [r7, #4]
 800d7a6:	f000 fa09 	bl	800dbbc <USBH_CtlReq>
 800d7aa:	4603      	mov	r3, r0
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3708      	adds	r7, #8
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b082      	sub	sp, #8
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	460b      	mov	r3, r1
 800d7be:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	789b      	ldrb	r3, [r3, #2]
 800d7c4:	2b01      	cmp	r3, #1
 800d7c6:	d10f      	bne.n	800d7e8 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	2200      	movs	r2, #0
 800d7cc:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2203      	movs	r2, #3
 800d7d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d7d4:	78fb      	ldrb	r3, [r7, #3]
 800d7d6:	b29a      	uxth	r2, r3
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2200      	movs	r2, #0
 800d7e0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800d7e8:	2200      	movs	r2, #0
 800d7ea:	2100      	movs	r1, #0
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f000 f9e5 	bl	800dbbc <USBH_CtlReq>
 800d7f2:	4603      	mov	r3, r0
}
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	3708      	adds	r7, #8
 800d7f8:	46bd      	mov	sp, r7
 800d7fa:	bd80      	pop	{r7, pc}

0800d7fc <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d7fc:	b580      	push	{r7, lr}
 800d7fe:	b082      	sub	sp, #8
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
 800d804:	460b      	mov	r3, r1
 800d806:	70fb      	strb	r3, [r7, #3]
  if(phost->RequestState == CMD_SEND)
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	789b      	ldrb	r3, [r3, #2]
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	d10f      	bne.n	800d830 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	2202      	movs	r2, #2
 800d814:	741a      	strb	r2, [r3, #16]
                                                   | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2201      	movs	r2, #1
 800d81a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2200      	movs	r2, #0
 800d820:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d822:	78fb      	ldrb	r3, [r7, #3]
 800d824:	b29a      	uxth	r2, r3
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2200      	movs	r2, #0
 800d82e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U , 0U);
 800d830:	2200      	movs	r2, #0
 800d832:	2100      	movs	r1, #0
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f000 f9c1 	bl	800dbbc <USBH_CtlReq>
 800d83a:	4603      	mov	r3, r0
}
 800d83c:	4618      	mov	r0, r3
 800d83e:	3708      	adds	r7, #8
 800d840:	46bd      	mov	sp, r7
 800d842:	bd80      	pop	{r7, pc}

0800d844 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc (USBH_DevDescTypeDef* dev_desc, uint8_t *buf,
                                uint16_t length)
{
 800d844:	b480      	push	{r7}
 800d846:	b085      	sub	sp, #20
 800d848:	af00      	add	r7, sp, #0
 800d84a:	60f8      	str	r0, [r7, #12]
 800d84c:	60b9      	str	r1, [r7, #8]
 800d84e:	4613      	mov	r3, r2
 800d850:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t  *) (buf +  0);
 800d852:	68bb      	ldr	r3, [r7, #8]
 800d854:	781a      	ldrb	r2, [r3, #0]
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t  *) (buf +  1);
 800d85a:	68bb      	ldr	r3, [r7, #8]
 800d85c:	785a      	ldrb	r2, [r3, #1]
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16 (buf +  2);
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	3302      	adds	r3, #2
 800d866:	781b      	ldrb	r3, [r3, #0]
 800d868:	b29a      	uxth	r2, r3
 800d86a:	68bb      	ldr	r3, [r7, #8]
 800d86c:	3303      	adds	r3, #3
 800d86e:	781b      	ldrb	r3, [r3, #0]
 800d870:	b29b      	uxth	r3, r3
 800d872:	021b      	lsls	r3, r3, #8
 800d874:	b29b      	uxth	r3, r3
 800d876:	4313      	orrs	r3, r2
 800d878:	b29a      	uxth	r2, r3
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t  *) (buf +  4);
 800d87e:	68bb      	ldr	r3, [r7, #8]
 800d880:	791a      	ldrb	r2, [r3, #4]
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t  *) (buf +  5);
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	795a      	ldrb	r2, [r3, #5]
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t  *) (buf +  6);
 800d88e:	68bb      	ldr	r3, [r7, #8]
 800d890:	799a      	ldrb	r2, [r3, #6]
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t  *) (buf +  7);
 800d896:	68bb      	ldr	r3, [r7, #8]
 800d898:	79da      	ldrb	r2, [r3, #7]
 800d89a:	68fb      	ldr	r3, [r7, #12]
 800d89c:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 800d89e:	88fb      	ldrh	r3, [r7, #6]
 800d8a0:	2b08      	cmp	r3, #8
 800d8a2:	d939      	bls.n	800d918 <USBH_ParseDevDesc+0xd4>
  { /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16 (buf +  8);
 800d8a4:	68bb      	ldr	r3, [r7, #8]
 800d8a6:	3308      	adds	r3, #8
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	b29a      	uxth	r2, r3
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	3309      	adds	r3, #9
 800d8b0:	781b      	ldrb	r3, [r3, #0]
 800d8b2:	b29b      	uxth	r3, r3
 800d8b4:	021b      	lsls	r3, r3, #8
 800d8b6:	b29b      	uxth	r3, r3
 800d8b8:	4313      	orrs	r3, r2
 800d8ba:	b29a      	uxth	r2, r3
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16 (buf + 10);
 800d8c0:	68bb      	ldr	r3, [r7, #8]
 800d8c2:	330a      	adds	r3, #10
 800d8c4:	781b      	ldrb	r3, [r3, #0]
 800d8c6:	b29a      	uxth	r2, r3
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	330b      	adds	r3, #11
 800d8cc:	781b      	ldrb	r3, [r3, #0]
 800d8ce:	b29b      	uxth	r3, r3
 800d8d0:	021b      	lsls	r3, r3, #8
 800d8d2:	b29b      	uxth	r3, r3
 800d8d4:	4313      	orrs	r3, r2
 800d8d6:	b29a      	uxth	r2, r3
 800d8d8:	68fb      	ldr	r3, [r7, #12]
 800d8da:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16 (buf + 12);
 800d8dc:	68bb      	ldr	r3, [r7, #8]
 800d8de:	330c      	adds	r3, #12
 800d8e0:	781b      	ldrb	r3, [r3, #0]
 800d8e2:	b29a      	uxth	r2, r3
 800d8e4:	68bb      	ldr	r3, [r7, #8]
 800d8e6:	330d      	adds	r3, #13
 800d8e8:	781b      	ldrb	r3, [r3, #0]
 800d8ea:	b29b      	uxth	r3, r3
 800d8ec:	021b      	lsls	r3, r3, #8
 800d8ee:	b29b      	uxth	r3, r3
 800d8f0:	4313      	orrs	r3, r2
 800d8f2:	b29a      	uxth	r2, r3
 800d8f4:	68fb      	ldr	r3, [r7, #12]
 800d8f6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t  *) (buf + 14);
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	7b9a      	ldrb	r2, [r3, #14]
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t  *) (buf + 15);
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	7bda      	ldrb	r2, [r3, #15]
 800d904:	68fb      	ldr	r3, [r7, #12]
 800d906:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t  *) (buf + 16);
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	7c1a      	ldrb	r2, [r3, #16]
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t  *) (buf + 17);
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	7c5a      	ldrb	r2, [r3, #17]
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	745a      	strb	r2, [r3, #17]
  }
}
 800d918:	bf00      	nop
 800d91a:	3714      	adds	r7, #20
 800d91c:	46bd      	mov	sp, r7
 800d91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d922:	4770      	bx	lr

0800d924 <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc (USBH_CfgDescTypeDef* cfg_desc, uint8_t *buf,
                               uint16_t length)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b08a      	sub	sp, #40	; 0x28
 800d928:	af00      	add	r7, sp, #0
 800d92a:	60f8      	str	r0, [r7, #12]
 800d92c:	60b9      	str	r1, [r7, #8]
 800d92e:	4613      	mov	r3, r2
 800d930:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d936:	2300      	movs	r3, #0
 800d938:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 800d93c:	2300      	movs	r3, #0
 800d93e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800d942:	68bb      	ldr	r3, [r7, #8]
 800d944:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t  *) (buf + 0);
 800d946:	68bb      	ldr	r3, [r7, #8]
 800d948:	781a      	ldrb	r2, [r3, #0]
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t  *) (buf + 1);
 800d94e:	68bb      	ldr	r3, [r7, #8]
 800d950:	785a      	ldrb	r2, [r3, #1]
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16 (buf + 2);
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	3302      	adds	r3, #2
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	b29a      	uxth	r2, r3
 800d95e:	68bb      	ldr	r3, [r7, #8]
 800d960:	3303      	adds	r3, #3
 800d962:	781b      	ldrb	r3, [r3, #0]
 800d964:	b29b      	uxth	r3, r3
 800d966:	021b      	lsls	r3, r3, #8
 800d968:	b29b      	uxth	r3, r3
 800d96a:	4313      	orrs	r3, r2
 800d96c:	b29a      	uxth	r2, r3
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t  *) (buf + 4);
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	791a      	ldrb	r2, [r3, #4]
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t  *) (buf + 5);
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	795a      	ldrb	r2, [r3, #5]
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t  *) (buf + 6);
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	799a      	ldrb	r2, [r3, #6]
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t  *) (buf + 7);
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	79da      	ldrb	r2, [r3, #7]
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t  *) (buf + 8);
 800d992:	68bb      	ldr	r3, [r7, #8]
 800d994:	7a1a      	ldrb	r2, [r3, #8]
 800d996:	68fb      	ldr	r3, [r7, #12]
 800d998:	721a      	strb	r2, [r3, #8]


  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d99a:	88fb      	ldrh	r3, [r7, #6]
 800d99c:	2b09      	cmp	r3, #9
 800d99e:	d95f      	bls.n	800da60 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 800d9a0:	2309      	movs	r3, #9
 800d9a2:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	61fb      	str	r3, [r7, #28]


    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d9a8:	e051      	b.n	800da4e <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d9aa:	f107 0316 	add.w	r3, r7, #22
 800d9ae:	4619      	mov	r1, r3
 800d9b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d9b2:	f000 f8e8 	bl	800db86 <USBH_GetNextDesc>
 800d9b6:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800d9b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ba:	785b      	ldrb	r3, [r3, #1]
 800d9bc:	2b04      	cmp	r3, #4
 800d9be:	d146      	bne.n	800da4e <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 800d9c0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800d9c4:	221a      	movs	r2, #26
 800d9c6:	fb02 f303 	mul.w	r3, r2, r3
 800d9ca:	3308      	adds	r3, #8
 800d9cc:	68fa      	ldr	r2, [r7, #12]
 800d9ce:	4413      	add	r3, r2
 800d9d0:	3302      	adds	r3, #2
 800d9d2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc (pif, (uint8_t *)(void *)pdesc);
 800d9d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d9d6:	69f8      	ldr	r0, [r7, #28]
 800d9d8:	f000 f846 	bl	800da68 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d9dc:	2300      	movs	r3, #0
 800d9de:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 800d9e2:	2300      	movs	r3, #0
 800d9e4:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d9e6:	e022      	b.n	800da2e <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t*)(void *)pdesc, &ptr);
 800d9e8:	f107 0316 	add.w	r3, r7, #22
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d9f0:	f000 f8c9 	bl	800db86 <USBH_GetNextDesc>
 800d9f4:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800d9f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9f8:	785b      	ldrb	r3, [r3, #1]
 800d9fa:	2b05      	cmp	r3, #5
 800d9fc:	d117      	bne.n	800da2e <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d9fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800da02:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800da06:	3201      	adds	r2, #1
 800da08:	00d2      	lsls	r2, r2, #3
 800da0a:	211a      	movs	r1, #26
 800da0c:	fb01 f303 	mul.w	r3, r1, r3
 800da10:	4413      	add	r3, r2
 800da12:	3308      	adds	r3, #8
 800da14:	68fa      	ldr	r2, [r7, #12]
 800da16:	4413      	add	r3, r2
 800da18:	3304      	adds	r3, #4
 800da1a:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc (pep, (uint8_t *)(void *)pdesc);
 800da1c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800da1e:	69b8      	ldr	r0, [r7, #24]
 800da20:	f000 f851 	bl	800dac6 <USBH_ParseEPDesc>
            ep_ix++;
 800da24:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800da28:	3301      	adds	r3, #1
 800da2a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800da2e:	69fb      	ldr	r3, [r7, #28]
 800da30:	791b      	ldrb	r3, [r3, #4]
 800da32:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800da36:	429a      	cmp	r2, r3
 800da38:	d204      	bcs.n	800da44 <USBH_ParseCfgDesc+0x120>
 800da3a:	68fb      	ldr	r3, [r7, #12]
 800da3c:	885a      	ldrh	r2, [r3, #2]
 800da3e:	8afb      	ldrh	r3, [r7, #22]
 800da40:	429a      	cmp	r2, r3
 800da42:	d8d1      	bhi.n	800d9e8 <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 800da44:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800da48:	3301      	adds	r3, #1
 800da4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800da4e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800da52:	2b01      	cmp	r3, #1
 800da54:	d804      	bhi.n	800da60 <USBH_ParseCfgDesc+0x13c>
 800da56:	68fb      	ldr	r3, [r7, #12]
 800da58:	885a      	ldrh	r2, [r3, #2]
 800da5a:	8afb      	ldrh	r3, [r7, #22]
 800da5c:	429a      	cmp	r2, r3
 800da5e:	d8a4      	bhi.n	800d9aa <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 800da60:	bf00      	nop
 800da62:	3728      	adds	r7, #40	; 0x28
 800da64:	46bd      	mov	sp, r7
 800da66:	bd80      	pop	{r7, pc}

0800da68 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc (USBH_InterfaceDescTypeDef *if_descriptor,
                                      uint8_t *buf)
{
 800da68:	b480      	push	{r7}
 800da6a:	b083      	sub	sp, #12
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
 800da70:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t  *) (buf + 0);
 800da72:	683b      	ldr	r3, [r7, #0]
 800da74:	781a      	ldrb	r2, [r3, #0]
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t  *) (buf + 1);
 800da7a:	683b      	ldr	r3, [r7, #0]
 800da7c:	785a      	ldrb	r2, [r3, #1]
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t  *) (buf + 2);
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	789a      	ldrb	r2, [r3, #2]
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t  *) (buf + 3);
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	78da      	ldrb	r2, [r3, #3]
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t  *) (buf + 4);
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	791a      	ldrb	r2, [r3, #4]
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t  *) (buf + 5);
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	795a      	ldrb	r2, [r3, #5]
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t  *) (buf + 6);
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	799a      	ldrb	r2, [r3, #6]
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t  *) (buf + 7);
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	79da      	ldrb	r2, [r3, #7]
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t  *) (buf + 8);
 800dab2:	683b      	ldr	r3, [r7, #0]
 800dab4:	7a1a      	ldrb	r2, [r3, #8]
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	721a      	strb	r2, [r3, #8]
}
 800daba:	bf00      	nop
 800dabc:	370c      	adds	r7, #12
 800dabe:	46bd      	mov	sp, r7
 800dac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac4:	4770      	bx	lr

0800dac6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc (USBH_EpDescTypeDef  *ep_descriptor,
                               uint8_t *buf)
{
 800dac6:	b480      	push	{r7}
 800dac8:	b083      	sub	sp, #12
 800daca:	af00      	add	r7, sp, #0
 800dacc:	6078      	str	r0, [r7, #4]
 800dace:	6039      	str	r1, [r7, #0]

  ep_descriptor->bLength          = *(uint8_t  *) (buf + 0);
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	781a      	ldrb	r2, [r3, #0]
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t  *) (buf + 1);
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	785a      	ldrb	r2, [r3, #1]
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t  *) (buf + 2);
 800dae0:	683b      	ldr	r3, [r7, #0]
 800dae2:	789a      	ldrb	r2, [r3, #2]
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t  *) (buf + 3);
 800dae8:	683b      	ldr	r3, [r7, #0]
 800daea:	78da      	ldrb	r2, [r3, #3]
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16 (buf + 4);
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	3304      	adds	r3, #4
 800daf4:	781b      	ldrb	r3, [r3, #0]
 800daf6:	b29a      	uxth	r2, r3
 800daf8:	683b      	ldr	r3, [r7, #0]
 800dafa:	3305      	adds	r3, #5
 800dafc:	781b      	ldrb	r3, [r3, #0]
 800dafe:	b29b      	uxth	r3, r3
 800db00:	021b      	lsls	r3, r3, #8
 800db02:	b29b      	uxth	r3, r3
 800db04:	4313      	orrs	r3, r2
 800db06:	b29a      	uxth	r2, r3
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t  *) (buf + 6);
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	799a      	ldrb	r2, [r3, #6]
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	719a      	strb	r2, [r3, #6]
}
 800db14:	bf00      	nop
 800db16:	370c      	adds	r7, #12
 800db18:	46bd      	mov	sp, r7
 800db1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1e:	4770      	bx	lr

0800db20 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc (uint8_t* psrc, uint8_t* pdest, uint16_t length)
{
 800db20:	b480      	push	{r7}
 800db22:	b087      	sub	sp, #28
 800db24:	af00      	add	r7, sp, #0
 800db26:	60f8      	str	r0, [r7, #12]
 800db28:	60b9      	str	r1, [r7, #8]
 800db2a:	4613      	mov	r3, r2
 800db2c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	3301      	adds	r3, #1
 800db32:	781b      	ldrb	r3, [r3, #0]
 800db34:	2b03      	cmp	r3, #3
 800db36:	d120      	bne.n	800db7a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800db38:	68fb      	ldr	r3, [r7, #12]
 800db3a:	781b      	ldrb	r3, [r3, #0]
 800db3c:	1e9a      	subs	r2, r3, #2
 800db3e:	88fb      	ldrh	r3, [r7, #6]
 800db40:	4293      	cmp	r3, r2
 800db42:	bf28      	it	cs
 800db44:	4613      	movcs	r3, r2
 800db46:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800db48:	68fb      	ldr	r3, [r7, #12]
 800db4a:	3302      	adds	r3, #2
 800db4c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800db4e:	2300      	movs	r3, #0
 800db50:	82fb      	strh	r3, [r7, #22]
 800db52:	e00b      	b.n	800db6c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800db54:	8afb      	ldrh	r3, [r7, #22]
 800db56:	68fa      	ldr	r2, [r7, #12]
 800db58:	4413      	add	r3, r2
 800db5a:	781a      	ldrb	r2, [r3, #0]
 800db5c:	68bb      	ldr	r3, [r7, #8]
 800db5e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800db60:	68bb      	ldr	r3, [r7, #8]
 800db62:	3301      	adds	r3, #1
 800db64:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800db66:	8afb      	ldrh	r3, [r7, #22]
 800db68:	3302      	adds	r3, #2
 800db6a:	82fb      	strh	r3, [r7, #22]
 800db6c:	8afa      	ldrh	r2, [r7, #22]
 800db6e:	8abb      	ldrh	r3, [r7, #20]
 800db70:	429a      	cmp	r2, r3
 800db72:	d3ef      	bcc.n	800db54 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800db74:	68bb      	ldr	r3, [r7, #8]
 800db76:	2200      	movs	r2, #0
 800db78:	701a      	strb	r2, [r3, #0]
  }
}
 800db7a:	bf00      	nop
 800db7c:	371c      	adds	r7, #28
 800db7e:	46bd      	mov	sp, r7
 800db80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db84:	4770      	bx	lr

0800db86 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc (uint8_t   *pbuf, uint16_t  *ptr)
{
 800db86:	b480      	push	{r7}
 800db88:	b085      	sub	sp, #20
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	6078      	str	r0, [r7, #4]
 800db8e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	881a      	ldrh	r2, [r3, #0]
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	b29b      	uxth	r3, r3
 800db9a:	4413      	add	r3, r2
 800db9c:	b29a      	uxth	r2, r3
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
         ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	781b      	ldrb	r3, [r3, #0]
 800dba6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	4413      	add	r3, r2
 800dbac:	60fb      	str	r3, [r7, #12]

  return(pnext);
 800dbae:	68fb      	ldr	r3, [r7, #12]
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3714      	adds	r7, #20
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbba:	4770      	bx	lr

0800dbbc <USBH_CtlReq>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq     (USBH_HandleTypeDef *phost,
                             uint8_t             *buff,
                             uint16_t            length)
{
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b086      	sub	sp, #24
 800dbc0:	af00      	add	r7, sp, #0
 800dbc2:	60f8      	str	r0, [r7, #12]
 800dbc4:	60b9      	str	r1, [r7, #8]
 800dbc6:	4613      	mov	r3, r2
 800dbc8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800dbca:	2301      	movs	r3, #1
 800dbcc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	789b      	ldrb	r3, [r3, #2]
 800dbd2:	2b01      	cmp	r3, #1
 800dbd4:	d002      	beq.n	800dbdc <USBH_CtlReq+0x20>
 800dbd6:	2b02      	cmp	r3, #2
 800dbd8:	d01d      	beq.n	800dc16 <USBH_CtlReq+0x5a>
      }
    }
    break;

  default:
    break;
 800dbda:	e042      	b.n	800dc62 <USBH_CtlReq+0xa6>
    phost->Control.buff = buff;
 800dbdc:	68fb      	ldr	r3, [r7, #12]
 800dbde:	68ba      	ldr	r2, [r7, #8]
 800dbe0:	609a      	str	r2, [r3, #8]
    phost->Control.length = length;
 800dbe2:	68fb      	ldr	r3, [r7, #12]
 800dbe4:	88fa      	ldrh	r2, [r7, #6]
 800dbe6:	819a      	strh	r2, [r3, #12]
    phost->Control.state = CTRL_SETUP;
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	2201      	movs	r2, #1
 800dbec:	761a      	strb	r2, [r3, #24]
    phost->RequestState = CMD_WAIT;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	2202      	movs	r2, #2
 800dbf2:	709a      	strb	r2, [r3, #2]
    status = USBH_BUSY;
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	75fb      	strb	r3, [r7, #23]
    phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	2203      	movs	r2, #3
 800dbfc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
    (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dc06:	68fb      	ldr	r3, [r7, #12]
 800dc08:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dc0c:	2200      	movs	r2, #0
 800dc0e:	4619      	mov	r1, r3
 800dc10:	f003 fc28 	bl	8011464 <osMessagePut>
    break;
 800dc14:	e025      	b.n	800dc62 <USBH_CtlReq+0xa6>
    status = USBH_HandleControl(phost);
 800dc16:	68f8      	ldr	r0, [r7, #12]
 800dc18:	f000 f828 	bl	800dc6c <USBH_HandleControl>
 800dc1c:	4603      	mov	r3, r0
 800dc1e:	75fb      	strb	r3, [r7, #23]
    if (status == USBH_OK)
 800dc20:	7dfb      	ldrb	r3, [r7, #23]
 800dc22:	2b00      	cmp	r3, #0
 800dc24:	d108      	bne.n	800dc38 <USBH_CtlReq+0x7c>
      phost->RequestState = CMD_SEND;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	2201      	movs	r2, #1
 800dc2a:	709a      	strb	r2, [r3, #2]
      phost->Control.state =CTRL_IDLE;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	2200      	movs	r2, #0
 800dc30:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800dc32:	2300      	movs	r3, #0
 800dc34:	75fb      	strb	r3, [r7, #23]
    break;
 800dc36:	e013      	b.n	800dc60 <USBH_CtlReq+0xa4>
    else if (status == USBH_NOT_SUPPORTED)
 800dc38:	7dfb      	ldrb	r3, [r7, #23]
 800dc3a:	2b03      	cmp	r3, #3
 800dc3c:	d108      	bne.n	800dc50 <USBH_CtlReq+0x94>
      phost->RequestState = CMD_SEND;
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	2201      	movs	r2, #1
 800dc42:	709a      	strb	r2, [r3, #2]
      phost->Control.state = CTRL_IDLE;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	2200      	movs	r2, #0
 800dc48:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800dc4a:	2303      	movs	r3, #3
 800dc4c:	75fb      	strb	r3, [r7, #23]
    break;
 800dc4e:	e007      	b.n	800dc60 <USBH_CtlReq+0xa4>
      if (status == USBH_FAIL)
 800dc50:	7dfb      	ldrb	r3, [r7, #23]
 800dc52:	2b02      	cmp	r3, #2
 800dc54:	d104      	bne.n	800dc60 <USBH_CtlReq+0xa4>
        phost->RequestState = CMD_SEND;
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	2201      	movs	r2, #1
 800dc5a:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800dc5c:	2302      	movs	r3, #2
 800dc5e:	75fb      	strb	r3, [r7, #23]
    break;
 800dc60:	bf00      	nop
  }
  return status;
 800dc62:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc64:	4618      	mov	r0, r3
 800dc66:	3718      	adds	r7, #24
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}

0800dc6c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl (USBH_HandleTypeDef *phost)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b086      	sub	sp, #24
 800dc70:	af02      	add	r7, sp, #8
 800dc72:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800dc74:	2301      	movs	r3, #1
 800dc76:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800dc78:	2300      	movs	r3, #0
 800dc7a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	7e1b      	ldrb	r3, [r3, #24]
 800dc80:	3b01      	subs	r3, #1
 800dc82:	2b0a      	cmp	r3, #10
 800dc84:	f200 821f 	bhi.w	800e0c6 <USBH_HandleControl+0x45a>
 800dc88:	a201      	add	r2, pc, #4	; (adr r2, 800dc90 <USBH_HandleControl+0x24>)
 800dc8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc8e:	bf00      	nop
 800dc90:	0800dcbd 	.word	0x0800dcbd
 800dc94:	0800dcd7 	.word	0x0800dcd7
 800dc98:	0800dd79 	.word	0x0800dd79
 800dc9c:	0800dd9f 	.word	0x0800dd9f
 800dca0:	0800de2b 	.word	0x0800de2b
 800dca4:	0800de57 	.word	0x0800de57
 800dca8:	0800df19 	.word	0x0800df19
 800dcac:	0800df3b 	.word	0x0800df3b
 800dcb0:	0800dfcd 	.word	0x0800dfcd
 800dcb4:	0800dff5 	.word	0x0800dff5
 800dcb8:	0800e087 	.word	0x0800e087
  {
  case CTRL_SETUP:
    /* send a SETUP packet */
    USBH_CtlSendSetup (phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f103 0110 	add.w	r1, r3, #16
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	795b      	ldrb	r3, [r3, #5]
 800dcc6:	461a      	mov	r2, r3
 800dcc8:	6878      	ldr	r0, [r7, #4]
 800dcca:	f000 fa0d 	bl	800e0e8 <USBH_CtlSendSetup>
	                     phost->Control.pipe_out);

    phost->Control.state = CTRL_SETUP_WAIT;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2202      	movs	r2, #2
 800dcd2:	761a      	strb	r2, [r3, #24]
    break;
 800dcd4:	e202      	b.n	800e0dc <USBH_HandleControl+0x470>

  case CTRL_SETUP_WAIT:

    URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	795b      	ldrb	r3, [r3, #5]
 800dcda:	4619      	mov	r1, r3
 800dcdc:	6878      	ldr	r0, [r7, #4]
 800dcde:	f00b ffdf 	bl	8019ca0 <USBH_LL_GetURBState>
 800dce2:	4603      	mov	r3, r0
 800dce4:	73bb      	strb	r3, [r7, #14]
    /* case SETUP packet sent successfully */
    if(URB_Status == USBH_URB_DONE)
 800dce6:	7bbb      	ldrb	r3, [r7, #14]
 800dce8:	2b01      	cmp	r3, #1
 800dcea:	d12c      	bne.n	800dd46 <USBH_HandleControl+0xda>
    {
      direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	7c1b      	ldrb	r3, [r3, #16]
 800dcf0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dcf4:	737b      	strb	r3, [r7, #13]

      /* check if there is a data stage */
      if (phost->Control.setup.b.wLength.w != 0U)
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	8adb      	ldrh	r3, [r3, #22]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d00a      	beq.n	800dd14 <USBH_HandleControl+0xa8>
      {
        if (direction == USB_D2H)
 800dcfe:	7b7b      	ldrb	r3, [r7, #13]
 800dd00:	2b80      	cmp	r3, #128	; 0x80
 800dd02:	d103      	bne.n	800dd0c <USBH_HandleControl+0xa0>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_DATA_IN;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	2203      	movs	r2, #3
 800dd08:	761a      	strb	r2, [r3, #24]
 800dd0a:	e00d      	b.n	800dd28 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_DATA_OUT;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2205      	movs	r2, #5
 800dd10:	761a      	strb	r2, [r3, #24]
 800dd12:	e009      	b.n	800dd28 <USBH_HandleControl+0xbc>
      }
      /* No DATA stage */
      else
      {
        /* If there is No Data Transfer Stage */
        if (direction == USB_D2H)
 800dd14:	7b7b      	ldrb	r3, [r7, #13]
 800dd16:	2b80      	cmp	r3, #128	; 0x80
 800dd18:	d103      	bne.n	800dd22 <USBH_HandleControl+0xb6>
        {
          /* Data Direction is IN */
          phost->Control.state = CTRL_STATUS_OUT;
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	2209      	movs	r2, #9
 800dd1e:	761a      	strb	r2, [r3, #24]
 800dd20:	e002      	b.n	800dd28 <USBH_HandleControl+0xbc>
        }
        else
        {
          /* Data Direction is OUT */
          phost->Control.state = CTRL_STATUS_IN;
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	2207      	movs	r2, #7
 800dd26:	761a      	strb	r2, [r3, #24]
        }
      }

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	2203      	movs	r2, #3
 800dd2c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dd3c:	2200      	movs	r2, #0
 800dd3e:	4619      	mov	r1, r3
 800dd40:	f003 fb90 	bl	8011464 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800dd44:	e1c1      	b.n	800e0ca <USBH_HandleControl+0x45e>
      if((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800dd46:	7bbb      	ldrb	r3, [r7, #14]
 800dd48:	2b04      	cmp	r3, #4
 800dd4a:	d003      	beq.n	800dd54 <USBH_HandleControl+0xe8>
 800dd4c:	7bbb      	ldrb	r3, [r7, #14]
 800dd4e:	2b02      	cmp	r3, #2
 800dd50:	f040 81bb 	bne.w	800e0ca <USBH_HandleControl+0x45e>
        phost->Control.state = CTRL_ERROR;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	220b      	movs	r2, #11
 800dd58:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	2203      	movs	r2, #3
 800dd5e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dd6e:	2200      	movs	r2, #0
 800dd70:	4619      	mov	r1, r3
 800dd72:	f003 fb77 	bl	8011464 <osMessagePut>
    break;
 800dd76:	e1a8      	b.n	800e0ca <USBH_HandleControl+0x45e>

  case CTRL_DATA_IN:
    /* Issue an IN token */
    phost->Control.timer = (uint16_t)phost->Timer;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800dd7e:	b29a      	uxth	r2, r3
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	81da      	strh	r2, [r3, #14]
    USBH_CtlReceiveData(phost,
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	6899      	ldr	r1, [r3, #8]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	899a      	ldrh	r2, [r3, #12]
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	791b      	ldrb	r3, [r3, #4]
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f000 f9e8 	bl	800e166 <USBH_CtlReceiveData>
                        phost->Control.buff,
                        phost->Control.length,
                        phost->Control.pipe_in);

    phost->Control.state = CTRL_DATA_IN_WAIT;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	2204      	movs	r2, #4
 800dd9a:	761a      	strb	r2, [r3, #24]
    break;
 800dd9c:	e19e      	b.n	800e0dc <USBH_HandleControl+0x470>

  case CTRL_DATA_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	791b      	ldrb	r3, [r3, #4]
 800dda2:	4619      	mov	r1, r3
 800dda4:	6878      	ldr	r0, [r7, #4]
 800dda6:	f00b ff7b 	bl	8019ca0 <USBH_LL_GetURBState>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	73bb      	strb	r3, [r7, #14]

    /* check is DATA packet transferred successfully */
    if  (URB_Status == USBH_URB_DONE)
 800ddae:	7bbb      	ldrb	r3, [r7, #14]
 800ddb0:	2b01      	cmp	r3, #1
 800ddb2:	d110      	bne.n	800ddd6 <USBH_HandleControl+0x16a>
    {
      phost->Control.state = CTRL_STATUS_OUT;
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	2209      	movs	r2, #9
 800ddb8:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	2203      	movs	r2, #3
 800ddbe:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ddc8:	687b      	ldr	r3, [r7, #4]
 800ddca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ddce:	2200      	movs	r2, #0
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	f003 fb47 	bl	8011464 <osMessagePut>
#endif
#endif
    }

    /* manage error cases*/
    if  (URB_Status == USBH_URB_STALL)
 800ddd6:	7bbb      	ldrb	r3, [r7, #14]
 800ddd8:	2b05      	cmp	r3, #5
 800ddda:	d110      	bne.n	800ddfe <USBH_HandleControl+0x192>
    {
      /* In stall case, return to previous machine state*/
      status = USBH_NOT_SUPPORTED;
 800dddc:	2303      	movs	r3, #3
 800ddde:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2203      	movs	r2, #3
 800dde4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	4619      	mov	r1, r3
 800ddf8:	f003 fb34 	bl	8011464 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800ddfc:	e167      	b.n	800e0ce <USBH_HandleControl+0x462>
      if (URB_Status == USBH_URB_ERROR)
 800ddfe:	7bbb      	ldrb	r3, [r7, #14]
 800de00:	2b04      	cmp	r3, #4
 800de02:	f040 8164 	bne.w	800e0ce <USBH_HandleControl+0x462>
        phost->Control.state = CTRL_ERROR;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	220b      	movs	r2, #11
 800de0a:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2203      	movs	r2, #3
 800de10:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800de1a:	687b      	ldr	r3, [r7, #4]
 800de1c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800de20:	2200      	movs	r2, #0
 800de22:	4619      	mov	r1, r3
 800de24:	f003 fb1e 	bl	8011464 <osMessagePut>
    break;
 800de28:	e151      	b.n	800e0ce <USBH_HandleControl+0x462>

  case CTRL_DATA_OUT:

    USBH_CtlSendData (phost,
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6899      	ldr	r1, [r3, #8]
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	899a      	ldrh	r2, [r3, #12]
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	7958      	ldrb	r0, [r3, #5]
 800de36:	2301      	movs	r3, #1
 800de38:	9300      	str	r3, [sp, #0]
 800de3a:	4603      	mov	r3, r0
 800de3c:	6878      	ldr	r0, [r7, #4]
 800de3e:	f000 f96d 	bl	800e11c <USBH_CtlSendData>
                      phost->Control.buff,
                      phost->Control.length ,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800de48:	b29a      	uxth	r2, r3
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_DATA_OUT_WAIT;
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	2206      	movs	r2, #6
 800de52:	761a      	strb	r2, [r3, #24]
    break;
 800de54:	e142      	b.n	800e0dc <USBH_HandleControl+0x470>

  case CTRL_DATA_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	795b      	ldrb	r3, [r3, #5]
 800de5a:	4619      	mov	r1, r3
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f00b ff1f 	bl	8019ca0 <USBH_LL_GetURBState>
 800de62:	4603      	mov	r3, r0
 800de64:	73bb      	strb	r3, [r7, #14]

    if  (URB_Status == USBH_URB_DONE)
 800de66:	7bbb      	ldrb	r3, [r7, #14]
 800de68:	2b01      	cmp	r3, #1
 800de6a:	d111      	bne.n	800de90 <USBH_HandleControl+0x224>
    { /* If the Setup Pkt is sent successful, then change the state */
      phost->Control.state = CTRL_STATUS_IN;
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2207      	movs	r2, #7
 800de70:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	2203      	movs	r2, #3
 800de76:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800de86:	2200      	movs	r2, #0
 800de88:	4619      	mov	r1, r3
 800de8a:	f003 faeb 	bl	8011464 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800de8e:	e120      	b.n	800e0d2 <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_STALL)
 800de90:	7bbb      	ldrb	r3, [r7, #14]
 800de92:	2b05      	cmp	r3, #5
 800de94:	d113      	bne.n	800debe <USBH_HandleControl+0x252>
      phost->Control.state = CTRL_STALLED;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	220c      	movs	r2, #12
 800de9a:	761a      	strb	r2, [r3, #24]
      status = USBH_NOT_SUPPORTED;
 800de9c:	2303      	movs	r3, #3
 800de9e:	73fb      	strb	r3, [r7, #15]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2203      	movs	r2, #3
 800dea4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800deb4:	2200      	movs	r2, #0
 800deb6:	4619      	mov	r1, r3
 800deb8:	f003 fad4 	bl	8011464 <osMessagePut>
    break;
 800debc:	e109      	b.n	800e0d2 <USBH_HandleControl+0x466>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800debe:	7bbb      	ldrb	r3, [r7, #14]
 800dec0:	2b02      	cmp	r3, #2
 800dec2:	d111      	bne.n	800dee8 <USBH_HandleControl+0x27c>
      phost->Control.state = CTRL_DATA_OUT;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2205      	movs	r2, #5
 800dec8:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	2203      	movs	r2, #3
 800dece:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dede:	2200      	movs	r2, #0
 800dee0:	4619      	mov	r1, r3
 800dee2:	f003 fabf 	bl	8011464 <osMessagePut>
    break;
 800dee6:	e0f4      	b.n	800e0d2 <USBH_HandleControl+0x466>
      if (URB_Status == USBH_URB_ERROR)
 800dee8:	7bbb      	ldrb	r3, [r7, #14]
 800deea:	2b04      	cmp	r3, #4
 800deec:	f040 80f1 	bne.w	800e0d2 <USBH_HandleControl+0x466>
        phost->Control.state = CTRL_ERROR;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	220b      	movs	r2, #11
 800def4:	761a      	strb	r2, [r3, #24]
        status = USBH_FAIL;
 800def6:	2302      	movs	r3, #2
 800def8:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2203      	movs	r2, #3
 800defe:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800df0e:	2200      	movs	r2, #0
 800df10:	4619      	mov	r1, r3
 800df12:	f003 faa7 	bl	8011464 <osMessagePut>
    break;
 800df16:	e0dc      	b.n	800e0d2 <USBH_HandleControl+0x466>


  case CTRL_STATUS_IN:
    /* Send 0 bytes out packet */
    USBH_CtlReceiveData (phost,
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	791b      	ldrb	r3, [r3, #4]
 800df1c:	2200      	movs	r2, #0
 800df1e:	2100      	movs	r1, #0
 800df20:	6878      	ldr	r0, [r7, #4]
 800df22:	f000 f920 	bl	800e166 <USBH_CtlReceiveData>
                         0U,
                         0U,
                         phost->Control.pipe_in);
    phost->Control.timer = (uint16_t)phost->Timer;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800df2c:	b29a      	uxth	r2, r3
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_IN_WAIT;
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	2208      	movs	r2, #8
 800df36:	761a      	strb	r2, [r3, #24]

    break;
 800df38:	e0d0      	b.n	800e0dc <USBH_HandleControl+0x470>

  case CTRL_STATUS_IN_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_in);
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	791b      	ldrb	r3, [r3, #4]
 800df3e:	4619      	mov	r1, r3
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f00b fead 	bl	8019ca0 <USBH_LL_GetURBState>
 800df46:	4603      	mov	r3, r0
 800df48:	73bb      	strb	r3, [r7, #14]

    if  ( URB_Status == USBH_URB_DONE)
 800df4a:	7bbb      	ldrb	r3, [r7, #14]
 800df4c:	2b01      	cmp	r3, #1
 800df4e:	d113      	bne.n	800df78 <USBH_HandleControl+0x30c>
    { /* Control transfers completed, Exit the State Machine */
      phost->Control.state = CTRL_COMPLETE;
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	220d      	movs	r2, #13
 800df54:	761a      	strb	r2, [r3, #24]
      status = USBH_OK;
 800df56:	2300      	movs	r3, #0
 800df58:	73fb      	strb	r3, [r7, #15]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2203      	movs	r2, #3
 800df5e:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800df6e:	2200      	movs	r2, #0
 800df70:	4619      	mov	r1, r3
 800df72:	f003 fa77 	bl	8011464 <osMessagePut>
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 800df76:	e0ae      	b.n	800e0d6 <USBH_HandleControl+0x46a>
    else if (URB_Status == USBH_URB_ERROR)
 800df78:	7bbb      	ldrb	r3, [r7, #14]
 800df7a:	2b04      	cmp	r3, #4
 800df7c:	d111      	bne.n	800dfa2 <USBH_HandleControl+0x336>
      phost->Control.state = CTRL_ERROR;
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	220b      	movs	r2, #11
 800df82:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	2203      	movs	r2, #3
 800df88:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800df98:	2200      	movs	r2, #0
 800df9a:	4619      	mov	r1, r3
 800df9c:	f003 fa62 	bl	8011464 <osMessagePut>
    break;
 800dfa0:	e099      	b.n	800e0d6 <USBH_HandleControl+0x46a>
      if(URB_Status == USBH_URB_STALL)
 800dfa2:	7bbb      	ldrb	r3, [r7, #14]
 800dfa4:	2b05      	cmp	r3, #5
 800dfa6:	f040 8096 	bne.w	800e0d6 <USBH_HandleControl+0x46a>
        status = USBH_NOT_SUPPORTED;
 800dfaa:	2303      	movs	r3, #3
 800dfac:	73fb      	strb	r3, [r7, #15]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2203      	movs	r2, #3
 800dfb2:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800dfc2:	2200      	movs	r2, #0
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	f003 fa4d 	bl	8011464 <osMessagePut>
    break;
 800dfca:	e084      	b.n	800e0d6 <USBH_HandleControl+0x46a>

  case CTRL_STATUS_OUT:
    USBH_CtlSendData (phost,
 800dfcc:	687b      	ldr	r3, [r7, #4]
 800dfce:	795a      	ldrb	r2, [r3, #5]
 800dfd0:	2301      	movs	r3, #1
 800dfd2:	9300      	str	r3, [sp, #0]
 800dfd4:	4613      	mov	r3, r2
 800dfd6:	2200      	movs	r2, #0
 800dfd8:	2100      	movs	r1, #0
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f000 f89e 	bl	800e11c <USBH_CtlSendData>
                      0U,
                      0U,
                      phost->Control.pipe_out,
                      1U);
     phost->Control.timer = (uint16_t)phost->Timer;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f8d3 33bc 	ldr.w	r3, [r3, #956]	; 0x3bc
 800dfe6:	b29a      	uxth	r2, r3
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	81da      	strh	r2, [r3, #14]
    phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	220a      	movs	r2, #10
 800dff0:	761a      	strb	r2, [r3, #24]
    break;
 800dff2:	e073      	b.n	800e0dc <USBH_HandleControl+0x470>

  case CTRL_STATUS_OUT_WAIT:

    URB_Status = USBH_LL_GetURBState(phost , phost->Control.pipe_out);
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	795b      	ldrb	r3, [r3, #5]
 800dff8:	4619      	mov	r1, r3
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f00b fe50 	bl	8019ca0 <USBH_LL_GetURBState>
 800e000:	4603      	mov	r3, r0
 800e002:	73bb      	strb	r3, [r7, #14]
    if  (URB_Status == USBH_URB_DONE)
 800e004:	7bbb      	ldrb	r3, [r7, #14]
 800e006:	2b01      	cmp	r3, #1
 800e008:	d113      	bne.n	800e032 <USBH_HandleControl+0x3c6>
    {
      status = USBH_OK;
 800e00a:	2300      	movs	r3, #0
 800e00c:	73fb      	strb	r3, [r7, #15]
      phost->Control.state = CTRL_COMPLETE;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	220d      	movs	r2, #13
 800e012:	761a      	strb	r2, [r3, #24]

#if (USBH_USE_OS == 1U)
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	2203      	movs	r2, #3
 800e018:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
#if (osCMSIS < 0x20000U)
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e028:	2200      	movs	r2, #0
 800e02a:	4619      	mov	r1, r3
 800e02c:	f003 fa1a 	bl	8011464 <osMessagePut>
#endif
#endif
      }

    }
    break;
 800e030:	e053      	b.n	800e0da <USBH_HandleControl+0x46e>
    else if  (URB_Status == USBH_URB_NOTREADY)
 800e032:	7bbb      	ldrb	r3, [r7, #14]
 800e034:	2b02      	cmp	r3, #2
 800e036:	d111      	bne.n	800e05c <USBH_HandleControl+0x3f0>
      phost->Control.state = CTRL_STATUS_OUT;
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	2209      	movs	r2, #9
 800e03c:	761a      	strb	r2, [r3, #24]
      phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	2203      	movs	r2, #3
 800e042:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e052:	2200      	movs	r2, #0
 800e054:	4619      	mov	r1, r3
 800e056:	f003 fa05 	bl	8011464 <osMessagePut>
    break;
 800e05a:	e03e      	b.n	800e0da <USBH_HandleControl+0x46e>
      if (URB_Status == USBH_URB_ERROR)
 800e05c:	7bbb      	ldrb	r3, [r7, #14]
 800e05e:	2b04      	cmp	r3, #4
 800e060:	d13b      	bne.n	800e0da <USBH_HandleControl+0x46e>
        phost->Control.state = CTRL_ERROR;
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	220b      	movs	r2, #11
 800e066:	761a      	strb	r2, [r3, #24]
        phost->os_msg = (uint32_t)USBH_CONTROL_EVENT;
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2203      	movs	r2, #3
 800e06c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4
        (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	f8d3 03cc 	ldr.w	r0, [r3, #972]	; 0x3cc
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800e07c:	2200      	movs	r2, #0
 800e07e:	4619      	mov	r1, r3
 800e080:	f003 f9f0 	bl	8011464 <osMessagePut>
    break;
 800e084:	e029      	b.n	800e0da <USBH_HandleControl+0x46e>
    PID; i.e., recovery actions via some other pipe are not required for control
    endpoints. For the Default Control Pipe, a device reset will ultimately be
    required to clear the halt or error condition if the next Setup PID is not
    accepted.
    */
    if (++ phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800e086:	687b      	ldr	r3, [r7, #4]
 800e088:	7e5b      	ldrb	r3, [r3, #25]
 800e08a:	3301      	adds	r3, #1
 800e08c:	b2da      	uxtb	r2, r3
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	765a      	strb	r2, [r3, #25]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	7e5b      	ldrb	r3, [r3, #25]
 800e096:	2b02      	cmp	r3, #2
 800e098:	d809      	bhi.n	800e0ae <USBH_HandleControl+0x442>
    {
      /* try to recover control */
      USBH_LL_Stop(phost);
 800e09a:	6878      	ldr	r0, [r7, #4]
 800e09c:	f00b fd13 	bl	8019ac6 <USBH_LL_Stop>

      /* Do the transmission again, starting from SETUP Packet */
      phost->Control.state = CTRL_SETUP;
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	2201      	movs	r2, #1
 800e0a4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_SEND;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2201      	movs	r2, #1
 800e0aa:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
      phost->Control.errorcount = 0U;
      USBH_ErrLog("Control error");
      status = USBH_FAIL;
    }
    break;
 800e0ac:	e016      	b.n	800e0dc <USBH_HandleControl+0x470>
      phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800e0b4:	2106      	movs	r1, #6
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	4798      	blx	r3
      phost->Control.errorcount = 0U;
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2200      	movs	r2, #0
 800e0be:	765a      	strb	r2, [r3, #25]
      status = USBH_FAIL;
 800e0c0:	2302      	movs	r3, #2
 800e0c2:	73fb      	strb	r3, [r7, #15]
    break;
 800e0c4:	e00a      	b.n	800e0dc <USBH_HandleControl+0x470>

  default:
    break;
 800e0c6:	bf00      	nop
 800e0c8:	e008      	b.n	800e0dc <USBH_HandleControl+0x470>
    break;
 800e0ca:	bf00      	nop
 800e0cc:	e006      	b.n	800e0dc <USBH_HandleControl+0x470>
    break;
 800e0ce:	bf00      	nop
 800e0d0:	e004      	b.n	800e0dc <USBH_HandleControl+0x470>
    break;
 800e0d2:	bf00      	nop
 800e0d4:	e002      	b.n	800e0dc <USBH_HandleControl+0x470>
    break;
 800e0d6:	bf00      	nop
 800e0d8:	e000      	b.n	800e0dc <USBH_HandleControl+0x470>
    break;
 800e0da:	bf00      	nop
  }
  return status;
 800e0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0de:	4618      	mov	r0, r3
 800e0e0:	3710      	adds	r7, #16
 800e0e2:	46bd      	mov	sp, r7
 800e0e4:	bd80      	pop	{r7, pc}
 800e0e6:	bf00      	nop

0800e0e8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint8_t pipe_num)
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b088      	sub	sp, #32
 800e0ec:	af04      	add	r7, sp, #16
 800e0ee:	60f8      	str	r0, [r7, #12]
 800e0f0:	60b9      	str	r1, [r7, #8]
 800e0f2:	4613      	mov	r3, r2
 800e0f4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800e0f6:	79f9      	ldrb	r1, [r7, #7]
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	9303      	str	r3, [sp, #12]
 800e0fc:	2308      	movs	r3, #8
 800e0fe:	9302      	str	r3, [sp, #8]
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	9301      	str	r3, [sp, #4]
 800e104:	2300      	movs	r3, #0
 800e106:	9300      	str	r3, [sp, #0]
 800e108:	2300      	movs	r3, #0
 800e10a:	2200      	movs	r2, #0
 800e10c:	68f8      	ldr	r0, [r7, #12]
 800e10e:	f00b fd96 	bl	8019c3e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800e112:	2300      	movs	r3, #0
}
 800e114:	4618      	mov	r0, r3
 800e116:	3710      	adds	r7, #16
 800e118:	46bd      	mov	sp, r7
 800e11a:	bd80      	pop	{r7, pc}

0800e11c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping )
{
 800e11c:	b580      	push	{r7, lr}
 800e11e:	b088      	sub	sp, #32
 800e120:	af04      	add	r7, sp, #16
 800e122:	60f8      	str	r0, [r7, #12]
 800e124:	60b9      	str	r1, [r7, #8]
 800e126:	4611      	mov	r1, r2
 800e128:	461a      	mov	r2, r3
 800e12a:	460b      	mov	r3, r1
 800e12c:	80fb      	strh	r3, [r7, #6]
 800e12e:	4613      	mov	r3, r2
 800e130:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d001      	beq.n	800e140 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800e13c:	2300      	movs	r3, #0
 800e13e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800e140:	7979      	ldrb	r1, [r7, #5]
 800e142:	7e3b      	ldrb	r3, [r7, #24]
 800e144:	9303      	str	r3, [sp, #12]
 800e146:	88fb      	ldrh	r3, [r7, #6]
 800e148:	9302      	str	r3, [sp, #8]
 800e14a:	68bb      	ldr	r3, [r7, #8]
 800e14c:	9301      	str	r3, [sp, #4]
 800e14e:	2301      	movs	r3, #1
 800e150:	9300      	str	r3, [sp, #0]
 800e152:	2300      	movs	r3, #0
 800e154:	2200      	movs	r2, #0
 800e156:	68f8      	ldr	r0, [r7, #12]
 800e158:	f00b fd71 	bl	8019c3e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800e15c:	2300      	movs	r3, #0
}
 800e15e:	4618      	mov	r0, r3
 800e160:	3710      	adds	r7, #16
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}

0800e166 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t* buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800e166:	b580      	push	{r7, lr}
 800e168:	b088      	sub	sp, #32
 800e16a:	af04      	add	r7, sp, #16
 800e16c:	60f8      	str	r0, [r7, #12]
 800e16e:	60b9      	str	r1, [r7, #8]
 800e170:	4611      	mov	r1, r2
 800e172:	461a      	mov	r2, r3
 800e174:	460b      	mov	r3, r1
 800e176:	80fb      	strh	r3, [r7, #6]
 800e178:	4613      	mov	r3, r2
 800e17a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800e17c:	7979      	ldrb	r1, [r7, #5]
 800e17e:	2300      	movs	r3, #0
 800e180:	9303      	str	r3, [sp, #12]
 800e182:	88fb      	ldrh	r3, [r7, #6]
 800e184:	9302      	str	r3, [sp, #8]
 800e186:	68bb      	ldr	r3, [r7, #8]
 800e188:	9301      	str	r3, [sp, #4]
 800e18a:	2301      	movs	r3, #1
 800e18c:	9300      	str	r3, [sp, #0]
 800e18e:	2300      	movs	r3, #0
 800e190:	2201      	movs	r2, #1
 800e192:	68f8      	ldr	r0, [r7, #12]
 800e194:	f00b fd53 	bl	8019c3e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e198:	2300      	movs	r3, #0

}
 800e19a:	4618      	mov	r0, r3
 800e19c:	3710      	adds	r7, #16
 800e19e:	46bd      	mov	sp, r7
 800e1a0:	bd80      	pop	{r7, pc}

0800e1a2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData (USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num,
                                uint8_t do_ping)
{
 800e1a2:	b580      	push	{r7, lr}
 800e1a4:	b088      	sub	sp, #32
 800e1a6:	af04      	add	r7, sp, #16
 800e1a8:	60f8      	str	r0, [r7, #12]
 800e1aa:	60b9      	str	r1, [r7, #8]
 800e1ac:	4611      	mov	r1, r2
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	80fb      	strh	r3, [r7, #6]
 800e1b4:	4613      	mov	r3, r2
 800e1b6:	717b      	strb	r3, [r7, #5]
  if(phost->device.speed != USBH_SPEED_HIGH)
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d001      	beq.n	800e1c6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800e1c6:	7979      	ldrb	r1, [r7, #5]
 800e1c8:	7e3b      	ldrb	r3, [r7, #24]
 800e1ca:	9303      	str	r3, [sp, #12]
 800e1cc:	88fb      	ldrh	r3, [r7, #6]
 800e1ce:	9302      	str	r3, [sp, #8]
 800e1d0:	68bb      	ldr	r3, [r7, #8]
 800e1d2:	9301      	str	r3, [sp, #4]
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	9300      	str	r3, [sp, #0]
 800e1d8:	2302      	movs	r3, #2
 800e1da:	2200      	movs	r2, #0
 800e1dc:	68f8      	ldr	r0, [r7, #12]
 800e1de:	f00b fd2e 	bl	8019c3e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800e1e2:	2300      	movs	r3, #0
}
 800e1e4:	4618      	mov	r0, r3
 800e1e6:	3710      	adds	r7, #16
 800e1e8:	46bd      	mov	sp, r7
 800e1ea:	bd80      	pop	{r7, pc}

0800e1ec <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                uint8_t *buff,
                                uint16_t length,
                                uint8_t pipe_num)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b088      	sub	sp, #32
 800e1f0:	af04      	add	r7, sp, #16
 800e1f2:	60f8      	str	r0, [r7, #12]
 800e1f4:	60b9      	str	r1, [r7, #8]
 800e1f6:	4611      	mov	r1, r2
 800e1f8:	461a      	mov	r2, r3
 800e1fa:	460b      	mov	r3, r1
 800e1fc:	80fb      	strh	r3, [r7, #6]
 800e1fe:	4613      	mov	r3, r2
 800e200:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB (phost,                     /* Driver handle    */
 800e202:	7979      	ldrb	r1, [r7, #5]
 800e204:	2300      	movs	r3, #0
 800e206:	9303      	str	r3, [sp, #12]
 800e208:	88fb      	ldrh	r3, [r7, #6]
 800e20a:	9302      	str	r3, [sp, #8]
 800e20c:	68bb      	ldr	r3, [r7, #8]
 800e20e:	9301      	str	r3, [sp, #4]
 800e210:	2301      	movs	r3, #1
 800e212:	9300      	str	r3, [sp, #0]
 800e214:	2302      	movs	r3, #2
 800e216:	2201      	movs	r2, #1
 800e218:	68f8      	ldr	r0, [r7, #12]
 800e21a:	f00b fd10 	bl	8019c3e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800e21e:	2300      	movs	r3, #0
}
 800e220:	4618      	mov	r0, r3
 800e222:	3710      	adds	r7, #16
 800e224:	46bd      	mov	sp, r7
 800e226:	bd80      	pop	{r7, pc}

0800e228 <USBH_OpenPipe>:
                            uint8_t epnum,
                            uint8_t dev_address,
                            uint8_t speed,
                            uint8_t ep_type,
                            uint16_t mps)
{
 800e228:	b580      	push	{r7, lr}
 800e22a:	b086      	sub	sp, #24
 800e22c:	af04      	add	r7, sp, #16
 800e22e:	6078      	str	r0, [r7, #4]
 800e230:	4608      	mov	r0, r1
 800e232:	4611      	mov	r1, r2
 800e234:	461a      	mov	r2, r3
 800e236:	4603      	mov	r3, r0
 800e238:	70fb      	strb	r3, [r7, #3]
 800e23a:	460b      	mov	r3, r1
 800e23c:	70bb      	strb	r3, [r7, #2]
 800e23e:	4613      	mov	r3, r2
 800e240:	707b      	strb	r3, [r7, #1]

  USBH_LL_OpenPipe(phost,
 800e242:	7878      	ldrb	r0, [r7, #1]
 800e244:	78ba      	ldrb	r2, [r7, #2]
 800e246:	78f9      	ldrb	r1, [r7, #3]
 800e248:	8b3b      	ldrh	r3, [r7, #24]
 800e24a:	9302      	str	r3, [sp, #8]
 800e24c:	7d3b      	ldrb	r3, [r7, #20]
 800e24e:	9301      	str	r3, [sp, #4]
 800e250:	7c3b      	ldrb	r3, [r7, #16]
 800e252:	9300      	str	r3, [sp, #0]
 800e254:	4603      	mov	r3, r0
 800e256:	6878      	ldr	r0, [r7, #4]
 800e258:	f00b fca3 	bl	8019ba2 <USBH_LL_OpenPipe>
                        dev_address,
                        speed,
                        ep_type,
                        mps);

  return USBH_OK;
 800e25c:	2300      	movs	r3, #0

}
 800e25e:	4618      	mov	r0, r3
 800e260:	3708      	adds	r7, #8
 800e262:	46bd      	mov	sp, r7
 800e264:	bd80      	pop	{r7, pc}

0800e266 <USBH_ClosePipe>:
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe  (USBH_HandleTypeDef *phost,
                            uint8_t pipe_num)
{
 800e266:	b580      	push	{r7, lr}
 800e268:	b082      	sub	sp, #8
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	6078      	str	r0, [r7, #4]
 800e26e:	460b      	mov	r3, r1
 800e270:	70fb      	strb	r3, [r7, #3]

  USBH_LL_ClosePipe(phost, pipe_num);
 800e272:	78fb      	ldrb	r3, [r7, #3]
 800e274:	4619      	mov	r1, r3
 800e276:	6878      	ldr	r0, [r7, #4]
 800e278:	f00b fcc2 	bl	8019c00 <USBH_LL_ClosePipe>

  return USBH_OK;
 800e27c:	2300      	movs	r3, #0

}
 800e27e:	4618      	mov	r0, r3
 800e280:	3708      	adds	r7, #8
 800e282:	46bd      	mov	sp, r7
 800e284:	bd80      	pop	{r7, pc}

0800e286 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe  (USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e286:	b580      	push	{r7, lr}
 800e288:	b084      	sub	sp, #16
 800e28a:	af00      	add	r7, sp, #0
 800e28c:	6078      	str	r0, [r7, #4]
 800e28e:	460b      	mov	r3, r1
 800e290:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e292:	6878      	ldr	r0, [r7, #4]
 800e294:	f000 f831 	bl	800e2fa <USBH_GetFreePipe>
 800e298:	4603      	mov	r3, r0
 800e29a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e29c:	89fb      	ldrh	r3, [r7, #14]
 800e29e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e2a2:	4293      	cmp	r3, r2
 800e2a4:	d007      	beq.n	800e2b6 <USBH_AllocPipe+0x30>
  {
	phost->Pipes[pipe] = 0x8000U | ep_addr;
 800e2a6:	78fb      	ldrb	r3, [r7, #3]
 800e2a8:	89fa      	ldrh	r2, [r7, #14]
 800e2aa:	f443 4100 	orr.w	r1, r3, #32768	; 0x8000
 800e2ae:	687b      	ldr	r3, [r7, #4]
 800e2b0:	32e0      	adds	r2, #224	; 0xe0
 800e2b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }
  return (uint8_t)pipe;
 800e2b6:	89fb      	ldrh	r3, [r7, #14]
 800e2b8:	b2db      	uxtb	r3, r3
}
 800e2ba:	4618      	mov	r0, r3
 800e2bc:	3710      	adds	r7, #16
 800e2be:	46bd      	mov	sp, r7
 800e2c0:	bd80      	pop	{r7, pc}

0800e2c2 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe  (USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e2c2:	b480      	push	{r7}
 800e2c4:	b083      	sub	sp, #12
 800e2c6:	af00      	add	r7, sp, #0
 800e2c8:	6078      	str	r0, [r7, #4]
 800e2ca:	460b      	mov	r3, r1
 800e2cc:	70fb      	strb	r3, [r7, #3]
   if(idx < 11U)
 800e2ce:	78fb      	ldrb	r3, [r7, #3]
 800e2d0:	2b0a      	cmp	r3, #10
 800e2d2:	d80b      	bhi.n	800e2ec <USBH_FreePipe+0x2a>
   {
	 phost->Pipes[idx] &= 0x7FFFU;
 800e2d4:	78fa      	ldrb	r2, [r7, #3]
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	32e0      	adds	r2, #224	; 0xe0
 800e2da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2de:	78fa      	ldrb	r2, [r7, #3]
 800e2e0:	f3c3 010e 	ubfx	r1, r3, #0, #15
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	32e0      	adds	r2, #224	; 0xe0
 800e2e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   }
   return USBH_OK;
 800e2ec:	2300      	movs	r3, #0
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	370c      	adds	r7, #12
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2f8:	4770      	bx	lr

0800e2fa <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe (USBH_HandleTypeDef *phost)
{
 800e2fa:	b480      	push	{r7}
 800e2fc:	b085      	sub	sp, #20
 800e2fe:	af00      	add	r7, sp, #0
 800e300:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e302:	2300      	movs	r3, #0
 800e304:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 800e306:	2300      	movs	r3, #0
 800e308:	73fb      	strb	r3, [r7, #15]
 800e30a:	e00e      	b.n	800e32a <USBH_GetFreePipe+0x30>
  {
	if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e30c:	7bfa      	ldrb	r2, [r7, #15]
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	32e0      	adds	r2, #224	; 0xe0
 800e312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e316:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e31a:	2b00      	cmp	r3, #0
 800e31c:	d102      	bne.n	800e324 <USBH_GetFreePipe+0x2a>
	{
	   return (uint16_t)idx;
 800e31e:	7bfb      	ldrb	r3, [r7, #15]
 800e320:	b29b      	uxth	r3, r3
 800e322:	e007      	b.n	800e334 <USBH_GetFreePipe+0x3a>
  for (idx = 0U ; idx < 11U ; idx++)
 800e324:	7bfb      	ldrb	r3, [r7, #15]
 800e326:	3301      	adds	r3, #1
 800e328:	73fb      	strb	r3, [r7, #15]
 800e32a:	7bfb      	ldrb	r3, [r7, #15]
 800e32c:	2b0a      	cmp	r3, #10
 800e32e:	d9ed      	bls.n	800e30c <USBH_GetFreePipe+0x12>
	}
  }
  return 0xFFFFU;
 800e330:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800e334:	4618      	mov	r0, r3
 800e336:	3714      	adds	r7, #20
 800e338:	46bd      	mov	sp, r7
 800e33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e33e:	4770      	bx	lr

0800e340 <_ZN8touchgfx15TouchControllerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~TouchController()
 800e340:	b480      	push	{r7}
 800e342:	b083      	sub	sp, #12
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
    {
 800e348:	4a04      	ldr	r2, [pc, #16]	; (800e35c <_ZN8touchgfx15TouchControllerD1Ev+0x1c>)
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	601a      	str	r2, [r3, #0]
    }
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	4618      	mov	r0, r3
 800e352:	370c      	adds	r7, #12
 800e354:	46bd      	mov	sp, r7
 800e356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e35a:	4770      	bx	lr
 800e35c:	08023f18 	.word	0x08023f18

0800e360 <_ZN8touchgfx15TouchControllerD0Ev>:
    virtual ~TouchController()
 800e360:	b580      	push	{r7, lr}
 800e362:	b082      	sub	sp, #8
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
    }
 800e368:	6878      	ldr	r0, [r7, #4]
 800e36a:	f7ff ffe9 	bl	800e340 <_ZN8touchgfx15TouchControllerD1Ev>
 800e36e:	2104      	movs	r1, #4
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f014 f856 	bl	8022422 <_ZdlPvj>
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	4618      	mov	r0, r3
 800e37a:	3708      	adds	r7, #8
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bd80      	pop	{r7, pc}

0800e380 <_ZN8touchgfx4RectC1Essss>:
     * @param x      The x coordinate.
     * @param y      The y coordinate.
     * @param width  The width.
     * @param height The height.
     */
    Rect(int16_t x, int16_t y, int16_t width, int16_t height)
 800e380:	b480      	push	{r7}
 800e382:	b085      	sub	sp, #20
 800e384:	af00      	add	r7, sp, #0
 800e386:	60f8      	str	r0, [r7, #12]
 800e388:	4608      	mov	r0, r1
 800e38a:	4611      	mov	r1, r2
 800e38c:	461a      	mov	r2, r3
 800e38e:	4603      	mov	r3, r0
 800e390:	817b      	strh	r3, [r7, #10]
 800e392:	460b      	mov	r3, r1
 800e394:	813b      	strh	r3, [r7, #8]
 800e396:	4613      	mov	r3, r2
 800e398:	80fb      	strh	r3, [r7, #6]
    {
        this->x = x;
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	897a      	ldrh	r2, [r7, #10]
 800e39e:	801a      	strh	r2, [r3, #0]
        this->y = y;
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	893a      	ldrh	r2, [r7, #8]
 800e3a4:	805a      	strh	r2, [r3, #2]
        this->width = width;
 800e3a6:	68fb      	ldr	r3, [r7, #12]
 800e3a8:	88fa      	ldrh	r2, [r7, #6]
 800e3aa:	809a      	strh	r2, [r3, #4]
        this->height = height;
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	8b3a      	ldrh	r2, [r7, #24]
 800e3b0:	80da      	strh	r2, [r3, #6]
    }
 800e3b2:	68fb      	ldr	r3, [r7, #12]
 800e3b4:	4618      	mov	r0, r3
 800e3b6:	3714      	adds	r7, #20
 800e3b8:	46bd      	mov	sp, r7
 800e3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3be:	4770      	bx	lr

0800e3c0 <_ZNK8touchgfx4Rect5rightEv>:
     *
     *        Gets the x coordinate of the right edge of the Rect.
     *
     * @return x coordinate of the right edge.
     */
    inline int16_t right() const
 800e3c0:	b480      	push	{r7}
 800e3c2:	b083      	sub	sp, #12
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	6078      	str	r0, [r7, #4]
    {
        return x + width;
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e3ce:	b29a      	uxth	r2, r3
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e3d6:	b29b      	uxth	r3, r3
 800e3d8:	4413      	add	r3, r2
 800e3da:	b29b      	uxth	r3, r3
 800e3dc:	b21b      	sxth	r3, r3
    }
 800e3de:	4618      	mov	r0, r3
 800e3e0:	370c      	adds	r7, #12
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3e8:	4770      	bx	lr

0800e3ea <_ZNK8touchgfx4Rect6bottomEv>:
     *
     *        Gets the y coordinate of the bottom edge of the Rect.
     *
     * @return y coordinate of the buttom edge.
     */
    inline int16_t bottom() const
 800e3ea:	b480      	push	{r7}
 800e3ec:	b083      	sub	sp, #12
 800e3ee:	af00      	add	r7, sp, #0
 800e3f0:	6078      	str	r0, [r7, #4]
    {
        return y + height;
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e3f8:	b29a      	uxth	r2, r3
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e400:	b29b      	uxth	r3, r3
 800e402:	4413      	add	r3, r2
 800e404:	b29b      	uxth	r3, r3
 800e406:	b21b      	sxth	r3, r3
    }
 800e408:	4618      	mov	r0, r3
 800e40a:	370c      	adds	r7, #12
 800e40c:	46bd      	mov	sp, r7
 800e40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e412:	4770      	bx	lr

0800e414 <_ZNK8touchgfx4Rect9intersectEss>:
     * @param otherX The x coordinate of the point.
     * @param otherY The y coordinate of the point.
     *
     * @return true if point lies inside rectangle.
     */
    bool intersect(int16_t otherX, int16_t otherY) const
 800e414:	b580      	push	{r7, lr}
 800e416:	b082      	sub	sp, #8
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
 800e41c:	460b      	mov	r3, r1
 800e41e:	807b      	strh	r3, [r7, #2]
 800e420:	4613      	mov	r3, r2
 800e422:	803b      	strh	r3, [r7, #0]
    {
        return (otherX >= x && otherX < right() &&
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f9b3 3000 	ldrsh.w	r3, [r3]
                otherY >= y && otherY < bottom());
 800e42a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e42e:	429a      	cmp	r2, r3
 800e430:	db1a      	blt.n	800e468 <_ZNK8touchgfx4Rect9intersectEss+0x54>
        return (otherX >= x && otherX < right() &&
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f7ff ffc4 	bl	800e3c0 <_ZNK8touchgfx4Rect5rightEv>
 800e438:	4603      	mov	r3, r0
 800e43a:	461a      	mov	r2, r3
 800e43c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800e440:	4293      	cmp	r3, r2
 800e442:	da11      	bge.n	800e468 <_ZNK8touchgfx4Rect9intersectEss+0x54>
                otherY >= y && otherY < bottom());
 800e444:	687b      	ldr	r3, [r7, #4]
 800e446:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        return (otherX >= x && otherX < right() &&
 800e44a:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e44e:	429a      	cmp	r2, r3
 800e450:	db0a      	blt.n	800e468 <_ZNK8touchgfx4Rect9intersectEss+0x54>
                otherY >= y && otherY < bottom());
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f7ff ffc9 	bl	800e3ea <_ZNK8touchgfx4Rect6bottomEv>
 800e458:	4603      	mov	r3, r0
 800e45a:	461a      	mov	r2, r3
 800e45c:	f9b7 3000 	ldrsh.w	r3, [r7]
 800e460:	4293      	cmp	r3, r2
 800e462:	da01      	bge.n	800e468 <_ZNK8touchgfx4Rect9intersectEss+0x54>
 800e464:	2301      	movs	r3, #1
 800e466:	e000      	b.n	800e46a <_ZNK8touchgfx4Rect9intersectEss+0x56>
 800e468:	2300      	movs	r3, #0
    }
 800e46a:	4618      	mov	r0, r3
 800e46c:	3708      	adds	r7, #8
 800e46e:	46bd      	mov	sp, r7
 800e470:	bd80      	pop	{r7, pc}

0800e472 <_ZNK8touchgfx4Rect9intersectERKS0_>:
     *
     * @param other The other rectangle.
     *
     * @return true if the two rectangles intersect.
     */
    bool intersect(const Rect& other) const
 800e472:	b590      	push	{r4, r7, lr}
 800e474:	b083      	sub	sp, #12
 800e476:	af00      	add	r7, sp, #0
 800e478:	6078      	str	r0, [r7, #4]
 800e47a:	6039      	str	r1, [r7, #0]
    {
        return !(x >= other.right() || right() <= other.x ||
 800e47c:	687b      	ldr	r3, [r7, #4]
 800e47e:	f9b3 4000 	ldrsh.w	r4, [r3]
 800e482:	6838      	ldr	r0, [r7, #0]
 800e484:	f7ff ff9c 	bl	800e3c0 <_ZNK8touchgfx4Rect5rightEv>
 800e488:	4603      	mov	r3, r0
 800e48a:	429c      	cmp	r4, r3
 800e48c:	da1e      	bge.n	800e4cc <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f7ff ff96 	bl	800e3c0 <_ZNK8touchgfx4Rect5rightEv>
 800e494:	4603      	mov	r3, r0
 800e496:	461a      	mov	r2, r3
 800e498:	683b      	ldr	r3, [r7, #0]
 800e49a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	dd14      	ble.n	800e4cc <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
                 y >= other.bottom() || bottom() <= other.y);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
 800e4a8:	6838      	ldr	r0, [r7, #0]
 800e4aa:	f7ff ff9e 	bl	800e3ea <_ZNK8touchgfx4Rect6bottomEv>
 800e4ae:	4603      	mov	r3, r0
        return !(x >= other.right() || right() <= other.x ||
 800e4b0:	429c      	cmp	r4, r3
 800e4b2:	da0b      	bge.n	800e4cc <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
                 y >= other.bottom() || bottom() <= other.y);
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f7ff ff98 	bl	800e3ea <_ZNK8touchgfx4Rect6bottomEv>
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	461a      	mov	r2, r3
 800e4be:	683b      	ldr	r3, [r7, #0]
 800e4c0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
        return !(x >= other.right() || right() <= other.x ||
 800e4c4:	429a      	cmp	r2, r3
 800e4c6:	dd01      	ble.n	800e4cc <_ZNK8touchgfx4Rect9intersectERKS0_+0x5a>
 800e4c8:	2301      	movs	r3, #1
 800e4ca:	e000      	b.n	800e4ce <_ZNK8touchgfx4Rect9intersectERKS0_+0x5c>
 800e4cc:	2300      	movs	r3, #0
    }
 800e4ce:	4618      	mov	r0, r3
 800e4d0:	370c      	adds	r7, #12
 800e4d2:	46bd      	mov	sp, r7
 800e4d4:	bd90      	pop	{r4, r7, pc}

0800e4d6 <_ZNK8touchgfx4RectanERKS0_>:
     *
     * @param other The other rectangle.
     *
     * @return Intersecting rectangle or Rect(0, 0, 0, 0) in case of no intersection.
     */
    Rect operator &(const Rect& other) const
 800e4d6:	b580      	push	{r7, lr}
 800e4d8:	b084      	sub	sp, #16
 800e4da:	af00      	add	r7, sp, #0
 800e4dc:	60f8      	str	r0, [r7, #12]
 800e4de:	60b9      	str	r1, [r7, #8]
 800e4e0:	607a      	str	r2, [r7, #4]
    {
        Rect r = *this;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	68ba      	ldr	r2, [r7, #8]
 800e4e6:	6811      	ldr	r1, [r2, #0]
 800e4e8:	6852      	ldr	r2, [r2, #4]
 800e4ea:	6019      	str	r1, [r3, #0]
 800e4ec:	605a      	str	r2, [r3, #4]
        r &= other;
 800e4ee:	6879      	ldr	r1, [r7, #4]
 800e4f0:	68f8      	ldr	r0, [r7, #12]
 800e4f2:	f000 f805 	bl	800e500 <_ZN8touchgfx4RectaNERKS0_>
        return r;
 800e4f6:	bf00      	nop
    }
 800e4f8:	68f8      	ldr	r0, [r7, #12]
 800e4fa:	3710      	adds	r7, #16
 800e4fc:	46bd      	mov	sp, r7
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <_ZN8touchgfx4RectaNERKS0_>:
     *        Assigns this Rect to the intersection of the current Rect and the assigned Rect.
     *        The assignment will result in a Rect(0, 0, 0, 0) if they do not intersect.
     *
     * @param other The rect to intersect with.
     */
    void operator &=(const Rect& other)
 800e500:	b590      	push	{r4, r7, lr}
 800e502:	b085      	sub	sp, #20
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
 800e508:	6039      	str	r1, [r7, #0]
    {
        if (intersect(other))
 800e50a:	6839      	ldr	r1, [r7, #0]
 800e50c:	6878      	ldr	r0, [r7, #4]
 800e50e:	f7ff ffb0 	bl	800e472 <_ZNK8touchgfx4Rect9intersectERKS0_>
 800e512:	4603      	mov	r3, r0
 800e514:	2b00      	cmp	r3, #0
 800e516:	d05f      	beq.n	800e5d8 <_ZN8touchgfx4RectaNERKS0_+0xd8>
        {
            int16_t newX = MAX(x, other.x);
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e51e:	683b      	ldr	r3, [r7, #0]
 800e520:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e524:	429a      	cmp	r2, r3
 800e526:	dd03      	ble.n	800e530 <_ZN8touchgfx4RectaNERKS0_+0x30>
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e52e:	e002      	b.n	800e536 <_ZN8touchgfx4RectaNERKS0_+0x36>
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e536:	81fb      	strh	r3, [r7, #14]
            int16_t newY = MAX(y, other.y);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e544:	429a      	cmp	r2, r3
 800e546:	dd04      	ble.n	800e552 <_ZN8touchgfx4RectaNERKS0_+0x52>
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	3302      	adds	r3, #2
 800e54c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e550:	e002      	b.n	800e558 <_ZN8touchgfx4RectaNERKS0_+0x58>
 800e552:	683b      	ldr	r3, [r7, #0]
 800e554:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e558:	81bb      	strh	r3, [r7, #12]

            width = MIN(right(), other.right()) - newX;
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f7ff ff30 	bl	800e3c0 <_ZNK8touchgfx4Rect5rightEv>
 800e560:	4603      	mov	r3, r0
 800e562:	461c      	mov	r4, r3
 800e564:	6838      	ldr	r0, [r7, #0]
 800e566:	f7ff ff2b 	bl	800e3c0 <_ZNK8touchgfx4Rect5rightEv>
 800e56a:	4603      	mov	r3, r0
 800e56c:	429c      	cmp	r4, r3
 800e56e:	da05      	bge.n	800e57c <_ZN8touchgfx4RectaNERKS0_+0x7c>
 800e570:	6878      	ldr	r0, [r7, #4]
 800e572:	f7ff ff25 	bl	800e3c0 <_ZNK8touchgfx4Rect5rightEv>
 800e576:	4603      	mov	r3, r0
 800e578:	b29b      	uxth	r3, r3
 800e57a:	e004      	b.n	800e586 <_ZN8touchgfx4RectaNERKS0_+0x86>
 800e57c:	6838      	ldr	r0, [r7, #0]
 800e57e:	f7ff ff1f 	bl	800e3c0 <_ZNK8touchgfx4Rect5rightEv>
 800e582:	4603      	mov	r3, r0
 800e584:	b29b      	uxth	r3, r3
 800e586:	89fa      	ldrh	r2, [r7, #14]
 800e588:	1a9b      	subs	r3, r3, r2
 800e58a:	b29b      	uxth	r3, r3
 800e58c:	b21a      	sxth	r2, r3
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	809a      	strh	r2, [r3, #4]
            height = MIN(bottom(), other.bottom()) - newY;
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f7ff ff29 	bl	800e3ea <_ZNK8touchgfx4Rect6bottomEv>
 800e598:	4603      	mov	r3, r0
 800e59a:	461c      	mov	r4, r3
 800e59c:	6838      	ldr	r0, [r7, #0]
 800e59e:	f7ff ff24 	bl	800e3ea <_ZNK8touchgfx4Rect6bottomEv>
 800e5a2:	4603      	mov	r3, r0
 800e5a4:	429c      	cmp	r4, r3
 800e5a6:	da05      	bge.n	800e5b4 <_ZN8touchgfx4RectaNERKS0_+0xb4>
 800e5a8:	6878      	ldr	r0, [r7, #4]
 800e5aa:	f7ff ff1e 	bl	800e3ea <_ZNK8touchgfx4Rect6bottomEv>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	b29b      	uxth	r3, r3
 800e5b2:	e004      	b.n	800e5be <_ZN8touchgfx4RectaNERKS0_+0xbe>
 800e5b4:	6838      	ldr	r0, [r7, #0]
 800e5b6:	f7ff ff18 	bl	800e3ea <_ZNK8touchgfx4Rect6bottomEv>
 800e5ba:	4603      	mov	r3, r0
 800e5bc:	b29b      	uxth	r3, r3
 800e5be:	89ba      	ldrh	r2, [r7, #12]
 800e5c0:	1a9b      	subs	r3, r3, r2
 800e5c2:	b29b      	uxth	r3, r3
 800e5c4:	b21a      	sxth	r2, r3
 800e5c6:	687b      	ldr	r3, [r7, #4]
 800e5c8:	80da      	strh	r2, [r3, #6]
            x = newX;
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	89fa      	ldrh	r2, [r7, #14]
 800e5ce:	801a      	strh	r2, [r3, #0]
            y = newY;
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	89ba      	ldrh	r2, [r7, #12]
 800e5d4:	805a      	strh	r2, [r3, #2]
            x = 0;
            y = 0;
            width = 0;
            height = 0;
        }
    }
 800e5d6:	e00b      	b.n	800e5f0 <_ZN8touchgfx4RectaNERKS0_+0xf0>
            x = 0;
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	2200      	movs	r2, #0
 800e5dc:	801a      	strh	r2, [r3, #0]
            y = 0;
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	805a      	strh	r2, [r3, #2]
            width = 0;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	809a      	strh	r2, [r3, #4]
            height = 0;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	80da      	strh	r2, [r3, #6]
    }
 800e5f0:	bf00      	nop
 800e5f2:	3714      	adds	r7, #20
 800e5f4:	46bd      	mov	sp, r7
 800e5f6:	bd90      	pop	{r4, r7, pc}

0800e5f8 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
     *        Increases the area covered by this rectangle to encompass the area covered by
     *        supplied rectangle.
     *
     * @param other The other rectangle.
     */
    void expandToFit(const Rect& other)
 800e5f8:	b590      	push	{r4, r7, lr}
 800e5fa:	b085      	sub	sp, #20
 800e5fc:	af00      	add	r7, sp, #0
 800e5fe:	6078      	str	r0, [r7, #4]
 800e600:	6039      	str	r1, [r7, #0]
    {
        if (!other.isEmpty())
 800e602:	6838      	ldr	r0, [r7, #0]
 800e604:	f000 f884 	bl	800e710 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e608:	4603      	mov	r3, r0
 800e60a:	f083 0301 	eor.w	r3, r3, #1
 800e60e:	b2db      	uxtb	r3, r3
 800e610:	2b00      	cmp	r3, #0
 800e612:	d079      	beq.n	800e708 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x110>
        {
            if (isEmpty())
 800e614:	6878      	ldr	r0, [r7, #4]
 800e616:	f000 f87b 	bl	800e710 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e61a:	4603      	mov	r3, r0
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d014      	beq.n	800e64a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x52>
            {
                x = other.x;
 800e620:	683b      	ldr	r3, [r7, #0]
 800e622:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	801a      	strh	r2, [r3, #0]
                y = other.y;
 800e62a:	683b      	ldr	r3, [r7, #0]
 800e62c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	805a      	strh	r2, [r3, #2]
                width = other.width;
 800e634:	683b      	ldr	r3, [r7, #0]
 800e636:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	809a      	strh	r2, [r3, #4]
                height = other.height;
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	80da      	strh	r2, [r3, #6]
                y = newY;
                width = endPointX - newX;
                height = endPointY - newY;
            }
        }
    }
 800e648:	e05e      	b.n	800e708 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x110>
                int16_t newX = MIN(x, other.x);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e656:	429a      	cmp	r2, r3
 800e658:	da03      	bge.n	800e662 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x6a>
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e660:	e002      	b.n	800e668 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x70>
 800e662:	683b      	ldr	r3, [r7, #0]
 800e664:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e668:	81fb      	strh	r3, [r7, #14]
                int16_t newY = MIN(y, other.y);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800e670:	683b      	ldr	r3, [r7, #0]
 800e672:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e676:	429a      	cmp	r2, r3
 800e678:	da04      	bge.n	800e684 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x8c>
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	3302      	adds	r3, #2
 800e67e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e682:	e002      	b.n	800e68a <_ZN8touchgfx4Rect11expandToFitERKS0_+0x92>
 800e684:	683b      	ldr	r3, [r7, #0]
 800e686:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800e68a:	81bb      	strh	r3, [r7, #12]
                int16_t endPointX = MAX(right(), other.right());
 800e68c:	6878      	ldr	r0, [r7, #4]
 800e68e:	f7ff fe97 	bl	800e3c0 <_ZNK8touchgfx4Rect5rightEv>
 800e692:	4603      	mov	r3, r0
 800e694:	461c      	mov	r4, r3
 800e696:	6838      	ldr	r0, [r7, #0]
 800e698:	f7ff fe92 	bl	800e3c0 <_ZNK8touchgfx4Rect5rightEv>
 800e69c:	4603      	mov	r3, r0
 800e69e:	429c      	cmp	r4, r3
 800e6a0:	dd04      	ble.n	800e6ac <_ZN8touchgfx4Rect11expandToFitERKS0_+0xb4>
 800e6a2:	6878      	ldr	r0, [r7, #4]
 800e6a4:	f7ff fe8c 	bl	800e3c0 <_ZNK8touchgfx4Rect5rightEv>
 800e6a8:	4603      	mov	r3, r0
 800e6aa:	e003      	b.n	800e6b4 <_ZN8touchgfx4Rect11expandToFitERKS0_+0xbc>
 800e6ac:	6838      	ldr	r0, [r7, #0]
 800e6ae:	f7ff fe87 	bl	800e3c0 <_ZNK8touchgfx4Rect5rightEv>
 800e6b2:	4603      	mov	r3, r0
 800e6b4:	817b      	strh	r3, [r7, #10]
                int16_t endPointY = MAX(bottom(), other.bottom());
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f7ff fe97 	bl	800e3ea <_ZNK8touchgfx4Rect6bottomEv>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	461c      	mov	r4, r3
 800e6c0:	6838      	ldr	r0, [r7, #0]
 800e6c2:	f7ff fe92 	bl	800e3ea <_ZNK8touchgfx4Rect6bottomEv>
 800e6c6:	4603      	mov	r3, r0
 800e6c8:	429c      	cmp	r4, r3
 800e6ca:	dd04      	ble.n	800e6d6 <_ZN8touchgfx4Rect11expandToFitERKS0_+0xde>
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f7ff fe8c 	bl	800e3ea <_ZNK8touchgfx4Rect6bottomEv>
 800e6d2:	4603      	mov	r3, r0
 800e6d4:	e003      	b.n	800e6de <_ZN8touchgfx4Rect11expandToFitERKS0_+0xe6>
 800e6d6:	6838      	ldr	r0, [r7, #0]
 800e6d8:	f7ff fe87 	bl	800e3ea <_ZNK8touchgfx4Rect6bottomEv>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	813b      	strh	r3, [r7, #8]
                x = newX;
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	89fa      	ldrh	r2, [r7, #14]
 800e6e4:	801a      	strh	r2, [r3, #0]
                y = newY;
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	89ba      	ldrh	r2, [r7, #12]
 800e6ea:	805a      	strh	r2, [r3, #2]
                width = endPointX - newX;
 800e6ec:	897a      	ldrh	r2, [r7, #10]
 800e6ee:	89fb      	ldrh	r3, [r7, #14]
 800e6f0:	1ad3      	subs	r3, r2, r3
 800e6f2:	b29b      	uxth	r3, r3
 800e6f4:	b21a      	sxth	r2, r3
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	809a      	strh	r2, [r3, #4]
                height = endPointY - newY;
 800e6fa:	893a      	ldrh	r2, [r7, #8]
 800e6fc:	89bb      	ldrh	r3, [r7, #12]
 800e6fe:	1ad3      	subs	r3, r2, r3
 800e700:	b29b      	uxth	r3, r3
 800e702:	b21a      	sxth	r2, r3
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	80da      	strh	r2, [r3, #6]
    }
 800e708:	bf00      	nop
 800e70a:	3714      	adds	r7, #20
 800e70c:	46bd      	mov	sp, r7
 800e70e:	bd90      	pop	{r4, r7, pc}

0800e710 <_ZNK8touchgfx4Rect7isEmptyEv>:
     *
     *        Query if this object is empty.
     *
     * @return true if any of the dimensions are 0.
     */
    bool isEmpty() const
 800e710:	b480      	push	{r7}
 800e712:	b083      	sub	sp, #12
 800e714:	af00      	add	r7, sp, #0
 800e716:	6078      	str	r0, [r7, #4]
    {
        return ((width == 0) || (height == 0));
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d004      	beq.n	800e72c <_ZNK8touchgfx4Rect7isEmptyEv+0x1c>
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d101      	bne.n	800e730 <_ZNK8touchgfx4Rect7isEmptyEv+0x20>
 800e72c:	2301      	movs	r3, #1
 800e72e:	e000      	b.n	800e732 <_ZNK8touchgfx4Rect7isEmptyEv+0x22>
 800e730:	2300      	movs	r3, #0
    }
 800e732:	4618      	mov	r0, r3
 800e734:	370c      	adds	r7, #12
 800e736:	46bd      	mov	sp, r7
 800e738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e73c:	4770      	bx	lr
	...

0800e740 <_ZN8touchgfx8DrawableD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Drawable() { }
 800e740:	b480      	push	{r7}
 800e742:	b083      	sub	sp, #12
 800e744:	af00      	add	r7, sp, #0
 800e746:	6078      	str	r0, [r7, #4]
 800e748:	4a04      	ldr	r2, [pc, #16]	; (800e75c <_ZN8touchgfx8DrawableD1Ev+0x1c>)
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	601a      	str	r2, [r3, #0]
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	4618      	mov	r0, r3
 800e752:	370c      	adds	r7, #12
 800e754:	46bd      	mov	sp, r7
 800e756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e75a:	4770      	bx	lr
 800e75c:	08025dc0 	.word	0x08025dc0

0800e760 <_ZN8touchgfx8DrawableD0Ev>:
 800e760:	b580      	push	{r7, lr}
 800e762:	b082      	sub	sp, #8
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]
 800e768:	6878      	ldr	r0, [r7, #4]
 800e76a:	f7ff ffe9 	bl	800e740 <_ZN8touchgfx8DrawableD1Ev>
 800e76e:	2128      	movs	r1, #40	; 0x28
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f013 fe56 	bl	8022422 <_ZdlPvj>
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	4618      	mov	r0, r3
 800e77a:	3708      	adds	r7, #8
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}

0800e780 <_ZNK8touchgfx8Drawable7getRectEv>:
     *        Gets the rectangle this Drawable covers, in coordinates relative to its parent.
     *
     * @return The rectangle this Drawable covers expressed in coordinates relative to its
     *         parent.
     */
    const Rect& getRect() const
 800e780:	b480      	push	{r7}
 800e782:	b083      	sub	sp, #12
 800e784:	af00      	add	r7, sp, #0
 800e786:	6078      	str	r0, [r7, #4]
    {
        return rect;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	3304      	adds	r3, #4
    }
 800e78c:	4618      	mov	r0, r3
 800e78e:	370c      	adds	r7, #12
 800e790:	46bd      	mov	sp, r7
 800e792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e796:	4770      	bx	lr

0800e798 <_ZN8touchgfx8Drawable11setPositionEssss>:
     * @param x      The x coordinate of this Drawable.
     * @param y      The y coordinate of this Drawable.
     * @param width  The width of this Drawable.
     * @param height The height of this Drawable.
     */
    virtual void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 800e798:	b580      	push	{r7, lr}
 800e79a:	b084      	sub	sp, #16
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	60f8      	str	r0, [r7, #12]
 800e7a0:	4608      	mov	r0, r1
 800e7a2:	4611      	mov	r1, r2
 800e7a4:	461a      	mov	r2, r3
 800e7a6:	4603      	mov	r3, r0
 800e7a8:	817b      	strh	r3, [r7, #10]
 800e7aa:	460b      	mov	r3, r1
 800e7ac:	813b      	strh	r3, [r7, #8]
 800e7ae:	4613      	mov	r3, r2
 800e7b0:	80fb      	strh	r3, [r7, #6]
    {
        setXY(x, y);
 800e7b2:	68fb      	ldr	r3, [r7, #12]
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	3334      	adds	r3, #52	; 0x34
 800e7b8:	681b      	ldr	r3, [r3, #0]
 800e7ba:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800e7be:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 800e7c2:	68f8      	ldr	r0, [r7, #12]
 800e7c4:	4798      	blx	r3
        setWidth(width);
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	3338      	adds	r3, #56	; 0x38
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e7d2:	4611      	mov	r1, r2
 800e7d4:	68f8      	ldr	r0, [r7, #12]
 800e7d6:	4798      	blx	r3
        setHeight(height);
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	681b      	ldr	r3, [r3, #0]
 800e7dc:	333c      	adds	r3, #60	; 0x3c
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800e7e4:	4611      	mov	r1, r2
 800e7e6:	68f8      	ldr	r0, [r7, #12]
 800e7e8:	4798      	blx	r3
    };
 800e7ea:	bf00      	nop
 800e7ec:	3710      	adds	r7, #16
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}

0800e7f2 <_ZNK8touchgfx8Drawable4getXEv>:
     *
     *        Gets the x coordinate of this drawable.
     *
     * @return The x value, relative to the parent.
     */
    int16_t getX() const
 800e7f2:	b480      	push	{r7}
 800e7f4:	b083      	sub	sp, #12
 800e7f6:	af00      	add	r7, sp, #0
 800e7f8:	6078      	str	r0, [r7, #4]
    {
        return rect.x;
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
    }
 800e800:	4618      	mov	r0, r3
 800e802:	370c      	adds	r7, #12
 800e804:	46bd      	mov	sp, r7
 800e806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e80a:	4770      	bx	lr

0800e80c <_ZNK8touchgfx8Drawable4getYEv>:
     *
     *        Gets the y coordinate of this drawable.
     *
     * @return The y value, relative to the parent.
     */
    int16_t getY() const
 800e80c:	b480      	push	{r7}
 800e80e:	b083      	sub	sp, #12
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
    {
        return rect.y;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
    }
 800e81a:	4618      	mov	r0, r3
 800e81c:	370c      	adds	r7, #12
 800e81e:	46bd      	mov	sp, r7
 800e820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e824:	4770      	bx	lr

0800e826 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     */
    virtual void setX(int16_t x)
 800e826:	b480      	push	{r7}
 800e828:	b083      	sub	sp, #12
 800e82a:	af00      	add	r7, sp, #0
 800e82c:	6078      	str	r0, [r7, #4]
 800e82e:	460b      	mov	r3, r1
 800e830:	807b      	strh	r3, [r7, #2]
    {
        rect.x = x;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	887a      	ldrh	r2, [r7, #2]
 800e836:	809a      	strh	r2, [r3, #4]
    }
 800e838:	bf00      	nop
 800e83a:	370c      	adds	r7, #12
 800e83c:	46bd      	mov	sp, r7
 800e83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e842:	4770      	bx	lr

0800e844 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setY(int16_t y)
 800e844:	b480      	push	{r7}
 800e846:	b083      	sub	sp, #12
 800e848:	af00      	add	r7, sp, #0
 800e84a:	6078      	str	r0, [r7, #4]
 800e84c:	460b      	mov	r3, r1
 800e84e:	807b      	strh	r3, [r7, #2]
    {
        rect.y = y;
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	887a      	ldrh	r2, [r7, #2]
 800e854:	80da      	strh	r2, [r3, #6]
    }
 800e856:	bf00      	nop
 800e858:	370c      	adds	r7, #12
 800e85a:	46bd      	mov	sp, r7
 800e85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e860:	4770      	bx	lr

0800e862 <_ZN8touchgfx8Drawable5setXYEss>:
     * @note Changing this does not automatically yield a redraw.
     *
     * @param x The new x value, relative to the parent. A negative value is allowed.
     * @param y The new y value, relative to the parent. A negative value is allowed.
     */
    virtual void setXY(int16_t x, int16_t y)
 800e862:	b580      	push	{r7, lr}
 800e864:	b082      	sub	sp, #8
 800e866:	af00      	add	r7, sp, #0
 800e868:	6078      	str	r0, [r7, #4]
 800e86a:	460b      	mov	r3, r1
 800e86c:	807b      	strh	r3, [r7, #2]
 800e86e:	4613      	mov	r3, r2
 800e870:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800e872:	687b      	ldr	r3, [r7, #4]
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	332c      	adds	r3, #44	; 0x2c
 800e878:	681b      	ldr	r3, [r3, #0]
 800e87a:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800e87e:	4611      	mov	r1, r2
 800e880:	6878      	ldr	r0, [r7, #4]
 800e882:	4798      	blx	r3
        setY(y);
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	681b      	ldr	r3, [r3, #0]
 800e888:	3330      	adds	r3, #48	; 0x30
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	f9b7 2000 	ldrsh.w	r2, [r7]
 800e890:	4611      	mov	r1, r2
 800e892:	6878      	ldr	r0, [r7, #4]
 800e894:	4798      	blx	r3
    }
 800e896:	bf00      	nop
 800e898:	3708      	adds	r7, #8
 800e89a:	46bd      	mov	sp, r7
 800e89c:	bd80      	pop	{r7, pc}

0800e89e <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param width The new width.
     */
    virtual void setWidth(int16_t width)
 800e89e:	b480      	push	{r7}
 800e8a0:	b083      	sub	sp, #12
 800e8a2:	af00      	add	r7, sp, #0
 800e8a4:	6078      	str	r0, [r7, #4]
 800e8a6:	460b      	mov	r3, r1
 800e8a8:	807b      	strh	r3, [r7, #2]
    {
        rect.width = width;
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	887a      	ldrh	r2, [r7, #2]
 800e8ae:	811a      	strh	r2, [r3, #8]
    }
 800e8b0:	bf00      	nop
 800e8b2:	370c      	adds	r7, #12
 800e8b4:	46bd      	mov	sp, r7
 800e8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ba:	4770      	bx	lr

0800e8bc <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note Changing this does not automatically yield a redraw.
     *
     * @param height The new height.
     */
    virtual void setHeight(int16_t height)
 800e8bc:	b480      	push	{r7}
 800e8be:	b083      	sub	sp, #12
 800e8c0:	af00      	add	r7, sp, #0
 800e8c2:	6078      	str	r0, [r7, #4]
 800e8c4:	460b      	mov	r3, r1
 800e8c6:	807b      	strh	r3, [r7, #2]
    {
        rect.height = height;
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	887a      	ldrh	r2, [r7, #2]
 800e8cc:	815a      	strh	r2, [r3, #10]
    }
 800e8ce:	bf00      	nop
 800e8d0:	370c      	adds	r7, #12
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8d8:	4770      	bx	lr

0800e8da <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     *
     *        This function can be called on parent nodes to signal that the size of one or
     *        more of its children has changed. Currently only used in ScrollableContainer to
     *        redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged() { }
 800e8da:	b480      	push	{r7}
 800e8dc:	b083      	sub	sp, #12
 800e8de:	af00      	add	r7, sp, #0
 800e8e0:	6078      	str	r0, [r7, #4]
 800e8e2:	bf00      	nop
 800e8e4:	370c      	adds	r7, #12
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8ec:	4770      	bx	lr

0800e8ee <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     *        Defines the event handler interface for ClickEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& evt) { }
 800e8ee:	b480      	push	{r7}
 800e8f0:	b083      	sub	sp, #12
 800e8f2:	af00      	add	r7, sp, #0
 800e8f4:	6078      	str	r0, [r7, #4]
 800e8f6:	6039      	str	r1, [r7, #0]
 800e8f8:	bf00      	nop
 800e8fa:	370c      	adds	r7, #12
 800e8fc:	46bd      	mov	sp, r7
 800e8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e902:	4770      	bx	lr

0800e904 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     *        Defines the event handler interface for GestureEvents. The default implementation
     *        ignores the event. The event is only received if the drawable is touchable.
     *
     * @param evt The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& evt) { }
 800e904:	b480      	push	{r7}
 800e906:	b083      	sub	sp, #12
 800e908:	af00      	add	r7, sp, #0
 800e90a:	6078      	str	r0, [r7, #4]
 800e90c:	6039      	str	r1, [r7, #0]
 800e90e:	bf00      	nop
 800e910:	370c      	adds	r7, #12
 800e912:	46bd      	mov	sp, r7
 800e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e918:	4770      	bx	lr

0800e91a <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     *        Defines the event handler interface for DragEvents. The event is only received if
     *        the drawable is touchable.
     *
     * @param evt The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& evt) { }
 800e91a:	b480      	push	{r7}
 800e91c:	b083      	sub	sp, #12
 800e91e:	af00      	add	r7, sp, #0
 800e920:	6078      	str	r0, [r7, #4]
 800e922:	6039      	str	r1, [r7, #0]
 800e924:	bf00      	nop
 800e926:	370c      	adds	r7, #12
 800e928:	46bd      	mov	sp, r7
 800e92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92e:	4770      	bx	lr

0800e930 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *        Called periodically by the framework if the Drawable instance has subscribed to
     *        timer ticks.
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent() { }
 800e930:	b480      	push	{r7}
 800e932:	b083      	sub	sp, #12
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
 800e938:	bf00      	nop
 800e93a:	370c      	adds	r7, #12
 800e93c:	46bd      	mov	sp, r7
 800e93e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e942:	4770      	bx	lr

0800e944 <_ZNK8touchgfx8Drawable9isVisibleEv>:
     * @return true if the Drawable is visible.
     * @return True if visible.
     *
     * @see setVisible
     */
    bool isVisible() const
 800e944:	b480      	push	{r7}
 800e946:	b083      	sub	sp, #12
 800e948:	af00      	add	r7, sp, #0
 800e94a:	6078      	str	r0, [r7, #4]
    {
        return visible;
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    }
 800e952:	4618      	mov	r0, r3
 800e954:	370c      	adds	r7, #12
 800e956:	46bd      	mov	sp, r7
 800e958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95c:	4770      	bx	lr

0800e95e <_ZNK8touchgfx8Drawable11isTouchableEv>:
     *
     * @return True if touch events are received.
     *
     * @see setTouchable
     */
    bool isTouchable() const
 800e95e:	b480      	push	{r7}
 800e960:	b083      	sub	sp, #12
 800e962:	af00      	add	r7, sp, #0
 800e964:	6078      	str	r0, [r7, #4]
    {
        return touchable;
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    }
 800e96c:	4618      	mov	r0, r3
 800e96e:	370c      	adds	r7, #12
 800e970:	46bd      	mov	sp, r7
 800e972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e976:	4770      	bx	lr

0800e978 <_ZN8touchgfx8Drawable6moveToEss>:
     * @note Will redraw the appropriate areas of the screen.
     *
     * @param x The absolute position to move to.
     * @param y The absolute position to move to.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800e978:	b580      	push	{r7, lr}
 800e97a:	b082      	sub	sp, #8
 800e97c:	af00      	add	r7, sp, #0
 800e97e:	6078      	str	r0, [r7, #4]
 800e980:	460b      	mov	r3, r1
 800e982:	807b      	strh	r3, [r7, #2]
 800e984:	4613      	mov	r3, r2
 800e986:	803b      	strh	r3, [r7, #0]
    {
        moveRelative(x - rect.x, y - rect.y);
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	3354      	adds	r3, #84	; 0x54
 800e98e:	681b      	ldr	r3, [r3, #0]
 800e990:	8879      	ldrh	r1, [r7, #2]
 800e992:	687a      	ldr	r2, [r7, #4]
 800e994:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800e998:	b292      	uxth	r2, r2
 800e99a:	1a8a      	subs	r2, r1, r2
 800e99c:	b292      	uxth	r2, r2
 800e99e:	b210      	sxth	r0, r2
 800e9a0:	8839      	ldrh	r1, [r7, #0]
 800e9a2:	687a      	ldr	r2, [r7, #4]
 800e9a4:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800e9a8:	b292      	uxth	r2, r2
 800e9aa:	1a8a      	subs	r2, r1, r2
 800e9ac:	b292      	uxth	r2, r2
 800e9ae:	b212      	sxth	r2, r2
 800e9b0:	4601      	mov	r1, r0
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	4798      	blx	r3
    }
 800e9b6:	bf00      	nop
 800e9b8:	3708      	adds	r7, #8
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}
	...

0800e9c0 <_ZN8touchgfx9ContainerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Container() { }
 800e9c0:	b580      	push	{r7, lr}
 800e9c2:	b082      	sub	sp, #8
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	6078      	str	r0, [r7, #4]
 800e9c8:	4a05      	ldr	r2, [pc, #20]	; (800e9e0 <_ZN8touchgfx9ContainerD1Ev+0x20>)
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	601a      	str	r2, [r3, #0]
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f7ff feb5 	bl	800e740 <_ZN8touchgfx8DrawableD1Ev>
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	4618      	mov	r0, r3
 800e9da:	3708      	adds	r7, #8
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	bd80      	pop	{r7, pc}
 800e9e0:	08023f30 	.word	0x08023f30

0800e9e4 <_ZN8touchgfx9ContainerD0Ev>:
 800e9e4:	b580      	push	{r7, lr}
 800e9e6:	b082      	sub	sp, #8
 800e9e8:	af00      	add	r7, sp, #0
 800e9ea:	6078      	str	r0, [r7, #4]
 800e9ec:	6878      	ldr	r0, [r7, #4]
 800e9ee:	f7ff ffe7 	bl	800e9c0 <_ZN8touchgfx9ContainerD1Ev>
 800e9f2:	212c      	movs	r1, #44	; 0x2c
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f013 fd14 	bl	8022422 <_ZdlPvj>
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	3708      	adds	r7, #8
 800ea00:	46bd      	mov	sp, r7
 800ea02:	bd80      	pop	{r7, pc}

0800ea04 <_ZNK8touchgfx9Container7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_CONTAINER.
     */
    virtual uint16_t getType() const
 800ea04:	b480      	push	{r7}
 800ea06:	b083      	sub	sp, #12
 800ea08:	af00      	add	r7, sp, #0
 800ea0a:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_CONTAINER;
 800ea0c:	2312      	movs	r3, #18
    }
 800ea0e:	4618      	mov	r0, r3
 800ea10:	370c      	adds	r7, #12
 800ea12:	46bd      	mov	sp, r7
 800ea14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea18:	4770      	bx	lr

0800ea1a <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
#include <touchgfx/Screen.hpp>

namespace touchgfx
{
bool Container::contains(const Drawable& d)
{
 800ea1a:	b480      	push	{r7}
 800ea1c:	b085      	sub	sp, #20
 800ea1e:	af00      	add	r7, sp, #0
 800ea20:	6078      	str	r0, [r7, #4]
 800ea22:	6039      	str	r1, [r7, #0]
    bool found = false;
 800ea24:	2300      	movs	r3, #0
 800ea26:	73fb      	strb	r3, [r7, #15]
    Drawable* head = firstChild;
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea2c:	60bb      	str	r3, [r7, #8]
    while (head && !found)
 800ea2e:	68bb      	ldr	r3, [r7, #8]
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	d00d      	beq.n	800ea50 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x36>
 800ea34:	7bfb      	ldrb	r3, [r7, #15]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d10a      	bne.n	800ea50 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x36>
    {
        found = (head == &d);
 800ea3a:	68ba      	ldr	r2, [r7, #8]
 800ea3c:	683b      	ldr	r3, [r7, #0]
 800ea3e:	429a      	cmp	r2, r3
 800ea40:	bf0c      	ite	eq
 800ea42:	2301      	moveq	r3, #1
 800ea44:	2300      	movne	r3, #0
 800ea46:	73fb      	strb	r3, [r7, #15]
        head = head->nextSibling;
 800ea48:	68bb      	ldr	r3, [r7, #8]
 800ea4a:	699b      	ldr	r3, [r3, #24]
 800ea4c:	60bb      	str	r3, [r7, #8]
    while (head && !found)
 800ea4e:	e7ee      	b.n	800ea2e <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x14>
    }
    return found;
 800ea50:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea52:	4618      	mov	r0, r3
 800ea54:	3714      	adds	r7, #20
 800ea56:	46bd      	mov	sp, r7
 800ea58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5c:	4770      	bx	lr
	...

0800ea60 <_ZN8touchgfx9Container3addERNS_8DrawableE>:

void Container::add(Drawable& d)
{
 800ea60:	b580      	push	{r7, lr}
 800ea62:	b084      	sub	sp, #16
 800ea64:	af00      	add	r7, sp, #0
 800ea66:	6078      	str	r0, [r7, #4]
 800ea68:	6039      	str	r1, [r7, #0]
    assert(&d != this && "Cannot add Drawable to self");
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	683a      	ldr	r2, [r7, #0]
 800ea6e:	429a      	cmp	r2, r3
 800ea70:	d105      	bne.n	800ea7e <_ZN8touchgfx9Container3addERNS_8DrawableE+0x1e>
 800ea72:	4b22      	ldr	r3, [pc, #136]	; (800eafc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x9c>)
 800ea74:	4a22      	ldr	r2, [pc, #136]	; (800eb00 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800ea76:	2123      	movs	r1, #35	; 0x23
 800ea78:	4822      	ldr	r0, [pc, #136]	; (800eb04 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800ea7a:	f013 fcef 	bl	802245c <__assert_func>
    assert(d.parent == 0 && "Cannot add Drawable multiple times");
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	695b      	ldr	r3, [r3, #20]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d005      	beq.n	800ea92 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x32>
 800ea86:	4b20      	ldr	r3, [pc, #128]	; (800eb08 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa8>)
 800ea88:	4a1d      	ldr	r2, [pc, #116]	; (800eb00 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800ea8a:	2124      	movs	r1, #36	; 0x24
 800ea8c:	481d      	ldr	r0, [pc, #116]	; (800eb04 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800ea8e:	f013 fce5 	bl	802245c <__assert_func>

    // Initialize d to have this as parent and no sibling.
    d.parent = this;
 800ea92:	687a      	ldr	r2, [r7, #4]
 800ea94:	683b      	ldr	r3, [r7, #0]
 800ea96:	615a      	str	r2, [r3, #20]
    d.nextSibling = 0;
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	619a      	str	r2, [r3, #24]

    // Check if d is the first child to be added (container is empty)
    if (!firstChild)
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d103      	bne.n	800eaae <_ZN8touchgfx9Container3addERNS_8DrawableE+0x4e>
    {
        firstChild = &d;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	683a      	ldr	r2, [r7, #0]
 800eaaa:	629a      	str	r2, [r3, #40]	; 0x28
        }
        assert(head != &d && "Cannot add Drawable multiple times");
        // Make last child now point to d.
        head->nextSibling = &d;
    }
}
 800eaac:	e021      	b.n	800eaf2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x92>
        Drawable* head = firstChild;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eab2:	60fb      	str	r3, [r7, #12]
        while (head->nextSibling)
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	699b      	ldr	r3, [r3, #24]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d00d      	beq.n	800ead8 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x78>
            assert(head != &d && "Cannot add Drawable multiple times");
 800eabc:	68fa      	ldr	r2, [r7, #12]
 800eabe:	683b      	ldr	r3, [r7, #0]
 800eac0:	429a      	cmp	r2, r3
 800eac2:	d105      	bne.n	800ead0 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x70>
 800eac4:	4b11      	ldr	r3, [pc, #68]	; (800eb0c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xac>)
 800eac6:	4a0e      	ldr	r2, [pc, #56]	; (800eb00 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800eac8:	2135      	movs	r1, #53	; 0x35
 800eaca:	480e      	ldr	r0, [pc, #56]	; (800eb04 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800eacc:	f013 fcc6 	bl	802245c <__assert_func>
            head = head->nextSibling;
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	699b      	ldr	r3, [r3, #24]
 800ead4:	60fb      	str	r3, [r7, #12]
        while (head->nextSibling)
 800ead6:	e7ed      	b.n	800eab4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x54>
        assert(head != &d && "Cannot add Drawable multiple times");
 800ead8:	68fa      	ldr	r2, [r7, #12]
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	429a      	cmp	r2, r3
 800eade:	d105      	bne.n	800eaec <_ZN8touchgfx9Container3addERNS_8DrawableE+0x8c>
 800eae0:	4b0a      	ldr	r3, [pc, #40]	; (800eb0c <_ZN8touchgfx9Container3addERNS_8DrawableE+0xac>)
 800eae2:	4a07      	ldr	r2, [pc, #28]	; (800eb00 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa0>)
 800eae4:	2138      	movs	r1, #56	; 0x38
 800eae6:	4807      	ldr	r0, [pc, #28]	; (800eb04 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xa4>)
 800eae8:	f013 fcb8 	bl	802245c <__assert_func>
        head->nextSibling = &d;
 800eaec:	68fb      	ldr	r3, [r7, #12]
 800eaee:	683a      	ldr	r2, [r7, #0]
 800eaf0:	619a      	str	r2, [r3, #24]
}
 800eaf2:	bf00      	nop
 800eaf4:	3710      	adds	r7, #16
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	bd80      	pop	{r7, pc}
 800eafa:	bf00      	nop
 800eafc:	08023490 	.word	0x08023490
 800eb00:	08023fb8 	.word	0x08023fb8
 800eb04:	080234bc 	.word	0x080234bc
 800eb08:	08023514 	.word	0x08023514
 800eb0c:	0802354c 	.word	0x0802354c

0800eb10 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:

void Container::remove(Drawable& d)
{
 800eb10:	b480      	push	{r7}
 800eb12:	b085      	sub	sp, #20
 800eb14:	af00      	add	r7, sp, #0
 800eb16:	6078      	str	r0, [r7, #4]
 800eb18:	6039      	str	r1, [r7, #0]
    if (!firstChild)
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d031      	beq.n	800eb86 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x76>
    {
        // No children
        return;
    }

    if (&d == firstChild)
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb26:	683a      	ldr	r2, [r7, #0]
 800eb28:	429a      	cmp	r2, r3
 800eb2a:	d112      	bne.n	800eb52 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x42>
    {
        // d is first child.
        d.parent = 0;
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	2200      	movs	r2, #0
 800eb30:	615a      	str	r2, [r3, #20]
        if (!d.nextSibling)
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	699b      	ldr	r3, [r3, #24]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	d103      	bne.n	800eb42 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x32>
        {
            // d was only child, so now this container is empty
            firstChild = 0;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	629a      	str	r2, [r3, #40]	; 0x28
        else
        {
            firstChild = d.nextSibling;
            d.nextSibling = 0;
        }
        return;
 800eb40:	e022      	b.n	800eb88 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
            firstChild = d.nextSibling;
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	699a      	ldr	r2, [r3, #24]
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	629a      	str	r2, [r3, #40]	; 0x28
            d.nextSibling = 0;
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	2200      	movs	r2, #0
 800eb4e:	619a      	str	r2, [r3, #24]
        return;
 800eb50:	e01a      	b.n	800eb88 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
    }
    Drawable* tmp = firstChild;
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb56:	60fb      	str	r3, [r7, #12]

    while (tmp)
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d014      	beq.n	800eb88 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
    {
        if (tmp->nextSibling == &d)
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	699b      	ldr	r3, [r3, #24]
 800eb62:	683a      	ldr	r2, [r7, #0]
 800eb64:	429a      	cmp	r2, r3
 800eb66:	d10a      	bne.n	800eb7e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x6e>
        {
            tmp->nextSibling = d.nextSibling;
 800eb68:	683b      	ldr	r3, [r7, #0]
 800eb6a:	699a      	ldr	r2, [r3, #24]
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	619a      	str	r2, [r3, #24]
            d.parent = 0;
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	2200      	movs	r2, #0
 800eb74:	615a      	str	r2, [r3, #20]
            d.nextSibling = 0;
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	2200      	movs	r2, #0
 800eb7a:	619a      	str	r2, [r3, #24]
            return;
 800eb7c:	e004      	b.n	800eb88 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x78>
        }
        else
        {
            tmp = tmp->nextSibling;
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	699b      	ldr	r3, [r3, #24]
 800eb82:	60fb      	str	r3, [r7, #12]
    while (tmp)
 800eb84:	e7e8      	b.n	800eb58 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x48>
        return;
 800eb86:	bf00      	nop
        }
    }
}
 800eb88:	3714      	adds	r7, #20
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb90:	4770      	bx	lr

0800eb92 <_ZN8touchgfx9Container9removeAllEv>:

void Container::removeAll()
{
 800eb92:	b480      	push	{r7}
 800eb94:	b085      	sub	sp, #20
 800eb96:	af00      	add	r7, sp, #0
 800eb98:	6078      	str	r0, [r7, #4]
    while (firstChild)
 800eb9a:	687b      	ldr	r3, [r7, #4]
 800eb9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	d00e      	beq.n	800ebc0 <_ZN8touchgfx9Container9removeAllEv+0x2e>
    {
        Drawable* d = firstChild;
 800eba2:	687b      	ldr	r3, [r7, #4]
 800eba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eba6:	60fb      	str	r3, [r7, #12]
        firstChild = firstChild->nextSibling;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebac:	699a      	ldr	r2, [r3, #24]
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	629a      	str	r2, [r3, #40]	; 0x28
        d->parent = 0;
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	615a      	str	r2, [r3, #20]
        d->nextSibling = 0;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	619a      	str	r2, [r3, #24]
    while (firstChild)
 800ebbe:	e7ec      	b.n	800eb9a <_ZN8touchgfx9Container9removeAllEv+0x8>
    }
}
 800ebc0:	bf00      	nop
 800ebc2:	3714      	adds	r7, #20
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebca:	4770      	bx	lr

0800ebcc <_ZN8touchgfx9Container6unlinkEv>:

void Container::unlink()
{
 800ebcc:	b480      	push	{r7}
 800ebce:	b083      	sub	sp, #12
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
    firstChild = 0;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ebda:	bf00      	nop
 800ebdc:	370c      	adds	r7, #12
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe4:	4770      	bx	lr

0800ebe6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:

void Container::draw(const Rect& invalidatedArea) const
{
 800ebe6:	b580      	push	{r7, lr}
 800ebe8:	b088      	sub	sp, #32
 800ebea:	af00      	add	r7, sp, #0
 800ebec:	6078      	str	r0, [r7, #4]
 800ebee:	6039      	str	r1, [r7, #0]
    // The draw function of Container is not normally used. Containers do not per default
    // appear in the draw chain, since they are normally invisible themselves. However,
    // if someone decides to call draw on a container, at least do something useful (draw children).
    if (!isVisible() || !firstChild)
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f7ff fea6 	bl	800e944 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	f083 0301 	eor.w	r3, r3, #1
 800ebfe:	b2db      	uxtb	r3, r3
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d103      	bne.n	800ec0c <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x26>
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d101      	bne.n	800ec10 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x2a>
 800ec0c:	2301      	movs	r3, #1
 800ec0e:	e000      	b.n	800ec12 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x2c>
 800ec10:	2300      	movs	r3, #0
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d14e      	bne.n	800ecb4 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xce>
    {
        // Nothing to draw
        return;
    }

    Rect tmp = invalidatedArea;
 800ec16:	683a      	ldr	r2, [r7, #0]
 800ec18:	f107 0314 	add.w	r3, r7, #20
 800ec1c:	6810      	ldr	r0, [r2, #0]
 800ec1e:	6851      	ldr	r1, [r2, #4]
 800ec20:	c303      	stmia	r3!, {r0, r1}
    Drawable* d = firstChild;
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec26:	61fb      	str	r3, [r7, #28]
    while (d)
 800ec28:	69fb      	ldr	r3, [r7, #28]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d043      	beq.n	800ecb6 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xd0>
    {
        if (d->isVisible())
 800ec2e:	69f8      	ldr	r0, [r7, #28]
 800ec30:	f7ff fe88 	bl	800e944 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800ec34:	4603      	mov	r3, r0
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d038      	beq.n	800ecac <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xc6>
        {
            Rect drawableRegion = tmp & d->getRect();
 800ec3a:	69f8      	ldr	r0, [r7, #28]
 800ec3c:	f7ff fda0 	bl	800e780 <_ZNK8touchgfx8Drawable7getRectEv>
 800ec40:	4602      	mov	r2, r0
 800ec42:	f107 030c 	add.w	r3, r7, #12
 800ec46:	f107 0114 	add.w	r1, r7, #20
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	f7ff fc43 	bl	800e4d6 <_ZNK8touchgfx4RectanERKS0_>
            if (!drawableRegion.isEmpty())
 800ec50:	f107 030c 	add.w	r3, r7, #12
 800ec54:	4618      	mov	r0, r3
 800ec56:	f7ff fd5b 	bl	800e710 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	f083 0301 	eor.w	r3, r3, #1
 800ec60:	b2db      	uxtb	r3, r3
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d022      	beq.n	800ecac <_ZNK8touchgfx9Container4drawERKNS_4RectE+0xc6>
            {
                // This child has a non-empty intersection with the invalidated area.
                // Convert region to the Drawable's coordinate system and draw.
                drawableRegion.x -= d->getX();
 800ec66:	69f8      	ldr	r0, [r7, #28]
 800ec68:	f7ff fdc3 	bl	800e7f2 <_ZNK8touchgfx8Drawable4getXEv>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	4619      	mov	r1, r3
 800ec70:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ec74:	b29a      	uxth	r2, r3
 800ec76:	b28b      	uxth	r3, r1
 800ec78:	1ad3      	subs	r3, r2, r3
 800ec7a:	b29b      	uxth	r3, r3
 800ec7c:	b21b      	sxth	r3, r3
 800ec7e:	81bb      	strh	r3, [r7, #12]
                drawableRegion.y -= d->getY();
 800ec80:	69f8      	ldr	r0, [r7, #28]
 800ec82:	f7ff fdc3 	bl	800e80c <_ZNK8touchgfx8Drawable4getYEv>
 800ec86:	4603      	mov	r3, r0
 800ec88:	4619      	mov	r1, r3
 800ec8a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800ec8e:	b29a      	uxth	r2, r3
 800ec90:	b28b      	uxth	r3, r1
 800ec92:	1ad3      	subs	r3, r2, r3
 800ec94:	b29b      	uxth	r3, r3
 800ec96:	b21b      	sxth	r3, r3
 800ec98:	81fb      	strh	r3, [r7, #14]
                d->draw(drawableRegion);
 800ec9a:	69fb      	ldr	r3, [r7, #28]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	3308      	adds	r3, #8
 800eca0:	681b      	ldr	r3, [r3, #0]
 800eca2:	f107 020c 	add.w	r2, r7, #12
 800eca6:	4611      	mov	r1, r2
 800eca8:	69f8      	ldr	r0, [r7, #28]
 800ecaa:	4798      	blx	r3
            }
        }
        d = d->nextSibling;
 800ecac:	69fb      	ldr	r3, [r7, #28]
 800ecae:	699b      	ldr	r3, [r3, #24]
 800ecb0:	61fb      	str	r3, [r7, #28]
    while (d)
 800ecb2:	e7b9      	b.n	800ec28 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x42>
        return;
 800ecb4:	bf00      	nop
    }
}
 800ecb6:	3720      	adds	r7, #32
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd80      	pop	{r7, pc}

0800ecbc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:

void Container::getLastChild(int16_t x, int16_t y, Drawable** last)
{
 800ecbc:	b590      	push	{r4, r7, lr}
 800ecbe:	b087      	sub	sp, #28
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	60f8      	str	r0, [r7, #12]
 800ecc4:	607b      	str	r3, [r7, #4]
 800ecc6:	460b      	mov	r3, r1
 800ecc8:	817b      	strh	r3, [r7, #10]
 800ecca:	4613      	mov	r3, r2
 800eccc:	813b      	strh	r3, [r7, #8]
    // This function is used to obtain the drawable that should receive a click/drag/gesture event.
    // Find the last child (ie. the last child that was added, ie. the "front-most" drawable) covering
    // the specified coords.
    if (isTouchable())
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	4618      	mov	r0, r3
 800ecd2:	f7ff fe44 	bl	800e95e <_ZNK8touchgfx8Drawable11isTouchableEv>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d002      	beq.n	800ece2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x26>
    {
        // If the container itself is touchable, result so far is "this". Might be overridden by a child.
        *last = this;
 800ecdc:	68fa      	ldr	r2, [r7, #12]
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	601a      	str	r2, [r3, #0]
    }

    Drawable* d = firstChild;
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ece6:	617b      	str	r3, [r7, #20]
    while (d)
 800ece8:	697b      	ldr	r3, [r7, #20]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d038      	beq.n	800ed60 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0xa4>
    {
        // Iterate over children.
        if (d->isVisible() && d->getRect().intersect(x, y))
 800ecee:	6978      	ldr	r0, [r7, #20]
 800ecf0:	f7ff fe28 	bl	800e944 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d00e      	beq.n	800ed18 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800ecfa:	6978      	ldr	r0, [r7, #20]
 800ecfc:	f7ff fd40 	bl	800e780 <_ZNK8touchgfx8Drawable7getRectEv>
 800ed00:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800ed04:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ed08:	4619      	mov	r1, r3
 800ed0a:	f7ff fb83 	bl	800e414 <_ZNK8touchgfx4Rect9intersectEss>
 800ed0e:	4603      	mov	r3, r0
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	d001      	beq.n	800ed18 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800ed14:	2301      	movs	r3, #1
 800ed16:	e000      	b.n	800ed1a <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5e>
 800ed18:	2300      	movs	r3, #0
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d01c      	beq.n	800ed58 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x9c>
        {
            int16_t xadj = x - d->getX();
 800ed1e:	897c      	ldrh	r4, [r7, #10]
 800ed20:	6978      	ldr	r0, [r7, #20]
 800ed22:	f7ff fd66 	bl	800e7f2 <_ZNK8touchgfx8Drawable4getXEv>
 800ed26:	4603      	mov	r3, r0
 800ed28:	b29b      	uxth	r3, r3
 800ed2a:	1ae3      	subs	r3, r4, r3
 800ed2c:	b29b      	uxth	r3, r3
 800ed2e:	827b      	strh	r3, [r7, #18]
            int16_t yadj = y - d->getY();
 800ed30:	893c      	ldrh	r4, [r7, #8]
 800ed32:	6978      	ldr	r0, [r7, #20]
 800ed34:	f7ff fd6a 	bl	800e80c <_ZNK8touchgfx8Drawable4getYEv>
 800ed38:	4603      	mov	r3, r0
 800ed3a:	b29b      	uxth	r3, r3
 800ed3c:	1ae3      	subs	r3, r4, r3
 800ed3e:	b29b      	uxth	r3, r3
 800ed40:	823b      	strh	r3, [r7, #16]
            d->getLastChild(xadj, yadj, last);
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	331c      	adds	r3, #28
 800ed48:	681c      	ldr	r4, [r3, #0]
 800ed4a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800ed4e:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6978      	ldr	r0, [r7, #20]
 800ed56:	47a0      	blx	r4
        }
        d = d->nextSibling;
 800ed58:	697b      	ldr	r3, [r7, #20]
 800ed5a:	699b      	ldr	r3, [r3, #24]
 800ed5c:	617b      	str	r3, [r7, #20]
    while (d)
 800ed5e:	e7c3      	b.n	800ece8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x2c>
    }
}
 800ed60:	bf00      	nop
 800ed62:	371c      	adds	r7, #28
 800ed64:	46bd      	mov	sp, r7
 800ed66:	bd90      	pop	{r4, r7, pc}

0800ed68 <_ZNK8touchgfx9Container12getSolidRectEv>:

Rect Container::getSolidRect() const
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b084      	sub	sp, #16
 800ed6c:	af02      	add	r7, sp, #8
 800ed6e:	6078      	str	r0, [r7, #4]
 800ed70:	6039      	str	r1, [r7, #0]
    return Rect(0, 0, 0, 0);
 800ed72:	2300      	movs	r3, #0
 800ed74:	9300      	str	r3, [sp, #0]
 800ed76:	2300      	movs	r3, #0
 800ed78:	2200      	movs	r2, #0
 800ed7a:	2100      	movs	r1, #0
 800ed7c:	6878      	ldr	r0, [r7, #4]
 800ed7e:	f7ff faff 	bl	800e380 <_ZN8touchgfx4RectC1Essss>
}
 800ed82:	6878      	ldr	r0, [r7, #4]
 800ed84:	3708      	adds	r7, #8
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}

0800ed8a <_ZNK8touchgfx9Container16getContainedAreaEv>:

Rect Container::getContainedArea() const
{
 800ed8a:	b580      	push	{r7, lr}
 800ed8c:	b086      	sub	sp, #24
 800ed8e:	af02      	add	r7, sp, #8
 800ed90:	6078      	str	r0, [r7, #4]
 800ed92:	6039      	str	r1, [r7, #0]
    Drawable* d = firstChild;
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed98:	60fb      	str	r3, [r7, #12]
    Rect contained(0, 0, 0, 0);
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	9300      	str	r3, [sp, #0]
 800ed9e:	2300      	movs	r3, #0
 800eda0:	2200      	movs	r2, #0
 800eda2:	2100      	movs	r1, #0
 800eda4:	6878      	ldr	r0, [r7, #4]
 800eda6:	f7ff faeb 	bl	800e380 <_ZN8touchgfx4RectC1Essss>
    while (d)
 800edaa:	68fb      	ldr	r3, [r7, #12]
 800edac:	2b00      	cmp	r3, #0
 800edae:	d00b      	beq.n	800edc8 <_ZNK8touchgfx9Container16getContainedAreaEv+0x3e>
    {
        contained.expandToFit(d->getRect());
 800edb0:	68f8      	ldr	r0, [r7, #12]
 800edb2:	f7ff fce5 	bl	800e780 <_ZNK8touchgfx8Drawable7getRectEv>
 800edb6:	4603      	mov	r3, r0
 800edb8:	4619      	mov	r1, r3
 800edba:	6878      	ldr	r0, [r7, #4]
 800edbc:	f7ff fc1c 	bl	800e5f8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
        d = d->nextSibling;
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	699b      	ldr	r3, [r3, #24]
 800edc4:	60fb      	str	r3, [r7, #12]
    while (d)
 800edc6:	e7f0      	b.n	800edaa <_ZNK8touchgfx9Container16getContainedAreaEv+0x20>
    }
    return contained;
 800edc8:	bf00      	nop
}
 800edca:	6878      	ldr	r0, [r7, #4]
 800edcc:	3710      	adds	r7, #16
 800edce:	46bd      	mov	sp, r7
 800edd0:	bd80      	pop	{r7, pc}

0800edd2 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:

void Container::moveChildrenRelative(int16_t deltaX, int16_t deltaY)
{
 800edd2:	b580      	push	{r7, lr}
 800edd4:	b084      	sub	sp, #16
 800edd6:	af00      	add	r7, sp, #0
 800edd8:	6078      	str	r0, [r7, #4]
 800edda:	460b      	mov	r3, r1
 800eddc:	807b      	strh	r3, [r7, #2]
 800edde:	4613      	mov	r3, r2
 800ede0:	803b      	strh	r3, [r7, #0]
    Drawable* d = firstChild;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ede6:	60fb      	str	r3, [r7, #12]
    while (d)
 800ede8:	68fb      	ldr	r3, [r7, #12]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d00d      	beq.n	800ee0a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x38>
    {
        d->moveRelative(deltaX, deltaY);
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	3354      	adds	r3, #84	; 0x54
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	f9b7 2000 	ldrsh.w	r2, [r7]
 800edfa:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800edfe:	68f8      	ldr	r0, [r7, #12]
 800ee00:	4798      	blx	r3
        d = d->nextSibling;
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	699b      	ldr	r3, [r3, #24]
 800ee06:	60fb      	str	r3, [r7, #12]
    while (d)
 800ee08:	e7ee      	b.n	800ede8 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x16>
    }
}
 800ee0a:	bf00      	nop
 800ee0c:	3710      	adds	r7, #16
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}

0800ee12 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:

void Container::forEachChild(GenericCallback<Drawable&>* function)
{
 800ee12:	b580      	push	{r7, lr}
 800ee14:	b084      	sub	sp, #16
 800ee16:	af00      	add	r7, sp, #0
 800ee18:	6078      	str	r0, [r7, #4]
 800ee1a:	6039      	str	r1, [r7, #0]
    Drawable* d = firstChild;
 800ee1c:	687b      	ldr	r3, [r7, #4]
 800ee1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee20:	60fb      	str	r3, [r7, #12]
    while (d)
 800ee22:	68fb      	ldr	r3, [r7, #12]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d00a      	beq.n	800ee3e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x2c>
    {
        function->execute(*d);
 800ee28:	683b      	ldr	r3, [r7, #0]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	3308      	adds	r3, #8
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	68f9      	ldr	r1, [r7, #12]
 800ee32:	6838      	ldr	r0, [r7, #0]
 800ee34:	4798      	blx	r3
        d = d->nextSibling;
 800ee36:	68fb      	ldr	r3, [r7, #12]
 800ee38:	699b      	ldr	r3, [r3, #24]
 800ee3a:	60fb      	str	r3, [r7, #12]
    while (d)
 800ee3c:	e7f1      	b.n	800ee22 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x10>
    }
}
 800ee3e:	bf00      	nop
 800ee40:	3710      	adds	r7, #16
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}

0800ee46 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:

void Container::insert(Drawable* previous, Drawable& d)
{
 800ee46:	b580      	push	{r7, lr}
 800ee48:	b086      	sub	sp, #24
 800ee4a:	af00      	add	r7, sp, #0
 800ee4c:	60f8      	str	r0, [r7, #12]
 800ee4e:	60b9      	str	r1, [r7, #8]
 800ee50:	607a      	str	r2, [r7, #4]
    if (!firstChild)
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee56:	2b00      	cmp	r3, #0
 800ee58:	d107      	bne.n	800ee6a <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x24>
    {
        // Insert as only element
        add(d);
 800ee5a:	68fb      	ldr	r3, [r7, #12]
 800ee5c:	681b      	ldr	r3, [r3, #0]
 800ee5e:	3364      	adds	r3, #100	; 0x64
 800ee60:	681b      	ldr	r3, [r3, #0]
 800ee62:	6879      	ldr	r1, [r7, #4]
 800ee64:	68f8      	ldr	r0, [r7, #12]
 800ee66:	4798      	blx	r3
        return;
 800ee68:	e026      	b.n	800eeb8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
    }
    else if (!previous)
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	2b00      	cmp	r3, #0
 800ee6e:	d10a      	bne.n	800ee86 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x40>
    {
        // Insert as head element
        d.nextSibling = firstChild;
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	619a      	str	r2, [r3, #24]
        firstChild = &d;
 800ee78:	68fb      	ldr	r3, [r7, #12]
 800ee7a:	687a      	ldr	r2, [r7, #4]
 800ee7c:	629a      	str	r2, [r3, #40]	; 0x28
        d.parent = this;
 800ee7e:	68fa      	ldr	r2, [r7, #12]
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	615a      	str	r2, [r3, #20]
 800ee84:	e018      	b.n	800eeb8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
    }
    else
    {
        Drawable* tmp = firstChild;
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee8a:	617b      	str	r3, [r7, #20]
        while (tmp)
 800ee8c:	697b      	ldr	r3, [r7, #20]
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d012      	beq.n	800eeb8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
        {
            if (tmp == previous)
 800ee92:	697a      	ldr	r2, [r7, #20]
 800ee94:	68bb      	ldr	r3, [r7, #8]
 800ee96:	429a      	cmp	r2, r3
 800ee98:	d10a      	bne.n	800eeb0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x6a>
            {
                d.nextSibling = tmp->nextSibling;
 800ee9a:	697b      	ldr	r3, [r7, #20]
 800ee9c:	699a      	ldr	r2, [r3, #24]
 800ee9e:	687b      	ldr	r3, [r7, #4]
 800eea0:	619a      	str	r2, [r3, #24]
                tmp->nextSibling = &d;
 800eea2:	697b      	ldr	r3, [r7, #20]
 800eea4:	687a      	ldr	r2, [r7, #4]
 800eea6:	619a      	str	r2, [r3, #24]
                d.parent = this;
 800eea8:	68fa      	ldr	r2, [r7, #12]
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	615a      	str	r2, [r3, #20]
                return;
 800eeae:	e003      	b.n	800eeb8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x72>
            }
            tmp = tmp->nextSibling;
 800eeb0:	697b      	ldr	r3, [r7, #20]
 800eeb2:	699b      	ldr	r3, [r3, #24]
 800eeb4:	617b      	str	r3, [r7, #20]
        while (tmp)
 800eeb6:	e7e9      	b.n	800ee8c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x46>
        }
    }
}
 800eeb8:	3718      	adds	r7, #24
 800eeba:	46bd      	mov	sp, r7
 800eebc:	bd80      	pop	{r7, pc}

0800eebe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:

void Container::setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
{
 800eebe:	b580      	push	{r7, lr}
 800eec0:	b088      	sub	sp, #32
 800eec2:	af00      	add	r7, sp, #0
 800eec4:	60f8      	str	r0, [r7, #12]
 800eec6:	60b9      	str	r1, [r7, #8]
 800eec8:	607a      	str	r2, [r7, #4]
    // This function adds the children of this container to the list of drawables to draw.
    if (!isVisible())
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	4618      	mov	r0, r3
 800eece:	f7ff fd39 	bl	800e944 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800eed2:	4603      	mov	r3, r0
 800eed4:	f083 0301 	eor.w	r3, r3, #1
 800eed8:	b2db      	uxtb	r3, r3
 800eeda:	2b00      	cmp	r3, #0
 800eedc:	d14b      	bne.n	800ef76 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb8>
    {
        // If this container itself is not visible, do not add anyone to draw chain.
        return;
    }

    if (!firstChild)
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d049      	beq.n	800ef7a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbc>
    {
        // If this container is empty, do not add anyone.
        return;
    }
    Drawable* d = firstChild;
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eeea:	61fb      	str	r3, [r7, #28]
    while (d)
 800eeec:	69fb      	ldr	r3, [r7, #28]
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d044      	beq.n	800ef7c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbe>
    {
        if (d->isVisible())
 800eef2:	69f8      	ldr	r0, [r7, #28]
 800eef4:	f7ff fd26 	bl	800e944 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800eef8:	4603      	mov	r3, r0
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d037      	beq.n	800ef6e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb0>
        {
            // Only drawables intersecting with the specified invalidated area will be added.
            Rect drawableRegion = invalidatedArea & d->getRect();
 800eefe:	69f8      	ldr	r0, [r7, #28]
 800ef00:	f7ff fc3e 	bl	800e780 <_ZNK8touchgfx8Drawable7getRectEv>
 800ef04:	4602      	mov	r2, r0
 800ef06:	f107 0314 	add.w	r3, r7, #20
 800ef0a:	68b9      	ldr	r1, [r7, #8]
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f7ff fae2 	bl	800e4d6 <_ZNK8touchgfx4RectanERKS0_>
            if (!drawableRegion.isEmpty())
 800ef12:	f107 0314 	add.w	r3, r7, #20
 800ef16:	4618      	mov	r0, r3
 800ef18:	f7ff fbfa 	bl	800e710 <_ZNK8touchgfx4Rect7isEmptyEv>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	f083 0301 	eor.w	r3, r3, #1
 800ef22:	b2db      	uxtb	r3, r3
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d022      	beq.n	800ef6e <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xb0>
            {
                drawableRegion.x -= d->getX();
 800ef28:	69f8      	ldr	r0, [r7, #28]
 800ef2a:	f7ff fc62 	bl	800e7f2 <_ZNK8touchgfx8Drawable4getXEv>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	4619      	mov	r1, r3
 800ef32:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800ef36:	b29a      	uxth	r2, r3
 800ef38:	b28b      	uxth	r3, r1
 800ef3a:	1ad3      	subs	r3, r2, r3
 800ef3c:	b29b      	uxth	r3, r3
 800ef3e:	b21b      	sxth	r3, r3
 800ef40:	82bb      	strh	r3, [r7, #20]
                drawableRegion.y -= d->getY();
 800ef42:	69f8      	ldr	r0, [r7, #28]
 800ef44:	f7ff fc62 	bl	800e80c <_ZNK8touchgfx8Drawable4getYEv>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	4619      	mov	r1, r3
 800ef4c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800ef50:	b29a      	uxth	r2, r3
 800ef52:	b28b      	uxth	r3, r1
 800ef54:	1ad3      	subs	r3, r2, r3
 800ef56:	b29b      	uxth	r3, r3
 800ef58:	b21b      	sxth	r3, r3
 800ef5a:	82fb      	strh	r3, [r7, #22]
                d->setupDrawChain(drawableRegion, nextPreviousElement);
 800ef5c:	69fb      	ldr	r3, [r7, #28]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	3360      	adds	r3, #96	; 0x60
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	f107 0114 	add.w	r1, r7, #20
 800ef68:	687a      	ldr	r2, [r7, #4]
 800ef6a:	69f8      	ldr	r0, [r7, #28]
 800ef6c:	4798      	blx	r3
            }
        }
        d = d->nextSibling;
 800ef6e:	69fb      	ldr	r3, [r7, #28]
 800ef70:	699b      	ldr	r3, [r3, #24]
 800ef72:	61fb      	str	r3, [r7, #28]
    while (d)
 800ef74:	e7ba      	b.n	800eeec <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x2e>
        return;
 800ef76:	bf00      	nop
 800ef78:	e000      	b.n	800ef7c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xbe>
        return;
 800ef7a:	bf00      	nop
    }
}
 800ef7c:	3720      	adds	r7, #32
 800ef7e:	46bd      	mov	sp, r7
 800ef80:	bd80      	pop	{r7, pc}

0800ef82 <_ZNK8touchgfx8Drawable8getWidthEv>:
    int16_t getWidth() const
 800ef82:	b480      	push	{r7}
 800ef84:	b083      	sub	sp, #12
 800ef86:	af00      	add	r7, sp, #0
 800ef88:	6078      	str	r0, [r7, #4]
        return rect.width;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    }
 800ef90:	4618      	mov	r0, r3
 800ef92:	370c      	adds	r7, #12
 800ef94:	46bd      	mov	sp, r7
 800ef96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef9a:	4770      	bx	lr

0800ef9c <_ZNK8touchgfx8Drawable9getHeightEv>:
    int16_t getHeight() const
 800ef9c:	b480      	push	{r7}
 800ef9e:	b083      	sub	sp, #12
 800efa0:	af00      	add	r7, sp, #0
 800efa2:	6078      	str	r0, [r7, #4]
        return rect.height;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
    }
 800efaa:	4618      	mov	r0, r3
 800efac:	370c      	adds	r7, #12
 800efae:	46bd      	mov	sp, r7
 800efb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efb4:	4770      	bx	lr
	...

0800efb8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>:
 *       taking zero, one, two or three arguments.
 *
 * @tparam T1 The type of the first argument in the member function, or void if none.
 */
template <class T1>
class GenericCallback<T1, void, void>
 800efb8:	b480      	push	{r7}
 800efba:	b083      	sub	sp, #12
 800efbc:	af00      	add	r7, sp, #0
 800efbe:	6078      	str	r0, [r7, #4]
 800efc0:	4a04      	ldr	r2, [pc, #16]	; (800efd4 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev+0x1c>)
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	601a      	str	r2, [r3, #0]
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	4618      	mov	r0, r3
 800efca:	370c      	adds	r7, #12
 800efcc:	46bd      	mov	sp, r7
 800efce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efd2:	4770      	bx	lr
 800efd4:	08023ffc 	.word	0x08023ffc

0800efd8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 800efd8:	b480      	push	{r7}
 800efda:	b083      	sub	sp, #12
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
    {
    }
 800efe0:	4a04      	ldr	r2, [pc, #16]	; (800eff4 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev+0x1c>)
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	601a      	str	r2, [r3, #0]
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	4618      	mov	r0, r3
 800efea:	370c      	adds	r7, #12
 800efec:	46bd      	mov	sp, r7
 800efee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eff2:	4770      	bx	lr
 800eff4:	08023ffc 	.word	0x08023ffc

0800eff8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED0Ev>:
    virtual ~GenericCallback()
 800eff8:	b580      	push	{r7, lr}
 800effa:	b082      	sub	sp, #8
 800effc:	af00      	add	r7, sp, #0
 800effe:	6078      	str	r0, [r7, #4]
    }
 800f000:	6878      	ldr	r0, [r7, #4]
 800f002:	f7ff ffe9 	bl	800efd8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 800f006:	2104      	movs	r1, #4
 800f008:	6878      	ldr	r0, [r7, #4]
 800f00a:	f013 fa0a 	bl	8022422 <_ZdlPvj>
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	4618      	mov	r0, r3
 800f012:	3708      	adds	r7, #8
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}

0800f018 <_ZN8touchgfx9colortypeC1Em>:
    colortype(uint32_t col)
 800f018:	b480      	push	{r7}
 800f01a:	b083      	sub	sp, #12
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
 800f020:	6039      	str	r1, [r7, #0]
        color = col;
 800f022:	687b      	ldr	r3, [r7, #4]
 800f024:	683a      	ldr	r2, [r7, #0]
 800f026:	601a      	str	r2, [r3, #0]
    }
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	4618      	mov	r0, r3
 800f02c:	370c      	adds	r7, #12
 800f02e:	46bd      	mov	sp, r7
 800f030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f034:	4770      	bx	lr

0800f036 <_ZN8touchgfx4RectC1Ev>:
    Rect()
 800f036:	b480      	push	{r7}
 800f038:	b083      	sub	sp, #12
 800f03a:	af00      	add	r7, sp, #0
 800f03c:	6078      	str	r0, [r7, #4]
        this->x = 0;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	2200      	movs	r2, #0
 800f042:	801a      	strh	r2, [r3, #0]
        this->y = 0;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	2200      	movs	r2, #0
 800f048:	805a      	strh	r2, [r3, #2]
        this->width = 0;
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	2200      	movs	r2, #0
 800f04e:	809a      	strh	r2, [r3, #4]
        this->height = 0;
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	2200      	movs	r2, #0
 800f054:	80da      	strh	r2, [r3, #6]
    }
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	4618      	mov	r0, r3
 800f05a:	370c      	adds	r7, #12
 800f05c:	46bd      	mov	sp, r7
 800f05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f062:	4770      	bx	lr

0800f064 <_ZN8touchgfx6BitmapC1Et>:
     *        Creates and binds a Bitmap instance to the corresponding entry in the BitmapData
     *        array.
     *
     * @param id The unique bitmap identifier.
     */
    explicit Bitmap(const BitmapId id = BITMAP_INVALID) : bitmapId(id)
 800f064:	b480      	push	{r7}
 800f066:	b083      	sub	sp, #12
 800f068:	af00      	add	r7, sp, #0
 800f06a:	6078      	str	r0, [r7, #4]
 800f06c:	460b      	mov	r3, r1
 800f06e:	807b      	strh	r3, [r7, #2]
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	887a      	ldrh	r2, [r7, #2]
 800f074:	801a      	strh	r2, [r3, #0]
    {
    }
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	4618      	mov	r0, r3
 800f07a:	370c      	adds	r7, #12
 800f07c:	46bd      	mov	sp, r7
 800f07e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f082:	4770      	bx	lr

0800f084 <_ZN8touchgfx8DrawableC1Ev>:
    Drawable() : rect(0, 0, 0, 0),
 800f084:	b580      	push	{r7, lr}
 800f086:	b084      	sub	sp, #16
 800f088:	af02      	add	r7, sp, #8
 800f08a:	6078      	str	r0, [r7, #4]
        visible(true)
 800f08c:	4a13      	ldr	r2, [pc, #76]	; (800f0dc <_ZN8touchgfx8DrawableC1Ev+0x58>)
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	601a      	str	r2, [r3, #0]
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	1d18      	adds	r0, r3, #4
 800f096:	2300      	movs	r3, #0
 800f098:	9300      	str	r3, [sp, #0]
 800f09a:	2300      	movs	r3, #0
 800f09c:	2200      	movs	r2, #0
 800f09e:	2100      	movs	r1, #0
 800f0a0:	f7ff f96e 	bl	800e380 <_ZN8touchgfx4RectC1Essss>
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	330c      	adds	r3, #12
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f7ff ffc4 	bl	800f036 <_ZN8touchgfx4RectC1Ev>
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	2200      	movs	r2, #0
 800f0b2:	615a      	str	r2, [r3, #20]
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	619a      	str	r2, [r3, #24]
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	2200      	movs	r2, #0
 800f0be:	61da      	str	r2, [r3, #28]
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2201      	movs	r2, #1
 800f0cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
 800f0d0:	687b      	ldr	r3, [r7, #4]
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	3708      	adds	r7, #8
 800f0d6:	46bd      	mov	sp, r7
 800f0d8:	bd80      	pop	{r7, pc}
 800f0da:	bf00      	nop
 800f0dc:	08025dc0 	.word	0x08025dc0

0800f0e0 <_ZN8touchgfx8Drawable12setTouchableEb>:
    void setTouchable(bool touch)
 800f0e0:	b480      	push	{r7}
 800f0e2:	b083      	sub	sp, #12
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
 800f0e8:	460b      	mov	r3, r1
 800f0ea:	70fb      	strb	r3, [r7, #3]
        touchable = touch;
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	78fa      	ldrb	r2, [r7, #3]
 800f0f0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
 800f0f4:	bf00      	nop
 800f0f6:	370c      	adds	r7, #12
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0fe:	4770      	bx	lr

0800f100 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>:
     *
     *        Reset cached coordinate data.
     *
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
 800f100:	b480      	push	{r7}
 800f102:	b083      	sub	sp, #12
 800f104:	af00      	add	r7, sp, #0
 800f106:	6078      	str	r0, [r7, #4]
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f10e:	819a      	strh	r2, [r3, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f116:	841a      	strh	r2, [r3, #32]
        cachedAbsY = UNCACHED_INDICATOR;
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f11e:	845a      	strh	r2, [r3, #34]	; 0x22
    }
 800f120:	bf00      	nop
 800f122:	370c      	adds	r7, #12
 800f124:	46bd      	mov	sp, r7
 800f126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f12a:	4770      	bx	lr

0800f12c <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     *
     * @param invalidatedArea              Include drawables that intersect with this area only.
     * @param [in,out] nextPreviousElement Modifiable element in linked list.
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
 800f12c:	b580      	push	{r7, lr}
 800f12e:	b084      	sub	sp, #16
 800f130:	af00      	add	r7, sp, #0
 800f132:	60f8      	str	r0, [r7, #12]
 800f134:	60b9      	str	r1, [r7, #8]
 800f136:	607a      	str	r2, [r7, #4]
    {
        resetDrawChainCache();
 800f138:	68f8      	ldr	r0, [r7, #12]
 800f13a:	f7ff ffe1 	bl	800f100 <_ZN8touchgfx8Drawable19resetDrawChainCacheEv>
        nextDrawChainElement = *nextPreviousElement;
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681a      	ldr	r2, [r3, #0]
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	61da      	str	r2, [r3, #28]
        *nextPreviousElement = this;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	68fa      	ldr	r2, [r7, #12]
 800f14a:	601a      	str	r2, [r3, #0]
    }
 800f14c:	bf00      	nop
 800f14e:	3710      	adds	r7, #16
 800f150:	46bd      	mov	sp, r7
 800f152:	bd80      	pop	{r7, pc}

0800f154 <_ZN8touchgfx9ContainerC1Ev>:
    Container() : Drawable(),
 800f154:	b580      	push	{r7, lr}
 800f156:	b082      	sub	sp, #8
 800f158:	af00      	add	r7, sp, #0
 800f15a:	6078      	str	r0, [r7, #4]
        firstChild(0)
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	4618      	mov	r0, r3
 800f160:	f7ff ff90 	bl	800f084 <_ZN8touchgfx8DrawableC1Ev>
 800f164:	4a05      	ldr	r2, [pc, #20]	; (800f17c <_ZN8touchgfx9ContainerC1Ev+0x28>)
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	601a      	str	r2, [r3, #0]
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	2200      	movs	r2, #0
 800f16e:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	4618      	mov	r0, r3
 800f174:	3708      	adds	r7, #8
 800f176:	46bd      	mov	sp, r7
 800f178:	bd80      	pop	{r7, pc}
 800f17a:	bf00      	nop
 800f17c:	08023f30 	.word	0x08023f30

0800f180 <_ZN8touchgfx6WidgetC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Widget() : Drawable() { }
 800f180:	b580      	push	{r7, lr}
 800f182:	b082      	sub	sp, #8
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	4618      	mov	r0, r3
 800f18c:	f7ff ff7a 	bl	800f084 <_ZN8touchgfx8DrawableC1Ev>
 800f190:	4a03      	ldr	r2, [pc, #12]	; (800f1a0 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	601a      	str	r2, [r3, #0]
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	4618      	mov	r0, r3
 800f19a:	3708      	adds	r7, #8
 800f19c:	46bd      	mov	sp, r7
 800f19e:	bd80      	pop	{r7, pc}
 800f1a0:	08024014 	.word	0x08024014

0800f1a4 <_ZN8touchgfx6WidgetD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Widget() { }
 800f1a4:	b580      	push	{r7, lr}
 800f1a6:	b082      	sub	sp, #8
 800f1a8:	af00      	add	r7, sp, #0
 800f1aa:	6078      	str	r0, [r7, #4]
 800f1ac:	4a05      	ldr	r2, [pc, #20]	; (800f1c4 <_ZN8touchgfx6WidgetD1Ev+0x20>)
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	601a      	str	r2, [r3, #0]
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	f7ff fac3 	bl	800e740 <_ZN8touchgfx8DrawableD1Ev>
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	4618      	mov	r0, r3
 800f1be:	3708      	adds	r7, #8
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	bd80      	pop	{r7, pc}
 800f1c4:	08024014 	.word	0x08024014

0800f1c8 <_ZN8touchgfx6WidgetD0Ev>:
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b082      	sub	sp, #8
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
 800f1d0:	6878      	ldr	r0, [r7, #4]
 800f1d2:	f7ff ffe7 	bl	800f1a4 <_ZN8touchgfx6WidgetD1Ev>
 800f1d6:	2128      	movs	r1, #40	; 0x28
 800f1d8:	6878      	ldr	r0, [r7, #4]
 800f1da:	f013 f922 	bl	8022422 <_ZdlPvj>
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3708      	adds	r7, #8
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}

0800f1e8 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param x          The point of intersection expressed in coordinates relative to the parent.
     * @param y          The y coordinate.
     * @param [out] last Result will be placed here.
     */
    virtual void getLastChild(int16_t x, int16_t y, Drawable** last)
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b084      	sub	sp, #16
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	60f8      	str	r0, [r7, #12]
 800f1f0:	607b      	str	r3, [r7, #4]
 800f1f2:	460b      	mov	r3, r1
 800f1f4:	817b      	strh	r3, [r7, #10]
 800f1f6:	4613      	mov	r3, r2
 800f1f8:	813b      	strh	r3, [r7, #8]
    {
        if (isVisible() && isTouchable())
 800f1fa:	68fb      	ldr	r3, [r7, #12]
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f7ff fba1 	bl	800e944 <_ZNK8touchgfx8Drawable9isVisibleEv>
 800f202:	4603      	mov	r3, r0
 800f204:	2b00      	cmp	r3, #0
 800f206:	d008      	beq.n	800f21a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	4618      	mov	r0, r3
 800f20c:	f7ff fba7 	bl	800e95e <_ZNK8touchgfx8Drawable11isTouchableEv>
 800f210:	4603      	mov	r3, r0
 800f212:	2b00      	cmp	r3, #0
 800f214:	d001      	beq.n	800f21a <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x32>
 800f216:	2301      	movs	r3, #1
 800f218:	e000      	b.n	800f21c <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x34>
 800f21a:	2300      	movs	r3, #0
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	d002      	beq.n	800f226 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0x3e>
        {
            *last = this;
 800f220:	68fa      	ldr	r2, [r7, #12]
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	601a      	str	r2, [r3, #0]
        }
    }
 800f226:	bf00      	nop
 800f228:	3710      	adds	r7, #16
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}

0800f22e <_ZNK8touchgfx6Widget7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_WIDGET.
     */
    virtual uint16_t getType() const
 800f22e:	b480      	push	{r7}
 800f230:	b083      	sub	sp, #12
 800f232:	af00      	add	r7, sp, #0
 800f234:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_WIDGET;
 800f236:	2301      	movs	r3, #1
    }
 800f238:	4618      	mov	r0, r3
 800f23a:	370c      	adds	r7, #12
 800f23c:	46bd      	mov	sp, r7
 800f23e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f242:	4770      	bx	lr

0800f244 <_ZN8touchgfx3BoxC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructs a new Box with a default alpha value of 255 (solid)
     */
    Box() : Widget(), alpha(255), color(0), reportAsSolid(false)
 800f244:	b580      	push	{r7, lr}
 800f246:	b082      	sub	sp, #8
 800f248:	af00      	add	r7, sp, #0
 800f24a:	6078      	str	r0, [r7, #4]
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	4618      	mov	r0, r3
 800f250:	f7ff ff96 	bl	800f180 <_ZN8touchgfx6WidgetC1Ev>
 800f254:	4a0a      	ldr	r2, [pc, #40]	; (800f280 <_ZN8touchgfx3BoxC1Ev+0x3c>)
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	601a      	str	r2, [r3, #0]
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	22ff      	movs	r2, #255	; 0xff
 800f25e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	3328      	adds	r3, #40	; 0x28
 800f266:	2100      	movs	r1, #0
 800f268:	4618      	mov	r0, r3
 800f26a:	f7ff fed5 	bl	800f018 <_ZN8touchgfx9colortypeC1Em>
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	2200      	movs	r2, #0
 800f272:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
    }
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	4618      	mov	r0, r3
 800f27a:	3708      	adds	r7, #8
 800f27c:	46bd      	mov	sp, r7
 800f27e:	bd80      	pop	{r7, pc}
 800f280:	080242a0 	.word	0x080242a0

0800f284 <_ZN8touchgfx3BoxD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Box() {}
 800f284:	b580      	push	{r7, lr}
 800f286:	b082      	sub	sp, #8
 800f288:	af00      	add	r7, sp, #0
 800f28a:	6078      	str	r0, [r7, #4]
 800f28c:	4a05      	ldr	r2, [pc, #20]	; (800f2a4 <_ZN8touchgfx3BoxD1Ev+0x20>)
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	601a      	str	r2, [r3, #0]
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	4618      	mov	r0, r3
 800f296:	f7ff ff85 	bl	800f1a4 <_ZN8touchgfx6WidgetD1Ev>
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	4618      	mov	r0, r3
 800f29e:	3708      	adds	r7, #8
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}
 800f2a4:	080242a0 	.word	0x080242a0

0800f2a8 <_ZN8touchgfx3BoxD0Ev>:
 800f2a8:	b580      	push	{r7, lr}
 800f2aa:	b082      	sub	sp, #8
 800f2ac:	af00      	add	r7, sp, #0
 800f2ae:	6078      	str	r0, [r7, #4]
 800f2b0:	6878      	ldr	r0, [r7, #4]
 800f2b2:	f7ff ffe7 	bl	800f284 <_ZN8touchgfx3BoxD1Ev>
 800f2b6:	2130      	movs	r1, #48	; 0x30
 800f2b8:	6878      	ldr	r0, [r7, #4]
 800f2ba:	f013 f8b2 	bl	8022422 <_ZdlPvj>
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	3708      	adds	r7, #8
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}

0800f2c8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>:
     *
     *        Sets the color of the rectangle.
     *
     * @param color The color of the box.
     */
    void setColor(colortype color)
 800f2c8:	b480      	push	{r7}
 800f2ca:	b083      	sub	sp, #12
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	683a      	ldr	r2, [r7, #0]
 800f2d6:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800f2d8:	bf00      	nop
 800f2da:	370c      	adds	r7, #12
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2e2:	4770      	bx	lr

0800f2e4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
     *        Constructs a new Image with a default alpha value of 255 (solid) and a default
     *        Bitmap if none is specified.
     *
     * @param bmp The bitmap to display.
     */
    Image(const Bitmap& bmp = Bitmap()) : Widget(), alpha(255)
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b082      	sub	sp, #8
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	6039      	str	r1, [r7, #0]
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7ff ff45 	bl	800f180 <_ZN8touchgfx6WidgetC1Ev>
 800f2f6:	4a0b      	ldr	r2, [pc, #44]	; (800f324 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x40>)
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	601a      	str	r2, [r3, #0]
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	3326      	adds	r3, #38	; 0x26
 800f300:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f304:	4618      	mov	r0, r3
 800f306:	f7ff fead 	bl	800f064 <_ZN8touchgfx6BitmapC1Et>
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	22ff      	movs	r2, #255	; 0xff
 800f30e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    {
        setBitmap(bmp);
 800f312:	6839      	ldr	r1, [r7, #0]
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f001 fa8c 	bl	8010832 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    }
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	4618      	mov	r0, r3
 800f31e:	3708      	adds	r7, #8
 800f320:	46bd      	mov	sp, r7
 800f322:	bd80      	pop	{r7, pc}
 800f324:	080244d8 	.word	0x080244d8

0800f328 <_ZN8touchgfx5ImageD1Ev>:
class Image : public Widget
 800f328:	b580      	push	{r7, lr}
 800f32a:	b082      	sub	sp, #8
 800f32c:	af00      	add	r7, sp, #0
 800f32e:	6078      	str	r0, [r7, #4]
 800f330:	4a05      	ldr	r2, [pc, #20]	; (800f348 <_ZN8touchgfx5ImageD1Ev+0x20>)
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	601a      	str	r2, [r3, #0]
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	4618      	mov	r0, r3
 800f33a:	f7ff ff33 	bl	800f1a4 <_ZN8touchgfx6WidgetD1Ev>
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	4618      	mov	r0, r3
 800f342:	3708      	adds	r7, #8
 800f344:	46bd      	mov	sp, r7
 800f346:	bd80      	pop	{r7, pc}
 800f348:	080244d8 	.word	0x080244d8

0800f34c <_ZN8touchgfx5ImageD0Ev>:
 800f34c:	b580      	push	{r7, lr}
 800f34e:	b082      	sub	sp, #8
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
 800f354:	6878      	ldr	r0, [r7, #4]
 800f356:	f7ff ffe7 	bl	800f328 <_ZN8touchgfx5ImageD1Ev>
 800f35a:	212c      	movs	r1, #44	; 0x2c
 800f35c:	6878      	ldr	r0, [r7, #4]
 800f35e:	f013 f860 	bl	8022422 <_ZdlPvj>
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	4618      	mov	r0, r3
 800f366:	3708      	adds	r7, #8
 800f368:	46bd      	mov	sp, r7
 800f36a:	bd80      	pop	{r7, pc}

0800f36c <_ZN8touchgfx5EventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Event() { }
 800f36c:	b480      	push	{r7}
 800f36e:	b083      	sub	sp, #12
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
 800f374:	4a04      	ldr	r2, [pc, #16]	; (800f388 <_ZN8touchgfx5EventD1Ev+0x1c>)
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	601a      	str	r2, [r3, #0]
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	4618      	mov	r0, r3
 800f37e:	370c      	adds	r7, #12
 800f380:	46bd      	mov	sp, r7
 800f382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f386:	4770      	bx	lr
 800f388:	080240a8 	.word	0x080240a8

0800f38c <_ZN8touchgfx5EventD0Ev>:
 800f38c:	b580      	push	{r7, lr}
 800f38e:	b082      	sub	sp, #8
 800f390:	af00      	add	r7, sp, #0
 800f392:	6078      	str	r0, [r7, #4]
 800f394:	6878      	ldr	r0, [r7, #4]
 800f396:	f7ff ffe9 	bl	800f36c <_ZN8touchgfx5EventD1Ev>
 800f39a:	2104      	movs	r1, #4
 800f39c:	6878      	ldr	r0, [r7, #4]
 800f39e:	f013 f840 	bl	8022422 <_ZdlPvj>
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	4618      	mov	r0, r3
 800f3a6:	3708      	adds	r7, #8
 800f3a8:	46bd      	mov	sp, r7
 800f3aa:	bd80      	pop	{r7, pc}

0800f3ac <_ZN8touchgfx10ClickEventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~ClickEvent() { }
 800f3ac:	b580      	push	{r7, lr}
 800f3ae:	b082      	sub	sp, #8
 800f3b0:	af00      	add	r7, sp, #0
 800f3b2:	6078      	str	r0, [r7, #4]
 800f3b4:	4a05      	ldr	r2, [pc, #20]	; (800f3cc <_ZN8touchgfx10ClickEventD1Ev+0x20>)
 800f3b6:	687b      	ldr	r3, [r7, #4]
 800f3b8:	601a      	str	r2, [r3, #0]
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	4618      	mov	r0, r3
 800f3be:	f7ff ffd5 	bl	800f36c <_ZN8touchgfx5EventD1Ev>
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	3708      	adds	r7, #8
 800f3c8:	46bd      	mov	sp, r7
 800f3ca:	bd80      	pop	{r7, pc}
 800f3cc:	08024094 	.word	0x08024094

0800f3d0 <_ZN8touchgfx10ClickEventD0Ev>:
 800f3d0:	b580      	push	{r7, lr}
 800f3d2:	b082      	sub	sp, #8
 800f3d4:	af00      	add	r7, sp, #0
 800f3d6:	6078      	str	r0, [r7, #4]
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f7ff ffe7 	bl	800f3ac <_ZN8touchgfx10ClickEventD1Ev>
 800f3de:	210c      	movs	r1, #12
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f013 f81e 	bl	8022422 <_ZdlPvj>
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	4618      	mov	r0, r3
 800f3ea:	3708      	adds	r7, #8
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}

0800f3f0 <_ZNK8touchgfx10ClickEvent7getTypeEv>:
     *
     *        Gets the click type of this event.
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
 800f3f0:	b480      	push	{r7}
 800f3f2:	b083      	sub	sp, #12
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
    {
        return _type;
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	791b      	ldrb	r3, [r3, #4]
    }
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	370c      	adds	r7, #12
 800f400:	46bd      	mov	sp, r7
 800f402:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f406:	4770      	bx	lr

0800f408 <_ZN8touchgfx10ClickEvent12getEventTypeEv>:
     *
     *        Gets event type.
     *
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
 800f408:	b480      	push	{r7}
 800f40a:	b083      	sub	sp, #12
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
    {
        return Event::EVENT_CLICK;
 800f410:	2300      	movs	r3, #0
    }
 800f412:	4618      	mov	r0, r3
 800f414:	370c      	adds	r7, #12
 800f416:	46bd      	mov	sp, r7
 800f418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41c:	4770      	bx	lr
	...

0800f420 <_ZN8touchgfx9DragEventD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DragEvent() { }
 800f420:	b580      	push	{r7, lr}
 800f422:	b082      	sub	sp, #8
 800f424:	af00      	add	r7, sp, #0
 800f426:	6078      	str	r0, [r7, #4]
 800f428:	4a05      	ldr	r2, [pc, #20]	; (800f440 <_ZN8touchgfx9DragEventD1Ev+0x20>)
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	601a      	str	r2, [r3, #0]
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	4618      	mov	r0, r3
 800f432:	f7ff ff9b 	bl	800f36c <_ZN8touchgfx5EventD1Ev>
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	4618      	mov	r0, r3
 800f43a:	3708      	adds	r7, #8
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}
 800f440:	08024080 	.word	0x08024080

0800f444 <_ZN8touchgfx9DragEventD0Ev>:
 800f444:	b580      	push	{r7, lr}
 800f446:	b082      	sub	sp, #8
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
 800f44c:	6878      	ldr	r0, [r7, #4]
 800f44e:	f7ff ffe7 	bl	800f420 <_ZN8touchgfx9DragEventD1Ev>
 800f452:	2110      	movs	r1, #16
 800f454:	6878      	ldr	r0, [r7, #4]
 800f456:	f012 ffe4 	bl	8022422 <_ZdlPvj>
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	4618      	mov	r0, r3
 800f45e:	3708      	adds	r7, #8
 800f460:	46bd      	mov	sp, r7
 800f462:	bd80      	pop	{r7, pc}

0800f464 <_ZN8touchgfx9DragEvent12getEventTypeEv>:
     *
     *        Gets event type.
     *
     * @return The type of this event.
     */
    virtual Event::EventType getEventType()
 800f464:	b480      	push	{r7}
 800f466:	b083      	sub	sp, #12
 800f468:	af00      	add	r7, sp, #0
 800f46a:	6078      	str	r0, [r7, #4]
    {
        return Event::EVENT_DRAG;
 800f46c:	2301      	movs	r3, #1
    }
 800f46e:	4618      	mov	r0, r3
 800f470:	370c      	adds	r7, #12
 800f472:	46bd      	mov	sp, r7
 800f474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f478:	4770      	bx	lr
	...

0800f47c <_ZN8touchgfx3HAL11getInstanceEv>:
     *
     *        Gets the HAL instance.
     *
     * @return The HAL instance.
     */
    static HAL* getInstance()
 800f47c:	b480      	push	{r7}
 800f47e:	af00      	add	r7, sp, #0
    {
        return instance;
 800f480:	4b03      	ldr	r3, [pc, #12]	; (800f490 <_ZN8touchgfx3HAL11getInstanceEv+0x14>)
 800f482:	681b      	ldr	r3, [r3, #0]
    }
 800f484:	4618      	mov	r0, r3
 800f486:	46bd      	mov	sp, r7
 800f488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48c:	4770      	bx	lr
 800f48e:	bf00      	nop
 800f490:	20009d34 	.word	0x20009d34

0800f494 <_ZN8touchgfx14AbstractButtonC1Ev>:
     * @brief Constructor.
     *
     *        Constructs an AbstractButton instance in released state without an associated
     *        action.
     */
    AbstractButton() : Widget(), action(), pressed(false)
 800f494:	b580      	push	{r7, lr}
 800f496:	b082      	sub	sp, #8
 800f498:	af00      	add	r7, sp, #0
 800f49a:	6078      	str	r0, [r7, #4]
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	4618      	mov	r0, r3
 800f4a0:	f7ff fe6e 	bl	800f180 <_ZN8touchgfx6WidgetC1Ev>
 800f4a4:	4a09      	ldr	r2, [pc, #36]	; (800f4cc <_ZN8touchgfx14AbstractButtonC1Ev+0x38>)
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	601a      	str	r2, [r3, #0]
 800f4aa:	687b      	ldr	r3, [r7, #4]
 800f4ac:	2200      	movs	r2, #0
 800f4ae:	629a      	str	r2, [r3, #40]	; 0x28
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2200      	movs	r2, #0
 800f4b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    {
        setTouchable(true);
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	2101      	movs	r1, #1
 800f4bc:	4618      	mov	r0, r3
 800f4be:	f7ff fe0f 	bl	800f0e0 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	3708      	adds	r7, #8
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}
 800f4cc:	08024230 	.word	0x08024230

0800f4d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     * @param callback The callback to be executed. The callback will be given a reference to
     *                 the AbstractButton.
     *
     * @see GenericCallback
     */
    void setAction(GenericCallback< const AbstractButton& >& callback)
 800f4d0:	b480      	push	{r7}
 800f4d2:	b083      	sub	sp, #12
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	683a      	ldr	r2, [r7, #0]
 800f4de:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800f4e0:	bf00      	nop
 800f4e2:	370c      	adds	r7, #12
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ea:	4770      	bx	lr

0800f4ec <_ZN8touchgfx14AbstractButtonD1Ev>:
class AbstractButton : public Widget
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b082      	sub	sp, #8
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	6078      	str	r0, [r7, #4]
 800f4f4:	4a05      	ldr	r2, [pc, #20]	; (800f50c <_ZN8touchgfx14AbstractButtonD1Ev+0x20>)
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	601a      	str	r2, [r3, #0]
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	4618      	mov	r0, r3
 800f4fe:	f7ff fe51 	bl	800f1a4 <_ZN8touchgfx6WidgetD1Ev>
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	4618      	mov	r0, r3
 800f506:	3708      	adds	r7, #8
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}
 800f50c:	08024230 	.word	0x08024230

0800f510 <_ZN8touchgfx14AbstractButtonD0Ev>:
 800f510:	b580      	push	{r7, lr}
 800f512:	b082      	sub	sp, #8
 800f514:	af00      	add	r7, sp, #0
 800f516:	6078      	str	r0, [r7, #4]
 800f518:	6878      	ldr	r0, [r7, #4]
 800f51a:	f7ff ffe7 	bl	800f4ec <_ZN8touchgfx14AbstractButtonD1Ev>
 800f51e:	2130      	movs	r1, #48	; 0x30
 800f520:	6878      	ldr	r0, [r7, #4]
 800f522:	f012 ff7e 	bl	8022422 <_ZdlPvj>
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	4618      	mov	r0, r3
 800f52a:	3708      	adds	r7, #8
 800f52c:	46bd      	mov	sp, r7
 800f52e:	bd80      	pop	{r7, pc}

0800f530 <_ZN8touchgfx6ButtonC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Button() : AbstractButton(), up(), down(), alpha(255) { }
 800f530:	b580      	push	{r7, lr}
 800f532:	b082      	sub	sp, #8
 800f534:	af00      	add	r7, sp, #0
 800f536:	6078      	str	r0, [r7, #4]
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	4618      	mov	r0, r3
 800f53c:	f7ff ffaa 	bl	800f494 <_ZN8touchgfx14AbstractButtonC1Ev>
 800f540:	4a0c      	ldr	r2, [pc, #48]	; (800f574 <_ZN8touchgfx6ButtonC1Ev+0x44>)
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	601a      	str	r2, [r3, #0]
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	332e      	adds	r3, #46	; 0x2e
 800f54a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f54e:	4618      	mov	r0, r3
 800f550:	f7ff fd88 	bl	800f064 <_ZN8touchgfx6BitmapC1Et>
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	3330      	adds	r3, #48	; 0x30
 800f558:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f55c:	4618      	mov	r0, r3
 800f55e:	f7ff fd81 	bl	800f064 <_ZN8touchgfx6BitmapC1Et>
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	22ff      	movs	r2, #255	; 0xff
 800f566:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	4618      	mov	r0, r3
 800f56e:	3708      	adds	r7, #8
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}
 800f574:	08024378 	.word	0x08024378

0800f578 <_ZN8touchgfx6ButtonD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Button() { }
 800f578:	b580      	push	{r7, lr}
 800f57a:	b082      	sub	sp, #8
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	6078      	str	r0, [r7, #4]
 800f580:	4a05      	ldr	r2, [pc, #20]	; (800f598 <_ZN8touchgfx6ButtonD1Ev+0x20>)
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	601a      	str	r2, [r3, #0]
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	4618      	mov	r0, r3
 800f58a:	f7ff ffaf 	bl	800f4ec <_ZN8touchgfx14AbstractButtonD1Ev>
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	4618      	mov	r0, r3
 800f592:	3708      	adds	r7, #8
 800f594:	46bd      	mov	sp, r7
 800f596:	bd80      	pop	{r7, pc}
 800f598:	08024378 	.word	0x08024378

0800f59c <_ZN8touchgfx6ButtonD0Ev>:
 800f59c:	b580      	push	{r7, lr}
 800f59e:	b082      	sub	sp, #8
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
 800f5a4:	6878      	ldr	r0, [r7, #4]
 800f5a6:	f7ff ffe7 	bl	800f578 <_ZN8touchgfx6ButtonD1Ev>
 800f5aa:	2134      	movs	r1, #52	; 0x34
 800f5ac:	6878      	ldr	r0, [r7, #4]
 800f5ae:	f012 ff38 	bl	8022422 <_ZdlPvj>
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	4618      	mov	r0, r3
 800f5b6:	3708      	adds	r7, #8
 800f5b8:	46bd      	mov	sp, r7
 800f5ba:	bd80      	pop	{r7, pc}

0800f5bc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>:
class GenericCallback<T1, void, void>
 800f5bc:	b480      	push	{r7}
 800f5be:	b083      	sub	sp, #12
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
 800f5c4:	4a04      	ldr	r2, [pc, #16]	; (800f5d8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev+0x1c>)
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	601a      	str	r2, [r3, #0]
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	370c      	adds	r7, #12
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d6:	4770      	bx	lr
 800f5d8:	080240bc 	.word	0x080240bc

0800f5dc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>:
    virtual ~GenericCallback()
 800f5dc:	b480      	push	{r7}
 800f5de:	b083      	sub	sp, #12
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
    }
 800f5e4:	4a04      	ldr	r2, [pc, #16]	; (800f5f8 <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev+0x1c>)
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	601a      	str	r2, [r3, #0]
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	370c      	adds	r7, #12
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f6:	4770      	bx	lr
 800f5f8:	080240bc 	.word	0x080240bc

0800f5fc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED0Ev>:
    virtual ~GenericCallback()
 800f5fc:	b580      	push	{r7, lr}
 800f5fe:	b082      	sub	sp, #8
 800f600:	af00      	add	r7, sp, #0
 800f602:	6078      	str	r0, [r7, #4]
    }
 800f604:	6878      	ldr	r0, [r7, #4]
 800f606:	f7ff ffe9 	bl	800f5dc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 800f60a:	2104      	movs	r1, #4
 800f60c:	6878      	ldr	r0, [r7, #4]
 800f60e:	f012 ff08 	bl	8022422 <_ZdlPvj>
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	4618      	mov	r0, r3
 800f616:	3708      	adds	r7, #8
 800f618:	46bd      	mov	sp, r7
 800f61a:	bd80      	pop	{r7, pc}

0800f61c <_ZNK8touchgfx6Bitmap5getIdEv>:
     *
     *        Gets the id of this Bitmap.
     *
     * @return The id of this Bitmap.
     */
    BitmapId getId() const
 800f61c:	b580      	push	{r7, lr}
 800f61e:	b082      	sub	sp, #8
 800f620:	af00      	add	r7, sp, #0
 800f622:	6078      	str	r0, [r7, #4]
    {
        assert(bitmaps != 0 && "Bitmap database has not been initialized.");
 800f624:	4b07      	ldr	r3, [pc, #28]	; (800f644 <_ZNK8touchgfx6Bitmap5getIdEv+0x28>)
 800f626:	681b      	ldr	r3, [r3, #0]
 800f628:	2b00      	cmp	r3, #0
 800f62a:	d105      	bne.n	800f638 <_ZNK8touchgfx6Bitmap5getIdEv+0x1c>
 800f62c:	4b06      	ldr	r3, [pc, #24]	; (800f648 <_ZNK8touchgfx6Bitmap5getIdEv+0x2c>)
 800f62e:	4a07      	ldr	r2, [pc, #28]	; (800f64c <_ZNK8touchgfx6Bitmap5getIdEv+0x30>)
 800f630:	2195      	movs	r1, #149	; 0x95
 800f632:	4807      	ldr	r0, [pc, #28]	; (800f650 <_ZNK8touchgfx6Bitmap5getIdEv+0x34>)
 800f634:	f012 ff12 	bl	802245c <__assert_func>
        return bitmapId;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	881b      	ldrh	r3, [r3, #0]
    }
 800f63c:	4618      	mov	r0, r3
 800f63e:	3708      	adds	r7, #8
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}
 800f644:	20009dcc 	.word	0x20009dcc
 800f648:	08023580 	.word	0x08023580
 800f64c:	080240cc 	.word	0x080240cc
 800f650:	080235bc 	.word	0x080235bc

0800f654 <_ZN8touchgfx5Image8setAlphaEh>:
     *
     *        Sets the alpha channel for the image.
     *
     * @param alpha The alpha value. 255 = completely solid.
     */
    void setAlpha(uint8_t alpha)
 800f654:	b480      	push	{r7}
 800f656:	b083      	sub	sp, #12
 800f658:	af00      	add	r7, sp, #0
 800f65a:	6078      	str	r0, [r7, #4]
 800f65c:	460b      	mov	r3, r1
 800f65e:	70fb      	strb	r3, [r7, #3]
    {
        this->alpha = alpha;
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	78fa      	ldrb	r2, [r7, #3]
 800f664:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
 800f668:	bf00      	nop
 800f66a:	370c      	adds	r7, #12
 800f66c:	46bd      	mov	sp, r7
 800f66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f672:	4770      	bx	lr

0800f674 <_ZN8touchgfx9colortypeC1Ev>:
    colortype() : color(0) {}
 800f674:	b480      	push	{r7}
 800f676:	b083      	sub	sp, #12
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	2200      	movs	r2, #0
 800f680:	601a      	str	r2, [r3, #0]
 800f682:	687b      	ldr	r3, [r7, #4]
 800f684:	4618      	mov	r0, r3
 800f686:	370c      	adds	r7, #12
 800f688:	46bd      	mov	sp, r7
 800f68a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f68e:	4770      	bx	lr

0800f690 <_ZN8touchgfx3HAL3lcdEv>:
     *
     *        Gets a reference to the LCD.
     *
     * @return A reference to the LCD.
     */
    static LCD& lcd()
 800f690:	b480      	push	{r7}
 800f692:	af00      	add	r7, sp, #0
    {
        return instance->lcdRef;
 800f694:	4b03      	ldr	r3, [pc, #12]	; (800f6a4 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	689b      	ldr	r3, [r3, #8]
    }
 800f69a:	4618      	mov	r0, r3
 800f69c:	46bd      	mov	sp, r7
 800f69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6a2:	4770      	bx	lr
 800f6a4:	20009d34 	.word	0x20009d34

0800f6a8 <_ZN8touchgfx3LCD13StringVisualsC1EPKNS_4FontENS_9colortypeEhhtNS_12TextRotationEhhNS_14WideTextActionE>:
         * @param textDirection  The text direction.
         * @param indentation    The indentation of the text from the left and right of the text
         *                       area rectangle.
         * @param wideTextAction What to do with lines longer than the width of the TextArea.
         */
        StringVisuals(const Font* font, colortype color, uint8_t alpha, Alignment alignment, uint16_t linespace, TextRotation rotation, TextDirection textDirection, uint8_t indentation, WideTextAction wideTextAction = WIDE_TEXT_NONE)
 800f6a8:	b580      	push	{r7, lr}
 800f6aa:	b084      	sub	sp, #16
 800f6ac:	af00      	add	r7, sp, #0
 800f6ae:	60f8      	str	r0, [r7, #12]
 800f6b0:	60b9      	str	r1, [r7, #8]
 800f6b2:	607a      	str	r2, [r7, #4]
 800f6b4:	70fb      	strb	r3, [r7, #3]
        {
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	3308      	adds	r3, #8
 800f6ba:	4618      	mov	r0, r3
 800f6bc:	f7ff ffda 	bl	800f674 <_ZN8touchgfx9colortypeC1Ev>
            this->font = font;
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	68ba      	ldr	r2, [r7, #8]
 800f6c4:	601a      	str	r2, [r3, #0]
            this->color = color;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	687a      	ldr	r2, [r7, #4]
 800f6ca:	609a      	str	r2, [r3, #8]
            this->alpha = alpha;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	78fa      	ldrb	r2, [r7, #3]
 800f6d0:	739a      	strb	r2, [r3, #14]
            this->alignment = alignment;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	7e3a      	ldrb	r2, [r7, #24]
 800f6d6:	711a      	strb	r2, [r3, #4]
            this->textDirection = textDirection;
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800f6de:	715a      	strb	r2, [r3, #5]
            this->rotation = rotation;
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	f897 2020 	ldrb.w	r2, [r7, #32]
 800f6e6:	719a      	strb	r2, [r3, #6]
            this->linespace = linespace;
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	8bba      	ldrh	r2, [r7, #28]
 800f6ec:	819a      	strh	r2, [r3, #12]
            this->indentation = indentation;
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f6f4:	73da      	strb	r2, [r3, #15]
            this->wideTextAction = wideTextAction;
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800f6fc:	741a      	strb	r2, [r3, #16]
        }
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	4618      	mov	r0, r3
 800f702:	3710      	adds	r7, #16
 800f704:	46bd      	mov	sp, r7
 800f706:	bd80      	pop	{r7, pc}

0800f708 <_ZNK8touchgfx5Texts7getTextEt>:
     *
     * @param id The id of the text to lookup.
     *
     * @return The text.
     */
    const Unicode::UnicodeChar* getText(TypedTextId id) const
 800f708:	b480      	push	{r7}
 800f70a:	b083      	sub	sp, #12
 800f70c:	af00      	add	r7, sp, #0
 800f70e:	6078      	str	r0, [r7, #4]
 800f710:	460b      	mov	r3, r1
 800f712:	807b      	strh	r3, [r7, #2]
    {
        return currentLanguagePtr[id];
 800f714:	4b05      	ldr	r3, [pc, #20]	; (800f72c <_ZNK8touchgfx5Texts7getTextEt+0x24>)
 800f716:	681a      	ldr	r2, [r3, #0]
 800f718:	887b      	ldrh	r3, [r7, #2]
 800f71a:	009b      	lsls	r3, r3, #2
 800f71c:	4413      	add	r3, r2
 800f71e:	681b      	ldr	r3, [r3, #0]
    }
 800f720:	4618      	mov	r0, r3
 800f722:	370c      	adds	r7, #12
 800f724:	46bd      	mov	sp, r7
 800f726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72a:	4770      	bx	lr
 800f72c:	20009c98 	.word	0x20009c98

0800f730 <_ZN8touchgfx9TypedTextC1Et>:
     *
     *        Construct a typed text.
     *
     * @param id The id of the TypedText.
     */
    explicit TypedText(const TypedTextId id = TYPED_TEXT_INVALID) : typedTextId(id)
 800f730:	b480      	push	{r7}
 800f732:	b083      	sub	sp, #12
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
 800f738:	460b      	mov	r3, r1
 800f73a:	807b      	strh	r3, [r7, #2]
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	887a      	ldrh	r2, [r7, #2]
 800f740:	801a      	strh	r2, [r3, #0]
    {
    }
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	4618      	mov	r0, r3
 800f746:	370c      	adds	r7, #12
 800f748:	46bd      	mov	sp, r7
 800f74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74e:	4770      	bx	lr

0800f750 <_ZNK8touchgfx9TypedText10hasValidIdEv>:
     *
     *        Has the TypedText been set to a proper value.
     *
     * @return Is the id valid.
     */
    bool hasValidId() const
 800f750:	b480      	push	{r7}
 800f752:	b083      	sub	sp, #12
 800f754:	af00      	add	r7, sp, #0
 800f756:	6078      	str	r0, [r7, #4]
    {
        return typedTextId != TYPED_TEXT_INVALID;
 800f758:	687b      	ldr	r3, [r7, #4]
 800f75a:	881b      	ldrh	r3, [r3, #0]
 800f75c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f760:	4293      	cmp	r3, r2
 800f762:	bf14      	ite	ne
 800f764:	2301      	movne	r3, #1
 800f766:	2300      	moveq	r3, #0
 800f768:	b2db      	uxtb	r3, r3
    }
 800f76a:	4618      	mov	r0, r3
 800f76c:	370c      	adds	r7, #12
 800f76e:	46bd      	mov	sp, r7
 800f770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f774:	4770      	bx	lr
	...

0800f778 <_ZNK8touchgfx9TypedText7getTextEv>:
     *
     *        Gets the text associated with this TypedText.
     *
     * @return The text.
     */
    const Unicode::UnicodeChar* getText() const
 800f778:	b580      	push	{r7, lr}
 800f77a:	b082      	sub	sp, #8
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	f000 f85b 	bl	800f83c <_ZNK8touchgfx9TypedText11assertValidEv>
        return texts->getText(typedTextId);
 800f786:	4b06      	ldr	r3, [pc, #24]	; (800f7a0 <_ZNK8touchgfx9TypedText7getTextEv+0x28>)
 800f788:	681a      	ldr	r2, [r3, #0]
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	881b      	ldrh	r3, [r3, #0]
 800f78e:	4619      	mov	r1, r3
 800f790:	4610      	mov	r0, r2
 800f792:	f7ff ffb9 	bl	800f708 <_ZNK8touchgfx5Texts7getTextEt>
 800f796:	4603      	mov	r3, r0
    }
 800f798:	4618      	mov	r0, r3
 800f79a:	3708      	adds	r7, #8
 800f79c:	46bd      	mov	sp, r7
 800f79e:	bd80      	pop	{r7, pc}
 800f7a0:	20009da0 	.word	0x20009da0

0800f7a4 <_ZNK8touchgfx9TypedText7getFontEv>:
     *
     *        Gets the font associated with this TypedText.
     *
     * @return The font.
     */
    const Font* getFont() const
 800f7a4:	b580      	push	{r7, lr}
 800f7a6:	b082      	sub	sp, #8
 800f7a8:	af00      	add	r7, sp, #0
 800f7aa:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f000 f845 	bl	800f83c <_ZNK8touchgfx9TypedText11assertValidEv>
        return fonts[typedTexts[typedTextId].fontIdx];
 800f7b2:	4b08      	ldr	r3, [pc, #32]	; (800f7d4 <_ZNK8touchgfx9TypedText7getFontEv+0x30>)
 800f7b4:	681a      	ldr	r2, [r3, #0]
 800f7b6:	4b08      	ldr	r3, [pc, #32]	; (800f7d8 <_ZNK8touchgfx9TypedText7getFontEv+0x34>)
 800f7b8:	6819      	ldr	r1, [r3, #0]
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	881b      	ldrh	r3, [r3, #0]
 800f7be:	005b      	lsls	r3, r3, #1
 800f7c0:	440b      	add	r3, r1
 800f7c2:	781b      	ldrb	r3, [r3, #0]
 800f7c4:	009b      	lsls	r3, r3, #2
 800f7c6:	4413      	add	r3, r2
 800f7c8:	681b      	ldr	r3, [r3, #0]
    }
 800f7ca:	4618      	mov	r0, r3
 800f7cc:	3708      	adds	r7, #8
 800f7ce:	46bd      	mov	sp, r7
 800f7d0:	bd80      	pop	{r7, pc}
 800f7d2:	bf00      	nop
 800f7d4:	20009d9c 	.word	0x20009d9c
 800f7d8:	20009d94 	.word	0x20009d94

0800f7dc <_ZNK8touchgfx9TypedText12getAlignmentEv>:
     *
     *        Gets the alignment associated with this TypedText.
     *
     * @return The alignment.
     */
    Alignment getAlignment() const
 800f7dc:	b580      	push	{r7, lr}
 800f7de:	b082      	sub	sp, #8
 800f7e0:	af00      	add	r7, sp, #0
 800f7e2:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f7e4:	6878      	ldr	r0, [r7, #4]
 800f7e6:	f000 f829 	bl	800f83c <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].alignment;
 800f7ea:	4b07      	ldr	r3, [pc, #28]	; (800f808 <_ZNK8touchgfx9TypedText12getAlignmentEv+0x2c>)
 800f7ec:	681a      	ldr	r2, [r3, #0]
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	881b      	ldrh	r3, [r3, #0]
 800f7f2:	005b      	lsls	r3, r3, #1
 800f7f4:	4413      	add	r3, r2
 800f7f6:	785b      	ldrb	r3, [r3, #1]
 800f7f8:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800f7fc:	b2db      	uxtb	r3, r3
    }
 800f7fe:	4618      	mov	r0, r3
 800f800:	3708      	adds	r7, #8
 800f802:	46bd      	mov	sp, r7
 800f804:	bd80      	pop	{r7, pc}
 800f806:	bf00      	nop
 800f808:	20009d94 	.word	0x20009d94

0800f80c <_ZNK8touchgfx9TypedText16getTextDirectionEv>:
     *
     *        Gets the text direction associated with this TypedText.
     *
     * @return The alignment.
     */
    TextDirection getTextDirection() const
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b082      	sub	sp, #8
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
    {
        assertValid();
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	f000 f811 	bl	800f83c <_ZNK8touchgfx9TypedText11assertValidEv>
        return typedTexts[typedTextId].direction;
 800f81a:	4b07      	ldr	r3, [pc, #28]	; (800f838 <_ZNK8touchgfx9TypedText16getTextDirectionEv+0x2c>)
 800f81c:	681a      	ldr	r2, [r3, #0]
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	881b      	ldrh	r3, [r3, #0]
 800f822:	005b      	lsls	r3, r3, #1
 800f824:	4413      	add	r3, r2
 800f826:	785b      	ldrb	r3, [r3, #1]
 800f828:	f3c3 0381 	ubfx	r3, r3, #2, #2
 800f82c:	b2db      	uxtb	r3, r3
    }
 800f82e:	4618      	mov	r0, r3
 800f830:	3708      	adds	r7, #8
 800f832:	46bd      	mov	sp, r7
 800f834:	bd80      	pop	{r7, pc}
 800f836:	bf00      	nop
 800f838:	20009d94 	.word	0x20009d94

0800f83c <_ZNK8touchgfx9TypedText11assertValidEv>:
    {
        texts = t;
    }

private:
    void assertValid() const
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b082      	sub	sp, #8
 800f840:	af00      	add	r7, sp, #0
 800f842:	6078      	str	r0, [r7, #4]
    {
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 800f844:	4b0c      	ldr	r3, [pc, #48]	; (800f878 <_ZNK8touchgfx9TypedText11assertValidEv+0x3c>)
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d105      	bne.n	800f858 <_ZNK8touchgfx9TypedText11assertValidEv+0x1c>
 800f84c:	4b0b      	ldr	r3, [pc, #44]	; (800f87c <_ZNK8touchgfx9TypedText11assertValidEv+0x40>)
 800f84e:	4a0c      	ldr	r2, [pc, #48]	; (800f880 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f850:	21cf      	movs	r1, #207	; 0xcf
 800f852:	480c      	ldr	r0, [pc, #48]	; (800f884 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f854:	f012 fe02 	bl	802245c <__assert_func>
        assert(typedTextId < numberOfTypedTexts && "typedTextId larger than numberOfTypedTexts.");
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	881a      	ldrh	r2, [r3, #0]
 800f85c:	4b0a      	ldr	r3, [pc, #40]	; (800f888 <_ZNK8touchgfx9TypedText11assertValidEv+0x4c>)
 800f85e:	881b      	ldrh	r3, [r3, #0]
 800f860:	429a      	cmp	r2, r3
 800f862:	d305      	bcc.n	800f870 <_ZNK8touchgfx9TypedText11assertValidEv+0x34>
 800f864:	4b09      	ldr	r3, [pc, #36]	; (800f88c <_ZNK8touchgfx9TypedText11assertValidEv+0x50>)
 800f866:	4a06      	ldr	r2, [pc, #24]	; (800f880 <_ZNK8touchgfx9TypedText11assertValidEv+0x44>)
 800f868:	21d0      	movs	r1, #208	; 0xd0
 800f86a:	4806      	ldr	r0, [pc, #24]	; (800f884 <_ZNK8touchgfx9TypedText11assertValidEv+0x48>)
 800f86c:	f012 fdf6 	bl	802245c <__assert_func>
    }
 800f870:	bf00      	nop
 800f872:	3708      	adds	r7, #8
 800f874:	46bd      	mov	sp, r7
 800f876:	bd80      	pop	{r7, pc}
 800f878:	20009d94 	.word	0x20009d94
 800f87c:	08023774 	.word	0x08023774
 800f880:	080241f8 	.word	0x080241f8
 800f884:	080237b8 	.word	0x080237b8
 800f888:	20009d98 	.word	0x20009d98
 800f88c:	08023828 	.word	0x08023828

0800f890 <_ZN8touchgfx8TextAreaC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Create an empty TextArea. Default color is black.
     */
    TextArea() : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE)
 800f890:	b580      	push	{r7, lr}
 800f892:	b082      	sub	sp, #8
 800f894:	af00      	add	r7, sp, #0
 800f896:	6078      	str	r0, [r7, #4]
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	4618      	mov	r0, r3
 800f89c:	f7ff fc70 	bl	800f180 <_ZN8touchgfx6WidgetC1Ev>
 800f8a0:	4a13      	ldr	r2, [pc, #76]	; (800f8f0 <_ZN8touchgfx8TextAreaC1Ev+0x60>)
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	601a      	str	r2, [r3, #0]
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	3326      	adds	r3, #38	; 0x26
 800f8aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f7ff ff3e 	bl	800f730 <_ZN8touchgfx9TypedTextC1Et>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	3328      	adds	r3, #40	; 0x28
 800f8b8:	2100      	movs	r1, #0
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	f7ff fbac 	bl	800f018 <_ZN8touchgfx9colortypeC1Em>
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	2200      	movs	r2, #0
 800f8c4:	859a      	strh	r2, [r3, #44]	; 0x2c
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	22ff      	movs	r2, #255	; 0xff
 800f8ca:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	2200      	movs	r2, #0
 800f8d2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	2200      	movs	r2, #0
 800f8da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    { }
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	3708      	adds	r7, #8
 800f8ec:	46bd      	mov	sp, r7
 800f8ee:	bd80      	pop	{r7, pc}
 800f8f0:	080245bc 	.word	0x080245bc

0800f8f4 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
     *
     *        Gets solid rectangle.
     *
     * @return the largest solid rectangle for this widget. For a TextArea, this is an empty area.
     */
    virtual Rect getSolidRect() const
 800f8f4:	b580      	push	{r7, lr}
 800f8f6:	b084      	sub	sp, #16
 800f8f8:	af02      	add	r7, sp, #8
 800f8fa:	6078      	str	r0, [r7, #4]
 800f8fc:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, 0, 0);
 800f8fe:	2300      	movs	r3, #0
 800f900:	9300      	str	r3, [sp, #0]
 800f902:	2300      	movs	r3, #0
 800f904:	2200      	movs	r2, #0
 800f906:	2100      	movs	r1, #0
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f7fe fd39 	bl	800e380 <_ZN8touchgfx4RectC1Essss>
    }
 800f90e:	6878      	ldr	r0, [r7, #4]
 800f910:	3708      	adds	r7, #8
 800f912:	46bd      	mov	sp, r7
 800f914:	bd80      	pop	{r7, pc}

0800f916 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>:
     *
     *        Sets the color of the text.
     *
     * @param color The color to use.
     */
    inline void setColor(colortype color)
 800f916:	b480      	push	{r7}
 800f918:	b083      	sub	sp, #12
 800f91a:	af00      	add	r7, sp, #0
 800f91c:	6078      	str	r0, [r7, #4]
 800f91e:	6039      	str	r1, [r7, #0]
    {
        this->color = color;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	683a      	ldr	r2, [r7, #0]
 800f924:	629a      	str	r2, [r3, #40]	; 0x28
    }
 800f926:	bf00      	nop
 800f928:	370c      	adds	r7, #12
 800f92a:	46bd      	mov	sp, r7
 800f92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f930:	4770      	bx	lr

0800f932 <_ZN8touchgfx8TextArea12setBaselineYEs>:
     *        changes you have to set the baseline again. Note that setTypedText must be called
     *        prior to setting the baseline.
     *
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setBaselineY(int16_t baselineY)
 800f932:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f934:	b085      	sub	sp, #20
 800f936:	af00      	add	r7, sp, #0
 800f938:	6078      	str	r0, [r7, #4]
 800f93a:	460b      	mov	r3, r1
 800f93c:	807b      	strh	r3, [r7, #2]
    {
        setY(baselineY - getTypedText().getFont()->getFontHeight());
 800f93e:	687e      	ldr	r6, [r7, #4]
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	3330      	adds	r3, #48	; 0x30
 800f946:	681c      	ldr	r4, [r3, #0]
 800f948:	887d      	ldrh	r5, [r7, #2]
 800f94a:	6878      	ldr	r0, [r7, #4]
 800f94c:	f000 f836 	bl	800f9bc <_ZNK8touchgfx8TextArea12getTypedTextEv>
 800f950:	4603      	mov	r3, r0
 800f952:	81bb      	strh	r3, [r7, #12]
 800f954:	f107 030c 	add.w	r3, r7, #12
 800f958:	4618      	mov	r0, r3
 800f95a:	f7ff ff23 	bl	800f7a4 <_ZNK8touchgfx9TypedText7getFontEv>
 800f95e:	4602      	mov	r2, r0
 800f960:	6813      	ldr	r3, [r2, #0]
 800f962:	332c      	adds	r3, #44	; 0x2c
 800f964:	681b      	ldr	r3, [r3, #0]
 800f966:	4610      	mov	r0, r2
 800f968:	4798      	blx	r3
 800f96a:	4603      	mov	r3, r0
 800f96c:	1aeb      	subs	r3, r5, r3
 800f96e:	b29b      	uxth	r3, r3
 800f970:	b21b      	sxth	r3, r3
 800f972:	4619      	mov	r1, r3
 800f974:	4630      	mov	r0, r6
 800f976:	47a0      	blx	r4
    }
 800f978:	bf00      	nop
 800f97a:	3714      	adds	r7, #20
 800f97c:	46bd      	mov	sp, r7
 800f97e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f980 <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *        coordinate of the TextArea.
     *
     * @param x         The x coordinate of the TextArea.
     * @param baselineY The y coordinate of the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800f980:	b580      	push	{r7, lr}
 800f982:	b082      	sub	sp, #8
 800f984:	af00      	add	r7, sp, #0
 800f986:	6078      	str	r0, [r7, #4]
 800f988:	460b      	mov	r3, r1
 800f98a:	807b      	strh	r3, [r7, #2]
 800f98c:	4613      	mov	r3, r2
 800f98e:	803b      	strh	r3, [r7, #0]
    {
        setX(x);
 800f990:	687a      	ldr	r2, [r7, #4]
 800f992:	687b      	ldr	r3, [r7, #4]
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	332c      	adds	r3, #44	; 0x2c
 800f998:	681b      	ldr	r3, [r3, #0]
 800f99a:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 800f99e:	4610      	mov	r0, r2
 800f9a0:	4798      	blx	r3
        setBaselineY(baselineY);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	3364      	adds	r3, #100	; 0x64
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	f9b7 2000 	ldrsh.w	r2, [r7]
 800f9ae:	4611      	mov	r1, r2
 800f9b0:	6878      	ldr	r0, [r7, #4]
 800f9b2:	4798      	blx	r3
    }
 800f9b4:	bf00      	nop
 800f9b6:	3708      	adds	r7, #8
 800f9b8:	46bd      	mov	sp, r7
 800f9ba:	bd80      	pop	{r7, pc}

0800f9bc <_ZNK8touchgfx8TextArea12getTypedTextEv>:
     *
     *        Gets the TypedText of the text area.
     *
     * @return The currently used TypedText.
     */
    TypedText getTypedText() const
 800f9bc:	b480      	push	{r7}
 800f9be:	b083      	sub	sp, #12
 800f9c0:	af00      	add	r7, sp, #0
 800f9c2:	6078      	str	r0, [r7, #4]
    {
        return typedText;
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
    }
 800f9c8:	4618      	mov	r0, r3
 800f9ca:	370c      	adds	r7, #12
 800f9cc:	46bd      	mov	sp, r7
 800f9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9d2:	4770      	bx	lr

0800f9d4 <_ZNK8touchgfx8TextArea7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_TEXTAREA.
     */
    virtual uint16_t getType() const
 800f9d4:	b480      	push	{r7}
 800f9d6:	b083      	sub	sp, #12
 800f9d8:	af00      	add	r7, sp, #0
 800f9da:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_TEXTAREA;
 800f9dc:	230d      	movs	r3, #13
    }
 800f9de:	4618      	mov	r0, r3
 800f9e0:	370c      	adds	r7, #12
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e8:	4770      	bx	lr
	...

0800f9ec <_ZN8touchgfx8TextAreaD1Ev>:
class TextArea : public Widget
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b082      	sub	sp, #8
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
 800f9f4:	4a05      	ldr	r2, [pc, #20]	; (800fa0c <_ZN8touchgfx8TextAreaD1Ev+0x20>)
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	601a      	str	r2, [r3, #0]
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	4618      	mov	r0, r3
 800f9fe:	f7ff fbd1 	bl	800f1a4 <_ZN8touchgfx6WidgetD1Ev>
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	4618      	mov	r0, r3
 800fa06:	3708      	adds	r7, #8
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd80      	pop	{r7, pc}
 800fa0c:	080245bc 	.word	0x080245bc

0800fa10 <_ZN8touchgfx8TextAreaD0Ev>:
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b082      	sub	sp, #8
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	6078      	str	r0, [r7, #4]
 800fa18:	6878      	ldr	r0, [r7, #4]
 800fa1a:	f7ff ffe7 	bl	800f9ec <_ZN8touchgfx8TextAreaD1Ev>
 800fa1e:	2134      	movs	r1, #52	; 0x34
 800fa20:	6878      	ldr	r0, [r7, #4]
 800fa22:	f012 fcfe 	bl	8022422 <_ZdlPvj>
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	4618      	mov	r0, r3
 800fa2a:	3708      	adds	r7, #8
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd80      	pop	{r7, pc}

0800fa30 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithWildcardBase() : TextArea() {  }
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b082      	sub	sp, #8
 800fa34:	af00      	add	r7, sp, #0
 800fa36:	6078      	str	r0, [r7, #4]
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	f7ff ff28 	bl	800f890 <_ZN8touchgfx8TextAreaC1Ev>
 800fa40:	4a03      	ldr	r2, [pc, #12]	; (800fa50 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev+0x20>)
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	601a      	str	r2, [r3, #0]
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	4618      	mov	r0, r3
 800fa4a:	3708      	adds	r7, #8
 800fa4c:	46bd      	mov	sp, r7
 800fa4e:	bd80      	pop	{r7, pc}
 800fa50:	08024184 	.word	0x08024184

0800fa54 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>:
class TextAreaWithWildcardBase : public TextArea
 800fa54:	b580      	push	{r7, lr}
 800fa56:	b082      	sub	sp, #8
 800fa58:	af00      	add	r7, sp, #0
 800fa5a:	6078      	str	r0, [r7, #4]
 800fa5c:	4a05      	ldr	r2, [pc, #20]	; (800fa74 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev+0x20>)
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	601a      	str	r2, [r3, #0]
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7ff ffc1 	bl	800f9ec <_ZN8touchgfx8TextAreaD1Ev>
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	3708      	adds	r7, #8
 800fa70:	46bd      	mov	sp, r7
 800fa72:	bd80      	pop	{r7, pc}
 800fa74:	08024184 	.word	0x08024184

0800fa78 <_ZN8touchgfx24TextAreaWithWildcardBaseD0Ev>:
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b082      	sub	sp, #8
 800fa7c:	af00      	add	r7, sp, #0
 800fa7e:	6078      	str	r0, [r7, #4]
 800fa80:	6878      	ldr	r0, [r7, #4]
 800fa82:	f7ff ffe7 	bl	800fa54 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800fa86:	2134      	movs	r1, #52	; 0x34
 800fa88:	6878      	ldr	r0, [r7, #4]
 800fa8a:	f012 fcca 	bl	8022422 <_ZdlPvj>
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	4618      	mov	r0, r3
 800fa92:	3708      	adds	r7, #8
 800fa94:	46bd      	mov	sp, r7
 800fa96:	bd80      	pop	{r7, pc}

0800fa98 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>:
     *
     *        Create an empty text area.
     *
     * @note No text can be displayed until a font is set. Default color is black.
     */
    TextAreaWithOneWildcard() : TextAreaWithWildcardBase(), wildcard(0)
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b082      	sub	sp, #8
 800fa9c:	af00      	add	r7, sp, #0
 800fa9e:	6078      	str	r0, [r7, #4]
 800faa0:	687b      	ldr	r3, [r7, #4]
 800faa2:	4618      	mov	r0, r3
 800faa4:	f7ff ffc4 	bl	800fa30 <_ZN8touchgfx24TextAreaWithWildcardBaseC1Ev>
 800faa8:	4a05      	ldr	r2, [pc, #20]	; (800fac0 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev+0x28>)
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	601a      	str	r2, [r3, #0]
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	2200      	movs	r2, #0
 800fab2:	635a      	str	r2, [r3, #52]	; 0x34
    {
    }
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	4618      	mov	r0, r3
 800fab8:	3708      	adds	r7, #8
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}
 800fabe:	bf00      	nop
 800fac0:	08024108 	.word	0x08024108

0800fac4 <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv>:
     *
     *        Gets text height.
     *
     * @return The text height.
     */
    virtual int16_t getTextHeight()
 800fac4:	b590      	push	{r4, r7, lr}
 800fac6:	b083      	sub	sp, #12
 800fac8:	af00      	add	r7, sp, #0
 800faca:	6078      	str	r0, [r7, #4]
    {
        return typedText.hasValidId() ? calculateTextHeight(typedText.getText(), wildcard) : 0;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	3326      	adds	r3, #38	; 0x26
 800fad0:	4618      	mov	r0, r3
 800fad2:	f7ff fe3d 	bl	800f750 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 800fad6:	4603      	mov	r3, r0
 800fad8:	2b00      	cmp	r3, #0
 800fada:	d00e      	beq.n	800fafa <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x36>
 800fadc:	687c      	ldr	r4, [r7, #4]
 800fade:	687b      	ldr	r3, [r7, #4]
 800fae0:	3326      	adds	r3, #38	; 0x26
 800fae2:	4618      	mov	r0, r3
 800fae4:	f7ff fe48 	bl	800f778 <_ZNK8touchgfx9TypedText7getTextEv>
 800fae8:	4601      	mov	r1, r0
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800faee:	461a      	mov	r2, r3
 800faf0:	4620      	mov	r0, r4
 800faf2:	f001 f993 	bl	8010e1c <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz>
 800faf6:	4603      	mov	r3, r0
 800faf8:	e000      	b.n	800fafc <_ZN8touchgfx23TextAreaWithOneWildcard13getTextHeightEv+0x38>
 800fafa:	2300      	movs	r3, #0
    }
 800fafc:	4618      	mov	r0, r3
 800fafe:	370c      	adds	r7, #12
 800fb00:	46bd      	mov	sp, r7
 800fb02:	bd90      	pop	{r4, r7, pc}

0800fb04 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE>:
     *        Draws TextArea and its text if a Font is set and the TypedText associated with
     *        the TextArea is valid.
     *
     * @param area The invalidated area.
     */
    virtual void draw(const Rect& area) const
 800fb04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb06:	b093      	sub	sp, #76	; 0x4c
 800fb08:	af06      	add	r7, sp, #24
 800fb0a:	60f8      	str	r0, [r7, #12]
 800fb0c:	60b9      	str	r1, [r7, #8]
    {
        if (typedText.hasValidId())
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	3326      	adds	r3, #38	; 0x26
 800fb12:	4618      	mov	r0, r3
 800fb14:	f7ff fe1c 	bl	800f750 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 800fb18:	4603      	mov	r3, r0
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d052      	beq.n	800fbc4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xc0>
        {
            const Font* fontToDraw = typedText.getFont();
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	3326      	adds	r3, #38	; 0x26
 800fb22:	4618      	mov	r0, r3
 800fb24:	f7ff fe3e 	bl	800f7a4 <_ZNK8touchgfx9TypedText7getFontEv>
 800fb28:	62f8      	str	r0, [r7, #44]	; 0x2c
            if (fontToDraw != 0)
 800fb2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d049      	beq.n	800fbc4 <_ZNK8touchgfx23TextAreaWithOneWildcard4drawERKNS_4RectE+0xc0>
            {
                LCD::StringVisuals visuals(fontToDraw, color, alpha, typedText.getAlignment(), linespace, rotation, typedText.getTextDirection(), indentation, wideTextAction);
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	f893 602e 	ldrb.w	r6, [r3, #46]	; 0x2e
 800fb36:	68fb      	ldr	r3, [r7, #12]
 800fb38:	3326      	adds	r3, #38	; 0x26
 800fb3a:	4618      	mov	r0, r3
 800fb3c:	f7ff fe4e 	bl	800f7dc <_ZNK8touchgfx9TypedText12getAlignmentEv>
 800fb40:	4603      	mov	r3, r0
 800fb42:	607b      	str	r3, [r7, #4]
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
 800fb48:	68fb      	ldr	r3, [r7, #12]
 800fb4a:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	3326      	adds	r3, #38	; 0x26
 800fb52:	4618      	mov	r0, r3
 800fb54:	f7ff fe5a 	bl	800f80c <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	603b      	str	r3, [r7, #0]
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fb62:	68fa      	ldr	r2, [r7, #12]
 800fb64:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 800fb68:	68fa      	ldr	r2, [r7, #12]
 800fb6a:	f107 0010 	add.w	r0, r7, #16
 800fb6e:	9105      	str	r1, [sp, #20]
 800fb70:	9304      	str	r3, [sp, #16]
 800fb72:	6839      	ldr	r1, [r7, #0]
 800fb74:	9103      	str	r1, [sp, #12]
 800fb76:	9502      	str	r5, [sp, #8]
 800fb78:	9401      	str	r4, [sp, #4]
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	9300      	str	r3, [sp, #0]
 800fb7e:	4633      	mov	r3, r6
 800fb80:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800fb82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fb84:	f7ff fd90 	bl	800f6a8 <_ZN8touchgfx3LCD13StringVisualsC1EPKNS_4FontENS_9colortypeEhhtNS_12TextRotationEhhNS_14WideTextActionE>
                HAL::lcd().drawString(getAbsoluteRect(), area, visuals, typedText.getText(), wildcard);
 800fb88:	f7ff fd82 	bl	800f690 <_ZN8touchgfx3HAL3lcdEv>
 800fb8c:	4604      	mov	r4, r0
 800fb8e:	68fa      	ldr	r2, [r7, #12]
 800fb90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb94:	4611      	mov	r1, r2
 800fb96:	4618      	mov	r0, r3
 800fb98:	f00f fa77 	bl	801f08a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	3326      	adds	r3, #38	; 0x26
 800fba0:	4618      	mov	r0, r3
 800fba2:	f7ff fde9 	bl	800f778 <_ZNK8touchgfx9TypedText7getTextEv>
 800fba6:	4602      	mov	r2, r0
 800fba8:	68fb      	ldr	r3, [r7, #12]
 800fbaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbac:	9302      	str	r3, [sp, #8]
 800fbae:	9201      	str	r2, [sp, #4]
 800fbb0:	f107 0310 	add.w	r3, r7, #16
 800fbb4:	9300      	str	r3, [sp, #0]
 800fbb6:	68bb      	ldr	r3, [r7, #8]
 800fbb8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800fbbc:	ca06      	ldmia	r2, {r1, r2}
 800fbbe:	4620      	mov	r0, r4
 800fbc0:	f00e f850 	bl	801dc64 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz>
            }
        }
    }
 800fbc4:	bf00      	nop
 800fbc6:	3734      	adds	r7, #52	; 0x34
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fbcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>:
     *
     *        Sets the wildcard in the text.Must be a zero-terminated UnicodeChar array.
     *
     * @param value A pointer to the UnicodeChar to set the wildcard to.
     */
    void setWildcard(const Unicode::UnicodeChar* value)
 800fbcc:	b480      	push	{r7}
 800fbce:	b083      	sub	sp, #12
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	6078      	str	r0, [r7, #4]
 800fbd4:	6039      	str	r1, [r7, #0]
    {
        wildcard = value;
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	683a      	ldr	r2, [r7, #0]
 800fbda:	635a      	str	r2, [r3, #52]	; 0x34
    }
 800fbdc:	bf00      	nop
 800fbde:	370c      	adds	r7, #12
 800fbe0:	46bd      	mov	sp, r7
 800fbe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbe6:	4770      	bx	lr

0800fbe8 <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv>:
     *         Gets the width in pixels of the current associated text in the current selected
     *         language. In case of multi-lined text the width of the widest line is returned.
     *
     * @return The width in pixels of the current text.
     */
    virtual uint16_t getTextWidth() const
 800fbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbea:	b083      	sub	sp, #12
 800fbec:	af00      	add	r7, sp, #0
 800fbee:	6078      	str	r0, [r7, #4]
    {
        return typedText.hasValidId() ? typedText.getFont()->getStringWidth(typedText.getTextDirection(), typedText.getText(), wildcard) : 0;
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	3326      	adds	r3, #38	; 0x26
 800fbf4:	4618      	mov	r0, r3
 800fbf6:	f7ff fdab 	bl	800f750 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 800fbfa:	4603      	mov	r3, r0
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d01c      	beq.n	800fc3a <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x52>
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	3326      	adds	r3, #38	; 0x26
 800fc04:	4618      	mov	r0, r3
 800fc06:	f7ff fdcd 	bl	800f7a4 <_ZNK8touchgfx9TypedText7getFontEv>
 800fc0a:	4605      	mov	r5, r0
 800fc0c:	682b      	ldr	r3, [r5, #0]
 800fc0e:	331c      	adds	r3, #28
 800fc10:	681c      	ldr	r4, [r3, #0]
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	3326      	adds	r3, #38	; 0x26
 800fc16:	4618      	mov	r0, r3
 800fc18:	f7ff fdf8 	bl	800f80c <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	461e      	mov	r6, r3
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	3326      	adds	r3, #38	; 0x26
 800fc24:	4618      	mov	r0, r3
 800fc26:	f7ff fda7 	bl	800f778 <_ZNK8touchgfx9TypedText7getTextEv>
 800fc2a:	4602      	mov	r2, r0
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fc30:	4631      	mov	r1, r6
 800fc32:	4628      	mov	r0, r5
 800fc34:	47a0      	blx	r4
 800fc36:	4603      	mov	r3, r0
 800fc38:	e000      	b.n	800fc3c <_ZNK8touchgfx23TextAreaWithOneWildcard12getTextWidthEv+0x54>
 800fc3a:	2300      	movs	r3, #0
    }
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	370c      	adds	r7, #12
 800fc40:	46bd      	mov	sp, r7
 800fc42:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800fc44 <_ZNK8touchgfx23TextAreaWithOneWildcard7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_TEXTAREAWITHONEWILDCARD.
     */
    virtual uint16_t getType() const
 800fc44:	b480      	push	{r7}
 800fc46:	b083      	sub	sp, #12
 800fc48:	af00      	add	r7, sp, #0
 800fc4a:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_TEXTAREAWITHONEWILDCARD;
 800fc4c:	230e      	movs	r3, #14
    }
 800fc4e:	4618      	mov	r0, r3
 800fc50:	370c      	adds	r7, #12
 800fc52:	46bd      	mov	sp, r7
 800fc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc58:	4770      	bx	lr
	...

0800fc5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 800fc5c:	b580      	push	{r7, lr}
 800fc5e:	b082      	sub	sp, #8
 800fc60:	af00      	add	r7, sp, #0
 800fc62:	6078      	str	r0, [r7, #4]
 800fc64:	4a05      	ldr	r2, [pc, #20]	; (800fc7c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev+0x20>)
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	601a      	str	r2, [r3, #0]
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f7ff fef1 	bl	800fa54 <_ZN8touchgfx24TextAreaWithWildcardBaseD1Ev>
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	4618      	mov	r0, r3
 800fc76:	3708      	adds	r7, #8
 800fc78:	46bd      	mov	sp, r7
 800fc7a:	bd80      	pop	{r7, pc}
 800fc7c:	08024108 	.word	0x08024108

0800fc80 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b082      	sub	sp, #8
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
 800fc88:	6878      	ldr	r0, [r7, #4]
 800fc8a:	f7ff ffe7 	bl	800fc5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 800fc8e:	2138      	movs	r1, #56	; 0x38
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f012 fbc6 	bl	8022422 <_ZdlPvj>
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3708      	adds	r7, #8
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}

0800fca0 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
     *
     *        Function to determine whether this AbstractButton is currently pressed.
     *
     * @return true if button is pressed, false otherwise.
     */
    virtual bool getPressedState() const
 800fca0:	b480      	push	{r7}
 800fca2:	b083      	sub	sp, #12
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 800fcae:	4618      	mov	r0, r3
 800fcb0:	370c      	adds	r7, #12
 800fcb2:	46bd      	mov	sp, r7
 800fcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb8:	4770      	bx	lr

0800fcba <_ZNK8touchgfx14AbstractButton7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_ABSTRACTBUTTON.
     */
    virtual uint16_t getType() const
 800fcba:	b480      	push	{r7}
 800fcbc:	b083      	sub	sp, #12
 800fcbe:	af00      	add	r7, sp, #0
 800fcc0:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_ABSTRACTBUTTON;
 800fcc2:	2302      	movs	r3, #2
    }
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	370c      	adds	r7, #12
 800fcc8:	46bd      	mov	sp, r7
 800fcca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcce:	4770      	bx	lr

0800fcd0 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
#include <touchgfx/widgets/AbstractButton.hpp>

namespace touchgfx
{
void AbstractButton::handleClickEvent(const ClickEvent& event)
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b084      	sub	sp, #16
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
 800fcd8:	6039      	str	r1, [r7, #0]
    bool wasPressed = pressed;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fce0:	73fb      	strb	r3, [r7, #15]
    pressed = (event.getType() == ClickEvent::PRESSED);
 800fce2:	6838      	ldr	r0, [r7, #0]
 800fce4:	f7ff fb84 	bl	800f3f0 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800fce8:	4603      	mov	r3, r0
 800fcea:	2b00      	cmp	r3, #0
 800fcec:	bf0c      	ite	eq
 800fcee:	2301      	moveq	r3, #1
 800fcf0:	2300      	movne	r3, #0
 800fcf2:	b2da      	uxtb	r2, r3
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if ((pressed && !wasPressed) || (!pressed && wasPressed))
 800fcfa:	687b      	ldr	r3, [r7, #4]
 800fcfc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d005      	beq.n	800fd10 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x40>
 800fd04:	7bfb      	ldrb	r3, [r7, #15]
 800fd06:	f083 0301 	eor.w	r3, r3, #1
 800fd0a:	b2db      	uxtb	r3, r3
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d10a      	bne.n	800fd26 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x56>
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fd16:	f083 0301 	eor.w	r3, r3, #1
 800fd1a:	b2db      	uxtb	r3, r3
 800fd1c:	2b00      	cmp	r3, #0
 800fd1e:	d009      	beq.n	800fd34 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x64>
 800fd20:	7bfb      	ldrb	r3, [r7, #15]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d006      	beq.n	800fd34 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x64>
    {
        // Pressed state changed, so invalidate
        invalidate();
 800fd26:	687a      	ldr	r2, [r7, #4]
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	681b      	ldr	r3, [r3, #0]
 800fd2c:	3314      	adds	r3, #20
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	4610      	mov	r0, r2
 800fd32:	4798      	blx	r3
    }
    if (wasPressed && (event.getType() == ClickEvent::RELEASED) && action)
 800fd34:	7bfb      	ldrb	r3, [r7, #15]
 800fd36:	2b00      	cmp	r3, #0
 800fd38:	d00b      	beq.n	800fd52 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x82>
 800fd3a:	6838      	ldr	r0, [r7, #0]
 800fd3c:	f7ff fb58 	bl	800f3f0 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 800fd40:	4603      	mov	r3, r0
 800fd42:	2b01      	cmp	r3, #1
 800fd44:	d105      	bne.n	800fd52 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x82>
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d001      	beq.n	800fd52 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x82>
 800fd4e:	2301      	movs	r3, #1
 800fd50:	e000      	b.n	800fd54 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x84>
 800fd52:	2300      	movs	r3, #0
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d015      	beq.n	800fd84 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0xb4>
    {
        // This is a click. Fire callback.
        if (action->isValid())
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	330c      	adds	r3, #12
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	4610      	mov	r0, r2
 800fd68:	4798      	blx	r3
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	d009      	beq.n	800fd84 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0xb4>
        {
            action->execute(*this);
 800fd70:	687b      	ldr	r3, [r7, #4]
 800fd72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	3308      	adds	r3, #8
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	6879      	ldr	r1, [r7, #4]
 800fd80:	4610      	mov	r0, r2
 800fd82:	4798      	blx	r3
        }
    }
}
 800fd84:	bf00      	nop
 800fd86:	3710      	adds	r7, #16
 800fd88:	46bd      	mov	sp, r7
 800fd8a:	bd80      	pop	{r7, pc}

0800fd8c <_ZNK8touchgfx3Box7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_BOX.
     */
    virtual uint16_t getType() const
 800fd8c:	b480      	push	{r7}
 800fd8e:	b083      	sub	sp, #12
 800fd90:	af00      	add	r7, sp, #0
 800fd92:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_BOX;
 800fd94:	2304      	movs	r3, #4
    }
 800fd96:	4618      	mov	r0, r3
 800fd98:	370c      	adds	r7, #12
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fda0:	4770      	bx	lr

0800fda2 <_ZNK8touchgfx3Box12getSolidRectEv>:
#include <touchgfx/widgets/Box.hpp>

namespace touchgfx
{
Rect Box::getSolidRect() const
{
 800fda2:	b580      	push	{r7, lr}
 800fda4:	b084      	sub	sp, #16
 800fda6:	af02      	add	r7, sp, #8
 800fda8:	6078      	str	r0, [r7, #4]
 800fdaa:	6039      	str	r1, [r7, #0]
    Rect solidRect(0, 0, 0, 0);
 800fdac:	2300      	movs	r3, #0
 800fdae:	9300      	str	r3, [sp, #0]
 800fdb0:	2300      	movs	r3, #0
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	2100      	movs	r1, #0
 800fdb6:	6878      	ldr	r0, [r7, #4]
 800fdb8:	f7fe fae2 	bl	800e380 <_ZN8touchgfx4RectC1Essss>
    if (reportAsSolid || alpha == 255)
 800fdbc:	683b      	ldr	r3, [r7, #0]
 800fdbe:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800fdc2:	2b00      	cmp	r3, #0
 800fdc4:	d104      	bne.n	800fdd0 <_ZNK8touchgfx3Box12getSolidRectEv+0x2e>
 800fdc6:	683b      	ldr	r3, [r7, #0]
 800fdc8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800fdcc:	2bff      	cmp	r3, #255	; 0xff
 800fdce:	d109      	bne.n	800fde4 <_ZNK8touchgfx3Box12getSolidRectEv+0x42>
    {
        solidRect.width = rect.width;
 800fdd0:	683b      	ldr	r3, [r7, #0]
 800fdd2:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	809a      	strh	r2, [r3, #4]
        solidRect.height = rect.height;
 800fdda:	683b      	ldr	r3, [r7, #0]
 800fddc:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800fde0:	687b      	ldr	r3, [r7, #4]
 800fde2:	80da      	strh	r2, [r3, #6]
    }
    return solidRect;
 800fde4:	bf00      	nop
}
 800fde6:	6878      	ldr	r0, [r7, #4]
 800fde8:	3708      	adds	r7, #8
 800fdea:	46bd      	mov	sp, r7
 800fdec:	bd80      	pop	{r7, pc}

0800fdee <_ZNK8touchgfx3Box4drawERKNS_4RectE>:

void Box::draw(const Rect& area) const
{
 800fdee:	b590      	push	{r4, r7, lr}
 800fdf0:	b085      	sub	sp, #20
 800fdf2:	af00      	add	r7, sp, #0
 800fdf4:	6078      	str	r0, [r7, #4]
 800fdf6:	6039      	str	r1, [r7, #0]
    Rect dirty = area;
 800fdf8:	683a      	ldr	r2, [r7, #0]
 800fdfa:	f107 0308 	add.w	r3, r7, #8
 800fdfe:	6810      	ldr	r0, [r2, #0]
 800fe00:	6851      	ldr	r1, [r2, #4]
 800fe02:	c303      	stmia	r3!, {r0, r1}
    translateRectToAbsolute(dirty);
 800fe04:	687a      	ldr	r2, [r7, #4]
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	3324      	adds	r3, #36	; 0x24
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	f107 0108 	add.w	r1, r7, #8
 800fe12:	4610      	mov	r0, r2
 800fe14:	4798      	blx	r3
    HAL::lcd().fillRect(dirty, color, alpha);
 800fe16:	f7ff fc3b 	bl	800f690 <_ZN8touchgfx3HAL3lcdEv>
 800fe1a:	6803      	ldr	r3, [r0, #0]
 800fe1c:	331c      	adds	r3, #28
 800fe1e:	681c      	ldr	r4, [r3, #0]
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800fe26:	687a      	ldr	r2, [r7, #4]
 800fe28:	f107 0108 	add.w	r1, r7, #8
 800fe2c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800fe2e:	47a0      	blx	r4
}
 800fe30:	bf00      	nop
 800fe32:	3714      	adds	r7, #20
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bd90      	pop	{r4, r7, pc}

0800fe38 <_ZN8touchgfx13BoxWithBorderD1Ev>:
    /**
     * @fn virtual BoxWithBorder::~BoxWithBorder()
     *
     * @brief Destructor.
     */
    virtual ~BoxWithBorder() {}
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b082      	sub	sp, #8
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
 800fe40:	4a05      	ldr	r2, [pc, #20]	; (800fe58 <_ZN8touchgfx13BoxWithBorderD1Ev+0x20>)
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	601a      	str	r2, [r3, #0]
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	4618      	mov	r0, r3
 800fe4a:	f7ff f9ab 	bl	800f1a4 <_ZN8touchgfx6WidgetD1Ev>
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	4618      	mov	r0, r3
 800fe52:	3708      	adds	r7, #8
 800fe54:	46bd      	mov	sp, r7
 800fe56:	bd80      	pop	{r7, pc}
 800fe58:	0802430c 	.word	0x0802430c

0800fe5c <_ZN8touchgfx13BoxWithBorderD0Ev>:
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b082      	sub	sp, #8
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
 800fe64:	6878      	ldr	r0, [r7, #4]
 800fe66:	f7ff ffe7 	bl	800fe38 <_ZN8touchgfx13BoxWithBorderD1Ev>
 800fe6a:	2134      	movs	r1, #52	; 0x34
 800fe6c:	6878      	ldr	r0, [r7, #4]
 800fe6e:	f012 fad8 	bl	8022422 <_ZdlPvj>
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	4618      	mov	r0, r3
 800fe76:	3708      	adds	r7, #8
 800fe78:	46bd      	mov	sp, r7
 800fe7a:	bd80      	pop	{r7, pc}

0800fe7c <_ZNK8touchgfx13BoxWithBorder7getTypeEv>:
     *
     * @brief Gets the type.
     *
     * @return The type.
     */
    virtual uint16_t getType() const
 800fe7c:	b480      	push	{r7}
 800fe7e:	b083      	sub	sp, #12
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_BOX;
 800fe84:	2304      	movs	r3, #4
    }
 800fe86:	4618      	mov	r0, r3
 800fe88:	370c      	adds	r7, #12
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe90:	4770      	bx	lr

0800fe92 <_ZNK8touchgfx13BoxWithBorder12getSolidRectEv>:
#include <touchgfx/widgets/BoxWithBorder.hpp>

namespace touchgfx
{
Rect BoxWithBorder::getSolidRect() const
{
 800fe92:	b580      	push	{r7, lr}
 800fe94:	b084      	sub	sp, #16
 800fe96:	af02      	add	r7, sp, #8
 800fe98:	6078      	str	r0, [r7, #4]
 800fe9a:	6039      	str	r1, [r7, #0]
    Rect solidRect(0, 0, 0, 0);
 800fe9c:	2300      	movs	r3, #0
 800fe9e:	9300      	str	r3, [sp, #0]
 800fea0:	2300      	movs	r3, #0
 800fea2:	2200      	movs	r2, #0
 800fea4:	2100      	movs	r1, #0
 800fea6:	6878      	ldr	r0, [r7, #4]
 800fea8:	f7fe fa6a 	bl	800e380 <_ZN8touchgfx4RectC1Essss>
    if (alpha == 255)
 800feac:	683b      	ldr	r3, [r7, #0]
 800feae:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800feb2:	2bff      	cmp	r3, #255	; 0xff
 800feb4:	d109      	bne.n	800feca <_ZNK8touchgfx13BoxWithBorder12getSolidRectEv+0x38>
    {
        solidRect.width = rect.width;
 800feb6:	683b      	ldr	r3, [r7, #0]
 800feb8:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 800febc:	687b      	ldr	r3, [r7, #4]
 800febe:	809a      	strh	r2, [r3, #4]
        solidRect.height = rect.height;
 800fec0:	683b      	ldr	r3, [r7, #0]
 800fec2:	f9b3 200a 	ldrsh.w	r2, [r3, #10]
 800fec6:	687b      	ldr	r3, [r7, #4]
 800fec8:	80da      	strh	r2, [r3, #6]
    }
    return solidRect;
 800feca:	bf00      	nop
}
 800fecc:	6878      	ldr	r0, [r7, #4]
 800fece:	3708      	adds	r7, #8
 800fed0:	46bd      	mov	sp, r7
 800fed2:	bd80      	pop	{r7, pc}

0800fed4 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:

void BoxWithBorder::draw(const Rect& area) const
{
 800fed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fed8:	b094      	sub	sp, #80	; 0x50
 800feda:	af02      	add	r7, sp, #8
 800fedc:	6078      	str	r0, [r7, #4]
 800fede:	6039      	str	r1, [r7, #0]
    Rect dirty = area & Rect(borderSize, borderSize, getWidth() - (2 * borderSize), getHeight() - (2 * borderSize));
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800fee6:	b21c      	sxth	r4, r3
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800feee:	b21d      	sxth	r5, r3
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	4618      	mov	r0, r3
 800fef4:	f7ff f845 	bl	800ef82 <_ZNK8touchgfx8Drawable8getWidthEv>
 800fef8:	4603      	mov	r3, r0
 800fefa:	b29a      	uxth	r2, r3
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ff02:	b29b      	uxth	r3, r3
 800ff04:	005b      	lsls	r3, r3, #1
 800ff06:	b29b      	uxth	r3, r3
 800ff08:	1ad3      	subs	r3, r2, r3
 800ff0a:	b29b      	uxth	r3, r3
 800ff0c:	b21e      	sxth	r6, r3
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	4618      	mov	r0, r3
 800ff12:	f7ff f843 	bl	800ef9c <_ZNK8touchgfx8Drawable9getHeightEv>
 800ff16:	4603      	mov	r3, r0
 800ff18:	b29a      	uxth	r2, r3
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ff20:	b29b      	uxth	r3, r3
 800ff22:	005b      	lsls	r3, r3, #1
 800ff24:	b29b      	uxth	r3, r3
 800ff26:	1ad3      	subs	r3, r2, r3
 800ff28:	b29b      	uxth	r3, r3
 800ff2a:	b21b      	sxth	r3, r3
 800ff2c:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800ff30:	9300      	str	r3, [sp, #0]
 800ff32:	4633      	mov	r3, r6
 800ff34:	462a      	mov	r2, r5
 800ff36:	4621      	mov	r1, r4
 800ff38:	f7fe fa22 	bl	800e380 <_ZN8touchgfx4RectC1Essss>
 800ff3c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800ff40:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800ff44:	6839      	ldr	r1, [r7, #0]
 800ff46:	4618      	mov	r0, r3
 800ff48:	f7fe fac5 	bl	800e4d6 <_ZNK8touchgfx4RectanERKS0_>
    translateRectToAbsolute(dirty);
 800ff4c:	687a      	ldr	r2, [r7, #4]
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	681b      	ldr	r3, [r3, #0]
 800ff52:	3324      	adds	r3, #36	; 0x24
 800ff54:	681b      	ldr	r3, [r3, #0]
 800ff56:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800ff5a:	4610      	mov	r0, r2
 800ff5c:	4798      	blx	r3
    HAL::lcd().fillRect(dirty, color, alpha);
 800ff5e:	f7ff fb97 	bl	800f690 <_ZN8touchgfx3HAL3lcdEv>
 800ff62:	6803      	ldr	r3, [r0, #0]
 800ff64:	331c      	adds	r3, #28
 800ff66:	681c      	ldr	r4, [r3, #0]
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800ff6e:	687a      	ldr	r2, [r7, #4]
 800ff70:	f107 0134 	add.w	r1, r7, #52	; 0x34
 800ff74:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800ff76:	47a0      	blx	r4

    if (borderSize > 0)
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ff7e:	2b00      	cmp	r3, #0
 800ff80:	f000 80b3 	beq.w	80100ea <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x216>
        {
            Rect(0, 0, getWidth(), borderSize),                                                     // Upper
            Rect(0, getHeight() - borderSize, getWidth(), borderSize),                              // lower
            Rect(0, borderSize, borderSize, getHeight() - (2 * borderSize)),                        // left
            Rect(getWidth() - borderSize, borderSize, borderSize, getHeight() - (2 * borderSize))   // right
        };
 800ff84:	f107 040c 	add.w	r4, r7, #12
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	4618      	mov	r0, r3
 800ff8c:	f7fe fff9 	bl	800ef82 <_ZNK8touchgfx8Drawable8getWidthEv>
 800ff90:	4603      	mov	r3, r0
 800ff92:	461a      	mov	r2, r3
            Rect(0, 0, getWidth(), borderSize),                                                     // Upper
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
        };
 800ff9a:	b21b      	sxth	r3, r3
 800ff9c:	9300      	str	r3, [sp, #0]
 800ff9e:	4613      	mov	r3, r2
 800ffa0:	2200      	movs	r2, #0
 800ffa2:	2100      	movs	r1, #0
 800ffa4:	4620      	mov	r0, r4
 800ffa6:	f7fe f9eb 	bl	800e380 <_ZN8touchgfx4RectC1Essss>
 800ffaa:	3408      	adds	r4, #8
            Rect(0, getHeight() - borderSize, getWidth(), borderSize),                              // lower
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	4618      	mov	r0, r3
 800ffb0:	f7fe fff4 	bl	800ef9c <_ZNK8touchgfx8Drawable9getHeightEv>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	b29a      	uxth	r2, r3
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ffbe:	b29b      	uxth	r3, r3
 800ffc0:	1ad3      	subs	r3, r2, r3
 800ffc2:	b29b      	uxth	r3, r3
        };
 800ffc4:	b21d      	sxth	r5, r3
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	4618      	mov	r0, r3
 800ffca:	f7fe ffda 	bl	800ef82 <_ZNK8touchgfx8Drawable8getWidthEv>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	461a      	mov	r2, r3
            Rect(0, getHeight() - borderSize, getWidth(), borderSize),                              // lower
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
        };
 800ffd8:	b21b      	sxth	r3, r3
 800ffda:	9300      	str	r3, [sp, #0]
 800ffdc:	4613      	mov	r3, r2
 800ffde:	462a      	mov	r2, r5
 800ffe0:	2100      	movs	r1, #0
 800ffe2:	4620      	mov	r0, r4
 800ffe4:	f7fe f9cc 	bl	800e380 <_ZN8touchgfx4RectC1Essss>
 800ffe8:	3408      	adds	r4, #8
            Rect(0, borderSize, borderSize, getHeight() - (2 * borderSize)),                        // left
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
        };
 800fff0:	b21d      	sxth	r5, r3
            Rect(0, borderSize, borderSize, getHeight() - (2 * borderSize)),                        // left
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
        };
 800fff8:	b21e      	sxth	r6, r3
            Rect(0, borderSize, borderSize, getHeight() - (2 * borderSize)),                        // left
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	4618      	mov	r0, r3
 800fffe:	f7fe ffcd 	bl	800ef9c <_ZNK8touchgfx8Drawable9getHeightEv>
 8010002:	4603      	mov	r3, r0
 8010004:	b29a      	uxth	r2, r3
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801000c:	b29b      	uxth	r3, r3
 801000e:	005b      	lsls	r3, r3, #1
 8010010:	b29b      	uxth	r3, r3
 8010012:	1ad3      	subs	r3, r2, r3
 8010014:	b29b      	uxth	r3, r3
        };
 8010016:	b21b      	sxth	r3, r3
 8010018:	9300      	str	r3, [sp, #0]
 801001a:	4633      	mov	r3, r6
 801001c:	462a      	mov	r2, r5
 801001e:	2100      	movs	r1, #0
 8010020:	4620      	mov	r0, r4
 8010022:	f7fe f9ad 	bl	800e380 <_ZN8touchgfx4RectC1Essss>
 8010026:	3408      	adds	r4, #8
            Rect(getWidth() - borderSize, borderSize, borderSize, getHeight() - (2 * borderSize))   // right
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	4618      	mov	r0, r3
 801002c:	f7fe ffa9 	bl	800ef82 <_ZNK8touchgfx8Drawable8getWidthEv>
 8010030:	4603      	mov	r3, r0
 8010032:	b29a      	uxth	r2, r3
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801003a:	b29b      	uxth	r3, r3
 801003c:	1ad3      	subs	r3, r2, r3
 801003e:	b29b      	uxth	r3, r3
        };
 8010040:	b21d      	sxth	r5, r3
            Rect(getWidth() - borderSize, borderSize, borderSize, getHeight() - (2 * borderSize))   // right
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
        };
 8010048:	b21e      	sxth	r6, r3
            Rect(getWidth() - borderSize, borderSize, borderSize, getHeight() - (2 * borderSize))   // right
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
        };
 8010050:	fa0f f883 	sxth.w	r8, r3
            Rect(getWidth() - borderSize, borderSize, borderSize, getHeight() - (2 * borderSize))   // right
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	4618      	mov	r0, r3
 8010058:	f7fe ffa0 	bl	800ef9c <_ZNK8touchgfx8Drawable9getHeightEv>
 801005c:	4603      	mov	r3, r0
 801005e:	b29a      	uxth	r2, r3
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010066:	b29b      	uxth	r3, r3
 8010068:	005b      	lsls	r3, r3, #1
 801006a:	b29b      	uxth	r3, r3
 801006c:	1ad3      	subs	r3, r2, r3
 801006e:	b29b      	uxth	r3, r3
        };
 8010070:	b21b      	sxth	r3, r3
 8010072:	9300      	str	r3, [sp, #0]
 8010074:	4643      	mov	r3, r8
 8010076:	4632      	mov	r2, r6
 8010078:	4629      	mov	r1, r5
 801007a:	4620      	mov	r0, r4
 801007c:	f7fe f980 	bl	800e380 <_ZN8touchgfx4RectC1Essss>

        for (int i = 0; i < 4; i++)
 8010080:	2300      	movs	r3, #0
 8010082:	647b      	str	r3, [r7, #68]	; 0x44
 8010084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010086:	2b03      	cmp	r3, #3
 8010088:	dc2f      	bgt.n	80100ea <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x216>
        {
            Rect borderDirty = borders[i] & area;
 801008a:	f107 020c 	add.w	r2, r7, #12
 801008e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010090:	00db      	lsls	r3, r3, #3
 8010092:	18d1      	adds	r1, r2, r3
 8010094:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010098:	683a      	ldr	r2, [r7, #0]
 801009a:	4618      	mov	r0, r3
 801009c:	f7fe fa1b 	bl	800e4d6 <_ZNK8touchgfx4RectanERKS0_>
            if (!borderDirty.isEmpty())
 80100a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80100a4:	4618      	mov	r0, r3
 80100a6:	f7fe fb33 	bl	800e710 <_ZNK8touchgfx4Rect7isEmptyEv>
 80100aa:	4603      	mov	r3, r0
 80100ac:	f083 0301 	eor.w	r3, r3, #1
 80100b0:	b2db      	uxtb	r3, r3
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d015      	beq.n	80100e2 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x20e>
            {
                translateRectToAbsolute(borderDirty);
 80100b6:	687a      	ldr	r2, [r7, #4]
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	3324      	adds	r3, #36	; 0x24
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80100c4:	4610      	mov	r0, r2
 80100c6:	4798      	blx	r3
                HAL::lcd().fillRect(borderDirty, borderColor, alpha);
 80100c8:	f7ff fae2 	bl	800f690 <_ZN8touchgfx3HAL3lcdEv>
 80100cc:	6803      	ldr	r3, [r0, #0]
 80100ce:	331c      	adds	r3, #28
 80100d0:	681c      	ldr	r4, [r3, #0]
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80100d8:	687a      	ldr	r2, [r7, #4]
 80100da:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 80100de:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80100e0:	47a0      	blx	r4
        for (int i = 0; i < 4; i++)
 80100e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80100e4:	3301      	adds	r3, #1
 80100e6:	647b      	str	r3, [r7, #68]	; 0x44
 80100e8:	e7cc      	b.n	8010084 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x1b0>
            }
        }
    }
}
 80100ea:	bf00      	nop
 80100ec:	3748      	adds	r7, #72	; 0x48
 80100ee:	46bd      	mov	sp, r7
 80100f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080100f4 <_ZNK8touchgfx6Button7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_BUTTON.
     */
    virtual uint16_t getType() const
 80100f4:	b480      	push	{r7}
 80100f6:	b083      	sub	sp, #12
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_BUTTON;
 80100fc:	2305      	movs	r3, #5
    }
 80100fe:	4618      	mov	r0, r3
 8010100:	370c      	adds	r7, #12
 8010102:	46bd      	mov	sp, r7
 8010104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010108:	4770      	bx	lr

0801010a <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
#include <touchgfx/widgets/Button.hpp>

namespace touchgfx
{
void Button::draw(const Rect& invalidatedArea) const
{
 801010a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801010c:	b08d      	sub	sp, #52	; 0x34
 801010e:	af04      	add	r7, sp, #16
 8010110:	6078      	str	r0, [r7, #4]
 8010112:	6039      	str	r1, [r7, #0]
    Bitmap bmp(AbstractButton::pressed ? down : up);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801011a:	2b00      	cmp	r3, #0
 801011c:	d002      	beq.n	8010124 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x1a>
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	3330      	adds	r3, #48	; 0x30
 8010122:	e001      	b.n	8010128 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x1e>
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	332e      	adds	r3, #46	; 0x2e
 8010128:	881b      	ldrh	r3, [r3, #0]
 801012a:	83bb      	strh	r3, [r7, #28]
    Rect dirty(0, 0, bmp.getWidth(), bmp.getHeight());
 801012c:	f107 031c 	add.w	r3, r7, #28
 8010130:	4618      	mov	r0, r3
 8010132:	f010 f8a7 	bl	8020284 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010136:	4603      	mov	r3, r0
 8010138:	b21c      	sxth	r4, r3
 801013a:	f107 031c 	add.w	r3, r7, #28
 801013e:	4618      	mov	r0, r3
 8010140:	f010 f8d8 	bl	80202f4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010144:	4603      	mov	r3, r0
 8010146:	b21b      	sxth	r3, r3
 8010148:	f107 0014 	add.w	r0, r7, #20
 801014c:	9300      	str	r3, [sp, #0]
 801014e:	4623      	mov	r3, r4
 8010150:	2200      	movs	r2, #0
 8010152:	2100      	movs	r1, #0
 8010154:	f7fe f914 	bl	800e380 <_ZN8touchgfx4RectC1Essss>
    dirty &= invalidatedArea;
 8010158:	f107 0314 	add.w	r3, r7, #20
 801015c:	6839      	ldr	r1, [r7, #0]
 801015e:	4618      	mov	r0, r3
 8010160:	f7fe f9ce 	bl	800e500 <_ZN8touchgfx4RectaNERKS0_>
    if ((bmp.getId() != BITMAP_INVALID) && !dirty.isEmpty())
 8010164:	f107 031c 	add.w	r3, r7, #28
 8010168:	4618      	mov	r0, r3
 801016a:	f7ff fa57 	bl	800f61c <_ZNK8touchgfx6Bitmap5getIdEv>
 801016e:	4603      	mov	r3, r0
 8010170:	461a      	mov	r2, r3
 8010172:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010176:	429a      	cmp	r2, r3
 8010178:	d00c      	beq.n	8010194 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 801017a:	f107 0314 	add.w	r3, r7, #20
 801017e:	4618      	mov	r0, r3
 8010180:	f7fe fac6 	bl	800e710 <_ZNK8touchgfx4Rect7isEmptyEv>
 8010184:	4603      	mov	r3, r0
 8010186:	f083 0301 	eor.w	r3, r3, #1
 801018a:	b2db      	uxtb	r3, r3
 801018c:	2b00      	cmp	r3, #0
 801018e:	d001      	beq.n	8010194 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8a>
 8010190:	2301      	movs	r3, #1
 8010192:	e000      	b.n	8010196 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x8c>
 8010194:	2300      	movs	r3, #0
 8010196:	2b00      	cmp	r3, #0
 8010198:	d024      	beq.n	80101e4 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
    {
        Rect r;
 801019a:	f107 030c 	add.w	r3, r7, #12
 801019e:	4618      	mov	r0, r3
 80101a0:	f7fe ff49 	bl	800f036 <_ZN8touchgfx4RectC1Ev>
        translateRectToAbsolute(r);
 80101a4:	687a      	ldr	r2, [r7, #4]
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	3324      	adds	r3, #36	; 0x24
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	f107 010c 	add.w	r1, r7, #12
 80101b2:	4610      	mov	r0, r2
 80101b4:	4798      	blx	r3
        HAL::lcd().drawPartialBitmap(bmp, r.x, r.y, dirty, alpha);
 80101b6:	f7ff fa6b 	bl	800f690 <_ZN8touchgfx3HAL3lcdEv>
 80101ba:	6803      	ldr	r3, [r0, #0]
 80101bc:	330c      	adds	r3, #12
 80101be:	681c      	ldr	r4, [r3, #0]
 80101c0:	f9b7 500c 	ldrsh.w	r5, [r7, #12]
 80101c4:	f9b7 600e 	ldrsh.w	r6, [r7, #14]
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80101ce:	f107 011c 	add.w	r1, r7, #28
 80101d2:	2201      	movs	r2, #1
 80101d4:	9202      	str	r2, [sp, #8]
 80101d6:	9301      	str	r3, [sp, #4]
 80101d8:	f107 0314 	add.w	r3, r7, #20
 80101dc:	9300      	str	r3, [sp, #0]
 80101de:	4633      	mov	r3, r6
 80101e0:	462a      	mov	r2, r5
 80101e2:	47a0      	blx	r4
    }
}
 80101e4:	bf00      	nop
 80101e6:	3724      	adds	r7, #36	; 0x24
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080101ec <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:

void Button::setBitmaps(const Bitmap& bmpReleased, const Bitmap& bmpPressed)
{
 80101ec:	b590      	push	{r4, r7, lr}
 80101ee:	b085      	sub	sp, #20
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	60f8      	str	r0, [r7, #12]
 80101f4:	60b9      	str	r1, [r7, #8]
 80101f6:	607a      	str	r2, [r7, #4]
    up = bmpReleased;
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	68ba      	ldr	r2, [r7, #8]
 80101fc:	8812      	ldrh	r2, [r2, #0]
 80101fe:	85da      	strh	r2, [r3, #46]	; 0x2e
    down = bmpPressed;
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	687a      	ldr	r2, [r7, #4]
 8010204:	8812      	ldrh	r2, [r2, #0]
 8010206:	861a      	strh	r2, [r3, #48]	; 0x30
    // Adjust width and height of this widget to match bitmap. It is assumed
    // that the two bitmaps have same dimensions.
    Drawable::setWidth(down.getWidth());
 8010208:	68fc      	ldr	r4, [r7, #12]
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	3330      	adds	r3, #48	; 0x30
 801020e:	4618      	mov	r0, r3
 8010210:	f010 f838 	bl	8020284 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010214:	4603      	mov	r3, r0
 8010216:	b21b      	sxth	r3, r3
 8010218:	4619      	mov	r1, r3
 801021a:	4620      	mov	r0, r4
 801021c:	f7fe fb3f 	bl	800e89e <_ZN8touchgfx8Drawable8setWidthEs>
    Drawable::setHeight(down.getHeight());
 8010220:	68fc      	ldr	r4, [r7, #12]
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	3330      	adds	r3, #48	; 0x30
 8010226:	4618      	mov	r0, r3
 8010228:	f010 f864 	bl	80202f4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801022c:	4603      	mov	r3, r0
 801022e:	b21b      	sxth	r3, r3
 8010230:	4619      	mov	r1, r3
 8010232:	4620      	mov	r0, r4
 8010234:	f7fe fb42 	bl	800e8bc <_ZN8touchgfx8Drawable9setHeightEs>
}
 8010238:	bf00      	nop
 801023a:	3714      	adds	r7, #20
 801023c:	46bd      	mov	sp, r7
 801023e:	bd90      	pop	{r4, r7, pc}

08010240 <_ZNK8touchgfx6Button12getSolidRectEv>:

Rect Button::getSolidRect() const
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b084      	sub	sp, #16
 8010244:	af02      	add	r7, sp, #8
 8010246:	6078      	str	r0, [r7, #4]
 8010248:	6039      	str	r1, [r7, #0]
    if (alpha < 255)
 801024a:	683b      	ldr	r3, [r7, #0]
 801024c:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8010250:	2bff      	cmp	r3, #255	; 0xff
 8010252:	d008      	beq.n	8010266 <_ZNK8touchgfx6Button12getSolidRectEv+0x26>
    {
        return Rect(0, 0, 0, 0);
 8010254:	2300      	movs	r3, #0
 8010256:	9300      	str	r3, [sp, #0]
 8010258:	2300      	movs	r3, #0
 801025a:	2200      	movs	r2, #0
 801025c:	2100      	movs	r1, #0
 801025e:	6878      	ldr	r0, [r7, #4]
 8010260:	f7fe f88e 	bl	800e380 <_ZN8touchgfx4RectC1Essss>
 8010264:	e015      	b.n	8010292 <_ZNK8touchgfx6Button12getSolidRectEv+0x52>
    }

    return (AbstractButton::pressed ? down.getSolidRect() : up.getSolidRect());
 8010266:	683b      	ldr	r3, [r7, #0]
 8010268:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801026c:	2b00      	cmp	r3, #0
 801026e:	d008      	beq.n	8010282 <_ZNK8touchgfx6Button12getSolidRectEv+0x42>
 8010270:	683b      	ldr	r3, [r7, #0]
 8010272:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	4611      	mov	r1, r2
 801027a:	4618      	mov	r0, r3
 801027c:	f010 f872 	bl	8020364 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8010280:	e007      	b.n	8010292 <_ZNK8touchgfx6Button12getSolidRectEv+0x52>
 8010282:	683b      	ldr	r3, [r7, #0]
 8010284:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	4611      	mov	r1, r2
 801028c:	4618      	mov	r0, r3
 801028e:	f010 f869 	bl	8020364 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
}
 8010292:	6878      	ldr	r0, [r7, #4]
 8010294:	3708      	adds	r7, #8
 8010296:	46bd      	mov	sp, r7
 8010298:	bd80      	pop	{r7, pc}

0801029a <_ZNK8touchgfx14ButtonWithIcon7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_BUTTONWITHICON.
     */
    virtual uint16_t getType() const
 801029a:	b480      	push	{r7}
 801029c:	b083      	sub	sp, #12
 801029e:	af00      	add	r7, sp, #0
 80102a0:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_BUTTONWITHICON;
 80102a2:	2306      	movs	r3, #6
    }
 80102a4:	4618      	mov	r0, r3
 80102a6:	370c      	adds	r7, #12
 80102a8:	46bd      	mov	sp, r7
 80102aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ae:	4770      	bx	lr

080102b0 <_ZN8touchgfx14ButtonWithIconC1Ev>:

#include <touchgfx/widgets/ButtonWithIcon.hpp>

namespace touchgfx
{
ButtonWithIcon::ButtonWithIcon() :
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b082      	sub	sp, #8
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
    Button(),
    iconX(0),
    iconY(0)
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	4618      	mov	r0, r3
 80102bc:	f7ff f938 	bl	800f530 <_ZN8touchgfx6ButtonC1Ev>
 80102c0:	4a0d      	ldr	r2, [pc, #52]	; (80102f8 <_ZN8touchgfx14ButtonWithIconC1Ev+0x48>)
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	601a      	str	r2, [r3, #0]
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	3334      	adds	r3, #52	; 0x34
 80102ca:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80102ce:	4618      	mov	r0, r3
 80102d0:	f7fe fec8 	bl	800f064 <_ZN8touchgfx6BitmapC1Et>
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	3336      	adds	r3, #54	; 0x36
 80102d8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80102dc:	4618      	mov	r0, r3
 80102de:	f7fe fec1 	bl	800f064 <_ZN8touchgfx6BitmapC1Et>
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	2200      	movs	r2, #0
 80102e6:	871a      	strh	r2, [r3, #56]	; 0x38
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	2200      	movs	r2, #0
 80102ec:	875a      	strh	r2, [r3, #58]	; 0x3a
{
}
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	4618      	mov	r0, r3
 80102f2:	3708      	adds	r7, #8
 80102f4:	46bd      	mov	sp, r7
 80102f6:	bd80      	pop	{r7, pc}
 80102f8:	080243ec 	.word	0x080243ec

080102fc <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>:

void ButtonWithIcon::setBitmaps(const Bitmap& newBackgroundReleased, const Bitmap& newBackgroundPressed,
                                const Bitmap& newIconReleased, const Bitmap& newIconPressed)
{
 80102fc:	b590      	push	{r4, r7, lr}
 80102fe:	b085      	sub	sp, #20
 8010300:	af00      	add	r7, sp, #0
 8010302:	60f8      	str	r0, [r7, #12]
 8010304:	60b9      	str	r1, [r7, #8]
 8010306:	607a      	str	r2, [r7, #4]
 8010308:	603b      	str	r3, [r7, #0]
    Button::setBitmaps(newBackgroundReleased, newBackgroundPressed);
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	687a      	ldr	r2, [r7, #4]
 801030e:	68b9      	ldr	r1, [r7, #8]
 8010310:	4618      	mov	r0, r3
 8010312:	f7ff ff6b 	bl	80101ec <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>

    iconReleased = newIconReleased;
 8010316:	68fb      	ldr	r3, [r7, #12]
 8010318:	683a      	ldr	r2, [r7, #0]
 801031a:	8812      	ldrh	r2, [r2, #0]
 801031c:	869a      	strh	r2, [r3, #52]	; 0x34
    iconPressed = newIconPressed;
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	6a3a      	ldr	r2, [r7, #32]
 8010322:	8812      	ldrh	r2, [r2, #0]
 8010324:	86da      	strh	r2, [r3, #54]	; 0x36

    iconX = (getWidth() / 2) - (newIconPressed.getWidth() / 2);
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	4618      	mov	r0, r3
 801032a:	f7fe fe2a 	bl	800ef82 <_ZNK8touchgfx8Drawable8getWidthEv>
 801032e:	4603      	mov	r3, r0
 8010330:	2b00      	cmp	r3, #0
 8010332:	da00      	bge.n	8010336 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_+0x3a>
 8010334:	3301      	adds	r3, #1
 8010336:	105b      	asrs	r3, r3, #1
 8010338:	b21b      	sxth	r3, r3
 801033a:	b29c      	uxth	r4, r3
 801033c:	6a38      	ldr	r0, [r7, #32]
 801033e:	f00f ffa1 	bl	8020284 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010342:	4603      	mov	r3, r0
 8010344:	085b      	lsrs	r3, r3, #1
 8010346:	b29b      	uxth	r3, r3
 8010348:	1ae3      	subs	r3, r4, r3
 801034a:	b29b      	uxth	r3, r3
 801034c:	b21a      	sxth	r2, r3
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	871a      	strh	r2, [r3, #56]	; 0x38
    iconY = (getHeight() / 2) - (newIconPressed.getHeight() / 2);
 8010352:	68fb      	ldr	r3, [r7, #12]
 8010354:	4618      	mov	r0, r3
 8010356:	f7fe fe21 	bl	800ef9c <_ZNK8touchgfx8Drawable9getHeightEv>
 801035a:	4603      	mov	r3, r0
 801035c:	2b00      	cmp	r3, #0
 801035e:	da00      	bge.n	8010362 <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_+0x66>
 8010360:	3301      	adds	r3, #1
 8010362:	105b      	asrs	r3, r3, #1
 8010364:	b21b      	sxth	r3, r3
 8010366:	b29c      	uxth	r4, r3
 8010368:	6a38      	ldr	r0, [r7, #32]
 801036a:	f00f ffc3 	bl	80202f4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801036e:	4603      	mov	r3, r0
 8010370:	085b      	lsrs	r3, r3, #1
 8010372:	b29b      	uxth	r3, r3
 8010374:	1ae3      	subs	r3, r4, r3
 8010376:	b29b      	uxth	r3, r3
 8010378:	b21a      	sxth	r2, r3
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	875a      	strh	r2, [r3, #58]	; 0x3a
}
 801037e:	bf00      	nop
 8010380:	3714      	adds	r7, #20
 8010382:	46bd      	mov	sp, r7
 8010384:	bd90      	pop	{r4, r7, pc}

08010386 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE>:

void ButtonWithIcon::draw(const Rect& invalidatedArea) const
{
 8010386:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010388:	b08f      	sub	sp, #60	; 0x3c
 801038a:	af04      	add	r7, sp, #16
 801038c:	6078      	str	r0, [r7, #4]
 801038e:	6039      	str	r1, [r7, #0]
    Button::draw(invalidatedArea);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	6839      	ldr	r1, [r7, #0]
 8010394:	4618      	mov	r0, r3
 8010396:	f7ff feb8 	bl	801010a <_ZNK8touchgfx6Button4drawERKNS_4RectE>

    Bitmap bmp((pressed ? iconPressed : iconReleased));
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d002      	beq.n	80103aa <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x24>
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	3336      	adds	r3, #54	; 0x36
 80103a8:	e001      	b.n	80103ae <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x28>
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	3334      	adds	r3, #52	; 0x34
 80103ae:	881b      	ldrh	r3, [r3, #0]
 80103b0:	84bb      	strh	r3, [r7, #36]	; 0x24
    Rect iconRect(iconX, iconY, bmp.getWidth(), bmp.getHeight());
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	f9b3 4038 	ldrsh.w	r4, [r3, #56]	; 0x38
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	f9b3 503a 	ldrsh.w	r5, [r3, #58]	; 0x3a
 80103be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80103c2:	4618      	mov	r0, r3
 80103c4:	f00f ff5e 	bl	8020284 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80103c8:	4603      	mov	r3, r0
 80103ca:	b21e      	sxth	r6, r3
 80103cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80103d0:	4618      	mov	r0, r3
 80103d2:	f00f ff8f 	bl	80202f4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80103d6:	4603      	mov	r3, r0
 80103d8:	b21b      	sxth	r3, r3
 80103da:	f107 001c 	add.w	r0, r7, #28
 80103de:	9300      	str	r3, [sp, #0]
 80103e0:	4633      	mov	r3, r6
 80103e2:	462a      	mov	r2, r5
 80103e4:	4621      	mov	r1, r4
 80103e6:	f7fd ffcb 	bl	800e380 <_ZN8touchgfx4RectC1Essss>
    Rect dirty = invalidatedArea & iconRect;
 80103ea:	f107 0314 	add.w	r3, r7, #20
 80103ee:	f107 021c 	add.w	r2, r7, #28
 80103f2:	6839      	ldr	r1, [r7, #0]
 80103f4:	4618      	mov	r0, r3
 80103f6:	f7fe f86e 	bl	800e4d6 <_ZNK8touchgfx4RectanERKS0_>
    if ((bmp.getId() != BITMAP_INVALID) && !dirty.isEmpty())
 80103fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80103fe:	4618      	mov	r0, r3
 8010400:	f7ff f90c 	bl	800f61c <_ZNK8touchgfx6Bitmap5getIdEv>
 8010404:	4603      	mov	r3, r0
 8010406:	461a      	mov	r2, r3
 8010408:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801040c:	429a      	cmp	r2, r3
 801040e:	d00c      	beq.n	801042a <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xa4>
 8010410:	f107 0314 	add.w	r3, r7, #20
 8010414:	4618      	mov	r0, r3
 8010416:	f7fe f97b 	bl	800e710 <_ZNK8touchgfx4Rect7isEmptyEv>
 801041a:	4603      	mov	r3, r0
 801041c:	f083 0301 	eor.w	r3, r3, #1
 8010420:	b2db      	uxtb	r3, r3
 8010422:	2b00      	cmp	r3, #0
 8010424:	d001      	beq.n	801042a <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xa4>
 8010426:	2301      	movs	r3, #1
 8010428:	e000      	b.n	801042c <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0xa6>
 801042a:	2300      	movs	r3, #0
 801042c:	2b00      	cmp	r3, #0
 801042e:	d04a      	beq.n	80104c6 <_ZNK8touchgfx14ButtonWithIcon4drawERKNS_4RectE+0x140>
    {
        Rect r;
 8010430:	f107 030c 	add.w	r3, r7, #12
 8010434:	4618      	mov	r0, r3
 8010436:	f7fe fdfe 	bl	800f036 <_ZN8touchgfx4RectC1Ev>
        translateRectToAbsolute(r);
 801043a:	687a      	ldr	r2, [r7, #4]
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	681b      	ldr	r3, [r3, #0]
 8010440:	3324      	adds	r3, #36	; 0x24
 8010442:	681b      	ldr	r3, [r3, #0]
 8010444:	f107 010c 	add.w	r1, r7, #12
 8010448:	4610      	mov	r0, r2
 801044a:	4798      	blx	r3
        dirty.x -= iconX;
 801044c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8010450:	b29a      	uxth	r2, r3
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 8010458:	b29b      	uxth	r3, r3
 801045a:	1ad3      	subs	r3, r2, r3
 801045c:	b29b      	uxth	r3, r3
 801045e:	b21b      	sxth	r3, r3
 8010460:	82bb      	strh	r3, [r7, #20]
        dirty.y -= iconY;
 8010462:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8010466:	b29a      	uxth	r2, r3
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 801046e:	b29b      	uxth	r3, r3
 8010470:	1ad3      	subs	r3, r2, r3
 8010472:	b29b      	uxth	r3, r3
 8010474:	b21b      	sxth	r3, r3
 8010476:	82fb      	strh	r3, [r7, #22]
        HAL::lcd().drawPartialBitmap(bmp, r.x + iconX, r.y + iconY, dirty, alpha);
 8010478:	f7ff f90a 	bl	800f690 <_ZN8touchgfx3HAL3lcdEv>
 801047c:	6803      	ldr	r3, [r0, #0]
 801047e:	330c      	adds	r3, #12
 8010480:	681c      	ldr	r4, [r3, #0]
 8010482:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8010486:	b29a      	uxth	r2, r3
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	f9b3 3038 	ldrsh.w	r3, [r3, #56]	; 0x38
 801048e:	b29b      	uxth	r3, r3
 8010490:	4413      	add	r3, r2
 8010492:	b29b      	uxth	r3, r3
 8010494:	b21d      	sxth	r5, r3
 8010496:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801049a:	b29a      	uxth	r2, r3
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f9b3 303a 	ldrsh.w	r3, [r3, #58]	; 0x3a
 80104a2:	b29b      	uxth	r3, r3
 80104a4:	4413      	add	r3, r2
 80104a6:	b29b      	uxth	r3, r3
 80104a8:	b21e      	sxth	r6, r3
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80104b0:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80104b4:	2201      	movs	r2, #1
 80104b6:	9202      	str	r2, [sp, #8]
 80104b8:	9301      	str	r3, [sp, #4]
 80104ba:	f107 0314 	add.w	r3, r7, #20
 80104be:	9300      	str	r3, [sp, #0]
 80104c0:	4633      	mov	r3, r6
 80104c2:	462a      	mov	r2, r5
 80104c4:	47a0      	blx	r4
    }
}
 80104c6:	bf00      	nop
 80104c8:	372c      	adds	r7, #44	; 0x2c
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080104d0 <_ZN8touchgfx14ButtonWithIconD1Ev>:
class ButtonWithIcon : public Button
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b082      	sub	sp, #8
 80104d4:	af00      	add	r7, sp, #0
 80104d6:	6078      	str	r0, [r7, #4]
 80104d8:	4a05      	ldr	r2, [pc, #20]	; (80104f0 <_ZN8touchgfx14ButtonWithIconD1Ev+0x20>)
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	601a      	str	r2, [r3, #0]
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	4618      	mov	r0, r3
 80104e2:	f7ff f849 	bl	800f578 <_ZN8touchgfx6ButtonD1Ev>
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	4618      	mov	r0, r3
 80104ea:	3708      	adds	r7, #8
 80104ec:	46bd      	mov	sp, r7
 80104ee:	bd80      	pop	{r7, pc}
 80104f0:	080243ec 	.word	0x080243ec

080104f4 <_ZN8touchgfx14ButtonWithIconD0Ev>:
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b082      	sub	sp, #8
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
 80104fc:	6878      	ldr	r0, [r7, #4]
 80104fe:	f7ff ffe7 	bl	80104d0 <_ZN8touchgfx14ButtonWithIconD1Ev>
 8010502:	213c      	movs	r1, #60	; 0x3c
 8010504:	6878      	ldr	r0, [r7, #4]
 8010506:	f011 ff8c 	bl	8022422 <_ZdlPvj>
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	4618      	mov	r0, r3
 801050e:	3708      	adds	r7, #8
 8010510:	46bd      	mov	sp, r7
 8010512:	bd80      	pop	{r7, pc}

08010514 <_ZNK8touchgfx15ButtonWithLabel12getSolidRectEv>:
        const Font* f = typedText.getFont();
        const Unicode::UnicodeChar* s = typedText.getText();
        textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
    }

    virtual Rect getSolidRect() const
 8010514:	b580      	push	{r7, lr}
 8010516:	b082      	sub	sp, #8
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
 801051c:	6039      	str	r1, [r7, #0]
    {
        return Button::getSolidRect();
 801051e:	683a      	ldr	r2, [r7, #0]
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	4611      	mov	r1, r2
 8010524:	4618      	mov	r0, r3
 8010526:	f7ff fe8b 	bl	8010240 <_ZNK8touchgfx6Button12getSolidRectEv>
    };
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	3708      	adds	r7, #8
 801052e:	46bd      	mov	sp, r7
 8010530:	bd80      	pop	{r7, pc}

08010532 <_ZNK8touchgfx15ButtonWithLabel7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_BUTTONWITHLABEL.
     */
    virtual uint16_t getType() const
 8010532:	b480      	push	{r7}
 8010534:	b083      	sub	sp, #12
 8010536:	af00      	add	r7, sp, #0
 8010538:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_BUTTONWITHLABEL;
 801053a:	2307      	movs	r3, #7
    }
 801053c:	4618      	mov	r0, r3
 801053e:	370c      	adds	r7, #12
 8010540:	46bd      	mov	sp, r7
 8010542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010546:	4770      	bx	lr

08010548 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
#include <touchgfx/widgets/ButtonWithLabel.hpp>
#include <touchgfx/FontManager.hpp>

namespace touchgfx
{
ButtonWithLabel::ButtonWithLabel()
 8010548:	b580      	push	{r7, lr}
 801054a:	b082      	sub	sp, #8
 801054c:	af00      	add	r7, sp, #0
 801054e:	6078      	str	r0, [r7, #4]
    : Button(), color(0), colorPressed(0), rotation(TEXT_ROTATE_0), textHeightIncludingSpacing(0)
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	4618      	mov	r0, r3
 8010554:	f7fe ffec 	bl	800f530 <_ZN8touchgfx6ButtonC1Ev>
 8010558:	4a11      	ldr	r2, [pc, #68]	; (80105a0 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	601a      	str	r2, [r3, #0]
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	3334      	adds	r3, #52	; 0x34
 8010562:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8010566:	4618      	mov	r0, r3
 8010568:	f7ff f8e2 	bl	800f730 <_ZN8touchgfx9TypedTextC1Et>
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	3338      	adds	r3, #56	; 0x38
 8010570:	2100      	movs	r1, #0
 8010572:	4618      	mov	r0, r3
 8010574:	f7fe fd50 	bl	800f018 <_ZN8touchgfx9colortypeC1Em>
 8010578:	687b      	ldr	r3, [r7, #4]
 801057a:	333c      	adds	r3, #60	; 0x3c
 801057c:	2100      	movs	r1, #0
 801057e:	4618      	mov	r0, r3
 8010580:	f7fe fd4a 	bl	800f018 <_ZN8touchgfx9colortypeC1Em>
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2200      	movs	r2, #0
 8010588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	2200      	movs	r2, #0
 8010590:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
{
}
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	4618      	mov	r0, r3
 8010598:	3708      	adds	r7, #8
 801059a:	46bd      	mov	sp, r7
 801059c:	bd80      	pop	{r7, pc}
 801059e:	bf00      	nop
 80105a0:	08024464 	.word	0x08024464

080105a4 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:

void ButtonWithLabel::draw(const Rect& area) const
{
 80105a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80105a6:	b09b      	sub	sp, #108	; 0x6c
 80105a8:	af06      	add	r7, sp, #24
 80105aa:	60f8      	str	r0, [r7, #12]
 80105ac:	60b9      	str	r1, [r7, #8]
    Button::draw(area);
 80105ae:	68fb      	ldr	r3, [r7, #12]
 80105b0:	68b9      	ldr	r1, [r7, #8]
 80105b2:	4618      	mov	r0, r3
 80105b4:	f7ff fda9 	bl	801010a <_ZNK8touchgfx6Button4drawERKNS_4RectE>

    const Font* fontToDraw = typedText.getFont();
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	3334      	adds	r3, #52	; 0x34
 80105bc:	4618      	mov	r0, r3
 80105be:	f7ff f8f1 	bl	800f7a4 <_ZNK8touchgfx9TypedText7getFontEv>
 80105c2:	64f8      	str	r0, [r7, #76]	; 0x4c
    if ((fontToDraw != 0) && typedText.hasValidId())
 80105c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d009      	beq.n	80105de <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3a>
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	3334      	adds	r3, #52	; 0x34
 80105ce:	4618      	mov	r0, r3
 80105d0:	f7ff f8be 	bl	800f750 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 80105d4:	4603      	mov	r3, r0
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d001      	beq.n	80105de <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3a>
 80105da:	2301      	movs	r3, #1
 80105dc:	e000      	b.n	80105e0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x3c>
 80105de:	2300      	movs	r3, #0
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	f000 80db 	beq.w	801079c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x1f8>
    {
        uint8_t height = textHeightIncludingSpacing;
 80105e6:	68fb      	ldr	r3, [r7, #12]
 80105e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80105ec:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
        int16_t offset;
        Rect labelRect;
 80105f0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80105f4:	4618      	mov	r0, r3
 80105f6:	f7fe fd1e 	bl	800f036 <_ZN8touchgfx4RectC1Ev>
        switch (rotation)
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8010600:	2b01      	cmp	r3, #1
 8010602:	d02b      	beq.n	801065c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
 8010604:	2b03      	cmp	r3, #3
 8010606:	d029      	beq.n	801065c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
        {
        default:
        case TEXT_ROTATE_0:
        case TEXT_ROTATE_180:
            offset = (this->getHeight() - height) / 2;
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	4618      	mov	r0, r3
 801060c:	f7fe fcc6 	bl	800ef9c <_ZNK8touchgfx8Drawable9getHeightEv>
 8010610:	4603      	mov	r3, r0
 8010612:	461a      	mov	r2, r3
 8010614:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010618:	1ad3      	subs	r3, r2, r3
 801061a:	2b00      	cmp	r3, #0
 801061c:	da00      	bge.n	8010620 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x7c>
 801061e:	3301      	adds	r3, #1
 8010620:	105b      	asrs	r3, r3, #1
 8010622:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            labelRect = Rect(0, offset, this->getWidth(), height);
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	4618      	mov	r0, r3
 801062a:	f7fe fcaa 	bl	800ef82 <_ZNK8touchgfx8Drawable8getWidthEv>
 801062e:	4603      	mov	r3, r0
 8010630:	4619      	mov	r1, r3
 8010632:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8010636:	b21b      	sxth	r3, r3
 8010638:	f9b7 2048 	ldrsh.w	r2, [r7, #72]	; 0x48
 801063c:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8010640:	9300      	str	r3, [sp, #0]
 8010642:	460b      	mov	r3, r1
 8010644:	2100      	movs	r1, #0
 8010646:	f7fd fe9b 	bl	800e380 <_ZN8touchgfx4RectC1Essss>
 801064a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801064e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8010652:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010656:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 801065a:	e028      	b.n	80106ae <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x10a>
        case TEXT_ROTATE_90:
        case TEXT_ROTATE_270:
            offset = (this->getWidth() - height) / 2;
 801065c:	68fb      	ldr	r3, [r7, #12]
 801065e:	4618      	mov	r0, r3
 8010660:	f7fe fc8f 	bl	800ef82 <_ZNK8touchgfx8Drawable8getWidthEv>
 8010664:	4603      	mov	r3, r0
 8010666:	461a      	mov	r2, r3
 8010668:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801066c:	1ad3      	subs	r3, r2, r3
 801066e:	2b00      	cmp	r3, #0
 8010670:	da00      	bge.n	8010674 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xd0>
 8010672:	3301      	adds	r3, #1
 8010674:	105b      	asrs	r3, r3, #1
 8010676:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
            labelRect = Rect(offset, 0, height, this->getHeight());
 801067a:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 801067e:	b21c      	sxth	r4, r3
 8010680:	68fb      	ldr	r3, [r7, #12]
 8010682:	4618      	mov	r0, r3
 8010684:	f7fe fc8a 	bl	800ef9c <_ZNK8touchgfx8Drawable9getHeightEv>
 8010688:	4603      	mov	r3, r0
 801068a:	f9b7 1048 	ldrsh.w	r1, [r7, #72]	; 0x48
 801068e:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8010692:	9300      	str	r3, [sp, #0]
 8010694:	4623      	mov	r3, r4
 8010696:	2200      	movs	r2, #0
 8010698:	f7fd fe72 	bl	800e380 <_ZN8touchgfx4RectC1Essss>
 801069c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80106a0:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80106a4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80106a8:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80106ac:	bf00      	nop
        }
        Rect dirty = labelRect & area;
 80106ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80106b2:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80106b6:	68ba      	ldr	r2, [r7, #8]
 80106b8:	4618      	mov	r0, r3
 80106ba:	f7fd ff0c 	bl	800e4d6 <_ZNK8touchgfx4RectanERKS0_>

        if (!dirty.isEmpty())
 80106be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80106c2:	4618      	mov	r0, r3
 80106c4:	f7fe f824 	bl	800e710 <_ZNK8touchgfx4Rect7isEmptyEv>
 80106c8:	4603      	mov	r3, r0
 80106ca:	f083 0301 	eor.w	r3, r3, #1
 80106ce:	b2db      	uxtb	r3, r3
 80106d0:	2b00      	cmp	r3, #0
 80106d2:	d063      	beq.n	801079c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x1f8>
        {
            dirty.x -= labelRect.x;
 80106d4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80106d8:	b29a      	uxth	r2, r3
 80106da:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80106de:	b29b      	uxth	r3, r3
 80106e0:	1ad3      	subs	r3, r2, r3
 80106e2:	b29b      	uxth	r3, r3
 80106e4:	b21b      	sxth	r3, r3
 80106e6:	853b      	strh	r3, [r7, #40]	; 0x28
            dirty.y -= labelRect.y;
 80106e8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80106ec:	b29a      	uxth	r2, r3
 80106ee:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80106f2:	b29b      	uxth	r3, r3
 80106f4:	1ad3      	subs	r3, r2, r3
 80106f6:	b29b      	uxth	r3, r3
 80106f8:	b21b      	sxth	r3, r3
 80106fa:	857b      	strh	r3, [r7, #42]	; 0x2a
            translateRectToAbsolute(labelRect);
 80106fc:	68fa      	ldr	r2, [r7, #12]
 80106fe:	68fb      	ldr	r3, [r7, #12]
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	3324      	adds	r3, #36	; 0x24
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	f107 0130 	add.w	r1, r7, #48	; 0x30
 801070a:	4610      	mov	r0, r2
 801070c:	4798      	blx	r3
            LCD::StringVisuals visuals(fontToDraw, pressed ? colorPressed : color, alpha, typedText.getAlignment(), 0, rotation, typedText.getTextDirection(), 0, WIDE_TEXT_NONE);
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010714:	2b00      	cmp	r3, #0
 8010716:	d003      	beq.n	8010720 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x17c>
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 801071e:	e002      	b.n	8010726 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x182>
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	f103 0438 	add.w	r4, r3, #56	; 0x38
 8010726:	68fb      	ldr	r3, [r7, #12]
 8010728:	f893 6032 	ldrb.w	r6, [r3, #50]	; 0x32
 801072c:	68fb      	ldr	r3, [r7, #12]
 801072e:	3334      	adds	r3, #52	; 0x34
 8010730:	4618      	mov	r0, r3
 8010732:	f7ff f853 	bl	800f7dc <_ZNK8touchgfx9TypedText12getAlignmentEv>
 8010736:	4603      	mov	r3, r0
 8010738:	607b      	str	r3, [r7, #4]
 801073a:	68fb      	ldr	r3, [r7, #12]
 801073c:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	3334      	adds	r3, #52	; 0x34
 8010744:	4618      	mov	r0, r3
 8010746:	f7ff f861 	bl	800f80c <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 801074a:	4603      	mov	r3, r0
 801074c:	461a      	mov	r2, r3
 801074e:	f107 0014 	add.w	r0, r7, #20
 8010752:	2300      	movs	r3, #0
 8010754:	9305      	str	r3, [sp, #20]
 8010756:	2300      	movs	r3, #0
 8010758:	9304      	str	r3, [sp, #16]
 801075a:	9203      	str	r2, [sp, #12]
 801075c:	9502      	str	r5, [sp, #8]
 801075e:	2300      	movs	r3, #0
 8010760:	9301      	str	r3, [sp, #4]
 8010762:	687b      	ldr	r3, [r7, #4]
 8010764:	9300      	str	r3, [sp, #0]
 8010766:	4633      	mov	r3, r6
 8010768:	6822      	ldr	r2, [r4, #0]
 801076a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801076c:	f7fe ff9c 	bl	800f6a8 <_ZN8touchgfx3LCD13StringVisualsC1EPKNS_4FontENS_9colortypeEhhtNS_12TextRotationEhhNS_14WideTextActionE>
            HAL::lcd().drawString(labelRect, dirty, visuals, typedText.getText());
 8010770:	f7fe ff8e 	bl	800f690 <_ZN8touchgfx3HAL3lcdEv>
 8010774:	4604      	mov	r4, r0
 8010776:	68fb      	ldr	r3, [r7, #12]
 8010778:	3334      	adds	r3, #52	; 0x34
 801077a:	4618      	mov	r0, r3
 801077c:	f7fe fffc 	bl	800f778 <_ZNK8touchgfx9TypedText7getTextEv>
 8010780:	4603      	mov	r3, r0
 8010782:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8010786:	9301      	str	r3, [sp, #4]
 8010788:	f107 0314 	add.w	r3, r7, #20
 801078c:	9300      	str	r3, [sp, #0]
 801078e:	4613      	mov	r3, r2
 8010790:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8010794:	ca06      	ldmia	r2, {r1, r2}
 8010796:	4620      	mov	r0, r4
 8010798:	f00d fa64 	bl	801dc64 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz>
        }
    }
}
 801079c:	bf00      	nop
 801079e:	3754      	adds	r7, #84	; 0x54
 80107a0:	46bd      	mov	sp, r7
 80107a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080107a4 <_ZN8touchgfx15ButtonWithLabelD1Ev>:
class ButtonWithLabel : public Button
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b082      	sub	sp, #8
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	6078      	str	r0, [r7, #4]
 80107ac:	4a05      	ldr	r2, [pc, #20]	; (80107c4 <_ZN8touchgfx15ButtonWithLabelD1Ev+0x20>)
 80107ae:	687b      	ldr	r3, [r7, #4]
 80107b0:	601a      	str	r2, [r3, #0]
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	4618      	mov	r0, r3
 80107b6:	f7fe fedf 	bl	800f578 <_ZN8touchgfx6ButtonD1Ev>
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	4618      	mov	r0, r3
 80107be:	3708      	adds	r7, #8
 80107c0:	46bd      	mov	sp, r7
 80107c2:	bd80      	pop	{r7, pc}
 80107c4:	08024464 	.word	0x08024464

080107c8 <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 80107c8:	b580      	push	{r7, lr}
 80107ca:	b082      	sub	sp, #8
 80107cc:	af00      	add	r7, sp, #0
 80107ce:	6078      	str	r0, [r7, #4]
 80107d0:	6878      	ldr	r0, [r7, #4]
 80107d2:	f7ff ffe7 	bl	80107a4 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 80107d6:	2144      	movs	r1, #68	; 0x44
 80107d8:	6878      	ldr	r0, [r7, #4]
 80107da:	f011 fe22 	bl	8022422 <_ZdlPvj>
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	4618      	mov	r0, r3
 80107e2:	3708      	adds	r7, #8
 80107e4:	46bd      	mov	sp, r7
 80107e6:	bd80      	pop	{r7, pc}

080107e8 <_ZNK8touchgfx6Bitmap7getRectEv>:
     *
     *        Gets the rectangle describing the dimensions of the Bitmap.
     *
     * @return a Rect describing the dimensions of this bitmap.
     */
    Rect getRect() const
 80107e8:	b590      	push	{r4, r7, lr}
 80107ea:	b085      	sub	sp, #20
 80107ec:	af02      	add	r7, sp, #8
 80107ee:	6078      	str	r0, [r7, #4]
 80107f0:	6039      	str	r1, [r7, #0]
    {
        return Rect(0, 0, getWidth(), getHeight());
 80107f2:	6838      	ldr	r0, [r7, #0]
 80107f4:	f00f fd46 	bl	8020284 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80107f8:	4603      	mov	r3, r0
 80107fa:	b21c      	sxth	r4, r3
 80107fc:	6838      	ldr	r0, [r7, #0]
 80107fe:	f00f fd79 	bl	80202f4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010802:	4603      	mov	r3, r0
 8010804:	b21b      	sxth	r3, r3
 8010806:	9300      	str	r3, [sp, #0]
 8010808:	4623      	mov	r3, r4
 801080a:	2200      	movs	r2, #0
 801080c:	2100      	movs	r1, #0
 801080e:	6878      	ldr	r0, [r7, #4]
 8010810:	f7fd fdb6 	bl	800e380 <_ZN8touchgfx4RectC1Essss>
    }
 8010814:	6878      	ldr	r0, [r7, #4]
 8010816:	370c      	adds	r7, #12
 8010818:	46bd      	mov	sp, r7
 801081a:	bd90      	pop	{r4, r7, pc}

0801081c <_ZNK8touchgfx5Image7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_IMAGE.
     */
    virtual uint16_t getType() const
 801081c:	b480      	push	{r7}
 801081e:	b083      	sub	sp, #12
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_IMAGE;
 8010824:	2308      	movs	r3, #8
    }
 8010826:	4618      	mov	r0, r3
 8010828:	370c      	adds	r7, #12
 801082a:	46bd      	mov	sp, r7
 801082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010830:	4770      	bx	lr

08010832 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
#include <touchgfx/widgets/Image.hpp>

namespace touchgfx
{
void Image::setBitmap(const Bitmap& bmp)
{
 8010832:	b5b0      	push	{r4, r5, r7, lr}
 8010834:	b082      	sub	sp, #8
 8010836:	af00      	add	r7, sp, #0
 8010838:	6078      	str	r0, [r7, #4]
 801083a:	6039      	str	r1, [r7, #0]
    bitmap = bmp;
 801083c:	687b      	ldr	r3, [r7, #4]
 801083e:	683a      	ldr	r2, [r7, #0]
 8010840:	8812      	ldrh	r2, [r2, #0]
 8010842:	84da      	strh	r2, [r3, #38]	; 0x26
    // When setting bitmap, adjust size of this widget to match.
    setWidth(bitmap.getWidth());
 8010844:	687d      	ldr	r5, [r7, #4]
 8010846:	687b      	ldr	r3, [r7, #4]
 8010848:	681b      	ldr	r3, [r3, #0]
 801084a:	3338      	adds	r3, #56	; 0x38
 801084c:	681c      	ldr	r4, [r3, #0]
 801084e:	687b      	ldr	r3, [r7, #4]
 8010850:	3326      	adds	r3, #38	; 0x26
 8010852:	4618      	mov	r0, r3
 8010854:	f00f fd16 	bl	8020284 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8010858:	4603      	mov	r3, r0
 801085a:	b21b      	sxth	r3, r3
 801085c:	4619      	mov	r1, r3
 801085e:	4628      	mov	r0, r5
 8010860:	47a0      	blx	r4
    setHeight(bitmap.getHeight());
 8010862:	687d      	ldr	r5, [r7, #4]
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	681b      	ldr	r3, [r3, #0]
 8010868:	333c      	adds	r3, #60	; 0x3c
 801086a:	681c      	ldr	r4, [r3, #0]
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	3326      	adds	r3, #38	; 0x26
 8010870:	4618      	mov	r0, r3
 8010872:	f00f fd3f 	bl	80202f4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8010876:	4603      	mov	r3, r0
 8010878:	b21b      	sxth	r3, r3
 801087a:	4619      	mov	r1, r3
 801087c:	4628      	mov	r0, r5
 801087e:	47a0      	blx	r4

    // This bool is no longer used, but maintained for backwards compat.
    hasTransparentPixels = bitmap.hasTransparentPixels();
 8010880:	687b      	ldr	r3, [r7, #4]
 8010882:	3326      	adds	r3, #38	; 0x26
 8010884:	4618      	mov	r0, r3
 8010886:	f00f fdc5 	bl	8020414 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 801088a:	4603      	mov	r3, r0
 801088c:	461a      	mov	r2, r3
 801088e:	687b      	ldr	r3, [r7, #4]
 8010890:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
}
 8010894:	bf00      	nop
 8010896:	3708      	adds	r7, #8
 8010898:	46bd      	mov	sp, r7
 801089a:	bdb0      	pop	{r4, r5, r7, pc}

0801089c <_ZNK8touchgfx5Image4drawERKNS_4RectE>:

void Image::draw(const Rect& invalidatedArea) const
{
 801089c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801089e:	b08d      	sub	sp, #52	; 0x34
 80108a0:	af04      	add	r7, sp, #16
 80108a2:	6078      	str	r0, [r7, #4]
 80108a4:	6039      	str	r1, [r7, #0]
    Rect meAbs;
 80108a6:	f107 0310 	add.w	r3, r7, #16
 80108aa:	4618      	mov	r0, r3
 80108ac:	f7fe fbc3 	bl	800f036 <_ZN8touchgfx4RectC1Ev>
    translateRectToAbsolute(meAbs); //To find our x and y coords in absolute.
 80108b0:	687a      	ldr	r2, [r7, #4]
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	3324      	adds	r3, #36	; 0x24
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	f107 0110 	add.w	r1, r7, #16
 80108be:	4610      	mov	r0, r2
 80108c0:	4798      	blx	r3

    // Calculate intersection between bitmap rect and invalidated area.
    Rect dirtyBitmapArea = bitmap.getRect() & invalidatedArea;
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80108c8:	f107 0318 	add.w	r3, r7, #24
 80108cc:	4611      	mov	r1, r2
 80108ce:	4618      	mov	r0, r3
 80108d0:	f7ff ff8a 	bl	80107e8 <_ZNK8touchgfx6Bitmap7getRectEv>
 80108d4:	f107 0308 	add.w	r3, r7, #8
 80108d8:	f107 0118 	add.w	r1, r7, #24
 80108dc:	683a      	ldr	r2, [r7, #0]
 80108de:	4618      	mov	r0, r3
 80108e0:	f7fd fdf9 	bl	800e4d6 <_ZNK8touchgfx4RectanERKS0_>

    if (!dirtyBitmapArea.isEmpty())
 80108e4:	f107 0308 	add.w	r3, r7, #8
 80108e8:	4618      	mov	r0, r3
 80108ea:	f7fd ff11 	bl	800e710 <_ZNK8touchgfx4Rect7isEmptyEv>
 80108ee:	4603      	mov	r3, r0
 80108f0:	f083 0301 	eor.w	r3, r3, #1
 80108f4:	b2db      	uxtb	r3, r3
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d017      	beq.n	801092a <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x8e>
    {
        HAL::lcd().drawPartialBitmap(bitmap, meAbs.x, meAbs.y, dirtyBitmapArea, alpha);
 80108fa:	f7fe fec9 	bl	800f690 <_ZN8touchgfx3HAL3lcdEv>
 80108fe:	6803      	ldr	r3, [r0, #0]
 8010900:	330c      	adds	r3, #12
 8010902:	681c      	ldr	r4, [r3, #0]
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801090a:	f9b7 5010 	ldrsh.w	r5, [r7, #16]
 801090e:	f9b7 6012 	ldrsh.w	r6, [r7, #18]
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010918:	2201      	movs	r2, #1
 801091a:	9202      	str	r2, [sp, #8]
 801091c:	9301      	str	r3, [sp, #4]
 801091e:	f107 0308 	add.w	r3, r7, #8
 8010922:	9300      	str	r3, [sp, #0]
 8010924:	4633      	mov	r3, r6
 8010926:	462a      	mov	r2, r5
 8010928:	47a0      	blx	r4
    }
}
 801092a:	bf00      	nop
 801092c:	3724      	adds	r7, #36	; 0x24
 801092e:	46bd      	mov	sp, r7
 8010930:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010932 <_ZNK8touchgfx5Image12getSolidRectEv>:

Rect Image::getSolidRect() const
{
 8010932:	b580      	push	{r7, lr}
 8010934:	b084      	sub	sp, #16
 8010936:	af02      	add	r7, sp, #8
 8010938:	6078      	str	r0, [r7, #4]
 801093a:	6039      	str	r1, [r7, #0]
    // If alpha is less than solid, we have an empty solid rect.
    if (alpha < 255)
 801093c:	683b      	ldr	r3, [r7, #0]
 801093e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010942:	2bff      	cmp	r3, #255	; 0xff
 8010944:	d008      	beq.n	8010958 <_ZNK8touchgfx5Image12getSolidRectEv+0x26>
    {
        return Rect(0, 0, 0, 0);
 8010946:	2300      	movs	r3, #0
 8010948:	9300      	str	r3, [sp, #0]
 801094a:	2300      	movs	r3, #0
 801094c:	2200      	movs	r2, #0
 801094e:	2100      	movs	r1, #0
 8010950:	6878      	ldr	r0, [r7, #4]
 8010952:	f7fd fd15 	bl	800e380 <_ZN8touchgfx4RectC1Essss>
 8010956:	e007      	b.n	8010968 <_ZNK8touchgfx5Image12getSolidRectEv+0x36>
    }
    // Return solid rect from bitmap (precalculated).
    return bitmap.getSolidRect();
 8010958:	683b      	ldr	r3, [r7, #0]
 801095a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	4611      	mov	r1, r2
 8010962:	4618      	mov	r0, r3
 8010964:	f00f fcfe 	bl	8020364 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
}
 8010968:	6878      	ldr	r0, [r7, #4]
 801096a:	3708      	adds	r7, #8
 801096c:	46bd      	mov	sp, r7
 801096e:	bd80      	pop	{r7, pc}

08010970 <_ZNK8touchgfx14SnapshotWidget7getTypeEv>:
     *
     *        For GUI testing only. Returns type of this drawable.
     *
     * @return TYPE_SNAPSHOTWIDGET.
     */
    virtual uint16_t getType() const
 8010970:	b480      	push	{r7}
 8010972:	b083      	sub	sp, #12
 8010974:	af00      	add	r7, sp, #0
 8010976:	6078      	str	r0, [r7, #4]
    {
        return (uint16_t)TYPE_SNAPSHOTWIDGET;
 8010978:	230c      	movs	r3, #12
    }
 801097a:	4618      	mov	r0, r3
 801097c:	370c      	adds	r7, #12
 801097e:	46bd      	mov	sp, r7
 8010980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010984:	4770      	bx	lr
	...

08010988 <_ZN8touchgfx14SnapshotWidgetC1Ev>:

#include <touchgfx/widgets/SnapshotWidget.hpp>

namespace touchgfx
{
SnapshotWidget::SnapshotWidget() : Widget(), fbCopy(0), alpha(255)
 8010988:	b580      	push	{r7, lr}
 801098a:	b082      	sub	sp, #8
 801098c:	af00      	add	r7, sp, #0
 801098e:	6078      	str	r0, [r7, #4]
 8010990:	687b      	ldr	r3, [r7, #4]
 8010992:	4618      	mov	r0, r3
 8010994:	f7fe fbf4 	bl	800f180 <_ZN8touchgfx6WidgetC1Ev>
 8010998:	4a07      	ldr	r2, [pc, #28]	; (80109b8 <_ZN8touchgfx14SnapshotWidgetC1Ev+0x30>)
 801099a:	687b      	ldr	r3, [r7, #4]
 801099c:	601a      	str	r2, [r3, #0]
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	2200      	movs	r2, #0
 80109a2:	629a      	str	r2, [r3, #40]	; 0x28
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	22ff      	movs	r2, #255	; 0xff
 80109a8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
{
}
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	4618      	mov	r0, r3
 80109b0:	3708      	adds	r7, #8
 80109b2:	46bd      	mov	sp, r7
 80109b4:	bd80      	pop	{r7, pc}
 80109b6:	bf00      	nop
 80109b8:	08024548 	.word	0x08024548

080109bc <_ZN8touchgfx14SnapshotWidgetD1Ev>:

SnapshotWidget::~SnapshotWidget()
 80109bc:	b580      	push	{r7, lr}
 80109be:	b082      	sub	sp, #8
 80109c0:	af00      	add	r7, sp, #0
 80109c2:	6078      	str	r0, [r7, #4]
 80109c4:	4a05      	ldr	r2, [pc, #20]	; (80109dc <_ZN8touchgfx14SnapshotWidgetD1Ev+0x20>)
 80109c6:	687b      	ldr	r3, [r7, #4]
 80109c8:	601a      	str	r2, [r3, #0]
 80109ca:	687b      	ldr	r3, [r7, #4]
 80109cc:	4618      	mov	r0, r3
 80109ce:	f7fe fbe9 	bl	800f1a4 <_ZN8touchgfx6WidgetD1Ev>
{
}
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	4618      	mov	r0, r3
 80109d6:	3708      	adds	r7, #8
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}
 80109dc:	08024548 	.word	0x08024548

080109e0 <_ZN8touchgfx14SnapshotWidgetD0Ev>:
SnapshotWidget::~SnapshotWidget()
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b082      	sub	sp, #8
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
}
 80109e8:	6878      	ldr	r0, [r7, #4]
 80109ea:	f7ff ffe7 	bl	80109bc <_ZN8touchgfx14SnapshotWidgetD1Ev>
 80109ee:	2130      	movs	r1, #48	; 0x30
 80109f0:	6878      	ldr	r0, [r7, #4]
 80109f2:	f011 fd16 	bl	8022422 <_ZdlPvj>
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	4618      	mov	r0, r3
 80109fa:	3708      	adds	r7, #8
 80109fc:	46bd      	mov	sp, r7
 80109fe:	bd80      	pop	{r7, pc}

08010a00 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE>:

void SnapshotWidget::draw(const Rect& invalidatedArea) const
{
 8010a00:	b5b0      	push	{r4, r5, r7, lr}
 8010a02:	b086      	sub	sp, #24
 8010a04:	af02      	add	r7, sp, #8
 8010a06:	6078      	str	r0, [r7, #4]
 8010a08:	6039      	str	r1, [r7, #0]
    if (!fbCopy)
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d028      	beq.n	8010a64 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x64>
    {
        return;
    }

    Rect absRect;
 8010a12:	f107 0308 	add.w	r3, r7, #8
 8010a16:	4618      	mov	r0, r3
 8010a18:	f7fe fb0d 	bl	800f036 <_ZN8touchgfx4RectC1Ev>
    translateRectToAbsolute(absRect);
 8010a1c:	687a      	ldr	r2, [r7, #4]
 8010a1e:	687b      	ldr	r3, [r7, #4]
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	3324      	adds	r3, #36	; 0x24
 8010a24:	681b      	ldr	r3, [r3, #0]
 8010a26:	f107 0108 	add.w	r1, r7, #8
 8010a2a:	4610      	mov	r0, r2
 8010a2c:	4798      	blx	r3
    absRect.width = rect.width;
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010a34:	81bb      	strh	r3, [r7, #12]
    absRect.height = rect.height;
 8010a36:	687b      	ldr	r3, [r7, #4]
 8010a38:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8010a3c:	81fb      	strh	r3, [r7, #14]
    HAL::lcd().blitCopy(fbCopy, absRect, invalidatedArea, alpha, false);
 8010a3e:	f7fe fe27 	bl	800f690 <_ZN8touchgfx3HAL3lcdEv>
 8010a42:	6803      	ldr	r3, [r0, #0]
 8010a44:	3310      	adds	r3, #16
 8010a46:	681c      	ldr	r4, [r3, #0]
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8010a4c:	687b      	ldr	r3, [r7, #4]
 8010a4e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010a52:	f107 0508 	add.w	r5, r7, #8
 8010a56:	2200      	movs	r2, #0
 8010a58:	9201      	str	r2, [sp, #4]
 8010a5a:	9300      	str	r3, [sp, #0]
 8010a5c:	683b      	ldr	r3, [r7, #0]
 8010a5e:	462a      	mov	r2, r5
 8010a60:	47a0      	blx	r4
 8010a62:	e000      	b.n	8010a66 <_ZNK8touchgfx14SnapshotWidget4drawERKNS_4RectE+0x66>
        return;
 8010a64:	bf00      	nop
}
 8010a66:	3710      	adds	r7, #16
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bdb0      	pop	{r4, r5, r7, pc}

08010a6c <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv>:

Rect SnapshotWidget::getSolidRect() const
{
 8010a6c:	b590      	push	{r4, r7, lr}
 8010a6e:	b085      	sub	sp, #20
 8010a70:	af02      	add	r7, sp, #8
 8010a72:	6078      	str	r0, [r7, #4]
 8010a74:	6039      	str	r1, [r7, #0]
    if (alpha < 255)
 8010a76:	683b      	ldr	r3, [r7, #0]
 8010a78:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010a7c:	2bff      	cmp	r3, #255	; 0xff
 8010a7e:	d008      	beq.n	8010a92 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x26>
    {
        return Rect(0, 0, 0, 0);
 8010a80:	2300      	movs	r3, #0
 8010a82:	9300      	str	r3, [sp, #0]
 8010a84:	2300      	movs	r3, #0
 8010a86:	2200      	movs	r2, #0
 8010a88:	2100      	movs	r1, #0
 8010a8a:	6878      	ldr	r0, [r7, #4]
 8010a8c:	f7fd fc78 	bl	800e380 <_ZN8touchgfx4RectC1Essss>
 8010a90:	e01e      	b.n	8010ad0 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x64>
    }

    if (!fbCopy)
 8010a92:	683b      	ldr	r3, [r7, #0]
 8010a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d108      	bne.n	8010aac <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x40>
    {
        return Rect(0, 0, 0, 0);
 8010a9a:	2300      	movs	r3, #0
 8010a9c:	9300      	str	r3, [sp, #0]
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	2200      	movs	r2, #0
 8010aa2:	2100      	movs	r1, #0
 8010aa4:	6878      	ldr	r0, [r7, #4]
 8010aa6:	f7fd fc6b 	bl	800e380 <_ZN8touchgfx4RectC1Essss>
 8010aaa:	e011      	b.n	8010ad0 <_ZNK8touchgfx14SnapshotWidget12getSolidRectEv+0x64>
    }
    else
    {
        return Rect(0, 0, getWidth(), getHeight());
 8010aac:	683b      	ldr	r3, [r7, #0]
 8010aae:	4618      	mov	r0, r3
 8010ab0:	f7fe fa67 	bl	800ef82 <_ZNK8touchgfx8Drawable8getWidthEv>
 8010ab4:	4603      	mov	r3, r0
 8010ab6:	461c      	mov	r4, r3
 8010ab8:	683b      	ldr	r3, [r7, #0]
 8010aba:	4618      	mov	r0, r3
 8010abc:	f7fe fa6e 	bl	800ef9c <_ZNK8touchgfx8Drawable9getHeightEv>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	9300      	str	r3, [sp, #0]
 8010ac4:	4623      	mov	r3, r4
 8010ac6:	2200      	movs	r2, #0
 8010ac8:	2100      	movs	r1, #0
 8010aca:	6878      	ldr	r0, [r7, #4]
 8010acc:	f7fd fc58 	bl	800e380 <_ZN8touchgfx4RectC1Essss>
    }
}
 8010ad0:	6878      	ldr	r0, [r7, #4]
 8010ad2:	370c      	adds	r7, #12
 8010ad4:	46bd      	mov	sp, r7
 8010ad6:	bd90      	pop	{r4, r7, pc}

08010ad8 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>:

void SnapshotWidget::makeSnapshot()
{
 8010ad8:	b580      	push	{r7, lr}
 8010ada:	b082      	sub	sp, #8
 8010adc:	af00      	add	r7, sp, #0
 8010ade:	6078      	str	r0, [r7, #4]
    fbCopy = reinterpret_cast<uint16_t*>(HAL::lcd().copyFrameBufferRegionToMemory(rect));
 8010ae0:	f7fe fdd6 	bl	800f690 <_ZN8touchgfx3HAL3lcdEv>
 8010ae4:	6803      	ldr	r3, [r0, #0]
 8010ae6:	3318      	adds	r3, #24
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	687a      	ldr	r2, [r7, #4]
 8010aec:	1d11      	adds	r1, r2, #4
 8010aee:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8010af2:	4798      	blx	r3
 8010af4:	4602      	mov	r2, r0
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	629a      	str	r2, [r3, #40]	; 0x28
}
 8010afa:	bf00      	nop
 8010afc:	3708      	adds	r7, #8
 8010afe:	46bd      	mov	sp, r7
 8010b00:	bd80      	pop	{r7, pc}

08010b02 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEt>:

void SnapshotWidget::makeSnapshot(const BitmapId bmp)
{
 8010b02:	b580      	push	{r7, lr}
 8010b04:	b082      	sub	sp, #8
 8010b06:	af00      	add	r7, sp, #0
 8010b08:	6078      	str	r0, [r7, #4]
 8010b0a:	460b      	mov	r3, r1
 8010b0c:	807b      	strh	r3, [r7, #2]
    fbCopy = reinterpret_cast<uint16_t*>(HAL::lcd().copyFrameBufferRegionToMemory(rect, bmp));
 8010b0e:	f7fe fdbf 	bl	800f690 <_ZN8touchgfx3HAL3lcdEv>
 8010b12:	6803      	ldr	r3, [r0, #0]
 8010b14:	3318      	adds	r3, #24
 8010b16:	681b      	ldr	r3, [r3, #0]
 8010b18:	687a      	ldr	r2, [r7, #4]
 8010b1a:	1d11      	adds	r1, r2, #4
 8010b1c:	887a      	ldrh	r2, [r7, #2]
 8010b1e:	4798      	blx	r3
 8010b20:	4602      	mov	r2, r0
 8010b22:	687b      	ldr	r3, [r7, #4]
 8010b24:	629a      	str	r2, [r3, #40]	; 0x28
}
 8010b26:	bf00      	nop
 8010b28:	3708      	adds	r7, #8
 8010b2a:	46bd      	mov	sp, r7
 8010b2c:	bd80      	pop	{r7, pc}

08010b2e <_ZN8touchgfx8TextArea13getTextHeightEv>:
#include <touchgfx/widgets/TextArea.hpp>

namespace touchgfx
{
int16_t TextArea::getTextHeight()
{
 8010b2e:	b580      	push	{r7, lr}
 8010b30:	b082      	sub	sp, #8
 8010b32:	af00      	add	r7, sp, #0
 8010b34:	6078      	str	r0, [r7, #4]
    if (typedText.hasValidId())
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	3326      	adds	r3, #38	; 0x26
 8010b3a:	4618      	mov	r0, r3
 8010b3c:	f7fe fe08 	bl	800f750 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 8010b40:	4603      	mov	r3, r0
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d00b      	beq.n	8010b5e <_ZN8touchgfx8TextArea13getTextHeightEv+0x30>
    {
        return getTextHeightInternal(typedText.getText());
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	3326      	adds	r3, #38	; 0x26
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	f7fe fe14 	bl	800f778 <_ZNK8touchgfx9TypedText7getTextEv>
 8010b50:	4603      	mov	r3, r0
 8010b52:	4619      	mov	r1, r3
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	f000 f906 	bl	8010d66 <_ZNK8touchgfx8TextArea21getTextHeightInternalEPKtz>
 8010b5a:	4603      	mov	r3, r0
 8010b5c:	e000      	b.n	8010b60 <_ZN8touchgfx8TextArea13getTextHeightEv+0x32>
    }
    else
    {
        return 0;
 8010b5e:	2300      	movs	r3, #0
    }
}
 8010b60:	4618      	mov	r0, r3
 8010b62:	3708      	adds	r7, #8
 8010b64:	46bd      	mov	sp, r7
 8010b66:	bd80      	pop	{r7, pc}

08010b68 <_ZNK8touchgfx8TextArea12getTextWidthEv>:

uint16_t TextArea::getTextWidth() const
{
 8010b68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b6a:	b083      	sub	sp, #12
 8010b6c:	af00      	add	r7, sp, #0
 8010b6e:	6078      	str	r0, [r7, #4]
    return typedText.hasValidId() ? typedText.getFont()->getStringWidth(typedText.getTextDirection(), typedText.getText()) : 0;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	3326      	adds	r3, #38	; 0x26
 8010b74:	4618      	mov	r0, r3
 8010b76:	f7fe fdeb 	bl	800f750 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 8010b7a:	4603      	mov	r3, r0
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d01b      	beq.n	8010bb8 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x50>
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	3326      	adds	r3, #38	; 0x26
 8010b84:	4618      	mov	r0, r3
 8010b86:	f7fe fe0d 	bl	800f7a4 <_ZNK8touchgfx9TypedText7getFontEv>
 8010b8a:	4605      	mov	r5, r0
 8010b8c:	682b      	ldr	r3, [r5, #0]
 8010b8e:	331c      	adds	r3, #28
 8010b90:	681c      	ldr	r4, [r3, #0]
 8010b92:	687b      	ldr	r3, [r7, #4]
 8010b94:	3326      	adds	r3, #38	; 0x26
 8010b96:	4618      	mov	r0, r3
 8010b98:	f7fe fe38 	bl	800f80c <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8010b9c:	4603      	mov	r3, r0
 8010b9e:	461e      	mov	r6, r3
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	3326      	adds	r3, #38	; 0x26
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	f7fe fde7 	bl	800f778 <_ZNK8touchgfx9TypedText7getTextEv>
 8010baa:	4603      	mov	r3, r0
 8010bac:	461a      	mov	r2, r3
 8010bae:	4631      	mov	r1, r6
 8010bb0:	4628      	mov	r0, r5
 8010bb2:	47a0      	blx	r4
 8010bb4:	4603      	mov	r3, r0
 8010bb6:	e000      	b.n	8010bba <_ZNK8touchgfx8TextArea12getTextWidthEv+0x52>
 8010bb8:	2300      	movs	r3, #0
}
 8010bba:	4618      	mov	r0, r3
 8010bbc:	370c      	adds	r7, #12
 8010bbe:	46bd      	mov	sp, r7
 8010bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010bc2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:

void TextArea::draw(const Rect& area) const
{
 8010bc2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bc4:	b093      	sub	sp, #76	; 0x4c
 8010bc6:	af06      	add	r7, sp, #24
 8010bc8:	60f8      	str	r0, [r7, #12]
 8010bca:	60b9      	str	r1, [r7, #8]
    if (typedText.hasValidId())
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	3326      	adds	r3, #38	; 0x26
 8010bd0:	4618      	mov	r0, r3
 8010bd2:	f7fe fdbd 	bl	800f750 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 8010bd6:	4603      	mov	r3, r0
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d04f      	beq.n	8010c7c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xba>
    {
        const Font* fontToDraw = typedText.getFont();
 8010bdc:	68fb      	ldr	r3, [r7, #12]
 8010bde:	3326      	adds	r3, #38	; 0x26
 8010be0:	4618      	mov	r0, r3
 8010be2:	f7fe fddf 	bl	800f7a4 <_ZNK8touchgfx9TypedText7getFontEv>
 8010be6:	62f8      	str	r0, [r7, #44]	; 0x2c
        if (fontToDraw != 0)
 8010be8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d046      	beq.n	8010c7c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xba>
        {
            LCD::StringVisuals visuals(fontToDraw, color, alpha, typedText.getAlignment(), linespace, rotation, typedText.getTextDirection(), indentation, wideTextAction);
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	f893 602e 	ldrb.w	r6, [r3, #46]	; 0x2e
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	3326      	adds	r3, #38	; 0x26
 8010bf8:	4618      	mov	r0, r3
 8010bfa:	f7fe fdef 	bl	800f7dc <_ZNK8touchgfx9TypedText12getAlignmentEv>
 8010bfe:	4603      	mov	r3, r0
 8010c00:	607b      	str	r3, [r7, #4]
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	8d9c      	ldrh	r4, [r3, #44]	; 0x2c
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	f893 5030 	ldrb.w	r5, [r3, #48]	; 0x30
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	3326      	adds	r3, #38	; 0x26
 8010c10:	4618      	mov	r0, r3
 8010c12:	f7fe fdfb 	bl	800f80c <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8010c16:	4603      	mov	r3, r0
 8010c18:	603b      	str	r3, [r7, #0]
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010c20:	68fa      	ldr	r2, [r7, #12]
 8010c22:	f892 1031 	ldrb.w	r1, [r2, #49]	; 0x31
 8010c26:	68fa      	ldr	r2, [r7, #12]
 8010c28:	f107 0010 	add.w	r0, r7, #16
 8010c2c:	9105      	str	r1, [sp, #20]
 8010c2e:	9304      	str	r3, [sp, #16]
 8010c30:	6839      	ldr	r1, [r7, #0]
 8010c32:	9103      	str	r1, [sp, #12]
 8010c34:	9502      	str	r5, [sp, #8]
 8010c36:	9401      	str	r4, [sp, #4]
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	9300      	str	r3, [sp, #0]
 8010c3c:	4633      	mov	r3, r6
 8010c3e:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8010c40:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010c42:	f7fe fd31 	bl	800f6a8 <_ZN8touchgfx3LCD13StringVisualsC1EPKNS_4FontENS_9colortypeEhhtNS_12TextRotationEhhNS_14WideTextActionE>
            HAL::lcd().drawString(getAbsoluteRect(), area, visuals, typedText.getText());
 8010c46:	f7fe fd23 	bl	800f690 <_ZN8touchgfx3HAL3lcdEv>
 8010c4a:	4604      	mov	r4, r0
 8010c4c:	68fa      	ldr	r2, [r7, #12]
 8010c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8010c52:	4611      	mov	r1, r2
 8010c54:	4618      	mov	r0, r3
 8010c56:	f00e fa18 	bl	801f08a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8010c5a:	68fb      	ldr	r3, [r7, #12]
 8010c5c:	3326      	adds	r3, #38	; 0x26
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f7fe fd8a 	bl	800f778 <_ZNK8touchgfx9TypedText7getTextEv>
 8010c64:	4603      	mov	r3, r0
 8010c66:	9301      	str	r3, [sp, #4]
 8010c68:	f107 0310 	add.w	r3, r7, #16
 8010c6c:	9300      	str	r3, [sp, #0]
 8010c6e:	68bb      	ldr	r3, [r7, #8]
 8010c70:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8010c74:	ca06      	ldmia	r2, {r1, r2}
 8010c76:	4620      	mov	r0, r4
 8010c78:	f00c fff4 	bl	801dc64 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz>
        }
    }
}
 8010c7c:	bf00      	nop
 8010c7e:	3734      	adds	r7, #52	; 0x34
 8010c80:	46bd      	mov	sp, r7
 8010c82:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010c84 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>:

void TextArea::setTypedText(TypedText t)
{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b082      	sub	sp, #8
 8010c88:	af00      	add	r7, sp, #0
 8010c8a:	6078      	str	r0, [r7, #4]
 8010c8c:	8039      	strh	r1, [r7, #0]
    typedText = t;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	883a      	ldrh	r2, [r7, #0]
 8010c92:	84da      	strh	r2, [r3, #38]	; 0x26
    // If this TextArea does not yet have a width and height,
    // just assign the smallest possible size to fit current text.
    if ((getWidth() == 0) && (getHeight() == 0))
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	4618      	mov	r0, r3
 8010c98:	f7fe f973 	bl	800ef82 <_ZNK8touchgfx8Drawable8getWidthEv>
 8010c9c:	4603      	mov	r3, r0
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d108      	bne.n	8010cb4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x30>
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	4618      	mov	r0, r3
 8010ca6:	f7fe f979 	bl	800ef9c <_ZNK8touchgfx8Drawable9getHeightEv>
 8010caa:	4603      	mov	r3, r0
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d101      	bne.n	8010cb4 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x30>
 8010cb0:	2301      	movs	r3, #1
 8010cb2:	e000      	b.n	8010cb6 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x32>
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d002      	beq.n	8010cc0 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE+0x3c>
    {
        resizeToCurrentText();
 8010cba:	6878      	ldr	r0, [r7, #4]
 8010cbc:	f000 f804 	bl	8010cc8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
    }
}
 8010cc0:	bf00      	nop
 8010cc2:	3708      	adds	r7, #8
 8010cc4:	46bd      	mov	sp, r7
 8010cc6:	bd80      	pop	{r7, pc}

08010cc8 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:

void TextArea::resizeToCurrentText()
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b084      	sub	sp, #16
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
    if (typedText.hasValidId())
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	3326      	adds	r3, #38	; 0x26
 8010cd4:	4618      	mov	r0, r3
 8010cd6:	f7fe fd3b 	bl	800f750 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 8010cda:	4603      	mov	r3, r0
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	d03e      	beq.n	8010d5e <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x96>
    {
        uint16_t w = getTextWidth();
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	681b      	ldr	r3, [r3, #0]
 8010ce4:	3370      	adds	r3, #112	; 0x70
 8010ce6:	681b      	ldr	r3, [r3, #0]
 8010ce8:	6878      	ldr	r0, [r7, #4]
 8010cea:	4798      	blx	r3
 8010cec:	4603      	mov	r3, r0
 8010cee:	81fb      	strh	r3, [r7, #14]
        uint16_t h = getTextHeight();
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	336c      	adds	r3, #108	; 0x6c
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	6878      	ldr	r0, [r7, #4]
 8010cfa:	4798      	blx	r3
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	81bb      	strh	r3, [r7, #12]
        if (rotation == TEXT_ROTATE_0 || rotation == TEXT_ROTATE_180)
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d004      	beq.n	8010d14 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x4c>
 8010d0a:	687b      	ldr	r3, [r7, #4]
 8010d0c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010d10:	2b02      	cmp	r3, #2
 8010d12:	d112      	bne.n	8010d3a <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x72>
        {
            setWidth(w);
 8010d14:	687a      	ldr	r2, [r7, #4]
 8010d16:	687b      	ldr	r3, [r7, #4]
 8010d18:	681b      	ldr	r3, [r3, #0]
 8010d1a:	3338      	adds	r3, #56	; 0x38
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8010d22:	4610      	mov	r0, r2
 8010d24:	4798      	blx	r3
            setHeight(h);
 8010d26:	687a      	ldr	r2, [r7, #4]
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	333c      	adds	r3, #60	; 0x3c
 8010d2e:	681b      	ldr	r3, [r3, #0]
 8010d30:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8010d34:	4610      	mov	r0, r2
 8010d36:	4798      	blx	r3
        {
            setWidth(h);
            setHeight(w);
        }
    }
}
 8010d38:	e011      	b.n	8010d5e <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x96>
            setWidth(h);
 8010d3a:	687a      	ldr	r2, [r7, #4]
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	3338      	adds	r3, #56	; 0x38
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8010d48:	4610      	mov	r0, r2
 8010d4a:	4798      	blx	r3
            setHeight(w);
 8010d4c:	687a      	ldr	r2, [r7, #4]
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	333c      	adds	r3, #60	; 0x3c
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	f9b7 100e 	ldrsh.w	r1, [r7, #14]
 8010d5a:	4610      	mov	r0, r2
 8010d5c:	4798      	blx	r3
}
 8010d5e:	bf00      	nop
 8010d60:	3710      	adds	r7, #16
 8010d62:	46bd      	mov	sp, r7
 8010d64:	bd80      	pop	{r7, pc}

08010d66 <_ZNK8touchgfx8TextArea21getTextHeightInternalEPKtz>:
        }
    }
}

int16_t TextArea::getTextHeightInternal(const Unicode::UnicodeChar* format, ...) const
{
 8010d66:	b40e      	push	{r1, r2, r3}
 8010d68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d6a:	b08e      	sub	sp, #56	; 0x38
 8010d6c:	af02      	add	r7, sp, #8
 8010d6e:	6078      	str	r0, [r7, #4]
    va_list pArg;
    va_start(pArg, format);
 8010d70:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010d74:	623b      	str	r3, [r7, #32]
    TextProvider textProvider;
 8010d76:	f107 0308 	add.w	r3, r7, #8
 8010d7a:	4618      	mov	r0, r3
 8010d7c:	f00e fe50 	bl	801fa20 <_ZN8touchgfx12TextProviderC1Ev>
    textProvider.initialize(format, pArg);
 8010d80:	f107 0308 	add.w	r3, r7, #8
 8010d84:	6a3a      	ldr	r2, [r7, #32]
 8010d86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010d88:	4618      	mov	r0, r3
 8010d8a:	f00e fe52 	bl	801fa32 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>

    int16_t numLines = HAL::lcd().getNumLines(textProvider, wideTextAction, typedText.getTextDirection(), typedText.getFont(), getWidth());
 8010d8e:	f7fe fc7f 	bl	800f690 <_ZN8touchgfx3HAL3lcdEv>
 8010d92:	687b      	ldr	r3, [r7, #4]
 8010d94:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	3326      	adds	r3, #38	; 0x26
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f7fe fd35 	bl	800f80c <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8010da2:	4603      	mov	r3, r0
 8010da4:	461d      	mov	r5, r3
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	3326      	adds	r3, #38	; 0x26
 8010daa:	4618      	mov	r0, r3
 8010dac:	f7fe fcfa 	bl	800f7a4 <_ZNK8touchgfx9TypedText7getFontEv>
 8010db0:	4606      	mov	r6, r0
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7fe f8e4 	bl	800ef82 <_ZNK8touchgfx8Drawable8getWidthEv>
 8010dba:	4603      	mov	r3, r0
 8010dbc:	f107 0008 	add.w	r0, r7, #8
 8010dc0:	9300      	str	r3, [sp, #0]
 8010dc2:	4633      	mov	r3, r6
 8010dc4:	462a      	mov	r2, r5
 8010dc6:	4621      	mov	r1, r4
 8010dc8:	f00d f971 	bl	801e0ae <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8010dcc:	4603      	mov	r3, r0
 8010dce:	85fb      	strh	r3, [r7, #46]	; 0x2e

    const Font* fontToDraw = typedText.getFont();
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	3326      	adds	r3, #38	; 0x26
 8010dd4:	4618      	mov	r0, r3
 8010dd6:	f7fe fce5 	bl	800f7a4 <_ZNK8touchgfx9TypedText7getFontEv>
 8010dda:	62b8      	str	r0, [r7, #40]	; 0x28
    int16_t textHeight = fontToDraw->getMinimumTextHeight();
 8010ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	3330      	adds	r3, #48	; 0x30
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010de6:	4798      	blx	r3
 8010de8:	4603      	mov	r3, r0
 8010dea:	84fb      	strh	r3, [r7, #38]	; 0x26

    va_end(pArg);
    return numLines * textHeight + (numLines - 1) * linespace;
 8010dec:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010dee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010df0:	fb12 f303 	smulbb	r3, r2, r3
 8010df4:	b29a      	uxth	r2, r3
 8010df6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8010dfa:	3b01      	subs	r3, #1
 8010dfc:	b299      	uxth	r1, r3
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010e02:	fb11 f303 	smulbb	r3, r1, r3
 8010e06:	b29b      	uxth	r3, r3
 8010e08:	4413      	add	r3, r2
 8010e0a:	b29b      	uxth	r3, r3
 8010e0c:	b21b      	sxth	r3, r3
}
 8010e0e:	4618      	mov	r0, r3
 8010e10:	3730      	adds	r7, #48	; 0x30
 8010e12:	46bd      	mov	sp, r7
 8010e14:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010e18:	b003      	add	sp, #12
 8010e1a:	4770      	bx	lr

08010e1c <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz>:
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

namespace touchgfx
{
int16_t TextAreaWithWildcardBase::calculateTextHeight(const Unicode::UnicodeChar* format, ...) const
{
 8010e1c:	b40e      	push	{r1, r2, r3}
 8010e1e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e20:	b08e      	sub	sp, #56	; 0x38
 8010e22:	af02      	add	r7, sp, #8
 8010e24:	6078      	str	r0, [r7, #4]
    if (!typedText.hasValidId())
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	3326      	adds	r3, #38	; 0x26
 8010e2a:	4618      	mov	r0, r3
 8010e2c:	f7fe fc90 	bl	800f750 <_ZNK8touchgfx9TypedText10hasValidIdEv>
 8010e30:	4603      	mov	r3, r0
 8010e32:	f083 0301 	eor.w	r3, r3, #1
 8010e36:	b2db      	uxtb	r3, r3
 8010e38:	2b00      	cmp	r3, #0
 8010e3a:	d001      	beq.n	8010e40 <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0x24>
    {
        return 0;
 8010e3c:	2300      	movs	r3, #0
 8010e3e:	e04e      	b.n	8010ede <_ZNK8touchgfx24TextAreaWithWildcardBase19calculateTextHeightEPKtz+0xc2>
    }

    va_list pArg;
    va_start(pArg, format);
 8010e40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8010e44:	623b      	str	r3, [r7, #32]

    TextProvider textProvider;
 8010e46:	f107 0308 	add.w	r3, r7, #8
 8010e4a:	4618      	mov	r0, r3
 8010e4c:	f00e fde8 	bl	801fa20 <_ZN8touchgfx12TextProviderC1Ev>
    textProvider.initialize(format, pArg);
 8010e50:	f107 0308 	add.w	r3, r7, #8
 8010e54:	6a3a      	ldr	r2, [r7, #32]
 8010e56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010e58:	4618      	mov	r0, r3
 8010e5a:	f00e fdea 	bl	801fa32 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>

    int16_t numLines = HAL::lcd().getNumLines(textProvider, wideTextAction, typedText.getTextDirection(), typedText.getFont(), getWidth());
 8010e5e:	f7fe fc17 	bl	800f690 <_ZN8touchgfx3HAL3lcdEv>
 8010e62:	687b      	ldr	r3, [r7, #4]
 8010e64:	f893 4031 	ldrb.w	r4, [r3, #49]	; 0x31
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	3326      	adds	r3, #38	; 0x26
 8010e6c:	4618      	mov	r0, r3
 8010e6e:	f7fe fccd 	bl	800f80c <_ZNK8touchgfx9TypedText16getTextDirectionEv>
 8010e72:	4603      	mov	r3, r0
 8010e74:	461d      	mov	r5, r3
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	3326      	adds	r3, #38	; 0x26
 8010e7a:	4618      	mov	r0, r3
 8010e7c:	f7fe fc92 	bl	800f7a4 <_ZNK8touchgfx9TypedText7getFontEv>
 8010e80:	4606      	mov	r6, r0
 8010e82:	687b      	ldr	r3, [r7, #4]
 8010e84:	4618      	mov	r0, r3
 8010e86:	f7fe f87c 	bl	800ef82 <_ZNK8touchgfx8Drawable8getWidthEv>
 8010e8a:	4603      	mov	r3, r0
 8010e8c:	f107 0008 	add.w	r0, r7, #8
 8010e90:	9300      	str	r3, [sp, #0]
 8010e92:	4633      	mov	r3, r6
 8010e94:	462a      	mov	r2, r5
 8010e96:	4621      	mov	r1, r4
 8010e98:	f00d f909 	bl	801e0ae <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8010e9c:	4603      	mov	r3, r0
 8010e9e:	85fb      	strh	r3, [r7, #46]	; 0x2e

    const Font* fontToDraw = typedText.getFont();
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	3326      	adds	r3, #38	; 0x26
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	f7fe fc7d 	bl	800f7a4 <_ZNK8touchgfx9TypedText7getFontEv>
 8010eaa:	62b8      	str	r0, [r7, #40]	; 0x28
    int16_t textHeight = fontToDraw->getMinimumTextHeight();
 8010eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010eae:	681b      	ldr	r3, [r3, #0]
 8010eb0:	3330      	adds	r3, #48	; 0x30
 8010eb2:	681b      	ldr	r3, [r3, #0]
 8010eb4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010eb6:	4798      	blx	r3
 8010eb8:	4603      	mov	r3, r0
 8010eba:	84fb      	strh	r3, [r7, #38]	; 0x26

    va_end(pArg);
    return numLines * textHeight + (numLines - 1) * linespace;
 8010ebc:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010ebe:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010ec0:	fb12 f303 	smulbb	r3, r2, r3
 8010ec4:	b29a      	uxth	r2, r3
 8010ec6:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8010eca:	3b01      	subs	r3, #1
 8010ecc:	b299      	uxth	r1, r3
 8010ece:	687b      	ldr	r3, [r7, #4]
 8010ed0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8010ed2:	fb11 f303 	smulbb	r3, r1, r3
 8010ed6:	b29b      	uxth	r3, r3
 8010ed8:	4413      	add	r3, r2
 8010eda:	b29b      	uxth	r3, r3
 8010edc:	b21b      	sxth	r3, r3
}
 8010ede:	4618      	mov	r0, r3
 8010ee0:	3730      	adds	r7, #48	; 0x30
 8010ee2:	46bd      	mov	sp, r7
 8010ee4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010ee8:	b003      	add	sp, #12
 8010eea:	4770      	bx	lr

08010eec <_ZNK8touchgfx9colortypecvtEv>:
    operator uint16_t() const
 8010eec:	b480      	push	{r7}
 8010eee:	b083      	sub	sp, #12
 8010ef0:	af00      	add	r7, sp, #0
 8010ef2:	6078      	str	r0, [r7, #4]
        return (uint16_t)color;
 8010ef4:	687b      	ldr	r3, [r7, #4]
 8010ef6:	681b      	ldr	r3, [r3, #0]
 8010ef8:	b29b      	uxth	r3, r3
    }
 8010efa:	4618      	mov	r0, r3
 8010efc:	370c      	adds	r7, #12
 8010efe:	46bd      	mov	sp, r7
 8010f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f04:	4770      	bx	lr

08010f06 <_ZNK8touchgfx9colortype10getColor32Ev>:
    inline uint32_t getColor32() const
 8010f06:	b480      	push	{r7}
 8010f08:	b083      	sub	sp, #12
 8010f0a:	af00      	add	r7, sp, #0
 8010f0c:	6078      	str	r0, [r7, #4]
        return color;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	681b      	ldr	r3, [r3, #0]
    }
 8010f12:	4618      	mov	r0, r3
 8010f14:	370c      	adds	r7, #12
 8010f16:	46bd      	mov	sp, r7
 8010f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f1c:	4770      	bx	lr
	...

08010f20 <_ZN8touchgfx10OSWrappers10initializeEv>:

// Just a dummy value to insert in the VSYNC queue.
static uint32_t dummy = 0x5a;

void OSWrappers::initialize()
{
 8010f20:	b580      	push	{r7, lr}
 8010f22:	b084      	sub	sp, #16
 8010f24:	af00      	add	r7, sp, #0
    // Create a queue of length 1
    osSemaphoreDef(frame_buffer_sem);
 8010f26:	2300      	movs	r3, #0
 8010f28:	60fb      	str	r3, [r7, #12]
    frame_buffer_sem = osSemaphoreCreate(osSemaphore(frame_buffer_sem), 1); // Binary semaphore
 8010f2a:	f107 030c 	add.w	r3, r7, #12
 8010f2e:	2101      	movs	r1, #1
 8010f30:	4618      	mov	r0, r3
 8010f32:	f000 f9dc 	bl	80112ee <osSemaphoreCreate>
 8010f36:	4602      	mov	r2, r0
 8010f38:	4b0d      	ldr	r3, [pc, #52]	; (8010f70 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8010f3a:	601a      	str	r2, [r3, #0]
    osSemaphoreWait(frame_buffer_sem, osWaitForever); // take the lock
 8010f3c:	4b0c      	ldr	r3, [pc, #48]	; (8010f70 <_ZN8touchgfx10OSWrappers10initializeEv+0x50>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	f04f 31ff 	mov.w	r1, #4294967295
 8010f44:	4618      	mov	r0, r3
 8010f46:	f000 f9f7 	bl	8011338 <osSemaphoreWait>

    // Create a queue of length 1
    osMessageQDef(vsync_queue, 1, uint32_t);
 8010f4a:	4a0a      	ldr	r2, [pc, #40]	; (8010f74 <_ZN8touchgfx10OSWrappers10initializeEv+0x54>)
 8010f4c:	1d3b      	adds	r3, r7, #4
 8010f4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010f52:	e883 0003 	stmia.w	r3, {r0, r1}
    vsync_queue = osMessageCreate(osMessageQ(vsync_queue),NULL);
 8010f56:	1d3b      	adds	r3, r7, #4
 8010f58:	2100      	movs	r1, #0
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	f000 fa70 	bl	8011440 <osMessageCreate>
 8010f60:	4602      	mov	r2, r0
 8010f62:	4b05      	ldr	r3, [pc, #20]	; (8010f78 <_ZN8touchgfx10OSWrappers10initializeEv+0x58>)
 8010f64:	601a      	str	r2, [r3, #0]
}
 8010f66:	bf00      	nop
 8010f68:	3710      	adds	r7, #16
 8010f6a:	46bd      	mov	sp, r7
 8010f6c:	bd80      	pop	{r7, pc}
 8010f6e:	bf00      	nop
 8010f70:	20000134 	.word	0x20000134
 8010f74:	080238f4 	.word	0x080238f4
 8010f78:	20000138 	.word	0x20000138

08010f7c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:

void OSWrappers::takeFrameBufferSemaphore()
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 8010f80:	4b09      	ldr	r3, [pc, #36]	; (8010fa8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x2c>)
 8010f82:	681b      	ldr	r3, [r3, #0]
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d105      	bne.n	8010f94 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x18>
 8010f88:	4b08      	ldr	r3, [pc, #32]	; (8010fac <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x30>)
 8010f8a:	4a09      	ldr	r2, [pc, #36]	; (8010fb0 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x34>)
 8010f8c:	211f      	movs	r1, #31
 8010f8e:	4809      	ldr	r0, [pc, #36]	; (8010fb4 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x38>)
 8010f90:	f011 fa64 	bl	802245c <__assert_func>
    osSemaphoreWait(frame_buffer_sem, osWaitForever);
 8010f94:	4b04      	ldr	r3, [pc, #16]	; (8010fa8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0x2c>)
 8010f96:	681b      	ldr	r3, [r3, #0]
 8010f98:	f04f 31ff 	mov.w	r1, #4294967295
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	f000 f9cb 	bl	8011338 <osSemaphoreWait>
}
 8010fa2:	bf00      	nop
 8010fa4:	bd80      	pop	{r7, pc}
 8010fa6:	bf00      	nop
 8010fa8:	20000134 	.word	0x20000134
 8010fac:	080238fc 	.word	0x080238fc
 8010fb0:	08024630 	.word	0x08024630
 8010fb4:	08023910 	.word	0x08023910

08010fb8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:

void OSWrappers::giveFrameBufferSemaphore()
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 8010fbc:	4b08      	ldr	r3, [pc, #32]	; (8010fe0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x28>)
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	2b00      	cmp	r3, #0
 8010fc2:	d105      	bne.n	8010fd0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x18>
 8010fc4:	4b07      	ldr	r3, [pc, #28]	; (8010fe4 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x2c>)
 8010fc6:	4a08      	ldr	r2, [pc, #32]	; (8010fe8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x30>)
 8010fc8:	2125      	movs	r1, #37	; 0x25
 8010fca:	4808      	ldr	r0, [pc, #32]	; (8010fec <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x34>)
 8010fcc:	f011 fa46 	bl	802245c <__assert_func>
    osSemaphoreRelease(frame_buffer_sem);
 8010fd0:	4b03      	ldr	r3, [pc, #12]	; (8010fe0 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x28>)
 8010fd2:	681b      	ldr	r3, [r3, #0]
 8010fd4:	4618      	mov	r0, r3
 8010fd6:	f000 f9fd 	bl	80113d4 <osSemaphoreRelease>
}
 8010fda:	bf00      	nop
 8010fdc:	bd80      	pop	{r7, pc}
 8010fde:	bf00      	nop
 8010fe0:	20000134 	.word	0x20000134
 8010fe4:	080238fc 	.word	0x080238fc
 8010fe8:	08024670 	.word	0x08024670
 8010fec:	08023910 	.word	0x08023910

08010ff0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:

void OSWrappers::tryTakeFrameBufferSemaphore()
{
 8010ff0:	b580      	push	{r7, lr}
 8010ff2:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 8010ff4:	4b08      	ldr	r3, [pc, #32]	; (8011018 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x28>)
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	2b00      	cmp	r3, #0
 8010ffa:	d105      	bne.n	8011008 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x18>
 8010ffc:	4b07      	ldr	r3, [pc, #28]	; (801101c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x2c>)
 8010ffe:	4a08      	ldr	r2, [pc, #32]	; (8011020 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x30>)
 8011000:	212b      	movs	r1, #43	; 0x2b
 8011002:	4808      	ldr	r0, [pc, #32]	; (8011024 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x34>)
 8011004:	f011 fa2a 	bl	802245c <__assert_func>
    osSemaphoreWait(frame_buffer_sem, 0);
 8011008:	4b03      	ldr	r3, [pc, #12]	; (8011018 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0x28>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	2100      	movs	r1, #0
 801100e:	4618      	mov	r0, r3
 8011010:	f000 f992 	bl	8011338 <osSemaphoreWait>
}
 8011014:	bf00      	nop
 8011016:	bd80      	pop	{r7, pc}
 8011018:	20000134 	.word	0x20000134
 801101c:	080238fc 	.word	0x080238fc
 8011020:	080246b0 	.word	0x080246b0
 8011024:	08023910 	.word	0x08023910

08011028 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:

void OSWrappers::giveFrameBufferSemaphoreFromISR()
{
 8011028:	b580      	push	{r7, lr}
 801102a:	af00      	add	r7, sp, #0
    assert(frame_buffer_sem);
 801102c:	4b08      	ldr	r3, [pc, #32]	; (8011050 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>)
 801102e:	681b      	ldr	r3, [r3, #0]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d105      	bne.n	8011040 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x18>
 8011034:	4b07      	ldr	r3, [pc, #28]	; (8011054 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x2c>)
 8011036:	4a08      	ldr	r2, [pc, #32]	; (8011058 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x30>)
 8011038:	2131      	movs	r1, #49	; 0x31
 801103a:	4808      	ldr	r0, [pc, #32]	; (801105c <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x34>)
 801103c:	f011 fa0e 	bl	802245c <__assert_func>
    osSemaphoreRelease(frame_buffer_sem);
 8011040:	4b03      	ldr	r3, [pc, #12]	; (8011050 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv+0x28>)
 8011042:	681b      	ldr	r3, [r3, #0]
 8011044:	4618      	mov	r0, r3
 8011046:	f000 f9c5 	bl	80113d4 <osSemaphoreRelease>
}
 801104a:	bf00      	nop
 801104c:	bd80      	pop	{r7, pc}
 801104e:	bf00      	nop
 8011050:	20000134 	.word	0x20000134
 8011054:	080238fc 	.word	0x080238fc
 8011058:	080246f0 	.word	0x080246f0
 801105c:	08023910 	.word	0x08023910

08011060 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:

void OSWrappers::signalVSync()
{
 8011060:	b580      	push	{r7, lr}
 8011062:	af00      	add	r7, sp, #0
    if (vsync_queue)
 8011064:	4b06      	ldr	r3, [pc, #24]	; (8011080 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x20>)
 8011066:	681b      	ldr	r3, [r3, #0]
 8011068:	2b00      	cmp	r3, #0
 801106a:	d007      	beq.n	801107c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x1c>
    {
        osMessagePut(vsync_queue, dummy, 0);
 801106c:	4b04      	ldr	r3, [pc, #16]	; (8011080 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x20>)
 801106e:	6818      	ldr	r0, [r3, #0]
 8011070:	4b04      	ldr	r3, [pc, #16]	; (8011084 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x24>)
 8011072:	681b      	ldr	r3, [r3, #0]
 8011074:	2200      	movs	r2, #0
 8011076:	4619      	mov	r1, r3
 8011078:	f000 f9f4 	bl	8011464 <osMessagePut>
    }
}
 801107c:	bf00      	nop
 801107e:	bd80      	pop	{r7, pc}
 8011080:	20000138 	.word	0x20000138
 8011084:	2000004c 	.word	0x2000004c

08011088 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:

void OSWrappers::waitForVSync()
{
 8011088:	b580      	push	{r7, lr}
 801108a:	b086      	sub	sp, #24
 801108c:	af00      	add	r7, sp, #0
    if (vsync_queue)
 801108e:	4b0c      	ldr	r3, [pc, #48]	; (80110c0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x38>)
 8011090:	681b      	ldr	r3, [r3, #0]
 8011092:	2b00      	cmp	r3, #0
 8011094:	d00f      	beq.n	80110b6 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x2e>
    {
        // First make sure the queue is empty, by trying to remove an element with 0 timeout.
        osMessageGet(vsync_queue, 0);
 8011096:	4b0a      	ldr	r3, [pc, #40]	; (80110c0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x38>)
 8011098:	6819      	ldr	r1, [r3, #0]
 801109a:	463b      	mov	r3, r7
 801109c:	2200      	movs	r2, #0
 801109e:	4618      	mov	r0, r3
 80110a0:	f000 fa20 	bl	80114e4 <osMessageGet>

        // Then, wait for next VSYNC to occur.
        osMessageGet(vsync_queue, osWaitForever);
 80110a4:	4b06      	ldr	r3, [pc, #24]	; (80110c0 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x38>)
 80110a6:	6819      	ldr	r1, [r3, #0]
 80110a8:	f107 030c 	add.w	r3, r7, #12
 80110ac:	f04f 32ff 	mov.w	r2, #4294967295
 80110b0:	4618      	mov	r0, r3
 80110b2:	f000 fa17 	bl	80114e4 <osMessageGet>
    }
}
 80110b6:	bf00      	nop
 80110b8:	3718      	adds	r7, #24
 80110ba:	46bd      	mov	sp, r7
 80110bc:	bd80      	pop	{r7, pc}
 80110be:	bf00      	nop
 80110c0:	20000138 	.word	0x20000138

080110c4 <_ZL12IdleTaskHookPv>:
// to inform TouchGFX of when the idle task is switched in/out and call the
// setMCUActive function accordingly (see below).

//FreeRTOS hook function being called when idle task is switched in or out.
static portBASE_TYPE IdleTaskHook(void* p)
{
 80110c4:	b580      	push	{r7, lr}
 80110c6:	b082      	sub	sp, #8
 80110c8:	af00      	add	r7, sp, #0
 80110ca:	6078      	str	r0, [r7, #4]
    if ((int)p) //idle task sched out
 80110cc:	687b      	ldr	r3, [r7, #4]
 80110ce:	2b00      	cmp	r3, #0
 80110d0:	d007      	beq.n	80110e2 <_ZL12IdleTaskHookPv+0x1e>
    {
        touchgfx::HAL::getInstance()->setMCUActive(true);
 80110d2:	f7fe f9d3 	bl	800f47c <_ZN8touchgfx3HAL11getInstanceEv>
 80110d6:	4603      	mov	r3, r0
 80110d8:	2101      	movs	r1, #1
 80110da:	4618      	mov	r0, r3
 80110dc:	f00c fbe6 	bl	801d8ac <_ZN8touchgfx3HAL12setMCUActiveEb>
 80110e0:	e006      	b.n	80110f0 <_ZL12IdleTaskHookPv+0x2c>
    }
    else //idle task sched in
    {
        touchgfx::HAL::getInstance()->setMCUActive(false);
 80110e2:	f7fe f9cb 	bl	800f47c <_ZN8touchgfx3HAL11getInstanceEv>
 80110e6:	4603      	mov	r3, r0
 80110e8:	2100      	movs	r1, #0
 80110ea:	4618      	mov	r0, r3
 80110ec:	f00c fbde 	bl	801d8ac <_ZN8touchgfx3HAL12setMCUActiveEb>
    }
    return pdTRUE;
 80110f0:	2301      	movs	r3, #1
}
 80110f2:	4618      	mov	r0, r3
 80110f4:	3708      	adds	r7, #8
 80110f6:	46bd      	mov	sp, r7
 80110f8:	bd80      	pop	{r7, pc}

080110fa <vApplicationStackOverflowHook>:

extern "C"
{
    void vApplicationStackOverflowHook(xTaskHandle xTask,
                                       signed portCHAR* pcTaskName)
    {
 80110fa:	b480      	push	{r7}
 80110fc:	b083      	sub	sp, #12
 80110fe:	af00      	add	r7, sp, #0
 8011100:	6078      	str	r0, [r7, #4]
 8011102:	6039      	str	r1, [r7, #0]
        while (1);
 8011104:	e7fe      	b.n	8011104 <vApplicationStackOverflowHook+0xa>

08011106 <vApplicationMallocFailedHook>:
    }

    void vApplicationMallocFailedHook(xTaskHandle xTask,
                                      signed portCHAR* pcTaskName)
    {
 8011106:	b480      	push	{r7}
 8011108:	b083      	sub	sp, #12
 801110a:	af00      	add	r7, sp, #0
 801110c:	6078      	str	r0, [r7, #4]
 801110e:	6039      	str	r1, [r7, #0]
        while (1);
 8011110:	e7fe      	b.n	8011110 <vApplicationMallocFailedHook+0xa>
	...

08011114 <vApplicationIdleHook>:
    }

    void vApplicationIdleHook(void)
    {
 8011114:	b580      	push	{r7, lr}
 8011116:	af00      	add	r7, sp, #0
        // Set task tag in order to have the "IdleTaskHook" function called when the idle task is
        // switched in/out. Used solely for measuring MCU load, and can be removed if MCU load
        // readout is not needed.
        vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 8011118:	4902      	ldr	r1, [pc, #8]	; (8011124 <vApplicationIdleHook+0x10>)
 801111a:	2000      	movs	r0, #0
 801111c:	f001 fd14 	bl	8012b48 <vTaskSetApplicationTaskTag>
    }
 8011120:	bf00      	nop
 8011122:	bd80      	pop	{r7, pc}
 8011124:	080110c5 	.word	0x080110c5

08011128 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011128:	b480      	push	{r7}
 801112a:	b087      	sub	sp, #28
 801112c:	af00      	add	r7, sp, #0
 801112e:	60f8      	str	r0, [r7, #12]
 8011130:	60b9      	str	r1, [r7, #8]
 8011132:	4613      	mov	r3, r2
 8011134:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011136:	2301      	movs	r3, #1
 8011138:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801113a:	2300      	movs	r3, #0
 801113c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801113e:	4b1f      	ldr	r3, [pc, #124]	; (80111bc <FATFS_LinkDriverEx+0x94>)
 8011140:	7a5b      	ldrb	r3, [r3, #9]
 8011142:	b2db      	uxtb	r3, r3
 8011144:	2b00      	cmp	r3, #0
 8011146:	d131      	bne.n	80111ac <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011148:	4b1c      	ldr	r3, [pc, #112]	; (80111bc <FATFS_LinkDriverEx+0x94>)
 801114a:	7a5b      	ldrb	r3, [r3, #9]
 801114c:	b2db      	uxtb	r3, r3
 801114e:	461a      	mov	r2, r3
 8011150:	4b1a      	ldr	r3, [pc, #104]	; (80111bc <FATFS_LinkDriverEx+0x94>)
 8011152:	2100      	movs	r1, #0
 8011154:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011156:	4b19      	ldr	r3, [pc, #100]	; (80111bc <FATFS_LinkDriverEx+0x94>)
 8011158:	7a5b      	ldrb	r3, [r3, #9]
 801115a:	b2db      	uxtb	r3, r3
 801115c:	4a17      	ldr	r2, [pc, #92]	; (80111bc <FATFS_LinkDriverEx+0x94>)
 801115e:	009b      	lsls	r3, r3, #2
 8011160:	4413      	add	r3, r2
 8011162:	68fa      	ldr	r2, [r7, #12]
 8011164:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011166:	4b15      	ldr	r3, [pc, #84]	; (80111bc <FATFS_LinkDriverEx+0x94>)
 8011168:	7a5b      	ldrb	r3, [r3, #9]
 801116a:	b2db      	uxtb	r3, r3
 801116c:	461a      	mov	r2, r3
 801116e:	4b13      	ldr	r3, [pc, #76]	; (80111bc <FATFS_LinkDriverEx+0x94>)
 8011170:	4413      	add	r3, r2
 8011172:	79fa      	ldrb	r2, [r7, #7]
 8011174:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011176:	4b11      	ldr	r3, [pc, #68]	; (80111bc <FATFS_LinkDriverEx+0x94>)
 8011178:	7a5b      	ldrb	r3, [r3, #9]
 801117a:	b2db      	uxtb	r3, r3
 801117c:	1c5a      	adds	r2, r3, #1
 801117e:	b2d1      	uxtb	r1, r2
 8011180:	4a0e      	ldr	r2, [pc, #56]	; (80111bc <FATFS_LinkDriverEx+0x94>)
 8011182:	7251      	strb	r1, [r2, #9]
 8011184:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011186:	7dbb      	ldrb	r3, [r7, #22]
 8011188:	3330      	adds	r3, #48	; 0x30
 801118a:	b2da      	uxtb	r2, r3
 801118c:	68bb      	ldr	r3, [r7, #8]
 801118e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011190:	68bb      	ldr	r3, [r7, #8]
 8011192:	3301      	adds	r3, #1
 8011194:	223a      	movs	r2, #58	; 0x3a
 8011196:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011198:	68bb      	ldr	r3, [r7, #8]
 801119a:	3302      	adds	r3, #2
 801119c:	222f      	movs	r2, #47	; 0x2f
 801119e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80111a0:	68bb      	ldr	r3, [r7, #8]
 80111a2:	3303      	adds	r3, #3
 80111a4:	2200      	movs	r2, #0
 80111a6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80111a8:	2300      	movs	r3, #0
 80111aa:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80111ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80111ae:	4618      	mov	r0, r3
 80111b0:	371c      	adds	r7, #28
 80111b2:	46bd      	mov	sp, r7
 80111b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b8:	4770      	bx	lr
 80111ba:	bf00      	nop
 80111bc:	2000013c 	.word	0x2000013c

080111c0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80111c0:	b580      	push	{r7, lr}
 80111c2:	b082      	sub	sp, #8
 80111c4:	af00      	add	r7, sp, #0
 80111c6:	6078      	str	r0, [r7, #4]
 80111c8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80111ca:	2200      	movs	r2, #0
 80111cc:	6839      	ldr	r1, [r7, #0]
 80111ce:	6878      	ldr	r0, [r7, #4]
 80111d0:	f7ff ffaa 	bl	8011128 <FATFS_LinkDriverEx>
 80111d4:	4603      	mov	r3, r0
}
 80111d6:	4618      	mov	r0, r3
 80111d8:	3708      	adds	r7, #8
 80111da:	46bd      	mov	sp, r7
 80111dc:	bd80      	pop	{r7, pc}

080111de <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80111de:	b480      	push	{r7}
 80111e0:	b085      	sub	sp, #20
 80111e2:	af00      	add	r7, sp, #0
 80111e4:	4603      	mov	r3, r0
 80111e6:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80111e8:	2300      	movs	r3, #0
 80111ea:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80111ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80111f0:	2b84      	cmp	r3, #132	; 0x84
 80111f2:	d005      	beq.n	8011200 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80111f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80111f8:	68fb      	ldr	r3, [r7, #12]
 80111fa:	4413      	add	r3, r2
 80111fc:	3303      	adds	r3, #3
 80111fe:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011200:	68fb      	ldr	r3, [r7, #12]
}
 8011202:	4618      	mov	r0, r3
 8011204:	3714      	adds	r7, #20
 8011206:	46bd      	mov	sp, r7
 8011208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120c:	4770      	bx	lr

0801120e <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 801120e:	b480      	push	{r7}
 8011210:	b083      	sub	sp, #12
 8011212:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011214:	f3ef 8305 	mrs	r3, IPSR
 8011218:	607b      	str	r3, [r7, #4]
  return(result);
 801121a:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 801121c:	2b00      	cmp	r3, #0
 801121e:	bf14      	ite	ne
 8011220:	2301      	movne	r3, #1
 8011222:	2300      	moveq	r3, #0
 8011224:	b2db      	uxtb	r3, r3
}
 8011226:	4618      	mov	r0, r3
 8011228:	370c      	adds	r7, #12
 801122a:	46bd      	mov	sp, r7
 801122c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011230:	4770      	bx	lr

08011232 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011232:	b580      	push	{r7, lr}
 8011234:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011236:	f001 fab1 	bl	801279c <vTaskStartScheduler>
  
  return osOK;
 801123a:	2300      	movs	r3, #0
}
 801123c:	4618      	mov	r0, r3
 801123e:	bd80      	pop	{r7, pc}

08011240 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8011240:	b580      	push	{r7, lr}
 8011242:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8011244:	f001 ff18 	bl	8013078 <xTaskGetSchedulerState>
 8011248:	4603      	mov	r3, r0
 801124a:	2b01      	cmp	r3, #1
 801124c:	d101      	bne.n	8011252 <osKernelRunning+0x12>
    return 0;
 801124e:	2300      	movs	r3, #0
 8011250:	e000      	b.n	8011254 <osKernelRunning+0x14>
  else
    return 1;
 8011252:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8011254:	4618      	mov	r0, r3
 8011256:	bd80      	pop	{r7, pc}

08011258 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8011258:	b580      	push	{r7, lr}
 801125a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 801125c:	f7ff ffd7 	bl	801120e <inHandlerMode>
 8011260:	4603      	mov	r3, r0
 8011262:	2b00      	cmp	r3, #0
 8011264:	d003      	beq.n	801126e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8011266:	f001 fb9f 	bl	80129a8 <xTaskGetTickCountFromISR>
 801126a:	4603      	mov	r3, r0
 801126c:	e002      	b.n	8011274 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 801126e:	f001 fb8b 	bl	8012988 <xTaskGetTickCount>
 8011272:	4603      	mov	r3, r0
  }
}
 8011274:	4618      	mov	r0, r3
 8011276:	bd80      	pop	{r7, pc}

08011278 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011278:	b5f0      	push	{r4, r5, r6, r7, lr}
 801127a:	b087      	sub	sp, #28
 801127c:	af02      	add	r7, sp, #8
 801127e:	6078      	str	r0, [r7, #4]
 8011280:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	685c      	ldr	r4, [r3, #4]
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801128e:	b29e      	uxth	r6, r3
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011296:	4618      	mov	r0, r3
 8011298:	f7ff ffa1 	bl	80111de <makeFreeRtosPriority>
 801129c:	4602      	mov	r2, r0
 801129e:	f107 030c 	add.w	r3, r7, #12
 80112a2:	9301      	str	r3, [sp, #4]
 80112a4:	9200      	str	r2, [sp, #0]
 80112a6:	683b      	ldr	r3, [r7, #0]
 80112a8:	4632      	mov	r2, r6
 80112aa:	4629      	mov	r1, r5
 80112ac:	4620      	mov	r0, r4
 80112ae:	f001 f908 	bl	80124c2 <xTaskCreate>
 80112b2:	4603      	mov	r3, r0
 80112b4:	2b01      	cmp	r3, #1
 80112b6:	d001      	beq.n	80112bc <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80112b8:	2300      	movs	r3, #0
 80112ba:	e000      	b.n	80112be <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80112bc:	68fb      	ldr	r3, [r7, #12]
}
 80112be:	4618      	mov	r0, r3
 80112c0:	3714      	adds	r7, #20
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080112c6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80112c6:	b580      	push	{r7, lr}
 80112c8:	b084      	sub	sp, #16
 80112ca:	af00      	add	r7, sp, #0
 80112cc:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80112ce:	687b      	ldr	r3, [r7, #4]
 80112d0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80112d2:	68fb      	ldr	r3, [r7, #12]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d001      	beq.n	80112dc <osDelay+0x16>
 80112d8:	68fb      	ldr	r3, [r7, #12]
 80112da:	e000      	b.n	80112de <osDelay+0x18>
 80112dc:	2301      	movs	r3, #1
 80112de:	4618      	mov	r0, r3
 80112e0:	f001 fa26 	bl	8012730 <vTaskDelay>
  
  return osOK;
 80112e4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80112e6:	4618      	mov	r0, r3
 80112e8:	3710      	adds	r7, #16
 80112ea:	46bd      	mov	sp, r7
 80112ec:	bd80      	pop	{r7, pc}

080112ee <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80112ee:	b580      	push	{r7, lr}
 80112f0:	b084      	sub	sp, #16
 80112f2:	af00      	add	r7, sp, #0
 80112f4:	6078      	str	r0, [r7, #4]
 80112f6:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 80112f8:	683b      	ldr	r3, [r7, #0]
 80112fa:	2b01      	cmp	r3, #1
 80112fc:	d110      	bne.n	8011320 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 80112fe:	2203      	movs	r2, #3
 8011300:	2100      	movs	r1, #0
 8011302:	2001      	movs	r0, #1
 8011304:	f000 fa80 	bl	8011808 <xQueueGenericCreate>
 8011308:	60f8      	str	r0, [r7, #12]
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	2b00      	cmp	r3, #0
 801130e:	d005      	beq.n	801131c <osSemaphoreCreate+0x2e>
 8011310:	2300      	movs	r3, #0
 8011312:	2200      	movs	r2, #0
 8011314:	2100      	movs	r1, #0
 8011316:	68f8      	ldr	r0, [r7, #12]
 8011318:	f000 fb06 	bl	8011928 <xQueueGenericSend>
    return sema;
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	e006      	b.n	801132e <osSemaphoreCreate+0x40>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
 8011320:	683b      	ldr	r3, [r7, #0]
 8011322:	683a      	ldr	r2, [r7, #0]
 8011324:	4611      	mov	r1, r2
 8011326:	4618      	mov	r0, r3
 8011328:	f000 fac8 	bl	80118bc <xQueueCreateCountingSemaphore>
 801132c:	4603      	mov	r3, r0
#else
    return NULL;
#endif
  }
#endif
}
 801132e:	4618      	mov	r0, r3
 8011330:	3710      	adds	r7, #16
 8011332:	46bd      	mov	sp, r7
 8011334:	bd80      	pop	{r7, pc}
	...

08011338 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8011338:	b580      	push	{r7, lr}
 801133a:	b084      	sub	sp, #16
 801133c:	af00      	add	r7, sp, #0
 801133e:	6078      	str	r0, [r7, #4]
 8011340:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011342:	2300      	movs	r3, #0
 8011344:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8011346:	687b      	ldr	r3, [r7, #4]
 8011348:	2b00      	cmp	r3, #0
 801134a:	d101      	bne.n	8011350 <osSemaphoreWait+0x18>
    return osErrorParameter;
 801134c:	2380      	movs	r3, #128	; 0x80
 801134e:	e03a      	b.n	80113c6 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8011350:	2300      	movs	r3, #0
 8011352:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	f1b3 3fff 	cmp.w	r3, #4294967295
 801135a:	d103      	bne.n	8011364 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 801135c:	f04f 33ff 	mov.w	r3, #4294967295
 8011360:	60fb      	str	r3, [r7, #12]
 8011362:	e009      	b.n	8011378 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8011364:	683b      	ldr	r3, [r7, #0]
 8011366:	2b00      	cmp	r3, #0
 8011368:	d006      	beq.n	8011378 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 801136a:	683b      	ldr	r3, [r7, #0]
 801136c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801136e:	68fb      	ldr	r3, [r7, #12]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d101      	bne.n	8011378 <osSemaphoreWait+0x40>
      ticks = 1;
 8011374:	2301      	movs	r3, #1
 8011376:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011378:	f7ff ff49 	bl	801120e <inHandlerMode>
 801137c:	4603      	mov	r3, r0
 801137e:	2b00      	cmp	r3, #0
 8011380:	d017      	beq.n	80113b2 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011382:	f107 0308 	add.w	r3, r7, #8
 8011386:	461a      	mov	r2, r3
 8011388:	2100      	movs	r1, #0
 801138a:	6878      	ldr	r0, [r7, #4]
 801138c:	f000 feee 	bl	801216c <xQueueReceiveFromISR>
 8011390:	4603      	mov	r3, r0
 8011392:	2b01      	cmp	r3, #1
 8011394:	d001      	beq.n	801139a <osSemaphoreWait+0x62>
      return osErrorOS;
 8011396:	23ff      	movs	r3, #255	; 0xff
 8011398:	e015      	b.n	80113c6 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 801139a:	68bb      	ldr	r3, [r7, #8]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d011      	beq.n	80113c4 <osSemaphoreWait+0x8c>
 80113a0:	4b0b      	ldr	r3, [pc, #44]	; (80113d0 <osSemaphoreWait+0x98>)
 80113a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80113a6:	601a      	str	r2, [r3, #0]
 80113a8:	f3bf 8f4f 	dsb	sy
 80113ac:	f3bf 8f6f 	isb	sy
 80113b0:	e008      	b.n	80113c4 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80113b2:	68f9      	ldr	r1, [r7, #12]
 80113b4:	6878      	ldr	r0, [r7, #4]
 80113b6:	f000 fdc9 	bl	8011f4c <xQueueSemaphoreTake>
 80113ba:	4603      	mov	r3, r0
 80113bc:	2b01      	cmp	r3, #1
 80113be:	d001      	beq.n	80113c4 <osSemaphoreWait+0x8c>
    return osErrorOS;
 80113c0:	23ff      	movs	r3, #255	; 0xff
 80113c2:	e000      	b.n	80113c6 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80113c4:	2300      	movs	r3, #0
}
 80113c6:	4618      	mov	r0, r3
 80113c8:	3710      	adds	r7, #16
 80113ca:	46bd      	mov	sp, r7
 80113cc:	bd80      	pop	{r7, pc}
 80113ce:	bf00      	nop
 80113d0:	e000ed04 	.word	0xe000ed04

080113d4 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80113d4:	b580      	push	{r7, lr}
 80113d6:	b084      	sub	sp, #16
 80113d8:	af00      	add	r7, sp, #0
 80113da:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 80113dc:	2300      	movs	r3, #0
 80113de:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 80113e0:	2300      	movs	r3, #0
 80113e2:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 80113e4:	f7ff ff13 	bl	801120e <inHandlerMode>
 80113e8:	4603      	mov	r3, r0
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d016      	beq.n	801141c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80113ee:	f107 0308 	add.w	r3, r7, #8
 80113f2:	4619      	mov	r1, r3
 80113f4:	6878      	ldr	r0, [r7, #4]
 80113f6:	f000 fc35 	bl	8011c64 <xQueueGiveFromISR>
 80113fa:	4603      	mov	r3, r0
 80113fc:	2b01      	cmp	r3, #1
 80113fe:	d001      	beq.n	8011404 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8011400:	23ff      	movs	r3, #255	; 0xff
 8011402:	e017      	b.n	8011434 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011404:	68bb      	ldr	r3, [r7, #8]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d013      	beq.n	8011432 <osSemaphoreRelease+0x5e>
 801140a:	4b0c      	ldr	r3, [pc, #48]	; (801143c <osSemaphoreRelease+0x68>)
 801140c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011410:	601a      	str	r2, [r3, #0]
 8011412:	f3bf 8f4f 	dsb	sy
 8011416:	f3bf 8f6f 	isb	sy
 801141a:	e00a      	b.n	8011432 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 801141c:	2300      	movs	r3, #0
 801141e:	2200      	movs	r2, #0
 8011420:	2100      	movs	r1, #0
 8011422:	6878      	ldr	r0, [r7, #4]
 8011424:	f000 fa80 	bl	8011928 <xQueueGenericSend>
 8011428:	4603      	mov	r3, r0
 801142a:	2b01      	cmp	r3, #1
 801142c:	d001      	beq.n	8011432 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 801142e:	23ff      	movs	r3, #255	; 0xff
 8011430:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8011432:	68fb      	ldr	r3, [r7, #12]
}
 8011434:	4618      	mov	r0, r3
 8011436:	3710      	adds	r7, #16
 8011438:	46bd      	mov	sp, r7
 801143a:	bd80      	pop	{r7, pc}
 801143c:	e000ed04 	.word	0xe000ed04

08011440 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8011440:	b580      	push	{r7, lr}
 8011442:	b082      	sub	sp, #8
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
 8011448:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801144a:	687b      	ldr	r3, [r7, #4]
 801144c:	6818      	ldr	r0, [r3, #0]
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	685b      	ldr	r3, [r3, #4]
 8011452:	2200      	movs	r2, #0
 8011454:	4619      	mov	r1, r3
 8011456:	f000 f9d7 	bl	8011808 <xQueueGenericCreate>
 801145a:	4603      	mov	r3, r0
#endif
}
 801145c:	4618      	mov	r0, r3
 801145e:	3708      	adds	r7, #8
 8011460:	46bd      	mov	sp, r7
 8011462:	bd80      	pop	{r7, pc}

08011464 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b086      	sub	sp, #24
 8011468:	af00      	add	r7, sp, #0
 801146a:	60f8      	str	r0, [r7, #12]
 801146c:	60b9      	str	r1, [r7, #8]
 801146e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8011470:	2300      	movs	r3, #0
 8011472:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8011478:	697b      	ldr	r3, [r7, #20]
 801147a:	2b00      	cmp	r3, #0
 801147c:	d101      	bne.n	8011482 <osMessagePut+0x1e>
    ticks = 1;
 801147e:	2301      	movs	r3, #1
 8011480:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8011482:	f7ff fec4 	bl	801120e <inHandlerMode>
 8011486:	4603      	mov	r3, r0
 8011488:	2b00      	cmp	r3, #0
 801148a:	d018      	beq.n	80114be <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 801148c:	f107 0210 	add.w	r2, r7, #16
 8011490:	f107 0108 	add.w	r1, r7, #8
 8011494:	2300      	movs	r3, #0
 8011496:	68f8      	ldr	r0, [r7, #12]
 8011498:	f000 fb48 	bl	8011b2c <xQueueGenericSendFromISR>
 801149c:	4603      	mov	r3, r0
 801149e:	2b01      	cmp	r3, #1
 80114a0:	d001      	beq.n	80114a6 <osMessagePut+0x42>
      return osErrorOS;
 80114a2:	23ff      	movs	r3, #255	; 0xff
 80114a4:	e018      	b.n	80114d8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80114a6:	693b      	ldr	r3, [r7, #16]
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d014      	beq.n	80114d6 <osMessagePut+0x72>
 80114ac:	4b0c      	ldr	r3, [pc, #48]	; (80114e0 <osMessagePut+0x7c>)
 80114ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114b2:	601a      	str	r2, [r3, #0]
 80114b4:	f3bf 8f4f 	dsb	sy
 80114b8:	f3bf 8f6f 	isb	sy
 80114bc:	e00b      	b.n	80114d6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80114be:	f107 0108 	add.w	r1, r7, #8
 80114c2:	2300      	movs	r3, #0
 80114c4:	697a      	ldr	r2, [r7, #20]
 80114c6:	68f8      	ldr	r0, [r7, #12]
 80114c8:	f000 fa2e 	bl	8011928 <xQueueGenericSend>
 80114cc:	4603      	mov	r3, r0
 80114ce:	2b01      	cmp	r3, #1
 80114d0:	d001      	beq.n	80114d6 <osMessagePut+0x72>
      return osErrorOS;
 80114d2:	23ff      	movs	r3, #255	; 0xff
 80114d4:	e000      	b.n	80114d8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80114d6:	2300      	movs	r3, #0
}
 80114d8:	4618      	mov	r0, r3
 80114da:	3718      	adds	r7, #24
 80114dc:	46bd      	mov	sp, r7
 80114de:	bd80      	pop	{r7, pc}
 80114e0:	e000ed04 	.word	0xe000ed04

080114e4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80114e4:	b590      	push	{r4, r7, lr}
 80114e6:	b08b      	sub	sp, #44	; 0x2c
 80114e8:	af00      	add	r7, sp, #0
 80114ea:	60f8      	str	r0, [r7, #12]
 80114ec:	60b9      	str	r1, [r7, #8]
 80114ee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80114f0:	68bb      	ldr	r3, [r7, #8]
 80114f2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80114f4:	2300      	movs	r3, #0
 80114f6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80114f8:	68bb      	ldr	r3, [r7, #8]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	d10a      	bne.n	8011514 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80114fe:	2380      	movs	r3, #128	; 0x80
 8011500:	617b      	str	r3, [r7, #20]
    return event;
 8011502:	68fb      	ldr	r3, [r7, #12]
 8011504:	461c      	mov	r4, r3
 8011506:	f107 0314 	add.w	r3, r7, #20
 801150a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801150e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011512:	e054      	b.n	80115be <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8011514:	2300      	movs	r3, #0
 8011516:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8011518:	2300      	movs	r3, #0
 801151a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011522:	d103      	bne.n	801152c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8011524:	f04f 33ff 	mov.w	r3, #4294967295
 8011528:	627b      	str	r3, [r7, #36]	; 0x24
 801152a:	e009      	b.n	8011540 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d006      	beq.n	8011540 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8011532:	687b      	ldr	r3, [r7, #4]
 8011534:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8011536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011538:	2b00      	cmp	r3, #0
 801153a:	d101      	bne.n	8011540 <osMessageGet+0x5c>
      ticks = 1;
 801153c:	2301      	movs	r3, #1
 801153e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8011540:	f7ff fe65 	bl	801120e <inHandlerMode>
 8011544:	4603      	mov	r3, r0
 8011546:	2b00      	cmp	r3, #0
 8011548:	d01c      	beq.n	8011584 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801154a:	f107 0220 	add.w	r2, r7, #32
 801154e:	f107 0314 	add.w	r3, r7, #20
 8011552:	3304      	adds	r3, #4
 8011554:	4619      	mov	r1, r3
 8011556:	68b8      	ldr	r0, [r7, #8]
 8011558:	f000 fe08 	bl	801216c <xQueueReceiveFromISR>
 801155c:	4603      	mov	r3, r0
 801155e:	2b01      	cmp	r3, #1
 8011560:	d102      	bne.n	8011568 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8011562:	2310      	movs	r3, #16
 8011564:	617b      	str	r3, [r7, #20]
 8011566:	e001      	b.n	801156c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8011568:	2300      	movs	r3, #0
 801156a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 801156c:	6a3b      	ldr	r3, [r7, #32]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d01d      	beq.n	80115ae <osMessageGet+0xca>
 8011572:	4b15      	ldr	r3, [pc, #84]	; (80115c8 <osMessageGet+0xe4>)
 8011574:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011578:	601a      	str	r2, [r3, #0]
 801157a:	f3bf 8f4f 	dsb	sy
 801157e:	f3bf 8f6f 	isb	sy
 8011582:	e014      	b.n	80115ae <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8011584:	f107 0314 	add.w	r3, r7, #20
 8011588:	3304      	adds	r3, #4
 801158a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801158c:	4619      	mov	r1, r3
 801158e:	68b8      	ldr	r0, [r7, #8]
 8011590:	f000 fbfa 	bl	8011d88 <xQueueReceive>
 8011594:	4603      	mov	r3, r0
 8011596:	2b01      	cmp	r3, #1
 8011598:	d102      	bne.n	80115a0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 801159a:	2310      	movs	r3, #16
 801159c:	617b      	str	r3, [r7, #20]
 801159e:	e006      	b.n	80115ae <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80115a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115a2:	2b00      	cmp	r3, #0
 80115a4:	d101      	bne.n	80115aa <osMessageGet+0xc6>
 80115a6:	2300      	movs	r3, #0
 80115a8:	e000      	b.n	80115ac <osMessageGet+0xc8>
 80115aa:	2340      	movs	r3, #64	; 0x40
 80115ac:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	461c      	mov	r4, r3
 80115b2:	f107 0314 	add.w	r3, r7, #20
 80115b6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80115ba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80115be:	68f8      	ldr	r0, [r7, #12]
 80115c0:	372c      	adds	r7, #44	; 0x2c
 80115c2:	46bd      	mov	sp, r7
 80115c4:	bd90      	pop	{r4, r7, pc}
 80115c6:	bf00      	nop
 80115c8:	e000ed04 	.word	0xe000ed04

080115cc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80115cc:	b480      	push	{r7}
 80115ce:	b083      	sub	sp, #12
 80115d0:	af00      	add	r7, sp, #0
 80115d2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	f103 0208 	add.w	r2, r3, #8
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	f04f 32ff 	mov.w	r2, #4294967295
 80115e4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	f103 0208 	add.w	r2, r3, #8
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	f103 0208 	add.w	r2, r3, #8
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80115fa:	687b      	ldr	r3, [r7, #4]
 80115fc:	2200      	movs	r2, #0
 80115fe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011600:	bf00      	nop
 8011602:	370c      	adds	r7, #12
 8011604:	46bd      	mov	sp, r7
 8011606:	f85d 7b04 	ldr.w	r7, [sp], #4
 801160a:	4770      	bx	lr

0801160c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801160c:	b480      	push	{r7}
 801160e:	b083      	sub	sp, #12
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	2200      	movs	r2, #0
 8011618:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801161a:	bf00      	nop
 801161c:	370c      	adds	r7, #12
 801161e:	46bd      	mov	sp, r7
 8011620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011624:	4770      	bx	lr

08011626 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8011626:	b480      	push	{r7}
 8011628:	b085      	sub	sp, #20
 801162a:	af00      	add	r7, sp, #0
 801162c:	6078      	str	r0, [r7, #4]
 801162e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	685b      	ldr	r3, [r3, #4]
 8011634:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8011636:	683b      	ldr	r3, [r7, #0]
 8011638:	68fa      	ldr	r2, [r7, #12]
 801163a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	689a      	ldr	r2, [r3, #8]
 8011640:	683b      	ldr	r3, [r7, #0]
 8011642:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	689b      	ldr	r3, [r3, #8]
 8011648:	683a      	ldr	r2, [r7, #0]
 801164a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801164c:	68fb      	ldr	r3, [r7, #12]
 801164e:	683a      	ldr	r2, [r7, #0]
 8011650:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8011652:	683b      	ldr	r3, [r7, #0]
 8011654:	687a      	ldr	r2, [r7, #4]
 8011656:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	681b      	ldr	r3, [r3, #0]
 801165c:	1c5a      	adds	r2, r3, #1
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	601a      	str	r2, [r3, #0]
}
 8011662:	bf00      	nop
 8011664:	3714      	adds	r7, #20
 8011666:	46bd      	mov	sp, r7
 8011668:	f85d 7b04 	ldr.w	r7, [sp], #4
 801166c:	4770      	bx	lr

0801166e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801166e:	b480      	push	{r7}
 8011670:	b085      	sub	sp, #20
 8011672:	af00      	add	r7, sp, #0
 8011674:	6078      	str	r0, [r7, #4]
 8011676:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8011678:	683b      	ldr	r3, [r7, #0]
 801167a:	681b      	ldr	r3, [r3, #0]
 801167c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801167e:	68bb      	ldr	r3, [r7, #8]
 8011680:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011684:	d103      	bne.n	801168e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8011686:	687b      	ldr	r3, [r7, #4]
 8011688:	691b      	ldr	r3, [r3, #16]
 801168a:	60fb      	str	r3, [r7, #12]
 801168c:	e00c      	b.n	80116a8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	3308      	adds	r3, #8
 8011692:	60fb      	str	r3, [r7, #12]
 8011694:	e002      	b.n	801169c <vListInsert+0x2e>
 8011696:	68fb      	ldr	r3, [r7, #12]
 8011698:	685b      	ldr	r3, [r3, #4]
 801169a:	60fb      	str	r3, [r7, #12]
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	685b      	ldr	r3, [r3, #4]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	68ba      	ldr	r2, [r7, #8]
 80116a4:	429a      	cmp	r2, r3
 80116a6:	d2f6      	bcs.n	8011696 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	685a      	ldr	r2, [r3, #4]
 80116ac:	683b      	ldr	r3, [r7, #0]
 80116ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80116b0:	683b      	ldr	r3, [r7, #0]
 80116b2:	685b      	ldr	r3, [r3, #4]
 80116b4:	683a      	ldr	r2, [r7, #0]
 80116b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	68fa      	ldr	r2, [r7, #12]
 80116bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80116be:	68fb      	ldr	r3, [r7, #12]
 80116c0:	683a      	ldr	r2, [r7, #0]
 80116c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80116c4:	683b      	ldr	r3, [r7, #0]
 80116c6:	687a      	ldr	r2, [r7, #4]
 80116c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	681b      	ldr	r3, [r3, #0]
 80116ce:	1c5a      	adds	r2, r3, #1
 80116d0:	687b      	ldr	r3, [r7, #4]
 80116d2:	601a      	str	r2, [r3, #0]
}
 80116d4:	bf00      	nop
 80116d6:	3714      	adds	r7, #20
 80116d8:	46bd      	mov	sp, r7
 80116da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116de:	4770      	bx	lr

080116e0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80116e0:	b480      	push	{r7}
 80116e2:	b085      	sub	sp, #20
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	691b      	ldr	r3, [r3, #16]
 80116ec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80116ee:	687b      	ldr	r3, [r7, #4]
 80116f0:	685b      	ldr	r3, [r3, #4]
 80116f2:	687a      	ldr	r2, [r7, #4]
 80116f4:	6892      	ldr	r2, [r2, #8]
 80116f6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	689b      	ldr	r3, [r3, #8]
 80116fc:	687a      	ldr	r2, [r7, #4]
 80116fe:	6852      	ldr	r2, [r2, #4]
 8011700:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	685b      	ldr	r3, [r3, #4]
 8011706:	687a      	ldr	r2, [r7, #4]
 8011708:	429a      	cmp	r2, r3
 801170a:	d103      	bne.n	8011714 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	689a      	ldr	r2, [r3, #8]
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	2200      	movs	r2, #0
 8011718:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801171a:	68fb      	ldr	r3, [r7, #12]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	1e5a      	subs	r2, r3, #1
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	681b      	ldr	r3, [r3, #0]
}
 8011728:	4618      	mov	r0, r3
 801172a:	3714      	adds	r7, #20
 801172c:	46bd      	mov	sp, r7
 801172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011732:	4770      	bx	lr

08011734 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011734:	b580      	push	{r7, lr}
 8011736:	b084      	sub	sp, #16
 8011738:	af00      	add	r7, sp, #0
 801173a:	6078      	str	r0, [r7, #4]
 801173c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801173e:	687b      	ldr	r3, [r7, #4]
 8011740:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	2b00      	cmp	r3, #0
 8011746:	d10b      	bne.n	8011760 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8011748:	f04f 0350 	mov.w	r3, #80	; 0x50
 801174c:	b672      	cpsid	i
 801174e:	f383 8811 	msr	BASEPRI, r3
 8011752:	f3bf 8f6f 	isb	sy
 8011756:	f3bf 8f4f 	dsb	sy
 801175a:	b662      	cpsie	i
 801175c:	60bb      	str	r3, [r7, #8]
 801175e:	e7fe      	b.n	801175e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8011760:	f001 ffda 	bl	8013718 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	681a      	ldr	r2, [r3, #0]
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801176c:	68f9      	ldr	r1, [r7, #12]
 801176e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011770:	fb01 f303 	mul.w	r3, r1, r3
 8011774:	441a      	add	r2, r3
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 801177a:	68fb      	ldr	r3, [r7, #12]
 801177c:	2200      	movs	r2, #0
 801177e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8011780:	68fb      	ldr	r3, [r7, #12]
 8011782:	681a      	ldr	r2, [r3, #0]
 8011784:	68fb      	ldr	r3, [r7, #12]
 8011786:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	681a      	ldr	r2, [r3, #0]
 801178c:	68fb      	ldr	r3, [r7, #12]
 801178e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011790:	3b01      	subs	r3, #1
 8011792:	68f9      	ldr	r1, [r7, #12]
 8011794:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8011796:	fb01 f303 	mul.w	r3, r1, r3
 801179a:	441a      	add	r2, r3
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80117a0:	68fb      	ldr	r3, [r7, #12]
 80117a2:	22ff      	movs	r2, #255	; 0xff
 80117a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80117a8:	68fb      	ldr	r3, [r7, #12]
 80117aa:	22ff      	movs	r2, #255	; 0xff
 80117ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80117b0:	683b      	ldr	r3, [r7, #0]
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d114      	bne.n	80117e0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	691b      	ldr	r3, [r3, #16]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d01a      	beq.n	80117f4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80117be:	68fb      	ldr	r3, [r7, #12]
 80117c0:	3310      	adds	r3, #16
 80117c2:	4618      	mov	r0, r3
 80117c4:	f001 fab2 	bl	8012d2c <xTaskRemoveFromEventList>
 80117c8:	4603      	mov	r3, r0
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d012      	beq.n	80117f4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80117ce:	4b0d      	ldr	r3, [pc, #52]	; (8011804 <xQueueGenericReset+0xd0>)
 80117d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80117d4:	601a      	str	r2, [r3, #0]
 80117d6:	f3bf 8f4f 	dsb	sy
 80117da:	f3bf 8f6f 	isb	sy
 80117de:	e009      	b.n	80117f4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	3310      	adds	r3, #16
 80117e4:	4618      	mov	r0, r3
 80117e6:	f7ff fef1 	bl	80115cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80117ea:	68fb      	ldr	r3, [r7, #12]
 80117ec:	3324      	adds	r3, #36	; 0x24
 80117ee:	4618      	mov	r0, r3
 80117f0:	f7ff feec 	bl	80115cc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80117f4:	f001 ffc2 	bl	801377c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80117f8:	2301      	movs	r3, #1
}
 80117fa:	4618      	mov	r0, r3
 80117fc:	3710      	adds	r7, #16
 80117fe:	46bd      	mov	sp, r7
 8011800:	bd80      	pop	{r7, pc}
 8011802:	bf00      	nop
 8011804:	e000ed04 	.word	0xe000ed04

08011808 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011808:	b580      	push	{r7, lr}
 801180a:	b08a      	sub	sp, #40	; 0x28
 801180c:	af02      	add	r7, sp, #8
 801180e:	60f8      	str	r0, [r7, #12]
 8011810:	60b9      	str	r1, [r7, #8]
 8011812:	4613      	mov	r3, r2
 8011814:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d10b      	bne.n	8011834 <xQueueGenericCreate+0x2c>
 801181c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011820:	b672      	cpsid	i
 8011822:	f383 8811 	msr	BASEPRI, r3
 8011826:	f3bf 8f6f 	isb	sy
 801182a:	f3bf 8f4f 	dsb	sy
 801182e:	b662      	cpsie	i
 8011830:	613b      	str	r3, [r7, #16]
 8011832:	e7fe      	b.n	8011832 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8011834:	68bb      	ldr	r3, [r7, #8]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d102      	bne.n	8011840 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 801183a:	2300      	movs	r3, #0
 801183c:	61fb      	str	r3, [r7, #28]
 801183e:	e004      	b.n	801184a <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011840:	68fb      	ldr	r3, [r7, #12]
 8011842:	68ba      	ldr	r2, [r7, #8]
 8011844:	fb02 f303 	mul.w	r3, r2, r3
 8011848:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 801184a:	69fb      	ldr	r3, [r7, #28]
 801184c:	3348      	adds	r3, #72	; 0x48
 801184e:	4618      	mov	r0, r3
 8011850:	f002 f884 	bl	801395c <pvPortMalloc>
 8011854:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011856:	69bb      	ldr	r3, [r7, #24]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d00b      	beq.n	8011874 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 801185c:	69bb      	ldr	r3, [r7, #24]
 801185e:	3348      	adds	r3, #72	; 0x48
 8011860:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011862:	79fa      	ldrb	r2, [r7, #7]
 8011864:	69bb      	ldr	r3, [r7, #24]
 8011866:	9300      	str	r3, [sp, #0]
 8011868:	4613      	mov	r3, r2
 801186a:	697a      	ldr	r2, [r7, #20]
 801186c:	68b9      	ldr	r1, [r7, #8]
 801186e:	68f8      	ldr	r0, [r7, #12]
 8011870:	f000 f805 	bl	801187e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8011874:	69bb      	ldr	r3, [r7, #24]
	}
 8011876:	4618      	mov	r0, r3
 8011878:	3720      	adds	r7, #32
 801187a:	46bd      	mov	sp, r7
 801187c:	bd80      	pop	{r7, pc}

0801187e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 801187e:	b580      	push	{r7, lr}
 8011880:	b084      	sub	sp, #16
 8011882:	af00      	add	r7, sp, #0
 8011884:	60f8      	str	r0, [r7, #12]
 8011886:	60b9      	str	r1, [r7, #8]
 8011888:	607a      	str	r2, [r7, #4]
 801188a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 801188c:	68bb      	ldr	r3, [r7, #8]
 801188e:	2b00      	cmp	r3, #0
 8011890:	d103      	bne.n	801189a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011892:	69bb      	ldr	r3, [r7, #24]
 8011894:	69ba      	ldr	r2, [r7, #24]
 8011896:	601a      	str	r2, [r3, #0]
 8011898:	e002      	b.n	80118a0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 801189a:	69bb      	ldr	r3, [r7, #24]
 801189c:	687a      	ldr	r2, [r7, #4]
 801189e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80118a0:	69bb      	ldr	r3, [r7, #24]
 80118a2:	68fa      	ldr	r2, [r7, #12]
 80118a4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80118a6:	69bb      	ldr	r3, [r7, #24]
 80118a8:	68ba      	ldr	r2, [r7, #8]
 80118aa:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80118ac:	2101      	movs	r1, #1
 80118ae:	69b8      	ldr	r0, [r7, #24]
 80118b0:	f7ff ff40 	bl	8011734 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80118b4:	bf00      	nop
 80118b6:	3710      	adds	r7, #16
 80118b8:	46bd      	mov	sp, r7
 80118ba:	bd80      	pop	{r7, pc}

080118bc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80118bc:	b580      	push	{r7, lr}
 80118be:	b086      	sub	sp, #24
 80118c0:	af00      	add	r7, sp, #0
 80118c2:	6078      	str	r0, [r7, #4]
 80118c4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	2b00      	cmp	r3, #0
 80118ca:	d10b      	bne.n	80118e4 <xQueueCreateCountingSemaphore+0x28>
 80118cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118d0:	b672      	cpsid	i
 80118d2:	f383 8811 	msr	BASEPRI, r3
 80118d6:	f3bf 8f6f 	isb	sy
 80118da:	f3bf 8f4f 	dsb	sy
 80118de:	b662      	cpsie	i
 80118e0:	613b      	str	r3, [r7, #16]
 80118e2:	e7fe      	b.n	80118e2 <xQueueCreateCountingSemaphore+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80118e4:	683a      	ldr	r2, [r7, #0]
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	429a      	cmp	r2, r3
 80118ea:	d90b      	bls.n	8011904 <xQueueCreateCountingSemaphore+0x48>
 80118ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80118f0:	b672      	cpsid	i
 80118f2:	f383 8811 	msr	BASEPRI, r3
 80118f6:	f3bf 8f6f 	isb	sy
 80118fa:	f3bf 8f4f 	dsb	sy
 80118fe:	b662      	cpsie	i
 8011900:	60fb      	str	r3, [r7, #12]
 8011902:	e7fe      	b.n	8011902 <xQueueCreateCountingSemaphore+0x46>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8011904:	2202      	movs	r2, #2
 8011906:	2100      	movs	r1, #0
 8011908:	6878      	ldr	r0, [r7, #4]
 801190a:	f7ff ff7d 	bl	8011808 <xQueueGenericCreate>
 801190e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8011910:	697b      	ldr	r3, [r7, #20]
 8011912:	2b00      	cmp	r3, #0
 8011914:	d002      	beq.n	801191c <xQueueCreateCountingSemaphore+0x60>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8011916:	697b      	ldr	r3, [r7, #20]
 8011918:	683a      	ldr	r2, [r7, #0]
 801191a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 801191c:	697b      	ldr	r3, [r7, #20]
	}
 801191e:	4618      	mov	r0, r3
 8011920:	3718      	adds	r7, #24
 8011922:	46bd      	mov	sp, r7
 8011924:	bd80      	pop	{r7, pc}
	...

08011928 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011928:	b580      	push	{r7, lr}
 801192a:	b08e      	sub	sp, #56	; 0x38
 801192c:	af00      	add	r7, sp, #0
 801192e:	60f8      	str	r0, [r7, #12]
 8011930:	60b9      	str	r1, [r7, #8]
 8011932:	607a      	str	r2, [r7, #4]
 8011934:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011936:	2300      	movs	r3, #0
 8011938:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801193e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011940:	2b00      	cmp	r3, #0
 8011942:	d10b      	bne.n	801195c <xQueueGenericSend+0x34>
 8011944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011948:	b672      	cpsid	i
 801194a:	f383 8811 	msr	BASEPRI, r3
 801194e:	f3bf 8f6f 	isb	sy
 8011952:	f3bf 8f4f 	dsb	sy
 8011956:	b662      	cpsie	i
 8011958:	62bb      	str	r3, [r7, #40]	; 0x28
 801195a:	e7fe      	b.n	801195a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801195c:	68bb      	ldr	r3, [r7, #8]
 801195e:	2b00      	cmp	r3, #0
 8011960:	d103      	bne.n	801196a <xQueueGenericSend+0x42>
 8011962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011966:	2b00      	cmp	r3, #0
 8011968:	d101      	bne.n	801196e <xQueueGenericSend+0x46>
 801196a:	2301      	movs	r3, #1
 801196c:	e000      	b.n	8011970 <xQueueGenericSend+0x48>
 801196e:	2300      	movs	r3, #0
 8011970:	2b00      	cmp	r3, #0
 8011972:	d10b      	bne.n	801198c <xQueueGenericSend+0x64>
 8011974:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011978:	b672      	cpsid	i
 801197a:	f383 8811 	msr	BASEPRI, r3
 801197e:	f3bf 8f6f 	isb	sy
 8011982:	f3bf 8f4f 	dsb	sy
 8011986:	b662      	cpsie	i
 8011988:	627b      	str	r3, [r7, #36]	; 0x24
 801198a:	e7fe      	b.n	801198a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 801198c:	683b      	ldr	r3, [r7, #0]
 801198e:	2b02      	cmp	r3, #2
 8011990:	d103      	bne.n	801199a <xQueueGenericSend+0x72>
 8011992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011996:	2b01      	cmp	r3, #1
 8011998:	d101      	bne.n	801199e <xQueueGenericSend+0x76>
 801199a:	2301      	movs	r3, #1
 801199c:	e000      	b.n	80119a0 <xQueueGenericSend+0x78>
 801199e:	2300      	movs	r3, #0
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d10b      	bne.n	80119bc <xQueueGenericSend+0x94>
 80119a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119a8:	b672      	cpsid	i
 80119aa:	f383 8811 	msr	BASEPRI, r3
 80119ae:	f3bf 8f6f 	isb	sy
 80119b2:	f3bf 8f4f 	dsb	sy
 80119b6:	b662      	cpsie	i
 80119b8:	623b      	str	r3, [r7, #32]
 80119ba:	e7fe      	b.n	80119ba <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80119bc:	f001 fb5c 	bl	8013078 <xTaskGetSchedulerState>
 80119c0:	4603      	mov	r3, r0
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d102      	bne.n	80119cc <xQueueGenericSend+0xa4>
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	2b00      	cmp	r3, #0
 80119ca:	d101      	bne.n	80119d0 <xQueueGenericSend+0xa8>
 80119cc:	2301      	movs	r3, #1
 80119ce:	e000      	b.n	80119d2 <xQueueGenericSend+0xaa>
 80119d0:	2300      	movs	r3, #0
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d10b      	bne.n	80119ee <xQueueGenericSend+0xc6>
 80119d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119da:	b672      	cpsid	i
 80119dc:	f383 8811 	msr	BASEPRI, r3
 80119e0:	f3bf 8f6f 	isb	sy
 80119e4:	f3bf 8f4f 	dsb	sy
 80119e8:	b662      	cpsie	i
 80119ea:	61fb      	str	r3, [r7, #28]
 80119ec:	e7fe      	b.n	80119ec <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80119ee:	f001 fe93 	bl	8013718 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80119f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80119f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80119fa:	429a      	cmp	r2, r3
 80119fc:	d302      	bcc.n	8011a04 <xQueueGenericSend+0xdc>
 80119fe:	683b      	ldr	r3, [r7, #0]
 8011a00:	2b02      	cmp	r3, #2
 8011a02:	d129      	bne.n	8011a58 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011a04:	683a      	ldr	r2, [r7, #0]
 8011a06:	68b9      	ldr	r1, [r7, #8]
 8011a08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a0a:	f000 fc4a 	bl	80122a2 <prvCopyDataToQueue>
 8011a0e:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	d010      	beq.n	8011a3a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a1a:	3324      	adds	r3, #36	; 0x24
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	f001 f985 	bl	8012d2c <xTaskRemoveFromEventList>
 8011a22:	4603      	mov	r3, r0
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d013      	beq.n	8011a50 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011a28:	4b3f      	ldr	r3, [pc, #252]	; (8011b28 <xQueueGenericSend+0x200>)
 8011a2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a2e:	601a      	str	r2, [r3, #0]
 8011a30:	f3bf 8f4f 	dsb	sy
 8011a34:	f3bf 8f6f 	isb	sy
 8011a38:	e00a      	b.n	8011a50 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	d007      	beq.n	8011a50 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011a40:	4b39      	ldr	r3, [pc, #228]	; (8011b28 <xQueueGenericSend+0x200>)
 8011a42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011a46:	601a      	str	r2, [r3, #0]
 8011a48:	f3bf 8f4f 	dsb	sy
 8011a4c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011a50:	f001 fe94 	bl	801377c <vPortExitCritical>
				return pdPASS;
 8011a54:	2301      	movs	r3, #1
 8011a56:	e063      	b.n	8011b20 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d103      	bne.n	8011a66 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011a5e:	f001 fe8d 	bl	801377c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011a62:	2300      	movs	r3, #0
 8011a64:	e05c      	b.n	8011b20 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011a66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d106      	bne.n	8011a7a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011a6c:	f107 0314 	add.w	r3, r7, #20
 8011a70:	4618      	mov	r0, r3
 8011a72:	f001 f9bf 	bl	8012df4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011a76:	2301      	movs	r3, #1
 8011a78:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011a7a:	f001 fe7f 	bl	801377c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011a7e:	f000 fed7 	bl	8012830 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011a82:	f001 fe49 	bl	8013718 <vPortEnterCritical>
 8011a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011a8c:	b25b      	sxtb	r3, r3
 8011a8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a92:	d103      	bne.n	8011a9c <xQueueGenericSend+0x174>
 8011a94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a96:	2200      	movs	r2, #0
 8011a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011aa2:	b25b      	sxtb	r3, r3
 8011aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011aa8:	d103      	bne.n	8011ab2 <xQueueGenericSend+0x18a>
 8011aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011aac:	2200      	movs	r2, #0
 8011aae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011ab2:	f001 fe63 	bl	801377c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011ab6:	1d3a      	adds	r2, r7, #4
 8011ab8:	f107 0314 	add.w	r3, r7, #20
 8011abc:	4611      	mov	r1, r2
 8011abe:	4618      	mov	r0, r3
 8011ac0:	f001 f9ae 	bl	8012e20 <xTaskCheckForTimeOut>
 8011ac4:	4603      	mov	r3, r0
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d124      	bne.n	8011b14 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011aca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011acc:	f000 fce1 	bl	8012492 <prvIsQueueFull>
 8011ad0:	4603      	mov	r3, r0
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d018      	beq.n	8011b08 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ad8:	3310      	adds	r3, #16
 8011ada:	687a      	ldr	r2, [r7, #4]
 8011adc:	4611      	mov	r1, r2
 8011ade:	4618      	mov	r0, r3
 8011ae0:	f001 f8fe 	bl	8012ce0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011ae4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ae6:	f000 fc6c 	bl	80123c2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011aea:	f000 feaf 	bl	801284c <xTaskResumeAll>
 8011aee:	4603      	mov	r3, r0
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	f47f af7c 	bne.w	80119ee <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8011af6:	4b0c      	ldr	r3, [pc, #48]	; (8011b28 <xQueueGenericSend+0x200>)
 8011af8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011afc:	601a      	str	r2, [r3, #0]
 8011afe:	f3bf 8f4f 	dsb	sy
 8011b02:	f3bf 8f6f 	isb	sy
 8011b06:	e772      	b.n	80119ee <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011b08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b0a:	f000 fc5a 	bl	80123c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011b0e:	f000 fe9d 	bl	801284c <xTaskResumeAll>
 8011b12:	e76c      	b.n	80119ee <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011b14:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011b16:	f000 fc54 	bl	80123c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011b1a:	f000 fe97 	bl	801284c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011b1e:	2300      	movs	r3, #0
		}
	}
}
 8011b20:	4618      	mov	r0, r3
 8011b22:	3738      	adds	r7, #56	; 0x38
 8011b24:	46bd      	mov	sp, r7
 8011b26:	bd80      	pop	{r7, pc}
 8011b28:	e000ed04 	.word	0xe000ed04

08011b2c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011b2c:	b580      	push	{r7, lr}
 8011b2e:	b08e      	sub	sp, #56	; 0x38
 8011b30:	af00      	add	r7, sp, #0
 8011b32:	60f8      	str	r0, [r7, #12]
 8011b34:	60b9      	str	r1, [r7, #8]
 8011b36:	607a      	str	r2, [r7, #4]
 8011b38:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8011b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b40:	2b00      	cmp	r3, #0
 8011b42:	d10b      	bne.n	8011b5c <xQueueGenericSendFromISR+0x30>
 8011b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b48:	b672      	cpsid	i
 8011b4a:	f383 8811 	msr	BASEPRI, r3
 8011b4e:	f3bf 8f6f 	isb	sy
 8011b52:	f3bf 8f4f 	dsb	sy
 8011b56:	b662      	cpsie	i
 8011b58:	627b      	str	r3, [r7, #36]	; 0x24
 8011b5a:	e7fe      	b.n	8011b5a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011b5c:	68bb      	ldr	r3, [r7, #8]
 8011b5e:	2b00      	cmp	r3, #0
 8011b60:	d103      	bne.n	8011b6a <xQueueGenericSendFromISR+0x3e>
 8011b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011b66:	2b00      	cmp	r3, #0
 8011b68:	d101      	bne.n	8011b6e <xQueueGenericSendFromISR+0x42>
 8011b6a:	2301      	movs	r3, #1
 8011b6c:	e000      	b.n	8011b70 <xQueueGenericSendFromISR+0x44>
 8011b6e:	2300      	movs	r3, #0
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d10b      	bne.n	8011b8c <xQueueGenericSendFromISR+0x60>
 8011b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b78:	b672      	cpsid	i
 8011b7a:	f383 8811 	msr	BASEPRI, r3
 8011b7e:	f3bf 8f6f 	isb	sy
 8011b82:	f3bf 8f4f 	dsb	sy
 8011b86:	b662      	cpsie	i
 8011b88:	623b      	str	r3, [r7, #32]
 8011b8a:	e7fe      	b.n	8011b8a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011b8c:	683b      	ldr	r3, [r7, #0]
 8011b8e:	2b02      	cmp	r3, #2
 8011b90:	d103      	bne.n	8011b9a <xQueueGenericSendFromISR+0x6e>
 8011b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011b96:	2b01      	cmp	r3, #1
 8011b98:	d101      	bne.n	8011b9e <xQueueGenericSendFromISR+0x72>
 8011b9a:	2301      	movs	r3, #1
 8011b9c:	e000      	b.n	8011ba0 <xQueueGenericSendFromISR+0x74>
 8011b9e:	2300      	movs	r3, #0
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d10b      	bne.n	8011bbc <xQueueGenericSendFromISR+0x90>
 8011ba4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ba8:	b672      	cpsid	i
 8011baa:	f383 8811 	msr	BASEPRI, r3
 8011bae:	f3bf 8f6f 	isb	sy
 8011bb2:	f3bf 8f4f 	dsb	sy
 8011bb6:	b662      	cpsie	i
 8011bb8:	61fb      	str	r3, [r7, #28]
 8011bba:	e7fe      	b.n	8011bba <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011bbc:	f001 fe8c 	bl	80138d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011bc0:	f3ef 8211 	mrs	r2, BASEPRI
 8011bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011bc8:	b672      	cpsid	i
 8011bca:	f383 8811 	msr	BASEPRI, r3
 8011bce:	f3bf 8f6f 	isb	sy
 8011bd2:	f3bf 8f4f 	dsb	sy
 8011bd6:	b662      	cpsie	i
 8011bd8:	61ba      	str	r2, [r7, #24]
 8011bda:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011bdc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011bde:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011be2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011be4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011be8:	429a      	cmp	r2, r3
 8011bea:	d302      	bcc.n	8011bf2 <xQueueGenericSendFromISR+0xc6>
 8011bec:	683b      	ldr	r3, [r7, #0]
 8011bee:	2b02      	cmp	r3, #2
 8011bf0:	d12c      	bne.n	8011c4c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011bf8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011bfc:	683a      	ldr	r2, [r7, #0]
 8011bfe:	68b9      	ldr	r1, [r7, #8]
 8011c00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c02:	f000 fb4e 	bl	80122a2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011c06:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8011c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c0e:	d112      	bne.n	8011c36 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	d016      	beq.n	8011c46 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c1a:	3324      	adds	r3, #36	; 0x24
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	f001 f885 	bl	8012d2c <xTaskRemoveFromEventList>
 8011c22:	4603      	mov	r3, r0
 8011c24:	2b00      	cmp	r3, #0
 8011c26:	d00e      	beq.n	8011c46 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011c28:	687b      	ldr	r3, [r7, #4]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d00b      	beq.n	8011c46 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011c2e:	687b      	ldr	r3, [r7, #4]
 8011c30:	2201      	movs	r2, #1
 8011c32:	601a      	str	r2, [r3, #0]
 8011c34:	e007      	b.n	8011c46 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011c36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8011c3a:	3301      	adds	r3, #1
 8011c3c:	b2db      	uxtb	r3, r3
 8011c3e:	b25a      	sxtb	r2, r3
 8011c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011c46:	2301      	movs	r3, #1
 8011c48:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8011c4a:	e001      	b.n	8011c50 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011c4c:	2300      	movs	r3, #0
 8011c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8011c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c52:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011c54:	693b      	ldr	r3, [r7, #16]
 8011c56:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	3738      	adds	r7, #56	; 0x38
 8011c60:	46bd      	mov	sp, r7
 8011c62:	bd80      	pop	{r7, pc}

08011c64 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b08e      	sub	sp, #56	; 0x38
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
 8011c6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011c6e:	687b      	ldr	r3, [r7, #4]
 8011c70:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8011c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d10b      	bne.n	8011c90 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8011c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c7c:	b672      	cpsid	i
 8011c7e:	f383 8811 	msr	BASEPRI, r3
 8011c82:	f3bf 8f6f 	isb	sy
 8011c86:	f3bf 8f4f 	dsb	sy
 8011c8a:	b662      	cpsie	i
 8011c8c:	623b      	str	r3, [r7, #32]
 8011c8e:	e7fe      	b.n	8011c8e <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d00b      	beq.n	8011cb0 <xQueueGiveFromISR+0x4c>
 8011c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c9c:	b672      	cpsid	i
 8011c9e:	f383 8811 	msr	BASEPRI, r3
 8011ca2:	f3bf 8f6f 	isb	sy
 8011ca6:	f3bf 8f4f 	dsb	sy
 8011caa:	b662      	cpsie	i
 8011cac:	61fb      	str	r3, [r7, #28]
 8011cae:	e7fe      	b.n	8011cae <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8011cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cb2:	681b      	ldr	r3, [r3, #0]
 8011cb4:	2b00      	cmp	r3, #0
 8011cb6:	d103      	bne.n	8011cc0 <xQueueGiveFromISR+0x5c>
 8011cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cba:	685b      	ldr	r3, [r3, #4]
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d101      	bne.n	8011cc4 <xQueueGiveFromISR+0x60>
 8011cc0:	2301      	movs	r3, #1
 8011cc2:	e000      	b.n	8011cc6 <xQueueGiveFromISR+0x62>
 8011cc4:	2300      	movs	r3, #0
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d10b      	bne.n	8011ce2 <xQueueGiveFromISR+0x7e>
 8011cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cce:	b672      	cpsid	i
 8011cd0:	f383 8811 	msr	BASEPRI, r3
 8011cd4:	f3bf 8f6f 	isb	sy
 8011cd8:	f3bf 8f4f 	dsb	sy
 8011cdc:	b662      	cpsie	i
 8011cde:	61bb      	str	r3, [r7, #24]
 8011ce0:	e7fe      	b.n	8011ce0 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011ce2:	f001 fdf9 	bl	80138d8 <vPortValidateInterruptPriority>
	__asm volatile
 8011ce6:	f3ef 8211 	mrs	r2, BASEPRI
 8011cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cee:	b672      	cpsid	i
 8011cf0:	f383 8811 	msr	BASEPRI, r3
 8011cf4:	f3bf 8f6f 	isb	sy
 8011cf8:	f3bf 8f4f 	dsb	sy
 8011cfc:	b662      	cpsie	i
 8011cfe:	617a      	str	r2, [r7, #20]
 8011d00:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8011d02:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011d04:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d0a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011d0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011d10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011d12:	429a      	cmp	r2, r3
 8011d14:	d22b      	bcs.n	8011d6e <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d18:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011d1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d22:	1c5a      	adds	r2, r3, #1
 8011d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d26:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011d28:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011d30:	d112      	bne.n	8011d58 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d016      	beq.n	8011d68 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d3c:	3324      	adds	r3, #36	; 0x24
 8011d3e:	4618      	mov	r0, r3
 8011d40:	f000 fff4 	bl	8012d2c <xTaskRemoveFromEventList>
 8011d44:	4603      	mov	r3, r0
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d00e      	beq.n	8011d68 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011d4a:	683b      	ldr	r3, [r7, #0]
 8011d4c:	2b00      	cmp	r3, #0
 8011d4e:	d00b      	beq.n	8011d68 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011d50:	683b      	ldr	r3, [r7, #0]
 8011d52:	2201      	movs	r2, #1
 8011d54:	601a      	str	r2, [r3, #0]
 8011d56:	e007      	b.n	8011d68 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011d58:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011d5c:	3301      	adds	r3, #1
 8011d5e:	b2db      	uxtb	r3, r3
 8011d60:	b25a      	sxtb	r2, r3
 8011d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011d68:	2301      	movs	r3, #1
 8011d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8011d6c:	e001      	b.n	8011d72 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011d6e:	2300      	movs	r3, #0
 8011d70:	637b      	str	r3, [r7, #52]	; 0x34
 8011d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d74:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011d7e:	4618      	mov	r0, r3
 8011d80:	3738      	adds	r7, #56	; 0x38
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bd80      	pop	{r7, pc}
	...

08011d88 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b08c      	sub	sp, #48	; 0x30
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	60f8      	str	r0, [r7, #12]
 8011d90:	60b9      	str	r1, [r7, #8]
 8011d92:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011d94:	2300      	movs	r3, #0
 8011d96:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011d98:	68fb      	ldr	r3, [r7, #12]
 8011d9a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d9e:	2b00      	cmp	r3, #0
 8011da0:	d10b      	bne.n	8011dba <xQueueReceive+0x32>
	__asm volatile
 8011da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011da6:	b672      	cpsid	i
 8011da8:	f383 8811 	msr	BASEPRI, r3
 8011dac:	f3bf 8f6f 	isb	sy
 8011db0:	f3bf 8f4f 	dsb	sy
 8011db4:	b662      	cpsie	i
 8011db6:	623b      	str	r3, [r7, #32]
 8011db8:	e7fe      	b.n	8011db8 <xQueueReceive+0x30>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011dba:	68bb      	ldr	r3, [r7, #8]
 8011dbc:	2b00      	cmp	r3, #0
 8011dbe:	d103      	bne.n	8011dc8 <xQueueReceive+0x40>
 8011dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d101      	bne.n	8011dcc <xQueueReceive+0x44>
 8011dc8:	2301      	movs	r3, #1
 8011dca:	e000      	b.n	8011dce <xQueueReceive+0x46>
 8011dcc:	2300      	movs	r3, #0
 8011dce:	2b00      	cmp	r3, #0
 8011dd0:	d10b      	bne.n	8011dea <xQueueReceive+0x62>
 8011dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011dd6:	b672      	cpsid	i
 8011dd8:	f383 8811 	msr	BASEPRI, r3
 8011ddc:	f3bf 8f6f 	isb	sy
 8011de0:	f3bf 8f4f 	dsb	sy
 8011de4:	b662      	cpsie	i
 8011de6:	61fb      	str	r3, [r7, #28]
 8011de8:	e7fe      	b.n	8011de8 <xQueueReceive+0x60>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011dea:	f001 f945 	bl	8013078 <xTaskGetSchedulerState>
 8011dee:	4603      	mov	r3, r0
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d102      	bne.n	8011dfa <xQueueReceive+0x72>
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d101      	bne.n	8011dfe <xQueueReceive+0x76>
 8011dfa:	2301      	movs	r3, #1
 8011dfc:	e000      	b.n	8011e00 <xQueueReceive+0x78>
 8011dfe:	2300      	movs	r3, #0
 8011e00:	2b00      	cmp	r3, #0
 8011e02:	d10b      	bne.n	8011e1c <xQueueReceive+0x94>
 8011e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e08:	b672      	cpsid	i
 8011e0a:	f383 8811 	msr	BASEPRI, r3
 8011e0e:	f3bf 8f6f 	isb	sy
 8011e12:	f3bf 8f4f 	dsb	sy
 8011e16:	b662      	cpsie	i
 8011e18:	61bb      	str	r3, [r7, #24]
 8011e1a:	e7fe      	b.n	8011e1a <xQueueReceive+0x92>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8011e1c:	f001 fc7c 	bl	8013718 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011e20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e24:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e28:	2b00      	cmp	r3, #0
 8011e2a:	d01f      	beq.n	8011e6c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011e2c:	68b9      	ldr	r1, [r7, #8]
 8011e2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011e30:	f000 faa1 	bl	8012376 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e36:	1e5a      	subs	r2, r3, #1
 8011e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e3a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e3e:	691b      	ldr	r3, [r3, #16]
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d00f      	beq.n	8011e64 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011e44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e46:	3310      	adds	r3, #16
 8011e48:	4618      	mov	r0, r3
 8011e4a:	f000 ff6f 	bl	8012d2c <xTaskRemoveFromEventList>
 8011e4e:	4603      	mov	r3, r0
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d007      	beq.n	8011e64 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011e54:	4b3c      	ldr	r3, [pc, #240]	; (8011f48 <xQueueReceive+0x1c0>)
 8011e56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e5a:	601a      	str	r2, [r3, #0]
 8011e5c:	f3bf 8f4f 	dsb	sy
 8011e60:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011e64:	f001 fc8a 	bl	801377c <vPortExitCritical>
				return pdPASS;
 8011e68:	2301      	movs	r3, #1
 8011e6a:	e069      	b.n	8011f40 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d103      	bne.n	8011e7a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011e72:	f001 fc83 	bl	801377c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011e76:	2300      	movs	r3, #0
 8011e78:	e062      	b.n	8011f40 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d106      	bne.n	8011e8e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011e80:	f107 0310 	add.w	r3, r7, #16
 8011e84:	4618      	mov	r0, r3
 8011e86:	f000 ffb5 	bl	8012df4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011e8a:	2301      	movs	r3, #1
 8011e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011e8e:	f001 fc75 	bl	801377c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011e92:	f000 fccd 	bl	8012830 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011e96:	f001 fc3f 	bl	8013718 <vPortEnterCritical>
 8011e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011ea0:	b25b      	sxtb	r3, r3
 8011ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ea6:	d103      	bne.n	8011eb0 <xQueueReceive+0x128>
 8011ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eaa:	2200      	movs	r2, #0
 8011eac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011eb6:	b25b      	sxtb	r3, r3
 8011eb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ebc:	d103      	bne.n	8011ec6 <xQueueReceive+0x13e>
 8011ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ec0:	2200      	movs	r2, #0
 8011ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011ec6:	f001 fc59 	bl	801377c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011eca:	1d3a      	adds	r2, r7, #4
 8011ecc:	f107 0310 	add.w	r3, r7, #16
 8011ed0:	4611      	mov	r1, r2
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f000 ffa4 	bl	8012e20 <xTaskCheckForTimeOut>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	2b00      	cmp	r3, #0
 8011edc:	d123      	bne.n	8011f26 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011ede:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011ee0:	f000 fac1 	bl	8012466 <prvIsQueueEmpty>
 8011ee4:	4603      	mov	r3, r0
 8011ee6:	2b00      	cmp	r3, #0
 8011ee8:	d017      	beq.n	8011f1a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eec:	3324      	adds	r3, #36	; 0x24
 8011eee:	687a      	ldr	r2, [r7, #4]
 8011ef0:	4611      	mov	r1, r2
 8011ef2:	4618      	mov	r0, r3
 8011ef4:	f000 fef4 	bl	8012ce0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011ef8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011efa:	f000 fa62 	bl	80123c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011efe:	f000 fca5 	bl	801284c <xTaskResumeAll>
 8011f02:	4603      	mov	r3, r0
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d189      	bne.n	8011e1c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8011f08:	4b0f      	ldr	r3, [pc, #60]	; (8011f48 <xQueueReceive+0x1c0>)
 8011f0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f0e:	601a      	str	r2, [r3, #0]
 8011f10:	f3bf 8f4f 	dsb	sy
 8011f14:	f3bf 8f6f 	isb	sy
 8011f18:	e780      	b.n	8011e1c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011f1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f1c:	f000 fa51 	bl	80123c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011f20:	f000 fc94 	bl	801284c <xTaskResumeAll>
 8011f24:	e77a      	b.n	8011e1c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011f26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f28:	f000 fa4b 	bl	80123c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011f2c:	f000 fc8e 	bl	801284c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011f30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011f32:	f000 fa98 	bl	8012466 <prvIsQueueEmpty>
 8011f36:	4603      	mov	r3, r0
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	f43f af6f 	beq.w	8011e1c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011f3e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8011f40:	4618      	mov	r0, r3
 8011f42:	3730      	adds	r7, #48	; 0x30
 8011f44:	46bd      	mov	sp, r7
 8011f46:	bd80      	pop	{r7, pc}
 8011f48:	e000ed04 	.word	0xe000ed04

08011f4c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b08e      	sub	sp, #56	; 0x38
 8011f50:	af00      	add	r7, sp, #0
 8011f52:	6078      	str	r0, [r7, #4]
 8011f54:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8011f56:	2300      	movs	r3, #0
 8011f58:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011f5e:	2300      	movs	r3, #0
 8011f60:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011f62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d10b      	bne.n	8011f80 <xQueueSemaphoreTake+0x34>
 8011f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f6c:	b672      	cpsid	i
 8011f6e:	f383 8811 	msr	BASEPRI, r3
 8011f72:	f3bf 8f6f 	isb	sy
 8011f76:	f3bf 8f4f 	dsb	sy
 8011f7a:	b662      	cpsie	i
 8011f7c:	623b      	str	r3, [r7, #32]
 8011f7e:	e7fe      	b.n	8011f7e <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8011f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011f84:	2b00      	cmp	r3, #0
 8011f86:	d00b      	beq.n	8011fa0 <xQueueSemaphoreTake+0x54>
 8011f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f8c:	b672      	cpsid	i
 8011f8e:	f383 8811 	msr	BASEPRI, r3
 8011f92:	f3bf 8f6f 	isb	sy
 8011f96:	f3bf 8f4f 	dsb	sy
 8011f9a:	b662      	cpsie	i
 8011f9c:	61fb      	str	r3, [r7, #28]
 8011f9e:	e7fe      	b.n	8011f9e <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011fa0:	f001 f86a 	bl	8013078 <xTaskGetSchedulerState>
 8011fa4:	4603      	mov	r3, r0
 8011fa6:	2b00      	cmp	r3, #0
 8011fa8:	d102      	bne.n	8011fb0 <xQueueSemaphoreTake+0x64>
 8011faa:	683b      	ldr	r3, [r7, #0]
 8011fac:	2b00      	cmp	r3, #0
 8011fae:	d101      	bne.n	8011fb4 <xQueueSemaphoreTake+0x68>
 8011fb0:	2301      	movs	r3, #1
 8011fb2:	e000      	b.n	8011fb6 <xQueueSemaphoreTake+0x6a>
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d10b      	bne.n	8011fd2 <xQueueSemaphoreTake+0x86>
 8011fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fbe:	b672      	cpsid	i
 8011fc0:	f383 8811 	msr	BASEPRI, r3
 8011fc4:	f3bf 8f6f 	isb	sy
 8011fc8:	f3bf 8f4f 	dsb	sy
 8011fcc:	b662      	cpsie	i
 8011fce:	61bb      	str	r3, [r7, #24]
 8011fd0:	e7fe      	b.n	8011fd0 <xQueueSemaphoreTake+0x84>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8011fd2:	f001 fba1 	bl	8013718 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fda:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011fdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d024      	beq.n	801202c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8011fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011fe4:	1e5a      	subs	r2, r3, #1
 8011fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fe8:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	2b00      	cmp	r3, #0
 8011ff0:	d104      	bne.n	8011ffc <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8011ff2:	f001 fa0f 	bl	8013414 <pvTaskIncrementMutexHeldCount>
 8011ff6:	4602      	mov	r2, r0
 8011ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ffa:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ffe:	691b      	ldr	r3, [r3, #16]
 8012000:	2b00      	cmp	r3, #0
 8012002:	d00f      	beq.n	8012024 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012006:	3310      	adds	r3, #16
 8012008:	4618      	mov	r0, r3
 801200a:	f000 fe8f 	bl	8012d2c <xTaskRemoveFromEventList>
 801200e:	4603      	mov	r3, r0
 8012010:	2b00      	cmp	r3, #0
 8012012:	d007      	beq.n	8012024 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012014:	4b54      	ldr	r3, [pc, #336]	; (8012168 <xQueueSemaphoreTake+0x21c>)
 8012016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801201a:	601a      	str	r2, [r3, #0]
 801201c:	f3bf 8f4f 	dsb	sy
 8012020:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012024:	f001 fbaa 	bl	801377c <vPortExitCritical>
				return pdPASS;
 8012028:	2301      	movs	r3, #1
 801202a:	e098      	b.n	801215e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 801202c:	683b      	ldr	r3, [r7, #0]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d112      	bne.n	8012058 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012034:	2b00      	cmp	r3, #0
 8012036:	d00b      	beq.n	8012050 <xQueueSemaphoreTake+0x104>
 8012038:	f04f 0350 	mov.w	r3, #80	; 0x50
 801203c:	b672      	cpsid	i
 801203e:	f383 8811 	msr	BASEPRI, r3
 8012042:	f3bf 8f6f 	isb	sy
 8012046:	f3bf 8f4f 	dsb	sy
 801204a:	b662      	cpsie	i
 801204c:	617b      	str	r3, [r7, #20]
 801204e:	e7fe      	b.n	801204e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012050:	f001 fb94 	bl	801377c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012054:	2300      	movs	r3, #0
 8012056:	e082      	b.n	801215e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801205a:	2b00      	cmp	r3, #0
 801205c:	d106      	bne.n	801206c <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801205e:	f107 030c 	add.w	r3, r7, #12
 8012062:	4618      	mov	r0, r3
 8012064:	f000 fec6 	bl	8012df4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012068:	2301      	movs	r3, #1
 801206a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801206c:	f001 fb86 	bl	801377c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012070:	f000 fbde 	bl	8012830 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012074:	f001 fb50 	bl	8013718 <vPortEnterCritical>
 8012078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801207a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801207e:	b25b      	sxtb	r3, r3
 8012080:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012084:	d103      	bne.n	801208e <xQueueSemaphoreTake+0x142>
 8012086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012088:	2200      	movs	r2, #0
 801208a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801208e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012090:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012094:	b25b      	sxtb	r3, r3
 8012096:	f1b3 3fff 	cmp.w	r3, #4294967295
 801209a:	d103      	bne.n	80120a4 <xQueueSemaphoreTake+0x158>
 801209c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801209e:	2200      	movs	r2, #0
 80120a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80120a4:	f001 fb6a 	bl	801377c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80120a8:	463a      	mov	r2, r7
 80120aa:	f107 030c 	add.w	r3, r7, #12
 80120ae:	4611      	mov	r1, r2
 80120b0:	4618      	mov	r0, r3
 80120b2:	f000 feb5 	bl	8012e20 <xTaskCheckForTimeOut>
 80120b6:	4603      	mov	r3, r0
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d132      	bne.n	8012122 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80120bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80120be:	f000 f9d2 	bl	8012466 <prvIsQueueEmpty>
 80120c2:	4603      	mov	r3, r0
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d026      	beq.n	8012116 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80120c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d109      	bne.n	80120e4 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80120d0:	f001 fb22 	bl	8013718 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80120d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120d6:	685b      	ldr	r3, [r3, #4]
 80120d8:	4618      	mov	r0, r3
 80120da:	f000 ffeb 	bl	80130b4 <xTaskPriorityInherit>
 80120de:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80120e0:	f001 fb4c 	bl	801377c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80120e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120e6:	3324      	adds	r3, #36	; 0x24
 80120e8:	683a      	ldr	r2, [r7, #0]
 80120ea:	4611      	mov	r1, r2
 80120ec:	4618      	mov	r0, r3
 80120ee:	f000 fdf7 	bl	8012ce0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80120f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80120f4:	f000 f965 	bl	80123c2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80120f8:	f000 fba8 	bl	801284c <xTaskResumeAll>
 80120fc:	4603      	mov	r3, r0
 80120fe:	2b00      	cmp	r3, #0
 8012100:	f47f af67 	bne.w	8011fd2 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8012104:	4b18      	ldr	r3, [pc, #96]	; (8012168 <xQueueSemaphoreTake+0x21c>)
 8012106:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801210a:	601a      	str	r2, [r3, #0]
 801210c:	f3bf 8f4f 	dsb	sy
 8012110:	f3bf 8f6f 	isb	sy
 8012114:	e75d      	b.n	8011fd2 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012116:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012118:	f000 f953 	bl	80123c2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801211c:	f000 fb96 	bl	801284c <xTaskResumeAll>
 8012120:	e757      	b.n	8011fd2 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012122:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012124:	f000 f94d 	bl	80123c2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012128:	f000 fb90 	bl	801284c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801212c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801212e:	f000 f99a 	bl	8012466 <prvIsQueueEmpty>
 8012132:	4603      	mov	r3, r0
 8012134:	2b00      	cmp	r3, #0
 8012136:	f43f af4c 	beq.w	8011fd2 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801213a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801213c:	2b00      	cmp	r3, #0
 801213e:	d00d      	beq.n	801215c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8012140:	f001 faea 	bl	8013718 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012144:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012146:	f000 f894 	bl	8012272 <prvGetDisinheritPriorityAfterTimeout>
 801214a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 801214c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801214e:	685b      	ldr	r3, [r3, #4]
 8012150:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012152:	4618      	mov	r0, r3
 8012154:	f001 f8bc 	bl	80132d0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012158:	f001 fb10 	bl	801377c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801215c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 801215e:	4618      	mov	r0, r3
 8012160:	3738      	adds	r7, #56	; 0x38
 8012162:	46bd      	mov	sp, r7
 8012164:	bd80      	pop	{r7, pc}
 8012166:	bf00      	nop
 8012168:	e000ed04 	.word	0xe000ed04

0801216c <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b08e      	sub	sp, #56	; 0x38
 8012170:	af00      	add	r7, sp, #0
 8012172:	60f8      	str	r0, [r7, #12]
 8012174:	60b9      	str	r1, [r7, #8]
 8012176:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801217c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801217e:	2b00      	cmp	r3, #0
 8012180:	d10b      	bne.n	801219a <xQueueReceiveFromISR+0x2e>
 8012182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012186:	b672      	cpsid	i
 8012188:	f383 8811 	msr	BASEPRI, r3
 801218c:	f3bf 8f6f 	isb	sy
 8012190:	f3bf 8f4f 	dsb	sy
 8012194:	b662      	cpsie	i
 8012196:	623b      	str	r3, [r7, #32]
 8012198:	e7fe      	b.n	8012198 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801219a:	68bb      	ldr	r3, [r7, #8]
 801219c:	2b00      	cmp	r3, #0
 801219e:	d103      	bne.n	80121a8 <xQueueReceiveFromISR+0x3c>
 80121a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d101      	bne.n	80121ac <xQueueReceiveFromISR+0x40>
 80121a8:	2301      	movs	r3, #1
 80121aa:	e000      	b.n	80121ae <xQueueReceiveFromISR+0x42>
 80121ac:	2300      	movs	r3, #0
 80121ae:	2b00      	cmp	r3, #0
 80121b0:	d10b      	bne.n	80121ca <xQueueReceiveFromISR+0x5e>
 80121b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121b6:	b672      	cpsid	i
 80121b8:	f383 8811 	msr	BASEPRI, r3
 80121bc:	f3bf 8f6f 	isb	sy
 80121c0:	f3bf 8f4f 	dsb	sy
 80121c4:	b662      	cpsie	i
 80121c6:	61fb      	str	r3, [r7, #28]
 80121c8:	e7fe      	b.n	80121c8 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80121ca:	f001 fb85 	bl	80138d8 <vPortValidateInterruptPriority>
	__asm volatile
 80121ce:	f3ef 8211 	mrs	r2, BASEPRI
 80121d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80121d6:	b672      	cpsid	i
 80121d8:	f383 8811 	msr	BASEPRI, r3
 80121dc:	f3bf 8f6f 	isb	sy
 80121e0:	f3bf 8f4f 	dsb	sy
 80121e4:	b662      	cpsie	i
 80121e6:	61ba      	str	r2, [r7, #24]
 80121e8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80121ea:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80121ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80121ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80121f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80121f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d02f      	beq.n	801225a <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80121fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121fc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012204:	68b9      	ldr	r1, [r7, #8]
 8012206:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012208:	f000 f8b5 	bl	8012376 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801220c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801220e:	1e5a      	subs	r2, r3, #1
 8012210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012212:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012214:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012218:	f1b3 3fff 	cmp.w	r3, #4294967295
 801221c:	d112      	bne.n	8012244 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801221e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012220:	691b      	ldr	r3, [r3, #16]
 8012222:	2b00      	cmp	r3, #0
 8012224:	d016      	beq.n	8012254 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012228:	3310      	adds	r3, #16
 801222a:	4618      	mov	r0, r3
 801222c:	f000 fd7e 	bl	8012d2c <xTaskRemoveFromEventList>
 8012230:	4603      	mov	r3, r0
 8012232:	2b00      	cmp	r3, #0
 8012234:	d00e      	beq.n	8012254 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d00b      	beq.n	8012254 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801223c:	687b      	ldr	r3, [r7, #4]
 801223e:	2201      	movs	r2, #1
 8012240:	601a      	str	r2, [r3, #0]
 8012242:	e007      	b.n	8012254 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8012244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012248:	3301      	adds	r3, #1
 801224a:	b2db      	uxtb	r3, r3
 801224c:	b25a      	sxtb	r2, r3
 801224e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8012254:	2301      	movs	r3, #1
 8012256:	637b      	str	r3, [r7, #52]	; 0x34
 8012258:	e001      	b.n	801225e <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 801225a:	2300      	movs	r3, #0
 801225c:	637b      	str	r3, [r7, #52]	; 0x34
 801225e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012260:	613b      	str	r3, [r7, #16]
	__asm volatile
 8012262:	693b      	ldr	r3, [r7, #16]
 8012264:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012268:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801226a:	4618      	mov	r0, r3
 801226c:	3738      	adds	r7, #56	; 0x38
 801226e:	46bd      	mov	sp, r7
 8012270:	bd80      	pop	{r7, pc}

08012272 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8012272:	b480      	push	{r7}
 8012274:	b085      	sub	sp, #20
 8012276:	af00      	add	r7, sp, #0
 8012278:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801227e:	2b00      	cmp	r3, #0
 8012280:	d006      	beq.n	8012290 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	f1c3 0307 	rsb	r3, r3, #7
 801228c:	60fb      	str	r3, [r7, #12]
 801228e:	e001      	b.n	8012294 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8012290:	2300      	movs	r3, #0
 8012292:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8012294:	68fb      	ldr	r3, [r7, #12]
	}
 8012296:	4618      	mov	r0, r3
 8012298:	3714      	adds	r7, #20
 801229a:	46bd      	mov	sp, r7
 801229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a0:	4770      	bx	lr

080122a2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80122a2:	b580      	push	{r7, lr}
 80122a4:	b086      	sub	sp, #24
 80122a6:	af00      	add	r7, sp, #0
 80122a8:	60f8      	str	r0, [r7, #12]
 80122aa:	60b9      	str	r1, [r7, #8]
 80122ac:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80122ae:	2300      	movs	r3, #0
 80122b0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80122b6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d10d      	bne.n	80122dc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d14d      	bne.n	8012364 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	685b      	ldr	r3, [r3, #4]
 80122cc:	4618      	mov	r0, r3
 80122ce:	f000 ff77 	bl	80131c0 <xTaskPriorityDisinherit>
 80122d2:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80122d4:	68fb      	ldr	r3, [r7, #12]
 80122d6:	2200      	movs	r2, #0
 80122d8:	605a      	str	r2, [r3, #4]
 80122da:	e043      	b.n	8012364 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80122dc:	687b      	ldr	r3, [r7, #4]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d119      	bne.n	8012316 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80122e2:	68fb      	ldr	r3, [r7, #12]
 80122e4:	6898      	ldr	r0, [r3, #8]
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122ea:	461a      	mov	r2, r3
 80122ec:	68b9      	ldr	r1, [r7, #8]
 80122ee:	f010 f925 	bl	802253c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80122f2:	68fb      	ldr	r3, [r7, #12]
 80122f4:	689a      	ldr	r2, [r3, #8]
 80122f6:	68fb      	ldr	r3, [r7, #12]
 80122f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122fa:	441a      	add	r2, r3
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012300:	68fb      	ldr	r3, [r7, #12]
 8012302:	689a      	ldr	r2, [r3, #8]
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	685b      	ldr	r3, [r3, #4]
 8012308:	429a      	cmp	r2, r3
 801230a:	d32b      	bcc.n	8012364 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801230c:	68fb      	ldr	r3, [r7, #12]
 801230e:	681a      	ldr	r2, [r3, #0]
 8012310:	68fb      	ldr	r3, [r7, #12]
 8012312:	609a      	str	r2, [r3, #8]
 8012314:	e026      	b.n	8012364 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012316:	68fb      	ldr	r3, [r7, #12]
 8012318:	68d8      	ldr	r0, [r3, #12]
 801231a:	68fb      	ldr	r3, [r7, #12]
 801231c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801231e:	461a      	mov	r2, r3
 8012320:	68b9      	ldr	r1, [r7, #8]
 8012322:	f010 f90b 	bl	802253c <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8012326:	68fb      	ldr	r3, [r7, #12]
 8012328:	68da      	ldr	r2, [r3, #12]
 801232a:	68fb      	ldr	r3, [r7, #12]
 801232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801232e:	425b      	negs	r3, r3
 8012330:	441a      	add	r2, r3
 8012332:	68fb      	ldr	r3, [r7, #12]
 8012334:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	68da      	ldr	r2, [r3, #12]
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	429a      	cmp	r2, r3
 8012340:	d207      	bcs.n	8012352 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	685a      	ldr	r2, [r3, #4]
 8012346:	68fb      	ldr	r3, [r7, #12]
 8012348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801234a:	425b      	negs	r3, r3
 801234c:	441a      	add	r2, r3
 801234e:	68fb      	ldr	r3, [r7, #12]
 8012350:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	2b02      	cmp	r3, #2
 8012356:	d105      	bne.n	8012364 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012358:	693b      	ldr	r3, [r7, #16]
 801235a:	2b00      	cmp	r3, #0
 801235c:	d002      	beq.n	8012364 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801235e:	693b      	ldr	r3, [r7, #16]
 8012360:	3b01      	subs	r3, #1
 8012362:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012364:	693b      	ldr	r3, [r7, #16]
 8012366:	1c5a      	adds	r2, r3, #1
 8012368:	68fb      	ldr	r3, [r7, #12]
 801236a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801236c:	697b      	ldr	r3, [r7, #20]
}
 801236e:	4618      	mov	r0, r3
 8012370:	3718      	adds	r7, #24
 8012372:	46bd      	mov	sp, r7
 8012374:	bd80      	pop	{r7, pc}

08012376 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8012376:	b580      	push	{r7, lr}
 8012378:	b082      	sub	sp, #8
 801237a:	af00      	add	r7, sp, #0
 801237c:	6078      	str	r0, [r7, #4]
 801237e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012384:	2b00      	cmp	r3, #0
 8012386:	d018      	beq.n	80123ba <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	68da      	ldr	r2, [r3, #12]
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012390:	441a      	add	r2, r3
 8012392:	687b      	ldr	r3, [r7, #4]
 8012394:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	68da      	ldr	r2, [r3, #12]
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	685b      	ldr	r3, [r3, #4]
 801239e:	429a      	cmp	r2, r3
 80123a0:	d303      	bcc.n	80123aa <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80123a2:	687b      	ldr	r3, [r7, #4]
 80123a4:	681a      	ldr	r2, [r3, #0]
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	68d9      	ldr	r1, [r3, #12]
 80123ae:	687b      	ldr	r3, [r7, #4]
 80123b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123b2:	461a      	mov	r2, r3
 80123b4:	6838      	ldr	r0, [r7, #0]
 80123b6:	f010 f8c1 	bl	802253c <memcpy>
	}
}
 80123ba:	bf00      	nop
 80123bc:	3708      	adds	r7, #8
 80123be:	46bd      	mov	sp, r7
 80123c0:	bd80      	pop	{r7, pc}

080123c2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80123c2:	b580      	push	{r7, lr}
 80123c4:	b084      	sub	sp, #16
 80123c6:	af00      	add	r7, sp, #0
 80123c8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80123ca:	f001 f9a5 	bl	8013718 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80123d4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80123d6:	e011      	b.n	80123fc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80123d8:	687b      	ldr	r3, [r7, #4]
 80123da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123dc:	2b00      	cmp	r3, #0
 80123de:	d012      	beq.n	8012406 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	3324      	adds	r3, #36	; 0x24
 80123e4:	4618      	mov	r0, r3
 80123e6:	f000 fca1 	bl	8012d2c <xTaskRemoveFromEventList>
 80123ea:	4603      	mov	r3, r0
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d001      	beq.n	80123f4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80123f0:	f000 fd7a 	bl	8012ee8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80123f4:	7bfb      	ldrb	r3, [r7, #15]
 80123f6:	3b01      	subs	r3, #1
 80123f8:	b2db      	uxtb	r3, r3
 80123fa:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80123fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012400:	2b00      	cmp	r3, #0
 8012402:	dce9      	bgt.n	80123d8 <prvUnlockQueue+0x16>
 8012404:	e000      	b.n	8012408 <prvUnlockQueue+0x46>
					break;
 8012406:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	22ff      	movs	r2, #255	; 0xff
 801240c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8012410:	f001 f9b4 	bl	801377c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012414:	f001 f980 	bl	8013718 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012418:	687b      	ldr	r3, [r7, #4]
 801241a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801241e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012420:	e011      	b.n	8012446 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	691b      	ldr	r3, [r3, #16]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d012      	beq.n	8012450 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	3310      	adds	r3, #16
 801242e:	4618      	mov	r0, r3
 8012430:	f000 fc7c 	bl	8012d2c <xTaskRemoveFromEventList>
 8012434:	4603      	mov	r3, r0
 8012436:	2b00      	cmp	r3, #0
 8012438:	d001      	beq.n	801243e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 801243a:	f000 fd55 	bl	8012ee8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801243e:	7bbb      	ldrb	r3, [r7, #14]
 8012440:	3b01      	subs	r3, #1
 8012442:	b2db      	uxtb	r3, r3
 8012444:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012446:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801244a:	2b00      	cmp	r3, #0
 801244c:	dce9      	bgt.n	8012422 <prvUnlockQueue+0x60>
 801244e:	e000      	b.n	8012452 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8012450:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8012452:	687b      	ldr	r3, [r7, #4]
 8012454:	22ff      	movs	r2, #255	; 0xff
 8012456:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 801245a:	f001 f98f 	bl	801377c <vPortExitCritical>
}
 801245e:	bf00      	nop
 8012460:	3710      	adds	r7, #16
 8012462:	46bd      	mov	sp, r7
 8012464:	bd80      	pop	{r7, pc}

08012466 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8012466:	b580      	push	{r7, lr}
 8012468:	b084      	sub	sp, #16
 801246a:	af00      	add	r7, sp, #0
 801246c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801246e:	f001 f953 	bl	8013718 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012476:	2b00      	cmp	r3, #0
 8012478:	d102      	bne.n	8012480 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801247a:	2301      	movs	r3, #1
 801247c:	60fb      	str	r3, [r7, #12]
 801247e:	e001      	b.n	8012484 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8012480:	2300      	movs	r3, #0
 8012482:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012484:	f001 f97a 	bl	801377c <vPortExitCritical>

	return xReturn;
 8012488:	68fb      	ldr	r3, [r7, #12]
}
 801248a:	4618      	mov	r0, r3
 801248c:	3710      	adds	r7, #16
 801248e:	46bd      	mov	sp, r7
 8012490:	bd80      	pop	{r7, pc}

08012492 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8012492:	b580      	push	{r7, lr}
 8012494:	b084      	sub	sp, #16
 8012496:	af00      	add	r7, sp, #0
 8012498:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801249a:	f001 f93d 	bl	8013718 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124a6:	429a      	cmp	r2, r3
 80124a8:	d102      	bne.n	80124b0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80124aa:	2301      	movs	r3, #1
 80124ac:	60fb      	str	r3, [r7, #12]
 80124ae:	e001      	b.n	80124b4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80124b0:	2300      	movs	r3, #0
 80124b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80124b4:	f001 f962 	bl	801377c <vPortExitCritical>

	return xReturn;
 80124b8:	68fb      	ldr	r3, [r7, #12]
}
 80124ba:	4618      	mov	r0, r3
 80124bc:	3710      	adds	r7, #16
 80124be:	46bd      	mov	sp, r7
 80124c0:	bd80      	pop	{r7, pc}

080124c2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80124c2:	b580      	push	{r7, lr}
 80124c4:	b08c      	sub	sp, #48	; 0x30
 80124c6:	af04      	add	r7, sp, #16
 80124c8:	60f8      	str	r0, [r7, #12]
 80124ca:	60b9      	str	r1, [r7, #8]
 80124cc:	603b      	str	r3, [r7, #0]
 80124ce:	4613      	mov	r3, r2
 80124d0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80124d2:	88fb      	ldrh	r3, [r7, #6]
 80124d4:	009b      	lsls	r3, r3, #2
 80124d6:	4618      	mov	r0, r3
 80124d8:	f001 fa40 	bl	801395c <pvPortMalloc>
 80124dc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80124de:	697b      	ldr	r3, [r7, #20]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d00e      	beq.n	8012502 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80124e4:	2058      	movs	r0, #88	; 0x58
 80124e6:	f001 fa39 	bl	801395c <pvPortMalloc>
 80124ea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80124ec:	69fb      	ldr	r3, [r7, #28]
 80124ee:	2b00      	cmp	r3, #0
 80124f0:	d003      	beq.n	80124fa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80124f2:	69fb      	ldr	r3, [r7, #28]
 80124f4:	697a      	ldr	r2, [r7, #20]
 80124f6:	631a      	str	r2, [r3, #48]	; 0x30
 80124f8:	e005      	b.n	8012506 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80124fa:	6978      	ldr	r0, [r7, #20]
 80124fc:	f001 fafa 	bl	8013af4 <vPortFree>
 8012500:	e001      	b.n	8012506 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012502:	2300      	movs	r3, #0
 8012504:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012506:	69fb      	ldr	r3, [r7, #28]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d013      	beq.n	8012534 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801250c:	88fa      	ldrh	r2, [r7, #6]
 801250e:	2300      	movs	r3, #0
 8012510:	9303      	str	r3, [sp, #12]
 8012512:	69fb      	ldr	r3, [r7, #28]
 8012514:	9302      	str	r3, [sp, #8]
 8012516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012518:	9301      	str	r3, [sp, #4]
 801251a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801251c:	9300      	str	r3, [sp, #0]
 801251e:	683b      	ldr	r3, [r7, #0]
 8012520:	68b9      	ldr	r1, [r7, #8]
 8012522:	68f8      	ldr	r0, [r7, #12]
 8012524:	f000 f80e 	bl	8012544 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012528:	69f8      	ldr	r0, [r7, #28]
 801252a:	f000 f897 	bl	801265c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801252e:	2301      	movs	r3, #1
 8012530:	61bb      	str	r3, [r7, #24]
 8012532:	e002      	b.n	801253a <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012534:	f04f 33ff 	mov.w	r3, #4294967295
 8012538:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801253a:	69bb      	ldr	r3, [r7, #24]
	}
 801253c:	4618      	mov	r0, r3
 801253e:	3720      	adds	r7, #32
 8012540:	46bd      	mov	sp, r7
 8012542:	bd80      	pop	{r7, pc}

08012544 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012544:	b580      	push	{r7, lr}
 8012546:	b088      	sub	sp, #32
 8012548:	af00      	add	r7, sp, #0
 801254a:	60f8      	str	r0, [r7, #12]
 801254c:	60b9      	str	r1, [r7, #8]
 801254e:	607a      	str	r2, [r7, #4]
 8012550:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8012552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012554:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	009b      	lsls	r3, r3, #2
 801255a:	461a      	mov	r2, r3
 801255c:	21a5      	movs	r1, #165	; 0xa5
 801255e:	f00f fff8 	bl	8022552 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8012562:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012564:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8012566:	6879      	ldr	r1, [r7, #4]
 8012568:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 801256c:	440b      	add	r3, r1
 801256e:	009b      	lsls	r3, r3, #2
 8012570:	4413      	add	r3, r2
 8012572:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8012574:	69bb      	ldr	r3, [r7, #24]
 8012576:	f023 0307 	bic.w	r3, r3, #7
 801257a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801257c:	69bb      	ldr	r3, [r7, #24]
 801257e:	f003 0307 	and.w	r3, r3, #7
 8012582:	2b00      	cmp	r3, #0
 8012584:	d00b      	beq.n	801259e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8012586:	f04f 0350 	mov.w	r3, #80	; 0x50
 801258a:	b672      	cpsid	i
 801258c:	f383 8811 	msr	BASEPRI, r3
 8012590:	f3bf 8f6f 	isb	sy
 8012594:	f3bf 8f4f 	dsb	sy
 8012598:	b662      	cpsie	i
 801259a:	617b      	str	r3, [r7, #20]
 801259c:	e7fe      	b.n	801259c <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801259e:	2300      	movs	r3, #0
 80125a0:	61fb      	str	r3, [r7, #28]
 80125a2:	e012      	b.n	80125ca <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80125a4:	68ba      	ldr	r2, [r7, #8]
 80125a6:	69fb      	ldr	r3, [r7, #28]
 80125a8:	4413      	add	r3, r2
 80125aa:	7819      	ldrb	r1, [r3, #0]
 80125ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125ae:	69fb      	ldr	r3, [r7, #28]
 80125b0:	4413      	add	r3, r2
 80125b2:	3334      	adds	r3, #52	; 0x34
 80125b4:	460a      	mov	r2, r1
 80125b6:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80125b8:	68ba      	ldr	r2, [r7, #8]
 80125ba:	69fb      	ldr	r3, [r7, #28]
 80125bc:	4413      	add	r3, r2
 80125be:	781b      	ldrb	r3, [r3, #0]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d006      	beq.n	80125d2 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80125c4:	69fb      	ldr	r3, [r7, #28]
 80125c6:	3301      	adds	r3, #1
 80125c8:	61fb      	str	r3, [r7, #28]
 80125ca:	69fb      	ldr	r3, [r7, #28]
 80125cc:	2b0f      	cmp	r3, #15
 80125ce:	d9e9      	bls.n	80125a4 <prvInitialiseNewTask+0x60>
 80125d0:	e000      	b.n	80125d4 <prvInitialiseNewTask+0x90>
		{
			break;
 80125d2:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80125d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125d6:	2200      	movs	r2, #0
 80125d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80125dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80125de:	2b06      	cmp	r3, #6
 80125e0:	d901      	bls.n	80125e6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80125e2:	2306      	movs	r3, #6
 80125e4:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80125e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80125ea:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80125ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80125f0:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80125f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125f4:	2200      	movs	r2, #0
 80125f6:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80125f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125fa:	3304      	adds	r3, #4
 80125fc:	4618      	mov	r0, r3
 80125fe:	f7ff f805 	bl	801160c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012604:	3318      	adds	r3, #24
 8012606:	4618      	mov	r0, r3
 8012608:	f7ff f800 	bl	801160c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801260c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801260e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012610:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012614:	f1c3 0207 	rsb	r2, r3, #7
 8012618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801261a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801261c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801261e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012620:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 8012622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012624:	2200      	movs	r2, #0
 8012626:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801262a:	2200      	movs	r2, #0
 801262c:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801262e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012630:	2200      	movs	r2, #0
 8012632:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8012636:	683a      	ldr	r2, [r7, #0]
 8012638:	68f9      	ldr	r1, [r7, #12]
 801263a:	69b8      	ldr	r0, [r7, #24]
 801263c:	f000 ff64 	bl	8013508 <pxPortInitialiseStack>
 8012640:	4602      	mov	r2, r0
 8012642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012644:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8012646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012648:	2b00      	cmp	r3, #0
 801264a:	d002      	beq.n	8012652 <prvInitialiseNewTask+0x10e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801264e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012650:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012652:	bf00      	nop
 8012654:	3720      	adds	r7, #32
 8012656:	46bd      	mov	sp, r7
 8012658:	bd80      	pop	{r7, pc}
	...

0801265c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801265c:	b580      	push	{r7, lr}
 801265e:	b082      	sub	sp, #8
 8012660:	af00      	add	r7, sp, #0
 8012662:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8012664:	f001 f858 	bl	8013718 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8012668:	4b2a      	ldr	r3, [pc, #168]	; (8012714 <prvAddNewTaskToReadyList+0xb8>)
 801266a:	681b      	ldr	r3, [r3, #0]
 801266c:	3301      	adds	r3, #1
 801266e:	4a29      	ldr	r2, [pc, #164]	; (8012714 <prvAddNewTaskToReadyList+0xb8>)
 8012670:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8012672:	4b29      	ldr	r3, [pc, #164]	; (8012718 <prvAddNewTaskToReadyList+0xbc>)
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d109      	bne.n	801268e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801267a:	4a27      	ldr	r2, [pc, #156]	; (8012718 <prvAddNewTaskToReadyList+0xbc>)
 801267c:	687b      	ldr	r3, [r7, #4]
 801267e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8012680:	4b24      	ldr	r3, [pc, #144]	; (8012714 <prvAddNewTaskToReadyList+0xb8>)
 8012682:	681b      	ldr	r3, [r3, #0]
 8012684:	2b01      	cmp	r3, #1
 8012686:	d110      	bne.n	80126aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8012688:	f000 fc54 	bl	8012f34 <prvInitialiseTaskLists>
 801268c:	e00d      	b.n	80126aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801268e:	4b23      	ldr	r3, [pc, #140]	; (801271c <prvAddNewTaskToReadyList+0xc0>)
 8012690:	681b      	ldr	r3, [r3, #0]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d109      	bne.n	80126aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8012696:	4b20      	ldr	r3, [pc, #128]	; (8012718 <prvAddNewTaskToReadyList+0xbc>)
 8012698:	681b      	ldr	r3, [r3, #0]
 801269a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126a0:	429a      	cmp	r2, r3
 80126a2:	d802      	bhi.n	80126aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80126a4:	4a1c      	ldr	r2, [pc, #112]	; (8012718 <prvAddNewTaskToReadyList+0xbc>)
 80126a6:	687b      	ldr	r3, [r7, #4]
 80126a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80126aa:	4b1d      	ldr	r3, [pc, #116]	; (8012720 <prvAddNewTaskToReadyList+0xc4>)
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	3301      	adds	r3, #1
 80126b0:	4a1b      	ldr	r2, [pc, #108]	; (8012720 <prvAddNewTaskToReadyList+0xc4>)
 80126b2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126b8:	2201      	movs	r2, #1
 80126ba:	409a      	lsls	r2, r3
 80126bc:	4b19      	ldr	r3, [pc, #100]	; (8012724 <prvAddNewTaskToReadyList+0xc8>)
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	4313      	orrs	r3, r2
 80126c2:	4a18      	ldr	r2, [pc, #96]	; (8012724 <prvAddNewTaskToReadyList+0xc8>)
 80126c4:	6013      	str	r3, [r2, #0]
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126ca:	4613      	mov	r3, r2
 80126cc:	009b      	lsls	r3, r3, #2
 80126ce:	4413      	add	r3, r2
 80126d0:	009b      	lsls	r3, r3, #2
 80126d2:	4a15      	ldr	r2, [pc, #84]	; (8012728 <prvAddNewTaskToReadyList+0xcc>)
 80126d4:	441a      	add	r2, r3
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	3304      	adds	r3, #4
 80126da:	4619      	mov	r1, r3
 80126dc:	4610      	mov	r0, r2
 80126de:	f7fe ffa2 	bl	8011626 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80126e2:	f001 f84b 	bl	801377c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80126e6:	4b0d      	ldr	r3, [pc, #52]	; (801271c <prvAddNewTaskToReadyList+0xc0>)
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d00e      	beq.n	801270c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80126ee:	4b0a      	ldr	r3, [pc, #40]	; (8012718 <prvAddNewTaskToReadyList+0xbc>)
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80126f8:	429a      	cmp	r2, r3
 80126fa:	d207      	bcs.n	801270c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80126fc:	4b0b      	ldr	r3, [pc, #44]	; (801272c <prvAddNewTaskToReadyList+0xd0>)
 80126fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012702:	601a      	str	r2, [r3, #0]
 8012704:	f3bf 8f4f 	dsb	sy
 8012708:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801270c:	bf00      	nop
 801270e:	3708      	adds	r7, #8
 8012710:	46bd      	mov	sp, r7
 8012712:	bd80      	pop	{r7, pc}
 8012714:	20000248 	.word	0x20000248
 8012718:	20000148 	.word	0x20000148
 801271c:	20000254 	.word	0x20000254
 8012720:	20000264 	.word	0x20000264
 8012724:	20000250 	.word	0x20000250
 8012728:	2000014c 	.word	0x2000014c
 801272c:	e000ed04 	.word	0xe000ed04

08012730 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012730:	b580      	push	{r7, lr}
 8012732:	b084      	sub	sp, #16
 8012734:	af00      	add	r7, sp, #0
 8012736:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8012738:	2300      	movs	r3, #0
 801273a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d018      	beq.n	8012774 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8012742:	4b14      	ldr	r3, [pc, #80]	; (8012794 <vTaskDelay+0x64>)
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	2b00      	cmp	r3, #0
 8012748:	d00b      	beq.n	8012762 <vTaskDelay+0x32>
 801274a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801274e:	b672      	cpsid	i
 8012750:	f383 8811 	msr	BASEPRI, r3
 8012754:	f3bf 8f6f 	isb	sy
 8012758:	f3bf 8f4f 	dsb	sy
 801275c:	b662      	cpsie	i
 801275e:	60bb      	str	r3, [r7, #8]
 8012760:	e7fe      	b.n	8012760 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8012762:	f000 f865 	bl	8012830 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8012766:	2100      	movs	r1, #0
 8012768:	6878      	ldr	r0, [r7, #4]
 801276a:	f000 fe67 	bl	801343c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801276e:	f000 f86d 	bl	801284c <xTaskResumeAll>
 8012772:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	2b00      	cmp	r3, #0
 8012778:	d107      	bne.n	801278a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801277a:	4b07      	ldr	r3, [pc, #28]	; (8012798 <vTaskDelay+0x68>)
 801277c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012780:	601a      	str	r2, [r3, #0]
 8012782:	f3bf 8f4f 	dsb	sy
 8012786:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801278a:	bf00      	nop
 801278c:	3710      	adds	r7, #16
 801278e:	46bd      	mov	sp, r7
 8012790:	bd80      	pop	{r7, pc}
 8012792:	bf00      	nop
 8012794:	20000270 	.word	0x20000270
 8012798:	e000ed04 	.word	0xe000ed04

0801279c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801279c:	b580      	push	{r7, lr}
 801279e:	b086      	sub	sp, #24
 80127a0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80127a2:	4b1d      	ldr	r3, [pc, #116]	; (8012818 <vTaskStartScheduler+0x7c>)
 80127a4:	9301      	str	r3, [sp, #4]
 80127a6:	2300      	movs	r3, #0
 80127a8:	9300      	str	r3, [sp, #0]
 80127aa:	2300      	movs	r3, #0
 80127ac:	2280      	movs	r2, #128	; 0x80
 80127ae:	491b      	ldr	r1, [pc, #108]	; (801281c <vTaskStartScheduler+0x80>)
 80127b0:	481b      	ldr	r0, [pc, #108]	; (8012820 <vTaskStartScheduler+0x84>)
 80127b2:	f7ff fe86 	bl	80124c2 <xTaskCreate>
 80127b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	2b01      	cmp	r3, #1
 80127bc:	d117      	bne.n	80127ee <vTaskStartScheduler+0x52>
 80127be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127c2:	b672      	cpsid	i
 80127c4:	f383 8811 	msr	BASEPRI, r3
 80127c8:	f3bf 8f6f 	isb	sy
 80127cc:	f3bf 8f4f 	dsb	sy
 80127d0:	b662      	cpsie	i
 80127d2:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80127d4:	4b13      	ldr	r3, [pc, #76]	; (8012824 <vTaskStartScheduler+0x88>)
 80127d6:	f04f 32ff 	mov.w	r2, #4294967295
 80127da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80127dc:	4b12      	ldr	r3, [pc, #72]	; (8012828 <vTaskStartScheduler+0x8c>)
 80127de:	2201      	movs	r2, #1
 80127e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80127e2:	4b12      	ldr	r3, [pc, #72]	; (801282c <vTaskStartScheduler+0x90>)
 80127e4:	2200      	movs	r2, #0
 80127e6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80127e8:	f000 ff1a 	bl	8013620 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80127ec:	e00f      	b.n	801280e <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80127f4:	d10b      	bne.n	801280e <vTaskStartScheduler+0x72>
 80127f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127fa:	b672      	cpsid	i
 80127fc:	f383 8811 	msr	BASEPRI, r3
 8012800:	f3bf 8f6f 	isb	sy
 8012804:	f3bf 8f4f 	dsb	sy
 8012808:	b662      	cpsie	i
 801280a:	607b      	str	r3, [r7, #4]
 801280c:	e7fe      	b.n	801280c <vTaskStartScheduler+0x70>
}
 801280e:	bf00      	nop
 8012810:	3710      	adds	r7, #16
 8012812:	46bd      	mov	sp, r7
 8012814:	bd80      	pop	{r7, pc}
 8012816:	bf00      	nop
 8012818:	2000026c 	.word	0x2000026c
 801281c:	0802394c 	.word	0x0802394c
 8012820:	08012f01 	.word	0x08012f01
 8012824:	20000268 	.word	0x20000268
 8012828:	20000254 	.word	0x20000254
 801282c:	2000024c 	.word	0x2000024c

08012830 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012830:	b480      	push	{r7}
 8012832:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8012834:	4b04      	ldr	r3, [pc, #16]	; (8012848 <vTaskSuspendAll+0x18>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	3301      	adds	r3, #1
 801283a:	4a03      	ldr	r2, [pc, #12]	; (8012848 <vTaskSuspendAll+0x18>)
 801283c:	6013      	str	r3, [r2, #0]
}
 801283e:	bf00      	nop
 8012840:	46bd      	mov	sp, r7
 8012842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012846:	4770      	bx	lr
 8012848:	20000270 	.word	0x20000270

0801284c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801284c:	b580      	push	{r7, lr}
 801284e:	b084      	sub	sp, #16
 8012850:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012852:	2300      	movs	r3, #0
 8012854:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8012856:	2300      	movs	r3, #0
 8012858:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801285a:	4b42      	ldr	r3, [pc, #264]	; (8012964 <xTaskResumeAll+0x118>)
 801285c:	681b      	ldr	r3, [r3, #0]
 801285e:	2b00      	cmp	r3, #0
 8012860:	d10b      	bne.n	801287a <xTaskResumeAll+0x2e>
 8012862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012866:	b672      	cpsid	i
 8012868:	f383 8811 	msr	BASEPRI, r3
 801286c:	f3bf 8f6f 	isb	sy
 8012870:	f3bf 8f4f 	dsb	sy
 8012874:	b662      	cpsie	i
 8012876:	603b      	str	r3, [r7, #0]
 8012878:	e7fe      	b.n	8012878 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801287a:	f000 ff4d 	bl	8013718 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801287e:	4b39      	ldr	r3, [pc, #228]	; (8012964 <xTaskResumeAll+0x118>)
 8012880:	681b      	ldr	r3, [r3, #0]
 8012882:	3b01      	subs	r3, #1
 8012884:	4a37      	ldr	r2, [pc, #220]	; (8012964 <xTaskResumeAll+0x118>)
 8012886:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012888:	4b36      	ldr	r3, [pc, #216]	; (8012964 <xTaskResumeAll+0x118>)
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d161      	bne.n	8012954 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012890:	4b35      	ldr	r3, [pc, #212]	; (8012968 <xTaskResumeAll+0x11c>)
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d05d      	beq.n	8012954 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8012898:	e02e      	b.n	80128f8 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 801289a:	4b34      	ldr	r3, [pc, #208]	; (801296c <xTaskResumeAll+0x120>)
 801289c:	68db      	ldr	r3, [r3, #12]
 801289e:	68db      	ldr	r3, [r3, #12]
 80128a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80128a2:	68fb      	ldr	r3, [r7, #12]
 80128a4:	3318      	adds	r3, #24
 80128a6:	4618      	mov	r0, r3
 80128a8:	f7fe ff1a 	bl	80116e0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80128ac:	68fb      	ldr	r3, [r7, #12]
 80128ae:	3304      	adds	r3, #4
 80128b0:	4618      	mov	r0, r3
 80128b2:	f7fe ff15 	bl	80116e0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128ba:	2201      	movs	r2, #1
 80128bc:	409a      	lsls	r2, r3
 80128be:	4b2c      	ldr	r3, [pc, #176]	; (8012970 <xTaskResumeAll+0x124>)
 80128c0:	681b      	ldr	r3, [r3, #0]
 80128c2:	4313      	orrs	r3, r2
 80128c4:	4a2a      	ldr	r2, [pc, #168]	; (8012970 <xTaskResumeAll+0x124>)
 80128c6:	6013      	str	r3, [r2, #0]
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128cc:	4613      	mov	r3, r2
 80128ce:	009b      	lsls	r3, r3, #2
 80128d0:	4413      	add	r3, r2
 80128d2:	009b      	lsls	r3, r3, #2
 80128d4:	4a27      	ldr	r2, [pc, #156]	; (8012974 <xTaskResumeAll+0x128>)
 80128d6:	441a      	add	r2, r3
 80128d8:	68fb      	ldr	r3, [r7, #12]
 80128da:	3304      	adds	r3, #4
 80128dc:	4619      	mov	r1, r3
 80128de:	4610      	mov	r0, r2
 80128e0:	f7fe fea1 	bl	8011626 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80128e4:	68fb      	ldr	r3, [r7, #12]
 80128e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128e8:	4b23      	ldr	r3, [pc, #140]	; (8012978 <xTaskResumeAll+0x12c>)
 80128ea:	681b      	ldr	r3, [r3, #0]
 80128ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128ee:	429a      	cmp	r2, r3
 80128f0:	d302      	bcc.n	80128f8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80128f2:	4b22      	ldr	r3, [pc, #136]	; (801297c <xTaskResumeAll+0x130>)
 80128f4:	2201      	movs	r2, #1
 80128f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80128f8:	4b1c      	ldr	r3, [pc, #112]	; (801296c <xTaskResumeAll+0x120>)
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	2b00      	cmp	r3, #0
 80128fe:	d1cc      	bne.n	801289a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	2b00      	cmp	r3, #0
 8012904:	d001      	beq.n	801290a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012906:	f000 fb91 	bl	801302c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801290a:	4b1d      	ldr	r3, [pc, #116]	; (8012980 <xTaskResumeAll+0x134>)
 801290c:	681b      	ldr	r3, [r3, #0]
 801290e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012910:	687b      	ldr	r3, [r7, #4]
 8012912:	2b00      	cmp	r3, #0
 8012914:	d010      	beq.n	8012938 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012916:	f000 f859 	bl	80129cc <xTaskIncrementTick>
 801291a:	4603      	mov	r3, r0
 801291c:	2b00      	cmp	r3, #0
 801291e:	d002      	beq.n	8012926 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8012920:	4b16      	ldr	r3, [pc, #88]	; (801297c <xTaskResumeAll+0x130>)
 8012922:	2201      	movs	r2, #1
 8012924:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	3b01      	subs	r3, #1
 801292a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	2b00      	cmp	r3, #0
 8012930:	d1f1      	bne.n	8012916 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8012932:	4b13      	ldr	r3, [pc, #76]	; (8012980 <xTaskResumeAll+0x134>)
 8012934:	2200      	movs	r2, #0
 8012936:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8012938:	4b10      	ldr	r3, [pc, #64]	; (801297c <xTaskResumeAll+0x130>)
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d009      	beq.n	8012954 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012940:	2301      	movs	r3, #1
 8012942:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012944:	4b0f      	ldr	r3, [pc, #60]	; (8012984 <xTaskResumeAll+0x138>)
 8012946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801294a:	601a      	str	r2, [r3, #0]
 801294c:	f3bf 8f4f 	dsb	sy
 8012950:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012954:	f000 ff12 	bl	801377c <vPortExitCritical>

	return xAlreadyYielded;
 8012958:	68bb      	ldr	r3, [r7, #8]
}
 801295a:	4618      	mov	r0, r3
 801295c:	3710      	adds	r7, #16
 801295e:	46bd      	mov	sp, r7
 8012960:	bd80      	pop	{r7, pc}
 8012962:	bf00      	nop
 8012964:	20000270 	.word	0x20000270
 8012968:	20000248 	.word	0x20000248
 801296c:	20000208 	.word	0x20000208
 8012970:	20000250 	.word	0x20000250
 8012974:	2000014c 	.word	0x2000014c
 8012978:	20000148 	.word	0x20000148
 801297c:	2000025c 	.word	0x2000025c
 8012980:	20000258 	.word	0x20000258
 8012984:	e000ed04 	.word	0xe000ed04

08012988 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012988:	b480      	push	{r7}
 801298a:	b083      	sub	sp, #12
 801298c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801298e:	4b05      	ldr	r3, [pc, #20]	; (80129a4 <xTaskGetTickCount+0x1c>)
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012994:	687b      	ldr	r3, [r7, #4]
}
 8012996:	4618      	mov	r0, r3
 8012998:	370c      	adds	r7, #12
 801299a:	46bd      	mov	sp, r7
 801299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129a0:	4770      	bx	lr
 80129a2:	bf00      	nop
 80129a4:	2000024c 	.word	0x2000024c

080129a8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80129a8:	b580      	push	{r7, lr}
 80129aa:	b082      	sub	sp, #8
 80129ac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80129ae:	f000 ff93 	bl	80138d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80129b2:	2300      	movs	r3, #0
 80129b4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80129b6:	4b04      	ldr	r3, [pc, #16]	; (80129c8 <xTaskGetTickCountFromISR+0x20>)
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80129bc:	683b      	ldr	r3, [r7, #0]
}
 80129be:	4618      	mov	r0, r3
 80129c0:	3708      	adds	r7, #8
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd80      	pop	{r7, pc}
 80129c6:	bf00      	nop
 80129c8:	2000024c 	.word	0x2000024c

080129cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b086      	sub	sp, #24
 80129d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80129d2:	2300      	movs	r3, #0
 80129d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80129d6:	4b51      	ldr	r3, [pc, #324]	; (8012b1c <xTaskIncrementTick+0x150>)
 80129d8:	681b      	ldr	r3, [r3, #0]
 80129da:	2b00      	cmp	r3, #0
 80129dc:	f040 808e 	bne.w	8012afc <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80129e0:	4b4f      	ldr	r3, [pc, #316]	; (8012b20 <xTaskIncrementTick+0x154>)
 80129e2:	681b      	ldr	r3, [r3, #0]
 80129e4:	3301      	adds	r3, #1
 80129e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80129e8:	4a4d      	ldr	r2, [pc, #308]	; (8012b20 <xTaskIncrementTick+0x154>)
 80129ea:	693b      	ldr	r3, [r7, #16]
 80129ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80129ee:	693b      	ldr	r3, [r7, #16]
 80129f0:	2b00      	cmp	r3, #0
 80129f2:	d121      	bne.n	8012a38 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80129f4:	4b4b      	ldr	r3, [pc, #300]	; (8012b24 <xTaskIncrementTick+0x158>)
 80129f6:	681b      	ldr	r3, [r3, #0]
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d00b      	beq.n	8012a16 <xTaskIncrementTick+0x4a>
 80129fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a02:	b672      	cpsid	i
 8012a04:	f383 8811 	msr	BASEPRI, r3
 8012a08:	f3bf 8f6f 	isb	sy
 8012a0c:	f3bf 8f4f 	dsb	sy
 8012a10:	b662      	cpsie	i
 8012a12:	603b      	str	r3, [r7, #0]
 8012a14:	e7fe      	b.n	8012a14 <xTaskIncrementTick+0x48>
 8012a16:	4b43      	ldr	r3, [pc, #268]	; (8012b24 <xTaskIncrementTick+0x158>)
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	60fb      	str	r3, [r7, #12]
 8012a1c:	4b42      	ldr	r3, [pc, #264]	; (8012b28 <xTaskIncrementTick+0x15c>)
 8012a1e:	681b      	ldr	r3, [r3, #0]
 8012a20:	4a40      	ldr	r2, [pc, #256]	; (8012b24 <xTaskIncrementTick+0x158>)
 8012a22:	6013      	str	r3, [r2, #0]
 8012a24:	4a40      	ldr	r2, [pc, #256]	; (8012b28 <xTaskIncrementTick+0x15c>)
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	6013      	str	r3, [r2, #0]
 8012a2a:	4b40      	ldr	r3, [pc, #256]	; (8012b2c <xTaskIncrementTick+0x160>)
 8012a2c:	681b      	ldr	r3, [r3, #0]
 8012a2e:	3301      	adds	r3, #1
 8012a30:	4a3e      	ldr	r2, [pc, #248]	; (8012b2c <xTaskIncrementTick+0x160>)
 8012a32:	6013      	str	r3, [r2, #0]
 8012a34:	f000 fafa 	bl	801302c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012a38:	4b3d      	ldr	r3, [pc, #244]	; (8012b30 <xTaskIncrementTick+0x164>)
 8012a3a:	681b      	ldr	r3, [r3, #0]
 8012a3c:	693a      	ldr	r2, [r7, #16]
 8012a3e:	429a      	cmp	r2, r3
 8012a40:	d34d      	bcc.n	8012ade <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012a42:	4b38      	ldr	r3, [pc, #224]	; (8012b24 <xTaskIncrementTick+0x158>)
 8012a44:	681b      	ldr	r3, [r3, #0]
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d101      	bne.n	8012a50 <xTaskIncrementTick+0x84>
 8012a4c:	2301      	movs	r3, #1
 8012a4e:	e000      	b.n	8012a52 <xTaskIncrementTick+0x86>
 8012a50:	2300      	movs	r3, #0
 8012a52:	2b00      	cmp	r3, #0
 8012a54:	d004      	beq.n	8012a60 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a56:	4b36      	ldr	r3, [pc, #216]	; (8012b30 <xTaskIncrementTick+0x164>)
 8012a58:	f04f 32ff 	mov.w	r2, #4294967295
 8012a5c:	601a      	str	r2, [r3, #0]
					break;
 8012a5e:	e03e      	b.n	8012ade <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8012a60:	4b30      	ldr	r3, [pc, #192]	; (8012b24 <xTaskIncrementTick+0x158>)
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	68db      	ldr	r3, [r3, #12]
 8012a66:	68db      	ldr	r3, [r3, #12]
 8012a68:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012a6a:	68bb      	ldr	r3, [r7, #8]
 8012a6c:	685b      	ldr	r3, [r3, #4]
 8012a6e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012a70:	693a      	ldr	r2, [r7, #16]
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	429a      	cmp	r2, r3
 8012a76:	d203      	bcs.n	8012a80 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012a78:	4a2d      	ldr	r2, [pc, #180]	; (8012b30 <xTaskIncrementTick+0x164>)
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	6013      	str	r3, [r2, #0]
						break;
 8012a7e:	e02e      	b.n	8012ade <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012a80:	68bb      	ldr	r3, [r7, #8]
 8012a82:	3304      	adds	r3, #4
 8012a84:	4618      	mov	r0, r3
 8012a86:	f7fe fe2b 	bl	80116e0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012a8a:	68bb      	ldr	r3, [r7, #8]
 8012a8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a8e:	2b00      	cmp	r3, #0
 8012a90:	d004      	beq.n	8012a9c <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012a92:	68bb      	ldr	r3, [r7, #8]
 8012a94:	3318      	adds	r3, #24
 8012a96:	4618      	mov	r0, r3
 8012a98:	f7fe fe22 	bl	80116e0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012a9c:	68bb      	ldr	r3, [r7, #8]
 8012a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012aa0:	2201      	movs	r2, #1
 8012aa2:	409a      	lsls	r2, r3
 8012aa4:	4b23      	ldr	r3, [pc, #140]	; (8012b34 <xTaskIncrementTick+0x168>)
 8012aa6:	681b      	ldr	r3, [r3, #0]
 8012aa8:	4313      	orrs	r3, r2
 8012aaa:	4a22      	ldr	r2, [pc, #136]	; (8012b34 <xTaskIncrementTick+0x168>)
 8012aac:	6013      	str	r3, [r2, #0]
 8012aae:	68bb      	ldr	r3, [r7, #8]
 8012ab0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ab2:	4613      	mov	r3, r2
 8012ab4:	009b      	lsls	r3, r3, #2
 8012ab6:	4413      	add	r3, r2
 8012ab8:	009b      	lsls	r3, r3, #2
 8012aba:	4a1f      	ldr	r2, [pc, #124]	; (8012b38 <xTaskIncrementTick+0x16c>)
 8012abc:	441a      	add	r2, r3
 8012abe:	68bb      	ldr	r3, [r7, #8]
 8012ac0:	3304      	adds	r3, #4
 8012ac2:	4619      	mov	r1, r3
 8012ac4:	4610      	mov	r0, r2
 8012ac6:	f7fe fdae 	bl	8011626 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012aca:	68bb      	ldr	r3, [r7, #8]
 8012acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ace:	4b1b      	ldr	r3, [pc, #108]	; (8012b3c <xTaskIncrementTick+0x170>)
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ad4:	429a      	cmp	r2, r3
 8012ad6:	d3b4      	bcc.n	8012a42 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8012ad8:	2301      	movs	r3, #1
 8012ada:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012adc:	e7b1      	b.n	8012a42 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012ade:	4b17      	ldr	r3, [pc, #92]	; (8012b3c <xTaskIncrementTick+0x170>)
 8012ae0:	681b      	ldr	r3, [r3, #0]
 8012ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ae4:	4914      	ldr	r1, [pc, #80]	; (8012b38 <xTaskIncrementTick+0x16c>)
 8012ae6:	4613      	mov	r3, r2
 8012ae8:	009b      	lsls	r3, r3, #2
 8012aea:	4413      	add	r3, r2
 8012aec:	009b      	lsls	r3, r3, #2
 8012aee:	440b      	add	r3, r1
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	2b01      	cmp	r3, #1
 8012af4:	d907      	bls.n	8012b06 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8012af6:	2301      	movs	r3, #1
 8012af8:	617b      	str	r3, [r7, #20]
 8012afa:	e004      	b.n	8012b06 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012afc:	4b10      	ldr	r3, [pc, #64]	; (8012b40 <xTaskIncrementTick+0x174>)
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	3301      	adds	r3, #1
 8012b02:	4a0f      	ldr	r2, [pc, #60]	; (8012b40 <xTaskIncrementTick+0x174>)
 8012b04:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012b06:	4b0f      	ldr	r3, [pc, #60]	; (8012b44 <xTaskIncrementTick+0x178>)
 8012b08:	681b      	ldr	r3, [r3, #0]
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d001      	beq.n	8012b12 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8012b0e:	2301      	movs	r3, #1
 8012b10:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8012b12:	697b      	ldr	r3, [r7, #20]
}
 8012b14:	4618      	mov	r0, r3
 8012b16:	3718      	adds	r7, #24
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	bd80      	pop	{r7, pc}
 8012b1c:	20000270 	.word	0x20000270
 8012b20:	2000024c 	.word	0x2000024c
 8012b24:	20000200 	.word	0x20000200
 8012b28:	20000204 	.word	0x20000204
 8012b2c:	20000260 	.word	0x20000260
 8012b30:	20000268 	.word	0x20000268
 8012b34:	20000250 	.word	0x20000250
 8012b38:	2000014c 	.word	0x2000014c
 8012b3c:	20000148 	.word	0x20000148
 8012b40:	20000258 	.word	0x20000258
 8012b44:	2000025c 	.word	0x2000025c

08012b48 <vTaskSetApplicationTaskTag>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	void vTaskSetApplicationTaskTag( TaskHandle_t xTask, TaskHookFunction_t pxHookFunction )
	{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	b084      	sub	sp, #16
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
 8012b50:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;

		/* If xTask is NULL then it is the task hook of the calling task that is
		getting set. */
		if( xTask == NULL )
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d103      	bne.n	8012b60 <vTaskSetApplicationTaskTag+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8012b58:	4b08      	ldr	r3, [pc, #32]	; (8012b7c <vTaskSetApplicationTaskTag+0x34>)
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	60fb      	str	r3, [r7, #12]
 8012b5e:	e001      	b.n	8012b64 <vTaskSetApplicationTaskTag+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 8012b60:	687b      	ldr	r3, [r7, #4]
 8012b62:	60fb      	str	r3, [r7, #12]
		}

		/* Save the hook function in the TCB.  A critical section is required as
		the value can be accessed from an interrupt. */
		taskENTER_CRITICAL();
 8012b64:	f000 fdd8 	bl	8013718 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	683a      	ldr	r2, [r7, #0]
 8012b6c:	64da      	str	r2, [r3, #76]	; 0x4c
		taskEXIT_CRITICAL();
 8012b6e:	f000 fe05 	bl	801377c <vPortExitCritical>
	}
 8012b72:	bf00      	nop
 8012b74:	3710      	adds	r7, #16
 8012b76:	46bd      	mov	sp, r7
 8012b78:	bd80      	pop	{r7, pc}
 8012b7a:	bf00      	nop
 8012b7c:	20000148 	.word	0x20000148

08012b80 <xTaskCallApplicationTaskHook>:
/*-----------------------------------------------------------*/

#if ( configUSE_APPLICATION_TASK_TAG == 1 )

	BaseType_t xTaskCallApplicationTaskHook( TaskHandle_t xTask, void *pvParameter )
	{
 8012b80:	b580      	push	{r7, lr}
 8012b82:	b084      	sub	sp, #16
 8012b84:	af00      	add	r7, sp, #0
 8012b86:	6078      	str	r0, [r7, #4]
 8012b88:	6039      	str	r1, [r7, #0]
	TCB_t *xTCB;
	BaseType_t xReturn;

		/* If xTask is NULL then we are calling our own task hook. */
		if( xTask == NULL )
 8012b8a:	687b      	ldr	r3, [r7, #4]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d103      	bne.n	8012b98 <xTaskCallApplicationTaskHook+0x18>
		{
			xTCB = ( TCB_t * ) pxCurrentTCB;
 8012b90:	4b0b      	ldr	r3, [pc, #44]	; (8012bc0 <xTaskCallApplicationTaskHook+0x40>)
 8012b92:	681b      	ldr	r3, [r3, #0]
 8012b94:	60fb      	str	r3, [r7, #12]
 8012b96:	e001      	b.n	8012b9c <xTaskCallApplicationTaskHook+0x1c>
		}
		else
		{
			xTCB = ( TCB_t * ) xTask;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	60fb      	str	r3, [r7, #12]
		}

		if( xTCB->pxTaskTag != NULL )
 8012b9c:	68fb      	ldr	r3, [r7, #12]
 8012b9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012ba0:	2b00      	cmp	r3, #0
 8012ba2:	d005      	beq.n	8012bb0 <xTaskCallApplicationTaskHook+0x30>
		{
			xReturn = xTCB->pxTaskTag( pvParameter );
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8012ba8:	6838      	ldr	r0, [r7, #0]
 8012baa:	4798      	blx	r3
 8012bac:	60b8      	str	r0, [r7, #8]
 8012bae:	e001      	b.n	8012bb4 <xTaskCallApplicationTaskHook+0x34>
		}
		else
		{
			xReturn = pdFAIL;
 8012bb0:	2300      	movs	r3, #0
 8012bb2:	60bb      	str	r3, [r7, #8]
		}

		return xReturn;
 8012bb4:	68bb      	ldr	r3, [r7, #8]
	}
 8012bb6:	4618      	mov	r0, r3
 8012bb8:	3710      	adds	r7, #16
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	bd80      	pop	{r7, pc}
 8012bbe:	bf00      	nop
 8012bc0:	20000148 	.word	0x20000148

08012bc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012bc4:	b580      	push	{r7, lr}
 8012bc6:	b088      	sub	sp, #32
 8012bc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012bca:	4b40      	ldr	r3, [pc, #256]	; (8012ccc <vTaskSwitchContext+0x108>)
 8012bcc:	681b      	ldr	r3, [r3, #0]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d003      	beq.n	8012bda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012bd2:	4b3f      	ldr	r3, [pc, #252]	; (8012cd0 <vTaskSwitchContext+0x10c>)
 8012bd4:	2201      	movs	r2, #1
 8012bd6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012bd8:	e073      	b.n	8012cc2 <vTaskSwitchContext+0xfe>
		xYieldPending = pdFALSE;
 8012bda:	4b3d      	ldr	r3, [pc, #244]	; (8012cd0 <vTaskSwitchContext+0x10c>)
 8012bdc:	2200      	movs	r2, #0
 8012bde:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 8012be0:	4b3c      	ldr	r3, [pc, #240]	; (8012cd4 <vTaskSwitchContext+0x110>)
 8012be2:	681b      	ldr	r3, [r3, #0]
 8012be4:	2101      	movs	r1, #1
 8012be6:	4618      	mov	r0, r3
 8012be8:	f7ff ffca 	bl	8012b80 <xTaskCallApplicationTaskHook>
		taskCHECK_FOR_STACK_OVERFLOW();
 8012bec:	4b39      	ldr	r3, [pc, #228]	; (8012cd4 <vTaskSwitchContext+0x110>)
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012bf2:	61fb      	str	r3, [r7, #28]
 8012bf4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8012bf8:	61bb      	str	r3, [r7, #24]
 8012bfa:	69fb      	ldr	r3, [r7, #28]
 8012bfc:	681b      	ldr	r3, [r3, #0]
 8012bfe:	69ba      	ldr	r2, [r7, #24]
 8012c00:	429a      	cmp	r2, r3
 8012c02:	d111      	bne.n	8012c28 <vTaskSwitchContext+0x64>
 8012c04:	69fb      	ldr	r3, [r7, #28]
 8012c06:	3304      	adds	r3, #4
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	69ba      	ldr	r2, [r7, #24]
 8012c0c:	429a      	cmp	r2, r3
 8012c0e:	d10b      	bne.n	8012c28 <vTaskSwitchContext+0x64>
 8012c10:	69fb      	ldr	r3, [r7, #28]
 8012c12:	3308      	adds	r3, #8
 8012c14:	681b      	ldr	r3, [r3, #0]
 8012c16:	69ba      	ldr	r2, [r7, #24]
 8012c18:	429a      	cmp	r2, r3
 8012c1a:	d105      	bne.n	8012c28 <vTaskSwitchContext+0x64>
 8012c1c:	69fb      	ldr	r3, [r7, #28]
 8012c1e:	330c      	adds	r3, #12
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	69ba      	ldr	r2, [r7, #24]
 8012c24:	429a      	cmp	r2, r3
 8012c26:	d008      	beq.n	8012c3a <vTaskSwitchContext+0x76>
 8012c28:	4b2a      	ldr	r3, [pc, #168]	; (8012cd4 <vTaskSwitchContext+0x110>)
 8012c2a:	681a      	ldr	r2, [r3, #0]
 8012c2c:	4b29      	ldr	r3, [pc, #164]	; (8012cd4 <vTaskSwitchContext+0x110>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	3334      	adds	r3, #52	; 0x34
 8012c32:	4619      	mov	r1, r3
 8012c34:	4610      	mov	r0, r2
 8012c36:	f7fe fa60 	bl	80110fa <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8012c3a:	4b27      	ldr	r3, [pc, #156]	; (8012cd8 <vTaskSwitchContext+0x114>)
 8012c3c:	681b      	ldr	r3, [r3, #0]
 8012c3e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	fab3 f383 	clz	r3, r3
 8012c46:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012c48:	7afb      	ldrb	r3, [r7, #11]
 8012c4a:	f1c3 031f 	rsb	r3, r3, #31
 8012c4e:	617b      	str	r3, [r7, #20]
 8012c50:	4922      	ldr	r1, [pc, #136]	; (8012cdc <vTaskSwitchContext+0x118>)
 8012c52:	697a      	ldr	r2, [r7, #20]
 8012c54:	4613      	mov	r3, r2
 8012c56:	009b      	lsls	r3, r3, #2
 8012c58:	4413      	add	r3, r2
 8012c5a:	009b      	lsls	r3, r3, #2
 8012c5c:	440b      	add	r3, r1
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	2b00      	cmp	r3, #0
 8012c62:	d10b      	bne.n	8012c7c <vTaskSwitchContext+0xb8>
	__asm volatile
 8012c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c68:	b672      	cpsid	i
 8012c6a:	f383 8811 	msr	BASEPRI, r3
 8012c6e:	f3bf 8f6f 	isb	sy
 8012c72:	f3bf 8f4f 	dsb	sy
 8012c76:	b662      	cpsie	i
 8012c78:	607b      	str	r3, [r7, #4]
 8012c7a:	e7fe      	b.n	8012c7a <vTaskSwitchContext+0xb6>
 8012c7c:	697a      	ldr	r2, [r7, #20]
 8012c7e:	4613      	mov	r3, r2
 8012c80:	009b      	lsls	r3, r3, #2
 8012c82:	4413      	add	r3, r2
 8012c84:	009b      	lsls	r3, r3, #2
 8012c86:	4a15      	ldr	r2, [pc, #84]	; (8012cdc <vTaskSwitchContext+0x118>)
 8012c88:	4413      	add	r3, r2
 8012c8a:	613b      	str	r3, [r7, #16]
 8012c8c:	693b      	ldr	r3, [r7, #16]
 8012c8e:	685b      	ldr	r3, [r3, #4]
 8012c90:	685a      	ldr	r2, [r3, #4]
 8012c92:	693b      	ldr	r3, [r7, #16]
 8012c94:	605a      	str	r2, [r3, #4]
 8012c96:	693b      	ldr	r3, [r7, #16]
 8012c98:	685a      	ldr	r2, [r3, #4]
 8012c9a:	693b      	ldr	r3, [r7, #16]
 8012c9c:	3308      	adds	r3, #8
 8012c9e:	429a      	cmp	r2, r3
 8012ca0:	d104      	bne.n	8012cac <vTaskSwitchContext+0xe8>
 8012ca2:	693b      	ldr	r3, [r7, #16]
 8012ca4:	685b      	ldr	r3, [r3, #4]
 8012ca6:	685a      	ldr	r2, [r3, #4]
 8012ca8:	693b      	ldr	r3, [r7, #16]
 8012caa:	605a      	str	r2, [r3, #4]
 8012cac:	693b      	ldr	r3, [r7, #16]
 8012cae:	685b      	ldr	r3, [r3, #4]
 8012cb0:	68db      	ldr	r3, [r3, #12]
 8012cb2:	4a08      	ldr	r2, [pc, #32]	; (8012cd4 <vTaskSwitchContext+0x110>)
 8012cb4:	6013      	str	r3, [r2, #0]
		traceTASK_SWITCHED_IN();
 8012cb6:	4b07      	ldr	r3, [pc, #28]	; (8012cd4 <vTaskSwitchContext+0x110>)
 8012cb8:	681b      	ldr	r3, [r3, #0]
 8012cba:	2100      	movs	r1, #0
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	f7ff ff5f 	bl	8012b80 <xTaskCallApplicationTaskHook>
}
 8012cc2:	bf00      	nop
 8012cc4:	3720      	adds	r7, #32
 8012cc6:	46bd      	mov	sp, r7
 8012cc8:	bd80      	pop	{r7, pc}
 8012cca:	bf00      	nop
 8012ccc:	20000270 	.word	0x20000270
 8012cd0:	2000025c 	.word	0x2000025c
 8012cd4:	20000148 	.word	0x20000148
 8012cd8:	20000250 	.word	0x20000250
 8012cdc:	2000014c 	.word	0x2000014c

08012ce0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012ce0:	b580      	push	{r7, lr}
 8012ce2:	b084      	sub	sp, #16
 8012ce4:	af00      	add	r7, sp, #0
 8012ce6:	6078      	str	r0, [r7, #4]
 8012ce8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	2b00      	cmp	r3, #0
 8012cee:	d10b      	bne.n	8012d08 <vTaskPlaceOnEventList+0x28>
 8012cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cf4:	b672      	cpsid	i
 8012cf6:	f383 8811 	msr	BASEPRI, r3
 8012cfa:	f3bf 8f6f 	isb	sy
 8012cfe:	f3bf 8f4f 	dsb	sy
 8012d02:	b662      	cpsie	i
 8012d04:	60fb      	str	r3, [r7, #12]
 8012d06:	e7fe      	b.n	8012d06 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012d08:	4b07      	ldr	r3, [pc, #28]	; (8012d28 <vTaskPlaceOnEventList+0x48>)
 8012d0a:	681b      	ldr	r3, [r3, #0]
 8012d0c:	3318      	adds	r3, #24
 8012d0e:	4619      	mov	r1, r3
 8012d10:	6878      	ldr	r0, [r7, #4]
 8012d12:	f7fe fcac 	bl	801166e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012d16:	2101      	movs	r1, #1
 8012d18:	6838      	ldr	r0, [r7, #0]
 8012d1a:	f000 fb8f 	bl	801343c <prvAddCurrentTaskToDelayedList>
}
 8012d1e:	bf00      	nop
 8012d20:	3710      	adds	r7, #16
 8012d22:	46bd      	mov	sp, r7
 8012d24:	bd80      	pop	{r7, pc}
 8012d26:	bf00      	nop
 8012d28:	20000148 	.word	0x20000148

08012d2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012d2c:	b580      	push	{r7, lr}
 8012d2e:	b086      	sub	sp, #24
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	68db      	ldr	r3, [r3, #12]
 8012d38:	68db      	ldr	r3, [r3, #12]
 8012d3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012d3c:	693b      	ldr	r3, [r7, #16]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d10b      	bne.n	8012d5a <xTaskRemoveFromEventList+0x2e>
 8012d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d46:	b672      	cpsid	i
 8012d48:	f383 8811 	msr	BASEPRI, r3
 8012d4c:	f3bf 8f6f 	isb	sy
 8012d50:	f3bf 8f4f 	dsb	sy
 8012d54:	b662      	cpsie	i
 8012d56:	60fb      	str	r3, [r7, #12]
 8012d58:	e7fe      	b.n	8012d58 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012d5a:	693b      	ldr	r3, [r7, #16]
 8012d5c:	3318      	adds	r3, #24
 8012d5e:	4618      	mov	r0, r3
 8012d60:	f7fe fcbe 	bl	80116e0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012d64:	4b1d      	ldr	r3, [pc, #116]	; (8012ddc <xTaskRemoveFromEventList+0xb0>)
 8012d66:	681b      	ldr	r3, [r3, #0]
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d11c      	bne.n	8012da6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012d6c:	693b      	ldr	r3, [r7, #16]
 8012d6e:	3304      	adds	r3, #4
 8012d70:	4618      	mov	r0, r3
 8012d72:	f7fe fcb5 	bl	80116e0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012d76:	693b      	ldr	r3, [r7, #16]
 8012d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012d7a:	2201      	movs	r2, #1
 8012d7c:	409a      	lsls	r2, r3
 8012d7e:	4b18      	ldr	r3, [pc, #96]	; (8012de0 <xTaskRemoveFromEventList+0xb4>)
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	4313      	orrs	r3, r2
 8012d84:	4a16      	ldr	r2, [pc, #88]	; (8012de0 <xTaskRemoveFromEventList+0xb4>)
 8012d86:	6013      	str	r3, [r2, #0]
 8012d88:	693b      	ldr	r3, [r7, #16]
 8012d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012d8c:	4613      	mov	r3, r2
 8012d8e:	009b      	lsls	r3, r3, #2
 8012d90:	4413      	add	r3, r2
 8012d92:	009b      	lsls	r3, r3, #2
 8012d94:	4a13      	ldr	r2, [pc, #76]	; (8012de4 <xTaskRemoveFromEventList+0xb8>)
 8012d96:	441a      	add	r2, r3
 8012d98:	693b      	ldr	r3, [r7, #16]
 8012d9a:	3304      	adds	r3, #4
 8012d9c:	4619      	mov	r1, r3
 8012d9e:	4610      	mov	r0, r2
 8012da0:	f7fe fc41 	bl	8011626 <vListInsertEnd>
 8012da4:	e005      	b.n	8012db2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012da6:	693b      	ldr	r3, [r7, #16]
 8012da8:	3318      	adds	r3, #24
 8012daa:	4619      	mov	r1, r3
 8012dac:	480e      	ldr	r0, [pc, #56]	; (8012de8 <xTaskRemoveFromEventList+0xbc>)
 8012dae:	f7fe fc3a 	bl	8011626 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012db2:	693b      	ldr	r3, [r7, #16]
 8012db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012db6:	4b0d      	ldr	r3, [pc, #52]	; (8012dec <xTaskRemoveFromEventList+0xc0>)
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012dbc:	429a      	cmp	r2, r3
 8012dbe:	d905      	bls.n	8012dcc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012dc0:	2301      	movs	r3, #1
 8012dc2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012dc4:	4b0a      	ldr	r3, [pc, #40]	; (8012df0 <xTaskRemoveFromEventList+0xc4>)
 8012dc6:	2201      	movs	r2, #1
 8012dc8:	601a      	str	r2, [r3, #0]
 8012dca:	e001      	b.n	8012dd0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8012dcc:	2300      	movs	r3, #0
 8012dce:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8012dd0:	697b      	ldr	r3, [r7, #20]
}
 8012dd2:	4618      	mov	r0, r3
 8012dd4:	3718      	adds	r7, #24
 8012dd6:	46bd      	mov	sp, r7
 8012dd8:	bd80      	pop	{r7, pc}
 8012dda:	bf00      	nop
 8012ddc:	20000270 	.word	0x20000270
 8012de0:	20000250 	.word	0x20000250
 8012de4:	2000014c 	.word	0x2000014c
 8012de8:	20000208 	.word	0x20000208
 8012dec:	20000148 	.word	0x20000148
 8012df0:	2000025c 	.word	0x2000025c

08012df4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012df4:	b480      	push	{r7}
 8012df6:	b083      	sub	sp, #12
 8012df8:	af00      	add	r7, sp, #0
 8012dfa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012dfc:	4b06      	ldr	r3, [pc, #24]	; (8012e18 <vTaskInternalSetTimeOutState+0x24>)
 8012dfe:	681a      	ldr	r2, [r3, #0]
 8012e00:	687b      	ldr	r3, [r7, #4]
 8012e02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012e04:	4b05      	ldr	r3, [pc, #20]	; (8012e1c <vTaskInternalSetTimeOutState+0x28>)
 8012e06:	681a      	ldr	r2, [r3, #0]
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	605a      	str	r2, [r3, #4]
}
 8012e0c:	bf00      	nop
 8012e0e:	370c      	adds	r7, #12
 8012e10:	46bd      	mov	sp, r7
 8012e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e16:	4770      	bx	lr
 8012e18:	20000260 	.word	0x20000260
 8012e1c:	2000024c 	.word	0x2000024c

08012e20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012e20:	b580      	push	{r7, lr}
 8012e22:	b088      	sub	sp, #32
 8012e24:	af00      	add	r7, sp, #0
 8012e26:	6078      	str	r0, [r7, #4]
 8012e28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	2b00      	cmp	r3, #0
 8012e2e:	d10b      	bne.n	8012e48 <xTaskCheckForTimeOut+0x28>
 8012e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e34:	b672      	cpsid	i
 8012e36:	f383 8811 	msr	BASEPRI, r3
 8012e3a:	f3bf 8f6f 	isb	sy
 8012e3e:	f3bf 8f4f 	dsb	sy
 8012e42:	b662      	cpsie	i
 8012e44:	613b      	str	r3, [r7, #16]
 8012e46:	e7fe      	b.n	8012e46 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8012e48:	683b      	ldr	r3, [r7, #0]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d10b      	bne.n	8012e66 <xTaskCheckForTimeOut+0x46>
 8012e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e52:	b672      	cpsid	i
 8012e54:	f383 8811 	msr	BASEPRI, r3
 8012e58:	f3bf 8f6f 	isb	sy
 8012e5c:	f3bf 8f4f 	dsb	sy
 8012e60:	b662      	cpsie	i
 8012e62:	60fb      	str	r3, [r7, #12]
 8012e64:	e7fe      	b.n	8012e64 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 8012e66:	f000 fc57 	bl	8013718 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012e6a:	4b1d      	ldr	r3, [pc, #116]	; (8012ee0 <xTaskCheckForTimeOut+0xc0>)
 8012e6c:	681b      	ldr	r3, [r3, #0]
 8012e6e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	685b      	ldr	r3, [r3, #4]
 8012e74:	69ba      	ldr	r2, [r7, #24]
 8012e76:	1ad3      	subs	r3, r2, r3
 8012e78:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012e7a:	683b      	ldr	r3, [r7, #0]
 8012e7c:	681b      	ldr	r3, [r3, #0]
 8012e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012e82:	d102      	bne.n	8012e8a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012e84:	2300      	movs	r3, #0
 8012e86:	61fb      	str	r3, [r7, #28]
 8012e88:	e023      	b.n	8012ed2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012e8a:	687b      	ldr	r3, [r7, #4]
 8012e8c:	681a      	ldr	r2, [r3, #0]
 8012e8e:	4b15      	ldr	r3, [pc, #84]	; (8012ee4 <xTaskCheckForTimeOut+0xc4>)
 8012e90:	681b      	ldr	r3, [r3, #0]
 8012e92:	429a      	cmp	r2, r3
 8012e94:	d007      	beq.n	8012ea6 <xTaskCheckForTimeOut+0x86>
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	685b      	ldr	r3, [r3, #4]
 8012e9a:	69ba      	ldr	r2, [r7, #24]
 8012e9c:	429a      	cmp	r2, r3
 8012e9e:	d302      	bcc.n	8012ea6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012ea0:	2301      	movs	r3, #1
 8012ea2:	61fb      	str	r3, [r7, #28]
 8012ea4:	e015      	b.n	8012ed2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012ea6:	683b      	ldr	r3, [r7, #0]
 8012ea8:	681b      	ldr	r3, [r3, #0]
 8012eaa:	697a      	ldr	r2, [r7, #20]
 8012eac:	429a      	cmp	r2, r3
 8012eae:	d20b      	bcs.n	8012ec8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012eb0:	683b      	ldr	r3, [r7, #0]
 8012eb2:	681a      	ldr	r2, [r3, #0]
 8012eb4:	697b      	ldr	r3, [r7, #20]
 8012eb6:	1ad2      	subs	r2, r2, r3
 8012eb8:	683b      	ldr	r3, [r7, #0]
 8012eba:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012ebc:	6878      	ldr	r0, [r7, #4]
 8012ebe:	f7ff ff99 	bl	8012df4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	61fb      	str	r3, [r7, #28]
 8012ec6:	e004      	b.n	8012ed2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8012ec8:	683b      	ldr	r3, [r7, #0]
 8012eca:	2200      	movs	r2, #0
 8012ecc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012ece:	2301      	movs	r3, #1
 8012ed0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012ed2:	f000 fc53 	bl	801377c <vPortExitCritical>

	return xReturn;
 8012ed6:	69fb      	ldr	r3, [r7, #28]
}
 8012ed8:	4618      	mov	r0, r3
 8012eda:	3720      	adds	r7, #32
 8012edc:	46bd      	mov	sp, r7
 8012ede:	bd80      	pop	{r7, pc}
 8012ee0:	2000024c 	.word	0x2000024c
 8012ee4:	20000260 	.word	0x20000260

08012ee8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012ee8:	b480      	push	{r7}
 8012eea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012eec:	4b03      	ldr	r3, [pc, #12]	; (8012efc <vTaskMissedYield+0x14>)
 8012eee:	2201      	movs	r2, #1
 8012ef0:	601a      	str	r2, [r3, #0]
}
 8012ef2:	bf00      	nop
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012efa:	4770      	bx	lr
 8012efc:	2000025c 	.word	0x2000025c

08012f00 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b082      	sub	sp, #8
 8012f04:	af00      	add	r7, sp, #0
 8012f06:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012f08:	f000 f854 	bl	8012fb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012f0c:	4b07      	ldr	r3, [pc, #28]	; (8012f2c <prvIdleTask+0x2c>)
 8012f0e:	681b      	ldr	r3, [r3, #0]
 8012f10:	2b01      	cmp	r3, #1
 8012f12:	d907      	bls.n	8012f24 <prvIdleTask+0x24>
			{
				taskYIELD();
 8012f14:	4b06      	ldr	r3, [pc, #24]	; (8012f30 <prvIdleTask+0x30>)
 8012f16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f1a:	601a      	str	r2, [r3, #0]
 8012f1c:	f3bf 8f4f 	dsb	sy
 8012f20:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8012f24:	f7fe f8f6 	bl	8011114 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8012f28:	e7ee      	b.n	8012f08 <prvIdleTask+0x8>
 8012f2a:	bf00      	nop
 8012f2c:	2000014c 	.word	0x2000014c
 8012f30:	e000ed04 	.word	0xe000ed04

08012f34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b082      	sub	sp, #8
 8012f38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012f3a:	2300      	movs	r3, #0
 8012f3c:	607b      	str	r3, [r7, #4]
 8012f3e:	e00c      	b.n	8012f5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012f40:	687a      	ldr	r2, [r7, #4]
 8012f42:	4613      	mov	r3, r2
 8012f44:	009b      	lsls	r3, r3, #2
 8012f46:	4413      	add	r3, r2
 8012f48:	009b      	lsls	r3, r3, #2
 8012f4a:	4a12      	ldr	r2, [pc, #72]	; (8012f94 <prvInitialiseTaskLists+0x60>)
 8012f4c:	4413      	add	r3, r2
 8012f4e:	4618      	mov	r0, r3
 8012f50:	f7fe fb3c 	bl	80115cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012f54:	687b      	ldr	r3, [r7, #4]
 8012f56:	3301      	adds	r3, #1
 8012f58:	607b      	str	r3, [r7, #4]
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	2b06      	cmp	r3, #6
 8012f5e:	d9ef      	bls.n	8012f40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012f60:	480d      	ldr	r0, [pc, #52]	; (8012f98 <prvInitialiseTaskLists+0x64>)
 8012f62:	f7fe fb33 	bl	80115cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012f66:	480d      	ldr	r0, [pc, #52]	; (8012f9c <prvInitialiseTaskLists+0x68>)
 8012f68:	f7fe fb30 	bl	80115cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012f6c:	480c      	ldr	r0, [pc, #48]	; (8012fa0 <prvInitialiseTaskLists+0x6c>)
 8012f6e:	f7fe fb2d 	bl	80115cc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012f72:	480c      	ldr	r0, [pc, #48]	; (8012fa4 <prvInitialiseTaskLists+0x70>)
 8012f74:	f7fe fb2a 	bl	80115cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012f78:	480b      	ldr	r0, [pc, #44]	; (8012fa8 <prvInitialiseTaskLists+0x74>)
 8012f7a:	f7fe fb27 	bl	80115cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012f7e:	4b0b      	ldr	r3, [pc, #44]	; (8012fac <prvInitialiseTaskLists+0x78>)
 8012f80:	4a05      	ldr	r2, [pc, #20]	; (8012f98 <prvInitialiseTaskLists+0x64>)
 8012f82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012f84:	4b0a      	ldr	r3, [pc, #40]	; (8012fb0 <prvInitialiseTaskLists+0x7c>)
 8012f86:	4a05      	ldr	r2, [pc, #20]	; (8012f9c <prvInitialiseTaskLists+0x68>)
 8012f88:	601a      	str	r2, [r3, #0]
}
 8012f8a:	bf00      	nop
 8012f8c:	3708      	adds	r7, #8
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bd80      	pop	{r7, pc}
 8012f92:	bf00      	nop
 8012f94:	2000014c 	.word	0x2000014c
 8012f98:	200001d8 	.word	0x200001d8
 8012f9c:	200001ec 	.word	0x200001ec
 8012fa0:	20000208 	.word	0x20000208
 8012fa4:	2000021c 	.word	0x2000021c
 8012fa8:	20000234 	.word	0x20000234
 8012fac:	20000200 	.word	0x20000200
 8012fb0:	20000204 	.word	0x20000204

08012fb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012fb4:	b580      	push	{r7, lr}
 8012fb6:	b082      	sub	sp, #8
 8012fb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012fba:	e019      	b.n	8012ff0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012fbc:	f000 fbac 	bl	8013718 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8012fc0:	4b0f      	ldr	r3, [pc, #60]	; (8013000 <prvCheckTasksWaitingTermination+0x4c>)
 8012fc2:	68db      	ldr	r3, [r3, #12]
 8012fc4:	68db      	ldr	r3, [r3, #12]
 8012fc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	3304      	adds	r3, #4
 8012fcc:	4618      	mov	r0, r3
 8012fce:	f7fe fb87 	bl	80116e0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012fd2:	4b0c      	ldr	r3, [pc, #48]	; (8013004 <prvCheckTasksWaitingTermination+0x50>)
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	3b01      	subs	r3, #1
 8012fd8:	4a0a      	ldr	r2, [pc, #40]	; (8013004 <prvCheckTasksWaitingTermination+0x50>)
 8012fda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012fdc:	4b0a      	ldr	r3, [pc, #40]	; (8013008 <prvCheckTasksWaitingTermination+0x54>)
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	3b01      	subs	r3, #1
 8012fe2:	4a09      	ldr	r2, [pc, #36]	; (8013008 <prvCheckTasksWaitingTermination+0x54>)
 8012fe4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012fe6:	f000 fbc9 	bl	801377c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012fea:	6878      	ldr	r0, [r7, #4]
 8012fec:	f000 f80e 	bl	801300c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012ff0:	4b05      	ldr	r3, [pc, #20]	; (8013008 <prvCheckTasksWaitingTermination+0x54>)
 8012ff2:	681b      	ldr	r3, [r3, #0]
 8012ff4:	2b00      	cmp	r3, #0
 8012ff6:	d1e1      	bne.n	8012fbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012ff8:	bf00      	nop
 8012ffa:	3708      	adds	r7, #8
 8012ffc:	46bd      	mov	sp, r7
 8012ffe:	bd80      	pop	{r7, pc}
 8013000:	2000021c 	.word	0x2000021c
 8013004:	20000248 	.word	0x20000248
 8013008:	20000230 	.word	0x20000230

0801300c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801300c:	b580      	push	{r7, lr}
 801300e:	b082      	sub	sp, #8
 8013010:	af00      	add	r7, sp, #0
 8013012:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013018:	4618      	mov	r0, r3
 801301a:	f000 fd6b 	bl	8013af4 <vPortFree>
			vPortFree( pxTCB );
 801301e:	6878      	ldr	r0, [r7, #4]
 8013020:	f000 fd68 	bl	8013af4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8013024:	bf00      	nop
 8013026:	3708      	adds	r7, #8
 8013028:	46bd      	mov	sp, r7
 801302a:	bd80      	pop	{r7, pc}

0801302c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801302c:	b480      	push	{r7}
 801302e:	b083      	sub	sp, #12
 8013030:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013032:	4b0f      	ldr	r3, [pc, #60]	; (8013070 <prvResetNextTaskUnblockTime+0x44>)
 8013034:	681b      	ldr	r3, [r3, #0]
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	2b00      	cmp	r3, #0
 801303a:	d101      	bne.n	8013040 <prvResetNextTaskUnblockTime+0x14>
 801303c:	2301      	movs	r3, #1
 801303e:	e000      	b.n	8013042 <prvResetNextTaskUnblockTime+0x16>
 8013040:	2300      	movs	r3, #0
 8013042:	2b00      	cmp	r3, #0
 8013044:	d004      	beq.n	8013050 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8013046:	4b0b      	ldr	r3, [pc, #44]	; (8013074 <prvResetNextTaskUnblockTime+0x48>)
 8013048:	f04f 32ff 	mov.w	r2, #4294967295
 801304c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801304e:	e008      	b.n	8013062 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8013050:	4b07      	ldr	r3, [pc, #28]	; (8013070 <prvResetNextTaskUnblockTime+0x44>)
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	68db      	ldr	r3, [r3, #12]
 8013056:	68db      	ldr	r3, [r3, #12]
 8013058:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	685b      	ldr	r3, [r3, #4]
 801305e:	4a05      	ldr	r2, [pc, #20]	; (8013074 <prvResetNextTaskUnblockTime+0x48>)
 8013060:	6013      	str	r3, [r2, #0]
}
 8013062:	bf00      	nop
 8013064:	370c      	adds	r7, #12
 8013066:	46bd      	mov	sp, r7
 8013068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801306c:	4770      	bx	lr
 801306e:	bf00      	nop
 8013070:	20000200 	.word	0x20000200
 8013074:	20000268 	.word	0x20000268

08013078 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8013078:	b480      	push	{r7}
 801307a:	b083      	sub	sp, #12
 801307c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 801307e:	4b0b      	ldr	r3, [pc, #44]	; (80130ac <xTaskGetSchedulerState+0x34>)
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d102      	bne.n	801308c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8013086:	2301      	movs	r3, #1
 8013088:	607b      	str	r3, [r7, #4]
 801308a:	e008      	b.n	801309e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801308c:	4b08      	ldr	r3, [pc, #32]	; (80130b0 <xTaskGetSchedulerState+0x38>)
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	2b00      	cmp	r3, #0
 8013092:	d102      	bne.n	801309a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8013094:	2302      	movs	r3, #2
 8013096:	607b      	str	r3, [r7, #4]
 8013098:	e001      	b.n	801309e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801309a:	2300      	movs	r3, #0
 801309c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 801309e:	687b      	ldr	r3, [r7, #4]
	}
 80130a0:	4618      	mov	r0, r3
 80130a2:	370c      	adds	r7, #12
 80130a4:	46bd      	mov	sp, r7
 80130a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130aa:	4770      	bx	lr
 80130ac:	20000254 	.word	0x20000254
 80130b0:	20000270 	.word	0x20000270

080130b4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80130b4:	b580      	push	{r7, lr}
 80130b6:	b084      	sub	sp, #16
 80130b8:	af00      	add	r7, sp, #0
 80130ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80130c0:	2300      	movs	r3, #0
 80130c2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80130c4:	687b      	ldr	r3, [r7, #4]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d06e      	beq.n	80131a8 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80130ca:	68bb      	ldr	r3, [r7, #8]
 80130cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130ce:	4b39      	ldr	r3, [pc, #228]	; (80131b4 <xTaskPriorityInherit+0x100>)
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130d4:	429a      	cmp	r2, r3
 80130d6:	d25e      	bcs.n	8013196 <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80130d8:	68bb      	ldr	r3, [r7, #8]
 80130da:	699b      	ldr	r3, [r3, #24]
 80130dc:	2b00      	cmp	r3, #0
 80130de:	db06      	blt.n	80130ee <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80130e0:	4b34      	ldr	r3, [pc, #208]	; (80131b4 <xTaskPriorityInherit+0x100>)
 80130e2:	681b      	ldr	r3, [r3, #0]
 80130e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80130e6:	f1c3 0207 	rsb	r2, r3, #7
 80130ea:	68bb      	ldr	r3, [r7, #8]
 80130ec:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80130ee:	68bb      	ldr	r3, [r7, #8]
 80130f0:	6959      	ldr	r1, [r3, #20]
 80130f2:	68bb      	ldr	r3, [r7, #8]
 80130f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80130f6:	4613      	mov	r3, r2
 80130f8:	009b      	lsls	r3, r3, #2
 80130fa:	4413      	add	r3, r2
 80130fc:	009b      	lsls	r3, r3, #2
 80130fe:	4a2e      	ldr	r2, [pc, #184]	; (80131b8 <xTaskPriorityInherit+0x104>)
 8013100:	4413      	add	r3, r2
 8013102:	4299      	cmp	r1, r3
 8013104:	d101      	bne.n	801310a <xTaskPriorityInherit+0x56>
 8013106:	2301      	movs	r3, #1
 8013108:	e000      	b.n	801310c <xTaskPriorityInherit+0x58>
 801310a:	2300      	movs	r3, #0
 801310c:	2b00      	cmp	r3, #0
 801310e:	d03a      	beq.n	8013186 <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013110:	68bb      	ldr	r3, [r7, #8]
 8013112:	3304      	adds	r3, #4
 8013114:	4618      	mov	r0, r3
 8013116:	f7fe fae3 	bl	80116e0 <uxListRemove>
 801311a:	4603      	mov	r3, r0
 801311c:	2b00      	cmp	r3, #0
 801311e:	d115      	bne.n	801314c <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8013120:	68bb      	ldr	r3, [r7, #8]
 8013122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013124:	4924      	ldr	r1, [pc, #144]	; (80131b8 <xTaskPriorityInherit+0x104>)
 8013126:	4613      	mov	r3, r2
 8013128:	009b      	lsls	r3, r3, #2
 801312a:	4413      	add	r3, r2
 801312c:	009b      	lsls	r3, r3, #2
 801312e:	440b      	add	r3, r1
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d10a      	bne.n	801314c <xTaskPriorityInherit+0x98>
 8013136:	68bb      	ldr	r3, [r7, #8]
 8013138:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801313a:	2201      	movs	r2, #1
 801313c:	fa02 f303 	lsl.w	r3, r2, r3
 8013140:	43da      	mvns	r2, r3
 8013142:	4b1e      	ldr	r3, [pc, #120]	; (80131bc <xTaskPriorityInherit+0x108>)
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	4013      	ands	r3, r2
 8013148:	4a1c      	ldr	r2, [pc, #112]	; (80131bc <xTaskPriorityInherit+0x108>)
 801314a:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801314c:	4b19      	ldr	r3, [pc, #100]	; (80131b4 <xTaskPriorityInherit+0x100>)
 801314e:	681b      	ldr	r3, [r3, #0]
 8013150:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013152:	68bb      	ldr	r3, [r7, #8]
 8013154:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8013156:	68bb      	ldr	r3, [r7, #8]
 8013158:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801315a:	2201      	movs	r2, #1
 801315c:	409a      	lsls	r2, r3
 801315e:	4b17      	ldr	r3, [pc, #92]	; (80131bc <xTaskPriorityInherit+0x108>)
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	4313      	orrs	r3, r2
 8013164:	4a15      	ldr	r2, [pc, #84]	; (80131bc <xTaskPriorityInherit+0x108>)
 8013166:	6013      	str	r3, [r2, #0]
 8013168:	68bb      	ldr	r3, [r7, #8]
 801316a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801316c:	4613      	mov	r3, r2
 801316e:	009b      	lsls	r3, r3, #2
 8013170:	4413      	add	r3, r2
 8013172:	009b      	lsls	r3, r3, #2
 8013174:	4a10      	ldr	r2, [pc, #64]	; (80131b8 <xTaskPriorityInherit+0x104>)
 8013176:	441a      	add	r2, r3
 8013178:	68bb      	ldr	r3, [r7, #8]
 801317a:	3304      	adds	r3, #4
 801317c:	4619      	mov	r1, r3
 801317e:	4610      	mov	r0, r2
 8013180:	f7fe fa51 	bl	8011626 <vListInsertEnd>
 8013184:	e004      	b.n	8013190 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8013186:	4b0b      	ldr	r3, [pc, #44]	; (80131b4 <xTaskPriorityInherit+0x100>)
 8013188:	681b      	ldr	r3, [r3, #0]
 801318a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801318c:	68bb      	ldr	r3, [r7, #8]
 801318e:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8013190:	2301      	movs	r3, #1
 8013192:	60fb      	str	r3, [r7, #12]
 8013194:	e008      	b.n	80131a8 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8013196:	68bb      	ldr	r3, [r7, #8]
 8013198:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801319a:	4b06      	ldr	r3, [pc, #24]	; (80131b4 <xTaskPriorityInherit+0x100>)
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80131a0:	429a      	cmp	r2, r3
 80131a2:	d201      	bcs.n	80131a8 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80131a4:	2301      	movs	r3, #1
 80131a6:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80131a8:	68fb      	ldr	r3, [r7, #12]
	}
 80131aa:	4618      	mov	r0, r3
 80131ac:	3710      	adds	r7, #16
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd80      	pop	{r7, pc}
 80131b2:	bf00      	nop
 80131b4:	20000148 	.word	0x20000148
 80131b8:	2000014c 	.word	0x2000014c
 80131bc:	20000250 	.word	0x20000250

080131c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80131c0:	b580      	push	{r7, lr}
 80131c2:	b086      	sub	sp, #24
 80131c4:	af00      	add	r7, sp, #0
 80131c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80131cc:	2300      	movs	r3, #0
 80131ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d070      	beq.n	80132b8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80131d6:	4b3b      	ldr	r3, [pc, #236]	; (80132c4 <xTaskPriorityDisinherit+0x104>)
 80131d8:	681b      	ldr	r3, [r3, #0]
 80131da:	693a      	ldr	r2, [r7, #16]
 80131dc:	429a      	cmp	r2, r3
 80131de:	d00b      	beq.n	80131f8 <xTaskPriorityDisinherit+0x38>
 80131e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131e4:	b672      	cpsid	i
 80131e6:	f383 8811 	msr	BASEPRI, r3
 80131ea:	f3bf 8f6f 	isb	sy
 80131ee:	f3bf 8f4f 	dsb	sy
 80131f2:	b662      	cpsie	i
 80131f4:	60fb      	str	r3, [r7, #12]
 80131f6:	e7fe      	b.n	80131f6 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 80131f8:	693b      	ldr	r3, [r7, #16]
 80131fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80131fc:	2b00      	cmp	r3, #0
 80131fe:	d10b      	bne.n	8013218 <xTaskPriorityDisinherit+0x58>
 8013200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013204:	b672      	cpsid	i
 8013206:	f383 8811 	msr	BASEPRI, r3
 801320a:	f3bf 8f6f 	isb	sy
 801320e:	f3bf 8f4f 	dsb	sy
 8013212:	b662      	cpsie	i
 8013214:	60bb      	str	r3, [r7, #8]
 8013216:	e7fe      	b.n	8013216 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8013218:	693b      	ldr	r3, [r7, #16]
 801321a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801321c:	1e5a      	subs	r2, r3, #1
 801321e:	693b      	ldr	r3, [r7, #16]
 8013220:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013222:	693b      	ldr	r3, [r7, #16]
 8013224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013226:	693b      	ldr	r3, [r7, #16]
 8013228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801322a:	429a      	cmp	r2, r3
 801322c:	d044      	beq.n	80132b8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801322e:	693b      	ldr	r3, [r7, #16]
 8013230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8013232:	2b00      	cmp	r3, #0
 8013234:	d140      	bne.n	80132b8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013236:	693b      	ldr	r3, [r7, #16]
 8013238:	3304      	adds	r3, #4
 801323a:	4618      	mov	r0, r3
 801323c:	f7fe fa50 	bl	80116e0 <uxListRemove>
 8013240:	4603      	mov	r3, r0
 8013242:	2b00      	cmp	r3, #0
 8013244:	d115      	bne.n	8013272 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013246:	693b      	ldr	r3, [r7, #16]
 8013248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801324a:	491f      	ldr	r1, [pc, #124]	; (80132c8 <xTaskPriorityDisinherit+0x108>)
 801324c:	4613      	mov	r3, r2
 801324e:	009b      	lsls	r3, r3, #2
 8013250:	4413      	add	r3, r2
 8013252:	009b      	lsls	r3, r3, #2
 8013254:	440b      	add	r3, r1
 8013256:	681b      	ldr	r3, [r3, #0]
 8013258:	2b00      	cmp	r3, #0
 801325a:	d10a      	bne.n	8013272 <xTaskPriorityDisinherit+0xb2>
 801325c:	693b      	ldr	r3, [r7, #16]
 801325e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013260:	2201      	movs	r2, #1
 8013262:	fa02 f303 	lsl.w	r3, r2, r3
 8013266:	43da      	mvns	r2, r3
 8013268:	4b18      	ldr	r3, [pc, #96]	; (80132cc <xTaskPriorityDisinherit+0x10c>)
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	4013      	ands	r3, r2
 801326e:	4a17      	ldr	r2, [pc, #92]	; (80132cc <xTaskPriorityDisinherit+0x10c>)
 8013270:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013272:	693b      	ldr	r3, [r7, #16]
 8013274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8013276:	693b      	ldr	r3, [r7, #16]
 8013278:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801327a:	693b      	ldr	r3, [r7, #16]
 801327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801327e:	f1c3 0207 	rsb	r2, r3, #7
 8013282:	693b      	ldr	r3, [r7, #16]
 8013284:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013286:	693b      	ldr	r3, [r7, #16]
 8013288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801328a:	2201      	movs	r2, #1
 801328c:	409a      	lsls	r2, r3
 801328e:	4b0f      	ldr	r3, [pc, #60]	; (80132cc <xTaskPriorityDisinherit+0x10c>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	4313      	orrs	r3, r2
 8013294:	4a0d      	ldr	r2, [pc, #52]	; (80132cc <xTaskPriorityDisinherit+0x10c>)
 8013296:	6013      	str	r3, [r2, #0]
 8013298:	693b      	ldr	r3, [r7, #16]
 801329a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801329c:	4613      	mov	r3, r2
 801329e:	009b      	lsls	r3, r3, #2
 80132a0:	4413      	add	r3, r2
 80132a2:	009b      	lsls	r3, r3, #2
 80132a4:	4a08      	ldr	r2, [pc, #32]	; (80132c8 <xTaskPriorityDisinherit+0x108>)
 80132a6:	441a      	add	r2, r3
 80132a8:	693b      	ldr	r3, [r7, #16]
 80132aa:	3304      	adds	r3, #4
 80132ac:	4619      	mov	r1, r3
 80132ae:	4610      	mov	r0, r2
 80132b0:	f7fe f9b9 	bl	8011626 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80132b4:	2301      	movs	r3, #1
 80132b6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80132b8:	697b      	ldr	r3, [r7, #20]
	}
 80132ba:	4618      	mov	r0, r3
 80132bc:	3718      	adds	r7, #24
 80132be:	46bd      	mov	sp, r7
 80132c0:	bd80      	pop	{r7, pc}
 80132c2:	bf00      	nop
 80132c4:	20000148 	.word	0x20000148
 80132c8:	2000014c 	.word	0x2000014c
 80132cc:	20000250 	.word	0x20000250

080132d0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b088      	sub	sp, #32
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	6078      	str	r0, [r7, #4]
 80132d8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80132da:	687b      	ldr	r3, [r7, #4]
 80132dc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80132de:	2301      	movs	r3, #1
 80132e0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	f000 808a 	beq.w	80133fe <vTaskPriorityDisinheritAfterTimeout+0x12e>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80132ea:	69bb      	ldr	r3, [r7, #24]
 80132ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80132ee:	2b00      	cmp	r3, #0
 80132f0:	d10b      	bne.n	801330a <vTaskPriorityDisinheritAfterTimeout+0x3a>
 80132f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80132f6:	b672      	cpsid	i
 80132f8:	f383 8811 	msr	BASEPRI, r3
 80132fc:	f3bf 8f6f 	isb	sy
 8013300:	f3bf 8f4f 	dsb	sy
 8013304:	b662      	cpsie	i
 8013306:	60fb      	str	r3, [r7, #12]
 8013308:	e7fe      	b.n	8013308 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801330a:	69bb      	ldr	r3, [r7, #24]
 801330c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801330e:	683a      	ldr	r2, [r7, #0]
 8013310:	429a      	cmp	r2, r3
 8013312:	d902      	bls.n	801331a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8013314:	683b      	ldr	r3, [r7, #0]
 8013316:	61fb      	str	r3, [r7, #28]
 8013318:	e002      	b.n	8013320 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801331a:	69bb      	ldr	r3, [r7, #24]
 801331c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801331e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8013320:	69bb      	ldr	r3, [r7, #24]
 8013322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013324:	69fa      	ldr	r2, [r7, #28]
 8013326:	429a      	cmp	r2, r3
 8013328:	d069      	beq.n	80133fe <vTaskPriorityDisinheritAfterTimeout+0x12e>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801332a:	69bb      	ldr	r3, [r7, #24]
 801332c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801332e:	697a      	ldr	r2, [r7, #20]
 8013330:	429a      	cmp	r2, r3
 8013332:	d164      	bne.n	80133fe <vTaskPriorityDisinheritAfterTimeout+0x12e>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8013334:	4b34      	ldr	r3, [pc, #208]	; (8013408 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8013336:	681b      	ldr	r3, [r3, #0]
 8013338:	69ba      	ldr	r2, [r7, #24]
 801333a:	429a      	cmp	r2, r3
 801333c:	d10b      	bne.n	8013356 <vTaskPriorityDisinheritAfterTimeout+0x86>
 801333e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013342:	b672      	cpsid	i
 8013344:	f383 8811 	msr	BASEPRI, r3
 8013348:	f3bf 8f6f 	isb	sy
 801334c:	f3bf 8f4f 	dsb	sy
 8013350:	b662      	cpsie	i
 8013352:	60bb      	str	r3, [r7, #8]
 8013354:	e7fe      	b.n	8013354 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8013356:	69bb      	ldr	r3, [r7, #24]
 8013358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801335a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801335c:	69bb      	ldr	r3, [r7, #24]
 801335e:	69fa      	ldr	r2, [r7, #28]
 8013360:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8013362:	69bb      	ldr	r3, [r7, #24]
 8013364:	699b      	ldr	r3, [r3, #24]
 8013366:	2b00      	cmp	r3, #0
 8013368:	db04      	blt.n	8013374 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801336a:	69fb      	ldr	r3, [r7, #28]
 801336c:	f1c3 0207 	rsb	r2, r3, #7
 8013370:	69bb      	ldr	r3, [r7, #24]
 8013372:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8013374:	69bb      	ldr	r3, [r7, #24]
 8013376:	6959      	ldr	r1, [r3, #20]
 8013378:	693a      	ldr	r2, [r7, #16]
 801337a:	4613      	mov	r3, r2
 801337c:	009b      	lsls	r3, r3, #2
 801337e:	4413      	add	r3, r2
 8013380:	009b      	lsls	r3, r3, #2
 8013382:	4a22      	ldr	r2, [pc, #136]	; (801340c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8013384:	4413      	add	r3, r2
 8013386:	4299      	cmp	r1, r3
 8013388:	d101      	bne.n	801338e <vTaskPriorityDisinheritAfterTimeout+0xbe>
 801338a:	2301      	movs	r3, #1
 801338c:	e000      	b.n	8013390 <vTaskPriorityDisinheritAfterTimeout+0xc0>
 801338e:	2300      	movs	r3, #0
 8013390:	2b00      	cmp	r3, #0
 8013392:	d034      	beq.n	80133fe <vTaskPriorityDisinheritAfterTimeout+0x12e>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013394:	69bb      	ldr	r3, [r7, #24]
 8013396:	3304      	adds	r3, #4
 8013398:	4618      	mov	r0, r3
 801339a:	f7fe f9a1 	bl	80116e0 <uxListRemove>
 801339e:	4603      	mov	r3, r0
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d115      	bne.n	80133d0 <vTaskPriorityDisinheritAfterTimeout+0x100>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80133a4:	69bb      	ldr	r3, [r7, #24]
 80133a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133a8:	4918      	ldr	r1, [pc, #96]	; (801340c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80133aa:	4613      	mov	r3, r2
 80133ac:	009b      	lsls	r3, r3, #2
 80133ae:	4413      	add	r3, r2
 80133b0:	009b      	lsls	r3, r3, #2
 80133b2:	440b      	add	r3, r1
 80133b4:	681b      	ldr	r3, [r3, #0]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d10a      	bne.n	80133d0 <vTaskPriorityDisinheritAfterTimeout+0x100>
 80133ba:	69bb      	ldr	r3, [r7, #24]
 80133bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133be:	2201      	movs	r2, #1
 80133c0:	fa02 f303 	lsl.w	r3, r2, r3
 80133c4:	43da      	mvns	r2, r3
 80133c6:	4b12      	ldr	r3, [pc, #72]	; (8013410 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80133c8:	681b      	ldr	r3, [r3, #0]
 80133ca:	4013      	ands	r3, r2
 80133cc:	4a10      	ldr	r2, [pc, #64]	; (8013410 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80133ce:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80133d0:	69bb      	ldr	r3, [r7, #24]
 80133d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133d4:	2201      	movs	r2, #1
 80133d6:	409a      	lsls	r2, r3
 80133d8:	4b0d      	ldr	r3, [pc, #52]	; (8013410 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80133da:	681b      	ldr	r3, [r3, #0]
 80133dc:	4313      	orrs	r3, r2
 80133de:	4a0c      	ldr	r2, [pc, #48]	; (8013410 <vTaskPriorityDisinheritAfterTimeout+0x140>)
 80133e0:	6013      	str	r3, [r2, #0]
 80133e2:	69bb      	ldr	r3, [r7, #24]
 80133e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80133e6:	4613      	mov	r3, r2
 80133e8:	009b      	lsls	r3, r3, #2
 80133ea:	4413      	add	r3, r2
 80133ec:	009b      	lsls	r3, r3, #2
 80133ee:	4a07      	ldr	r2, [pc, #28]	; (801340c <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80133f0:	441a      	add	r2, r3
 80133f2:	69bb      	ldr	r3, [r7, #24]
 80133f4:	3304      	adds	r3, #4
 80133f6:	4619      	mov	r1, r3
 80133f8:	4610      	mov	r0, r2
 80133fa:	f7fe f914 	bl	8011626 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80133fe:	bf00      	nop
 8013400:	3720      	adds	r7, #32
 8013402:	46bd      	mov	sp, r7
 8013404:	bd80      	pop	{r7, pc}
 8013406:	bf00      	nop
 8013408:	20000148 	.word	0x20000148
 801340c:	2000014c 	.word	0x2000014c
 8013410:	20000250 	.word	0x20000250

08013414 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8013414:	b480      	push	{r7}
 8013416:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8013418:	4b07      	ldr	r3, [pc, #28]	; (8013438 <pvTaskIncrementMutexHeldCount+0x24>)
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	2b00      	cmp	r3, #0
 801341e:	d004      	beq.n	801342a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8013420:	4b05      	ldr	r3, [pc, #20]	; (8013438 <pvTaskIncrementMutexHeldCount+0x24>)
 8013422:	681b      	ldr	r3, [r3, #0]
 8013424:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8013426:	3201      	adds	r2, #1
 8013428:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801342a:	4b03      	ldr	r3, [pc, #12]	; (8013438 <pvTaskIncrementMutexHeldCount+0x24>)
 801342c:	681b      	ldr	r3, [r3, #0]
	}
 801342e:	4618      	mov	r0, r3
 8013430:	46bd      	mov	sp, r7
 8013432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013436:	4770      	bx	lr
 8013438:	20000148 	.word	0x20000148

0801343c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801343c:	b580      	push	{r7, lr}
 801343e:	b084      	sub	sp, #16
 8013440:	af00      	add	r7, sp, #0
 8013442:	6078      	str	r0, [r7, #4]
 8013444:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8013446:	4b29      	ldr	r3, [pc, #164]	; (80134ec <prvAddCurrentTaskToDelayedList+0xb0>)
 8013448:	681b      	ldr	r3, [r3, #0]
 801344a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801344c:	4b28      	ldr	r3, [pc, #160]	; (80134f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801344e:	681b      	ldr	r3, [r3, #0]
 8013450:	3304      	adds	r3, #4
 8013452:	4618      	mov	r0, r3
 8013454:	f7fe f944 	bl	80116e0 <uxListRemove>
 8013458:	4603      	mov	r3, r0
 801345a:	2b00      	cmp	r3, #0
 801345c:	d10b      	bne.n	8013476 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 801345e:	4b24      	ldr	r3, [pc, #144]	; (80134f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013460:	681b      	ldr	r3, [r3, #0]
 8013462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013464:	2201      	movs	r2, #1
 8013466:	fa02 f303 	lsl.w	r3, r2, r3
 801346a:	43da      	mvns	r2, r3
 801346c:	4b21      	ldr	r3, [pc, #132]	; (80134f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 801346e:	681b      	ldr	r3, [r3, #0]
 8013470:	4013      	ands	r3, r2
 8013472:	4a20      	ldr	r2, [pc, #128]	; (80134f4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8013474:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	f1b3 3fff 	cmp.w	r3, #4294967295
 801347c:	d10a      	bne.n	8013494 <prvAddCurrentTaskToDelayedList+0x58>
 801347e:	683b      	ldr	r3, [r7, #0]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d007      	beq.n	8013494 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013484:	4b1a      	ldr	r3, [pc, #104]	; (80134f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	3304      	adds	r3, #4
 801348a:	4619      	mov	r1, r3
 801348c:	481a      	ldr	r0, [pc, #104]	; (80134f8 <prvAddCurrentTaskToDelayedList+0xbc>)
 801348e:	f7fe f8ca 	bl	8011626 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013492:	e026      	b.n	80134e2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013494:	68fa      	ldr	r2, [r7, #12]
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	4413      	add	r3, r2
 801349a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801349c:	4b14      	ldr	r3, [pc, #80]	; (80134f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 801349e:	681b      	ldr	r3, [r3, #0]
 80134a0:	68ba      	ldr	r2, [r7, #8]
 80134a2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80134a4:	68ba      	ldr	r2, [r7, #8]
 80134a6:	68fb      	ldr	r3, [r7, #12]
 80134a8:	429a      	cmp	r2, r3
 80134aa:	d209      	bcs.n	80134c0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80134ac:	4b13      	ldr	r3, [pc, #76]	; (80134fc <prvAddCurrentTaskToDelayedList+0xc0>)
 80134ae:	681a      	ldr	r2, [r3, #0]
 80134b0:	4b0f      	ldr	r3, [pc, #60]	; (80134f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	3304      	adds	r3, #4
 80134b6:	4619      	mov	r1, r3
 80134b8:	4610      	mov	r0, r2
 80134ba:	f7fe f8d8 	bl	801166e <vListInsert>
}
 80134be:	e010      	b.n	80134e2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80134c0:	4b0f      	ldr	r3, [pc, #60]	; (8013500 <prvAddCurrentTaskToDelayedList+0xc4>)
 80134c2:	681a      	ldr	r2, [r3, #0]
 80134c4:	4b0a      	ldr	r3, [pc, #40]	; (80134f0 <prvAddCurrentTaskToDelayedList+0xb4>)
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	3304      	adds	r3, #4
 80134ca:	4619      	mov	r1, r3
 80134cc:	4610      	mov	r0, r2
 80134ce:	f7fe f8ce 	bl	801166e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80134d2:	4b0c      	ldr	r3, [pc, #48]	; (8013504 <prvAddCurrentTaskToDelayedList+0xc8>)
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	68ba      	ldr	r2, [r7, #8]
 80134d8:	429a      	cmp	r2, r3
 80134da:	d202      	bcs.n	80134e2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80134dc:	4a09      	ldr	r2, [pc, #36]	; (8013504 <prvAddCurrentTaskToDelayedList+0xc8>)
 80134de:	68bb      	ldr	r3, [r7, #8]
 80134e0:	6013      	str	r3, [r2, #0]
}
 80134e2:	bf00      	nop
 80134e4:	3710      	adds	r7, #16
 80134e6:	46bd      	mov	sp, r7
 80134e8:	bd80      	pop	{r7, pc}
 80134ea:	bf00      	nop
 80134ec:	2000024c 	.word	0x2000024c
 80134f0:	20000148 	.word	0x20000148
 80134f4:	20000250 	.word	0x20000250
 80134f8:	20000234 	.word	0x20000234
 80134fc:	20000204 	.word	0x20000204
 8013500:	20000200 	.word	0x20000200
 8013504:	20000268 	.word	0x20000268

08013508 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8013508:	b480      	push	{r7}
 801350a:	b085      	sub	sp, #20
 801350c:	af00      	add	r7, sp, #0
 801350e:	60f8      	str	r0, [r7, #12]
 8013510:	60b9      	str	r1, [r7, #8]
 8013512:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	3b04      	subs	r3, #4
 8013518:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8013520:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013522:	68fb      	ldr	r3, [r7, #12]
 8013524:	3b04      	subs	r3, #4
 8013526:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8013528:	68bb      	ldr	r3, [r7, #8]
 801352a:	f023 0201 	bic.w	r2, r3, #1
 801352e:	68fb      	ldr	r3, [r7, #12]
 8013530:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	3b04      	subs	r3, #4
 8013536:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8013538:	4a0c      	ldr	r2, [pc, #48]	; (801356c <pxPortInitialiseStack+0x64>)
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801353e:	68fb      	ldr	r3, [r7, #12]
 8013540:	3b14      	subs	r3, #20
 8013542:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8013544:	687a      	ldr	r2, [r7, #4]
 8013546:	68fb      	ldr	r3, [r7, #12]
 8013548:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801354a:	68fb      	ldr	r3, [r7, #12]
 801354c:	3b04      	subs	r3, #4
 801354e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	f06f 0202 	mvn.w	r2, #2
 8013556:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8013558:	68fb      	ldr	r3, [r7, #12]
 801355a:	3b20      	subs	r3, #32
 801355c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801355e:	68fb      	ldr	r3, [r7, #12]
}
 8013560:	4618      	mov	r0, r3
 8013562:	3714      	adds	r7, #20
 8013564:	46bd      	mov	sp, r7
 8013566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801356a:	4770      	bx	lr
 801356c:	08013571 	.word	0x08013571

08013570 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8013570:	b480      	push	{r7}
 8013572:	b085      	sub	sp, #20
 8013574:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8013576:	2300      	movs	r3, #0
 8013578:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801357a:	4b13      	ldr	r3, [pc, #76]	; (80135c8 <prvTaskExitError+0x58>)
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013582:	d00b      	beq.n	801359c <prvTaskExitError+0x2c>
 8013584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013588:	b672      	cpsid	i
 801358a:	f383 8811 	msr	BASEPRI, r3
 801358e:	f3bf 8f6f 	isb	sy
 8013592:	f3bf 8f4f 	dsb	sy
 8013596:	b662      	cpsie	i
 8013598:	60fb      	str	r3, [r7, #12]
 801359a:	e7fe      	b.n	801359a <prvTaskExitError+0x2a>
 801359c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135a0:	b672      	cpsid	i
 80135a2:	f383 8811 	msr	BASEPRI, r3
 80135a6:	f3bf 8f6f 	isb	sy
 80135aa:	f3bf 8f4f 	dsb	sy
 80135ae:	b662      	cpsie	i
 80135b0:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80135b2:	bf00      	nop
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d0fc      	beq.n	80135b4 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80135ba:	bf00      	nop
 80135bc:	3714      	adds	r7, #20
 80135be:	46bd      	mov	sp, r7
 80135c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135c4:	4770      	bx	lr
 80135c6:	bf00      	nop
 80135c8:	20000050 	.word	0x20000050
 80135cc:	00000000 	.word	0x00000000

080135d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80135d0:	4b07      	ldr	r3, [pc, #28]	; (80135f0 <pxCurrentTCBConst2>)
 80135d2:	6819      	ldr	r1, [r3, #0]
 80135d4:	6808      	ldr	r0, [r1, #0]
 80135d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135da:	f380 8809 	msr	PSP, r0
 80135de:	f3bf 8f6f 	isb	sy
 80135e2:	f04f 0000 	mov.w	r0, #0
 80135e6:	f380 8811 	msr	BASEPRI, r0
 80135ea:	4770      	bx	lr
 80135ec:	f3af 8000 	nop.w

080135f0 <pxCurrentTCBConst2>:
 80135f0:	20000148 	.word	0x20000148
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80135f4:	bf00      	nop
 80135f6:	bf00      	nop

080135f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80135f8:	4808      	ldr	r0, [pc, #32]	; (801361c <prvPortStartFirstTask+0x24>)
 80135fa:	6800      	ldr	r0, [r0, #0]
 80135fc:	6800      	ldr	r0, [r0, #0]
 80135fe:	f380 8808 	msr	MSP, r0
 8013602:	f04f 0000 	mov.w	r0, #0
 8013606:	f380 8814 	msr	CONTROL, r0
 801360a:	b662      	cpsie	i
 801360c:	b661      	cpsie	f
 801360e:	f3bf 8f4f 	dsb	sy
 8013612:	f3bf 8f6f 	isb	sy
 8013616:	df00      	svc	0
 8013618:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801361a:	bf00      	nop
 801361c:	e000ed08 	.word	0xe000ed08

08013620 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8013620:	b580      	push	{r7, lr}
 8013622:	b084      	sub	sp, #16
 8013624:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8013626:	4b36      	ldr	r3, [pc, #216]	; (8013700 <xPortStartScheduler+0xe0>)
 8013628:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801362a:	68fb      	ldr	r3, [r7, #12]
 801362c:	781b      	ldrb	r3, [r3, #0]
 801362e:	b2db      	uxtb	r3, r3
 8013630:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	22ff      	movs	r2, #255	; 0xff
 8013636:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8013638:	68fb      	ldr	r3, [r7, #12]
 801363a:	781b      	ldrb	r3, [r3, #0]
 801363c:	b2db      	uxtb	r3, r3
 801363e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013640:	78fb      	ldrb	r3, [r7, #3]
 8013642:	b2db      	uxtb	r3, r3
 8013644:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8013648:	b2da      	uxtb	r2, r3
 801364a:	4b2e      	ldr	r3, [pc, #184]	; (8013704 <xPortStartScheduler+0xe4>)
 801364c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801364e:	4b2e      	ldr	r3, [pc, #184]	; (8013708 <xPortStartScheduler+0xe8>)
 8013650:	2207      	movs	r2, #7
 8013652:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013654:	e009      	b.n	801366a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8013656:	4b2c      	ldr	r3, [pc, #176]	; (8013708 <xPortStartScheduler+0xe8>)
 8013658:	681b      	ldr	r3, [r3, #0]
 801365a:	3b01      	subs	r3, #1
 801365c:	4a2a      	ldr	r2, [pc, #168]	; (8013708 <xPortStartScheduler+0xe8>)
 801365e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013660:	78fb      	ldrb	r3, [r7, #3]
 8013662:	b2db      	uxtb	r3, r3
 8013664:	005b      	lsls	r3, r3, #1
 8013666:	b2db      	uxtb	r3, r3
 8013668:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801366a:	78fb      	ldrb	r3, [r7, #3]
 801366c:	b2db      	uxtb	r3, r3
 801366e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013672:	2b80      	cmp	r3, #128	; 0x80
 8013674:	d0ef      	beq.n	8013656 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8013676:	4b24      	ldr	r3, [pc, #144]	; (8013708 <xPortStartScheduler+0xe8>)
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	f1c3 0307 	rsb	r3, r3, #7
 801367e:	2b04      	cmp	r3, #4
 8013680:	d00b      	beq.n	801369a <xPortStartScheduler+0x7a>
 8013682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013686:	b672      	cpsid	i
 8013688:	f383 8811 	msr	BASEPRI, r3
 801368c:	f3bf 8f6f 	isb	sy
 8013690:	f3bf 8f4f 	dsb	sy
 8013694:	b662      	cpsie	i
 8013696:	60bb      	str	r3, [r7, #8]
 8013698:	e7fe      	b.n	8013698 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801369a:	4b1b      	ldr	r3, [pc, #108]	; (8013708 <xPortStartScheduler+0xe8>)
 801369c:	681b      	ldr	r3, [r3, #0]
 801369e:	021b      	lsls	r3, r3, #8
 80136a0:	4a19      	ldr	r2, [pc, #100]	; (8013708 <xPortStartScheduler+0xe8>)
 80136a2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80136a4:	4b18      	ldr	r3, [pc, #96]	; (8013708 <xPortStartScheduler+0xe8>)
 80136a6:	681b      	ldr	r3, [r3, #0]
 80136a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80136ac:	4a16      	ldr	r2, [pc, #88]	; (8013708 <xPortStartScheduler+0xe8>)
 80136ae:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80136b0:	687b      	ldr	r3, [r7, #4]
 80136b2:	b2da      	uxtb	r2, r3
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80136b8:	4b14      	ldr	r3, [pc, #80]	; (801370c <xPortStartScheduler+0xec>)
 80136ba:	681b      	ldr	r3, [r3, #0]
 80136bc:	4a13      	ldr	r2, [pc, #76]	; (801370c <xPortStartScheduler+0xec>)
 80136be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80136c2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80136c4:	4b11      	ldr	r3, [pc, #68]	; (801370c <xPortStartScheduler+0xec>)
 80136c6:	681b      	ldr	r3, [r3, #0]
 80136c8:	4a10      	ldr	r2, [pc, #64]	; (801370c <xPortStartScheduler+0xec>)
 80136ca:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80136ce:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80136d0:	f000 f8d4 	bl	801387c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80136d4:	4b0e      	ldr	r3, [pc, #56]	; (8013710 <xPortStartScheduler+0xf0>)
 80136d6:	2200      	movs	r2, #0
 80136d8:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80136da:	f000 f8f3 	bl	80138c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80136de:	4b0d      	ldr	r3, [pc, #52]	; (8013714 <xPortStartScheduler+0xf4>)
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	4a0c      	ldr	r2, [pc, #48]	; (8013714 <xPortStartScheduler+0xf4>)
 80136e4:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80136e8:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80136ea:	f7ff ff85 	bl	80135f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80136ee:	f7ff fa69 	bl	8012bc4 <vTaskSwitchContext>
	prvTaskExitError();
 80136f2:	f7ff ff3d 	bl	8013570 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80136f6:	2300      	movs	r3, #0
}
 80136f8:	4618      	mov	r0, r3
 80136fa:	3710      	adds	r7, #16
 80136fc:	46bd      	mov	sp, r7
 80136fe:	bd80      	pop	{r7, pc}
 8013700:	e000e400 	.word	0xe000e400
 8013704:	20000274 	.word	0x20000274
 8013708:	20000278 	.word	0x20000278
 801370c:	e000ed20 	.word	0xe000ed20
 8013710:	20000050 	.word	0x20000050
 8013714:	e000ef34 	.word	0xe000ef34

08013718 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8013718:	b480      	push	{r7}
 801371a:	b083      	sub	sp, #12
 801371c:	af00      	add	r7, sp, #0
 801371e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013722:	b672      	cpsid	i
 8013724:	f383 8811 	msr	BASEPRI, r3
 8013728:	f3bf 8f6f 	isb	sy
 801372c:	f3bf 8f4f 	dsb	sy
 8013730:	b662      	cpsie	i
 8013732:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013734:	4b0f      	ldr	r3, [pc, #60]	; (8013774 <vPortEnterCritical+0x5c>)
 8013736:	681b      	ldr	r3, [r3, #0]
 8013738:	3301      	adds	r3, #1
 801373a:	4a0e      	ldr	r2, [pc, #56]	; (8013774 <vPortEnterCritical+0x5c>)
 801373c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801373e:	4b0d      	ldr	r3, [pc, #52]	; (8013774 <vPortEnterCritical+0x5c>)
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	2b01      	cmp	r3, #1
 8013744:	d110      	bne.n	8013768 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013746:	4b0c      	ldr	r3, [pc, #48]	; (8013778 <vPortEnterCritical+0x60>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	b2db      	uxtb	r3, r3
 801374c:	2b00      	cmp	r3, #0
 801374e:	d00b      	beq.n	8013768 <vPortEnterCritical+0x50>
 8013750:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013754:	b672      	cpsid	i
 8013756:	f383 8811 	msr	BASEPRI, r3
 801375a:	f3bf 8f6f 	isb	sy
 801375e:	f3bf 8f4f 	dsb	sy
 8013762:	b662      	cpsie	i
 8013764:	603b      	str	r3, [r7, #0]
 8013766:	e7fe      	b.n	8013766 <vPortEnterCritical+0x4e>
	}
}
 8013768:	bf00      	nop
 801376a:	370c      	adds	r7, #12
 801376c:	46bd      	mov	sp, r7
 801376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013772:	4770      	bx	lr
 8013774:	20000050 	.word	0x20000050
 8013778:	e000ed04 	.word	0xe000ed04

0801377c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801377c:	b480      	push	{r7}
 801377e:	b083      	sub	sp, #12
 8013780:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013782:	4b12      	ldr	r3, [pc, #72]	; (80137cc <vPortExitCritical+0x50>)
 8013784:	681b      	ldr	r3, [r3, #0]
 8013786:	2b00      	cmp	r3, #0
 8013788:	d10b      	bne.n	80137a2 <vPortExitCritical+0x26>
 801378a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801378e:	b672      	cpsid	i
 8013790:	f383 8811 	msr	BASEPRI, r3
 8013794:	f3bf 8f6f 	isb	sy
 8013798:	f3bf 8f4f 	dsb	sy
 801379c:	b662      	cpsie	i
 801379e:	607b      	str	r3, [r7, #4]
 80137a0:	e7fe      	b.n	80137a0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 80137a2:	4b0a      	ldr	r3, [pc, #40]	; (80137cc <vPortExitCritical+0x50>)
 80137a4:	681b      	ldr	r3, [r3, #0]
 80137a6:	3b01      	subs	r3, #1
 80137a8:	4a08      	ldr	r2, [pc, #32]	; (80137cc <vPortExitCritical+0x50>)
 80137aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80137ac:	4b07      	ldr	r3, [pc, #28]	; (80137cc <vPortExitCritical+0x50>)
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d104      	bne.n	80137be <vPortExitCritical+0x42>
 80137b4:	2300      	movs	r3, #0
 80137b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80137b8:	683b      	ldr	r3, [r7, #0]
 80137ba:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80137be:	bf00      	nop
 80137c0:	370c      	adds	r7, #12
 80137c2:	46bd      	mov	sp, r7
 80137c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c8:	4770      	bx	lr
 80137ca:	bf00      	nop
 80137cc:	20000050 	.word	0x20000050

080137d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80137d0:	f3ef 8009 	mrs	r0, PSP
 80137d4:	f3bf 8f6f 	isb	sy
 80137d8:	4b15      	ldr	r3, [pc, #84]	; (8013830 <pxCurrentTCBConst>)
 80137da:	681a      	ldr	r2, [r3, #0]
 80137dc:	f01e 0f10 	tst.w	lr, #16
 80137e0:	bf08      	it	eq
 80137e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80137e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137ea:	6010      	str	r0, [r2, #0]
 80137ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80137f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80137f4:	b672      	cpsid	i
 80137f6:	f380 8811 	msr	BASEPRI, r0
 80137fa:	f3bf 8f4f 	dsb	sy
 80137fe:	f3bf 8f6f 	isb	sy
 8013802:	b662      	cpsie	i
 8013804:	f7ff f9de 	bl	8012bc4 <vTaskSwitchContext>
 8013808:	f04f 0000 	mov.w	r0, #0
 801380c:	f380 8811 	msr	BASEPRI, r0
 8013810:	bc09      	pop	{r0, r3}
 8013812:	6819      	ldr	r1, [r3, #0]
 8013814:	6808      	ldr	r0, [r1, #0]
 8013816:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801381a:	f01e 0f10 	tst.w	lr, #16
 801381e:	bf08      	it	eq
 8013820:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8013824:	f380 8809 	msr	PSP, r0
 8013828:	f3bf 8f6f 	isb	sy
 801382c:	4770      	bx	lr
 801382e:	bf00      	nop

08013830 <pxCurrentTCBConst>:
 8013830:	20000148 	.word	0x20000148
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013834:	bf00      	nop
 8013836:	bf00      	nop

08013838 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013838:	b580      	push	{r7, lr}
 801383a:	b082      	sub	sp, #8
 801383c:	af00      	add	r7, sp, #0
	__asm volatile
 801383e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013842:	b672      	cpsid	i
 8013844:	f383 8811 	msr	BASEPRI, r3
 8013848:	f3bf 8f6f 	isb	sy
 801384c:	f3bf 8f4f 	dsb	sy
 8013850:	b662      	cpsie	i
 8013852:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013854:	f7ff f8ba 	bl	80129cc <xTaskIncrementTick>
 8013858:	4603      	mov	r3, r0
 801385a:	2b00      	cmp	r3, #0
 801385c:	d003      	beq.n	8013866 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801385e:	4b06      	ldr	r3, [pc, #24]	; (8013878 <SysTick_Handler+0x40>)
 8013860:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013864:	601a      	str	r2, [r3, #0]
 8013866:	2300      	movs	r3, #0
 8013868:	603b      	str	r3, [r7, #0]
	__asm volatile
 801386a:	683b      	ldr	r3, [r7, #0]
 801386c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8013870:	bf00      	nop
 8013872:	3708      	adds	r7, #8
 8013874:	46bd      	mov	sp, r7
 8013876:	bd80      	pop	{r7, pc}
 8013878:	e000ed04 	.word	0xe000ed04

0801387c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801387c:	b480      	push	{r7}
 801387e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013880:	4b0b      	ldr	r3, [pc, #44]	; (80138b0 <vPortSetupTimerInterrupt+0x34>)
 8013882:	2200      	movs	r2, #0
 8013884:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013886:	4b0b      	ldr	r3, [pc, #44]	; (80138b4 <vPortSetupTimerInterrupt+0x38>)
 8013888:	2200      	movs	r2, #0
 801388a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801388c:	4b0a      	ldr	r3, [pc, #40]	; (80138b8 <vPortSetupTimerInterrupt+0x3c>)
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	4a0a      	ldr	r2, [pc, #40]	; (80138bc <vPortSetupTimerInterrupt+0x40>)
 8013892:	fba2 2303 	umull	r2, r3, r2, r3
 8013896:	099b      	lsrs	r3, r3, #6
 8013898:	4a09      	ldr	r2, [pc, #36]	; (80138c0 <vPortSetupTimerInterrupt+0x44>)
 801389a:	3b01      	subs	r3, #1
 801389c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801389e:	4b04      	ldr	r3, [pc, #16]	; (80138b0 <vPortSetupTimerInterrupt+0x34>)
 80138a0:	2207      	movs	r2, #7
 80138a2:	601a      	str	r2, [r3, #0]
}
 80138a4:	bf00      	nop
 80138a6:	46bd      	mov	sp, r7
 80138a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ac:	4770      	bx	lr
 80138ae:	bf00      	nop
 80138b0:	e000e010 	.word	0xe000e010
 80138b4:	e000e018 	.word	0xe000e018
 80138b8:	20000070 	.word	0x20000070
 80138bc:	10624dd3 	.word	0x10624dd3
 80138c0:	e000e014 	.word	0xe000e014

080138c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80138c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80138d4 <vPortEnableVFP+0x10>
 80138c8:	6801      	ldr	r1, [r0, #0]
 80138ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80138ce:	6001      	str	r1, [r0, #0]
 80138d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80138d2:	bf00      	nop
 80138d4:	e000ed88 	.word	0xe000ed88

080138d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80138d8:	b480      	push	{r7}
 80138da:	b085      	sub	sp, #20
 80138dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80138de:	f3ef 8305 	mrs	r3, IPSR
 80138e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	2b0f      	cmp	r3, #15
 80138e8:	d915      	bls.n	8013916 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80138ea:	4a18      	ldr	r2, [pc, #96]	; (801394c <vPortValidateInterruptPriority+0x74>)
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	4413      	add	r3, r2
 80138f0:	781b      	ldrb	r3, [r3, #0]
 80138f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80138f4:	4b16      	ldr	r3, [pc, #88]	; (8013950 <vPortValidateInterruptPriority+0x78>)
 80138f6:	781b      	ldrb	r3, [r3, #0]
 80138f8:	7afa      	ldrb	r2, [r7, #11]
 80138fa:	429a      	cmp	r2, r3
 80138fc:	d20b      	bcs.n	8013916 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80138fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013902:	b672      	cpsid	i
 8013904:	f383 8811 	msr	BASEPRI, r3
 8013908:	f3bf 8f6f 	isb	sy
 801390c:	f3bf 8f4f 	dsb	sy
 8013910:	b662      	cpsie	i
 8013912:	607b      	str	r3, [r7, #4]
 8013914:	e7fe      	b.n	8013914 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8013916:	4b0f      	ldr	r3, [pc, #60]	; (8013954 <vPortValidateInterruptPriority+0x7c>)
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801391e:	4b0e      	ldr	r3, [pc, #56]	; (8013958 <vPortValidateInterruptPriority+0x80>)
 8013920:	681b      	ldr	r3, [r3, #0]
 8013922:	429a      	cmp	r2, r3
 8013924:	d90b      	bls.n	801393e <vPortValidateInterruptPriority+0x66>
 8013926:	f04f 0350 	mov.w	r3, #80	; 0x50
 801392a:	b672      	cpsid	i
 801392c:	f383 8811 	msr	BASEPRI, r3
 8013930:	f3bf 8f6f 	isb	sy
 8013934:	f3bf 8f4f 	dsb	sy
 8013938:	b662      	cpsie	i
 801393a:	603b      	str	r3, [r7, #0]
 801393c:	e7fe      	b.n	801393c <vPortValidateInterruptPriority+0x64>
	}
 801393e:	bf00      	nop
 8013940:	3714      	adds	r7, #20
 8013942:	46bd      	mov	sp, r7
 8013944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013948:	4770      	bx	lr
 801394a:	bf00      	nop
 801394c:	e000e3f0 	.word	0xe000e3f0
 8013950:	20000274 	.word	0x20000274
 8013954:	e000ed0c 	.word	0xe000ed0c
 8013958:	20000278 	.word	0x20000278

0801395c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801395c:	b580      	push	{r7, lr}
 801395e:	b08a      	sub	sp, #40	; 0x28
 8013960:	af00      	add	r7, sp, #0
 8013962:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013964:	2300      	movs	r3, #0
 8013966:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013968:	f7fe ff62 	bl	8012830 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801396c:	4b5c      	ldr	r3, [pc, #368]	; (8013ae0 <pvPortMalloc+0x184>)
 801396e:	681b      	ldr	r3, [r3, #0]
 8013970:	2b00      	cmp	r3, #0
 8013972:	d101      	bne.n	8013978 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013974:	f000 f91a 	bl	8013bac <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013978:	4b5a      	ldr	r3, [pc, #360]	; (8013ae4 <pvPortMalloc+0x188>)
 801397a:	681a      	ldr	r2, [r3, #0]
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	4013      	ands	r3, r2
 8013980:	2b00      	cmp	r3, #0
 8013982:	f040 8090 	bne.w	8013aa6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	2b00      	cmp	r3, #0
 801398a:	d01e      	beq.n	80139ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801398c:	2208      	movs	r2, #8
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	4413      	add	r3, r2
 8013992:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	f003 0307 	and.w	r3, r3, #7
 801399a:	2b00      	cmp	r3, #0
 801399c:	d015      	beq.n	80139ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801399e:	687b      	ldr	r3, [r7, #4]
 80139a0:	f023 0307 	bic.w	r3, r3, #7
 80139a4:	3308      	adds	r3, #8
 80139a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	f003 0307 	and.w	r3, r3, #7
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d00b      	beq.n	80139ca <pvPortMalloc+0x6e>
 80139b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80139b6:	b672      	cpsid	i
 80139b8:	f383 8811 	msr	BASEPRI, r3
 80139bc:	f3bf 8f6f 	isb	sy
 80139c0:	f3bf 8f4f 	dsb	sy
 80139c4:	b662      	cpsie	i
 80139c6:	617b      	str	r3, [r7, #20]
 80139c8:	e7fe      	b.n	80139c8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d06a      	beq.n	8013aa6 <pvPortMalloc+0x14a>
 80139d0:	4b45      	ldr	r3, [pc, #276]	; (8013ae8 <pvPortMalloc+0x18c>)
 80139d2:	681b      	ldr	r3, [r3, #0]
 80139d4:	687a      	ldr	r2, [r7, #4]
 80139d6:	429a      	cmp	r2, r3
 80139d8:	d865      	bhi.n	8013aa6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80139da:	4b44      	ldr	r3, [pc, #272]	; (8013aec <pvPortMalloc+0x190>)
 80139dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80139de:	4b43      	ldr	r3, [pc, #268]	; (8013aec <pvPortMalloc+0x190>)
 80139e0:	681b      	ldr	r3, [r3, #0]
 80139e2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80139e4:	e004      	b.n	80139f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80139e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80139ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80139f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139f2:	685b      	ldr	r3, [r3, #4]
 80139f4:	687a      	ldr	r2, [r7, #4]
 80139f6:	429a      	cmp	r2, r3
 80139f8:	d903      	bls.n	8013a02 <pvPortMalloc+0xa6>
 80139fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	2b00      	cmp	r3, #0
 8013a00:	d1f1      	bne.n	80139e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8013a02:	4b37      	ldr	r3, [pc, #220]	; (8013ae0 <pvPortMalloc+0x184>)
 8013a04:	681b      	ldr	r3, [r3, #0]
 8013a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a08:	429a      	cmp	r2, r3
 8013a0a:	d04c      	beq.n	8013aa6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013a0c:	6a3b      	ldr	r3, [r7, #32]
 8013a0e:	681b      	ldr	r3, [r3, #0]
 8013a10:	2208      	movs	r2, #8
 8013a12:	4413      	add	r3, r2
 8013a14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a18:	681a      	ldr	r2, [r3, #0]
 8013a1a:	6a3b      	ldr	r3, [r7, #32]
 8013a1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a20:	685a      	ldr	r2, [r3, #4]
 8013a22:	687b      	ldr	r3, [r7, #4]
 8013a24:	1ad2      	subs	r2, r2, r3
 8013a26:	2308      	movs	r3, #8
 8013a28:	005b      	lsls	r3, r3, #1
 8013a2a:	429a      	cmp	r2, r3
 8013a2c:	d920      	bls.n	8013a70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	4413      	add	r3, r2
 8013a34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013a36:	69bb      	ldr	r3, [r7, #24]
 8013a38:	f003 0307 	and.w	r3, r3, #7
 8013a3c:	2b00      	cmp	r3, #0
 8013a3e:	d00b      	beq.n	8013a58 <pvPortMalloc+0xfc>
 8013a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a44:	b672      	cpsid	i
 8013a46:	f383 8811 	msr	BASEPRI, r3
 8013a4a:	f3bf 8f6f 	isb	sy
 8013a4e:	f3bf 8f4f 	dsb	sy
 8013a52:	b662      	cpsie	i
 8013a54:	613b      	str	r3, [r7, #16]
 8013a56:	e7fe      	b.n	8013a56 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a5a:	685a      	ldr	r2, [r3, #4]
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	1ad2      	subs	r2, r2, r3
 8013a60:	69bb      	ldr	r3, [r7, #24]
 8013a62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a66:	687a      	ldr	r2, [r7, #4]
 8013a68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013a6a:	69b8      	ldr	r0, [r7, #24]
 8013a6c:	f000 f900 	bl	8013c70 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013a70:	4b1d      	ldr	r3, [pc, #116]	; (8013ae8 <pvPortMalloc+0x18c>)
 8013a72:	681a      	ldr	r2, [r3, #0]
 8013a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a76:	685b      	ldr	r3, [r3, #4]
 8013a78:	1ad3      	subs	r3, r2, r3
 8013a7a:	4a1b      	ldr	r2, [pc, #108]	; (8013ae8 <pvPortMalloc+0x18c>)
 8013a7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8013a7e:	4b1a      	ldr	r3, [pc, #104]	; (8013ae8 <pvPortMalloc+0x18c>)
 8013a80:	681a      	ldr	r2, [r3, #0]
 8013a82:	4b1b      	ldr	r3, [pc, #108]	; (8013af0 <pvPortMalloc+0x194>)
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	429a      	cmp	r2, r3
 8013a88:	d203      	bcs.n	8013a92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013a8a:	4b17      	ldr	r3, [pc, #92]	; (8013ae8 <pvPortMalloc+0x18c>)
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	4a18      	ldr	r2, [pc, #96]	; (8013af0 <pvPortMalloc+0x194>)
 8013a90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a94:	685a      	ldr	r2, [r3, #4]
 8013a96:	4b13      	ldr	r3, [pc, #76]	; (8013ae4 <pvPortMalloc+0x188>)
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	431a      	orrs	r2, r3
 8013a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013aa2:	2200      	movs	r2, #0
 8013aa4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013aa6:	f7fe fed1 	bl	801284c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8013aaa:	69fb      	ldr	r3, [r7, #28]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d101      	bne.n	8013ab4 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 8013ab0:	f7fd fb29 	bl	8011106 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013ab4:	69fb      	ldr	r3, [r7, #28]
 8013ab6:	f003 0307 	and.w	r3, r3, #7
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d00b      	beq.n	8013ad6 <pvPortMalloc+0x17a>
 8013abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ac2:	b672      	cpsid	i
 8013ac4:	f383 8811 	msr	BASEPRI, r3
 8013ac8:	f3bf 8f6f 	isb	sy
 8013acc:	f3bf 8f4f 	dsb	sy
 8013ad0:	b662      	cpsie	i
 8013ad2:	60fb      	str	r3, [r7, #12]
 8013ad4:	e7fe      	b.n	8013ad4 <pvPortMalloc+0x178>
	return pvReturn;
 8013ad6:	69fb      	ldr	r3, [r7, #28]
}
 8013ad8:	4618      	mov	r0, r3
 8013ada:	3728      	adds	r7, #40	; 0x28
 8013adc:	46bd      	mov	sp, r7
 8013ade:	bd80      	pop	{r7, pc}
 8013ae0:	20008284 	.word	0x20008284
 8013ae4:	20008290 	.word	0x20008290
 8013ae8:	20008288 	.word	0x20008288
 8013aec:	2000827c 	.word	0x2000827c
 8013af0:	2000828c 	.word	0x2000828c

08013af4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013af4:	b580      	push	{r7, lr}
 8013af6:	b086      	sub	sp, #24
 8013af8:	af00      	add	r7, sp, #0
 8013afa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	2b00      	cmp	r3, #0
 8013b04:	d04a      	beq.n	8013b9c <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013b06:	2308      	movs	r3, #8
 8013b08:	425b      	negs	r3, r3
 8013b0a:	697a      	ldr	r2, [r7, #20]
 8013b0c:	4413      	add	r3, r2
 8013b0e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013b10:	697b      	ldr	r3, [r7, #20]
 8013b12:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013b14:	693b      	ldr	r3, [r7, #16]
 8013b16:	685a      	ldr	r2, [r3, #4]
 8013b18:	4b22      	ldr	r3, [pc, #136]	; (8013ba4 <vPortFree+0xb0>)
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	4013      	ands	r3, r2
 8013b1e:	2b00      	cmp	r3, #0
 8013b20:	d10b      	bne.n	8013b3a <vPortFree+0x46>
 8013b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b26:	b672      	cpsid	i
 8013b28:	f383 8811 	msr	BASEPRI, r3
 8013b2c:	f3bf 8f6f 	isb	sy
 8013b30:	f3bf 8f4f 	dsb	sy
 8013b34:	b662      	cpsie	i
 8013b36:	60fb      	str	r3, [r7, #12]
 8013b38:	e7fe      	b.n	8013b38 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8013b3a:	693b      	ldr	r3, [r7, #16]
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d00b      	beq.n	8013b5a <vPortFree+0x66>
 8013b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b46:	b672      	cpsid	i
 8013b48:	f383 8811 	msr	BASEPRI, r3
 8013b4c:	f3bf 8f6f 	isb	sy
 8013b50:	f3bf 8f4f 	dsb	sy
 8013b54:	b662      	cpsie	i
 8013b56:	60bb      	str	r3, [r7, #8]
 8013b58:	e7fe      	b.n	8013b58 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8013b5a:	693b      	ldr	r3, [r7, #16]
 8013b5c:	685a      	ldr	r2, [r3, #4]
 8013b5e:	4b11      	ldr	r3, [pc, #68]	; (8013ba4 <vPortFree+0xb0>)
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	4013      	ands	r3, r2
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d019      	beq.n	8013b9c <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8013b68:	693b      	ldr	r3, [r7, #16]
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	2b00      	cmp	r3, #0
 8013b6e:	d115      	bne.n	8013b9c <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013b70:	693b      	ldr	r3, [r7, #16]
 8013b72:	685a      	ldr	r2, [r3, #4]
 8013b74:	4b0b      	ldr	r3, [pc, #44]	; (8013ba4 <vPortFree+0xb0>)
 8013b76:	681b      	ldr	r3, [r3, #0]
 8013b78:	43db      	mvns	r3, r3
 8013b7a:	401a      	ands	r2, r3
 8013b7c:	693b      	ldr	r3, [r7, #16]
 8013b7e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013b80:	f7fe fe56 	bl	8012830 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013b84:	693b      	ldr	r3, [r7, #16]
 8013b86:	685a      	ldr	r2, [r3, #4]
 8013b88:	4b07      	ldr	r3, [pc, #28]	; (8013ba8 <vPortFree+0xb4>)
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	4413      	add	r3, r2
 8013b8e:	4a06      	ldr	r2, [pc, #24]	; (8013ba8 <vPortFree+0xb4>)
 8013b90:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013b92:	6938      	ldr	r0, [r7, #16]
 8013b94:	f000 f86c 	bl	8013c70 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8013b98:	f7fe fe58 	bl	801284c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013b9c:	bf00      	nop
 8013b9e:	3718      	adds	r7, #24
 8013ba0:	46bd      	mov	sp, r7
 8013ba2:	bd80      	pop	{r7, pc}
 8013ba4:	20008290 	.word	0x20008290
 8013ba8:	20008288 	.word	0x20008288

08013bac <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013bac:	b480      	push	{r7}
 8013bae:	b085      	sub	sp, #20
 8013bb0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013bb6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8013bb8:	4b27      	ldr	r3, [pc, #156]	; (8013c58 <prvHeapInit+0xac>)
 8013bba:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	f003 0307 	and.w	r3, r3, #7
 8013bc2:	2b00      	cmp	r3, #0
 8013bc4:	d00c      	beq.n	8013be0 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	3307      	adds	r3, #7
 8013bca:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013bcc:	68fb      	ldr	r3, [r7, #12]
 8013bce:	f023 0307 	bic.w	r3, r3, #7
 8013bd2:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013bd4:	68ba      	ldr	r2, [r7, #8]
 8013bd6:	68fb      	ldr	r3, [r7, #12]
 8013bd8:	1ad3      	subs	r3, r2, r3
 8013bda:	4a1f      	ldr	r2, [pc, #124]	; (8013c58 <prvHeapInit+0xac>)
 8013bdc:	4413      	add	r3, r2
 8013bde:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013be0:	68fb      	ldr	r3, [r7, #12]
 8013be2:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013be4:	4a1d      	ldr	r2, [pc, #116]	; (8013c5c <prvHeapInit+0xb0>)
 8013be6:	687b      	ldr	r3, [r7, #4]
 8013be8:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8013bea:	4b1c      	ldr	r3, [pc, #112]	; (8013c5c <prvHeapInit+0xb0>)
 8013bec:	2200      	movs	r2, #0
 8013bee:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	68ba      	ldr	r2, [r7, #8]
 8013bf4:	4413      	add	r3, r2
 8013bf6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8013bf8:	2208      	movs	r2, #8
 8013bfa:	68fb      	ldr	r3, [r7, #12]
 8013bfc:	1a9b      	subs	r3, r3, r2
 8013bfe:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	f023 0307 	bic.w	r3, r3, #7
 8013c06:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8013c08:	68fb      	ldr	r3, [r7, #12]
 8013c0a:	4a15      	ldr	r2, [pc, #84]	; (8013c60 <prvHeapInit+0xb4>)
 8013c0c:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013c0e:	4b14      	ldr	r3, [pc, #80]	; (8013c60 <prvHeapInit+0xb4>)
 8013c10:	681b      	ldr	r3, [r3, #0]
 8013c12:	2200      	movs	r2, #0
 8013c14:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8013c16:	4b12      	ldr	r3, [pc, #72]	; (8013c60 <prvHeapInit+0xb4>)
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	2200      	movs	r2, #0
 8013c1c:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013c1e:	687b      	ldr	r3, [r7, #4]
 8013c20:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013c22:	683b      	ldr	r3, [r7, #0]
 8013c24:	68fa      	ldr	r2, [r7, #12]
 8013c26:	1ad2      	subs	r2, r2, r3
 8013c28:	683b      	ldr	r3, [r7, #0]
 8013c2a:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013c2c:	4b0c      	ldr	r3, [pc, #48]	; (8013c60 <prvHeapInit+0xb4>)
 8013c2e:	681a      	ldr	r2, [r3, #0]
 8013c30:	683b      	ldr	r3, [r7, #0]
 8013c32:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013c34:	683b      	ldr	r3, [r7, #0]
 8013c36:	685b      	ldr	r3, [r3, #4]
 8013c38:	4a0a      	ldr	r2, [pc, #40]	; (8013c64 <prvHeapInit+0xb8>)
 8013c3a:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013c3c:	683b      	ldr	r3, [r7, #0]
 8013c3e:	685b      	ldr	r3, [r3, #4]
 8013c40:	4a09      	ldr	r2, [pc, #36]	; (8013c68 <prvHeapInit+0xbc>)
 8013c42:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013c44:	4b09      	ldr	r3, [pc, #36]	; (8013c6c <prvHeapInit+0xc0>)
 8013c46:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8013c4a:	601a      	str	r2, [r3, #0]
}
 8013c4c:	bf00      	nop
 8013c4e:	3714      	adds	r7, #20
 8013c50:	46bd      	mov	sp, r7
 8013c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c56:	4770      	bx	lr
 8013c58:	2000027c 	.word	0x2000027c
 8013c5c:	2000827c 	.word	0x2000827c
 8013c60:	20008284 	.word	0x20008284
 8013c64:	2000828c 	.word	0x2000828c
 8013c68:	20008288 	.word	0x20008288
 8013c6c:	20008290 	.word	0x20008290

08013c70 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013c70:	b480      	push	{r7}
 8013c72:	b085      	sub	sp, #20
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8013c78:	4b28      	ldr	r3, [pc, #160]	; (8013d1c <prvInsertBlockIntoFreeList+0xac>)
 8013c7a:	60fb      	str	r3, [r7, #12]
 8013c7c:	e002      	b.n	8013c84 <prvInsertBlockIntoFreeList+0x14>
 8013c7e:	68fb      	ldr	r3, [r7, #12]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	60fb      	str	r3, [r7, #12]
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	681b      	ldr	r3, [r3, #0]
 8013c88:	687a      	ldr	r2, [r7, #4]
 8013c8a:	429a      	cmp	r2, r3
 8013c8c:	d8f7      	bhi.n	8013c7e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013c92:	68fb      	ldr	r3, [r7, #12]
 8013c94:	685b      	ldr	r3, [r3, #4]
 8013c96:	68ba      	ldr	r2, [r7, #8]
 8013c98:	4413      	add	r3, r2
 8013c9a:	687a      	ldr	r2, [r7, #4]
 8013c9c:	429a      	cmp	r2, r3
 8013c9e:	d108      	bne.n	8013cb2 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013ca0:	68fb      	ldr	r3, [r7, #12]
 8013ca2:	685a      	ldr	r2, [r3, #4]
 8013ca4:	687b      	ldr	r3, [r7, #4]
 8013ca6:	685b      	ldr	r3, [r3, #4]
 8013ca8:	441a      	add	r2, r3
 8013caa:	68fb      	ldr	r3, [r7, #12]
 8013cac:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	685b      	ldr	r3, [r3, #4]
 8013cba:	68ba      	ldr	r2, [r7, #8]
 8013cbc:	441a      	add	r2, r3
 8013cbe:	68fb      	ldr	r3, [r7, #12]
 8013cc0:	681b      	ldr	r3, [r3, #0]
 8013cc2:	429a      	cmp	r2, r3
 8013cc4:	d118      	bne.n	8013cf8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8013cc6:	68fb      	ldr	r3, [r7, #12]
 8013cc8:	681a      	ldr	r2, [r3, #0]
 8013cca:	4b15      	ldr	r3, [pc, #84]	; (8013d20 <prvInsertBlockIntoFreeList+0xb0>)
 8013ccc:	681b      	ldr	r3, [r3, #0]
 8013cce:	429a      	cmp	r2, r3
 8013cd0:	d00d      	beq.n	8013cee <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013cd2:	687b      	ldr	r3, [r7, #4]
 8013cd4:	685a      	ldr	r2, [r3, #4]
 8013cd6:	68fb      	ldr	r3, [r7, #12]
 8013cd8:	681b      	ldr	r3, [r3, #0]
 8013cda:	685b      	ldr	r3, [r3, #4]
 8013cdc:	441a      	add	r2, r3
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	681a      	ldr	r2, [r3, #0]
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	601a      	str	r2, [r3, #0]
 8013cec:	e008      	b.n	8013d00 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013cee:	4b0c      	ldr	r3, [pc, #48]	; (8013d20 <prvInsertBlockIntoFreeList+0xb0>)
 8013cf0:	681a      	ldr	r2, [r3, #0]
 8013cf2:	687b      	ldr	r3, [r7, #4]
 8013cf4:	601a      	str	r2, [r3, #0]
 8013cf6:	e003      	b.n	8013d00 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8013cf8:	68fb      	ldr	r3, [r7, #12]
 8013cfa:	681a      	ldr	r2, [r3, #0]
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013d00:	68fa      	ldr	r2, [r7, #12]
 8013d02:	687b      	ldr	r3, [r7, #4]
 8013d04:	429a      	cmp	r2, r3
 8013d06:	d002      	beq.n	8013d0e <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	687a      	ldr	r2, [r7, #4]
 8013d0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013d0e:	bf00      	nop
 8013d10:	3714      	adds	r7, #20
 8013d12:	46bd      	mov	sp, r7
 8013d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d18:	4770      	bx	lr
 8013d1a:	bf00      	nop
 8013d1c:	2000827c 	.word	0x2000827c
 8013d20:	20008284 	.word	0x20008284

08013d24 <BSP_LED_On>:
  *          This parameter can be one of the following values:
  *            @arg  LED1
  * @retval None
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b084      	sub	sp, #16
 8013d28:	af00      	add	r7, sp, #0
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	71fb      	strb	r3, [r7, #7]
  GPIO_TypeDef*     gpio_led;

  if (Led == LED1)	/* Switch On LED connected to GPIO */
 8013d2e:	79fb      	ldrb	r3, [r7, #7]
 8013d30:	2b00      	cmp	r3, #0
 8013d32:	d108      	bne.n	8013d46 <BSP_LED_On+0x22>
  {
    gpio_led = LED1_GPIO_PORT;
 8013d34:	4b06      	ldr	r3, [pc, #24]	; (8013d50 <BSP_LED_On+0x2c>)
 8013d36:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_WritePin(gpio_led, GPIO_PIN[Led], GPIO_PIN_SET);
 8013d38:	2302      	movs	r3, #2
 8013d3a:	b29b      	uxth	r3, r3
 8013d3c:	2201      	movs	r2, #1
 8013d3e:	4619      	mov	r1, r3
 8013d40:	68f8      	ldr	r0, [r7, #12]
 8013d42:	f7ee ffd1 	bl	8002ce8 <HAL_GPIO_WritePin>
  }
}
 8013d46:	bf00      	nop
 8013d48:	3710      	adds	r7, #16
 8013d4a:	46bd      	mov	sp, r7
 8013d4c:	bd80      	pop	{r7, pc}
 8013d4e:	bf00      	nop
 8013d50:	40022000 	.word	0x40022000

08013d54 <BSP_COM_Init>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  * @retval None
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8013d54:	b580      	push	{r7, lr}
 8013d56:	b08a      	sub	sp, #40	; 0x28
 8013d58:	af00      	add	r7, sp, #0
 8013d5a:	4603      	mov	r3, r0
 8013d5c:	6039      	str	r1, [r7, #0]
 8013d5e:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 8013d60:	79fb      	ldrb	r3, [r7, #7]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d10b      	bne.n	8013d7e <BSP_COM_Init+0x2a>
 8013d66:	4b2e      	ldr	r3, [pc, #184]	; (8013e20 <BSP_COM_Init+0xcc>)
 8013d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d6a:	4a2d      	ldr	r2, [pc, #180]	; (8013e20 <BSP_COM_Init+0xcc>)
 8013d6c:	f043 0301 	orr.w	r3, r3, #1
 8013d70:	6313      	str	r3, [r2, #48]	; 0x30
 8013d72:	4b2b      	ldr	r3, [pc, #172]	; (8013e20 <BSP_COM_Init+0xcc>)
 8013d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d76:	f003 0301 	and.w	r3, r3, #1
 8013d7a:	613b      	str	r3, [r7, #16]
 8013d7c:	693b      	ldr	r3, [r7, #16]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8013d7e:	79fb      	ldrb	r3, [r7, #7]
 8013d80:	2b00      	cmp	r3, #0
 8013d82:	d10b      	bne.n	8013d9c <BSP_COM_Init+0x48>
 8013d84:	4b26      	ldr	r3, [pc, #152]	; (8013e20 <BSP_COM_Init+0xcc>)
 8013d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d88:	4a25      	ldr	r2, [pc, #148]	; (8013e20 <BSP_COM_Init+0xcc>)
 8013d8a:	f043 0302 	orr.w	r3, r3, #2
 8013d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8013d90:	4b23      	ldr	r3, [pc, #140]	; (8013e20 <BSP_COM_Init+0xcc>)
 8013d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013d94:	f003 0302 	and.w	r3, r3, #2
 8013d98:	60fb      	str	r3, [r7, #12]
 8013d9a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8013d9c:	79fb      	ldrb	r3, [r7, #7]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d10b      	bne.n	8013dba <BSP_COM_Init+0x66>
 8013da2:	4b1f      	ldr	r3, [pc, #124]	; (8013e20 <BSP_COM_Init+0xcc>)
 8013da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013da6:	4a1e      	ldr	r2, [pc, #120]	; (8013e20 <BSP_COM_Init+0xcc>)
 8013da8:	f043 0310 	orr.w	r3, r3, #16
 8013dac:	6453      	str	r3, [r2, #68]	; 0x44
 8013dae:	4b1c      	ldr	r3, [pc, #112]	; (8013e20 <BSP_COM_Init+0xcc>)
 8013db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013db2:	f003 0310 	and.w	r3, r3, #16
 8013db6:	60bb      	str	r3, [r7, #8]
 8013db8:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM_TX_PIN[COM];
 8013dba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013dbe:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8013dc0:	2302      	movs	r3, #2
 8013dc2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8013dc4:	2302      	movs	r3, #2
 8013dc6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8013dc8:	2301      	movs	r3, #1
 8013dca:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8013dcc:	2307      	movs	r3, #7
 8013dce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8013dd0:	79fb      	ldrb	r3, [r7, #7]
 8013dd2:	4a14      	ldr	r2, [pc, #80]	; (8013e24 <BSP_COM_Init+0xd0>)
 8013dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013dd8:	f107 0214 	add.w	r2, r7, #20
 8013ddc:	4611      	mov	r1, r2
 8013dde:	4618      	mov	r0, r3
 8013de0:	f7ee fcb6 	bl	8002750 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8013de4:	2380      	movs	r3, #128	; 0x80
 8013de6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8013de8:	2302      	movs	r3, #2
 8013dea:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8013dec:	2307      	movs	r3, #7
 8013dee:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8013df0:	79fb      	ldrb	r3, [r7, #7]
 8013df2:	4a0d      	ldr	r2, [pc, #52]	; (8013e28 <BSP_COM_Init+0xd4>)
 8013df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013df8:	f107 0214 	add.w	r2, r7, #20
 8013dfc:	4611      	mov	r1, r2
 8013dfe:	4618      	mov	r0, r3
 8013e00:	f7ee fca6 	bl	8002750 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 8013e04:	79fb      	ldrb	r3, [r7, #7]
 8013e06:	4a09      	ldr	r2, [pc, #36]	; (8013e2c <BSP_COM_Init+0xd8>)
 8013e08:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8013e0c:	683b      	ldr	r3, [r7, #0]
 8013e0e:	601a      	str	r2, [r3, #0]
  HAL_UART_Init(huart);
 8013e10:	6838      	ldr	r0, [r7, #0]
 8013e12:	f7f6 f871 	bl	8009ef8 <HAL_UART_Init>
}
 8013e16:	bf00      	nop
 8013e18:	3728      	adds	r7, #40	; 0x28
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	bd80      	pop	{r7, pc}
 8013e1e:	bf00      	nop
 8013e20:	40023800 	.word	0x40023800
 8013e24:	20000058 	.word	0x20000058
 8013e28:	2000005c 	.word	0x2000005c
 8013e2c:	20000054 	.word	0x20000054

08013e30 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8013e30:	b580      	push	{r7, lr}
 8013e32:	b08c      	sub	sp, #48	; 0x30
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	4a51      	ldr	r2, [pc, #324]	; (8013f80 <I2Cx_MspInit+0x150>)
 8013e3c:	4293      	cmp	r3, r2
 8013e3e:	d14d      	bne.n	8013edc <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8013e40:	4b50      	ldr	r3, [pc, #320]	; (8013f84 <I2Cx_MspInit+0x154>)
 8013e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e44:	4a4f      	ldr	r2, [pc, #316]	; (8013f84 <I2Cx_MspInit+0x154>)
 8013e46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013e4a:	6313      	str	r3, [r2, #48]	; 0x30
 8013e4c:	4b4d      	ldr	r3, [pc, #308]	; (8013f84 <I2Cx_MspInit+0x154>)
 8013e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013e54:	61bb      	str	r3, [r7, #24]
 8013e56:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8013e58:	2380      	movs	r3, #128	; 0x80
 8013e5a:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8013e5c:	2312      	movs	r3, #18
 8013e5e:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8013e60:	2300      	movs	r3, #0
 8013e62:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8013e64:	2302      	movs	r3, #2
 8013e66:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8013e68:	2304      	movs	r3, #4
 8013e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8013e6c:	f107 031c 	add.w	r3, r7, #28
 8013e70:	4619      	mov	r1, r3
 8013e72:	4845      	ldr	r0, [pc, #276]	; (8013f88 <I2Cx_MspInit+0x158>)
 8013e74:	f7ee fc6c 	bl	8002750 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8013e78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013e7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8013e7e:	f107 031c 	add.w	r3, r7, #28
 8013e82:	4619      	mov	r1, r3
 8013e84:	4840      	ldr	r0, [pc, #256]	; (8013f88 <I2Cx_MspInit+0x158>)
 8013e86:	f7ee fc63 	bl	8002750 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8013e8a:	4b3e      	ldr	r3, [pc, #248]	; (8013f84 <I2Cx_MspInit+0x154>)
 8013e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e8e:	4a3d      	ldr	r2, [pc, #244]	; (8013f84 <I2Cx_MspInit+0x154>)
 8013e90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013e94:	6413      	str	r3, [r2, #64]	; 0x40
 8013e96:	4b3b      	ldr	r3, [pc, #236]	; (8013f84 <I2Cx_MspInit+0x154>)
 8013e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013e9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8013e9e:	617b      	str	r3, [r7, #20]
 8013ea0:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8013ea2:	4b38      	ldr	r3, [pc, #224]	; (8013f84 <I2Cx_MspInit+0x154>)
 8013ea4:	6a1b      	ldr	r3, [r3, #32]
 8013ea6:	4a37      	ldr	r2, [pc, #220]	; (8013f84 <I2Cx_MspInit+0x154>)
 8013ea8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8013eac:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8013eae:	4b35      	ldr	r3, [pc, #212]	; (8013f84 <I2Cx_MspInit+0x154>)
 8013eb0:	6a1b      	ldr	r3, [r3, #32]
 8013eb2:	4a34      	ldr	r2, [pc, #208]	; (8013f84 <I2Cx_MspInit+0x154>)
 8013eb4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8013eb8:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8013eba:	2200      	movs	r2, #0
 8013ebc:	210f      	movs	r1, #15
 8013ebe:	2048      	movs	r0, #72	; 0x48
 8013ec0:	f7ed f9b4 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8013ec4:	2048      	movs	r0, #72	; 0x48
 8013ec6:	f7ed f9cd 	bl	8001264 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8013eca:	2200      	movs	r2, #0
 8013ecc:	210f      	movs	r1, #15
 8013ece:	2049      	movs	r0, #73	; 0x49
 8013ed0:	f7ed f9ac 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8013ed4:	2049      	movs	r0, #73	; 0x49
 8013ed6:	f7ed f9c5 	bl	8001264 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8013eda:	e04d      	b.n	8013f78 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8013edc:	4b29      	ldr	r3, [pc, #164]	; (8013f84 <I2Cx_MspInit+0x154>)
 8013ede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ee0:	4a28      	ldr	r2, [pc, #160]	; (8013f84 <I2Cx_MspInit+0x154>)
 8013ee2:	f043 0302 	orr.w	r3, r3, #2
 8013ee6:	6313      	str	r3, [r2, #48]	; 0x30
 8013ee8:	4b26      	ldr	r3, [pc, #152]	; (8013f84 <I2Cx_MspInit+0x154>)
 8013eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013eec:	f003 0302 	and.w	r3, r3, #2
 8013ef0:	613b      	str	r3, [r7, #16]
 8013ef2:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8013ef4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8013ef8:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8013efa:	2312      	movs	r3, #18
 8013efc:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8013efe:	2300      	movs	r3, #0
 8013f00:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8013f02:	2302      	movs	r3, #2
 8013f04:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8013f06:	2304      	movs	r3, #4
 8013f08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8013f0a:	f107 031c 	add.w	r3, r7, #28
 8013f0e:	4619      	mov	r1, r3
 8013f10:	481e      	ldr	r0, [pc, #120]	; (8013f8c <I2Cx_MspInit+0x15c>)
 8013f12:	f7ee fc1d 	bl	8002750 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8013f16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013f1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8013f1c:	f107 031c 	add.w	r3, r7, #28
 8013f20:	4619      	mov	r1, r3
 8013f22:	481a      	ldr	r0, [pc, #104]	; (8013f8c <I2Cx_MspInit+0x15c>)
 8013f24:	f7ee fc14 	bl	8002750 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8013f28:	4b16      	ldr	r3, [pc, #88]	; (8013f84 <I2Cx_MspInit+0x154>)
 8013f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f2c:	4a15      	ldr	r2, [pc, #84]	; (8013f84 <I2Cx_MspInit+0x154>)
 8013f2e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013f32:	6413      	str	r3, [r2, #64]	; 0x40
 8013f34:	4b13      	ldr	r3, [pc, #76]	; (8013f84 <I2Cx_MspInit+0x154>)
 8013f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013f38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013f3c:	60fb      	str	r3, [r7, #12]
 8013f3e:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8013f40:	4b10      	ldr	r3, [pc, #64]	; (8013f84 <I2Cx_MspInit+0x154>)
 8013f42:	6a1b      	ldr	r3, [r3, #32]
 8013f44:	4a0f      	ldr	r2, [pc, #60]	; (8013f84 <I2Cx_MspInit+0x154>)
 8013f46:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8013f4a:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8013f4c:	4b0d      	ldr	r3, [pc, #52]	; (8013f84 <I2Cx_MspInit+0x154>)
 8013f4e:	6a1b      	ldr	r3, [r3, #32]
 8013f50:	4a0c      	ldr	r2, [pc, #48]	; (8013f84 <I2Cx_MspInit+0x154>)
 8013f52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013f56:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8013f58:	2200      	movs	r2, #0
 8013f5a:	210f      	movs	r1, #15
 8013f5c:	201f      	movs	r0, #31
 8013f5e:	f7ed f965 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8013f62:	201f      	movs	r0, #31
 8013f64:	f7ed f97e 	bl	8001264 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8013f68:	2200      	movs	r2, #0
 8013f6a:	210f      	movs	r1, #15
 8013f6c:	2020      	movs	r0, #32
 8013f6e:	f7ed f95d 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8013f72:	2020      	movs	r0, #32
 8013f74:	f7ed f976 	bl	8001264 <HAL_NVIC_EnableIRQ>
}
 8013f78:	bf00      	nop
 8013f7a:	3730      	adds	r7, #48	; 0x30
 8013f7c:	46bd      	mov	sp, r7
 8013f7e:	bd80      	pop	{r7, pc}
 8013f80:	20008294 	.word	0x20008294
 8013f84:	40023800 	.word	0x40023800
 8013f88:	40021c00 	.word	0x40021c00
 8013f8c:	40020400 	.word	0x40020400

08013f90 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8013f90:	b580      	push	{r7, lr}
 8013f92:	b082      	sub	sp, #8
 8013f94:	af00      	add	r7, sp, #0
 8013f96:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8013f98:	6878      	ldr	r0, [r7, #4]
 8013f9a:	f7f0 fe07 	bl	8004bac <HAL_I2C_GetState>
 8013f9e:	4603      	mov	r3, r0
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d125      	bne.n	8013ff0 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	4a14      	ldr	r2, [pc, #80]	; (8013ff8 <I2Cx_Init+0x68>)
 8013fa8:	4293      	cmp	r3, r2
 8013faa:	d103      	bne.n	8013fb4 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8013fac:	687b      	ldr	r3, [r7, #4]
 8013fae:	4a13      	ldr	r2, [pc, #76]	; (8013ffc <I2Cx_Init+0x6c>)
 8013fb0:	601a      	str	r2, [r3, #0]
 8013fb2:	e002      	b.n	8013fba <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8013fb4:	687b      	ldr	r3, [r7, #4]
 8013fb6:	4a12      	ldr	r2, [pc, #72]	; (8014000 <I2Cx_Init+0x70>)
 8013fb8:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	4a11      	ldr	r2, [pc, #68]	; (8014004 <I2Cx_Init+0x74>)
 8013fbe:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8013fc0:	687b      	ldr	r3, [r7, #4]
 8013fc2:	2200      	movs	r2, #0
 8013fc4:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	2201      	movs	r2, #1
 8013fca:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	2200      	movs	r2, #0
 8013fd0:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	2200      	movs	r2, #0
 8013fd6:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	2200      	movs	r2, #0
 8013fdc:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8013fde:	687b      	ldr	r3, [r7, #4]
 8013fe0:	2200      	movs	r2, #0
 8013fe2:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8013fe4:	6878      	ldr	r0, [r7, #4]
 8013fe6:	f7ff ff23 	bl	8013e30 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8013fea:	6878      	ldr	r0, [r7, #4]
 8013fec:	f7f0 faf0 	bl	80045d0 <HAL_I2C_Init>
  }
}
 8013ff0:	bf00      	nop
 8013ff2:	3708      	adds	r7, #8
 8013ff4:	46bd      	mov	sp, r7
 8013ff6:	bd80      	pop	{r7, pc}
 8013ff8:	20008294 	.word	0x20008294
 8013ffc:	40005c00 	.word	0x40005c00
 8014000:	40005400 	.word	0x40005400
 8014004:	40912732 	.word	0x40912732

08014008 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8014008:	b580      	push	{r7, lr}
 801400a:	b08a      	sub	sp, #40	; 0x28
 801400c:	af04      	add	r7, sp, #16
 801400e:	60f8      	str	r0, [r7, #12]
 8014010:	4608      	mov	r0, r1
 8014012:	4611      	mov	r1, r2
 8014014:	461a      	mov	r2, r3
 8014016:	4603      	mov	r3, r0
 8014018:	72fb      	strb	r3, [r7, #11]
 801401a:	460b      	mov	r3, r1
 801401c:	813b      	strh	r3, [r7, #8]
 801401e:	4613      	mov	r3, r2
 8014020:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8014022:	2300      	movs	r3, #0
 8014024:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8014026:	7afb      	ldrb	r3, [r7, #11]
 8014028:	b299      	uxth	r1, r3
 801402a:	88f8      	ldrh	r0, [r7, #6]
 801402c:	893a      	ldrh	r2, [r7, #8]
 801402e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014032:	9302      	str	r3, [sp, #8]
 8014034:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014036:	9301      	str	r3, [sp, #4]
 8014038:	6a3b      	ldr	r3, [r7, #32]
 801403a:	9300      	str	r3, [sp, #0]
 801403c:	4603      	mov	r3, r0
 801403e:	68f8      	ldr	r0, [r7, #12]
 8014040:	f7f0 fc9a 	bl	8004978 <HAL_I2C_Mem_Read>
 8014044:	4603      	mov	r3, r0
 8014046:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8014048:	7dfb      	ldrb	r3, [r7, #23]
 801404a:	2b00      	cmp	r3, #0
 801404c:	d004      	beq.n	8014058 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 801404e:	7afb      	ldrb	r3, [r7, #11]
 8014050:	4619      	mov	r1, r3
 8014052:	68f8      	ldr	r0, [r7, #12]
 8014054:	f000 f832 	bl	80140bc <I2Cx_Error>
  }
  return status;    
 8014058:	7dfb      	ldrb	r3, [r7, #23]
}
 801405a:	4618      	mov	r0, r3
 801405c:	3718      	adds	r7, #24
 801405e:	46bd      	mov	sp, r7
 8014060:	bd80      	pop	{r7, pc}

08014062 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8014062:	b580      	push	{r7, lr}
 8014064:	b08a      	sub	sp, #40	; 0x28
 8014066:	af04      	add	r7, sp, #16
 8014068:	60f8      	str	r0, [r7, #12]
 801406a:	4608      	mov	r0, r1
 801406c:	4611      	mov	r1, r2
 801406e:	461a      	mov	r2, r3
 8014070:	4603      	mov	r3, r0
 8014072:	72fb      	strb	r3, [r7, #11]
 8014074:	460b      	mov	r3, r1
 8014076:	813b      	strh	r3, [r7, #8]
 8014078:	4613      	mov	r3, r2
 801407a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 801407c:	2300      	movs	r3, #0
 801407e:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8014080:	7afb      	ldrb	r3, [r7, #11]
 8014082:	b299      	uxth	r1, r3
 8014084:	88f8      	ldrh	r0, [r7, #6]
 8014086:	893a      	ldrh	r2, [r7, #8]
 8014088:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 801408c:	9302      	str	r3, [sp, #8]
 801408e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014090:	9301      	str	r3, [sp, #4]
 8014092:	6a3b      	ldr	r3, [r7, #32]
 8014094:	9300      	str	r3, [sp, #0]
 8014096:	4603      	mov	r3, r0
 8014098:	68f8      	ldr	r0, [r7, #12]
 801409a:	f7f0 fb59 	bl	8004750 <HAL_I2C_Mem_Write>
 801409e:	4603      	mov	r3, r0
 80140a0:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80140a2:	7dfb      	ldrb	r3, [r7, #23]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d004      	beq.n	80140b2 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80140a8:	7afb      	ldrb	r3, [r7, #11]
 80140aa:	4619      	mov	r1, r3
 80140ac:	68f8      	ldr	r0, [r7, #12]
 80140ae:	f000 f805 	bl	80140bc <I2Cx_Error>
  }
  return status;
 80140b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80140b4:	4618      	mov	r0, r3
 80140b6:	3718      	adds	r7, #24
 80140b8:	46bd      	mov	sp, r7
 80140ba:	bd80      	pop	{r7, pc}

080140bc <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80140bc:	b580      	push	{r7, lr}
 80140be:	b082      	sub	sp, #8
 80140c0:	af00      	add	r7, sp, #0
 80140c2:	6078      	str	r0, [r7, #4]
 80140c4:	460b      	mov	r3, r1
 80140c6:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80140c8:	6878      	ldr	r0, [r7, #4]
 80140ca:	f7f0 fb11 	bl	80046f0 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80140ce:	6878      	ldr	r0, [r7, #4]
 80140d0:	f7ff ff5e 	bl	8013f90 <I2Cx_Init>
}
 80140d4:	bf00      	nop
 80140d6:	3708      	adds	r7, #8
 80140d8:	46bd      	mov	sp, r7
 80140da:	bd80      	pop	{r7, pc}

080140dc <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80140e0:	4802      	ldr	r0, [pc, #8]	; (80140ec <TS_IO_Init+0x10>)
 80140e2:	f7ff ff55 	bl	8013f90 <I2Cx_Init>
}
 80140e6:	bf00      	nop
 80140e8:	bd80      	pop	{r7, pc}
 80140ea:	bf00      	nop
 80140ec:	20008294 	.word	0x20008294

080140f0 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80140f0:	b580      	push	{r7, lr}
 80140f2:	b084      	sub	sp, #16
 80140f4:	af02      	add	r7, sp, #8
 80140f6:	4603      	mov	r3, r0
 80140f8:	71fb      	strb	r3, [r7, #7]
 80140fa:	460b      	mov	r3, r1
 80140fc:	71bb      	strb	r3, [r7, #6]
 80140fe:	4613      	mov	r3, r2
 8014100:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8014102:	79bb      	ldrb	r3, [r7, #6]
 8014104:	b29a      	uxth	r2, r3
 8014106:	79f9      	ldrb	r1, [r7, #7]
 8014108:	2301      	movs	r3, #1
 801410a:	9301      	str	r3, [sp, #4]
 801410c:	1d7b      	adds	r3, r7, #5
 801410e:	9300      	str	r3, [sp, #0]
 8014110:	2301      	movs	r3, #1
 8014112:	4803      	ldr	r0, [pc, #12]	; (8014120 <TS_IO_Write+0x30>)
 8014114:	f7ff ffa5 	bl	8014062 <I2Cx_WriteMultiple>
}
 8014118:	bf00      	nop
 801411a:	3708      	adds	r7, #8
 801411c:	46bd      	mov	sp, r7
 801411e:	bd80      	pop	{r7, pc}
 8014120:	20008294 	.word	0x20008294

08014124 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8014124:	b580      	push	{r7, lr}
 8014126:	b086      	sub	sp, #24
 8014128:	af02      	add	r7, sp, #8
 801412a:	4603      	mov	r3, r0
 801412c:	460a      	mov	r2, r1
 801412e:	71fb      	strb	r3, [r7, #7]
 8014130:	4613      	mov	r3, r2
 8014132:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8014134:	2300      	movs	r3, #0
 8014136:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8014138:	79bb      	ldrb	r3, [r7, #6]
 801413a:	b29a      	uxth	r2, r3
 801413c:	79f9      	ldrb	r1, [r7, #7]
 801413e:	2301      	movs	r3, #1
 8014140:	9301      	str	r3, [sp, #4]
 8014142:	f107 030f 	add.w	r3, r7, #15
 8014146:	9300      	str	r3, [sp, #0]
 8014148:	2301      	movs	r3, #1
 801414a:	4804      	ldr	r0, [pc, #16]	; (801415c <TS_IO_Read+0x38>)
 801414c:	f7ff ff5c 	bl	8014008 <I2Cx_ReadMultiple>

  return read_value;
 8014150:	7bfb      	ldrb	r3, [r7, #15]
}
 8014152:	4618      	mov	r0, r3
 8014154:	3710      	adds	r7, #16
 8014156:	46bd      	mov	sp, r7
 8014158:	bd80      	pop	{r7, pc}
 801415a:	bf00      	nop
 801415c:	20008294 	.word	0x20008294

08014160 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8014160:	b580      	push	{r7, lr}
 8014162:	b082      	sub	sp, #8
 8014164:	af00      	add	r7, sp, #0
 8014166:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8014168:	6878      	ldr	r0, [r7, #4]
 801416a:	f7ec fcf1 	bl	8000b50 <HAL_Delay>
}
 801416e:	bf00      	nop
 8014170:	3708      	adds	r7, #8
 8014172:	46bd      	mov	sp, r7
 8014174:	bd80      	pop	{r7, pc}
	...

08014178 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8014178:	b580      	push	{r7, lr}
 801417a:	b084      	sub	sp, #16
 801417c:	af00      	add	r7, sp, #0
 801417e:	4603      	mov	r3, r0
 8014180:	460a      	mov	r2, r1
 8014182:	80fb      	strh	r3, [r7, #6]
 8014184:	4613      	mov	r3, r2
 8014186:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8014188:	2300      	movs	r3, #0
 801418a:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 801418c:	4a14      	ldr	r2, [pc, #80]	; (80141e0 <BSP_TS_Init+0x68>)
 801418e:	88fb      	ldrh	r3, [r7, #6]
 8014190:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8014192:	4a14      	ldr	r2, [pc, #80]	; (80141e4 <BSP_TS_Init+0x6c>)
 8014194:	88bb      	ldrh	r3, [r7, #4]
 8014196:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8014198:	4b13      	ldr	r3, [pc, #76]	; (80141e8 <BSP_TS_Init+0x70>)
 801419a:	681b      	ldr	r3, [r3, #0]
 801419c:	2070      	movs	r0, #112	; 0x70
 801419e:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80141a0:	4b11      	ldr	r3, [pc, #68]	; (80141e8 <BSP_TS_Init+0x70>)
 80141a2:	685b      	ldr	r3, [r3, #4]
 80141a4:	2070      	movs	r0, #112	; 0x70
 80141a6:	4798      	blx	r3
 80141a8:	4603      	mov	r3, r0
 80141aa:	2b51      	cmp	r3, #81	; 0x51
 80141ac:	d111      	bne.n	80141d2 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80141ae:	4b0f      	ldr	r3, [pc, #60]	; (80141ec <BSP_TS_Init+0x74>)
 80141b0:	4a0d      	ldr	r2, [pc, #52]	; (80141e8 <BSP_TS_Init+0x70>)
 80141b2:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80141b4:	4b0e      	ldr	r3, [pc, #56]	; (80141f0 <BSP_TS_Init+0x78>)
 80141b6:	2270      	movs	r2, #112	; 0x70
 80141b8:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 80141ba:	4b0e      	ldr	r3, [pc, #56]	; (80141f4 <BSP_TS_Init+0x7c>)
 80141bc:	2208      	movs	r2, #8
 80141be:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80141c0:	4b0a      	ldr	r3, [pc, #40]	; (80141ec <BSP_TS_Init+0x74>)
 80141c2:	681b      	ldr	r3, [r3, #0]
 80141c4:	68db      	ldr	r3, [r3, #12]
 80141c6:	4a0a      	ldr	r2, [pc, #40]	; (80141f0 <BSP_TS_Init+0x78>)
 80141c8:	7812      	ldrb	r2, [r2, #0]
 80141ca:	b292      	uxth	r2, r2
 80141cc:	4610      	mov	r0, r2
 80141ce:	4798      	blx	r3
 80141d0:	e001      	b.n	80141d6 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80141d2:	2303      	movs	r3, #3
 80141d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80141d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80141d8:	4618      	mov	r0, r3
 80141da:	3710      	adds	r7, #16
 80141dc:	46bd      	mov	sp, r7
 80141de:	bd80      	pop	{r7, pc}
 80141e0:	200082e4 	.word	0x200082e4
 80141e4:	200082e6 	.word	0x200082e6
 80141e8:	20000000 	.word	0x20000000
 80141ec:	200082e0 	.word	0x200082e0
 80141f0:	200082e9 	.word	0x200082e9
 80141f4:	200082e8 	.word	0x200082e8

080141f8 <BSP_TS_GetState>:
  * @brief  Returns status and positions of the touch screen.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_GetState(TS_StateTypeDef *TS_State)
{
 80141f8:	b590      	push	{r4, r7, lr}
 80141fa:	b097      	sub	sp, #92	; 0x5c
 80141fc:	af02      	add	r7, sp, #8
 80141fe:	6078      	str	r0, [r7, #4]
  static uint32_t _x[TS_MAX_NB_TOUCH] = {0, 0};
  static uint32_t _y[TS_MAX_NB_TOUCH] = {0, 0};
  uint8_t ts_status = TS_OK;
 8014200:	2300      	movs	r3, #0
 8014202:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  uint16_t brute_y[TS_MAX_NB_TOUCH];
  uint16_t x_diff;
  uint16_t y_diff;
  uint32_t index;
#if (TS_MULTI_TOUCH_SUPPORTED == 1)
  uint32_t weight = 0;
 8014206:	2300      	movs	r3, #0
 8014208:	613b      	str	r3, [r7, #16]
  uint32_t area = 0;
 801420a:	2300      	movs	r3, #0
 801420c:	60fb      	str	r3, [r7, #12]
  uint32_t event = 0;
 801420e:	2300      	movs	r3, #0
 8014210:	60bb      	str	r3, [r7, #8]
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  /* Check and update the number of touches active detected */
  TS_State->touchDetected = tsDriver->DetectTouch(I2cAddress);
 8014212:	4b97      	ldr	r3, [pc, #604]	; (8014470 <BSP_TS_GetState+0x278>)
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	691b      	ldr	r3, [r3, #16]
 8014218:	4a96      	ldr	r2, [pc, #600]	; (8014474 <BSP_TS_GetState+0x27c>)
 801421a:	7812      	ldrb	r2, [r2, #0]
 801421c:	b292      	uxth	r2, r2
 801421e:	4610      	mov	r0, r2
 8014220:	4798      	blx	r3
 8014222:	4603      	mov	r3, r0
 8014224:	461a      	mov	r2, r3
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	701a      	strb	r2, [r3, #0]
  
  if(TS_State->touchDetected)
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	781b      	ldrb	r3, [r3, #0]
 801422e:	2b00      	cmp	r3, #0
 8014230:	f000 81a8 	beq.w	8014584 <BSP_TS_GetState+0x38c>
  {
    for(index=0; index < TS_State->touchDetected; index++)
 8014234:	2300      	movs	r3, #0
 8014236:	64bb      	str	r3, [r7, #72]	; 0x48
 8014238:	e197      	b.n	801456a <BSP_TS_GetState+0x372>
    {
      /* Get each touch coordinates */
      tsDriver->GetXY(I2cAddress, &(brute_x[index]), &(brute_y[index]));
 801423a:	4b8d      	ldr	r3, [pc, #564]	; (8014470 <BSP_TS_GetState+0x278>)
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	695b      	ldr	r3, [r3, #20]
 8014240:	4a8c      	ldr	r2, [pc, #560]	; (8014474 <BSP_TS_GetState+0x27c>)
 8014242:	7812      	ldrb	r2, [r2, #0]
 8014244:	b290      	uxth	r0, r2
 8014246:	f107 0120 	add.w	r1, r7, #32
 801424a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801424c:	0052      	lsls	r2, r2, #1
 801424e:	188c      	adds	r4, r1, r2
 8014250:	f107 0114 	add.w	r1, r7, #20
 8014254:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014256:	0052      	lsls	r2, r2, #1
 8014258:	440a      	add	r2, r1
 801425a:	4621      	mov	r1, r4
 801425c:	4798      	blx	r3

      if(tsOrientation == TS_SWAP_NONE)
 801425e:	4b86      	ldr	r3, [pc, #536]	; (8014478 <BSP_TS_GetState+0x280>)
 8014260:	781b      	ldrb	r3, [r3, #0]
 8014262:	2b01      	cmp	r3, #1
 8014264:	d11b      	bne.n	801429e <BSP_TS_GetState+0xa6>
      {
        x[index] = brute_x[index];
 8014266:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014268:	005b      	lsls	r3, r3, #1
 801426a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801426e:	4413      	add	r3, r2
 8014270:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8014274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014276:	005b      	lsls	r3, r3, #1
 8014278:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801427c:	440b      	add	r3, r1
 801427e:	f823 2c18 	strh.w	r2, [r3, #-24]
        y[index] = brute_y[index];
 8014282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014284:	005b      	lsls	r3, r3, #1
 8014286:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801428a:	4413      	add	r3, r2
 801428c:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8014290:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014292:	005b      	lsls	r3, r3, #1
 8014294:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8014298:	440b      	add	r3, r1
 801429a:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_X)
 801429e:	4b76      	ldr	r3, [pc, #472]	; (8014478 <BSP_TS_GetState+0x280>)
 80142a0:	781b      	ldrb	r3, [r3, #0]
 80142a2:	f003 0302 	and.w	r3, r3, #2
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d010      	beq.n	80142cc <BSP_TS_GetState+0xd4>
      {
        x[index] = 4096 - brute_x[index];
 80142aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142ac:	005b      	lsls	r3, r3, #1
 80142ae:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80142b2:	4413      	add	r3, r2
 80142b4:	f833 3c30 	ldrh.w	r3, [r3, #-48]
 80142b8:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80142bc:	b29a      	uxth	r2, r3
 80142be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142c0:	005b      	lsls	r3, r3, #1
 80142c2:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80142c6:	440b      	add	r3, r1
 80142c8:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      if(tsOrientation & TS_SWAP_Y)
 80142cc:	4b6a      	ldr	r3, [pc, #424]	; (8014478 <BSP_TS_GetState+0x280>)
 80142ce:	781b      	ldrb	r3, [r3, #0]
 80142d0:	f003 0304 	and.w	r3, r3, #4
 80142d4:	2b00      	cmp	r3, #0
 80142d6:	d010      	beq.n	80142fa <BSP_TS_GetState+0x102>
      {
        y[index] = 4096 - brute_y[index];
 80142d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142da:	005b      	lsls	r3, r3, #1
 80142dc:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80142e0:	4413      	add	r3, r2
 80142e2:	f833 3c3c 	ldrh.w	r3, [r3, #-60]
 80142e6:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80142ea:	b29a      	uxth	r2, r3
 80142ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142ee:	005b      	lsls	r3, r3, #1
 80142f0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80142f4:	440b      	add	r3, r1
 80142f6:	f823 2c24 	strh.w	r2, [r3, #-36]
      }

      if(tsOrientation & TS_SWAP_XY)
 80142fa:	4b5f      	ldr	r3, [pc, #380]	; (8014478 <BSP_TS_GetState+0x280>)
 80142fc:	781b      	ldrb	r3, [r3, #0]
 80142fe:	f003 0308 	and.w	r3, r3, #8
 8014302:	2b00      	cmp	r3, #0
 8014304:	d01b      	beq.n	801433e <BSP_TS_GetState+0x146>
      {
        y[index] = brute_x[index];
 8014306:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014308:	005b      	lsls	r3, r3, #1
 801430a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801430e:	4413      	add	r3, r2
 8014310:	f833 2c30 	ldrh.w	r2, [r3, #-48]
 8014314:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014316:	005b      	lsls	r3, r3, #1
 8014318:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801431c:	440b      	add	r3, r1
 801431e:	f823 2c24 	strh.w	r2, [r3, #-36]
        x[index] = brute_y[index];
 8014322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014324:	005b      	lsls	r3, r3, #1
 8014326:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801432a:	4413      	add	r3, r2
 801432c:	f833 2c3c 	ldrh.w	r2, [r3, #-60]
 8014330:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014332:	005b      	lsls	r3, r3, #1
 8014334:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8014338:	440b      	add	r3, r1
 801433a:	f823 2c18 	strh.w	r2, [r3, #-24]
      }

      x_diff = x[index] > _x[index]? (x[index] - _x[index]): (_x[index] - x[index]);
 801433e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014340:	005b      	lsls	r3, r3, #1
 8014342:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8014346:	4413      	add	r3, r2
 8014348:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 801434c:	4619      	mov	r1, r3
 801434e:	4a4b      	ldr	r2, [pc, #300]	; (801447c <BSP_TS_GetState+0x284>)
 8014350:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014352:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014356:	4299      	cmp	r1, r3
 8014358:	d90e      	bls.n	8014378 <BSP_TS_GetState+0x180>
 801435a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801435c:	005b      	lsls	r3, r3, #1
 801435e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8014362:	4413      	add	r3, r2
 8014364:	f833 2c18 	ldrh.w	r2, [r3, #-24]
 8014368:	4944      	ldr	r1, [pc, #272]	; (801447c <BSP_TS_GetState+0x284>)
 801436a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801436c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8014370:	b29b      	uxth	r3, r3
 8014372:	1ad3      	subs	r3, r2, r3
 8014374:	b29b      	uxth	r3, r3
 8014376:	e00d      	b.n	8014394 <BSP_TS_GetState+0x19c>
 8014378:	4a40      	ldr	r2, [pc, #256]	; (801447c <BSP_TS_GetState+0x284>)
 801437a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801437c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014380:	b29a      	uxth	r2, r3
 8014382:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014384:	005b      	lsls	r3, r3, #1
 8014386:	f107 0150 	add.w	r1, r7, #80	; 0x50
 801438a:	440b      	add	r3, r1
 801438c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8014390:	1ad3      	subs	r3, r2, r3
 8014392:	b29b      	uxth	r3, r3
 8014394:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      y_diff = y[index] > _y[index]? (y[index] - _y[index]): (_y[index] - y[index]);
 8014398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801439a:	005b      	lsls	r3, r3, #1
 801439c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80143a0:	4413      	add	r3, r2
 80143a2:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80143a6:	4619      	mov	r1, r3
 80143a8:	4a35      	ldr	r2, [pc, #212]	; (8014480 <BSP_TS_GetState+0x288>)
 80143aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80143ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80143b0:	4299      	cmp	r1, r3
 80143b2:	d90e      	bls.n	80143d2 <BSP_TS_GetState+0x1da>
 80143b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80143b6:	005b      	lsls	r3, r3, #1
 80143b8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80143bc:	4413      	add	r3, r2
 80143be:	f833 2c24 	ldrh.w	r2, [r3, #-36]
 80143c2:	492f      	ldr	r1, [pc, #188]	; (8014480 <BSP_TS_GetState+0x288>)
 80143c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80143c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80143ca:	b29b      	uxth	r3, r3
 80143cc:	1ad3      	subs	r3, r2, r3
 80143ce:	b29b      	uxth	r3, r3
 80143d0:	e00d      	b.n	80143ee <BSP_TS_GetState+0x1f6>
 80143d2:	4a2b      	ldr	r2, [pc, #172]	; (8014480 <BSP_TS_GetState+0x288>)
 80143d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80143d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80143da:	b29a      	uxth	r2, r3
 80143dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80143de:	005b      	lsls	r3, r3, #1
 80143e0:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80143e4:	440b      	add	r3, r1
 80143e6:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 80143ea:	1ad3      	subs	r3, r2, r3
 80143ec:	b29b      	uxth	r3, r3
 80143ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

      if ((x_diff + y_diff) > 5)
 80143f2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80143f6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80143fa:	4413      	add	r3, r2
 80143fc:	2b05      	cmp	r3, #5
 80143fe:	dd17      	ble.n	8014430 <BSP_TS_GetState+0x238>
      {
        _x[index] = x[index];
 8014400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014402:	005b      	lsls	r3, r3, #1
 8014404:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8014408:	4413      	add	r3, r2
 801440a:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 801440e:	4619      	mov	r1, r3
 8014410:	4a1a      	ldr	r2, [pc, #104]	; (801447c <BSP_TS_GetState+0x284>)
 8014412:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014414:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        _y[index] = y[index];
 8014418:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801441a:	005b      	lsls	r3, r3, #1
 801441c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8014420:	4413      	add	r3, r2
 8014422:	f833 3c24 	ldrh.w	r3, [r3, #-36]
 8014426:	4619      	mov	r1, r3
 8014428:	4a15      	ldr	r2, [pc, #84]	; (8014480 <BSP_TS_GetState+0x288>)
 801442a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801442c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }

      if(I2cAddress == FT5336_I2C_SLAVE_ADDRESS)
 8014430:	4b10      	ldr	r3, [pc, #64]	; (8014474 <BSP_TS_GetState+0x27c>)
 8014432:	781b      	ldrb	r3, [r3, #0]
 8014434:	2b70      	cmp	r3, #112	; 0x70
 8014436:	d125      	bne.n	8014484 <BSP_TS_GetState+0x28c>
      {
        TS_State->touchX[index] = x[index];
 8014438:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801443a:	005b      	lsls	r3, r3, #1
 801443c:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8014440:	4413      	add	r3, r2
 8014442:	f833 1c18 	ldrh.w	r1, [r3, #-24]
 8014446:	687a      	ldr	r2, [r7, #4]
 8014448:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801444a:	005b      	lsls	r3, r3, #1
 801444c:	4413      	add	r3, r2
 801444e:	460a      	mov	r2, r1
 8014450:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = y[index];
 8014452:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014454:	005b      	lsls	r3, r3, #1
 8014456:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801445a:	4413      	add	r3, r2
 801445c:	f833 1c24 	ldrh.w	r1, [r3, #-36]
 8014460:	687a      	ldr	r2, [r7, #4]
 8014462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014464:	3304      	adds	r3, #4
 8014466:	005b      	lsls	r3, r3, #1
 8014468:	4413      	add	r3, r2
 801446a:	460a      	mov	r2, r1
 801446c:	809a      	strh	r2, [r3, #4]
 801446e:	e02c      	b.n	80144ca <BSP_TS_GetState+0x2d2>
 8014470:	200082e0 	.word	0x200082e0
 8014474:	200082e9 	.word	0x200082e9
 8014478:	200082e8 	.word	0x200082e8
 801447c:	200082ec 	.word	0x200082ec
 8014480:	20008300 	.word	0x20008300
      }
      else
      {
        /* 2^12 = 4096 : indexes are expressed on a dynamic of 4096 */
        TS_State->touchX[index] = (tsXBoundary * _x[index]) >> 12;
 8014484:	4b42      	ldr	r3, [pc, #264]	; (8014590 <BSP_TS_GetState+0x398>)
 8014486:	881b      	ldrh	r3, [r3, #0]
 8014488:	4619      	mov	r1, r3
 801448a:	4a42      	ldr	r2, [pc, #264]	; (8014594 <BSP_TS_GetState+0x39c>)
 801448c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801448e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014492:	fb03 f301 	mul.w	r3, r3, r1
 8014496:	0b1b      	lsrs	r3, r3, #12
 8014498:	b299      	uxth	r1, r3
 801449a:	687a      	ldr	r2, [r7, #4]
 801449c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801449e:	005b      	lsls	r3, r3, #1
 80144a0:	4413      	add	r3, r2
 80144a2:	460a      	mov	r2, r1
 80144a4:	805a      	strh	r2, [r3, #2]
        TS_State->touchY[index] = (tsYBoundary * _y[index]) >> 12;
 80144a6:	4b3c      	ldr	r3, [pc, #240]	; (8014598 <BSP_TS_GetState+0x3a0>)
 80144a8:	881b      	ldrh	r3, [r3, #0]
 80144aa:	4619      	mov	r1, r3
 80144ac:	4a3b      	ldr	r2, [pc, #236]	; (801459c <BSP_TS_GetState+0x3a4>)
 80144ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80144b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80144b4:	fb03 f301 	mul.w	r3, r3, r1
 80144b8:	0b1b      	lsrs	r3, r3, #12
 80144ba:	b299      	uxth	r1, r3
 80144bc:	687a      	ldr	r2, [r7, #4]
 80144be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80144c0:	3304      	adds	r3, #4
 80144c2:	005b      	lsls	r3, r3, #1
 80144c4:	4413      	add	r3, r2
 80144c6:	460a      	mov	r2, r1
 80144c8:	809a      	strh	r2, [r3, #4]
      }

#if (TS_MULTI_TOUCH_SUPPORTED == 1)

      /* Get touch info related to the current touch */
      ft5336_TS_GetTouchInfo(I2cAddress, index, &weight, &area, &event);
 80144ca:	4b35      	ldr	r3, [pc, #212]	; (80145a0 <BSP_TS_GetState+0x3a8>)
 80144cc:	781b      	ldrb	r3, [r3, #0]
 80144ce:	b298      	uxth	r0, r3
 80144d0:	f107 010c 	add.w	r1, r7, #12
 80144d4:	f107 0210 	add.w	r2, r7, #16
 80144d8:	f107 0308 	add.w	r3, r7, #8
 80144dc:	9300      	str	r3, [sp, #0]
 80144de:	460b      	mov	r3, r1
 80144e0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80144e2:	f7ec fa2f 	bl	8000944 <ft5336_TS_GetTouchInfo>

      /* Update TS_State structure */
      TS_State->touchWeight[index] = weight;
 80144e6:	693b      	ldr	r3, [r7, #16]
 80144e8:	b2d9      	uxtb	r1, r3
 80144ea:	687a      	ldr	r2, [r7, #4]
 80144ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80144ee:	4413      	add	r3, r2
 80144f0:	3316      	adds	r3, #22
 80144f2:	460a      	mov	r2, r1
 80144f4:	701a      	strb	r2, [r3, #0]
      TS_State->touchArea[index]   = area;
 80144f6:	68fb      	ldr	r3, [r7, #12]
 80144f8:	b2d9      	uxtb	r1, r3
 80144fa:	687a      	ldr	r2, [r7, #4]
 80144fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80144fe:	4413      	add	r3, r2
 8014500:	3320      	adds	r3, #32
 8014502:	460a      	mov	r2, r1
 8014504:	701a      	strb	r2, [r3, #0]

      /* Remap touch event */
      switch(event)
 8014506:	68bb      	ldr	r3, [r7, #8]
 8014508:	2b03      	cmp	r3, #3
 801450a:	d827      	bhi.n	801455c <BSP_TS_GetState+0x364>
 801450c:	a201      	add	r2, pc, #4	; (adr r2, 8014514 <BSP_TS_GetState+0x31c>)
 801450e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014512:	bf00      	nop
 8014514:	08014525 	.word	0x08014525
 8014518:	08014533 	.word	0x08014533
 801451c:	08014541 	.word	0x08014541
 8014520:	0801454f 	.word	0x0801454f
      {
        case FT5336_TOUCH_EVT_FLAG_PRESS_DOWN	:
          TS_State->touchEventId[index] = TOUCH_EVENT_PRESS_DOWN;
 8014524:	687a      	ldr	r2, [r7, #4]
 8014526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014528:	4413      	add	r3, r2
 801452a:	331b      	adds	r3, #27
 801452c:	2201      	movs	r2, #1
 801452e:	701a      	strb	r2, [r3, #0]
          break;
 8014530:	e018      	b.n	8014564 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_LIFT_UP :
          TS_State->touchEventId[index] = TOUCH_EVENT_LIFT_UP;
 8014532:	687a      	ldr	r2, [r7, #4]
 8014534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014536:	4413      	add	r3, r2
 8014538:	331b      	adds	r3, #27
 801453a:	2202      	movs	r2, #2
 801453c:	701a      	strb	r2, [r3, #0]
          break;
 801453e:	e011      	b.n	8014564 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_CONTACT :
          TS_State->touchEventId[index] = TOUCH_EVENT_CONTACT;
 8014540:	687a      	ldr	r2, [r7, #4]
 8014542:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014544:	4413      	add	r3, r2
 8014546:	331b      	adds	r3, #27
 8014548:	2203      	movs	r2, #3
 801454a:	701a      	strb	r2, [r3, #0]
          break;
 801454c:	e00a      	b.n	8014564 <BSP_TS_GetState+0x36c>
        case FT5336_TOUCH_EVT_FLAG_NO_EVENT :
          TS_State->touchEventId[index] = TOUCH_EVENT_NO_EVT;
 801454e:	687a      	ldr	r2, [r7, #4]
 8014550:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014552:	4413      	add	r3, r2
 8014554:	331b      	adds	r3, #27
 8014556:	2200      	movs	r2, #0
 8014558:	701a      	strb	r2, [r3, #0]
          break;
 801455a:	e003      	b.n	8014564 <BSP_TS_GetState+0x36c>
        default :
          ts_status = TS_ERROR;
 801455c:	2301      	movs	r3, #1
 801455e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
          break;
 8014562:	bf00      	nop
    for(index=0; index < TS_State->touchDetected; index++)
 8014564:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014566:	3301      	adds	r3, #1
 8014568:	64bb      	str	r3, [r7, #72]	; 0x48
 801456a:	687b      	ldr	r3, [r7, #4]
 801456c:	781b      	ldrb	r3, [r3, #0]
 801456e:	461a      	mov	r2, r3
 8014570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014572:	4293      	cmp	r3, r2
 8014574:	f4ff ae61 	bcc.w	801423a <BSP_TS_GetState+0x42>

    } /* of for(index=0; index < TS_State->touchDetected; index++) */

#if (TS_MULTI_TOUCH_SUPPORTED == 1)
    /* Get gesture Id */
    ts_status = BSP_TS_Get_GestureId(TS_State);
 8014578:	6878      	ldr	r0, [r7, #4]
 801457a:	f000 f813 	bl	80145a4 <BSP_TS_Get_GestureId>
 801457e:	4603      	mov	r3, r0
 8014580:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif /* TS_MULTI_TOUCH_SUPPORTED == 1 */

  } /* end of if(TS_State->touchDetected != 0) */

  return (ts_status);
 8014584:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8014588:	4618      	mov	r0, r3
 801458a:	3754      	adds	r7, #84	; 0x54
 801458c:	46bd      	mov	sp, r7
 801458e:	bd90      	pop	{r4, r7, pc}
 8014590:	200082e4 	.word	0x200082e4
 8014594:	200082ec 	.word	0x200082ec
 8014598:	200082e6 	.word	0x200082e6
 801459c:	20008300 	.word	0x20008300
 80145a0:	200082e9 	.word	0x200082e9

080145a4 <BSP_TS_Get_GestureId>:
  * @brief  Update gesture Id following a touch detected.
  * @param  TS_State: Pointer to touch screen current state structure
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Get_GestureId(TS_StateTypeDef *TS_State)
{
 80145a4:	b580      	push	{r7, lr}
 80145a6:	b084      	sub	sp, #16
 80145a8:	af00      	add	r7, sp, #0
 80145aa:	6078      	str	r0, [r7, #4]
  uint32_t gestureId = 0;
 80145ac:	2300      	movs	r3, #0
 80145ae:	60bb      	str	r3, [r7, #8]
  uint8_t  ts_status = TS_OK;
 80145b0:	2300      	movs	r3, #0
 80145b2:	73fb      	strb	r3, [r7, #15]

  /* Get gesture Id */
  ft5336_TS_GetGestureID(I2cAddress, &gestureId);
 80145b4:	4b1f      	ldr	r3, [pc, #124]	; (8014634 <BSP_TS_Get_GestureId+0x90>)
 80145b6:	781b      	ldrb	r3, [r3, #0]
 80145b8:	b29b      	uxth	r3, r3
 80145ba:	f107 0208 	add.w	r2, r7, #8
 80145be:	4611      	mov	r1, r2
 80145c0:	4618      	mov	r0, r3
 80145c2:	f7ec f9a6 	bl	8000912 <ft5336_TS_GetGestureID>

  /* Remap gesture Id to a TS_GestureIdTypeDef value */
  switch(gestureId)
 80145c6:	68bb      	ldr	r3, [r7, #8]
 80145c8:	2b18      	cmp	r3, #24
 80145ca:	d01b      	beq.n	8014604 <BSP_TS_Get_GestureId+0x60>
 80145cc:	2b18      	cmp	r3, #24
 80145ce:	d806      	bhi.n	80145de <BSP_TS_Get_GestureId+0x3a>
 80145d0:	2b10      	cmp	r3, #16
 80145d2:	d00f      	beq.n	80145f4 <BSP_TS_Get_GestureId+0x50>
 80145d4:	2b14      	cmp	r3, #20
 80145d6:	d011      	beq.n	80145fc <BSP_TS_Get_GestureId+0x58>
 80145d8:	2b00      	cmp	r3, #0
 80145da:	d007      	beq.n	80145ec <BSP_TS_Get_GestureId+0x48>
 80145dc:	e022      	b.n	8014624 <BSP_TS_Get_GestureId+0x80>
 80145de:	2b40      	cmp	r3, #64	; 0x40
 80145e0:	d018      	beq.n	8014614 <BSP_TS_Get_GestureId+0x70>
 80145e2:	2b49      	cmp	r3, #73	; 0x49
 80145e4:	d01a      	beq.n	801461c <BSP_TS_Get_GestureId+0x78>
 80145e6:	2b1c      	cmp	r3, #28
 80145e8:	d010      	beq.n	801460c <BSP_TS_Get_GestureId+0x68>
 80145ea:	e01b      	b.n	8014624 <BSP_TS_Get_GestureId+0x80>
  {
    case FT5336_GEST_ID_NO_GESTURE :
      TS_State->gestureId = GEST_ID_NO_GESTURE;
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	2200      	movs	r2, #0
 80145f0:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80145f2:	e01a      	b.n	801462a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_UP :
      TS_State->gestureId = GEST_ID_MOVE_UP;
 80145f4:	687b      	ldr	r3, [r7, #4]
 80145f6:	2201      	movs	r2, #1
 80145f8:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 80145fa:	e016      	b.n	801462a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_RIGHT :
      TS_State->gestureId = GEST_ID_MOVE_RIGHT;
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	2202      	movs	r2, #2
 8014600:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8014602:	e012      	b.n	801462a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_DOWN :
      TS_State->gestureId = GEST_ID_MOVE_DOWN;
 8014604:	687b      	ldr	r3, [r7, #4]
 8014606:	2203      	movs	r2, #3
 8014608:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 801460a:	e00e      	b.n	801462a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_MOVE_LEFT :
      TS_State->gestureId = GEST_ID_MOVE_LEFT;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	2204      	movs	r2, #4
 8014610:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8014612:	e00a      	b.n	801462a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_IN :
      TS_State->gestureId = GEST_ID_ZOOM_IN;
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	2205      	movs	r2, #5
 8014618:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 801461a:	e006      	b.n	801462a <BSP_TS_Get_GestureId+0x86>
    case FT5336_GEST_ID_ZOOM_OUT :
      TS_State->gestureId = GEST_ID_ZOOM_OUT;
 801461c:	687b      	ldr	r3, [r7, #4]
 801461e:	2206      	movs	r2, #6
 8014620:	629a      	str	r2, [r3, #40]	; 0x28
      break;
 8014622:	e002      	b.n	801462a <BSP_TS_Get_GestureId+0x86>
    default :
      ts_status = TS_ERROR;
 8014624:	2301      	movs	r3, #1
 8014626:	73fb      	strb	r3, [r7, #15]
      break;
 8014628:	bf00      	nop
  } /* of switch(gestureId) */

  return(ts_status);
 801462a:	7bfb      	ldrb	r3, [r7, #15]
}
 801462c:	4618      	mov	r0, r3
 801462e:	3710      	adds	r7, #16
 8014630:	46bd      	mov	sp, r7
 8014632:	bd80      	pop	{r7, pc}
 8014634:	200082e9 	.word	0x200082e9

08014638 <_ZN8touchgfx15UIEventListener16handleClickEventERKNS_10ClickEventE>:
     *        This handler is invoked when a mouse click or display touch event has been
     *        detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 8014638:	b480      	push	{r7}
 801463a:	b083      	sub	sp, #12
 801463c:	af00      	add	r7, sp, #0
 801463e:	6078      	str	r0, [r7, #4]
 8014640:	6039      	str	r1, [r7, #0]
    {
    }
 8014642:	bf00      	nop
 8014644:	370c      	adds	r7, #12
 8014646:	46bd      	mov	sp, r7
 8014648:	f85d 7b04 	ldr.w	r7, [sp], #4
 801464c:	4770      	bx	lr

0801464e <_ZN8touchgfx15UIEventListener15handleDragEventERKNS_9DragEventE>:
     *
     *        This handler is invoked when a drag event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleDragEvent(const DragEvent& event)
 801464e:	b480      	push	{r7}
 8014650:	b083      	sub	sp, #12
 8014652:	af00      	add	r7, sp, #0
 8014654:	6078      	str	r0, [r7, #4]
 8014656:	6039      	str	r1, [r7, #0]
    {
    }
 8014658:	bf00      	nop
 801465a:	370c      	adds	r7, #12
 801465c:	46bd      	mov	sp, r7
 801465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014662:	4770      	bx	lr

08014664 <_ZN8touchgfx15UIEventListener18handleGestureEventERKNS_12GestureEventE>:
     *
     *        This handler is invoked when a gesture event has been detected by the system.
     *
     * @param event The event data.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
 8014664:	b480      	push	{r7}
 8014666:	b083      	sub	sp, #12
 8014668:	af00      	add	r7, sp, #0
 801466a:	6078      	str	r0, [r7, #4]
 801466c:	6039      	str	r1, [r7, #0]
    {
    }
 801466e:	bf00      	nop
 8014670:	370c      	adds	r7, #12
 8014672:	46bd      	mov	sp, r7
 8014674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014678:	4770      	bx	lr

0801467a <_ZN8touchgfx15UIEventListener14handleKeyEventEh>:
     *        This handler is invoked when a key (or button) event has been detected by the
     *        system.
     *
     * @param c The key or button pressed.
     */
    virtual void handleKeyEvent(uint8_t c)
 801467a:	b480      	push	{r7}
 801467c:	b083      	sub	sp, #12
 801467e:	af00      	add	r7, sp, #0
 8014680:	6078      	str	r0, [r7, #4]
 8014682:	460b      	mov	r3, r1
 8014684:	70fb      	strb	r3, [r7, #3]
    {
    }
 8014686:	bf00      	nop
 8014688:	370c      	adds	r7, #12
 801468a:	46bd      	mov	sp, r7
 801468c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014690:	4770      	bx	lr

08014692 <_ZN8touchgfx15UIEventListener15handleTickEventEv>:
     * @brief This handler is invoked when a system tick event has been generated.
     *
     *        This handler is invoked when a system tick event has been generated. The system
     *        tick period is configured in the HAL.
     */
    virtual void handleTickEvent()
 8014692:	b480      	push	{r7}
 8014694:	b083      	sub	sp, #12
 8014696:	af00      	add	r7, sp, #0
 8014698:	6078      	str	r0, [r7, #4]
    {
    }
 801469a:	bf00      	nop
 801469c:	370c      	adds	r7, #12
 801469e:	46bd      	mov	sp, r7
 80146a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146a4:	4770      	bx	lr

080146a6 <_ZN8touchgfx15UIEventListener29handlePendingScreenTransitionEv>:
     *
     * @brief This handler is invoked when a change screen event is pending.
     *
     *        This handler is invoked when a change screen event is pending.
     */
    virtual void handlePendingScreenTransition()
 80146a6:	b480      	push	{r7}
 80146a8:	b083      	sub	sp, #12
 80146aa:	af00      	add	r7, sp, #0
 80146ac:	6078      	str	r0, [r7, #4]
    {
    }
 80146ae:	bf00      	nop
 80146b0:	370c      	adds	r7, #12
 80146b2:	46bd      	mov	sp, r7
 80146b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146b8:	4770      	bx	lr
	...

080146bc <_ZN8touchgfx15UIEventListenerD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~UIEventListener()
 80146bc:	b480      	push	{r7}
 80146be:	b083      	sub	sp, #12
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
    {
 80146c4:	4a04      	ldr	r2, [pc, #16]	; (80146d8 <_ZN8touchgfx15UIEventListenerD1Ev+0x1c>)
 80146c6:	687b      	ldr	r3, [r7, #4]
 80146c8:	601a      	str	r2, [r3, #0]
    }
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	4618      	mov	r0, r3
 80146ce:	370c      	adds	r7, #12
 80146d0:	46bd      	mov	sp, r7
 80146d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146d6:	4770      	bx	lr
 80146d8:	08024964 	.word	0x08024964

080146dc <_ZN8touchgfx15UIEventListenerD0Ev>:
    virtual ~UIEventListener()
 80146dc:	b580      	push	{r7, lr}
 80146de:	b082      	sub	sp, #8
 80146e0:	af00      	add	r7, sp, #0
 80146e2:	6078      	str	r0, [r7, #4]
    }
 80146e4:	6878      	ldr	r0, [r7, #4]
 80146e6:	f7ff ffe9 	bl	80146bc <_ZN8touchgfx15UIEventListenerD1Ev>
 80146ea:	2104      	movs	r1, #4
 80146ec:	6878      	ldr	r0, [r7, #4]
 80146ee:	f00d fe98 	bl	8022422 <_ZdlPvj>
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	4618      	mov	r0, r3
 80146f6:	3708      	adds	r7, #8
 80146f8:	46bd      	mov	sp, r7
 80146fa:	bd80      	pop	{r7, pc}

080146fc <_ZN8touchgfx8Gestures9DragStateC1Ev>:
     *
     *        Defines the state of a drag.
     */
    struct DragState
    {
        DragState() : startX(0),
 80146fc:	b480      	push	{r7}
 80146fe:	b083      	sub	sp, #12
 8014700:	af00      	add	r7, sp, #0
 8014702:	6078      	str	r0, [r7, #4]
            downX(0),
            downY(0),
            tickCount(0),
            velocityX(0),
            velocityY(0),
            inProgress(false)
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	2200      	movs	r2, #0
 8014708:	801a      	strh	r2, [r3, #0]
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	2200      	movs	r2, #0
 801470e:	805a      	strh	r2, [r3, #2]
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	2200      	movs	r2, #0
 8014714:	809a      	strh	r2, [r3, #4]
 8014716:	687b      	ldr	r3, [r7, #4]
 8014718:	2200      	movs	r2, #0
 801471a:	80da      	strh	r2, [r3, #6]
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	2200      	movs	r2, #0
 8014720:	811a      	strh	r2, [r3, #8]
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	2200      	movs	r2, #0
 8014726:	815a      	strh	r2, [r3, #10]
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	2200      	movs	r2, #0
 801472c:	819a      	strh	r2, [r3, #12]
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	2200      	movs	r2, #0
 8014732:	739a      	strb	r2, [r3, #14]
        {
        }
 8014734:	687b      	ldr	r3, [r7, #4]
 8014736:	4618      	mov	r0, r3
 8014738:	370c      	adds	r7, #12
 801473a:	46bd      	mov	sp, r7
 801473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014740:	4770      	bx	lr

08014742 <_ZN8touchgfx8GesturesC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor. Does nothing.
     */
    Gestures() : listener(0), dragThresholdValue(0) { }
 8014742:	b580      	push	{r7, lr}
 8014744:	b082      	sub	sp, #8
 8014746:	af00      	add	r7, sp, #0
 8014748:	6078      	str	r0, [r7, #4]
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	4618      	mov	r0, r3
 801474e:	f7ff ffd5 	bl	80146fc <_ZN8touchgfx8Gestures9DragStateC1Ev>
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	2200      	movs	r2, #0
 8014756:	611a      	str	r2, [r3, #16]
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	2200      	movs	r2, #0
 801475c:	829a      	strh	r2, [r3, #20]
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	4618      	mov	r0, r3
 8014762:	3708      	adds	r7, #8
 8014764:	46bd      	mov	sp, r7
 8014766:	bd80      	pop	{r7, pc}

08014768 <_ZN8touchgfx18MCUInstrumentationC1Ev>:
     *
     * @brief Constructor.
     *
     *        Constructor. Initializes members.
     */
    MCUInstrumentation():
 8014768:	b480      	push	{r7}
 801476a:	b083      	sub	sp, #12
 801476c:	af00      	add	r7, sp, #0
 801476e:	6078      	str	r0, [r7, #4]
        cc_consumed(0),
        cc_in(0)
 8014770:	4a07      	ldr	r2, [pc, #28]	; (8014790 <_ZN8touchgfx18MCUInstrumentationC1Ev+0x28>)
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	601a      	str	r2, [r3, #0]
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	2200      	movs	r2, #0
 801477a:	605a      	str	r2, [r3, #4]
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	2200      	movs	r2, #0
 8014780:	609a      	str	r2, [r3, #8]
    {
    }
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	4618      	mov	r0, r3
 8014786:	370c      	adds	r7, #12
 8014788:	46bd      	mov	sp, r7
 801478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801478e:	4770      	bx	lr
 8014790:	0802493c 	.word	0x0802493c

08014794 <_ZN8touchgfx18MCUInstrumentationD1Ev>:
     *
     * @brief Virtual destructor.
     *
     *        Virtual destructor.
     */
    virtual ~MCUInstrumentation() {}
 8014794:	b480      	push	{r7}
 8014796:	b083      	sub	sp, #12
 8014798:	af00      	add	r7, sp, #0
 801479a:	6078      	str	r0, [r7, #4]
 801479c:	4a04      	ldr	r2, [pc, #16]	; (80147b0 <_ZN8touchgfx18MCUInstrumentationD1Ev+0x1c>)
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	601a      	str	r2, [r3, #0]
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	4618      	mov	r0, r3
 80147a6:	370c      	adds	r7, #12
 80147a8:	46bd      	mov	sp, r7
 80147aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147ae:	4770      	bx	lr
 80147b0:	0802493c 	.word	0x0802493c

080147b4 <_ZN8touchgfx18MCUInstrumentationD0Ev>:
 80147b4:	b580      	push	{r7, lr}
 80147b6:	b082      	sub	sp, #8
 80147b8:	af00      	add	r7, sp, #0
 80147ba:	6078      	str	r0, [r7, #4]
 80147bc:	6878      	ldr	r0, [r7, #4]
 80147be:	f7ff ffe9 	bl	8014794 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 80147c2:	210c      	movs	r1, #12
 80147c4:	6878      	ldr	r0, [r7, #4]
 80147c6:	f00d fe2c 	bl	8022422 <_ZdlPvj>
 80147ca:	687b      	ldr	r3, [r7, #4]
 80147cc:	4618      	mov	r0, r3
 80147ce:	3708      	adds	r7, #8
 80147d0:	46bd      	mov	sp, r7
 80147d2:	bd80      	pop	{r7, pc}

080147d4 <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb>:
     *
     *        Sets MCU activity high.
     *
     * @param active if True, inactive otherwise.
     */
    virtual void setMCUActive(bool active)
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b084      	sub	sp, #16
 80147d8:	af00      	add	r7, sp, #0
 80147da:	6078      	str	r0, [r7, #4]
 80147dc:	460b      	mov	r3, r1
 80147de:	70fb      	strb	r3, [r7, #3]
    {
        if (active) //idle task sched out
 80147e0:	78fb      	ldrb	r3, [r7, #3]
 80147e2:	2b00      	cmp	r3, #0
 80147e4:	d011      	beq.n	801480a <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x36>
        {
            uint32_t cc_temp = getCPUCycles() - cc_in;
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	3310      	adds	r3, #16
 80147ec:	681b      	ldr	r3, [r3, #0]
 80147ee:	6878      	ldr	r0, [r7, #4]
 80147f0:	4798      	blx	r3
 80147f2:	4602      	mov	r2, r0
 80147f4:	687b      	ldr	r3, [r7, #4]
 80147f6:	689b      	ldr	r3, [r3, #8]
 80147f8:	1ad3      	subs	r3, r2, r3
 80147fa:	60fb      	str	r3, [r7, #12]
            cc_consumed += cc_temp;
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	685a      	ldr	r2, [r3, #4]
 8014800:	68fb      	ldr	r3, [r7, #12]
 8014802:	441a      	add	r2, r3
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	605a      	str	r2, [r3, #4]
        }
        else //idle task sched in
        {
            cc_in = getCPUCycles();
        }
    }
 8014808:	e008      	b.n	801481c <_ZN8touchgfx18MCUInstrumentation12setMCUActiveEb+0x48>
            cc_in = getCPUCycles();
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	681b      	ldr	r3, [r3, #0]
 801480e:	3310      	adds	r3, #16
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	6878      	ldr	r0, [r7, #4]
 8014814:	4798      	blx	r3
 8014816:	4602      	mov	r2, r0
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	609a      	str	r2, [r3, #8]
    }
 801481c:	bf00      	nop
 801481e:	3710      	adds	r7, #16
 8014820:	46bd      	mov	sp, r7
 8014822:	bd80      	pop	{r7, pc}

08014824 <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     *        Gets number of consumed clock cycles.
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
 8014824:	b480      	push	{r7}
 8014826:	b083      	sub	sp, #12
 8014828:	af00      	add	r7, sp, #0
 801482a:	6078      	str	r0, [r7, #4]
    {
        return cc_consumed;
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	685b      	ldr	r3, [r3, #4]
    }
 8014830:	4618      	mov	r0, r3
 8014832:	370c      	adds	r7, #12
 8014834:	46bd      	mov	sp, r7
 8014836:	f85d 7b04 	ldr.w	r7, [sp], #4
 801483a:	4770      	bx	lr

0801483c <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     *        Sets number of consumed clock cycles.
     *
     * @param val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
 801483c:	b480      	push	{r7}
 801483e:	b083      	sub	sp, #12
 8014840:	af00      	add	r7, sp, #0
 8014842:	6078      	str	r0, [r7, #4]
 8014844:	6039      	str	r1, [r7, #0]
    {
        cc_consumed = val;
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	683a      	ldr	r2, [r7, #0]
 801484a:	605a      	str	r2, [r3, #4]
    }
 801484c:	bf00      	nop
 801484e:	370c      	adds	r7, #12
 8014850:	46bd      	mov	sp, r7
 8014852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014856:	4770      	bx	lr

08014858 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>:
    HAL(DMA_Interface& dmaInterface, LCD& display, TouchController& touchCtrl, uint16_t width, uint16_t height) :
 8014858:	b580      	push	{r7, lr}
 801485a:	b084      	sub	sp, #16
 801485c:	af00      	add	r7, sp, #0
 801485e:	60f8      	str	r0, [r7, #12]
 8014860:	60b9      	str	r1, [r7, #8]
 8014862:	607a      	str	r2, [r7, #4]
 8014864:	603b      	str	r3, [r7, #0]
        displayOrientationChangeRequested(false)
 8014866:	4a3e      	ldr	r2, [pc, #248]	; (8014960 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x108>)
 8014868:	68fb      	ldr	r3, [r7, #12]
 801486a:	601a      	str	r2, [r3, #0]
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	68ba      	ldr	r2, [r7, #8]
 8014870:	605a      	str	r2, [r3, #4]
 8014872:	68fb      	ldr	r3, [r7, #12]
 8014874:	687a      	ldr	r2, [r7, #4]
 8014876:	609a      	str	r2, [r3, #8]
 8014878:	68fb      	ldr	r3, [r7, #12]
 801487a:	683a      	ldr	r2, [r7, #0]
 801487c:	60da      	str	r2, [r3, #12]
 801487e:	68fb      	ldr	r3, [r7, #12]
 8014880:	2200      	movs	r2, #0
 8014882:	611a      	str	r2, [r3, #16]
 8014884:	68fb      	ldr	r3, [r7, #12]
 8014886:	2200      	movs	r2, #0
 8014888:	615a      	str	r2, [r3, #20]
 801488a:	68fb      	ldr	r3, [r7, #12]
 801488c:	3318      	adds	r3, #24
 801488e:	4618      	mov	r0, r3
 8014890:	f7ff ff57 	bl	8014742 <_ZN8touchgfx8GesturesC1Ev>
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	2200      	movs	r2, #0
 8014898:	635a      	str	r2, [r3, #52]	; 0x34
 801489a:	68fb      	ldr	r3, [r7, #12]
 801489c:	2200      	movs	r2, #0
 801489e:	639a      	str	r2, [r3, #56]	; 0x38
 80148a0:	68fb      	ldr	r3, [r7, #12]
 80148a2:	2200      	movs	r2, #0
 80148a4:	63da      	str	r2, [r3, #60]	; 0x3c
 80148a6:	68fb      	ldr	r3, [r7, #12]
 80148a8:	2200      	movs	r2, #0
 80148aa:	641a      	str	r2, [r3, #64]	; 0x40
 80148ac:	68fb      	ldr	r3, [r7, #12]
 80148ae:	2200      	movs	r2, #0
 80148b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80148b4:	68fb      	ldr	r3, [r7, #12]
 80148b6:	2201      	movs	r2, #1
 80148b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80148bc:	68fb      	ldr	r3, [r7, #12]
 80148be:	2201      	movs	r2, #1
 80148c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80148c4:	68fb      	ldr	r3, [r7, #12]
 80148c6:	2201      	movs	r2, #1
 80148c8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 80148cc:	68fb      	ldr	r3, [r7, #12]
 80148ce:	2200      	movs	r2, #0
 80148d0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	2200      	movs	r2, #0
 80148d8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
 80148dc:	68fb      	ldr	r3, [r7, #12]
 80148de:	2201      	movs	r2, #1
 80148e0:	f883 2057 	strb.w	r2, [r3, #87]	; 0x57
 80148e4:	68fb      	ldr	r3, [r7, #12]
 80148e6:	2200      	movs	r2, #0
 80148e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80148ec:	68fb      	ldr	r3, [r7, #12]
 80148ee:	2200      	movs	r2, #0
 80148f0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
 80148f4:	68fb      	ldr	r3, [r7, #12]
 80148f6:	2200      	movs	r2, #0
 80148f8:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 80148fc:	68fb      	ldr	r3, [r7, #12]
 80148fe:	2200      	movs	r2, #0
 8014900:	f883 205b 	strb.w	r2, [r3, #91]	; 0x5b
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	2200      	movs	r2, #0
 8014908:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	2200      	movs	r2, #0
 8014910:	661a      	str	r2, [r3, #96]	; 0x60
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	2200      	movs	r2, #0
 8014916:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
        instance = this;
 801491a:	4a12      	ldr	r2, [pc, #72]	; (8014964 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x10c>)
 801491c:	68fb      	ldr	r3, [r7, #12]
 801491e:	6013      	str	r3, [r2, #0]
        DISPLAY_WIDTH = width;
 8014920:	4a11      	ldr	r2, [pc, #68]	; (8014968 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x110>)
 8014922:	8b3b      	ldrh	r3, [r7, #24]
 8014924:	8013      	strh	r3, [r2, #0]
        DISPLAY_HEIGHT = height;
 8014926:	4a11      	ldr	r2, [pc, #68]	; (801496c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x114>)
 8014928:	8bbb      	ldrh	r3, [r7, #28]
 801492a:	8013      	strh	r3, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 801492c:	4b10      	ldr	r3, [pc, #64]	; (8014970 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x118>)
 801492e:	2200      	movs	r2, #0
 8014930:	701a      	strb	r2, [r3, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8014932:	4b0d      	ldr	r3, [pc, #52]	; (8014968 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x110>)
 8014934:	881a      	ldrh	r2, [r3, #0]
 8014936:	4b0f      	ldr	r3, [pc, #60]	; (8014974 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x11c>)
 8014938:	801a      	strh	r2, [r3, #0]
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 801493a:	4b0c      	ldr	r3, [pc, #48]	; (801496c <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x114>)
 801493c:	881a      	ldrh	r2, [r3, #0]
 801493e:	4b0e      	ldr	r3, [pc, #56]	; (8014978 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0x120>)
 8014940:	801a      	strh	r2, [r3, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8014942:	8b3a      	ldrh	r2, [r7, #24]
 8014944:	8bbb      	ldrh	r3, [r7, #28]
 8014946:	429a      	cmp	r2, r3
 8014948:	d301      	bcc.n	801494e <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xf6>
 801494a:	2200      	movs	r2, #0
 801494c:	e000      	b.n	8014950 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt+0xf8>
 801494e:	2201      	movs	r2, #1
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }
 8014956:	68fb      	ldr	r3, [r7, #12]
 8014958:	4618      	mov	r0, r3
 801495a:	3710      	adds	r7, #16
 801495c:	46bd      	mov	sp, r7
 801495e:	bd80      	pop	{r7, pc}
 8014960:	0802575c 	.word	0x0802575c
 8014964:	20009d34 	.word	0x20009d34
 8014968:	20009d28 	.word	0x20009d28
 801496c:	20009d2a 	.word	0x20009d2a
 8014970:	20009d2c 	.word	0x20009d2c
 8014974:	20009d2e 	.word	0x20009d2e
 8014978:	20009d30 	.word	0x20009d30

0801497c <_ZN8touchgfx3HALD1Ev>:
    virtual ~HAL() { }
 801497c:	b480      	push	{r7}
 801497e:	b083      	sub	sp, #12
 8014980:	af00      	add	r7, sp, #0
 8014982:	6078      	str	r0, [r7, #4]
 8014984:	4a04      	ldr	r2, [pc, #16]	; (8014998 <_ZN8touchgfx3HALD1Ev+0x1c>)
 8014986:	687b      	ldr	r3, [r7, #4]
 8014988:	601a      	str	r2, [r3, #0]
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	4618      	mov	r0, r3
 801498e:	370c      	adds	r7, #12
 8014990:	46bd      	mov	sp, r7
 8014992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014996:	4770      	bx	lr
 8014998:	0802575c 	.word	0x0802575c

0801499c <_ZN8touchgfx3HALD0Ev>:
 801499c:	b580      	push	{r7, lr}
 801499e:	b082      	sub	sp, #8
 80149a0:	af00      	add	r7, sp, #0
 80149a2:	6078      	str	r0, [r7, #4]
 80149a4:	6878      	ldr	r0, [r7, #4]
 80149a6:	f7ff ffe9 	bl	801497c <_ZN8touchgfx3HALD1Ev>
 80149aa:	2168      	movs	r1, #104	; 0x68
 80149ac:	6878      	ldr	r0, [r7, #4]
 80149ae:	f00d fd38 	bl	8022422 <_ZdlPvj>
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	4618      	mov	r0, r3
 80149b6:	3708      	adds	r7, #8
 80149b8:	46bd      	mov	sp, r7
 80149ba:	bd80      	pop	{r7, pc}

080149bc <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>:
     *
     * @param enableLock True to lock DMA transfers to the front porch signal. Conservative,
     *                   default setting. False to disable, which will normally yield substantial
     *                   performance improvement.
     */
    void lockDMAToFrontPorch(bool enableLock)
 80149bc:	b480      	push	{r7}
 80149be:	b083      	sub	sp, #12
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	6078      	str	r0, [r7, #4]
 80149c4:	460b      	mov	r3, r1
 80149c6:	70fb      	strb	r3, [r7, #3]
    {
        lockDMAToPorch = enableLock;
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	78fa      	ldrb	r2, [r7, #3]
 80149cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    }
 80149d0:	bf00      	nop
 80149d2:	370c      	adds	r7, #12
 80149d4:	46bd      	mov	sp, r7
 80149d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149da:	4770      	bx	lr

080149dc <_ZN8touchgfx3HAL24setFrameRateCompensationEb>:
     *
     *        Enables or disables compensation for lost frames. See knowledge base article.
     *
     * @param enabled true to enable, false to disable.
     */
    void setFrameRateCompensation(bool enabled)
 80149dc:	b480      	push	{r7}
 80149de:	b083      	sub	sp, #12
 80149e0:	af00      	add	r7, sp, #0
 80149e2:	6078      	str	r0, [r7, #4]
 80149e4:	460b      	mov	r3, r1
 80149e6:	70fb      	strb	r3, [r7, #3]
    {
        vSyncCompensationEnabled = enabled;
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	78fa      	ldrb	r2, [r7, #3]
 80149ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
    };
 80149f0:	bf00      	nop
 80149f2:	370c      	adds	r7, #12
 80149f4:	46bd      	mov	sp, r7
 80149f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149fa:	4770      	bx	lr

080149fc <_ZN8touchgfx3HAL18setTouchSampleRateEa>:
     *
     *        Sets the number of ticks between each touch screen sample.
     *
     * @param sampleRateInTicks Sample rate. Default is 1 (every tick).
     */
    void setTouchSampleRate(int8_t sampleRateInTicks)
 80149fc:	b480      	push	{r7}
 80149fe:	b083      	sub	sp, #12
 8014a00:	af00      	add	r7, sp, #0
 8014a02:	6078      	str	r0, [r7, #4]
 8014a04:	460b      	mov	r3, r1
 8014a06:	70fb      	strb	r3, [r7, #3]
    {
        if (sampleRateInTicks > 0)
 8014a08:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	dd03      	ble.n	8014a18 <_ZN8touchgfx3HAL18setTouchSampleRateEa+0x1c>
        {
            touchSampleRate = sampleRateInTicks;
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	78fa      	ldrb	r2, [r7, #3]
 8014a14:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
    }
 8014a18:	bf00      	nop
 8014a1a:	370c      	adds	r7, #12
 8014a1c:	46bd      	mov	sp, r7
 8014a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a22:	4770      	bx	lr

08014a24 <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>:
     *
     *        Stores a pointer to an instance of an MCU specific instrumentation class.
     *
     * @param [in] mcuInstr pointer to MCU instrumentation.
     */
    void setMCUInstrumentation(MCUInstrumentation* mcuInstr)
 8014a24:	b480      	push	{r7}
 8014a26:	b083      	sub	sp, #12
 8014a28:	af00      	add	r7, sp, #0
 8014a2a:	6078      	str	r0, [r7, #4]
 8014a2c:	6039      	str	r1, [r7, #0]
    {
        mcuInstrumentation = mcuInstr;
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	683a      	ldr	r2, [r7, #0]
 8014a32:	611a      	str	r2, [r3, #16]
    }
 8014a34:	bf00      	nop
 8014a36:	370c      	adds	r7, #12
 8014a38:	46bd      	mov	sp, r7
 8014a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a3e:	4770      	bx	lr

08014a40 <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>:
     *        This method sets a flag that determines if generic HAL should calculate MCU load
     *        based on concrete MCU instrumentation.
     *
     * @param enabled If true, set flag to update MCU load.
     */
    void enableMCULoadCalculation(bool enabled)
 8014a40:	b480      	push	{r7}
 8014a42:	b083      	sub	sp, #12
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	6078      	str	r0, [r7, #4]
 8014a48:	460b      	mov	r3, r1
 8014a4a:	70fb      	strb	r3, [r7, #3]
    {
        updateMCULoad = enabled;
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	78fa      	ldrb	r2, [r7, #3]
 8014a50:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    }
 8014a54:	bf00      	nop
 8014a56:	370c      	adds	r7, #12
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a5e:	4770      	bx	lr

08014a60 <_ZN8touchgfx3HAL13setFingerSizeEh>:
     *        algorithm will consider the size of the drawable and the distance from the touch
     *        point.
     *
     * @param [in] size the size of the finger.
     */
    void setFingerSize(uint8_t size)
 8014a60:	b480      	push	{r7}
 8014a62:	b083      	sub	sp, #12
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	6078      	str	r0, [r7, #4]
 8014a68:	460b      	mov	r3, r1
 8014a6a:	70fb      	strb	r3, [r7, #3]
    {
        fingerSize = size;
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	78fa      	ldrb	r2, [r7, #3]
 8014a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
 8014a74:	bf00      	nop
 8014a76:	370c      	adds	r7, #12
 8014a78:	46bd      	mov	sp, r7
 8014a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a7e:	4770      	bx	lr

08014a80 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>:
    static void registerTexts(const Texts* t)
 8014a80:	b480      	push	{r7}
 8014a82:	b083      	sub	sp, #12
 8014a84:	af00      	add	r7, sp, #0
 8014a86:	6078      	str	r0, [r7, #4]
        texts = t;
 8014a88:	4a04      	ldr	r2, [pc, #16]	; (8014a9c <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE+0x1c>)
 8014a8a:	687b      	ldr	r3, [r7, #4]
 8014a8c:	6013      	str	r3, [r2, #0]
    }
 8014a8e:	bf00      	nop
 8014a90:	370c      	adds	r7, #12
 8014a92:	46bd      	mov	sp, r7
 8014a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a98:	4770      	bx	lr
 8014a9a:	bf00      	nop
 8014a9c:	20009da0 	.word	0x20009da0

08014aa0 <_ZN8touchgfx12FontProviderD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~FontProvider()
 8014aa0:	b480      	push	{r7}
 8014aa2:	b083      	sub	sp, #12
 8014aa4:	af00      	add	r7, sp, #0
 8014aa6:	6078      	str	r0, [r7, #4]
    {
 8014aa8:	4a04      	ldr	r2, [pc, #16]	; (8014abc <_ZN8touchgfx12FontProviderD1Ev+0x1c>)
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	601a      	str	r2, [r3, #0]
    }
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	4618      	mov	r0, r3
 8014ab2:	370c      	adds	r7, #12
 8014ab4:	46bd      	mov	sp, r7
 8014ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aba:	4770      	bx	lr
 8014abc:	08024928 	.word	0x08024928

08014ac0 <_ZN8touchgfx12FontProviderD0Ev>:
    virtual ~FontProvider()
 8014ac0:	b580      	push	{r7, lr}
 8014ac2:	b082      	sub	sp, #8
 8014ac4:	af00      	add	r7, sp, #0
 8014ac6:	6078      	str	r0, [r7, #4]
    }
 8014ac8:	6878      	ldr	r0, [r7, #4]
 8014aca:	f7ff ffe9 	bl	8014aa0 <_ZN8touchgfx12FontProviderD1Ev>
 8014ace:	2104      	movs	r1, #4
 8014ad0:	6878      	ldr	r0, [r7, #4]
 8014ad2:	f00d fca6 	bl	8022422 <_ZdlPvj>
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	4618      	mov	r0, r3
 8014ada:	3708      	adds	r7, #8
 8014adc:	46bd      	mov	sp, r7
 8014ade:	bd80      	pop	{r7, pc}

08014ae0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>:
     * @param [in] scr  A memory partition containing enough memory to hold the largest view.
     * @param [in] tra  A memory partition containing enough memory to hold the largest
     *                  transition.
     * @param [in] app  A reference to the MVPApplication instance.
     */
    MVPHeap(AbstractPartition& pres,
 8014ae0:	b480      	push	{r7}
 8014ae2:	b085      	sub	sp, #20
 8014ae4:	af00      	add	r7, sp, #0
 8014ae6:	60f8      	str	r0, [r7, #12]
 8014ae8:	60b9      	str	r1, [r7, #8]
 8014aea:	607a      	str	r2, [r7, #4]
 8014aec:	603b      	str	r3, [r7, #0]
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app) : presenterStorage(pres),
        screenStorage(scr),
        transitionStorage(tra),
        frontendApplication(app)
 8014aee:	4a0b      	ldr	r2, [pc, #44]	; (8014b1c <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE+0x3c>)
 8014af0:	68fb      	ldr	r3, [r7, #12]
 8014af2:	601a      	str	r2, [r3, #0]
 8014af4:	68fb      	ldr	r3, [r7, #12]
 8014af6:	68ba      	ldr	r2, [r7, #8]
 8014af8:	605a      	str	r2, [r3, #4]
 8014afa:	68fb      	ldr	r3, [r7, #12]
 8014afc:	687a      	ldr	r2, [r7, #4]
 8014afe:	609a      	str	r2, [r3, #8]
 8014b00:	68fb      	ldr	r3, [r7, #12]
 8014b02:	683a      	ldr	r2, [r7, #0]
 8014b04:	60da      	str	r2, [r3, #12]
 8014b06:	68fb      	ldr	r3, [r7, #12]
 8014b08:	69ba      	ldr	r2, [r7, #24]
 8014b0a:	611a      	str	r2, [r3, #16]
    {
    }
 8014b0c:	68fb      	ldr	r3, [r7, #12]
 8014b0e:	4618      	mov	r0, r3
 8014b10:	3714      	adds	r7, #20
 8014b12:	46bd      	mov	sp, r7
 8014b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b18:	4770      	bx	lr
 8014b1a:	bf00      	nop
 8014b1c:	08024918 	.word	0x08024918

08014b20 <_ZN8touchgfx7MVPHeapD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPHeap()
 8014b20:	b480      	push	{r7}
 8014b22:	b083      	sub	sp, #12
 8014b24:	af00      	add	r7, sp, #0
 8014b26:	6078      	str	r0, [r7, #4]
    {
 8014b28:	4a04      	ldr	r2, [pc, #16]	; (8014b3c <_ZN8touchgfx7MVPHeapD1Ev+0x1c>)
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	601a      	str	r2, [r3, #0]
    }
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	4618      	mov	r0, r3
 8014b32:	370c      	adds	r7, #12
 8014b34:	46bd      	mov	sp, r7
 8014b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b3a:	4770      	bx	lr
 8014b3c:	08024918 	.word	0x08024918

08014b40 <_ZN8touchgfx7MVPHeapD0Ev>:
    virtual ~MVPHeap()
 8014b40:	b580      	push	{r7, lr}
 8014b42:	b082      	sub	sp, #8
 8014b44:	af00      	add	r7, sp, #0
 8014b46:	6078      	str	r0, [r7, #4]
    }
 8014b48:	6878      	ldr	r0, [r7, #4]
 8014b4a:	f7ff ffe9 	bl	8014b20 <_ZN8touchgfx7MVPHeapD1Ev>
 8014b4e:	2114      	movs	r1, #20
 8014b50:	6878      	ldr	r0, [r7, #4]
 8014b52:	f00d fc66 	bl	8022422 <_ZdlPvj>
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	4618      	mov	r0, r3
 8014b5a:	3708      	adds	r7, #8
 8014b5c:	46bd      	mov	sp, r7
 8014b5e:	bd80      	pop	{r7, pc}

08014b60 <_ZN8touchgfx3LCDD1Ev>:
    virtual ~LCD() { }
 8014b60:	b480      	push	{r7}
 8014b62:	b083      	sub	sp, #12
 8014b64:	af00      	add	r7, sp, #0
 8014b66:	6078      	str	r0, [r7, #4]
 8014b68:	4a04      	ldr	r2, [pc, #16]	; (8014b7c <_ZN8touchgfx3LCDD1Ev+0x1c>)
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	601a      	str	r2, [r3, #0]
 8014b6e:	687b      	ldr	r3, [r7, #4]
 8014b70:	4618      	mov	r0, r3
 8014b72:	370c      	adds	r7, #12
 8014b74:	46bd      	mov	sp, r7
 8014b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b7a:	4770      	bx	lr
 8014b7c:	080248e4 	.word	0x080248e4

08014b80 <_ZN8touchgfx3LCDD0Ev>:
 8014b80:	b580      	push	{r7, lr}
 8014b82:	b082      	sub	sp, #8
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	6078      	str	r0, [r7, #4]
 8014b88:	6878      	ldr	r0, [r7, #4]
 8014b8a:	f7ff ffe9 	bl	8014b60 <_ZN8touchgfx3LCDD1Ev>
 8014b8e:	2104      	movs	r1, #4
 8014b90:	6878      	ldr	r0, [r7, #4]
 8014b92:	f00d fc46 	bl	8022422 <_ZdlPvj>
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	4618      	mov	r0, r3
 8014b9a:	3708      	adds	r7, #8
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	bd80      	pop	{r7, pc}

08014ba0 <_ZN8touchgfx3LCD4initEv>:
    virtual void init() { }
 8014ba0:	b480      	push	{r7}
 8014ba2:	b083      	sub	sp, #12
 8014ba4:	af00      	add	r7, sp, #0
 8014ba6:	6078      	str	r0, [r7, #4]
 8014ba8:	bf00      	nop
 8014baa:	370c      	adds	r7, #12
 8014bac:	46bd      	mov	sp, r7
 8014bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bb2:	4770      	bx	lr

08014bb4 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     *        provide a means to switch screen from places that does not have access to a
     *        pointer to the new screen. Base implementation is empty.
     *
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
 8014bb4:	b480      	push	{r7}
 8014bb6:	b083      	sub	sp, #12
 8014bb8:	af00      	add	r7, sp, #0
 8014bba:	6078      	str	r0, [r7, #4]
 8014bbc:	460b      	mov	r3, r1
 8014bbe:	70fb      	strb	r3, [r7, #3]
    {
    }
 8014bc0:	bf00      	nop
 8014bc2:	370c      	adds	r7, #12
 8014bc4:	46bd      	mov	sp, r7
 8014bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bca:	4770      	bx	lr

08014bcc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>:
     *
     * @brief Destructor.
     *
     *        Empty virtual destructor.
     */
    virtual ~GenericCallback()
 8014bcc:	b480      	push	{r7}
 8014bce:	b083      	sub	sp, #12
 8014bd0:	af00      	add	r7, sp, #0
 8014bd2:	6078      	str	r0, [r7, #4]
    {
 8014bd4:	4a04      	ldr	r2, [pc, #16]	; (8014be8 <_ZN8touchgfx15GenericCallbackIvvvED1Ev+0x1c>)
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	601a      	str	r2, [r3, #0]
    }
 8014bda:	687b      	ldr	r3, [r7, #4]
 8014bdc:	4618      	mov	r0, r3
 8014bde:	370c      	adds	r7, #12
 8014be0:	46bd      	mov	sp, r7
 8014be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be6:	4770      	bx	lr
 8014be8:	080248cc 	.word	0x080248cc

08014bec <_ZN8touchgfx15GenericCallbackIvvvED0Ev>:
    virtual ~GenericCallback()
 8014bec:	b580      	push	{r7, lr}
 8014bee:	b082      	sub	sp, #8
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	6078      	str	r0, [r7, #4]
    }
 8014bf4:	6878      	ldr	r0, [r7, #4]
 8014bf6:	f7ff ffe9 	bl	8014bcc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 8014bfa:	2104      	movs	r1, #4
 8014bfc:	6878      	ldr	r0, [r7, #4]
 8014bfe:	f00d fc10 	bl	8022422 <_ZdlPvj>
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	4618      	mov	r0, r3
 8014c06:	3708      	adds	r7, #8
 8014c08:	46bd      	mov	sp, r7
 8014c0a:	bd80      	pop	{r7, pc}

08014c0c <_ZN8touchgfx11ApplicationD1Ev>:
class Application : public UIEventListener
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b082      	sub	sp, #8
 8014c10:	af00      	add	r7, sp, #0
 8014c12:	6078      	str	r0, [r7, #4]
 8014c14:	4a05      	ldr	r2, [pc, #20]	; (8014c2c <_ZN8touchgfx11ApplicationD1Ev+0x20>)
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	601a      	str	r2, [r3, #0]
 8014c1a:	687b      	ldr	r3, [r7, #4]
 8014c1c:	4618      	mov	r0, r3
 8014c1e:	f7ff fd4d 	bl	80146bc <_ZN8touchgfx15UIEventListenerD1Ev>
 8014c22:	687b      	ldr	r3, [r7, #4]
 8014c24:	4618      	mov	r0, r3
 8014c26:	3708      	adds	r7, #8
 8014c28:	46bd      	mov	sp, r7
 8014c2a:	bd80      	pop	{r7, pc}
 8014c2c:	08025c90 	.word	0x08025c90

08014c30 <_ZN8touchgfx11ApplicationD0Ev>:
 8014c30:	b580      	push	{r7, lr}
 8014c32:	b082      	sub	sp, #8
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	6078      	str	r0, [r7, #4]
 8014c38:	6878      	ldr	r0, [r7, #4]
 8014c3a:	f7ff ffe7 	bl	8014c0c <_ZN8touchgfx11ApplicationD1Ev>
 8014c3e:	f44f 7198 	mov.w	r1, #304	; 0x130
 8014c42:	6878      	ldr	r0, [r7, #4]
 8014c44:	f00d fbed 	bl	8022422 <_ZdlPvj>
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	4618      	mov	r0, r3
 8014c4c:	3708      	adds	r7, #8
 8014c4e:	46bd      	mov	sp, r7
 8014c50:	bd80      	pop	{r7, pc}
	...

08014c54 <_ZN8touchgfx14MVPApplicationD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~MVPApplication() { }
 8014c54:	b580      	push	{r7, lr}
 8014c56:	b082      	sub	sp, #8
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	6078      	str	r0, [r7, #4]
 8014c5c:	4a05      	ldr	r2, [pc, #20]	; (8014c74 <_ZN8touchgfx14MVPApplicationD1Ev+0x20>)
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	601a      	str	r2, [r3, #0]
 8014c62:	687b      	ldr	r3, [r7, #4]
 8014c64:	4618      	mov	r0, r3
 8014c66:	f7ff ffd1 	bl	8014c0c <_ZN8touchgfx11ApplicationD1Ev>
 8014c6a:	687b      	ldr	r3, [r7, #4]
 8014c6c:	4618      	mov	r0, r3
 8014c6e:	3708      	adds	r7, #8
 8014c70:	46bd      	mov	sp, r7
 8014c72:	bd80      	pop	{r7, pc}
 8014c74:	08024890 	.word	0x08024890

08014c78 <_ZN8touchgfx14MVPApplicationD0Ev>:
 8014c78:	b580      	push	{r7, lr}
 8014c7a:	b082      	sub	sp, #8
 8014c7c:	af00      	add	r7, sp, #0
 8014c7e:	6078      	str	r0, [r7, #4]
 8014c80:	6878      	ldr	r0, [r7, #4]
 8014c82:	f7ff ffe7 	bl	8014c54 <_ZN8touchgfx14MVPApplicationD1Ev>
 8014c86:	f44f 719c 	mov.w	r1, #312	; 0x138
 8014c8a:	6878      	ldr	r0, [r7, #4]
 8014c8c:	f00d fbc9 	bl	8022422 <_ZdlPvj>
 8014c90:	687b      	ldr	r3, [r7, #4]
 8014c92:	4618      	mov	r0, r3
 8014c94:	3708      	adds	r7, #8
 8014c96:	46bd      	mov	sp, r7
 8014c98:	bd80      	pop	{r7, pc}

08014c9a <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
     *
     * @brief Handles the pending screen transition.
     *
     *        Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8014c9a:	b580      	push	{r7, lr}
 8014c9c:	b082      	sub	sp, #8
 8014c9e:	af00      	add	r7, sp, #0
 8014ca0:	6078      	str	r0, [r7, #4]
    {
        evaluatePendingScreenTransition();
 8014ca2:	6878      	ldr	r0, [r7, #4]
 8014ca4:	f000 f804 	bl	8014cb0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>
    }
 8014ca8:	bf00      	nop
 8014caa:	3708      	adds	r7, #8
 8014cac:	46bd      	mov	sp, r7
 8014cae:	bd80      	pop	{r7, pc}

08014cb0 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv>:
     * @brief Evaluates the pending Callback instances.
     *
     *        Evaluates the pending Callback instances. If a callback is valid, it is executed
     *        and a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	b082      	sub	sp, #8
 8014cb4:	af00      	add	r7, sp, #0
 8014cb6:	6078      	str	r0, [r7, #4]
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8014cbe:	2b00      	cmp	r3, #0
 8014cc0:	d00f      	beq.n	8014ce2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	330c      	adds	r3, #12
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	4610      	mov	r0, r2
 8014cd6:	4798      	blx	r3
 8014cd8:	4603      	mov	r3, r0
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	d001      	beq.n	8014ce2 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x32>
 8014cde:	2301      	movs	r3, #1
 8014ce0:	e000      	b.n	8014ce4 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x34>
 8014ce2:	2300      	movs	r3, #0
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d00e      	beq.n	8014d06 <_ZN8touchgfx14MVPApplication31evaluatePendingScreenTransitionEv+0x56>
        {
            pendingScreenTransitionCallback->execute();
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	f8d3 2134 	ldr.w	r2, [r3, #308]	; 0x134
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
 8014cf4:	681b      	ldr	r3, [r3, #0]
 8014cf6:	3308      	adds	r3, #8
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	4610      	mov	r0, r2
 8014cfc:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8014cfe:	687b      	ldr	r3, [r7, #4]
 8014d00:	2200      	movs	r2, #0
 8014d02:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        }
    }
 8014d06:	bf00      	nop
 8014d08:	3708      	adds	r7, #8
 8014d0a:	46bd      	mov	sp, r7
 8014d0c:	bd80      	pop	{r7, pc}
	...

08014d10 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8014d10:	b580      	push	{r7, lr}
 8014d12:	b082      	sub	sp, #8
 8014d14:	af00      	add	r7, sp, #0
 8014d16:	6078      	str	r0, [r7, #4]
 8014d18:	4a08      	ldr	r2, [pc, #32]	; (8014d3c <_ZN23FrontendApplicationBaseD1Ev+0x2c>)
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	601a      	str	r2, [r3, #0]
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	f503 739c 	add.w	r3, r3, #312	; 0x138
 8014d24:	4618      	mov	r0, r3
 8014d26:	f000 fbef 	bl	8015508 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	4618      	mov	r0, r3
 8014d2e:	f7ff ff91 	bl	8014c54 <_ZN8touchgfx14MVPApplicationD1Ev>
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	4618      	mov	r0, r3
 8014d36:	3708      	adds	r7, #8
 8014d38:	46bd      	mov	sp, r7
 8014d3a:	bd80      	pop	{r7, pc}
 8014d3c:	0802483c 	.word	0x0802483c

08014d40 <_ZN23FrontendApplicationBaseD0Ev>:
 8014d40:	b580      	push	{r7, lr}
 8014d42:	b082      	sub	sp, #8
 8014d44:	af00      	add	r7, sp, #0
 8014d46:	6078      	str	r0, [r7, #4]
 8014d48:	6878      	ldr	r0, [r7, #4]
 8014d4a:	f7ff ffe1 	bl	8014d10 <_ZN23FrontendApplicationBaseD1Ev>
 8014d4e:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8014d52:	6878      	ldr	r0, [r7, #4]
 8014d54:	f00d fb65 	bl	8022422 <_ZdlPvj>
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	4618      	mov	r0, r3
 8014d5c:	3708      	adds	r7, #8
 8014d5e:	46bd      	mov	sp, r7
 8014d60:	bd80      	pop	{r7, pc}
	...

08014d64 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8014d64:	b580      	push	{r7, lr}
 8014d66:	b082      	sub	sp, #8
 8014d68:	af00      	add	r7, sp, #0
 8014d6a:	6078      	str	r0, [r7, #4]
 8014d6c:	4a05      	ldr	r2, [pc, #20]	; (8014d84 <_ZN19FrontendApplicationD1Ev+0x20>)
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	601a      	str	r2, [r3, #0]
 8014d72:	687b      	ldr	r3, [r7, #4]
 8014d74:	4618      	mov	r0, r3
 8014d76:	f7ff ffcb 	bl	8014d10 <_ZN23FrontendApplicationBaseD1Ev>
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	4618      	mov	r0, r3
 8014d7e:	3708      	adds	r7, #8
 8014d80:	46bd      	mov	sp, r7
 8014d82:	bd80      	pop	{r7, pc}
 8014d84:	08024800 	.word	0x08024800

08014d88 <_ZN19FrontendApplicationD0Ev>:
 8014d88:	b580      	push	{r7, lr}
 8014d8a:	b082      	sub	sp, #8
 8014d8c:	af00      	add	r7, sp, #0
 8014d8e:	6078      	str	r0, [r7, #4]
 8014d90:	6878      	ldr	r0, [r7, #4]
 8014d92:	f7ff ffe7 	bl	8014d64 <_ZN19FrontendApplicationD1Ev>
 8014d96:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8014d9a:	6878      	ldr	r0, [r7, #4]
 8014d9c:	f00d fb41 	bl	8022422 <_ZdlPvj>
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	4618      	mov	r0, r3
 8014da4:	3708      	adds	r7, #8
 8014da6:	46bd      	mov	sp, r7
 8014da8:	bd80      	pop	{r7, pc}

08014daa <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8014daa:	b580      	push	{r7, lr}
 8014dac:	b082      	sub	sp, #8
 8014dae:	af00      	add	r7, sp, #0
 8014db0:	6078      	str	r0, [r7, #4]
    {
        model.tick();
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8014db8:	4618      	mov	r0, r3
 8014dba:	f007 fe8d 	bl	801cad8 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	f009 fc49 	bl	801e658 <_ZN8touchgfx11Application15handleTickEventEv>
    }
 8014dc6:	bf00      	nop
 8014dc8:	3708      	adds	r7, #8
 8014dca:	46bd      	mov	sp, r7
 8014dcc:	bd80      	pop	{r7, pc}

08014dce <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
    /**
     * Determine (compile time) the Transition type of largest size.
     */
    typedef meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
 8014dce:	b580      	push	{r7, lr}
 8014dd0:	b082      	sub	sp, #8
 8014dd2:	af00      	add	r7, sp, #0
 8014dd4:	6078      	str	r0, [r7, #4]
 8014dd6:	6039      	str	r1, [r7, #0]
    {
        app.gotoScreen1ScreenNoTransition();
 8014dd8:	683b      	ldr	r3, [r7, #0]
 8014dda:	4618      	mov	r0, r3
 8014ddc:	f005 fb34 	bl	801a448 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>
    }
 8014de0:	bf00      	nop
 8014de2:	3708      	adds	r7, #8
 8014de4:	46bd      	mov	sp, r7
 8014de6:	bd80      	pop	{r7, pc}

08014de8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>:
protected:
    FrontendHeapBase(AbstractPartition& presenters, AbstractPartition& views, AbstractPartition& transitions, FrontendApplication& app)
 8014de8:	b580      	push	{r7, lr}
 8014dea:	b086      	sub	sp, #24
 8014dec:	af02      	add	r7, sp, #8
 8014dee:	60f8      	str	r0, [r7, #12]
 8014df0:	60b9      	str	r1, [r7, #8]
 8014df2:	607a      	str	r2, [r7, #4]
 8014df4:	603b      	str	r3, [r7, #0]
        : MVPHeap(presenters, views, transitions, app)
 8014df6:	68f8      	ldr	r0, [r7, #12]
 8014df8:	69bb      	ldr	r3, [r7, #24]
 8014dfa:	9300      	str	r3, [sp, #0]
 8014dfc:	683b      	ldr	r3, [r7, #0]
 8014dfe:	687a      	ldr	r2, [r7, #4]
 8014e00:	68b9      	ldr	r1, [r7, #8]
 8014e02:	f7ff fe6d 	bl	8014ae0 <_ZN8touchgfx7MVPHeapC1ERNS_17AbstractPartitionES2_S2_RNS_14MVPApplicationE>
 8014e06:	4a04      	ldr	r2, [pc, #16]	; (8014e18 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication+0x30>)
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	601a      	str	r2, [r3, #0]
    {

    }
 8014e0c:	68fb      	ldr	r3, [r7, #12]
 8014e0e:	4618      	mov	r0, r3
 8014e10:	3710      	adds	r7, #16
 8014e12:	46bd      	mov	sp, r7
 8014e14:	bd80      	pop	{r7, pc}
 8014e16:	bf00      	nop
 8014e18:	080247ec 	.word	0x080247ec

08014e1c <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 8014e1c:	b580      	push	{r7, lr}
 8014e1e:	af00      	add	r7, sp, #0
 8014e20:	4801      	ldr	r0, [pc, #4]	; (8014e28 <__tcf_0+0xc>)
 8014e22:	f000 fab7 	bl	8015394 <_ZN12FrontendHeapD1Ev>
 8014e26:	bd80      	pop	{r7, pc}
 8014e28:	20008314 	.word	0x20008314

08014e2c <_ZN12FrontendHeap11getInstanceEv>:
    static FrontendHeap& getInstance()
 8014e2c:	b580      	push	{r7, lr}
 8014e2e:	af00      	add	r7, sp, #0
        static FrontendHeap instance;
 8014e30:	4b08      	ldr	r3, [pc, #32]	; (8014e54 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	f003 0301 	and.w	r3, r3, #1
 8014e38:	2b00      	cmp	r3, #0
 8014e3a:	d108      	bne.n	8014e4e <_ZN12FrontendHeap11getInstanceEv+0x22>
 8014e3c:	4806      	ldr	r0, [pc, #24]	; (8014e58 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
 8014e3e:	f000 f831 	bl	8014ea4 <_ZN12FrontendHeapC1Ev>
 8014e42:	4b04      	ldr	r3, [pc, #16]	; (8014e54 <_ZN12FrontendHeap11getInstanceEv+0x28>)
 8014e44:	2201      	movs	r2, #1
 8014e46:	601a      	str	r2, [r3, #0]
 8014e48:	4804      	ldr	r0, [pc, #16]	; (8014e5c <_ZN12FrontendHeap11getInstanceEv+0x30>)
 8014e4a:	f00d fb25 	bl	8022498 <atexit>
        return instance;
 8014e4e:	4b02      	ldr	r3, [pc, #8]	; (8014e58 <_ZN12FrontendHeap11getInstanceEv+0x2c>)
    }
 8014e50:	4618      	mov	r0, r3
 8014e52:	bd80      	pop	{r7, pc}
 8014e54:	20008720 	.word	0x20008720
 8014e58:	20008314 	.word	0x20008314
 8014e5c:	08014e1d 	.word	0x08014e1d

08014e60 <_ZN16FrontendHeapBaseD1Ev>:
class FrontendHeapBase : public MVPHeap
 8014e60:	b580      	push	{r7, lr}
 8014e62:	b082      	sub	sp, #8
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	6078      	str	r0, [r7, #4]
 8014e68:	4a05      	ldr	r2, [pc, #20]	; (8014e80 <_ZN16FrontendHeapBaseD1Ev+0x20>)
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	601a      	str	r2, [r3, #0]
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	4618      	mov	r0, r3
 8014e72:	f7ff fe55 	bl	8014b20 <_ZN8touchgfx7MVPHeapD1Ev>
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	4618      	mov	r0, r3
 8014e7a:	3708      	adds	r7, #8
 8014e7c:	46bd      	mov	sp, r7
 8014e7e:	bd80      	pop	{r7, pc}
 8014e80:	080247ec 	.word	0x080247ec

08014e84 <_ZN16FrontendHeapBaseD0Ev>:
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b082      	sub	sp, #8
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]
 8014e8c:	6878      	ldr	r0, [r7, #4]
 8014e8e:	f7ff ffe7 	bl	8014e60 <_ZN16FrontendHeapBaseD1Ev>
 8014e92:	2114      	movs	r1, #20
 8014e94:	6878      	ldr	r0, [r7, #4]
 8014e96:	f00d fac4 	bl	8022422 <_ZdlPvj>
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	4618      	mov	r0, r3
 8014e9e:	3708      	adds	r7, #8
 8014ea0:	46bd      	mov	sp, r7
 8014ea2:	bd80      	pop	{r7, pc}

08014ea4 <_ZN12FrontendHeapC1Ev>:
    Partition< CombinedTransitionTypes, 1 > transitions;
    FrontendApplication app;
    Model model;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
 8014ea4:	b590      	push	{r4, r7, lr}
 8014ea6:	b085      	sub	sp, #20
 8014ea8:	af02      	add	r7, sp, #8
 8014eaa:	6078      	str	r0, [r7, #4]
                     app(model, *this)
 8014eac:	6878      	ldr	r0, [r7, #4]
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	f103 0114 	add.w	r1, r3, #20
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	f103 022c 	add.w	r2, r3, #44	; 0x2c
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	f503 7416 	add.w	r4, r3, #600	; 0x258
 8014ec0:	687b      	ldr	r3, [r7, #4]
 8014ec2:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8014ec6:	9300      	str	r3, [sp, #0]
 8014ec8:	4623      	mov	r3, r4
 8014eca:	f7ff ff8d 	bl	8014de8 <_ZN16FrontendHeapBaseC1ERN8touchgfx17AbstractPartitionES2_S2_R19FrontendApplication>
 8014ece:	4a18      	ldr	r2, [pc, #96]	; (8014f30 <_ZN12FrontendHeapC1Ev+0x8c>)
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	601a      	str	r2, [r3, #0]
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	3314      	adds	r3, #20
 8014ed8:	4618      	mov	r0, r3
 8014eda:	f000 f927 	bl	801512c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	332c      	adds	r3, #44	; 0x2c
 8014ee2:	4618      	mov	r0, r3
 8014ee4:	f000 f956 	bl	8015194 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8014eee:	4618      	mov	r0, r3
 8014ef0:	f000 f986 	bl	8015200 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	f503 702e 	add.w	r0, r3, #696	; 0x2b8
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8014f00:	687a      	ldr	r2, [r7, #4]
 8014f02:	4619      	mov	r1, r3
 8014f04:	f007 fdc4 	bl	801ca90 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8014f0e:	4618      	mov	r0, r3
 8014f10:	f007 fdd4 	bl	801cabc <_ZN5ModelC1Ev>
    {
        gotoStartScreen(app);
 8014f14:	687a      	ldr	r2, [r7, #4]
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 8014f1c:	4619      	mov	r1, r3
 8014f1e:	4610      	mov	r0, r2
 8014f20:	f7ff ff55 	bl	8014dce <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>
    }
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	4618      	mov	r0, r3
 8014f28:	370c      	adds	r7, #12
 8014f2a:	46bd      	mov	sp, r7
 8014f2c:	bd90      	pop	{r4, r7, pc}
 8014f2e:	bf00      	nop
 8014f30:	0802473c 	.word	0x0802473c

08014f34 <_ZN8touchgfx8LCD16bppD1Ev>:
 */
class LCD16bpp : public LCD
{
public:

    virtual ~LCD16bpp() {}
 8014f34:	b580      	push	{r7, lr}
 8014f36:	b082      	sub	sp, #8
 8014f38:	af00      	add	r7, sp, #0
 8014f3a:	6078      	str	r0, [r7, #4]
 8014f3c:	4a05      	ldr	r2, [pc, #20]	; (8014f54 <_ZN8touchgfx8LCD16bppD1Ev+0x20>)
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	601a      	str	r2, [r3, #0]
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	4618      	mov	r0, r3
 8014f46:	f7ff fe0b 	bl	8014b60 <_ZN8touchgfx3LCDD1Ev>
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	3708      	adds	r7, #8
 8014f50:	46bd      	mov	sp, r7
 8014f52:	bd80      	pop	{r7, pc}
 8014f54:	080263ac 	.word	0x080263ac

08014f58 <_ZN8touchgfx8LCD16bppD0Ev>:
 8014f58:	b580      	push	{r7, lr}
 8014f5a:	b082      	sub	sp, #8
 8014f5c:	af00      	add	r7, sp, #0
 8014f5e:	6078      	str	r0, [r7, #4]
 8014f60:	6878      	ldr	r0, [r7, #4]
 8014f62:	f7ff ffe7 	bl	8014f34 <_ZN8touchgfx8LCD16bppD1Ev>
 8014f66:	2104      	movs	r1, #4
 8014f68:	6878      	ldr	r0, [r7, #4]
 8014f6a:	f00d fa5a 	bl	8022422 <_ZdlPvj>
 8014f6e:	687b      	ldr	r3, [r7, #4]
 8014f70:	4618      	mov	r0, r3
 8014f72:	3708      	adds	r7, #8
 8014f74:	46bd      	mov	sp, r7
 8014f76:	bd80      	pop	{r7, pc}

08014f78 <_ZN10STM32F7HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
     * @param [in,out] display Reference to LCD interface.
     * @param [in,out] tc      Reference to Touch Controller driver.
     * @param width            Width of the display.
     * @param height           Height of the display.
     */
    STM32F7HAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height) : touchgfx::HAL(dma, display, tc, width, height)
 8014f78:	b580      	push	{r7, lr}
 8014f7a:	b086      	sub	sp, #24
 8014f7c:	af02      	add	r7, sp, #8
 8014f7e:	60f8      	str	r0, [r7, #12]
 8014f80:	60b9      	str	r1, [r7, #8]
 8014f82:	607a      	str	r2, [r7, #4]
 8014f84:	603b      	str	r3, [r7, #0]
 8014f86:	68f8      	ldr	r0, [r7, #12]
 8014f88:	8bbb      	ldrh	r3, [r7, #28]
 8014f8a:	9301      	str	r3, [sp, #4]
 8014f8c:	8b3b      	ldrh	r3, [r7, #24]
 8014f8e:	9300      	str	r3, [sp, #0]
 8014f90:	683b      	ldr	r3, [r7, #0]
 8014f92:	687a      	ldr	r2, [r7, #4]
 8014f94:	68b9      	ldr	r1, [r7, #8]
 8014f96:	f7ff fc5f 	bl	8014858 <_ZN8touchgfx3HALC1ERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEtt>
 8014f9a:	4a04      	ldr	r2, [pc, #16]	; (8014fac <_ZN10STM32F7HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x34>)
 8014f9c:	68fb      	ldr	r3, [r7, #12]
 8014f9e:	601a      	str	r2, [r3, #0]
    {
    }
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	3710      	adds	r7, #16
 8014fa6:	46bd      	mov	sp, r7
 8014fa8:	bd80      	pop	{r7, pc}
 8014faa:	bf00      	nop
 8014fac:	080249fc 	.word	0x080249fc

08014fb0 <_ZN8touchgfx15TouchControllerC1Ev>:
class TouchController
 8014fb0:	b480      	push	{r7}
 8014fb2:	b083      	sub	sp, #12
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
 8014fb8:	4a04      	ldr	r2, [pc, #16]	; (8014fcc <_ZN8touchgfx15TouchControllerC1Ev+0x1c>)
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	601a      	str	r2, [r3, #0]
 8014fbe:	687b      	ldr	r3, [r7, #4]
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	370c      	adds	r7, #12
 8014fc4:	46bd      	mov	sp, r7
 8014fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fca:	4770      	bx	lr
 8014fcc:	08023f18 	.word	0x08023f18

08014fd0 <_ZN8touchgfx22STM32F7TouchControllerC1Ev>:
namespace touchgfx
{
class STM32F7TouchController: public TouchController
{
public:
    STM32F7TouchController() {}
 8014fd0:	b580      	push	{r7, lr}
 8014fd2:	b082      	sub	sp, #8
 8014fd4:	af00      	add	r7, sp, #0
 8014fd6:	6078      	str	r0, [r7, #4]
 8014fd8:	687b      	ldr	r3, [r7, #4]
 8014fda:	4618      	mov	r0, r3
 8014fdc:	f7ff ffe8 	bl	8014fb0 <_ZN8touchgfx15TouchControllerC1Ev>
 8014fe0:	4a03      	ldr	r2, [pc, #12]	; (8014ff0 <_ZN8touchgfx22STM32F7TouchControllerC1Ev+0x20>)
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	601a      	str	r2, [r3, #0]
 8014fe6:	687b      	ldr	r3, [r7, #4]
 8014fe8:	4618      	mov	r0, r3
 8014fea:	3708      	adds	r7, #8
 8014fec:	46bd      	mov	sp, r7
 8014fee:	bd80      	pop	{r7, pc}
 8014ff0:	08024b70 	.word	0x08024b70

08014ff4 <LCD_GetXSize>:

static uint32_t frameBuf0 = (uint32_t)(0xc0000000);
extern "C" {

uint32_t LCD_GetXSize(void)
{
 8014ff4:	b480      	push	{r7}
 8014ff6:	af00      	add	r7, sp, #0
  return 480;
 8014ff8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
}
 8014ffc:	4618      	mov	r0, r3
 8014ffe:	46bd      	mov	sp, r7
 8015000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015004:	4770      	bx	lr

08015006 <LCD_GetYSize>:

uint32_t LCD_GetYSize(void)
{
 8015006:	b480      	push	{r7}
 8015008:	af00      	add	r7, sp, #0
  return 272;
 801500a:	f44f 7388 	mov.w	r3, #272	; 0x110
}
 801500e:	4618      	mov	r0, r3
 8015010:	46bd      	mov	sp, r7
 8015012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015016:	4770      	bx	lr

08015018 <_Z16GRAPHICS_HW_Initv>:
}

void GRAPHICS_HW_Init()
{
 8015018:	b580      	push	{r7, lr}
 801501a:	af00      	add	r7, sp, #0
    

    /* Initialize the SDRAM */
    MX_FMC_Init();
 801501c:	f000 fc78 	bl	8015910 <_Z11MX_FMC_Initv>
    MX_SDRAM_InitEx();
 8015020:	f000 fccc 	bl	80159bc <_Z15MX_SDRAM_InitExv>

    /* Configure LCD */
    MX_LCD_Init();
 8015024:	f000 fbe4 	bl	80157f0 <_Z11MX_LCD_Initv>
    GPIO::init();
 8015028:	f000 fbb9 	bl	801579e <_ZN8touchgfx4GPIO4initEv>

//Deactivate speculative/cache access to first FMC Bank to save FMC bandwidth
    FMC_Bank1->BTCR[0] = 0x000030D2;
 801502c:	f04f 4320 	mov.w	r3, #2684354560	; 0xa0000000
 8015030:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8015034:	601a      	str	r2, [r3, #0]
}
 8015036:	bf00      	nop
 8015038:	bd80      	pop	{r7, pc}
	...

0801503c <_ZN8touchgfx22STM32F7InstrumentationC1Ev>:
#include <stdint.h>
#include <main.h>
    
namespace touchgfx
{
class STM32F7Instrumentation: public MCUInstrumentation
 801503c:	b580      	push	{r7, lr}
 801503e:	b082      	sub	sp, #8
 8015040:	af00      	add	r7, sp, #0
 8015042:	6078      	str	r0, [r7, #4]
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	4618      	mov	r0, r3
 8015048:	f7ff fb8e 	bl	8014768 <_ZN8touchgfx18MCUInstrumentationC1Ev>
 801504c:	4a03      	ldr	r2, [pc, #12]	; (801505c <_ZN8touchgfx22STM32F7InstrumentationC1Ev+0x20>)
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	601a      	str	r2, [r3, #0]
 8015052:	687b      	ldr	r3, [r7, #4]
 8015054:	4618      	mov	r0, r3
 8015056:	3708      	adds	r7, #8
 8015058:	46bd      	mov	sp, r7
 801505a:	bd80      	pop	{r7, pc}
 801505c:	08024b48 	.word	0x08024b48

08015060 <_ZN8touchgfx13touchgfx_initEv>:
static uint16_t bitdepth = 16;

namespace touchgfx
{
void touchgfx_init()
{
 8015060:	b590      	push	{r4, r7, lr}
 8015062:	b087      	sub	sp, #28
 8015064:	af04      	add	r7, sp, #16
  uint16_t dispWidth = 480;
 8015066:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801506a:	80fb      	strh	r3, [r7, #6]
  uint16_t dispHeight = 272;  
 801506c:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015070:	80bb      	strh	r3, [r7, #4]
  
    HAL& hal = touchgfx_generic_init<STM32F7HAL>(dma, display, tc, dispWidth, dispHeight,(uint16_t*) 0, 
                                               0, 0);
 8015072:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8015076:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801507a:	2200      	movs	r2, #0
 801507c:	9203      	str	r2, [sp, #12]
 801507e:	2200      	movs	r2, #0
 8015080:	9202      	str	r2, [sp, #8]
 8015082:	2200      	movs	r2, #0
 8015084:	9201      	str	r2, [sp, #4]
 8015086:	9300      	str	r3, [sp, #0]
 8015088:	460b      	mov	r3, r1
 801508a:	4a19      	ldr	r2, [pc, #100]	; (80150f0 <_ZN8touchgfx13touchgfx_initEv+0x90>)
 801508c:	4919      	ldr	r1, [pc, #100]	; (80150f4 <_ZN8touchgfx13touchgfx_initEv+0x94>)
 801508e:	481a      	ldr	r0, [pc, #104]	; (80150f8 <_ZN8touchgfx13touchgfx_initEv+0x98>)
 8015090:	f000 f8ea 	bl	8015268 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm>
 8015094:	6038      	str	r0, [r7, #0]

    hal.setFrameBufferStartAddress((uint16_t*)frameBuf0, bitdepth ,true , true);
 8015096:	683b      	ldr	r3, [r7, #0]
 8015098:	681b      	ldr	r3, [r3, #0]
 801509a:	3374      	adds	r3, #116	; 0x74
 801509c:	681c      	ldr	r4, [r3, #0]
 801509e:	4b17      	ldr	r3, [pc, #92]	; (80150fc <_ZN8touchgfx13touchgfx_initEv+0x9c>)
 80150a0:	681b      	ldr	r3, [r3, #0]
 80150a2:	4619      	mov	r1, r3
 80150a4:	4b16      	ldr	r3, [pc, #88]	; (8015100 <_ZN8touchgfx13touchgfx_initEv+0xa0>)
 80150a6:	881a      	ldrh	r2, [r3, #0]
 80150a8:	2301      	movs	r3, #1
 80150aa:	9300      	str	r3, [sp, #0]
 80150ac:	2301      	movs	r3, #1
 80150ae:	6838      	ldr	r0, [r7, #0]
 80150b0:	47a0      	blx	r4

    hal.setTouchSampleRate(2);
 80150b2:	2102      	movs	r1, #2
 80150b4:	6838      	ldr	r0, [r7, #0]
 80150b6:	f7ff fca1 	bl	80149fc <_ZN8touchgfx3HAL18setTouchSampleRateEa>
    hal.setFingerSize(1);
 80150ba:	2101      	movs	r1, #1
 80150bc:	6838      	ldr	r0, [r7, #0]
 80150be:	f7ff fccf 	bl	8014a60 <_ZN8touchgfx3HAL13setFingerSizeEh>

    // By default frame rate compensation is off.
    // Enable frame rate compensation to smooth out animations in case there is periodic slow frame rates.
    hal.setFrameRateCompensation(false);
 80150c2:	2100      	movs	r1, #0
 80150c4:	6838      	ldr	r0, [r7, #0]
 80150c6:	f7ff fc89 	bl	80149dc <_ZN8touchgfx3HAL24setFrameRateCompensationEb>

    // This platform can handle simultaneous DMA and TFT accesses to SDRAM, so disable lock to increase performance.
    hal.lockDMAToFrontPorch(false);
 80150ca:	2100      	movs	r1, #0
 80150cc:	6838      	ldr	r0, [r7, #0]
 80150ce:	f7ff fc75 	bl	80149bc <_ZN8touchgfx3HAL19lockDMAToFrontPorchEb>

    mcuInstr.init();
 80150d2:	480c      	ldr	r0, [pc, #48]	; (8015104 <_ZN8touchgfx13touchgfx_initEv+0xa4>)
 80150d4:	f001 fe0a 	bl	8016cec <_ZN8touchgfx22STM32F7Instrumentation4initEv>

    //Set MCU instrumentation and Load calculation
    hal.setMCUInstrumentation(&mcuInstr);
 80150d8:	490a      	ldr	r1, [pc, #40]	; (8015104 <_ZN8touchgfx13touchgfx_initEv+0xa4>)
 80150da:	6838      	ldr	r0, [r7, #0]
 80150dc:	f7ff fca2 	bl	8014a24 <_ZN8touchgfx3HAL21setMCUInstrumentationEPNS_18MCUInstrumentationE>
    hal.enableMCULoadCalculation(true);
 80150e0:	2101      	movs	r1, #1
 80150e2:	6838      	ldr	r0, [r7, #0]
 80150e4:	f7ff fcac 	bl	8014a40 <_ZN8touchgfx3HAL24enableMCULoadCalculationEb>
}
 80150e8:	bf00      	nop
 80150ea:	370c      	adds	r7, #12
 80150ec:	46bd      	mov	sp, r7
 80150ee:	bd90      	pop	{r4, r7, pc}
 80150f0:	200091c8 	.word	0x200091c8
 80150f4:	20000068 	.word	0x20000068
 80150f8:	20008728 	.word	0x20008728
 80150fc:	20000064 	.word	0x20000064
 8015100:	2000006c 	.word	0x2000006c
 8015104:	200091cc 	.word	0x200091cc

08015108 <_Z13GRAPHICS_Initv>:
}

void GRAPHICS_Init()
{
 8015108:	b580      	push	{r7, lr}
 801510a:	af00      	add	r7, sp, #0
   touchgfx::touchgfx_init();
 801510c:	f7ff ffa8 	bl	8015060 <_ZN8touchgfx13touchgfx_initEv>
}
 8015110:	bf00      	nop
 8015112:	bd80      	pop	{r7, pc}

08015114 <_Z17GRAPHICS_MainTaskv>:

void GRAPHICS_MainTask(void)
{
 8015114:	b580      	push	{r7, lr}
 8015116:	af00      	add	r7, sp, #0
    touchgfx::HAL::getInstance()->taskEntry();
 8015118:	f7fa f9b0 	bl	800f47c <_ZN8touchgfx3HAL11getInstanceEv>
 801511c:	4602      	mov	r2, r0
 801511e:	6813      	ldr	r3, [r2, #0]
 8015120:	330c      	adds	r3, #12
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	4610      	mov	r0, r2
 8015126:	4798      	blx	r3
}
 8015128:	bf00      	nop
 801512a:	bd80      	pop	{r7, pc}

0801512c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs an empty Partition.
     */
    Partition() : AbstractPartition()
 801512c:	b580      	push	{r7, lr}
 801512e:	b082      	sub	sp, #8
 8015130:	af00      	add	r7, sp, #0
 8015132:	6078      	str	r0, [r7, #4]
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	4618      	mov	r0, r3
 8015138:	f007 ffe0 	bl	801d0fc <_ZN8touchgfx17AbstractPartitionC1Ev>
 801513c:	4a03      	ldr	r2, [pc, #12]	; (801514c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 801513e:	687b      	ldr	r3, [r7, #4]
 8015140:	601a      	str	r2, [r3, #0]
    {
    }
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	4618      	mov	r0, r3
 8015146:	3708      	adds	r7, #8
 8015148:	46bd      	mov	sp, r7
 801514a:	bd80      	pop	{r7, pc}
 801514c:	080247b8 	.word	0x080247b8

08015150 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    /**
     * @fn virtual Partition::~Partition()
     *
     * @brief Destructor.
     */
    virtual ~Partition()
 8015150:	b580      	push	{r7, lr}
 8015152:	b082      	sub	sp, #8
 8015154:	af00      	add	r7, sp, #0
 8015156:	6078      	str	r0, [r7, #4]
    {
    }
 8015158:	4a05      	ldr	r2, [pc, #20]	; (8015170 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	601a      	str	r2, [r3, #0]
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	4618      	mov	r0, r3
 8015162:	f007 ffc9 	bl	801d0f8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8015166:	687b      	ldr	r3, [r7, #4]
 8015168:	4618      	mov	r0, r3
 801516a:	3708      	adds	r7, #8
 801516c:	46bd      	mov	sp, r7
 801516e:	bd80      	pop	{r7, pc}
 8015170:	080247b8 	.word	0x080247b8

08015174 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 8015174:	b580      	push	{r7, lr}
 8015176:	b082      	sub	sp, #8
 8015178:	af00      	add	r7, sp, #0
 801517a:	6078      	str	r0, [r7, #4]
    }
 801517c:	6878      	ldr	r0, [r7, #4]
 801517e:	f7ff ffe7 	bl	8015150 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8015182:	2118      	movs	r1, #24
 8015184:	6878      	ldr	r0, [r7, #4]
 8015186:	f00d f94c 	bl	8022422 <_ZdlPvj>
 801518a:	687b      	ldr	r3, [r7, #4]
 801518c:	4618      	mov	r0, r3
 801518e:	3708      	adds	r7, #8
 8015190:	46bd      	mov	sp, r7
 8015192:	bd80      	pop	{r7, pc}

08015194 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8015194:	b580      	push	{r7, lr}
 8015196:	b082      	sub	sp, #8
 8015198:	af00      	add	r7, sp, #0
 801519a:	6078      	str	r0, [r7, #4]
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	4618      	mov	r0, r3
 80151a0:	f007 ffac 	bl	801d0fc <_ZN8touchgfx17AbstractPartitionC1Ev>
 80151a4:	4a03      	ldr	r2, [pc, #12]	; (80151b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EEC1Ev+0x20>)
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	601a      	str	r2, [r3, #0]
    }
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	4618      	mov	r0, r3
 80151ae:	3708      	adds	r7, #8
 80151b0:	46bd      	mov	sp, r7
 80151b2:	bd80      	pop	{r7, pc}
 80151b4:	08024784 	.word	0x08024784

080151b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
    virtual ~Partition()
 80151b8:	b580      	push	{r7, lr}
 80151ba:	b082      	sub	sp, #8
 80151bc:	af00      	add	r7, sp, #0
 80151be:	6078      	str	r0, [r7, #4]
    }
 80151c0:	4a05      	ldr	r2, [pc, #20]	; (80151d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x20>)
 80151c2:	687b      	ldr	r3, [r7, #4]
 80151c4:	601a      	str	r2, [r3, #0]
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	4618      	mov	r0, r3
 80151ca:	f007 ff95 	bl	801d0f8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	4618      	mov	r0, r3
 80151d2:	3708      	adds	r7, #8
 80151d4:	46bd      	mov	sp, r7
 80151d6:	bd80      	pop	{r7, pc}
 80151d8:	08024784 	.word	0x08024784

080151dc <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
    virtual ~Partition()
 80151dc:	b580      	push	{r7, lr}
 80151de:	b082      	sub	sp, #8
 80151e0:	af00      	add	r7, sp, #0
 80151e2:	6078      	str	r0, [r7, #4]
    }
 80151e4:	6878      	ldr	r0, [r7, #4]
 80151e6:	f7ff ffe7 	bl	80151b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80151ea:	f44f 710b 	mov.w	r1, #556	; 0x22c
 80151ee:	6878      	ldr	r0, [r7, #4]
 80151f0:	f00d f917 	bl	8022422 <_ZdlPvj>
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	4618      	mov	r0, r3
 80151f8:	3708      	adds	r7, #8
 80151fa:	46bd      	mov	sp, r7
 80151fc:	bd80      	pop	{r7, pc}
	...

08015200 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev>:
    Partition() : AbstractPartition()
 8015200:	b580      	push	{r7, lr}
 8015202:	b082      	sub	sp, #8
 8015204:	af00      	add	r7, sp, #0
 8015206:	6078      	str	r0, [r7, #4]
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	4618      	mov	r0, r3
 801520c:	f007 ff76 	bl	801d0fc <_ZN8touchgfx17AbstractPartitionC1Ev>
 8015210:	4a03      	ldr	r2, [pc, #12]	; (8015220 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EEC1Ev+0x20>)
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	601a      	str	r2, [r3, #0]
    }
 8015216:	687b      	ldr	r3, [r7, #4]
 8015218:	4618      	mov	r0, r3
 801521a:	3708      	adds	r7, #8
 801521c:	46bd      	mov	sp, r7
 801521e:	bd80      	pop	{r7, pc}
 8015220:	08024750 	.word	0x08024750

08015224 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>:
    virtual ~Partition()
 8015224:	b580      	push	{r7, lr}
 8015226:	b082      	sub	sp, #8
 8015228:	af00      	add	r7, sp, #0
 801522a:	6078      	str	r0, [r7, #4]
    }
 801522c:	4a05      	ldr	r2, [pc, #20]	; (8015244 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev+0x20>)
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	601a      	str	r2, [r3, #0]
 8015232:	687b      	ldr	r3, [r7, #4]
 8015234:	4618      	mov	r0, r3
 8015236:	f007 ff5f 	bl	801d0f8 <_ZN8touchgfx17AbstractPartitionD1Ev>
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	4618      	mov	r0, r3
 801523e:	3708      	adds	r7, #8
 8015240:	46bd      	mov	sp, r7
 8015242:	bd80      	pop	{r7, pc}
 8015244:	08024750 	.word	0x08024750

08015248 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED0Ev>:
    virtual ~Partition()
 8015248:	b580      	push	{r7, lr}
 801524a:	b082      	sub	sp, #8
 801524c:	af00      	add	r7, sp, #0
 801524e:	6078      	str	r0, [r7, #4]
    }
 8015250:	6878      	ldr	r0, [r7, #4]
 8015252:	f7ff ffe7 	bl	8015224 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 8015256:	2160      	movs	r1, #96	; 0x60
 8015258:	6878      	ldr	r0, [r7, #4]
 801525a:	f00d f8e2 	bl	8022422 <_ZdlPvj>
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	4618      	mov	r0, r3
 8015262:	3708      	adds	r7, #8
 8015264:	46bd      	mov	sp, r7
 8015266:	bd80      	pop	{r7, pc}

08015268 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm>:
 * @param numberOfDynamicBitmaps Number of dynamic bitmaps.
 *
 * @return A reference to the allocated (and initialized) HAL object.
 */
template <class HALType>
HAL& touchgfx_generic_init(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height,
 8015268:	b590      	push	{r4, r7, lr}
 801526a:	b089      	sub	sp, #36	; 0x24
 801526c:	af02      	add	r7, sp, #8
 801526e:	60f8      	str	r0, [r7, #12]
 8015270:	60b9      	str	r1, [r7, #8]
 8015272:	607a      	str	r2, [r7, #4]
 8015274:	807b      	strh	r3, [r7, #2]
                           uint16_t* bitmapCache, uint32_t bitmapCacheSize, uint32_t numberOfDynamicBitmaps = 0)
{
    HAL& hal = getHAL<HALType>(dma, display, tc, width, height);
 8015276:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801527a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 801527e:	9300      	str	r3, [sp, #0]
 8015280:	4613      	mov	r3, r2
 8015282:	687a      	ldr	r2, [r7, #4]
 8015284:	68b9      	ldr	r1, [r7, #8]
 8015286:	68f8      	ldr	r0, [r7, #12]
 8015288:	f000 f85c 	bl	8015344 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss>
 801528c:	6178      	str	r0, [r7, #20]
    hal.initialize();
 801528e:	6978      	ldr	r0, [r7, #20]
 8015290:	f008 f906 	bl	801d4a0 <_ZN8touchgfx3HAL10initializeEv>

    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(),
 8015294:	f007 fb3c 	bl	801c910 <_ZN14BitmapDatabase11getInstanceEv>
 8015298:	4604      	mov	r4, r0
 801529a:	f007 fb43 	bl	801c924 <_ZN14BitmapDatabase15getInstanceSizeEv>
 801529e:	4603      	mov	r3, r0
 80152a0:	4619      	mov	r1, r3
 80152a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80152a4:	9300      	str	r3, [sp, #0]
 80152a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80152a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80152aa:	4620      	mov	r0, r4
 80152ac:	f00a ffd6 	bl	802025c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
                                   BitmapDatabase::getInstanceSize(),
                                   bitmapCache,
                                   bitmapCacheSize,
                                   numberOfDynamicBitmaps);

    TypedText::registerTexts(&texts);
 80152b0:	480d      	ldr	r0, [pc, #52]	; (80152e8 <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x80>)
 80152b2:	f7ff fbe5 	bl	8014a80 <_ZN8touchgfx9TypedText13registerTextsEPKNS_5TextsE>
    Texts::setLanguage(0);
 80152b6:	2000      	movs	r0, #0
 80152b8:	f007 fb58 	bl	801c96c <_ZN8touchgfx5Texts11setLanguageEt>

    FontManager::setFontProvider(&fontProvider);
 80152bc:	480b      	ldr	r0, [pc, #44]	; (80152ec <_ZN8touchgfx21touchgfx_generic_initI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEssPtmm+0x84>)
 80152be:	f00a ff37 	bl	8020130 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>

    FrontendHeap& heap = FrontendHeap::getInstance();
 80152c2:	f7ff fdb3 	bl	8014e2c <_ZN12FrontendHeap11getInstanceEv>
 80152c6:	6138      	str	r0, [r7, #16]
    (void)heap; // we need to obtain the reference above to initialize the frontend heap.

    hal.registerEventListener(*(Application::getInstance()));
 80152c8:	697b      	ldr	r3, [r7, #20]
 80152ca:	681b      	ldr	r3, [r3, #0]
 80152cc:	3350      	adds	r3, #80	; 0x50
 80152ce:	681c      	ldr	r4, [r3, #0]
 80152d0:	f009 fa8c 	bl	801e7ec <_ZN8touchgfx11Application11getInstanceEv>
 80152d4:	4603      	mov	r3, r0
 80152d6:	4619      	mov	r1, r3
 80152d8:	6978      	ldr	r0, [r7, #20]
 80152da:	47a0      	blx	r4

    return hal;
 80152dc:	697b      	ldr	r3, [r7, #20]
}
 80152de:	4618      	mov	r0, r3
 80152e0:	371c      	adds	r7, #28
 80152e2:	46bd      	mov	sp, r7
 80152e4:	bd90      	pop	{r4, r7, pc}
 80152e6:	bf00      	nop
 80152e8:	20008724 	.word	0x20008724
 80152ec:	20000060 	.word	0x20000060

080152f0 <_ZN10STM32F7HALD1Ev>:
class STM32F7HAL : public touchgfx::HAL
 80152f0:	b580      	push	{r7, lr}
 80152f2:	b082      	sub	sp, #8
 80152f4:	af00      	add	r7, sp, #0
 80152f6:	6078      	str	r0, [r7, #4]
 80152f8:	4a05      	ldr	r2, [pc, #20]	; (8015310 <_ZN10STM32F7HALD1Ev+0x20>)
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	601a      	str	r2, [r3, #0]
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	4618      	mov	r0, r3
 8015302:	f7ff fb3b 	bl	801497c <_ZN8touchgfx3HALD1Ev>
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	4618      	mov	r0, r3
 801530a:	3708      	adds	r7, #8
 801530c:	46bd      	mov	sp, r7
 801530e:	bd80      	pop	{r7, pc}
 8015310:	080249fc 	.word	0x080249fc

08015314 <_ZN10STM32F7HALD0Ev>:
 8015314:	b580      	push	{r7, lr}
 8015316:	b082      	sub	sp, #8
 8015318:	af00      	add	r7, sp, #0
 801531a:	6078      	str	r0, [r7, #4]
 801531c:	6878      	ldr	r0, [r7, #4]
 801531e:	f7ff ffe7 	bl	80152f0 <_ZN10STM32F7HALD1Ev>
 8015322:	2168      	movs	r1, #104	; 0x68
 8015324:	6878      	ldr	r0, [r7, #4]
 8015326:	f00d f87c 	bl	8022422 <_ZdlPvj>
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	4618      	mov	r0, r3
 801532e:	3708      	adds	r7, #8
 8015330:	46bd      	mov	sp, r7
 8015332:	bd80      	pop	{r7, pc}

08015334 <__tcf_1>:
    static T hal(dma, display, tc, width, height);
 8015334:	b580      	push	{r7, lr}
 8015336:	af00      	add	r7, sp, #0
 8015338:	4801      	ldr	r0, [pc, #4]	; (8015340 <__tcf_1+0xc>)
 801533a:	f7ff ffd9 	bl	80152f0 <_ZN10STM32F7HALD1Ev>
 801533e:	bd80      	pop	{r7, pc}
 8015340:	200091dc 	.word	0x200091dc

08015344 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss>:
HAL& getHAL(DMA_Interface& dma, LCD& display, TouchController& tc, int16_t width, int16_t height)
 8015344:	b580      	push	{r7, lr}
 8015346:	b086      	sub	sp, #24
 8015348:	af02      	add	r7, sp, #8
 801534a:	60f8      	str	r0, [r7, #12]
 801534c:	60b9      	str	r1, [r7, #8]
 801534e:	607a      	str	r2, [r7, #4]
 8015350:	807b      	strh	r3, [r7, #2]
    static T hal(dma, display, tc, width, height);
 8015352:	4b0d      	ldr	r3, [pc, #52]	; (8015388 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x44>)
 8015354:	681b      	ldr	r3, [r3, #0]
 8015356:	f003 0301 	and.w	r3, r3, #1
 801535a:	2b00      	cmp	r3, #0
 801535c:	d10f      	bne.n	801537e <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x3a>
 801535e:	887b      	ldrh	r3, [r7, #2]
 8015360:	8b3a      	ldrh	r2, [r7, #24]
 8015362:	9201      	str	r2, [sp, #4]
 8015364:	9300      	str	r3, [sp, #0]
 8015366:	687b      	ldr	r3, [r7, #4]
 8015368:	68ba      	ldr	r2, [r7, #8]
 801536a:	68f9      	ldr	r1, [r7, #12]
 801536c:	4807      	ldr	r0, [pc, #28]	; (801538c <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x48>)
 801536e:	f7ff fe03 	bl	8014f78 <_ZN10STM32F7HALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
 8015372:	4b05      	ldr	r3, [pc, #20]	; (8015388 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x44>)
 8015374:	2201      	movs	r2, #1
 8015376:	601a      	str	r2, [r3, #0]
 8015378:	4805      	ldr	r0, [pc, #20]	; (8015390 <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x4c>)
 801537a:	f00d f88d 	bl	8022498 <atexit>
    return hal;
 801537e:	4b03      	ldr	r3, [pc, #12]	; (801538c <_ZN8touchgfx6getHALI10STM32F7HALEERNS_3HALERNS_13DMA_InterfaceERNS_3LCDERNS_15TouchControllerEss+0x48>)
}
 8015380:	4618      	mov	r0, r3
 8015382:	3710      	adds	r7, #16
 8015384:	46bd      	mov	sp, r7
 8015386:	bd80      	pop	{r7, pc}
 8015388:	20009244 	.word	0x20009244
 801538c:	200091dc 	.word	0x200091dc
 8015390:	08015335 	.word	0x08015335

08015394 <_ZN12FrontendHeapD1Ev>:
class FrontendHeap : public FrontendHeapBase
 8015394:	b580      	push	{r7, lr}
 8015396:	b082      	sub	sp, #8
 8015398:	af00      	add	r7, sp, #0
 801539a:	6078      	str	r0, [r7, #4]
 801539c:	4a10      	ldr	r2, [pc, #64]	; (80153e0 <_ZN12FrontendHeapD1Ev+0x4c>)
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	601a      	str	r2, [r3, #0]
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	f503 732e 	add.w	r3, r3, #696	; 0x2b8
 80153a8:	4618      	mov	r0, r3
 80153aa:	f7ff fcdb 	bl	8014d64 <_ZN19FrontendApplicationD1Ev>
 80153ae:	687b      	ldr	r3, [r7, #4]
 80153b0:	f503 7316 	add.w	r3, r3, #600	; 0x258
 80153b4:	4618      	mov	r0, r3
 80153b6:	f7ff ff35 	bl	8015224 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EED1Ev>
 80153ba:	687b      	ldr	r3, [r7, #4]
 80153bc:	332c      	adds	r3, #44	; 0x2c
 80153be:	4618      	mov	r0, r3
 80153c0:	f7ff fefa 	bl	80151b8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80153c4:	687b      	ldr	r3, [r7, #4]
 80153c6:	3314      	adds	r3, #20
 80153c8:	4618      	mov	r0, r3
 80153ca:	f7ff fec1 	bl	8015150 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80153ce:	687b      	ldr	r3, [r7, #4]
 80153d0:	4618      	mov	r0, r3
 80153d2:	f7ff fd45 	bl	8014e60 <_ZN16FrontendHeapBaseD1Ev>
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	4618      	mov	r0, r3
 80153da:	3708      	adds	r7, #8
 80153dc:	46bd      	mov	sp, r7
 80153de:	bd80      	pop	{r7, pc}
 80153e0:	0802473c 	.word	0x0802473c

080153e4 <_ZN12FrontendHeapD0Ev>:
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b082      	sub	sp, #8
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	6078      	str	r0, [r7, #4]
 80153ec:	6878      	ldr	r0, [r7, #4]
 80153ee:	f7ff ffd1 	bl	8015394 <_ZN12FrontendHeapD1Ev>
 80153f2:	f240 410c 	movw	r1, #1036	; 0x40c
 80153f6:	6878      	ldr	r0, [r7, #4]
 80153f8:	f00d f813 	bl	8022422 <_ZdlPvj>
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	4618      	mov	r0, r3
 8015400:	3708      	adds	r7, #8
 8015402:	46bd      	mov	sp, r7
 8015404:	bd80      	pop	{r7, pc}
	...

08015408 <_ZN8touchgfx22STM32F7InstrumentationD1Ev>:
 8015408:	b580      	push	{r7, lr}
 801540a:	b082      	sub	sp, #8
 801540c:	af00      	add	r7, sp, #0
 801540e:	6078      	str	r0, [r7, #4]
 8015410:	4a05      	ldr	r2, [pc, #20]	; (8015428 <_ZN8touchgfx22STM32F7InstrumentationD1Ev+0x20>)
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	601a      	str	r2, [r3, #0]
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	4618      	mov	r0, r3
 801541a:	f7ff f9bb 	bl	8014794 <_ZN8touchgfx18MCUInstrumentationD1Ev>
 801541e:	687b      	ldr	r3, [r7, #4]
 8015420:	4618      	mov	r0, r3
 8015422:	3708      	adds	r7, #8
 8015424:	46bd      	mov	sp, r7
 8015426:	bd80      	pop	{r7, pc}
 8015428:	08024b48 	.word	0x08024b48

0801542c <_ZN8touchgfx22STM32F7InstrumentationD0Ev>:
 801542c:	b580      	push	{r7, lr}
 801542e:	b082      	sub	sp, #8
 8015430:	af00      	add	r7, sp, #0
 8015432:	6078      	str	r0, [r7, #4]
 8015434:	6878      	ldr	r0, [r7, #4]
 8015436:	f7ff ffe7 	bl	8015408 <_ZN8touchgfx22STM32F7InstrumentationD1Ev>
 801543a:	2110      	movs	r1, #16
 801543c:	6878      	ldr	r0, [r7, #4]
 801543e:	f00c fff0 	bl	8022422 <_ZdlPvj>
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	4618      	mov	r0, r3
 8015446:	3708      	adds	r7, #8
 8015448:	46bd      	mov	sp, r7
 801544a:	bd80      	pop	{r7, pc}

0801544c <_ZN8touchgfx22STM32F7TouchControllerD1Ev>:
class STM32F7TouchController: public TouchController
 801544c:	b580      	push	{r7, lr}
 801544e:	b082      	sub	sp, #8
 8015450:	af00      	add	r7, sp, #0
 8015452:	6078      	str	r0, [r7, #4]
 8015454:	4a05      	ldr	r2, [pc, #20]	; (801546c <_ZN8touchgfx22STM32F7TouchControllerD1Ev+0x20>)
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	601a      	str	r2, [r3, #0]
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	4618      	mov	r0, r3
 801545e:	f7f8 ff6f 	bl	800e340 <_ZN8touchgfx15TouchControllerD1Ev>
 8015462:	687b      	ldr	r3, [r7, #4]
 8015464:	4618      	mov	r0, r3
 8015466:	3708      	adds	r7, #8
 8015468:	46bd      	mov	sp, r7
 801546a:	bd80      	pop	{r7, pc}
 801546c:	08024b70 	.word	0x08024b70

08015470 <_ZN8touchgfx22STM32F7TouchControllerD0Ev>:
 8015470:	b580      	push	{r7, lr}
 8015472:	b082      	sub	sp, #8
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
 8015478:	6878      	ldr	r0, [r7, #4]
 801547a:	f7ff ffe7 	bl	801544c <_ZN8touchgfx22STM32F7TouchControllerD1Ev>
 801547e:	2104      	movs	r1, #4
 8015480:	6878      	ldr	r0, [r7, #4]
 8015482:	f00c ffce 	bl	8022422 <_ZdlPvj>
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	4618      	mov	r0, r3
 801548a:	3708      	adds	r7, #8
 801548c:	46bd      	mov	sp, r7
 801548e:	bd80      	pop	{r7, pc}

08015490 <_Z41__static_initialization_and_destruction_0ii>:
 8015490:	b580      	push	{r7, lr}
 8015492:	b082      	sub	sp, #8
 8015494:	af00      	add	r7, sp, #0
 8015496:	6078      	str	r0, [r7, #4]
 8015498:	6039      	str	r1, [r7, #0]
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	2b01      	cmp	r3, #1
 801549e:	d10d      	bne.n	80154bc <_Z41__static_initialization_and_destruction_0ii+0x2c>
 80154a0:	683b      	ldr	r3, [r7, #0]
 80154a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80154a6:	4293      	cmp	r3, r2
 80154a8:	d108      	bne.n	80154bc <_Z41__static_initialization_and_destruction_0ii+0x2c>
STM32F7DMA dma;
 80154aa:	4812      	ldr	r0, [pc, #72]	; (80154f4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80154ac:	f000 fde4 	bl	8016078 <_ZN10STM32F7DMAC1Ev>
STM32F7TouchController tc;
 80154b0:	4811      	ldr	r0, [pc, #68]	; (80154f8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80154b2:	f7ff fd8d 	bl	8014fd0 <_ZN8touchgfx22STM32F7TouchControllerC1Ev>
STM32F7Instrumentation mcuInstr;
 80154b6:	4811      	ldr	r0, [pc, #68]	; (80154fc <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80154b8:	f7ff fdc0 	bl	801503c <_ZN8touchgfx22STM32F7InstrumentationC1Ev>
static LCD16bpp display;
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d113      	bne.n	80154ea <_Z41__static_initialization_and_destruction_0ii+0x5a>
 80154c2:	683b      	ldr	r3, [r7, #0]
 80154c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80154c8:	4293      	cmp	r3, r2
 80154ca:	d10e      	bne.n	80154ea <_Z41__static_initialization_and_destruction_0ii+0x5a>
 80154cc:	480c      	ldr	r0, [pc, #48]	; (8015500 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 80154ce:	f7ff fd31 	bl	8014f34 <_ZN8touchgfx8LCD16bppD1Ev>
STM32F7Instrumentation mcuInstr;
 80154d2:	480a      	ldr	r0, [pc, #40]	; (80154fc <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 80154d4:	f7ff ff98 	bl	8015408 <_ZN8touchgfx22STM32F7InstrumentationD1Ev>
STM32F7TouchController tc;
 80154d8:	4807      	ldr	r0, [pc, #28]	; (80154f8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 80154da:	f7ff ffb7 	bl	801544c <_ZN8touchgfx22STM32F7TouchControllerD1Ev>
STM32F7DMA dma;
 80154de:	4805      	ldr	r0, [pc, #20]	; (80154f4 <_Z41__static_initialization_and_destruction_0ii+0x64>)
 80154e0:	f000 fdf4 	bl	80160cc <_ZN10STM32F7DMAD1Ev>
static ApplicationFontProvider fontProvider;
 80154e4:	4807      	ldr	r0, [pc, #28]	; (8015504 <_Z41__static_initialization_and_destruction_0ii+0x74>)
 80154e6:	f000 f831 	bl	801554c <_ZN23ApplicationFontProviderD1Ev>
}
 80154ea:	bf00      	nop
 80154ec:	3708      	adds	r7, #8
 80154ee:	46bd      	mov	sp, r7
 80154f0:	bd80      	pop	{r7, pc}
 80154f2:	bf00      	nop
 80154f4:	20008728 	.word	0x20008728
 80154f8:	200091c8 	.word	0x200091c8
 80154fc:	200091cc 	.word	0x200091cc
 8015500:	20000068 	.word	0x20000068
 8015504:	20000060 	.word	0x20000060

08015508 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 *       three arguments of any type.
 *
 * @tparam dest_type The type of the class in which the member function resides.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8015508:	b580      	push	{r7, lr}
 801550a:	b082      	sub	sp, #8
 801550c:	af00      	add	r7, sp, #0
 801550e:	6078      	str	r0, [r7, #4]
 8015510:	4a05      	ldr	r2, [pc, #20]	; (8015528 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev+0x20>)
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	601a      	str	r2, [r3, #0]
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	4618      	mov	r0, r3
 801551a:	f7ff fb57 	bl	8014bcc <_ZN8touchgfx15GenericCallbackIvvvED1Ev>
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	4618      	mov	r0, r3
 8015522:	3708      	adds	r7, #8
 8015524:	46bd      	mov	sp, r7
 8015526:	bd80      	pop	{r7, pc}
 8015528:	08024878 	.word	0x08024878

0801552c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
 801552c:	b580      	push	{r7, lr}
 801552e:	b082      	sub	sp, #8
 8015530:	af00      	add	r7, sp, #0
 8015532:	6078      	str	r0, [r7, #4]
 8015534:	6878      	ldr	r0, [r7, #4]
 8015536:	f7ff ffe7 	bl	8015508 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
 801553a:	2110      	movs	r1, #16
 801553c:	6878      	ldr	r0, [r7, #4]
 801553e:	f00c ff70 	bl	8022422 <_ZdlPvj>
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	4618      	mov	r0, r3
 8015546:	3708      	adds	r7, #8
 8015548:	46bd      	mov	sp, r7
 801554a:	bd80      	pop	{r7, pc}

0801554c <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId DEFAULT = 0;
    static const touchgfx::FontId LARGE = 1;
    static const touchgfx::FontId SMALL = 2;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 801554c:	b580      	push	{r7, lr}
 801554e:	b082      	sub	sp, #8
 8015550:	af00      	add	r7, sp, #0
 8015552:	6078      	str	r0, [r7, #4]
 8015554:	4a05      	ldr	r2, [pc, #20]	; (801556c <_ZN23ApplicationFontProviderD1Ev+0x20>)
 8015556:	687b      	ldr	r3, [r7, #4]
 8015558:	601a      	str	r2, [r3, #0]
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	4618      	mov	r0, r3
 801555e:	f7ff fa9f 	bl	8014aa0 <_ZN8touchgfx12FontProviderD1Ev>
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	4618      	mov	r0, r3
 8015566:	3708      	adds	r7, #8
 8015568:	46bd      	mov	sp, r7
 801556a:	bd80      	pop	{r7, pc}
 801556c:	08024bb4 	.word	0x08024bb4

08015570 <_ZN23ApplicationFontProviderD0Ev>:
 8015570:	b580      	push	{r7, lr}
 8015572:	b082      	sub	sp, #8
 8015574:	af00      	add	r7, sp, #0
 8015576:	6078      	str	r0, [r7, #4]
 8015578:	6878      	ldr	r0, [r7, #4]
 801557a:	f7ff ffe7 	bl	801554c <_ZN23ApplicationFontProviderD1Ev>
 801557e:	2104      	movs	r1, #4
 8015580:	6878      	ldr	r0, [r7, #4]
 8015582:	f00c ff4e 	bl	8022422 <_ZdlPvj>
 8015586:	687b      	ldr	r3, [r7, #4]
 8015588:	4618      	mov	r0, r3
 801558a:	3708      	adds	r7, #8
 801558c:	46bd      	mov	sp, r7
 801558e:	bd80      	pop	{r7, pc}

08015590 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE8capacityEv>:
     *
     * @return An uint16_t.
     *
     * @see touchgfx::AbstractPartition::capacity()
     */
    virtual uint16_t capacity() const
 8015590:	b480      	push	{r7}
 8015592:	b083      	sub	sp, #12
 8015594:	af00      	add	r7, sp, #0
 8015596:	6078      	str	r0, [r7, #4]
    {
        return NUMBER_OF_ELEMENTS;
 8015598:	2301      	movs	r3, #1
    }
 801559a:	4618      	mov	r0, r3
 801559c:	370c      	adds	r7, #12
 801559e:	46bd      	mov	sp, r7
 80155a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a4:	4770      	bx	lr

080155a6 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE12element_sizeEv>:
     *
     * @return An uint32_t.
     *
     * @see touchgfx::AbstractPartition::element_size()
     */
    virtual uint32_t element_size()
 80155a6:	b480      	push	{r7}
 80155a8:	b083      	sub	sp, #12
 80155aa:	af00      	add	r7, sp, #0
 80155ac:	6078      	str	r0, [r7, #4]
    {
        return sizeof(stBlocks[0]);
 80155ae:	2358      	movs	r3, #88	; 0x58
    }
 80155b0:	4618      	mov	r0, r3
 80155b2:	370c      	adds	r7, #12
 80155b4:	46bd      	mov	sp, r7
 80155b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155ba:	4770      	bx	lr

080155bc <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual void* element(uint16_t index)
 80155bc:	b480      	push	{r7}
 80155be:	b083      	sub	sp, #12
 80155c0:	af00      	add	r7, sp, #0
 80155c2:	6078      	str	r0, [r7, #4]
 80155c4:	460b      	mov	r3, r1
 80155c6:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80155c8:	887b      	ldrh	r3, [r7, #2]
 80155ca:	2258      	movs	r2, #88	; 0x58
 80155cc:	fb02 f303 	mul.w	r3, r2, r3
 80155d0:	3308      	adds	r3, #8
 80155d2:	687a      	ldr	r2, [r7, #4]
 80155d4:	4413      	add	r3, r2
    }
 80155d6:	4618      	mov	r0, r3
 80155d8:	370c      	adds	r7, #12
 80155da:	46bd      	mov	sp, r7
 80155dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e0:	4770      	bx	lr

080155e2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_15SlideTransitionILNS_9DirectionE3EEENS2_INS1_3NilES6_EEEELt1EE7elementEt>:
     *
     * @return null if it fails, else a void*.
     *
     * @see touchgfx::AbstractPartition::element()
     */
    virtual const void* element(uint16_t index) const
 80155e2:	b480      	push	{r7}
 80155e4:	b083      	sub	sp, #12
 80155e6:	af00      	add	r7, sp, #0
 80155e8:	6078      	str	r0, [r7, #4]
 80155ea:	460b      	mov	r3, r1
 80155ec:	807b      	strh	r3, [r7, #2]
    {
        return &stBlocks[index];
 80155ee:	887b      	ldrh	r3, [r7, #2]
 80155f0:	2258      	movs	r2, #88	; 0x58
 80155f2:	fb02 f303 	mul.w	r3, r2, r3
 80155f6:	3308      	adds	r3, #8
 80155f8:	687a      	ldr	r2, [r7, #4]
 80155fa:	4413      	add	r3, r2
    }
 80155fc:	4618      	mov	r0, r3
 80155fe:	370c      	adds	r7, #12
 8015600:	46bd      	mov	sp, r7
 8015602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015606:	4770      	bx	lr

08015608 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8015608:	b480      	push	{r7}
 801560a:	b083      	sub	sp, #12
 801560c:	af00      	add	r7, sp, #0
 801560e:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 8015610:	2301      	movs	r3, #1
    }
 8015612:	4618      	mov	r0, r3
 8015614:	370c      	adds	r7, #12
 8015616:	46bd      	mov	sp, r7
 8015618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801561c:	4770      	bx	lr

0801561e <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801561e:	b480      	push	{r7}
 8015620:	b083      	sub	sp, #12
 8015622:	af00      	add	r7, sp, #0
 8015624:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 8015626:	f44f 7309 	mov.w	r3, #548	; 0x224
    }
 801562a:	4618      	mov	r0, r3
 801562c:	370c      	adds	r7, #12
 801562e:	46bd      	mov	sp, r7
 8015630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015634:	4770      	bx	lr

08015636 <_ZN8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 8015636:	b480      	push	{r7}
 8015638:	b083      	sub	sp, #12
 801563a:	af00      	add	r7, sp, #0
 801563c:	6078      	str	r0, [r7, #4]
 801563e:	460b      	mov	r3, r1
 8015640:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 8015642:	887b      	ldrh	r3, [r7, #2]
 8015644:	f44f 7209 	mov.w	r2, #548	; 0x224
 8015648:	fb02 f303 	mul.w	r3, r2, r3
 801564c:	3308      	adds	r3, #8
 801564e:	687a      	ldr	r2, [r7, #4]
 8015650:	4413      	add	r3, r2
    }
 8015652:	4618      	mov	r0, r3
 8015654:	370c      	adds	r7, #12
 8015656:	46bd      	mov	sp, r7
 8015658:	f85d 7b04 	ldr.w	r7, [sp], #4
 801565c:	4770      	bx	lr

0801565e <_ZNK8touchgfx9PartitionINS_4meta8TypeListI11Screen1ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 801565e:	b480      	push	{r7}
 8015660:	b083      	sub	sp, #12
 8015662:	af00      	add	r7, sp, #0
 8015664:	6078      	str	r0, [r7, #4]
 8015666:	460b      	mov	r3, r1
 8015668:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 801566a:	887b      	ldrh	r3, [r7, #2]
 801566c:	f44f 7209 	mov.w	r2, #548	; 0x224
 8015670:	fb02 f303 	mul.w	r3, r2, r3
 8015674:	3308      	adds	r3, #8
 8015676:	687a      	ldr	r2, [r7, #4]
 8015678:	4413      	add	r3, r2
    }
 801567a:	4618      	mov	r0, r3
 801567c:	370c      	adds	r7, #12
 801567e:	46bd      	mov	sp, r7
 8015680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015684:	4770      	bx	lr

08015686 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    virtual uint16_t capacity() const
 8015686:	b480      	push	{r7}
 8015688:	b083      	sub	sp, #12
 801568a:	af00      	add	r7, sp, #0
 801568c:	6078      	str	r0, [r7, #4]
        return NUMBER_OF_ELEMENTS;
 801568e:	2301      	movs	r3, #1
    }
 8015690:	4618      	mov	r0, r3
 8015692:	370c      	adds	r7, #12
 8015694:	46bd      	mov	sp, r7
 8015696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801569a:	4770      	bx	lr

0801569c <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    virtual uint32_t element_size()
 801569c:	b480      	push	{r7}
 801569e:	b083      	sub	sp, #12
 80156a0:	af00      	add	r7, sp, #0
 80156a2:	6078      	str	r0, [r7, #4]
        return sizeof(stBlocks[0]);
 80156a4:	2310      	movs	r3, #16
    }
 80156a6:	4618      	mov	r0, r3
 80156a8:	370c      	adds	r7, #12
 80156aa:	46bd      	mov	sp, r7
 80156ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156b0:	4770      	bx	lr

080156b2 <_ZN8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual void* element(uint16_t index)
 80156b2:	b480      	push	{r7}
 80156b4:	b083      	sub	sp, #12
 80156b6:	af00      	add	r7, sp, #0
 80156b8:	6078      	str	r0, [r7, #4]
 80156ba:	460b      	mov	r3, r1
 80156bc:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80156be:	887b      	ldrh	r3, [r7, #2]
 80156c0:	011b      	lsls	r3, r3, #4
 80156c2:	3308      	adds	r3, #8
 80156c4:	687a      	ldr	r2, [r7, #4]
 80156c6:	4413      	add	r3, r2
    }
 80156c8:	4618      	mov	r0, r3
 80156ca:	370c      	adds	r7, #12
 80156cc:	46bd      	mov	sp, r7
 80156ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156d2:	4770      	bx	lr

080156d4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI16Screen2PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
    virtual const void* element(uint16_t index) const
 80156d4:	b480      	push	{r7}
 80156d6:	b083      	sub	sp, #12
 80156d8:	af00      	add	r7, sp, #0
 80156da:	6078      	str	r0, [r7, #4]
 80156dc:	460b      	mov	r3, r1
 80156de:	807b      	strh	r3, [r7, #2]
        return &stBlocks[index];
 80156e0:	887b      	ldrh	r3, [r7, #2]
 80156e2:	011b      	lsls	r3, r3, #4
 80156e4:	3308      	adds	r3, #8
 80156e6:	687a      	ldr	r2, [r7, #4]
 80156e8:	4413      	add	r3, r2
    }
 80156ea:	4618      	mov	r0, r3
 80156ec:	370c      	adds	r7, #12
 80156ee:	46bd      	mov	sp, r7
 80156f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156f4:	4770      	bx	lr

080156f6 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:
     * @brief Calls the member function.
     *
     *        Calls the member function. Do not call execute unless isValid() returns true (ie.
     *        a pointer to the object and the function has been set).
     */
    virtual void execute()
 80156f6:	b580      	push	{r7, lr}
 80156f8:	b082      	sub	sp, #8
 80156fa:	af00      	add	r7, sp, #0
 80156fc:	6078      	str	r0, [r7, #4]
    {
        (pobject->*pmemfun_0)();
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	685b      	ldr	r3, [r3, #4]
 8015702:	687a      	ldr	r2, [r7, #4]
 8015704:	68d2      	ldr	r2, [r2, #12]
 8015706:	1052      	asrs	r2, r2, #1
 8015708:	1899      	adds	r1, r3, r2
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	68db      	ldr	r3, [r3, #12]
 801570e:	f003 0301 	and.w	r3, r3, #1
 8015712:	2b00      	cmp	r3, #0
 8015714:	d102      	bne.n	801571c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x26>
 8015716:	687b      	ldr	r3, [r7, #4]
 8015718:	689b      	ldr	r3, [r3, #8]
 801571a:	e00a      	b.n	8015732 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv+0x3c>
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	685b      	ldr	r3, [r3, #4]
 8015720:	687a      	ldr	r2, [r7, #4]
 8015722:	68d2      	ldr	r2, [r2, #12]
 8015724:	1052      	asrs	r2, r2, #1
 8015726:	4413      	add	r3, r2
 8015728:	681b      	ldr	r3, [r3, #0]
 801572a:	687a      	ldr	r2, [r7, #4]
 801572c:	6892      	ldr	r2, [r2, #8]
 801572e:	4413      	add	r3, r2
 8015730:	681b      	ldr	r3, [r3, #0]
 8015732:	4608      	mov	r0, r1
 8015734:	4798      	blx	r3
    }
 8015736:	bf00      	nop
 8015738:	3708      	adds	r7, #8
 801573a:	46bd      	mov	sp, r7
 801573c:	bd80      	pop	{r7, pc}

0801573e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
     *
     *        Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 801573e:	b480      	push	{r7}
 8015740:	b083      	sub	sp, #12
 8015742:	af00      	add	r7, sp, #0
 8015744:	6078      	str	r0, [r7, #4]
    {
        return (pobject != 0) && (pmemfun_0 != 0);
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	685b      	ldr	r3, [r3, #4]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d010      	beq.n	8015770 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	689b      	ldr	r3, [r3, #8]
 8015752:	2b00      	cmp	r3, #0
 8015754:	d107      	bne.n	8015766 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	68db      	ldr	r3, [r3, #12]
 801575a:	f003 0301 	and.w	r3, r3, #1
 801575e:	2b00      	cmp	r3, #0
 8015760:	d101      	bne.n	8015766 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x28>
 8015762:	2301      	movs	r3, #1
 8015764:	e000      	b.n	8015768 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x2a>
 8015766:	2300      	movs	r3, #0
 8015768:	2b01      	cmp	r3, #1
 801576a:	d001      	beq.n	8015770 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x32>
 801576c:	2301      	movs	r3, #1
 801576e:	e000      	b.n	8015772 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x34>
 8015770:	2300      	movs	r3, #0
    }
 8015772:	4618      	mov	r0, r3
 8015774:	370c      	adds	r7, #12
 8015776:	46bd      	mov	sp, r7
 8015778:	f85d 7b04 	ldr.w	r7, [sp], #4
 801577c:	4770      	bx	lr

0801577e <_GLOBAL__sub_I_LCD_GetXSize>:
 801577e:	b580      	push	{r7, lr}
 8015780:	af00      	add	r7, sp, #0
 8015782:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015786:	2001      	movs	r0, #1
 8015788:	f7ff fe82 	bl	8015490 <_Z41__static_initialization_and_destruction_0ii>
 801578c:	bd80      	pop	{r7, pc}

0801578e <_GLOBAL__sub_D_LCD_GetXSize>:
 801578e:	b580      	push	{r7, lr}
 8015790:	af00      	add	r7, sp, #0
 8015792:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8015796:	2000      	movs	r0, #0
 8015798:	f7ff fe7a 	bl	8015490 <_Z41__static_initialization_and_destruction_0ii>
 801579c:	bd80      	pop	{r7, pc}

0801579e <_ZN8touchgfx4GPIO4initEv>:
/* USER CODE END user includes */

using namespace touchgfx;

void GPIO::init()
{
 801579e:	b480      	push	{r7}
 80157a0:	af00      	add	r7, sp, #0
}
 80157a2:	bf00      	nop
 80157a4:	46bd      	mov	sp, r7
 80157a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157aa:	4770      	bx	lr

080157ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:

void GPIO::set(GPIO_ID id)
{
 80157ac:	b480      	push	{r7}
 80157ae:	b083      	sub	sp, #12
 80157b0:	af00      	add	r7, sp, #0
 80157b2:	4603      	mov	r3, r0
 80157b4:	71fb      	strb	r3, [r7, #7]
}
 80157b6:	bf00      	nop
 80157b8:	370c      	adds	r7, #12
 80157ba:	46bd      	mov	sp, r7
 80157bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157c0:	4770      	bx	lr

080157c2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:

void GPIO::clear(GPIO_ID id)
{
 80157c2:	b480      	push	{r7}
 80157c4:	b083      	sub	sp, #12
 80157c6:	af00      	add	r7, sp, #0
 80157c8:	4603      	mov	r3, r0
 80157ca:	71fb      	strb	r3, [r7, #7]
}
 80157cc:	bf00      	nop
 80157ce:	370c      	adds	r7, #12
 80157d0:	46bd      	mov	sp, r7
 80157d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157d6:	4770      	bx	lr

080157d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:

void GPIO::toggle(GPIO_ID id)
{
 80157d8:	b480      	push	{r7}
 80157da:	b083      	sub	sp, #12
 80157dc:	af00      	add	r7, sp, #0
 80157de:	4603      	mov	r3, r0
 80157e0:	71fb      	strb	r3, [r7, #7]
}
 80157e2:	bf00      	nop
 80157e4:	370c      	adds	r7, #12
 80157e6:	46bd      	mov	sp, r7
 80157e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157ec:	4770      	bx	lr
	...

080157f0 <_Z11MX_LCD_Initv>:
  * @param  LayerIndex : layer Index.
  * @retval None
  */

void MX_LCD_Init(void) 
{ 
 80157f0:	b580      	push	{r7, lr}
 80157f2:	b08e      	sub	sp, #56	; 0x38
 80157f4:	af00      	add	r7, sp, #0
 LTDC_LayerCfgTypeDef pLayerCfg;

/* De-Initialize LTDC */
  HAL_LTDC_DeInit(&hltdc);
 80157f6:	4844      	ldr	r0, [pc, #272]	; (8015908 <_Z11MX_LCD_Initv+0x118>)
 80157f8:	f7ef fd6a 	bl	80052d0 <HAL_LTDC_DeInit>
/* Configure LTDC */

  hltdc.Instance = LTDC;
 80157fc:	4b42      	ldr	r3, [pc, #264]	; (8015908 <_Z11MX_LCD_Initv+0x118>)
 80157fe:	4a43      	ldr	r2, [pc, #268]	; (801590c <_Z11MX_LCD_Initv+0x11c>)
 8015800:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8015802:	4b41      	ldr	r3, [pc, #260]	; (8015908 <_Z11MX_LCD_Initv+0x118>)
 8015804:	2200      	movs	r2, #0
 8015806:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8015808:	4b3f      	ldr	r3, [pc, #252]	; (8015908 <_Z11MX_LCD_Initv+0x118>)
 801580a:	2200      	movs	r2, #0
 801580c:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 801580e:	4b3e      	ldr	r3, [pc, #248]	; (8015908 <_Z11MX_LCD_Initv+0x118>)
 8015810:	2200      	movs	r2, #0
 8015812:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8015814:	4b3c      	ldr	r3, [pc, #240]	; (8015908 <_Z11MX_LCD_Initv+0x118>)
 8015816:	2200      	movs	r2, #0
 8015818:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 801581a:	4b3b      	ldr	r3, [pc, #236]	; (8015908 <_Z11MX_LCD_Initv+0x118>)
 801581c:	2228      	movs	r2, #40	; 0x28
 801581e:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8015820:	4b39      	ldr	r3, [pc, #228]	; (8015908 <_Z11MX_LCD_Initv+0x118>)
 8015822:	2209      	movs	r2, #9
 8015824:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8015826:	4b38      	ldr	r3, [pc, #224]	; (8015908 <_Z11MX_LCD_Initv+0x118>)
 8015828:	2235      	movs	r2, #53	; 0x35
 801582a:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 801582c:	4b36      	ldr	r3, [pc, #216]	; (8015908 <_Z11MX_LCD_Initv+0x118>)
 801582e:	220b      	movs	r2, #11
 8015830:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8015832:	4b35      	ldr	r3, [pc, #212]	; (8015908 <_Z11MX_LCD_Initv+0x118>)
 8015834:	f240 2215 	movw	r2, #533	; 0x215
 8015838:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 801583a:	4b33      	ldr	r3, [pc, #204]	; (8015908 <_Z11MX_LCD_Initv+0x118>)
 801583c:	f240 121b 	movw	r2, #283	; 0x11b
 8015840:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8015842:	4b31      	ldr	r3, [pc, #196]	; (8015908 <_Z11MX_LCD_Initv+0x118>)
 8015844:	f240 2235 	movw	r2, #565	; 0x235
 8015848:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 801584a:	4b2f      	ldr	r3, [pc, #188]	; (8015908 <_Z11MX_LCD_Initv+0x118>)
 801584c:	f240 121d 	movw	r2, #285	; 0x11d
 8015850:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8015852:	4b2d      	ldr	r3, [pc, #180]	; (8015908 <_Z11MX_LCD_Initv+0x118>)
 8015854:	2200      	movs	r2, #0
 8015856:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 801585a:	4b2b      	ldr	r3, [pc, #172]	; (8015908 <_Z11MX_LCD_Initv+0x118>)
 801585c:	2200      	movs	r2, #0
 801585e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8015862:	4b29      	ldr	r3, [pc, #164]	; (8015908 <_Z11MX_LCD_Initv+0x118>)
 8015864:	2200      	movs	r2, #0
 8015866:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 801586a:	4827      	ldr	r0, [pc, #156]	; (8015908 <_Z11MX_LCD_Initv+0x118>)
 801586c:	f7ef fc60 	bl	8005130 <HAL_LTDC_Init>
 8015870:	4603      	mov	r3, r0
 8015872:	2b00      	cmp	r3, #0
 8015874:	bf14      	ite	ne
 8015876:	2301      	movne	r3, #1
 8015878:	2300      	moveq	r3, #0
 801587a:	b2db      	uxtb	r3, r3
 801587c:	2b00      	cmp	r3, #0
 801587e:	d001      	beq.n	8015884 <_Z11MX_LCD_Initv+0x94>
  {
    Error_Handler( );
 8015880:	f002 fdaa 	bl	80183d8 <Error_Handler>
  }

  pLayerCfg.WindowX0 = 0;
 8015884:	2300      	movs	r3, #0
 8015886:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8015888:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801588c:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 801588e:	2300      	movs	r3, #0
 8015890:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8015892:	f44f 7388 	mov.w	r3, #272	; 0x110
 8015896:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8015898:	2302      	movs	r3, #2
 801589a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 801589c:	23ff      	movs	r3, #255	; 0xff
 801589e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80158a0:	2300      	movs	r3, #0
 80158a2:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80158a4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80158a8:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80158aa:	2307      	movs	r3, #7
 80158ac:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80158ae:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80158b2:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80158b4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80158b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 80158ba:	f44f 7388 	mov.w	r3, #272	; 0x110
 80158be:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80158c0:	2300      	movs	r3, #0
 80158c2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 80158c6:	2300      	movs	r3, #0
 80158c8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 80158cc:	2300      	movs	r3, #0
 80158ce:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80158d2:	1d3b      	adds	r3, r7, #4
 80158d4:	2200      	movs	r2, #0
 80158d6:	4619      	mov	r1, r3
 80158d8:	480b      	ldr	r0, [pc, #44]	; (8015908 <_Z11MX_LCD_Initv+0x118>)
 80158da:	f7ef fdc9 	bl	8005470 <HAL_LTDC_ConfigLayer>
 80158de:	4603      	mov	r3, r0
 80158e0:	2b00      	cmp	r3, #0
 80158e2:	bf14      	ite	ne
 80158e4:	2301      	movne	r3, #1
 80158e6:	2300      	moveq	r3, #0
 80158e8:	b2db      	uxtb	r3, r3
 80158ea:	2b00      	cmp	r3, #0
 80158ec:	d001      	beq.n	80158f2 <_Z11MX_LCD_Initv+0x102>
  {
    Error_Handler( );
 80158ee:	f002 fd73 	bl	80183d8 <Error_Handler>
  }

 HAL_LTDC_SetPitch(&hltdc, 480, 0);
 80158f2:	2200      	movs	r2, #0
 80158f4:	f44f 71f0 	mov.w	r1, #480	; 0x1e0
 80158f8:	4803      	ldr	r0, [pc, #12]	; (8015908 <_Z11MX_LCD_Initv+0x118>)
 80158fa:	f7ef fdf7 	bl	80054ec <HAL_LTDC_SetPitch>

}
 80158fe:	bf00      	nop
 8015900:	3738      	adds	r7, #56	; 0x38
 8015902:	46bd      	mov	sp, r7
 8015904:	bd80      	pop	{r7, pc}
 8015906:	bf00      	nop
 8015908:	20009248 	.word	0x20009248
 801590c:	40016800 	.word	0x40016800

08015910 <_Z11MX_FMC_Initv>:

/**
  * @brief  Initializes LCD IO.
  */ 
void MX_FMC_Init(void) 
{  
 8015910:	b580      	push	{r7, lr}
 8015912:	b088      	sub	sp, #32
 8015914:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8015916:	1d3b      	adds	r3, r7, #4
 8015918:	2200      	movs	r2, #0
 801591a:	601a      	str	r2, [r3, #0]
 801591c:	605a      	str	r2, [r3, #4]
 801591e:	609a      	str	r2, [r3, #8]
 8015920:	60da      	str	r2, [r3, #12]
 8015922:	611a      	str	r2, [r3, #16]
 8015924:	615a      	str	r2, [r3, #20]
 8015926:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8015928:	4b22      	ldr	r3, [pc, #136]	; (80159b4 <_Z11MX_FMC_Initv+0xa4>)
 801592a:	4a23      	ldr	r2, [pc, #140]	; (80159b8 <_Z11MX_FMC_Initv+0xa8>)
 801592c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 801592e:	4b21      	ldr	r3, [pc, #132]	; (80159b4 <_Z11MX_FMC_Initv+0xa4>)
 8015930:	2200      	movs	r2, #0
 8015932:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8015934:	4b1f      	ldr	r3, [pc, #124]	; (80159b4 <_Z11MX_FMC_Initv+0xa4>)
 8015936:	2200      	movs	r2, #0
 8015938:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 801593a:	4b1e      	ldr	r3, [pc, #120]	; (80159b4 <_Z11MX_FMC_Initv+0xa4>)
 801593c:	2204      	movs	r2, #4
 801593e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8015940:	4b1c      	ldr	r3, [pc, #112]	; (80159b4 <_Z11MX_FMC_Initv+0xa4>)
 8015942:	2210      	movs	r2, #16
 8015944:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8015946:	4b1b      	ldr	r3, [pc, #108]	; (80159b4 <_Z11MX_FMC_Initv+0xa4>)
 8015948:	2240      	movs	r2, #64	; 0x40
 801594a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 801594c:	4b19      	ldr	r3, [pc, #100]	; (80159b4 <_Z11MX_FMC_Initv+0xa4>)
 801594e:	f44f 72c0 	mov.w	r2, #384	; 0x180
 8015952:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8015954:	4b17      	ldr	r3, [pc, #92]	; (80159b4 <_Z11MX_FMC_Initv+0xa4>)
 8015956:	2200      	movs	r2, #0
 8015958:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 801595a:	4b16      	ldr	r3, [pc, #88]	; (80159b4 <_Z11MX_FMC_Initv+0xa4>)
 801595c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8015960:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8015962:	4b14      	ldr	r3, [pc, #80]	; (80159b4 <_Z11MX_FMC_Initv+0xa4>)
 8015964:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8015968:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 801596a:	4b12      	ldr	r3, [pc, #72]	; (80159b4 <_Z11MX_FMC_Initv+0xa4>)
 801596c:	2200      	movs	r2, #0
 801596e:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8015970:	2302      	movs	r3, #2
 8015972:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8015974:	2307      	movs	r3, #7
 8015976:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8015978:	2304      	movs	r3, #4
 801597a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 801597c:	2307      	movs	r3, #7
 801597e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8015980:	2303      	movs	r3, #3
 8015982:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8015984:	2302      	movs	r3, #2
 8015986:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8015988:	2302      	movs	r3, #2
 801598a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 801598c:	1d3b      	adds	r3, r7, #4
 801598e:	4619      	mov	r1, r3
 8015990:	4808      	ldr	r0, [pc, #32]	; (80159b4 <_Z11MX_FMC_Initv+0xa4>)
 8015992:	f7f3 f8ef 	bl	8008b74 <HAL_SDRAM_Init>
 8015996:	4603      	mov	r3, r0
 8015998:	2b00      	cmp	r3, #0
 801599a:	bf14      	ite	ne
 801599c:	2301      	movne	r3, #1
 801599e:	2300      	moveq	r3, #0
 80159a0:	b2db      	uxtb	r3, r3
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d001      	beq.n	80159aa <_Z11MX_FMC_Initv+0x9a>
  {
    Error_Handler( );
 80159a6:	f002 fd17 	bl	80183d8 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80159aa:	bf00      	nop
 80159ac:	3720      	adds	r7, #32
 80159ae:	46bd      	mov	sp, r7
 80159b0:	bd80      	pop	{r7, pc}
 80159b2:	bf00      	nop
 80159b4:	20009330 	.word	0x20009330
 80159b8:	a0000140 	.word	0xa0000140

080159bc <_Z15MX_SDRAM_InitExv>:
/**
  * @brief  Programs the SDRAM device.
  * @retval None
  */
void MX_SDRAM_InitEx(void)
{
 80159bc:	b580      	push	{r7, lr}
 80159be:	b082      	sub	sp, #8
 80159c0:	af00      	add	r7, sp, #0
  __IO uint32_t tmpmrd = 0;
 80159c2:	2300      	movs	r3, #0
 80159c4:	607b      	str	r3, [r7, #4]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80159c6:	4b2b      	ldr	r3, [pc, #172]	; (8015a74 <_Z15MX_SDRAM_InitExv+0xb8>)
 80159c8:	2201      	movs	r2, #1
 80159ca:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          =  FMC_SDRAM_CMD_TARGET_BANK1;
 80159cc:	4b29      	ldr	r3, [pc, #164]	; (8015a74 <_Z15MX_SDRAM_InitExv+0xb8>)
 80159ce:	2210      	movs	r2, #16
 80159d0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80159d2:	4b28      	ldr	r3, [pc, #160]	; (8015a74 <_Z15MX_SDRAM_InitExv+0xb8>)
 80159d4:	2201      	movs	r2, #1
 80159d6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80159d8:	4b26      	ldr	r3, [pc, #152]	; (8015a74 <_Z15MX_SDRAM_InitExv+0xb8>)
 80159da:	2200      	movs	r2, #0
 80159dc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 80159de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80159e2:	4924      	ldr	r1, [pc, #144]	; (8015a74 <_Z15MX_SDRAM_InitExv+0xb8>)
 80159e4:	4824      	ldr	r0, [pc, #144]	; (8015a78 <_Z15MX_SDRAM_InitExv+0xbc>)
 80159e6:	f7f3 f8f9 	bl	8008bdc <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80159ea:	2001      	movs	r0, #1
 80159ec:	f7eb f8b0 	bl	8000b50 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80159f0:	4b20      	ldr	r3, [pc, #128]	; (8015a74 <_Z15MX_SDRAM_InitExv+0xb8>)
 80159f2:	2202      	movs	r2, #2
 80159f4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80159f6:	4b1f      	ldr	r3, [pc, #124]	; (8015a74 <_Z15MX_SDRAM_InitExv+0xb8>)
 80159f8:	2210      	movs	r2, #16
 80159fa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80159fc:	4b1d      	ldr	r3, [pc, #116]	; (8015a74 <_Z15MX_SDRAM_InitExv+0xb8>)
 80159fe:	2201      	movs	r2, #1
 8015a00:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8015a02:	4b1c      	ldr	r3, [pc, #112]	; (8015a74 <_Z15MX_SDRAM_InitExv+0xb8>)
 8015a04:	2200      	movs	r2, #0
 8015a06:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);  
 8015a08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015a0c:	4919      	ldr	r1, [pc, #100]	; (8015a74 <_Z15MX_SDRAM_InitExv+0xb8>)
 8015a0e:	481a      	ldr	r0, [pc, #104]	; (8015a78 <_Z15MX_SDRAM_InitExv+0xbc>)
 8015a10:	f7f3 f8e4 	bl	8008bdc <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8015a14:	4b17      	ldr	r3, [pc, #92]	; (8015a74 <_Z15MX_SDRAM_InitExv+0xb8>)
 8015a16:	2203      	movs	r2, #3
 8015a18:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8015a1a:	4b16      	ldr	r3, [pc, #88]	; (8015a74 <_Z15MX_SDRAM_InitExv+0xb8>)
 8015a1c:	2210      	movs	r2, #16
 8015a1e:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8015a20:	4b14      	ldr	r3, [pc, #80]	; (8015a74 <_Z15MX_SDRAM_InitExv+0xb8>)
 8015a22:	2208      	movs	r2, #8
 8015a24:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8015a26:	4b13      	ldr	r3, [pc, #76]	; (8015a74 <_Z15MX_SDRAM_InitExv+0xb8>)
 8015a28:	2200      	movs	r2, #0
 8015a2a:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8015a2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015a30:	4910      	ldr	r1, [pc, #64]	; (8015a74 <_Z15MX_SDRAM_InitExv+0xb8>)
 8015a32:	4811      	ldr	r0, [pc, #68]	; (8015a78 <_Z15MX_SDRAM_InitExv+0xbc>)
 8015a34:	f7f3 f8d2 	bl	8008bdc <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8015a38:	f44f 730c 	mov.w	r3, #560	; 0x230
 8015a3c:	607b      	str	r3, [r7, #4]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_3           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8015a3e:	4b0d      	ldr	r3, [pc, #52]	; (8015a74 <_Z15MX_SDRAM_InitExv+0xb8>)
 8015a40:	2204      	movs	r2, #4
 8015a42:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8015a44:	4b0b      	ldr	r3, [pc, #44]	; (8015a74 <_Z15MX_SDRAM_InitExv+0xb8>)
 8015a46:	2210      	movs	r2, #16
 8015a48:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8015a4a:	4b0a      	ldr	r3, [pc, #40]	; (8015a74 <_Z15MX_SDRAM_InitExv+0xb8>)
 8015a4c:	2201      	movs	r2, #1
 8015a4e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	4a08      	ldr	r2, [pc, #32]	; (8015a74 <_Z15MX_SDRAM_InitExv+0xb8>)
 8015a54:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&hsdram1, &Command, SDRAM_TIMEOUT);
 8015a56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015a5a:	4906      	ldr	r1, [pc, #24]	; (8015a74 <_Z15MX_SDRAM_InitExv+0xb8>)
 8015a5c:	4806      	ldr	r0, [pc, #24]	; (8015a78 <_Z15MX_SDRAM_InitExv+0xbc>)
 8015a5e:	f7f3 f8bd 	bl	8008bdc <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&hsdram1, REFRESH_COUNT); 
 8015a62:	f240 6173 	movw	r1, #1651	; 0x673
 8015a66:	4804      	ldr	r0, [pc, #16]	; (8015a78 <_Z15MX_SDRAM_InitExv+0xbc>)
 8015a68:	f7f3 f8e3 	bl	8008c32 <HAL_SDRAM_ProgramRefreshRate>
}
 8015a6c:	bf00      	nop
 8015a6e:	3708      	adds	r7, #8
 8015a70:	46bd      	mov	sp, r7
 8015a72:	bd80      	pop	{r7, pc}
 8015a74:	20009364 	.word	0x20009364
 8015a78:	20009330 	.word	0x20009330

08015a7c <HAL_LTDC_MspInit>:
}

/*  MSPInit/deInit Implementation */

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8015a7c:	b580      	push	{r7, lr}
 8015a7e:	b08e      	sub	sp, #56	; 0x38
 8015a80:	af00      	add	r7, sp, #0
 8015a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015a84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015a88:	2200      	movs	r2, #0
 8015a8a:	601a      	str	r2, [r3, #0]
 8015a8c:	605a      	str	r2, [r3, #4]
 8015a8e:	609a      	str	r2, [r3, #8]
 8015a90:	60da      	str	r2, [r3, #12]
 8015a92:	611a      	str	r2, [r3, #16]
  if(ltdcHandle->Instance==LTDC)
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	681b      	ldr	r3, [r3, #0]
 8015a98:	4a55      	ldr	r2, [pc, #340]	; (8015bf0 <HAL_LTDC_MspInit+0x174>)
 8015a9a:	4293      	cmp	r3, r2
 8015a9c:	f040 80a3 	bne.w	8015be6 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8015aa0:	4b54      	ldr	r3, [pc, #336]	; (8015bf4 <HAL_LTDC_MspInit+0x178>)
 8015aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015aa4:	4a53      	ldr	r2, [pc, #332]	; (8015bf4 <HAL_LTDC_MspInit+0x178>)
 8015aa6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8015aaa:	6453      	str	r3, [r2, #68]	; 0x44
 8015aac:	4b51      	ldr	r3, [pc, #324]	; (8015bf4 <HAL_LTDC_MspInit+0x178>)
 8015aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015ab0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8015ab4:	623b      	str	r3, [r7, #32]
 8015ab6:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8015ab8:	4b4e      	ldr	r3, [pc, #312]	; (8015bf4 <HAL_LTDC_MspInit+0x178>)
 8015aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015abc:	4a4d      	ldr	r2, [pc, #308]	; (8015bf4 <HAL_LTDC_MspInit+0x178>)
 8015abe:	f043 0310 	orr.w	r3, r3, #16
 8015ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8015ac4:	4b4b      	ldr	r3, [pc, #300]	; (8015bf4 <HAL_LTDC_MspInit+0x178>)
 8015ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ac8:	f003 0310 	and.w	r3, r3, #16
 8015acc:	61fb      	str	r3, [r7, #28]
 8015ace:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8015ad0:	4b48      	ldr	r3, [pc, #288]	; (8015bf4 <HAL_LTDC_MspInit+0x178>)
 8015ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ad4:	4a47      	ldr	r2, [pc, #284]	; (8015bf4 <HAL_LTDC_MspInit+0x178>)
 8015ad6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015ada:	6313      	str	r3, [r2, #48]	; 0x30
 8015adc:	4b45      	ldr	r3, [pc, #276]	; (8015bf4 <HAL_LTDC_MspInit+0x178>)
 8015ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015ae0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015ae4:	61bb      	str	r3, [r7, #24]
 8015ae6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8015ae8:	4b42      	ldr	r3, [pc, #264]	; (8015bf4 <HAL_LTDC_MspInit+0x178>)
 8015aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015aec:	4a41      	ldr	r2, [pc, #260]	; (8015bf4 <HAL_LTDC_MspInit+0x178>)
 8015aee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8015af2:	6313      	str	r3, [r2, #48]	; 0x30
 8015af4:	4b3f      	ldr	r3, [pc, #252]	; (8015bf4 <HAL_LTDC_MspInit+0x178>)
 8015af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015afc:	617b      	str	r3, [r7, #20]
 8015afe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8015b00:	4b3c      	ldr	r3, [pc, #240]	; (8015bf4 <HAL_LTDC_MspInit+0x178>)
 8015b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b04:	4a3b      	ldr	r2, [pc, #236]	; (8015bf4 <HAL_LTDC_MspInit+0x178>)
 8015b06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8015b0c:	4b39      	ldr	r3, [pc, #228]	; (8015bf4 <HAL_LTDC_MspInit+0x178>)
 8015b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015b14:	613b      	str	r3, [r7, #16]
 8015b16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8015b18:	4b36      	ldr	r3, [pc, #216]	; (8015bf4 <HAL_LTDC_MspInit+0x178>)
 8015b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b1c:	4a35      	ldr	r2, [pc, #212]	; (8015bf4 <HAL_LTDC_MspInit+0x178>)
 8015b1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015b22:	6313      	str	r3, [r2, #48]	; 0x30
 8015b24:	4b33      	ldr	r3, [pc, #204]	; (8015bf4 <HAL_LTDC_MspInit+0x178>)
 8015b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015b2c:	60fb      	str	r3, [r7, #12]
 8015b2e:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8015b30:	2310      	movs	r3, #16
 8015b32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015b34:	2302      	movs	r3, #2
 8015b36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015b38:	2300      	movs	r3, #0
 8015b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015b3c:	2300      	movs	r3, #0
 8015b3e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8015b40:	230e      	movs	r3, #14
 8015b42:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8015b44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015b48:	4619      	mov	r1, r3
 8015b4a:	482b      	ldr	r0, [pc, #172]	; (8015bf8 <HAL_LTDC_MspInit+0x17c>)
 8015b4c:	f7ec fe00 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8015b50:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8015b54:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015b56:	2302      	movs	r3, #2
 8015b58:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015b5e:	2300      	movs	r3, #0
 8015b60:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8015b62:	230e      	movs	r3, #14
 8015b64:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8015b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015b6a:	4619      	mov	r1, r3
 8015b6c:	4823      	ldr	r0, [pc, #140]	; (8015bfc <HAL_LTDC_MspInit+0x180>)
 8015b6e:	f7ec fdef 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8015b72:	23f7      	movs	r3, #247	; 0xf7
 8015b74:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015b76:	2302      	movs	r3, #2
 8015b78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015b7a:	2300      	movs	r3, #0
 8015b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015b7e:	2300      	movs	r3, #0
 8015b80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8015b82:	230e      	movs	r3, #14
 8015b84:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8015b86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015b8a:	4619      	mov	r1, r3
 8015b8c:	481c      	ldr	r0, [pc, #112]	; (8015c00 <HAL_LTDC_MspInit+0x184>)
 8015b8e:	f7ec fddf 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8015b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8015b96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015b98:	2302      	movs	r3, #2
 8015b9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015b9c:	2300      	movs	r3, #0
 8015b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015ba0:	2300      	movs	r3, #0
 8015ba2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8015ba4:	2309      	movs	r3, #9
 8015ba6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8015ba8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015bac:	4619      	mov	r1, r3
 8015bae:	4815      	ldr	r0, [pc, #84]	; (8015c04 <HAL_LTDC_MspInit+0x188>)
 8015bb0:	f7ec fdce 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8015bb4:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8015bb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015bba:	2302      	movs	r3, #2
 8015bbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015bbe:	2300      	movs	r3, #0
 8015bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8015bc2:	2300      	movs	r3, #0
 8015bc4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8015bc6:	230e      	movs	r3, #14
 8015bc8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8015bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8015bce:	4619      	mov	r1, r3
 8015bd0:	480d      	ldr	r0, [pc, #52]	; (8015c08 <HAL_LTDC_MspInit+0x18c>)
 8015bd2:	f7ec fdbd 	bl	8002750 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8015bd6:	2200      	movs	r2, #0
 8015bd8:	2105      	movs	r1, #5
 8015bda:	2058      	movs	r0, #88	; 0x58
 8015bdc:	f7eb fb26 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8015be0:	2058      	movs	r0, #88	; 0x58
 8015be2:	f7eb fb3f 	bl	8001264 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }
}
 8015be6:	bf00      	nop
 8015be8:	3738      	adds	r7, #56	; 0x38
 8015bea:	46bd      	mov	sp, r7
 8015bec:	bd80      	pop	{r7, pc}
 8015bee:	bf00      	nop
 8015bf0:	40016800 	.word	0x40016800
 8015bf4:	40023800 	.word	0x40023800
 8015bf8:	40021000 	.word	0x40021000
 8015bfc:	40022400 	.word	0x40022400
 8015c00:	40022800 	.word	0x40022800
 8015c04:	40021800 	.word	0x40021800
 8015c08:	40022000 	.word	0x40022000

08015c0c <HAL_LTDC_MspDeInit>:

void HAL_LTDC_MspDeInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8015c0c:	b580      	push	{r7, lr}
 8015c0e:	b082      	sub	sp, #8
 8015c10:	af00      	add	r7, sp, #0
 8015c12:	6078      	str	r0, [r7, #4]
  if(ltdcHandle->Instance==LTDC)
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	4a13      	ldr	r2, [pc, #76]	; (8015c68 <HAL_LTDC_MspDeInit+0x5c>)
 8015c1a:	4293      	cmp	r3, r2
 8015c1c:	d11f      	bne.n	8015c5e <HAL_LTDC_MspDeInit+0x52>
  {
  /* USER CODE BEGIN LTDC_MspDeInit 0 */

  /* USER CODE END LTDC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_LTDC_CLK_DISABLE();
 8015c1e:	4b13      	ldr	r3, [pc, #76]	; (8015c6c <HAL_LTDC_MspDeInit+0x60>)
 8015c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015c22:	4a12      	ldr	r2, [pc, #72]	; (8015c6c <HAL_LTDC_MspDeInit+0x60>)
 8015c24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8015c28:	6453      	str	r3, [r2, #68]	; 0x44
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2 
    */
    HAL_GPIO_DeInit(LCD_B0_GPIO_Port, LCD_B0_Pin);
 8015c2a:	2110      	movs	r1, #16
 8015c2c:	4810      	ldr	r0, [pc, #64]	; (8015c70 <HAL_LTDC_MspDeInit+0x64>)
 8015c2e:	f7ec ff39 	bl	8002aa4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOJ, LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin 
 8015c32:	f64e 71ff 	movw	r1, #61439	; 0xefff
 8015c36:	480f      	ldr	r0, [pc, #60]	; (8015c74 <HAL_LTDC_MspDeInit+0x68>)
 8015c38:	f7ec ff34 	bl	8002aa4 <HAL_GPIO_DeInit>
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin 
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin 
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin);

    HAL_GPIO_DeInit(GPIOK, LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin 
 8015c3c:	21f7      	movs	r1, #247	; 0xf7
 8015c3e:	480e      	ldr	r0, [pc, #56]	; (8015c78 <HAL_LTDC_MspDeInit+0x6c>)
 8015c40:	f7ec ff30 	bl	8002aa4 <HAL_GPIO_DeInit>
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin);

    HAL_GPIO_DeInit(LCD_B4_GPIO_Port, LCD_B4_Pin);
 8015c44:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8015c48:	480c      	ldr	r0, [pc, #48]	; (8015c7c <HAL_LTDC_MspDeInit+0x70>)
 8015c4a:	f7ec ff2b 	bl	8002aa4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOI, LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin);
 8015c4e:	f44f 4146 	mov.w	r1, #50688	; 0xc600
 8015c52:	480b      	ldr	r0, [pc, #44]	; (8015c80 <HAL_LTDC_MspDeInit+0x74>)
 8015c54:	f7ec ff26 	bl	8002aa4 <HAL_GPIO_DeInit>

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(LTDC_IRQn);
 8015c58:	2058      	movs	r0, #88	; 0x58
 8015c5a:	f7eb fb11 	bl	8001280 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN LTDC_MspDeInit 1 */

  /* USER CODE END LTDC_MspDeInit 1 */
  }
}
 8015c5e:	bf00      	nop
 8015c60:	3708      	adds	r7, #8
 8015c62:	46bd      	mov	sp, r7
 8015c64:	bd80      	pop	{r7, pc}
 8015c66:	bf00      	nop
 8015c68:	40016800 	.word	0x40016800
 8015c6c:	40023800 	.word	0x40023800
 8015c70:	40021000 	.word	0x40021000
 8015c74:	40022400 	.word	0x40022400
 8015c78:	40022800 	.word	0x40022800
 8015c7c:	40021800 	.word	0x40021800
 8015c80:	40022000 	.word	0x40022000

08015c84 <_ZL15HAL_FMC_MspInitv>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8015c84:	b580      	push	{r7, lr}
 8015c86:	b086      	sub	sp, #24
 8015c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8015c8a:	1d3b      	adds	r3, r7, #4
 8015c8c:	2200      	movs	r2, #0
 8015c8e:	601a      	str	r2, [r3, #0]
 8015c90:	605a      	str	r2, [r3, #4]
 8015c92:	609a      	str	r2, [r3, #8]
 8015c94:	60da      	str	r2, [r3, #12]
 8015c96:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8015c98:	4b3a      	ldr	r3, [pc, #232]	; (8015d84 <_ZL15HAL_FMC_MspInitv+0x100>)
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d16d      	bne.n	8015d7c <_ZL15HAL_FMC_MspInitv+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8015ca0:	4b38      	ldr	r3, [pc, #224]	; (8015d84 <_ZL15HAL_FMC_MspInitv+0x100>)
 8015ca2:	2201      	movs	r2, #1
 8015ca4:	601a      	str	r2, [r3, #0]
  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8015ca6:	4b38      	ldr	r3, [pc, #224]	; (8015d88 <_ZL15HAL_FMC_MspInitv+0x104>)
 8015ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015caa:	4a37      	ldr	r2, [pc, #220]	; (8015d88 <_ZL15HAL_FMC_MspInitv+0x104>)
 8015cac:	f043 0301 	orr.w	r3, r3, #1
 8015cb0:	6393      	str	r3, [r2, #56]	; 0x38
 8015cb2:	4b35      	ldr	r3, [pc, #212]	; (8015d88 <_ZL15HAL_FMC_MspInitv+0x104>)
 8015cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015cb6:	f003 0301 	and.w	r3, r3, #1
 8015cba:	603b      	str	r3, [r7, #0]
 8015cbc:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin 
 8015cbe:	f64f 7383 	movw	r3, #65411	; 0xff83
 8015cc2:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin 
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015cc4:	2302      	movs	r3, #2
 8015cc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015cc8:	2300      	movs	r3, #0
 8015cca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015ccc:	2303      	movs	r3, #3
 8015cce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8015cd0:	230c      	movs	r3, #12
 8015cd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8015cd4:	1d3b      	adds	r3, r7, #4
 8015cd6:	4619      	mov	r1, r3
 8015cd8:	482c      	ldr	r0, [pc, #176]	; (8015d8c <_ZL15HAL_FMC_MspInitv+0x108>)
 8015cda:	f7ec fd39 	bl	8002750 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin 
 8015cde:	f248 1333 	movw	r3, #33075	; 0x8133
 8015ce2:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015ce4:	2302      	movs	r3, #2
 8015ce6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015ce8:	2300      	movs	r3, #0
 8015cea:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015cec:	2303      	movs	r3, #3
 8015cee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8015cf0:	230c      	movs	r3, #12
 8015cf2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8015cf4:	1d3b      	adds	r3, r7, #4
 8015cf6:	4619      	mov	r1, r3
 8015cf8:	4825      	ldr	r0, [pc, #148]	; (8015d90 <_ZL15HAL_FMC_MspInitv+0x10c>)
 8015cfa:	f7ec fd29 	bl	8002750 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin 
 8015cfe:	f24c 7303 	movw	r3, #50947	; 0xc703
 8015d02:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015d04:	2302      	movs	r3, #2
 8015d06:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015d08:	2300      	movs	r3, #0
 8015d0a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015d0c:	2303      	movs	r3, #3
 8015d0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8015d10:	230c      	movs	r3, #12
 8015d12:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8015d14:	1d3b      	adds	r3, r7, #4
 8015d16:	4619      	mov	r1, r3
 8015d18:	481e      	ldr	r0, [pc, #120]	; (8015d94 <_ZL15HAL_FMC_MspInitv+0x110>)
 8015d1a:	f7ec fd19 	bl	8002750 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin 
 8015d1e:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8015d22:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin 
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015d24:	2302      	movs	r3, #2
 8015d26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015d28:	2300      	movs	r3, #0
 8015d2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015d2c:	2303      	movs	r3, #3
 8015d2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8015d30:	230c      	movs	r3, #12
 8015d32:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8015d34:	1d3b      	adds	r3, r7, #4
 8015d36:	4619      	mov	r1, r3
 8015d38:	4817      	ldr	r0, [pc, #92]	; (8015d98 <_ZL15HAL_FMC_MspInitv+0x114>)
 8015d3a:	f7ec fd09 	bl	8002750 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8015d3e:	2328      	movs	r3, #40	; 0x28
 8015d40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015d42:	2302      	movs	r3, #2
 8015d44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015d46:	2300      	movs	r3, #0
 8015d48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015d4a:	2303      	movs	r3, #3
 8015d4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8015d4e:	230c      	movs	r3, #12
 8015d50:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8015d52:	1d3b      	adds	r3, r7, #4
 8015d54:	4619      	mov	r1, r3
 8015d56:	4811      	ldr	r0, [pc, #68]	; (8015d9c <_ZL15HAL_FMC_MspInitv+0x118>)
 8015d58:	f7ec fcfa 	bl	8002750 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8015d5c:	2308      	movs	r3, #8
 8015d5e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015d60:	2302      	movs	r3, #2
 8015d62:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015d64:	2300      	movs	r3, #0
 8015d66:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015d68:	2303      	movs	r3, #3
 8015d6a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8015d6c:	230c      	movs	r3, #12
 8015d6e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8015d70:	1d3b      	adds	r3, r7, #4
 8015d72:	4619      	mov	r1, r3
 8015d74:	480a      	ldr	r0, [pc, #40]	; (8015da0 <_ZL15HAL_FMC_MspInitv+0x11c>)
 8015d76:	f7ec fceb 	bl	8002750 <HAL_GPIO_Init>
 8015d7a:	e000      	b.n	8015d7e <_ZL15HAL_FMC_MspInitv+0xfa>
    return;
 8015d7c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8015d7e:	3718      	adds	r7, #24
 8015d80:	46bd      	mov	sp, r7
 8015d82:	bd80      	pop	{r7, pc}
 8015d84:	20009374 	.word	0x20009374
 8015d88:	40023800 	.word	0x40023800
 8015d8c:	40021000 	.word	0x40021000
 8015d90:	40021800 	.word	0x40021800
 8015d94:	40020c00 	.word	0x40020c00
 8015d98:	40021400 	.word	0x40021400
 8015d9c:	40021c00 	.word	0x40021c00
 8015da0:	40020800 	.word	0x40020800

08015da4 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8015da4:	b580      	push	{r7, lr}
 8015da6:	b082      	sub	sp, #8
 8015da8:	af00      	add	r7, sp, #0
 8015daa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8015dac:	f7ff ff6a 	bl	8015c84 <_ZL15HAL_FMC_MspInitv>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8015db0:	bf00      	nop
 8015db2:	3708      	adds	r7, #8
 8015db4:	46bd      	mov	sp, r7
 8015db6:	bd80      	pop	{r7, pc}

08015db8 <HAL_DMA2D_MspInit>:

  /* USER CODE END SDRAM_MspDeInit 1 */
}

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8015db8:	b580      	push	{r7, lr}
 8015dba:	b084      	sub	sp, #16
 8015dbc:	af00      	add	r7, sp, #0
 8015dbe:	6078      	str	r0, [r7, #4]
  if(dma2dHandle->Instance==DMA2D)
 8015dc0:	687b      	ldr	r3, [r7, #4]
 8015dc2:	681b      	ldr	r3, [r3, #0]
 8015dc4:	4a0d      	ldr	r2, [pc, #52]	; (8015dfc <HAL_DMA2D_MspInit+0x44>)
 8015dc6:	4293      	cmp	r3, r2
 8015dc8:	d113      	bne.n	8015df2 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8015dca:	4b0d      	ldr	r3, [pc, #52]	; (8015e00 <HAL_DMA2D_MspInit+0x48>)
 8015dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015dce:	4a0c      	ldr	r2, [pc, #48]	; (8015e00 <HAL_DMA2D_MspInit+0x48>)
 8015dd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8015dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8015dd6:	4b0a      	ldr	r3, [pc, #40]	; (8015e00 <HAL_DMA2D_MspInit+0x48>)
 8015dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015dda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8015dde:	60fb      	str	r3, [r7, #12]
 8015de0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8015de2:	2200      	movs	r2, #0
 8015de4:	2105      	movs	r1, #5
 8015de6:	205a      	movs	r0, #90	; 0x5a
 8015de8:	f7eb fa20 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8015dec:	205a      	movs	r0, #90	; 0x5a
 8015dee:	f7eb fa39 	bl	8001264 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8015df2:	bf00      	nop
 8015df4:	3710      	adds	r7, #16
 8015df6:	46bd      	mov	sp, r7
 8015df8:	bd80      	pop	{r7, pc}
 8015dfa:	bf00      	nop
 8015dfc:	4002b000 	.word	0x4002b000
 8015e00:	40023800 	.word	0x40023800

08015e04 <HAL_DMA2D_MspDeInit>:

void HAL_DMA2D_MspDeInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8015e04:	b580      	push	{r7, lr}
 8015e06:	b082      	sub	sp, #8
 8015e08:	af00      	add	r7, sp, #0
 8015e0a:	6078      	str	r0, [r7, #4]
  if(dma2dHandle->Instance==DMA2D)
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	681b      	ldr	r3, [r3, #0]
 8015e10:	4a07      	ldr	r2, [pc, #28]	; (8015e30 <HAL_DMA2D_MspDeInit+0x2c>)
 8015e12:	4293      	cmp	r3, r2
 8015e14:	d108      	bne.n	8015e28 <HAL_DMA2D_MspDeInit+0x24>
  {
  /* USER CODE BEGIN DMA2D_MspDeInit 0 */

  /* USER CODE END DMA2D_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_DMA2D_CLK_DISABLE();
 8015e16:	4b07      	ldr	r3, [pc, #28]	; (8015e34 <HAL_DMA2D_MspDeInit+0x30>)
 8015e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e1a:	4a06      	ldr	r2, [pc, #24]	; (8015e34 <HAL_DMA2D_MspDeInit+0x30>)
 8015e1c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8015e20:	6313      	str	r3, [r2, #48]	; 0x30

    /* Peripheral interrupt Deinit*/
    HAL_NVIC_DisableIRQ(DMA2D_IRQn);
 8015e22:	205a      	movs	r0, #90	; 0x5a
 8015e24:	f7eb fa2c 	bl	8001280 <HAL_NVIC_DisableIRQ>

  /* USER CODE BEGIN DMA2D_MspDeInit 1 */

  /* USER CODE END DMA2D_MspDeInit 1 */
  }
}
 8015e28:	bf00      	nop
 8015e2a:	3708      	adds	r7, #8
 8015e2c:	46bd      	mov	sp, r7
 8015e2e:	bd80      	pop	{r7, pc}
 8015e30:	4002b000 	.word	0x4002b000
 8015e34:	40023800 	.word	0x40023800

08015e38 <_ZN8touchgfx9DMA_QueueD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Queue()
 8015e38:	b480      	push	{r7}
 8015e3a:	b083      	sub	sp, #12
 8015e3c:	af00      	add	r7, sp, #0
 8015e3e:	6078      	str	r0, [r7, #4]
    {
 8015e40:	4a04      	ldr	r2, [pc, #16]	; (8015e54 <_ZN8touchgfx9DMA_QueueD1Ev+0x1c>)
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	601a      	str	r2, [r3, #0]
    }
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	4618      	mov	r0, r3
 8015e4a:	370c      	adds	r7, #12
 8015e4c:	46bd      	mov	sp, r7
 8015e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e52:	4770      	bx	lr
 8015e54:	080249d8 	.word	0x080249d8

08015e58 <_ZN8touchgfx9DMA_QueueD0Ev>:
    virtual ~DMA_Queue()
 8015e58:	b580      	push	{r7, lr}
 8015e5a:	b082      	sub	sp, #8
 8015e5c:	af00      	add	r7, sp, #0
 8015e5e:	6078      	str	r0, [r7, #4]
    }
 8015e60:	6878      	ldr	r0, [r7, #4]
 8015e62:	f7ff ffe9 	bl	8015e38 <_ZN8touchgfx9DMA_QueueD1Ev>
 8015e66:	2104      	movs	r1, #4
 8015e68:	6878      	ldr	r0, [r7, #4]
 8015e6a:	f00c fada 	bl	8022422 <_ZdlPvj>
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	4618      	mov	r0, r3
 8015e72:	3708      	adds	r7, #8
 8015e74:	46bd      	mov	sp, r7
 8015e76:	bd80      	pop	{r7, pc}

08015e78 <_ZN8touchgfx13DMA_Interface5flushEv>:
     *
     * @brief This function blocks until all DMA transfers in the queue have been completed.
     *
     *        This function blocks until all DMA transfers in the queue have been completed.
     */
    virtual void flush()
 8015e78:	b580      	push	{r7, lr}
 8015e7a:	b082      	sub	sp, #8
 8015e7c:	af00      	add	r7, sp, #0
 8015e7e:	6078      	str	r0, [r7, #4]
    {
        waitForFrameBufferSemaphore();
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	681b      	ldr	r3, [r3, #0]
 8015e84:	3340      	adds	r3, #64	; 0x40
 8015e86:	681b      	ldr	r3, [r3, #0]
 8015e88:	6878      	ldr	r0, [r7, #4]
 8015e8a:	4798      	blx	r3
    }
 8015e8c:	bf00      	nop
 8015e8e:	3708      	adds	r7, #8
 8015e90:	46bd      	mov	sp, r7
 8015e92:	bd80      	pop	{r7, pc}

08015e94 <_ZN8touchgfx13DMA_InterfaceD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~DMA_Interface()
 8015e94:	b480      	push	{r7}
 8015e96:	b083      	sub	sp, #12
 8015e98:	af00      	add	r7, sp, #0
 8015e9a:	6078      	str	r0, [r7, #4]
    {
 8015e9c:	4a04      	ldr	r2, [pc, #16]	; (8015eb0 <_ZN8touchgfx13DMA_InterfaceD1Ev+0x1c>)
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	601a      	str	r2, [r3, #0]
    }
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	4618      	mov	r0, r3
 8015ea6:	370c      	adds	r7, #12
 8015ea8:	46bd      	mov	sp, r7
 8015eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eae:	4770      	bx	lr
 8015eb0:	08025ae4 	.word	0x08025ae4

08015eb4 <_ZN8touchgfx13DMA_InterfaceD0Ev>:
    virtual ~DMA_Interface()
 8015eb4:	b580      	push	{r7, lr}
 8015eb6:	b082      	sub	sp, #8
 8015eb8:	af00      	add	r7, sp, #0
 8015eba:	6078      	str	r0, [r7, #4]
    }
 8015ebc:	6878      	ldr	r0, [r7, #4]
 8015ebe:	f7ff ffe9 	bl	8015e94 <_ZN8touchgfx13DMA_InterfaceD1Ev>
 8015ec2:	210c      	movs	r1, #12
 8015ec4:	6878      	ldr	r0, [r7, #4]
 8015ec6:	f00c faac 	bl	8022422 <_ZdlPvj>
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	4618      	mov	r0, r3
 8015ece:	3708      	adds	r7, #8
 8015ed0:	46bd      	mov	sp, r7
 8015ed2:	bd80      	pop	{r7, pc}

08015ed4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>:
     *
     *        Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
 8015ed4:	b480      	push	{r7}
 8015ed6:	b083      	sub	sp, #12
 8015ed8:	af00      	add	r7, sp, #0
 8015eda:	6078      	str	r0, [r7, #4]
 8015edc:	6039      	str	r1, [r7, #0]
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8015ede:	4a09      	ldr	r2, [pc, #36]	; (8015f04 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE+0x30>)
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	601a      	str	r2, [r3, #0]
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	683a      	ldr	r2, [r7, #0]
 8015ee8:	605a      	str	r2, [r3, #4]
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	2200      	movs	r2, #0
 8015eee:	721a      	strb	r2, [r3, #8]
 8015ef0:	687b      	ldr	r3, [r7, #4]
 8015ef2:	2200      	movs	r2, #0
 8015ef4:	725a      	strb	r2, [r3, #9]
    {
    }
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	4618      	mov	r0, r3
 8015efa:	370c      	adds	r7, #12
 8015efc:	46bd      	mov	sp, r7
 8015efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f02:	4770      	bx	lr
 8015f04:	08025ae4 	.word	0x08025ae4

08015f08 <_ZN8touchgfx3HAL18signalDMAInterruptEv>:
    void signalDMAInterrupt()
 8015f08:	b580      	push	{r7, lr}
 8015f0a:	b082      	sub	sp, #8
 8015f0c:	af00      	add	r7, sp, #0
 8015f0e:	6078      	str	r0, [r7, #4]
        dma.signalDMAInterrupt();
 8015f10:	687b      	ldr	r3, [r7, #4]
 8015f12:	685a      	ldr	r2, [r3, #4]
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	685b      	ldr	r3, [r3, #4]
 8015f18:	681b      	ldr	r3, [r3, #0]
 8015f1a:	3314      	adds	r3, #20
 8015f1c:	681b      	ldr	r3, [r3, #0]
 8015f1e:	4610      	mov	r0, r2
 8015f20:	4798      	blx	r3
    }
 8015f22:	bf00      	nop
 8015f24:	3708      	adds	r7, #8
 8015f26:	46bd      	mov	sp, r7
 8015f28:	bd80      	pop	{r7, pc}

08015f2a <_ZN10STM32F7DMA18signalDMAInterruptEv>:
     *
     * @brief Raises a DMA interrupt signal.
     *
     *        Raises a DMA interrupt signal.
     */
    virtual void signalDMAInterrupt()
 8015f2a:	b580      	push	{r7, lr}
 8015f2c:	b082      	sub	sp, #8
 8015f2e:	af00      	add	r7, sp, #0
 8015f30:	6078      	str	r0, [r7, #4]
    {
        executeCompleted();
 8015f32:	687a      	ldr	r2, [r7, #4]
 8015f34:	687b      	ldr	r3, [r7, #4]
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	3324      	adds	r3, #36	; 0x24
 8015f3a:	681b      	ldr	r3, [r3, #0]
 8015f3c:	4610      	mov	r0, r2
 8015f3e:	4798      	blx	r3
    }
 8015f40:	bf00      	nop
 8015f42:	3708      	adds	r7, #8
 8015f44:	46bd      	mov	sp, r7
 8015f46:	bd80      	pop	{r7, pc}

08015f48 <__NVIC_EnableIRQ>:
{
 8015f48:	b480      	push	{r7}
 8015f4a:	b083      	sub	sp, #12
 8015f4c:	af00      	add	r7, sp, #0
 8015f4e:	4603      	mov	r3, r0
 8015f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015f56:	2b00      	cmp	r3, #0
 8015f58:	db0d      	blt.n	8015f76 <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015f5e:	b2db      	uxtb	r3, r3
 8015f60:	f003 021f 	and.w	r2, r3, #31
 8015f64:	4907      	ldr	r1, [pc, #28]	; (8015f84 <__NVIC_EnableIRQ+0x3c>)
 8015f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015f6a:	095b      	lsrs	r3, r3, #5
 8015f6c:	2001      	movs	r0, #1
 8015f6e:	fa00 f202 	lsl.w	r2, r0, r2
 8015f72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8015f76:	bf00      	nop
 8015f78:	370c      	adds	r7, #12
 8015f7a:	46bd      	mov	sp, r7
 8015f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f80:	4770      	bx	lr
 8015f82:	bf00      	nop
 8015f84:	e000e100 	.word	0xe000e100

08015f88 <__NVIC_DisableIRQ>:
{
 8015f88:	b480      	push	{r7}
 8015f8a:	b083      	sub	sp, #12
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	4603      	mov	r3, r0
 8015f90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8015f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	db12      	blt.n	8015fc0 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8015f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015f9e:	b2db      	uxtb	r3, r3
 8015fa0:	f003 021f 	and.w	r2, r3, #31
 8015fa4:	4909      	ldr	r1, [pc, #36]	; (8015fcc <__NVIC_DisableIRQ+0x44>)
 8015fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015faa:	095b      	lsrs	r3, r3, #5
 8015fac:	2001      	movs	r0, #1
 8015fae:	fa00 f202 	lsl.w	r2, r0, r2
 8015fb2:	3320      	adds	r3, #32
 8015fb4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8015fb8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8015fbc:	f3bf 8f6f 	isb	sy
}
 8015fc0:	bf00      	nop
 8015fc2:	370c      	adds	r7, #12
 8015fc4:	46bd      	mov	sp, r7
 8015fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fca:	4770      	bx	lr
 8015fcc:	e000e100 	.word	0xe000e100

08015fd0 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>:
/* USER CODE END user includes */

extern DMA2D_HandleTypeDef hdma2d;

static HAL_StatusTypeDef HAL_DMA2D_SetMode(DMA2D_HandleTypeDef *hdma2d, uint32_t mode, uint32_t color, uint32_t offset)
{
 8015fd0:	b480      	push	{r7}
 8015fd2:	b085      	sub	sp, #20
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	60f8      	str	r0, [r7, #12]
 8015fd8:	60b9      	str	r1, [r7, #8]
 8015fda:	607a      	str	r2, [r7, #4]
 8015fdc:	603b      	str	r3, [r7, #0]
    assert_param(IS_DMA2D_ALL_INSTANCE(hdma2d->Instance));

    MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, mode);
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	681b      	ldr	r3, [r3, #0]
 8015fe2:	681b      	ldr	r3, [r3, #0]
 8015fe4:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8015fe8:	68ba      	ldr	r2, [r7, #8]
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	681b      	ldr	r3, [r3, #0]
 8015fee:	430a      	orrs	r2, r1
 8015ff0:	601a      	str	r2, [r3, #0]
    MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, color);
 8015ff2:	68fb      	ldr	r3, [r7, #12]
 8015ff4:	681b      	ldr	r3, [r3, #0]
 8015ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015ff8:	f023 0107 	bic.w	r1, r3, #7
 8015ffc:	687a      	ldr	r2, [r7, #4]
 8015ffe:	68fb      	ldr	r3, [r7, #12]
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	430a      	orrs	r2, r1
 8016004:	635a      	str	r2, [r3, #52]	; 0x34
    MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, offset);
 8016006:	68fb      	ldr	r3, [r7, #12]
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801600c:	4b06      	ldr	r3, [pc, #24]	; (8016028 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm+0x58>)
 801600e:	4013      	ands	r3, r2
 8016010:	6839      	ldr	r1, [r7, #0]
 8016012:	68fa      	ldr	r2, [r7, #12]
 8016014:	6812      	ldr	r2, [r2, #0]
 8016016:	430b      	orrs	r3, r1
 8016018:	6413      	str	r3, [r2, #64]	; 0x40

    return HAL_OK;
 801601a:	2300      	movs	r3, #0
}
 801601c:	4618      	mov	r0, r3
 801601e:	3714      	adds	r7, #20
 8016020:	46bd      	mov	sp, r7
 8016022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016026:	4770      	bx	lr
 8016028:	ffffc000 	.word	0xffffc000

0801602c <DMA2D_XferCpltCallback>:

extern "C" {

static void DMA2D_XferCpltCallback(DMA2D_HandleTypeDef* handle)
{
 801602c:	b580      	push	{r7, lr}
 801602e:	b082      	sub	sp, #8
 8016030:	af00      	add	r7, sp, #0
 8016032:	6078      	str	r0, [r7, #4]
    touchgfx::HAL::getInstance()->signalDMAInterrupt();
 8016034:	f7f9 fa22 	bl	800f47c <_ZN8touchgfx3HAL11getInstanceEv>
 8016038:	4603      	mov	r3, r0
 801603a:	4618      	mov	r0, r3
 801603c:	f7ff ff64 	bl	8015f08 <_ZN8touchgfx3HAL18signalDMAInterruptEv>
}
 8016040:	bf00      	nop
 8016042:	3708      	adds	r7, #8
 8016044:	46bd      	mov	sp, r7
 8016046:	bd80      	pop	{r7, pc}

08016048 <DMA2D_XferErrorCallback>:

static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
{
 8016048:	b480      	push	{r7}
 801604a:	b083      	sub	sp, #12
 801604c:	af00      	add	r7, sp, #0
 801604e:	6078      	str	r0, [r7, #4]
    //assert(0);
}
 8016050:	bf00      	nop
 8016052:	370c      	adds	r7, #12
 8016054:	46bd      	mov	sp, r7
 8016056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801605a:	4770      	bx	lr

0801605c <_ZN8touchgfx6BlitOpC1Ev>:
 *        (frame buffer) using DMA.
 *
 *        BlitOp instances carry the required information for performing operations on the LCD
 *        (frame buffer) using DMA.
 */
struct BlitOp
 801605c:	b580      	push	{r7, lr}
 801605e:	b082      	sub	sp, #8
 8016060:	af00      	add	r7, sp, #0
 8016062:	6078      	str	r0, [r7, #4]
 8016064:	687b      	ldr	r3, [r7, #4]
 8016066:	3314      	adds	r3, #20
 8016068:	4618      	mov	r0, r3
 801606a:	f7f9 fb03 	bl	800f674 <_ZN8touchgfx9colortypeC1Ev>
 801606e:	687b      	ldr	r3, [r7, #4]
 8016070:	4618      	mov	r0, r3
 8016072:	3708      	adds	r7, #8
 8016074:	46bd      	mov	sp, r7
 8016076:	bd80      	pop	{r7, pc}

08016078 <_ZN10STM32F7DMAC1Ev>:

}

STM32F7DMA::STM32F7DMA()
 8016078:	b5b0      	push	{r4, r5, r7, lr}
 801607a:	b082      	sub	sp, #8
 801607c:	af00      	add	r7, sp, #0
 801607e:	6078      	str	r0, [r7, #4]
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0]))
 8016080:	687a      	ldr	r2, [r7, #4]
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	330c      	adds	r3, #12
 8016086:	4619      	mov	r1, r3
 8016088:	4610      	mov	r0, r2
 801608a:	f7ff ff23 	bl	8015ed4 <_ZN8touchgfx13DMA_InterfaceC1ERNS_9DMA_QueueE>
 801608e:	4a0e      	ldr	r2, [pc, #56]	; (80160c8 <_ZN10STM32F7DMAC1Ev+0x50>)
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	601a      	str	r2, [r3, #0]
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	f103 000c 	add.w	r0, r3, #12
 801609a:	687b      	ldr	r3, [r7, #4]
 801609c:	3320      	adds	r3, #32
 801609e:	2260      	movs	r2, #96	; 0x60
 80160a0:	4619      	mov	r1, r3
 80160a2:	f007 fd25 	bl	801daf0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	3320      	adds	r3, #32
 80160aa:	245f      	movs	r4, #95	; 0x5f
 80160ac:	461d      	mov	r5, r3
 80160ae:	2c00      	cmp	r4, #0
 80160b0:	db05      	blt.n	80160be <_ZN10STM32F7DMAC1Ev+0x46>
 80160b2:	4628      	mov	r0, r5
 80160b4:	f7ff ffd2 	bl	801605c <_ZN8touchgfx6BlitOpC1Ev>
 80160b8:	351c      	adds	r5, #28
 80160ba:	3c01      	subs	r4, #1
 80160bc:	e7f7      	b.n	80160ae <_ZN10STM32F7DMAC1Ev+0x36>
{}
 80160be:	687b      	ldr	r3, [r7, #4]
 80160c0:	4618      	mov	r0, r3
 80160c2:	3708      	adds	r7, #8
 80160c4:	46bd      	mov	sp, r7
 80160c6:	bdb0      	pop	{r4, r5, r7, pc}
 80160c8:	0802498c 	.word	0x0802498c

080160cc <_ZN10STM32F7DMAD1Ev>:

STM32F7DMA::~STM32F7DMA()
 80160cc:	b580      	push	{r7, lr}
 80160ce:	b082      	sub	sp, #8
 80160d0:	af00      	add	r7, sp, #0
 80160d2:	6078      	str	r0, [r7, #4]
 80160d4:	4a0b      	ldr	r2, [pc, #44]	; (8016104 <_ZN10STM32F7DMAD1Ev+0x38>)
 80160d6:	687b      	ldr	r3, [r7, #4]
 80160d8:	601a      	str	r2, [r3, #0]
{
    HAL_DMA2D_DeInit(&hdma2d);
 80160da:	480b      	ldr	r0, [pc, #44]	; (8016108 <_ZN10STM32F7DMAD1Ev+0x3c>)
 80160dc:	f7eb fb1e 	bl	800171c <HAL_DMA2D_DeInit>
    NVIC_DisableIRQ(DMA2D_IRQn);
 80160e0:	205a      	movs	r0, #90	; 0x5a
 80160e2:	f7ff ff51 	bl	8015f88 <__NVIC_DisableIRQ>
STM32F7DMA::~STM32F7DMA()
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	330c      	adds	r3, #12
 80160ea:	4618      	mov	r0, r3
 80160ec:	f000 fab6 	bl	801665c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 80160f0:	687b      	ldr	r3, [r7, #4]
 80160f2:	4618      	mov	r0, r3
 80160f4:	f7ff fece 	bl	8015e94 <_ZN8touchgfx13DMA_InterfaceD1Ev>
}
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	4618      	mov	r0, r3
 80160fc:	3708      	adds	r7, #8
 80160fe:	46bd      	mov	sp, r7
 8016100:	bd80      	pop	{r7, pc}
 8016102:	bf00      	nop
 8016104:	0802498c 	.word	0x0802498c
 8016108:	200092f0 	.word	0x200092f0

0801610c <_ZN10STM32F7DMAD0Ev>:
STM32F7DMA::~STM32F7DMA()
 801610c:	b580      	push	{r7, lr}
 801610e:	b082      	sub	sp, #8
 8016110:	af00      	add	r7, sp, #0
 8016112:	6078      	str	r0, [r7, #4]
}
 8016114:	6878      	ldr	r0, [r7, #4]
 8016116:	f7ff ffd9 	bl	80160cc <_ZN10STM32F7DMAD1Ev>
 801611a:	f44f 612a 	mov.w	r1, #2720	; 0xaa0
 801611e:	6878      	ldr	r0, [r7, #4]
 8016120:	f00c f97f 	bl	8022422 <_ZdlPvj>
 8016124:	687b      	ldr	r3, [r7, #4]
 8016126:	4618      	mov	r0, r3
 8016128:	3708      	adds	r7, #8
 801612a:	46bd      	mov	sp, r7
 801612c:	bd80      	pop	{r7, pc}
	...

08016130 <_ZN10STM32F7DMA10initializeEv>:

void STM32F7DMA::initialize()
{
 8016130:	b580      	push	{r7, lr}
 8016132:	b082      	sub	sp, #8
 8016134:	af00      	add	r7, sp, #0
 8016136:	6078      	str	r0, [r7, #4]
    hdma2d.Instance = DMA2D;
 8016138:	4b09      	ldr	r3, [pc, #36]	; (8016160 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801613a:	4a0a      	ldr	r2, [pc, #40]	; (8016164 <_ZN10STM32F7DMA10initializeEv+0x34>)
 801613c:	601a      	str	r2, [r3, #0]
    HAL_DMA2D_Init(&hdma2d);
 801613e:	4808      	ldr	r0, [pc, #32]	; (8016160 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8016140:	f7eb faa2 	bl	8001688 <HAL_DMA2D_Init>

    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8016144:	4b06      	ldr	r3, [pc, #24]	; (8016160 <_ZN10STM32F7DMA10initializeEv+0x30>)
 8016146:	4a08      	ldr	r2, [pc, #32]	; (8016168 <_ZN10STM32F7DMA10initializeEv+0x38>)
 8016148:	611a      	str	r2, [r3, #16]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 801614a:	4b05      	ldr	r3, [pc, #20]	; (8016160 <_ZN10STM32F7DMA10initializeEv+0x30>)
 801614c:	4a07      	ldr	r2, [pc, #28]	; (801616c <_ZN10STM32F7DMA10initializeEv+0x3c>)
 801614e:	615a      	str	r2, [r3, #20]

    NVIC_EnableIRQ(DMA2D_IRQn);
 8016150:	205a      	movs	r0, #90	; 0x5a
 8016152:	f7ff fef9 	bl	8015f48 <__NVIC_EnableIRQ>
}
 8016156:	bf00      	nop
 8016158:	3708      	adds	r7, #8
 801615a:	46bd      	mov	sp, r7
 801615c:	bd80      	pop	{r7, pc}
 801615e:	bf00      	nop
 8016160:	200092f0 	.word	0x200092f0
 8016164:	4002b000 	.word	0x4002b000
 8016168:	0801602d 	.word	0x0801602d
 801616c:	08016049 	.word	0x08016049

08016170 <_ZN10STM32F7DMA11getBlitCapsEv>:

volatile bool disableChromArt = false;

BlitOperations STM32F7DMA::getBlitCaps()
{
 8016170:	b480      	push	{r7}
 8016172:	b083      	sub	sp, #12
 8016174:	af00      	add	r7, sp, #0
 8016176:	6078      	str	r0, [r7, #4]
    if (disableChromArt)
 8016178:	4b07      	ldr	r3, [pc, #28]	; (8016198 <_ZN10STM32F7DMA11getBlitCapsEv+0x28>)
 801617a:	781b      	ldrb	r3, [r3, #0]
 801617c:	b2db      	uxtb	r3, r3
 801617e:	2b00      	cmp	r3, #0
 8016180:	d001      	beq.n	8016186 <_ZN10STM32F7DMA11getBlitCapsEv+0x16>
    {
        return static_cast<BlitOperations>(0);
 8016182:	2300      	movs	r3, #0
 8016184:	e001      	b.n	801618a <_ZN10STM32F7DMA11getBlitCapsEv+0x1a>
                                           | BLIT_OP_COPY
                                           | BLIT_OP_COPY_WITH_ALPHA
                                           | BLIT_OP_COPY_ARGB8888
                                           | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                           | BLIT_OP_COPY_A4
                                           | BLIT_OP_COPY_A8);
 8016186:	f240 13ef 	movw	r3, #495	; 0x1ef
    }
}
 801618a:	4618      	mov	r0, r3
 801618c:	370c      	adds	r7, #12
 801618e:	46bd      	mov	sp, r7
 8016190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016194:	4770      	bx	lr
 8016196:	bf00      	nop
 8016198:	20009378 	.word	0x20009378

0801619c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataCopy(const BlitOp& blitOp)
{
 801619c:	b590      	push	{r4, r7, lr}
 801619e:	b08d      	sub	sp, #52	; 0x34
 80161a0:	af02      	add	r7, sp, #8
 80161a2:	6078      	str	r0, [r7, #4]
 80161a4:	6039      	str	r1, [r7, #0]
    uint32_t dma2dTransferMode = DMA2D_M2M_BLEND;
 80161a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80161aa:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t dma2dColorMode = 0;
 80161ac:	2300      	movs	r3, #0
 80161ae:	623b      	str	r3, [r7, #32]

    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80161b0:	683b      	ldr	r3, [r7, #0]
 80161b2:	681b      	ldr	r3, [r3, #0]
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80161b4:	2b20      	cmp	r3, #32
 80161b6:	d007      	beq.n	80161c8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_ARGB8888_WITH_ALPHA
 80161b8:	683b      	ldr	r3, [r7, #0]
 80161ba:	681b      	ldr	r3, [r3, #0]
 80161bc:	2b40      	cmp	r3, #64	; 0x40
 80161be:	d003      	beq.n	80161c8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2c>
                          || blitOp.operation == BLIT_OP_COPY_WITH_ALPHA);
 80161c0:	683b      	ldr	r3, [r7, #0]
 80161c2:	681b      	ldr	r3, [r3, #0]
 80161c4:	2b04      	cmp	r3, #4
 80161c6:	d101      	bne.n	80161cc <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x30>
 80161c8:	2301      	movs	r3, #1
 80161ca:	e000      	b.n	80161ce <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x32>
 80161cc:	2300      	movs	r3, #0
    bool blendingImage = (blitOp.operation == BLIT_OP_COPY_ARGB8888
 80161ce:	77fb      	strb	r3, [r7, #31]

    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 80161d0:	683b      	ldr	r3, [r7, #0]
 80161d2:	681b      	ldr	r3, [r3, #0]
                         || blitOp.operation == BLIT_OP_COPY_A8);
 80161d4:	2b80      	cmp	r3, #128	; 0x80
 80161d6:	d004      	beq.n	80161e2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x46>
 80161d8:	683b      	ldr	r3, [r7, #0]
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80161e0:	d101      	bne.n	80161e6 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4a>
 80161e2:	2301      	movs	r3, #1
 80161e4:	e000      	b.n	80161e8 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x4c>
 80161e6:	2300      	movs	r3, #0
    bool blendingText = (blitOp.operation == BLIT_OP_COPY_A4
 80161e8:	77bb      	strb	r3, [r7, #30]

    uint8_t bitDepth = HAL::lcd().bitDepth();
 80161ea:	f7f9 fa51 	bl	800f690 <_ZN8touchgfx3HAL3lcdEv>
 80161ee:	4602      	mov	r2, r0
 80161f0:	6813      	ldr	r3, [r2, #0]
 80161f2:	3320      	adds	r3, #32
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	4610      	mov	r0, r2
 80161f8:	4798      	blx	r3
 80161fa:	4603      	mov	r3, r0
 80161fc:	777b      	strb	r3, [r7, #29]

    switch (blitOp.operation)
 80161fe:	683b      	ldr	r3, [r7, #0]
 8016200:	681b      	ldr	r3, [r3, #0]
 8016202:	2b40      	cmp	r3, #64	; 0x40
 8016204:	d01d      	beq.n	8016242 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8016206:	2b40      	cmp	r3, #64	; 0x40
 8016208:	d804      	bhi.n	8016214 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x78>
 801620a:	2b04      	cmp	r3, #4
 801620c:	d00e      	beq.n	801622c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 801620e:	2b20      	cmp	r3, #32
 8016210:	d017      	beq.n	8016242 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa6>
 8016212:	e019      	b.n	8016248 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
 8016214:	2b80      	cmp	r3, #128	; 0x80
 8016216:	d003      	beq.n	8016220 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x84>
 8016218:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801621c:	d003      	beq.n	8016226 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x8a>
 801621e:	e013      	b.n	8016248 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xac>
    {
    case BLIT_OP_COPY_A4:
        dma2dColorMode = CM_A4;
 8016220:	230a      	movs	r3, #10
 8016222:	623b      	str	r3, [r7, #32]
        break;
 8016224:	e01a      	b.n	801625c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_A8:
        dma2dColorMode = CM_A8;
 8016226:	2309      	movs	r3, #9
 8016228:	623b      	str	r3, [r7, #32]
        break;
 801622a:	e017      	b.n	801625c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 801622c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8016230:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016232:	7f7b      	ldrb	r3, [r7, #29]
 8016234:	2b10      	cmp	r3, #16
 8016236:	d101      	bne.n	801623c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa0>
 8016238:	2302      	movs	r3, #2
 801623a:	e000      	b.n	801623e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa2>
 801623c:	2301      	movs	r3, #1
 801623e:	623b      	str	r3, [r7, #32]
        break;
 8016240:	e00c      	b.n	801625c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    case BLIT_OP_COPY_ARGB8888:
    case BLIT_OP_COPY_ARGB8888_WITH_ALPHA:
        dma2dColorMode = CM_ARGB8888;
 8016242:	2300      	movs	r3, #0
 8016244:	623b      	str	r3, [r7, #32]
        break;
 8016246:	e009      	b.n	801625c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xc0>
    default:
        dma2dTransferMode = DMA2D_M2M;
 8016248:	2300      	movs	r3, #0
 801624a:	627b      	str	r3, [r7, #36]	; 0x24
        dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 801624c:	7f7b      	ldrb	r3, [r7, #29]
 801624e:	2b10      	cmp	r3, #16
 8016250:	d101      	bne.n	8016256 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xba>
 8016252:	2302      	movs	r3, #2
 8016254:	e000      	b.n	8016258 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xbc>
 8016256:	2301      	movs	r3, #1
 8016258:	623b      	str	r3, [r7, #32]
        break;
 801625a:	bf00      	nop
    }

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 801625c:	4a76      	ldr	r2, [pc, #472]	; (8016438 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801625e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016260:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8016262:	7f7b      	ldrb	r3, [r7, #29]
 8016264:	2b10      	cmp	r3, #16
 8016266:	d101      	bne.n	801626c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8016268:	2302      	movs	r3, #2
 801626a:	e000      	b.n	801626e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd2>
 801626c:	2301      	movs	r3, #1
 801626e:	4a72      	ldr	r2, [pc, #456]	; (8016438 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016270:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8016272:	683b      	ldr	r3, [r7, #0]
 8016274:	8a5b      	ldrh	r3, [r3, #18]
 8016276:	461a      	mov	r2, r3
 8016278:	683b      	ldr	r3, [r7, #0]
 801627a:	899b      	ldrh	r3, [r3, #12]
 801627c:	1ad3      	subs	r3, r2, r3
 801627e:	461a      	mov	r2, r3
 8016280:	4b6d      	ldr	r3, [pc, #436]	; (8016438 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016282:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8016284:	7f7b      	ldrb	r3, [r7, #29]
 8016286:	2b10      	cmp	r3, #16
 8016288:	d101      	bne.n	801628e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf2>
 801628a:	2202      	movs	r2, #2
 801628c:	e000      	b.n	8016290 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf4>
 801628e:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8016290:	683b      	ldr	r3, [r7, #0]
 8016292:	8a5b      	ldrh	r3, [r3, #18]
 8016294:	4619      	mov	r1, r3
 8016296:	683b      	ldr	r3, [r7, #0]
 8016298:	899b      	ldrh	r3, [r3, #12]
 801629a:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801629c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801629e:	4866      	ldr	r0, [pc, #408]	; (8016438 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80162a0:	f7ff fe96 	bl	8015fd0 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 80162a4:	4a64      	ldr	r2, [pc, #400]	; (8016438 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80162a6:	6a3b      	ldr	r3, [r7, #32]
 80162a8:	62d3      	str	r3, [r2, #44]	; 0x2c
    hdma2d.LayerCfg[1].InputOffset = blitOp.srcLoopStride - blitOp.nSteps;
 80162aa:	683b      	ldr	r3, [r7, #0]
 80162ac:	8a1b      	ldrh	r3, [r3, #16]
 80162ae:	461a      	mov	r2, r3
 80162b0:	683b      	ldr	r3, [r7, #0]
 80162b2:	899b      	ldrh	r3, [r3, #12]
 80162b4:	1ad3      	subs	r3, r2, r3
 80162b6:	461a      	mov	r2, r3
 80162b8:	4b5f      	ldr	r3, [pc, #380]	; (8016438 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80162ba:	629a      	str	r2, [r3, #40]	; 0x28

    if (blendingImage || blendingText)
 80162bc:	7ffb      	ldrb	r3, [r7, #31]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d103      	bne.n	80162ca <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
 80162c2:	7fbb      	ldrb	r3, [r7, #30]
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	f000 8082 	beq.w	80163ce <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x232>
    {
        if (blitOp.alpha < 255)
 80162ca:	683b      	ldr	r3, [r7, #0]
 80162cc:	7e1b      	ldrb	r3, [r3, #24]
 80162ce:	2bff      	cmp	r3, #255	; 0xff
 80162d0:	d008      	beq.n	80162e4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_COMBINE_ALPHA;
 80162d2:	4b59      	ldr	r3, [pc, #356]	; (8016438 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80162d4:	2202      	movs	r2, #2
 80162d6:	631a      	str	r2, [r3, #48]	; 0x30
            hdma2d.LayerCfg[1].InputAlpha = blitOp.alpha;
 80162d8:	683b      	ldr	r3, [r7, #0]
 80162da:	7e1b      	ldrb	r3, [r3, #24]
 80162dc:	461a      	mov	r2, r3
 80162de:	4b56      	ldr	r3, [pc, #344]	; (8016438 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80162e0:	635a      	str	r2, [r3, #52]	; 0x34
 80162e2:	e002      	b.n	80162ea <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14e>
        }
        else
        {
            hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80162e4:	4b54      	ldr	r3, [pc, #336]	; (8016438 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80162e6:	2200      	movs	r2, #0
 80162e8:	631a      	str	r2, [r3, #48]	; 0x30
        }

        if (blendingText)
 80162ea:	7fbb      	ldrb	r3, [r7, #30]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d059      	beq.n	80163a4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
        {
            if (bitDepth == 16)
 80162f0:	7f7b      	ldrb	r3, [r7, #29]
 80162f2:	2b10      	cmp	r3, #16
 80162f4:	d14a      	bne.n	801638c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x1f0>
            {
                uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 80162f6:	683b      	ldr	r3, [r7, #0]
 80162f8:	3314      	adds	r3, #20
 80162fa:	4618      	mov	r0, r3
 80162fc:	f7fa fdf6 	bl	8010eec <_ZNK8touchgfx9colortypecvtEv>
 8016300:	4603      	mov	r3, r0
 8016302:	12db      	asrs	r3, r3, #11
 8016304:	f003 021f 	and.w	r2, r3, #31
 8016308:	4613      	mov	r3, r2
 801630a:	021b      	lsls	r3, r3, #8
 801630c:	1a9b      	subs	r3, r3, r2
 801630e:	4a4b      	ldr	r2, [pc, #300]	; (801643c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 8016310:	fb82 1203 	smull	r1, r2, r2, r3
 8016314:	441a      	add	r2, r3
 8016316:	1112      	asrs	r2, r2, #4
 8016318:	17db      	asrs	r3, r3, #31
 801631a:	1ad3      	subs	r3, r2, r3
 801631c:	61bb      	str	r3, [r7, #24]
                uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 801631e:	683b      	ldr	r3, [r7, #0]
 8016320:	3314      	adds	r3, #20
 8016322:	4618      	mov	r0, r3
 8016324:	f7fa fde2 	bl	8010eec <_ZNK8touchgfx9colortypecvtEv>
 8016328:	4603      	mov	r3, r0
 801632a:	115b      	asrs	r3, r3, #5
 801632c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8016330:	4613      	mov	r3, r2
 8016332:	021b      	lsls	r3, r3, #8
 8016334:	1a9b      	subs	r3, r3, r2
 8016336:	4a42      	ldr	r2, [pc, #264]	; (8016440 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a4>)
 8016338:	fb82 1203 	smull	r1, r2, r2, r3
 801633c:	441a      	add	r2, r3
 801633e:	1152      	asrs	r2, r2, #5
 8016340:	17db      	asrs	r3, r3, #31
 8016342:	1ad3      	subs	r3, r2, r3
 8016344:	617b      	str	r3, [r7, #20]
                uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 8016346:	683b      	ldr	r3, [r7, #0]
 8016348:	3314      	adds	r3, #20
 801634a:	4618      	mov	r0, r3
 801634c:	f7fa fdce 	bl	8010eec <_ZNK8touchgfx9colortypecvtEv>
 8016350:	4603      	mov	r3, r0
 8016352:	f003 021f 	and.w	r2, r3, #31
 8016356:	4613      	mov	r3, r2
 8016358:	021b      	lsls	r3, r3, #8
 801635a:	1a9b      	subs	r3, r3, r2
 801635c:	4a37      	ldr	r2, [pc, #220]	; (801643c <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x2a0>)
 801635e:	fb82 1203 	smull	r1, r2, r2, r3
 8016362:	441a      	add	r2, r3
 8016364:	1112      	asrs	r2, r2, #4
 8016366:	17db      	asrs	r3, r3, #31
 8016368:	1ad3      	subs	r3, r2, r3
 801636a:	613b      	str	r3, [r7, #16]
                uint32_t alpha = blitOp.alpha;
 801636c:	683b      	ldr	r3, [r7, #0]
 801636e:	7e1b      	ldrb	r3, [r3, #24]
 8016370:	60fb      	str	r3, [r7, #12]
                hdma2d.LayerCfg[1].InputAlpha = (alpha << 24) | (red << 16) | (green << 8) | blue;
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	061a      	lsls	r2, r3, #24
 8016376:	69bb      	ldr	r3, [r7, #24]
 8016378:	041b      	lsls	r3, r3, #16
 801637a:	431a      	orrs	r2, r3
 801637c:	697b      	ldr	r3, [r7, #20]
 801637e:	021b      	lsls	r3, r3, #8
 8016380:	431a      	orrs	r2, r3
 8016382:	693b      	ldr	r3, [r7, #16]
 8016384:	4313      	orrs	r3, r2
 8016386:	4a2c      	ldr	r2, [pc, #176]	; (8016438 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016388:	6353      	str	r3, [r2, #52]	; 0x34
 801638a:	e00b      	b.n	80163a4 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x208>
            }
            else
            {
                hdma2d.LayerCfg[1].InputAlpha = blitOp.color.getColor32() | (blitOp.alpha << 24);
 801638c:	683b      	ldr	r3, [r7, #0]
 801638e:	3314      	adds	r3, #20
 8016390:	4618      	mov	r0, r3
 8016392:	f7fa fdb8 	bl	8010f06 <_ZNK8touchgfx9colortype10getColor32Ev>
 8016396:	4602      	mov	r2, r0
 8016398:	683b      	ldr	r3, [r7, #0]
 801639a:	7e1b      	ldrb	r3, [r3, #24]
 801639c:	061b      	lsls	r3, r3, #24
 801639e:	4313      	orrs	r3, r2
 80163a0:	4a25      	ldr	r2, [pc, #148]	; (8016438 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80163a2:	6353      	str	r3, [r2, #52]	; 0x34
            }
        }

        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80163a4:	683b      	ldr	r3, [r7, #0]
 80163a6:	8a5b      	ldrh	r3, [r3, #18]
 80163a8:	461a      	mov	r2, r3
 80163aa:	683b      	ldr	r3, [r7, #0]
 80163ac:	899b      	ldrh	r3, [r3, #12]
 80163ae:	1ad3      	subs	r3, r2, r3
 80163b0:	461a      	mov	r2, r3
 80163b2:	4b21      	ldr	r3, [pc, #132]	; (8016438 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80163b4:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80163b6:	7f7b      	ldrb	r3, [r7, #29]
 80163b8:	2b10      	cmp	r3, #16
 80163ba:	d101      	bne.n	80163c0 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x224>
 80163bc:	2302      	movs	r3, #2
 80163be:	e000      	b.n	80163c2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x226>
 80163c0:	2301      	movs	r3, #1
 80163c2:	4a1d      	ldr	r2, [pc, #116]	; (8016438 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80163c4:	61d3      	str	r3, [r2, #28]

        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 80163c6:	2100      	movs	r1, #0
 80163c8:	481b      	ldr	r0, [pc, #108]	; (8016438 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80163ca:	f7eb fc27 	bl	8001c1c <HAL_DMA2D_ConfigLayer>
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 80163ce:	2101      	movs	r1, #1
 80163d0:	4819      	ldr	r0, [pc, #100]	; (8016438 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 80163d2:	f7eb fc23 	bl	8001c1c <HAL_DMA2D_ConfigLayer>

    if (blendingImage || blendingText)
 80163d6:	7ffb      	ldrb	r3, [r7, #31]
 80163d8:	2b00      	cmp	r3, #0
 80163da:	d102      	bne.n	80163e2 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x246>
 80163dc:	7fbb      	ldrb	r3, [r7, #30]
 80163de:	2b00      	cmp	r3, #0
 80163e0:	d015      	beq.n	801640e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x272>
    {
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pSrc,
 80163e2:	683b      	ldr	r3, [r7, #0]
 80163e4:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80163e6:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 80163e8:	683b      	ldr	r3, [r7, #0]
 80163ea:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80163ec:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 80163ee:	683b      	ldr	r3, [r7, #0]
 80163f0:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80163f2:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80163f4:	683b      	ldr	r3, [r7, #0]
 80163f6:	899b      	ldrh	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80163f8:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80163fa:	683b      	ldr	r3, [r7, #0]
 80163fc:	89db      	ldrh	r3, [r3, #14]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80163fe:	9301      	str	r3, [sp, #4]
 8016400:	9200      	str	r2, [sp, #0]
 8016402:	4623      	mov	r3, r4
 8016404:	4602      	mov	r2, r0
 8016406:	480c      	ldr	r0, [pc, #48]	; (8016438 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 8016408:	f7eb fa2b 	bl	8001862 <HAL_DMA2D_BlendingStart_IT>
 801640c:	e00f      	b.n	801642e <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x292>
    }
    else
    {
        HAL_DMA2D_Start_IT(&hdma2d,
                           (unsigned int)blitOp.pSrc,
 801640e:	683b      	ldr	r3, [r7, #0]
 8016410:	685b      	ldr	r3, [r3, #4]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016412:	4619      	mov	r1, r3
                           (unsigned int)blitOp.pDst,
 8016414:	683b      	ldr	r3, [r7, #0]
 8016416:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016418:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 801641a:	683b      	ldr	r3, [r7, #0]
 801641c:	899b      	ldrh	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d,
 801641e:	4618      	mov	r0, r3
                           blitOp.nSteps, blitOp.nLoops);
 8016420:	683b      	ldr	r3, [r7, #0]
 8016422:	89db      	ldrh	r3, [r3, #14]
        HAL_DMA2D_Start_IT(&hdma2d,
 8016424:	9300      	str	r3, [sp, #0]
 8016426:	4603      	mov	r3, r0
 8016428:	4803      	ldr	r0, [pc, #12]	; (8016438 <_ZN10STM32F7DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x29c>)
 801642a:	f7eb f9e7 	bl	80017fc <HAL_DMA2D_Start_IT>
    }
}
 801642e:	bf00      	nop
 8016430:	372c      	adds	r7, #44	; 0x2c
 8016432:	46bd      	mov	sp, r7
 8016434:	bd90      	pop	{r4, r7, pc}
 8016436:	bf00      	nop
 8016438:	200092f0 	.word	0x200092f0
 801643c:	84210843 	.word	0x84210843
 8016440:	82082083 	.word	0x82082083

08016444 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE>:

void STM32F7DMA::setupDataFill(const BlitOp& blitOp)
{
 8016444:	b590      	push	{r4, r7, lr}
 8016446:	b08d      	sub	sp, #52	; 0x34
 8016448:	af02      	add	r7, sp, #8
 801644a:	6078      	str	r0, [r7, #4]
 801644c:	6039      	str	r1, [r7, #0]
    uint8_t bitDepth = HAL::lcd().bitDepth();
 801644e:	f7f9 f91f 	bl	800f690 <_ZN8touchgfx3HAL3lcdEv>
 8016452:	4602      	mov	r2, r0
 8016454:	6813      	ldr	r3, [r2, #0]
 8016456:	3320      	adds	r3, #32
 8016458:	681b      	ldr	r3, [r3, #0]
 801645a:	4610      	mov	r0, r2
 801645c:	4798      	blx	r3
 801645e:	4603      	mov	r3, r0
 8016460:	77fb      	strb	r3, [r7, #31]
    uint32_t dma2dTransferMode;
    uint32_t dma2dColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 8016462:	7ffb      	ldrb	r3, [r7, #31]
 8016464:	2b10      	cmp	r3, #16
 8016466:	d101      	bne.n	801646c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x28>
 8016468:	2302      	movs	r3, #2
 801646a:	e000      	b.n	801646e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x2a>
 801646c:	2301      	movs	r3, #1
 801646e:	61bb      	str	r3, [r7, #24]

    uint32_t color = 0;
 8016470:	2300      	movs	r3, #0
 8016472:	623b      	str	r3, [r7, #32]
    if (bitDepth == 16)
 8016474:	7ffb      	ldrb	r3, [r7, #31]
 8016476:	2b10      	cmp	r3, #16
 8016478:	d149      	bne.n	801650e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xca>
    {
        uint32_t red = (((blitOp.color & 0xF800) >> 11) * 255) / 31;
 801647a:	683b      	ldr	r3, [r7, #0]
 801647c:	3314      	adds	r3, #20
 801647e:	4618      	mov	r0, r3
 8016480:	f7fa fd34 	bl	8010eec <_ZNK8touchgfx9colortypecvtEv>
 8016484:	4603      	mov	r3, r0
 8016486:	12db      	asrs	r3, r3, #11
 8016488:	f003 021f 	and.w	r2, r3, #31
 801648c:	4613      	mov	r3, r2
 801648e:	021b      	lsls	r3, r3, #8
 8016490:	1a9b      	subs	r3, r3, r2
 8016492:	4a69      	ldr	r2, [pc, #420]	; (8016638 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 8016494:	fb82 1203 	smull	r1, r2, r2, r3
 8016498:	441a      	add	r2, r3
 801649a:	1112      	asrs	r2, r2, #4
 801649c:	17db      	asrs	r3, r3, #31
 801649e:	1ad3      	subs	r3, r2, r3
 80164a0:	617b      	str	r3, [r7, #20]
        uint32_t green = (((blitOp.color & 0x7E0) >> 5) * 255) / 63;
 80164a2:	683b      	ldr	r3, [r7, #0]
 80164a4:	3314      	adds	r3, #20
 80164a6:	4618      	mov	r0, r3
 80164a8:	f7fa fd20 	bl	8010eec <_ZNK8touchgfx9colortypecvtEv>
 80164ac:	4603      	mov	r3, r0
 80164ae:	115b      	asrs	r3, r3, #5
 80164b0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80164b4:	4613      	mov	r3, r2
 80164b6:	021b      	lsls	r3, r3, #8
 80164b8:	1a9b      	subs	r3, r3, r2
 80164ba:	4a60      	ldr	r2, [pc, #384]	; (801663c <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f8>)
 80164bc:	fb82 1203 	smull	r1, r2, r2, r3
 80164c0:	441a      	add	r2, r3
 80164c2:	1152      	asrs	r2, r2, #5
 80164c4:	17db      	asrs	r3, r3, #31
 80164c6:	1ad3      	subs	r3, r2, r3
 80164c8:	613b      	str	r3, [r7, #16]
        uint32_t blue = (((blitOp.color & 0x1F)) * 255) / 31;
 80164ca:	683b      	ldr	r3, [r7, #0]
 80164cc:	3314      	adds	r3, #20
 80164ce:	4618      	mov	r0, r3
 80164d0:	f7fa fd0c 	bl	8010eec <_ZNK8touchgfx9colortypecvtEv>
 80164d4:	4603      	mov	r3, r0
 80164d6:	f003 021f 	and.w	r2, r3, #31
 80164da:	4613      	mov	r3, r2
 80164dc:	021b      	lsls	r3, r3, #8
 80164de:	1a9b      	subs	r3, r3, r2
 80164e0:	4a55      	ldr	r2, [pc, #340]	; (8016638 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1f4>)
 80164e2:	fb82 1203 	smull	r1, r2, r2, r3
 80164e6:	441a      	add	r2, r3
 80164e8:	1112      	asrs	r2, r2, #4
 80164ea:	17db      	asrs	r3, r3, #31
 80164ec:	1ad3      	subs	r3, r2, r3
 80164ee:	60fb      	str	r3, [r7, #12]
        uint32_t alpha = blitOp.alpha;
 80164f0:	683b      	ldr	r3, [r7, #0]
 80164f2:	7e1b      	ldrb	r3, [r3, #24]
 80164f4:	60bb      	str	r3, [r7, #8]
        color = (alpha << 24) | (red << 16) | (green << 8) | blue;
 80164f6:	68bb      	ldr	r3, [r7, #8]
 80164f8:	061a      	lsls	r2, r3, #24
 80164fa:	697b      	ldr	r3, [r7, #20]
 80164fc:	041b      	lsls	r3, r3, #16
 80164fe:	431a      	orrs	r2, r3
 8016500:	693b      	ldr	r3, [r7, #16]
 8016502:	021b      	lsls	r3, r3, #8
 8016504:	4313      	orrs	r3, r2
 8016506:	68fa      	ldr	r2, [r7, #12]
 8016508:	4313      	orrs	r3, r2
 801650a:	623b      	str	r3, [r7, #32]
 801650c:	e00b      	b.n	8016526 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xe2>
    }
    else
    {
        color = (blitOp.alpha << 24) | blitOp.color.getColor32();
 801650e:	683b      	ldr	r3, [r7, #0]
 8016510:	7e1b      	ldrb	r3, [r3, #24]
 8016512:	061b      	lsls	r3, r3, #24
 8016514:	461c      	mov	r4, r3
 8016516:	683b      	ldr	r3, [r7, #0]
 8016518:	3314      	adds	r3, #20
 801651a:	4618      	mov	r0, r3
 801651c:	f7fa fcf3 	bl	8010f06 <_ZNK8touchgfx9colortype10getColor32Ev>
 8016520:	4603      	mov	r3, r0
 8016522:	4323      	orrs	r3, r4
 8016524:	623b      	str	r3, [r7, #32]
    }

    switch (blitOp.operation)
 8016526:	683b      	ldr	r3, [r7, #0]
 8016528:	681b      	ldr	r3, [r3, #0]
 801652a:	2b08      	cmp	r3, #8
 801652c:	d103      	bne.n	8016536 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xf2>
    {
    case BLIT_OP_FILL_WITH_ALPHA:
        dma2dTransferMode = DMA2D_M2M_BLEND;
 801652e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8016532:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8016534:	e003      	b.n	801653e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0xfa>
    default:
        dma2dTransferMode = DMA2D_R2M;
 8016536:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 801653a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 801653c:	bf00      	nop
    };

    /* HAL_DMA2D_ConfigLayer() depends on hdma2d.Init */
    hdma2d.Init.Mode = dma2dTransferMode;
 801653e:	4a40      	ldr	r2, [pc, #256]	; (8016640 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016542:	6053      	str	r3, [r2, #4]
    hdma2d.Init.ColorMode = (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888;
 8016544:	7ffb      	ldrb	r3, [r7, #31]
 8016546:	2b10      	cmp	r3, #16
 8016548:	d101      	bne.n	801654e <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10a>
 801654a:	2302      	movs	r3, #2
 801654c:	e000      	b.n	8016550 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x10c>
 801654e:	2301      	movs	r3, #1
 8016550:	4a3b      	ldr	r2, [pc, #236]	; (8016640 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016552:	6093      	str	r3, [r2, #8]
    hdma2d.Init.OutputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 8016554:	683b      	ldr	r3, [r7, #0]
 8016556:	8a5b      	ldrh	r3, [r3, #18]
 8016558:	461a      	mov	r2, r3
 801655a:	683b      	ldr	r3, [r7, #0]
 801655c:	899b      	ldrh	r3, [r3, #12]
 801655e:	1ad3      	subs	r3, r2, r3
 8016560:	461a      	mov	r2, r3
 8016562:	4b37      	ldr	r3, [pc, #220]	; (8016640 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016564:	60da      	str	r2, [r3, #12]

    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 8016566:	7ffb      	ldrb	r3, [r7, #31]
 8016568:	2b10      	cmp	r3, #16
 801656a:	d101      	bne.n	8016570 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12c>
 801656c:	2202      	movs	r2, #2
 801656e:	e000      	b.n	8016572 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x12e>
 8016570:	2201      	movs	r2, #1
                      (bitDepth == 16) ? DMA2D_RGB565 : DMA2D_RGB888,
                      blitOp.dstLoopStride - blitOp.nSteps);
 8016572:	683b      	ldr	r3, [r7, #0]
 8016574:	8a5b      	ldrh	r3, [r3, #18]
 8016576:	4619      	mov	r1, r3
 8016578:	683b      	ldr	r3, [r7, #0]
 801657a:	899b      	ldrh	r3, [r3, #12]
 801657c:	1acb      	subs	r3, r1, r3
    HAL_DMA2D_SetMode(&hdma2d, dma2dTransferMode,
 801657e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016580:	482f      	ldr	r0, [pc, #188]	; (8016640 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016582:	f7ff fd25 	bl	8015fd0 <_ZL17HAL_DMA2D_SetModeP21__DMA2D_HandleTypeDefmmm>

    if (dma2dTransferMode == DMA2D_M2M_BLEND) {
 8016586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016588:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801658c:	d11e      	bne.n	80165cc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x188>
        hdma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 801658e:	4b2c      	ldr	r3, [pc, #176]	; (8016640 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016590:	2201      	movs	r2, #1
 8016592:	631a      	str	r2, [r3, #48]	; 0x30
        hdma2d.LayerCfg[1].InputAlpha = color;
 8016594:	4a2a      	ldr	r2, [pc, #168]	; (8016640 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 8016596:	6a3b      	ldr	r3, [r7, #32]
 8016598:	6353      	str	r3, [r2, #52]	; 0x34
        hdma2d.LayerCfg[1].InputColorMode = CM_A8;
 801659a:	4b29      	ldr	r3, [pc, #164]	; (8016640 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801659c:	2209      	movs	r2, #9
 801659e:	62da      	str	r2, [r3, #44]	; 0x2c
        hdma2d.LayerCfg[0].InputOffset = blitOp.dstLoopStride - blitOp.nSteps;
 80165a0:	683b      	ldr	r3, [r7, #0]
 80165a2:	8a5b      	ldrh	r3, [r3, #18]
 80165a4:	461a      	mov	r2, r3
 80165a6:	683b      	ldr	r3, [r7, #0]
 80165a8:	899b      	ldrh	r3, [r3, #12]
 80165aa:	1ad3      	subs	r3, r2, r3
 80165ac:	461a      	mov	r2, r3
 80165ae:	4b24      	ldr	r3, [pc, #144]	; (8016640 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80165b0:	619a      	str	r2, [r3, #24]
        hdma2d.LayerCfg[0].InputColorMode = (bitDepth == 16) ? CM_RGB565 : CM_RGB888;
 80165b2:	7ffb      	ldrb	r3, [r7, #31]
 80165b4:	2b10      	cmp	r3, #16
 80165b6:	d101      	bne.n	80165bc <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x178>
 80165b8:	2302      	movs	r3, #2
 80165ba:	e000      	b.n	80165be <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x17a>
 80165bc:	2301      	movs	r3, #1
 80165be:	4a20      	ldr	r2, [pc, #128]	; (8016640 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80165c0:	61d3      	str	r3, [r2, #28]
        HAL_DMA2D_ConfigLayer(&hdma2d, 0);
 80165c2:	2100      	movs	r1, #0
 80165c4:	481e      	ldr	r0, [pc, #120]	; (8016640 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80165c6:	f7eb fb29 	bl	8001c1c <HAL_DMA2D_ConfigLayer>
 80165ca:	e005      	b.n	80165d8 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x194>
    } else {
        hdma2d.LayerCfg[1].InputColorMode = dma2dColorMode;
 80165cc:	4a1c      	ldr	r2, [pc, #112]	; (8016640 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80165ce:	69bb      	ldr	r3, [r7, #24]
 80165d0:	62d3      	str	r3, [r2, #44]	; 0x2c
        hdma2d.LayerCfg[1].InputOffset = 0;
 80165d2:	4b1b      	ldr	r3, [pc, #108]	; (8016640 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80165d4:	2200      	movs	r2, #0
 80165d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    HAL_DMA2D_ConfigLayer(&hdma2d, 1);
 80165d8:	2101      	movs	r1, #1
 80165da:	4819      	ldr	r0, [pc, #100]	; (8016640 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 80165dc:	f7eb fb1e 	bl	8001c1c <HAL_DMA2D_ConfigLayer>

    if (dma2dTransferMode == DMA2D_M2M_BLEND)
 80165e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80165e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80165e6:	d115      	bne.n	8016614 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1d0>
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
                                   (unsigned int)blitOp.pDst,
 80165e8:	683b      	ldr	r3, [r7, #0]
 80165ea:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80165ec:	4619      	mov	r1, r3
                                   (unsigned int)blitOp.pDst,
 80165ee:	683b      	ldr	r3, [r7, #0]
 80165f0:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80165f2:	4618      	mov	r0, r3
                                   (unsigned int)blitOp.pDst,
 80165f4:	683b      	ldr	r3, [r7, #0]
 80165f6:	689b      	ldr	r3, [r3, #8]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80165f8:	461c      	mov	r4, r3
                                   blitOp.nSteps, blitOp.nLoops);
 80165fa:	683b      	ldr	r3, [r7, #0]
 80165fc:	899b      	ldrh	r3, [r3, #12]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 80165fe:	461a      	mov	r2, r3
                                   blitOp.nSteps, blitOp.nLoops);
 8016600:	683b      	ldr	r3, [r7, #0]
 8016602:	89db      	ldrh	r3, [r3, #14]
        HAL_DMA2D_BlendingStart_IT(&hdma2d,
 8016604:	9301      	str	r3, [sp, #4]
 8016606:	9200      	str	r2, [sp, #0]
 8016608:	4623      	mov	r3, r4
 801660a:	4602      	mov	r2, r0
 801660c:	480c      	ldr	r0, [pc, #48]	; (8016640 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801660e:	f7eb f928 	bl	8001862 <HAL_DMA2D_BlendingStart_IT>
    else
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
                           blitOp.nSteps, blitOp.nLoops);
}
 8016612:	e00d      	b.n	8016630 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1ec>
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8016614:	683b      	ldr	r3, [r7, #0]
 8016616:	689b      	ldr	r3, [r3, #8]
 8016618:	461a      	mov	r2, r3
                           blitOp.nSteps, blitOp.nLoops);
 801661a:	683b      	ldr	r3, [r7, #0]
 801661c:	899b      	ldrh	r3, [r3, #12]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 801661e:	4619      	mov	r1, r3
                           blitOp.nSteps, blitOp.nLoops);
 8016620:	683b      	ldr	r3, [r7, #0]
 8016622:	89db      	ldrh	r3, [r3, #14]
        HAL_DMA2D_Start_IT(&hdma2d, color, (unsigned int)blitOp.pDst,
 8016624:	9300      	str	r3, [sp, #0]
 8016626:	460b      	mov	r3, r1
 8016628:	6a39      	ldr	r1, [r7, #32]
 801662a:	4805      	ldr	r0, [pc, #20]	; (8016640 <_ZN10STM32F7DMA13setupDataFillERKN8touchgfx6BlitOpE+0x1fc>)
 801662c:	f7eb f8e6 	bl	80017fc <HAL_DMA2D_Start_IT>
}
 8016630:	bf00      	nop
 8016632:	372c      	adds	r7, #44	; 0x2c
 8016634:	46bd      	mov	sp, r7
 8016636:	bd90      	pop	{r4, r7, pc}
 8016638:	84210843 	.word	0x84210843
 801663c:	82082083 	.word	0x82082083
 8016640:	200092f0 	.word	0x200092f0

08016644 <_ZN10STM32F7DMA5startEv>:

void STM32F7DMA::start()
{
 8016644:	b580      	push	{r7, lr}
 8016646:	b082      	sub	sp, #8
 8016648:	af00      	add	r7, sp, #0
 801664a:	6078      	str	r0, [r7, #4]
    // If the framebuffer is placed in cached memory (e.g. SRAM) then we need
    // to flush the Dcache prior to letting DMA2D accessing it. That's done
    // using SCB_CleanDCache() or SCB_CleanDCache_by_Addr().
    DMA_Interface::start();
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	4618      	mov	r0, r3
 8016650:	f007 fa3c 	bl	801dacc <_ZN8touchgfx13DMA_Interface5startEv>
}
 8016654:	bf00      	nop
 8016656:	3708      	adds	r7, #8
 8016658:	46bd      	mov	sp, r7
 801665a:	bd80      	pop	{r7, pc}

0801665c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
class LockFreeDMA_Queue : public DMA_Queue
 801665c:	b580      	push	{r7, lr}
 801665e:	b082      	sub	sp, #8
 8016660:	af00      	add	r7, sp, #0
 8016662:	6078      	str	r0, [r7, #4]
 8016664:	4a05      	ldr	r2, [pc, #20]	; (801667c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev+0x20>)
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	601a      	str	r2, [r3, #0]
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	4618      	mov	r0, r3
 801666e:	f7ff fbe3 	bl	8015e38 <_ZN8touchgfx9DMA_QueueD1Ev>
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	4618      	mov	r0, r3
 8016676:	3708      	adds	r7, #8
 8016678:	46bd      	mov	sp, r7
 801667a:	bd80      	pop	{r7, pc}
 801667c:	08025b30 	.word	0x08025b30

08016680 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8016680:	b580      	push	{r7, lr}
 8016682:	b082      	sub	sp, #8
 8016684:	af00      	add	r7, sp, #0
 8016686:	6078      	str	r0, [r7, #4]
 8016688:	6878      	ldr	r0, [r7, #4]
 801668a:	f7ff ffe7 	bl	801665c <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>
 801668e:	2114      	movs	r1, #20
 8016690:	6878      	ldr	r0, [r7, #4]
 8016692:	f00b fec6 	bl	8022422 <_ZdlPvj>
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	4618      	mov	r0, r3
 801669a:	3708      	adds	r7, #8
 801669c:	46bd      	mov	sp, r7
 801669e:	bd80      	pop	{r7, pc}

080166a0 <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
    virtual void setDisplayOrientation(DisplayOrientation orientation)
 80166a0:	b480      	push	{r7}
 80166a2:	b083      	sub	sp, #12
 80166a4:	af00      	add	r7, sp, #0
 80166a6:	6078      	str	r0, [r7, #4]
 80166a8:	460b      	mov	r3, r1
 80166aa:	70fb      	strb	r3, [r7, #3]
        requestedOrientation = orientation;
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	78fa      	ldrb	r2, [r7, #3]
 80166b0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
        displayOrientationChangeRequested = true;
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	2201      	movs	r2, #1
 80166b8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
    }
 80166bc:	bf00      	nop
 80166be:	370c      	adds	r7, #12
 80166c0:	46bd      	mov	sp, r7
 80166c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166c6:	4770      	bx	lr

080166c8 <_ZN8touchgfx3HAL17frontPorchEnteredEv>:
    void frontPorchEntered()
 80166c8:	b580      	push	{r7, lr}
 80166ca:	b082      	sub	sp, #8
 80166cc:	af00      	add	r7, sp, #0
 80166ce:	6078      	str	r0, [r7, #4]
        allowDMATransfers();
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	3318      	adds	r3, #24
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	6878      	ldr	r0, [r7, #4]
 80166da:	4798      	blx	r3
    }
 80166dc:	bf00      	nop
 80166de:	3708      	adds	r7, #8
 80166e0:	46bd      	mov	sp, r7
 80166e2:	bd80      	pop	{r7, pc}

080166e4 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 80166e4:	b580      	push	{r7, lr}
 80166e6:	b082      	sub	sp, #8
 80166e8:	af00      	add	r7, sp, #0
 80166ea:	6078      	str	r0, [r7, #4]
        return dma.getBlitCaps();
 80166ec:	687b      	ldr	r3, [r7, #4]
 80166ee:	685a      	ldr	r2, [r3, #4]
 80166f0:	687b      	ldr	r3, [r7, #4]
 80166f2:	685b      	ldr	r3, [r3, #4]
 80166f4:	681b      	ldr	r3, [r3, #0]
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	4610      	mov	r0, r2
 80166fa:	4798      	blx	r3
 80166fc:	4603      	mov	r3, r0
    };
 80166fe:	4618      	mov	r0, r3
 8016700:	3708      	adds	r7, #8
 8016702:	46bd      	mov	sp, r7
 8016704:	bd80      	pop	{r7, pc}

08016706 <_ZN8touchgfx3HAL5vSyncEv>:
    void vSync()
 8016706:	b480      	push	{r7}
 8016708:	b083      	sub	sp, #12
 801670a:	af00      	add	r7, sp, #0
 801670c:	6078      	str	r0, [r7, #4]
        vSyncCnt++;
 801670e:	687b      	ldr	r3, [r7, #4]
 8016710:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8016714:	3301      	adds	r3, #1
 8016716:	b2da      	uxtb	r2, r3
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
    };
 801671e:	bf00      	nop
 8016720:	370c      	adds	r7, #12
 8016722:	46bd      	mov	sp, r7
 8016724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016728:	4770      	bx	lr

0801672a <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 801672a:	b580      	push	{r7, lr}
 801672c:	b082      	sub	sp, #8
 801672e:	af00      	add	r7, sp, #0
 8016730:	6078      	str	r0, [r7, #4]
        swapFrameBuffers();
 8016732:	6878      	ldr	r0, [r7, #4]
 8016734:	f007 f8a0 	bl	801d878 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	681b      	ldr	r3, [r3, #0]
 801673c:	3384      	adds	r3, #132	; 0x84
 801673e:	681b      	ldr	r3, [r3, #0]
 8016740:	6878      	ldr	r0, [r7, #4]
 8016742:	4798      	blx	r3
    }
 8016744:	bf00      	nop
 8016746:	3708      	adds	r7, #8
 8016748:	46bd      	mov	sp, r7
 801674a:	bd80      	pop	{r7, pc}

0801674c <_ZN8touchgfx3HAL9sampleKeyERh>:
    virtual bool sampleKey(uint8_t& key)
 801674c:	b480      	push	{r7}
 801674e:	b083      	sub	sp, #12
 8016750:	af00      	add	r7, sp, #0
 8016752:	6078      	str	r0, [r7, #4]
 8016754:	6039      	str	r1, [r7, #0]
        return false;
 8016756:	2300      	movs	r3, #0
    }
 8016758:	4618      	mov	r0, r3
 801675a:	370c      	adds	r7, #12
 801675c:	46bd      	mov	sp, r7
 801675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016762:	4770      	bx	lr

08016764 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb>:
    virtual void setFrameBufferStartAddress(void* adr, uint16_t depth = 16, bool useDoubleBuffering = true, bool useAnimationStorage = true)
 8016764:	b580      	push	{r7, lr}
 8016766:	b086      	sub	sp, #24
 8016768:	af00      	add	r7, sp, #0
 801676a:	60f8      	str	r0, [r7, #12]
 801676c:	60b9      	str	r1, [r7, #8]
 801676e:	4611      	mov	r1, r2
 8016770:	461a      	mov	r2, r3
 8016772:	460b      	mov	r3, r1
 8016774:	80fb      	strh	r3, [r7, #6]
 8016776:	4613      	mov	r3, r2
 8016778:	717b      	strb	r3, [r7, #5]
        uint32_t bufferSizeInBytes = 0;
 801677a:	2300      	movs	r3, #0
 801677c:	617b      	str	r3, [r7, #20]
        switch (depth)
 801677e:	88fb      	ldrh	r3, [r7, #6]
 8016780:	3b01      	subs	r3, #1
 8016782:	2b1f      	cmp	r3, #31
 8016784:	d862      	bhi.n	801684c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xe8>
 8016786:	a201      	add	r2, pc, #4	; (adr r2, 801678c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x28>)
 8016788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801678c:	08016829 	.word	0x08016829
 8016790:	08016829 	.word	0x08016829
 8016794:	0801684d 	.word	0x0801684d
 8016798:	08016829 	.word	0x08016829
 801679c:	0801684d 	.word	0x0801684d
 80167a0:	0801684d 	.word	0x0801684d
 80167a4:	0801684d 	.word	0x0801684d
 80167a8:	0801680d 	.word	0x0801680d
 80167ac:	0801684d 	.word	0x0801684d
 80167b0:	0801684d 	.word	0x0801684d
 80167b4:	0801684d 	.word	0x0801684d
 80167b8:	0801684d 	.word	0x0801684d
 80167bc:	0801684d 	.word	0x0801684d
 80167c0:	0801684d 	.word	0x0801684d
 80167c4:	0801684d 	.word	0x0801684d
 80167c8:	0801680d 	.word	0x0801680d
 80167cc:	0801684d 	.word	0x0801684d
 80167d0:	0801684d 	.word	0x0801684d
 80167d4:	0801684d 	.word	0x0801684d
 80167d8:	0801684d 	.word	0x0801684d
 80167dc:	0801684d 	.word	0x0801684d
 80167e0:	0801684d 	.word	0x0801684d
 80167e4:	0801684d 	.word	0x0801684d
 80167e8:	0801680d 	.word	0x0801680d
 80167ec:	0801684d 	.word	0x0801684d
 80167f0:	0801684d 	.word	0x0801684d
 80167f4:	0801684d 	.word	0x0801684d
 80167f8:	0801684d 	.word	0x0801684d
 80167fc:	0801684d 	.word	0x0801684d
 8016800:	0801684d 	.word	0x0801684d
 8016804:	0801684d 	.word	0x0801684d
 8016808:	0801680d 	.word	0x0801680d
            bufferSizeInBytes = (DISPLAY_WIDTH * DISPLAY_HEIGHT) * (depth / 8);
 801680c:	4b29      	ldr	r3, [pc, #164]	; (80168b4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x150>)
 801680e:	881b      	ldrh	r3, [r3, #0]
 8016810:	461a      	mov	r2, r3
 8016812:	4b29      	ldr	r3, [pc, #164]	; (80168b8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x154>)
 8016814:	881b      	ldrh	r3, [r3, #0]
 8016816:	fb03 f302 	mul.w	r3, r3, r2
 801681a:	88fa      	ldrh	r2, [r7, #6]
 801681c:	08d2      	lsrs	r2, r2, #3
 801681e:	b292      	uxth	r2, r2
 8016820:	fb02 f303 	mul.w	r3, r2, r3
 8016824:	617b      	str	r3, [r7, #20]
            break;
 8016826:	e018      	b.n	801685a <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xf6>
            bufferSizeInBytes = ((DISPLAY_WIDTH * depth + 7) / 8) * DISPLAY_HEIGHT;
 8016828:	4b22      	ldr	r3, [pc, #136]	; (80168b4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x150>)
 801682a:	881b      	ldrh	r3, [r3, #0]
 801682c:	461a      	mov	r2, r3
 801682e:	88fb      	ldrh	r3, [r7, #6]
 8016830:	fb03 f302 	mul.w	r3, r3, r2
 8016834:	3307      	adds	r3, #7
 8016836:	2b00      	cmp	r3, #0
 8016838:	da00      	bge.n	801683c <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xd8>
 801683a:	3307      	adds	r3, #7
 801683c:	10db      	asrs	r3, r3, #3
 801683e:	461a      	mov	r2, r3
 8016840:	4b1d      	ldr	r3, [pc, #116]	; (80168b8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x154>)
 8016842:	881b      	ldrh	r3, [r3, #0]
 8016844:	fb03 f302 	mul.w	r3, r3, r2
 8016848:	617b      	str	r3, [r7, #20]
            break;
 801684a:	e006      	b.n	801685a <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0xf6>
            assert(0 && "Unsupported bit depth"); // Must be power of two
 801684c:	4b1b      	ldr	r3, [pc, #108]	; (80168bc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x158>)
 801684e:	4a1c      	ldr	r2, [pc, #112]	; (80168c0 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x15c>)
 8016850:	f44f 7139 	mov.w	r1, #740	; 0x2e4
 8016854:	481b      	ldr	r0, [pc, #108]	; (80168c4 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x160>)
 8016856:	f00b fe01 	bl	802245c <__assert_func>
        uint8_t* buffer = static_cast<uint8_t*>(adr);
 801685a:	68bb      	ldr	r3, [r7, #8]
 801685c:	613b      	str	r3, [r7, #16]
        frameBuffer0 = reinterpret_cast<uint16_t*>(buffer);
 801685e:	68fb      	ldr	r3, [r7, #12]
 8016860:	693a      	ldr	r2, [r7, #16]
 8016862:	639a      	str	r2, [r3, #56]	; 0x38
        if (useDoubleBuffering)
 8016864:	797b      	ldrb	r3, [r7, #5]
 8016866:	2b00      	cmp	r3, #0
 8016868:	d007      	beq.n	801687a <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x116>
            buffer += bufferSizeInBytes;
 801686a:	693a      	ldr	r2, [r7, #16]
 801686c:	697b      	ldr	r3, [r7, #20]
 801686e:	4413      	add	r3, r2
 8016870:	613b      	str	r3, [r7, #16]
            frameBuffer1 = reinterpret_cast<uint16_t*>(buffer);
 8016872:	68fb      	ldr	r3, [r7, #12]
 8016874:	693a      	ldr	r2, [r7, #16]
 8016876:	63da      	str	r2, [r3, #60]	; 0x3c
 8016878:	e002      	b.n	8016880 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x11c>
            frameBuffer1 = 0;
 801687a:	68fb      	ldr	r3, [r7, #12]
 801687c:	2200      	movs	r2, #0
 801687e:	63da      	str	r2, [r3, #60]	; 0x3c
        if (useAnimationStorage)
 8016880:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016884:	2b00      	cmp	r3, #0
 8016886:	d007      	beq.n	8016898 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x134>
            buffer += bufferSizeInBytes;
 8016888:	693a      	ldr	r2, [r7, #16]
 801688a:	697b      	ldr	r3, [r7, #20]
 801688c:	4413      	add	r3, r2
 801688e:	613b      	str	r3, [r7, #16]
            frameBuffer2 = reinterpret_cast<uint16_t*>(buffer);
 8016890:	68fb      	ldr	r3, [r7, #12]
 8016892:	693a      	ldr	r2, [r7, #16]
 8016894:	641a      	str	r2, [r3, #64]	; 0x40
 8016896:	e002      	b.n	801689e <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x13a>
            frameBuffer2 = 0;
 8016898:	68fb      	ldr	r3, [r7, #12]
 801689a:	2200      	movs	r2, #0
 801689c:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = useDoubleBuffering;
 801689e:	4a0a      	ldr	r2, [pc, #40]	; (80168c8 <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x164>)
 80168a0:	797b      	ldrb	r3, [r7, #5]
 80168a2:	7013      	strb	r3, [r2, #0]
        USE_ANIMATION_STORAGE = useAnimationStorage;
 80168a4:	4a09      	ldr	r2, [pc, #36]	; (80168cc <_ZN8touchgfx3HAL26setFrameBufferStartAddressEPvtbb+0x168>)
 80168a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80168aa:	7013      	strb	r3, [r2, #0]
    }
 80168ac:	bf00      	nop
 80168ae:	3718      	adds	r7, #24
 80168b0:	46bd      	mov	sp, r7
 80168b2:	bd80      	pop	{r7, pc}
 80168b4:	20009d28 	.word	0x20009d28
 80168b8:	20009d2a 	.word	0x20009d2a
 80168bc:	08023954 	.word	0x08023954
 80168c0:	08024aec 	.word	0x08024aec
 80168c4:	08023974 	.word	0x08023974
 80168c8:	20009d32 	.word	0x20009d32
 80168cc:	20009d33 	.word	0x20009d33

080168d0 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_>:
    virtual void setFrameBufferStartAddresses(void* frameBuffer, void* doubleBuffer, void* animationStorage)
 80168d0:	b580      	push	{r7, lr}
 80168d2:	b084      	sub	sp, #16
 80168d4:	af00      	add	r7, sp, #0
 80168d6:	60f8      	str	r0, [r7, #12]
 80168d8:	60b9      	str	r1, [r7, #8]
 80168da:	607a      	str	r2, [r7, #4]
 80168dc:	603b      	str	r3, [r7, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 80168de:	68bb      	ldr	r3, [r7, #8]
 80168e0:	2b00      	cmp	r3, #0
 80168e2:	d106      	bne.n	80168f2 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x22>
 80168e4:	4b11      	ldr	r3, [pc, #68]	; (801692c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x5c>)
 80168e6:	4a12      	ldr	r2, [pc, #72]	; (8016930 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x60>)
 80168e8:	f44f 7143 	mov.w	r1, #780	; 0x30c
 80168ec:	4811      	ldr	r0, [pc, #68]	; (8016934 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x64>)
 80168ee:	f00b fdb5 	bl	802245c <__assert_func>
        frameBuffer0 = reinterpret_cast<uint16_t*>(frameBuffer);
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	68ba      	ldr	r2, [r7, #8]
 80168f6:	639a      	str	r2, [r3, #56]	; 0x38
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 80168f8:	68fb      	ldr	r3, [r7, #12]
 80168fa:	687a      	ldr	r2, [r7, #4]
 80168fc:	63da      	str	r2, [r3, #60]	; 0x3c
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	683a      	ldr	r2, [r7, #0]
 8016902:	641a      	str	r2, [r3, #64]	; 0x40
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	2b00      	cmp	r3, #0
 8016908:	bf14      	ite	ne
 801690a:	2301      	movne	r3, #1
 801690c:	2300      	moveq	r3, #0
 801690e:	b2da      	uxtb	r2, r3
 8016910:	4b09      	ldr	r3, [pc, #36]	; (8016938 <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x68>)
 8016912:	701a      	strb	r2, [r3, #0]
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8016914:	683b      	ldr	r3, [r7, #0]
 8016916:	2b00      	cmp	r3, #0
 8016918:	bf14      	ite	ne
 801691a:	2301      	movne	r3, #1
 801691c:	2300      	moveq	r3, #0
 801691e:	b2da      	uxtb	r2, r3
 8016920:	4b06      	ldr	r3, [pc, #24]	; (801693c <_ZN8touchgfx3HAL28setFrameBufferStartAddressesEPvS1_S1_+0x6c>)
 8016922:	701a      	strb	r2, [r3, #0]
    }
 8016924:	bf00      	nop
 8016926:	3710      	adds	r7, #16
 8016928:	46bd      	mov	sp, r7
 801692a:	bd80      	pop	{r7, pc}
 801692c:	080239e4 	.word	0x080239e4
 8016930:	08024a9c 	.word	0x08024a9c
 8016934:	08023974 	.word	0x08023974
 8016938:	20009d32 	.word	0x20009d32
 801693c:	20009d33 	.word	0x20009d33

08016940 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @param ms Number of milliseconds to wait.
     *
     * @see void registerTaskDelayFunction(void (*delayF)(uint16_t))
     */
    virtual void taskDelay(uint16_t ms)
 8016940:	b580      	push	{r7, lr}
 8016942:	b082      	sub	sp, #8
 8016944:	af00      	add	r7, sp, #0
 8016946:	6078      	str	r0, [r7, #4]
 8016948:	460b      	mov	r3, r1
 801694a:	807b      	strh	r3, [r7, #2]
    {
        if (taskDelayFunc)
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016950:	2b00      	cmp	r3, #0
 8016952:	d004      	beq.n	801695e <_ZN8touchgfx3HAL9taskDelayEt+0x1e>
        {
            taskDelayFunc(ms);
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016958:	887a      	ldrh	r2, [r7, #2]
 801695a:	4610      	mov	r0, r2
 801695c:	4798      	blx	r3
        }
    }
 801695e:	bf00      	nop
 8016960:	3708      	adds	r7, #8
 8016962:	46bd      	mov	sp, r7
 8016964:	bd80      	pop	{r7, pc}
	...

08016968 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
     *
     * @brief Perform the actual display orientation change.
     *
     *        Perform the actual display orientation change.
     */
    virtual void performDisplayOrientationChange()
 8016968:	b480      	push	{r7}
 801696a:	b083      	sub	sp, #12
 801696c:	af00      	add	r7, sp, #0
 801696e:	6078      	str	r0, [r7, #4]
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8016970:	687b      	ldr	r3, [r7, #4]
 8016972:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801697c:	429a      	cmp	r2, r3
 801697e:	d017      	beq.n	80169b0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x48>
        {
            if (DISPLAY_ROTATION == rotate0)
 8016980:	4b1a      	ldr	r3, [pc, #104]	; (80169ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 8016982:	781b      	ldrb	r3, [r3, #0]
 8016984:	2b00      	cmp	r3, #0
 8016986:	d12a      	bne.n	80169de <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            {
                FRAME_BUFFER_WIDTH = DISPLAY_WIDTH;
 8016988:	4b19      	ldr	r3, [pc, #100]	; (80169f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 801698a:	881a      	ldrh	r2, [r3, #0]
 801698c:	4b19      	ldr	r3, [pc, #100]	; (80169f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801698e:	801a      	strh	r2, [r3, #0]
                FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT;
 8016990:	4b19      	ldr	r3, [pc, #100]	; (80169f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 8016992:	881a      	ldrh	r2, [r3, #0]
 8016994:	4b19      	ldr	r3, [pc, #100]	; (80169fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 8016996:	801a      	strh	r2, [r3, #0]
                DISPLAY_HEIGHT = FRAME_BUFFER_WIDTH;
 8016998:	4b16      	ldr	r3, [pc, #88]	; (80169f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 801699a:	881a      	ldrh	r2, [r3, #0]
 801699c:	4b16      	ldr	r3, [pc, #88]	; (80169f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 801699e:	801a      	strh	r2, [r3, #0]
                DISPLAY_WIDTH = FRAME_BUFFER_HEIGHT;
 80169a0:	4b16      	ldr	r3, [pc, #88]	; (80169fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80169a2:	881a      	ldrh	r2, [r3, #0]
 80169a4:	4b12      	ldr	r3, [pc, #72]	; (80169f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80169a6:	801a      	strh	r2, [r3, #0]
                DISPLAY_ROTATION = rotate90;
 80169a8:	4b10      	ldr	r3, [pc, #64]	; (80169ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80169aa:	2201      	movs	r2, #1
 80169ac:	701a      	strb	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
            DISPLAY_ROTATION = rotate0;
        }
    }
 80169ae:	e016      	b.n	80169de <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
        else if (DISPLAY_ROTATION != rotate0)
 80169b0:	4b0e      	ldr	r3, [pc, #56]	; (80169ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80169b2:	781b      	ldrb	r3, [r3, #0]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d012      	beq.n	80169de <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x76>
            FRAME_BUFFER_WIDTH = DISPLAY_HEIGHT;
 80169b8:	4b0f      	ldr	r3, [pc, #60]	; (80169f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80169ba:	881a      	ldrh	r2, [r3, #0]
 80169bc:	4b0d      	ldr	r3, [pc, #52]	; (80169f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80169be:	801a      	strh	r2, [r3, #0]
            FRAME_BUFFER_HEIGHT = DISPLAY_WIDTH;
 80169c0:	4b0b      	ldr	r3, [pc, #44]	; (80169f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80169c2:	881a      	ldrh	r2, [r3, #0]
 80169c4:	4b0d      	ldr	r3, [pc, #52]	; (80169fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80169c6:	801a      	strh	r2, [r3, #0]
            DISPLAY_HEIGHT = FRAME_BUFFER_HEIGHT;
 80169c8:	4b0c      	ldr	r3, [pc, #48]	; (80169fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x94>)
 80169ca:	881a      	ldrh	r2, [r3, #0]
 80169cc:	4b0a      	ldr	r3, [pc, #40]	; (80169f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x90>)
 80169ce:	801a      	strh	r2, [r3, #0]
            DISPLAY_WIDTH = FRAME_BUFFER_WIDTH;
 80169d0:	4b08      	ldr	r3, [pc, #32]	; (80169f4 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x8c>)
 80169d2:	881a      	ldrh	r2, [r3, #0]
 80169d4:	4b06      	ldr	r3, [pc, #24]	; (80169f0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x88>)
 80169d6:	801a      	strh	r2, [r3, #0]
            DISPLAY_ROTATION = rotate0;
 80169d8:	4b04      	ldr	r3, [pc, #16]	; (80169ec <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x84>)
 80169da:	2200      	movs	r2, #0
 80169dc:	701a      	strb	r2, [r3, #0]
    }
 80169de:	bf00      	nop
 80169e0:	370c      	adds	r7, #12
 80169e2:	46bd      	mov	sp, r7
 80169e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169e8:	4770      	bx	lr
 80169ea:	bf00      	nop
 80169ec:	20009d2c 	.word	0x20009d2c
 80169f0:	20009d28 	.word	0x20009d28
 80169f4:	20009d2e 	.word	0x20009d2e
 80169f8:	20009d2a 	.word	0x20009d2a
 80169fc:	20009d30 	.word	0x20009d30

08016a00 <__NVIC_EnableIRQ>:
{
 8016a00:	b480      	push	{r7}
 8016a02:	b083      	sub	sp, #12
 8016a04:	af00      	add	r7, sp, #0
 8016a06:	4603      	mov	r3, r0
 8016a08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016a0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	db0d      	blt.n	8016a2e <__NVIC_EnableIRQ+0x2e>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a16:	b2db      	uxtb	r3, r3
 8016a18:	f003 021f 	and.w	r2, r3, #31
 8016a1c:	4907      	ldr	r1, [pc, #28]	; (8016a3c <__NVIC_EnableIRQ+0x3c>)
 8016a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a22:	095b      	lsrs	r3, r3, #5
 8016a24:	2001      	movs	r0, #1
 8016a26:	fa00 f202 	lsl.w	r2, r0, r2
 8016a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8016a2e:	bf00      	nop
 8016a30:	370c      	adds	r7, #12
 8016a32:	46bd      	mov	sp, r7
 8016a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a38:	4770      	bx	lr
 8016a3a:	bf00      	nop
 8016a3c:	e000e100 	.word	0xe000e100

08016a40 <__NVIC_DisableIRQ>:
{
 8016a40:	b480      	push	{r7}
 8016a42:	b083      	sub	sp, #12
 8016a44:	af00      	add	r7, sp, #0
 8016a46:	4603      	mov	r3, r0
 8016a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a4e:	2b00      	cmp	r3, #0
 8016a50:	db12      	blt.n	8016a78 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8016a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a56:	b2db      	uxtb	r3, r3
 8016a58:	f003 021f 	and.w	r2, r3, #31
 8016a5c:	4909      	ldr	r1, [pc, #36]	; (8016a84 <__NVIC_DisableIRQ+0x44>)
 8016a5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a62:	095b      	lsrs	r3, r3, #5
 8016a64:	2001      	movs	r0, #1
 8016a66:	fa00 f202 	lsl.w	r2, r0, r2
 8016a6a:	3320      	adds	r3, #32
 8016a6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8016a70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8016a74:	f3bf 8f6f 	isb	sy
}
 8016a78:	bf00      	nop
 8016a7a:	370c      	adds	r7, #12
 8016a7c:	46bd      	mov	sp, r7
 8016a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a82:	4770      	bx	lr
 8016a84:	e000e100 	.word	0xe000e100

08016a88 <__NVIC_SetPriority>:
{
 8016a88:	b480      	push	{r7}
 8016a8a:	b083      	sub	sp, #12
 8016a8c:	af00      	add	r7, sp, #0
 8016a8e:	4603      	mov	r3, r0
 8016a90:	6039      	str	r1, [r7, #0]
 8016a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016a98:	2b00      	cmp	r3, #0
 8016a9a:	db0c      	blt.n	8016ab6 <__NVIC_SetPriority+0x2e>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016a9c:	683b      	ldr	r3, [r7, #0]
 8016a9e:	b2db      	uxtb	r3, r3
 8016aa0:	4a0e      	ldr	r2, [pc, #56]	; (8016adc <__NVIC_SetPriority+0x54>)
 8016aa2:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8016aa6:	4608      	mov	r0, r1
 8016aa8:	011b      	lsls	r3, r3, #4
 8016aaa:	b2d9      	uxtb	r1, r3
 8016aac:	1813      	adds	r3, r2, r0
 8016aae:	460a      	mov	r2, r1
 8016ab0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8016ab4:	e00c      	b.n	8016ad0 <__NVIC_SetPriority+0x48>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016ab6:	683b      	ldr	r3, [r7, #0]
 8016ab8:	b2da      	uxtb	r2, r3
 8016aba:	4909      	ldr	r1, [pc, #36]	; (8016ae0 <__NVIC_SetPriority+0x58>)
 8016abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016ac0:	b2db      	uxtb	r3, r3
 8016ac2:	f003 030f 	and.w	r3, r3, #15
 8016ac6:	3b04      	subs	r3, #4
 8016ac8:	0112      	lsls	r2, r2, #4
 8016aca:	b2d2      	uxtb	r2, r2
 8016acc:	440b      	add	r3, r1
 8016ace:	761a      	strb	r2, [r3, #24]
}
 8016ad0:	bf00      	nop
 8016ad2:	370c      	adds	r7, #12
 8016ad4:	46bd      	mov	sp, r7
 8016ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ada:	4770      	bx	lr
 8016adc:	e000e100 	.word	0xe000e100
 8016ae0:	e000ed00 	.word	0xe000ed00

08016ae4 <_ZN10STM32F7HAL16flushFrameBufferEv>:
     *
     * This specialization is only in place to keep compilers happy. Base impl. will call the
     * Rect version.
     * @see HAL::flushFrameBuffer
     */
    virtual void flushFrameBuffer()
 8016ae4:	b580      	push	{r7, lr}
 8016ae6:	b082      	sub	sp, #8
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	6078      	str	r0, [r7, #4]
    {
        HAL::flushFrameBuffer();
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	4618      	mov	r0, r3
 8016af0:	f006 fb0f 	bl	801d112 <_ZN8touchgfx3HAL16flushFrameBufferEv>
    }
 8016af4:	bf00      	nop
 8016af6:	3708      	adds	r7, #8
 8016af8:	46bd      	mov	sp, r7
 8016afa:	bd80      	pop	{r7, pc}

08016afc <_ZNK10STM32F7HAL17getTFTFrameBufferEv>:
/* USER CODE END user includes */

extern LTDC_HandleTypeDef hltdc;

uint16_t* STM32F7HAL::getTFTFrameBuffer() const
{
 8016afc:	b480      	push	{r7}
 8016afe:	b083      	sub	sp, #12
 8016b00:	af00      	add	r7, sp, #0
 8016b02:	6078      	str	r0, [r7, #4]
    return (uint16_t*)LTDC_Layer1->CFBAR;
 8016b04:	4b03      	ldr	r3, [pc, #12]	; (8016b14 <_ZNK10STM32F7HAL17getTFTFrameBufferEv+0x18>)
 8016b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
}
 8016b08:	4618      	mov	r0, r3
 8016b0a:	370c      	adds	r7, #12
 8016b0c:	46bd      	mov	sp, r7
 8016b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b12:	4770      	bx	lr
 8016b14:	40016884 	.word	0x40016884

08016b18 <_ZN10STM32F7HAL17setTFTFrameBufferEPt>:

void STM32F7HAL::setTFTFrameBuffer(uint16_t* adr)
{
 8016b18:	b480      	push	{r7}
 8016b1a:	b083      	sub	sp, #12
 8016b1c:	af00      	add	r7, sp, #0
 8016b1e:	6078      	str	r0, [r7, #4]
 8016b20:	6039      	str	r1, [r7, #0]
    LTDC_Layer1->CFBAR = (uint32_t)adr;
 8016b22:	4a06      	ldr	r2, [pc, #24]	; (8016b3c <_ZN10STM32F7HAL17setTFTFrameBufferEPt+0x24>)
 8016b24:	683b      	ldr	r3, [r7, #0]
 8016b26:	6293      	str	r3, [r2, #40]	; 0x28

    /* Reload immediate */
    LTDC->SRCR = (uint32_t)LTDC_SRCR_IMR;
 8016b28:	4b05      	ldr	r3, [pc, #20]	; (8016b40 <_ZN10STM32F7HAL17setTFTFrameBufferEPt+0x28>)
 8016b2a:	2201      	movs	r2, #1
 8016b2c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8016b2e:	bf00      	nop
 8016b30:	370c      	adds	r7, #12
 8016b32:	46bd      	mov	sp, r7
 8016b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b38:	4770      	bx	lr
 8016b3a:	bf00      	nop
 8016b3c:	40016884 	.word	0x40016884
 8016b40:	40016800 	.word	0x40016800

08016b44 <_ZN10STM32F7HAL17getTFTCurrentLineEv>:

uint16_t STM32F7HAL::getTFTCurrentLine()
{
 8016b44:	b480      	push	{r7}
 8016b46:	b085      	sub	sp, #20
 8016b48:	af00      	add	r7, sp, #0
 8016b4a:	6078      	str	r0, [r7, #4]
    // This function only requires an implementation if single buffering
    // on LTDC display is being used (REFRESH_STRATEGY_OPTIM_SINGLE_BUFFER_TFT_CTRL).

    // The CPSR register (bits 15:0) specify current line of TFT controller.
    uint16_t curr = (uint16_t)(LTDC->CPSR & 0xffff);
 8016b4c:	4b0d      	ldr	r3, [pc, #52]	; (8016b84 <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x40>)
 8016b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016b50:	81fb      	strh	r3, [r7, #14]
    uint16_t backPorchY = (uint16_t)(LTDC->BPCR & 0x7FF) + 1;
 8016b52:	4b0c      	ldr	r3, [pc, #48]	; (8016b84 <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x40>)
 8016b54:	68db      	ldr	r3, [r3, #12]
 8016b56:	b29b      	uxth	r3, r3
 8016b58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016b5c:	b29b      	uxth	r3, r3
 8016b5e:	3301      	adds	r3, #1
 8016b60:	81bb      	strh	r3, [r7, #12]

    // The semantics of the getTFTCurrentLine() function is to return a value
    // in the range of 0-totalheight. If we are still in back porch area, return 0.
    if (curr < backPorchY)
 8016b62:	89fa      	ldrh	r2, [r7, #14]
 8016b64:	89bb      	ldrh	r3, [r7, #12]
 8016b66:	429a      	cmp	r2, r3
 8016b68:	d201      	bcs.n	8016b6e <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x2a>
    {
        return 0;
 8016b6a:	2300      	movs	r3, #0
 8016b6c:	e003      	b.n	8016b76 <_ZN10STM32F7HAL17getTFTCurrentLineEv+0x32>
    }
    else
    {
        return curr - backPorchY;
 8016b6e:	89fa      	ldrh	r2, [r7, #14]
 8016b70:	89bb      	ldrh	r3, [r7, #12]
 8016b72:	1ad3      	subs	r3, r2, r3
 8016b74:	b29b      	uxth	r3, r3
    }
}
 8016b76:	4618      	mov	r0, r3
 8016b78:	3714      	adds	r7, #20
 8016b7a:	46bd      	mov	sp, r7
 8016b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b80:	4770      	bx	lr
 8016b82:	bf00      	nop
 8016b84:	40016800 	.word	0x40016800

08016b88 <_ZN10STM32F7HAL19configureInterruptsEv>:

void STM32F7HAL::configureInterrupts()
{
 8016b88:	b580      	push	{r7, lr}
 8016b8a:	b082      	sub	sp, #8
 8016b8c:	af00      	add	r7, sp, #0
 8016b8e:	6078      	str	r0, [r7, #4]
    // These two priorities MUST be EQUAL, and MUST be functionally lower than RTOS scheduler interrupts.
    NVIC_SetPriority(DMA2D_IRQn, 9);
 8016b90:	2109      	movs	r1, #9
 8016b92:	205a      	movs	r0, #90	; 0x5a
 8016b94:	f7ff ff78 	bl	8016a88 <__NVIC_SetPriority>
    NVIC_SetPriority(LTDC_IRQn, 9);
 8016b98:	2109      	movs	r1, #9
 8016b9a:	2058      	movs	r0, #88	; 0x58
 8016b9c:	f7ff ff74 	bl	8016a88 <__NVIC_SetPriority>
}
 8016ba0:	bf00      	nop
 8016ba2:	3708      	adds	r7, #8
 8016ba4:	46bd      	mov	sp, r7
 8016ba6:	bd80      	pop	{r7, pc}

08016ba8 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv>:
static uint16_t lcd_int_active_line;
static uint16_t lcd_int_porch_line;

/* Enable LCD line interrupt, when entering video (active) area */
void STM32F7HAL::enableLCDControllerInterrupt()
{
 8016ba8:	b580      	push	{r7, lr}
 8016baa:	b082      	sub	sp, #8
 8016bac:	af00      	add	r7, sp, #0
 8016bae:	6078      	str	r0, [r7, #4]
    lcd_int_active_line = (LTDC->BPCR & 0x7FF) - 1;
 8016bb0:	4b12      	ldr	r3, [pc, #72]	; (8016bfc <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x54>)
 8016bb2:	68db      	ldr	r3, [r3, #12]
 8016bb4:	b29b      	uxth	r3, r3
 8016bb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016bba:	b29b      	uxth	r3, r3
 8016bbc:	3b01      	subs	r3, #1
 8016bbe:	b29a      	uxth	r2, r3
 8016bc0:	4b0f      	ldr	r3, [pc, #60]	; (8016c00 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x58>)
 8016bc2:	801a      	strh	r2, [r3, #0]
    lcd_int_porch_line = (LTDC->AWCR & 0x7FF) - 1;
 8016bc4:	4b0d      	ldr	r3, [pc, #52]	; (8016bfc <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x54>)
 8016bc6:	691b      	ldr	r3, [r3, #16]
 8016bc8:	b29b      	uxth	r3, r3
 8016bca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8016bce:	b29b      	uxth	r3, r3
 8016bd0:	3b01      	subs	r3, #1
 8016bd2:	b29a      	uxth	r2, r3
 8016bd4:	4b0b      	ldr	r3, [pc, #44]	; (8016c04 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x5c>)
 8016bd6:	801a      	strh	r2, [r3, #0]

    HAL_LTDC_ProgramLineEvent(&hltdc, lcd_int_active_line);
 8016bd8:	4b09      	ldr	r3, [pc, #36]	; (8016c00 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x58>)
 8016bda:	881b      	ldrh	r3, [r3, #0]
 8016bdc:	4619      	mov	r1, r3
 8016bde:	480a      	ldr	r0, [pc, #40]	; (8016c08 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x60>)
 8016be0:	f7ee fd0a 	bl	80055f8 <HAL_LTDC_ProgramLineEvent>
    __HAL_LTDC_ENABLE_IT(&hltdc, LTDC_IT_LI|LTDC_IT_FU); /* Enable line and FIFO underrun interrupts */
 8016be4:	4b08      	ldr	r3, [pc, #32]	; (8016c08 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x60>)
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8016bea:	4b07      	ldr	r3, [pc, #28]	; (8016c08 <_ZN10STM32F7HAL28enableLCDControllerInterruptEv+0x60>)
 8016bec:	681b      	ldr	r3, [r3, #0]
 8016bee:	f042 0203 	orr.w	r2, r2, #3
 8016bf2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8016bf4:	bf00      	nop
 8016bf6:	3708      	adds	r7, #8
 8016bf8:	46bd      	mov	sp, r7
 8016bfa:	bd80      	pop	{r7, pc}
 8016bfc:	40016800 	.word	0x40016800
 8016c00:	2000937a 	.word	0x2000937a
 8016c04:	2000937c 	.word	0x2000937c
 8016c08:	20009248 	.word	0x20009248

08016c0c <_ZN10STM32F7HAL17disableInterruptsEv>:

void STM32F7HAL::disableInterrupts()
{
 8016c0c:	b580      	push	{r7, lr}
 8016c0e:	b082      	sub	sp, #8
 8016c10:	af00      	add	r7, sp, #0
 8016c12:	6078      	str	r0, [r7, #4]
    NVIC_DisableIRQ(LTDC_IRQn);
 8016c14:	2058      	movs	r0, #88	; 0x58
 8016c16:	f7ff ff13 	bl	8016a40 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(DMA2D_IRQn);
 8016c1a:	205a      	movs	r0, #90	; 0x5a
 8016c1c:	f7ff ff10 	bl	8016a40 <__NVIC_DisableIRQ>
    NVIC_DisableIRQ(LTDC_ER_IRQn);
 8016c20:	2059      	movs	r0, #89	; 0x59
 8016c22:	f7ff ff0d 	bl	8016a40 <__NVIC_DisableIRQ>
}
 8016c26:	bf00      	nop
 8016c28:	3708      	adds	r7, #8
 8016c2a:	46bd      	mov	sp, r7
 8016c2c:	bd80      	pop	{r7, pc}

08016c2e <_ZN10STM32F7HAL16enableInterruptsEv>:

void STM32F7HAL::enableInterrupts()
{
 8016c2e:	b580      	push	{r7, lr}
 8016c30:	b082      	sub	sp, #8
 8016c32:	af00      	add	r7, sp, #0
 8016c34:	6078      	str	r0, [r7, #4]
    NVIC_EnableIRQ(LTDC_IRQn);
 8016c36:	2058      	movs	r0, #88	; 0x58
 8016c38:	f7ff fee2 	bl	8016a00 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(DMA2D_IRQn);
 8016c3c:	205a      	movs	r0, #90	; 0x5a
 8016c3e:	f7ff fedf 	bl	8016a00 <__NVIC_EnableIRQ>
    NVIC_EnableIRQ(LTDC_ER_IRQn);
 8016c42:	2059      	movs	r0, #89	; 0x59
 8016c44:	f7ff fedc 	bl	8016a00 <__NVIC_EnableIRQ>
}
 8016c48:	bf00      	nop
 8016c4a:	3708      	adds	r7, #8
 8016c4c:	46bd      	mov	sp, r7
 8016c4e:	bd80      	pop	{r7, pc}

08016c50 <_ZN10STM32F7HAL16flushFrameBufferERKN8touchgfx4RectE>:

void STM32F7HAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
 8016c50:	b580      	push	{r7, lr}
 8016c52:	b082      	sub	sp, #8
 8016c54:	af00      	add	r7, sp, #0
 8016c56:	6078      	str	r0, [r7, #4]
 8016c58:	6039      	str	r1, [r7, #0]
    // If the framebuffer is placed in cached memory (e.g. SRAM) then we need
    // the CPU to read back the latest pixels produced by the h/w accelerator
    // thus we have to both flush and invalidate the Dcache prior to letting
    // DMA2D accessing it. That's done using SCB_CleanInvalidateDCache().
    HAL::flushFrameBuffer(rect);
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	6839      	ldr	r1, [r7, #0]
 8016c5e:	4618      	mov	r0, r3
 8016c60:	f006 fa5d 	bl	801d11e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>
}
 8016c64:	bf00      	nop
 8016c66:	3708      	adds	r7, #8
 8016c68:	46bd      	mov	sp, r7
 8016c6a:	bd80      	pop	{r7, pc}

08016c6c <HAL_LTDC_LineEventCallback>:

extern "C"
void HAL_LTDC_LineEvenCallback(LTDC_HandleTypeDef *hltdc)
{
 8016c6c:	b580      	push	{r7, lr}
 8016c6e:	b082      	sub	sp, #8
 8016c70:	af00      	add	r7, sp, #0
 8016c72:	6078      	str	r0, [r7, #4]
    if (LTDC->LIPCR == lcd_int_active_line)
 8016c74:	4b1a      	ldr	r3, [pc, #104]	; (8016ce0 <HAL_LTDC_LineEventCallback+0x74>)
 8016c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016c78:	4a1a      	ldr	r2, [pc, #104]	; (8016ce4 <HAL_LTDC_LineEventCallback+0x78>)
 8016c7a:	8812      	ldrh	r2, [r2, #0]
 8016c7c:	4293      	cmp	r3, r2
 8016c7e:	bf0c      	ite	eq
 8016c80:	2301      	moveq	r3, #1
 8016c82:	2300      	movne	r3, #0
 8016c84:	b2db      	uxtb	r3, r3
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d017      	beq.n	8016cba <HAL_LTDC_LineEventCallback+0x4e>
    {
        //entering active area
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_porch_line);
 8016c8a:	4b17      	ldr	r3, [pc, #92]	; (8016ce8 <HAL_LTDC_LineEventCallback+0x7c>)
 8016c8c:	881b      	ldrh	r3, [r3, #0]
 8016c8e:	4619      	mov	r1, r3
 8016c90:	6878      	ldr	r0, [r7, #4]
 8016c92:	f7ee fcb1 	bl	80055f8 <HAL_LTDC_ProgramLineEvent>
        HAL::getInstance()->vSync();
 8016c96:	f7f8 fbf1 	bl	800f47c <_ZN8touchgfx3HAL11getInstanceEv>
 8016c9a:	4603      	mov	r3, r0
 8016c9c:	4618      	mov	r0, r3
 8016c9e:	f7ff fd32 	bl	8016706 <_ZN8touchgfx3HAL5vSyncEv>
        OSWrappers::signalVSync();
 8016ca2:	f7fa f9dd 	bl	8011060 <_ZN8touchgfx10OSWrappers11signalVSyncEv>
        // Swap frame buffers immediately instead of waiting for the task to be scheduled in.
        // Note: task will also swap when it wakes up, but that operation is guarded and will not have
        // any effect if already swapped.
        HAL::getInstance()->swapFrameBuffers();
 8016ca6:	f7f8 fbe9 	bl	800f47c <_ZN8touchgfx3HAL11getInstanceEv>
 8016caa:	4603      	mov	r3, r0
 8016cac:	4618      	mov	r0, r3
 8016cae:	f006 fde3 	bl	801d878 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        GPIO::set(GPIO::VSYNC_FREQ);
 8016cb2:	2000      	movs	r0, #0
 8016cb4:	f7fe fd7a 	bl	80157ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
        //exiting active area
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
        GPIO::clear(GPIO::VSYNC_FREQ);
        HAL::getInstance()->frontPorchEntered();
    }
}
 8016cb8:	e00e      	b.n	8016cd8 <HAL_LTDC_LineEventCallback+0x6c>
        HAL_LTDC_ProgramLineEvent(hltdc, lcd_int_active_line);
 8016cba:	4b0a      	ldr	r3, [pc, #40]	; (8016ce4 <HAL_LTDC_LineEventCallback+0x78>)
 8016cbc:	881b      	ldrh	r3, [r3, #0]
 8016cbe:	4619      	mov	r1, r3
 8016cc0:	6878      	ldr	r0, [r7, #4]
 8016cc2:	f7ee fc99 	bl	80055f8 <HAL_LTDC_ProgramLineEvent>
        GPIO::clear(GPIO::VSYNC_FREQ);
 8016cc6:	2000      	movs	r0, #0
 8016cc8:	f7fe fd7b 	bl	80157c2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
        HAL::getInstance()->frontPorchEntered();
 8016ccc:	f7f8 fbd6 	bl	800f47c <_ZN8touchgfx3HAL11getInstanceEv>
 8016cd0:	4603      	mov	r3, r0
 8016cd2:	4618      	mov	r0, r3
 8016cd4:	f7ff fcf8 	bl	80166c8 <_ZN8touchgfx3HAL17frontPorchEnteredEv>
}
 8016cd8:	bf00      	nop
 8016cda:	3708      	adds	r7, #8
 8016cdc:	46bd      	mov	sp, r7
 8016cde:	bd80      	pop	{r7, pc}
 8016ce0:	40016800 	.word	0x40016800
 8016ce4:	2000937a 	.word	0x2000937a
 8016ce8:	2000937c 	.word	0x2000937c

08016cec <_ZN8touchgfx22STM32F7Instrumentation4initEv>:
namespace touchgfx
{
static TIM_HandleTypeDef htim1;

void STM32F7Instrumentation::init()
{
 8016cec:	b580      	push	{r7, lr}
 8016cee:	b0a4      	sub	sp, #144	; 0x90
 8016cf0:	af00      	add	r7, sp, #0
 8016cf2:	6078      	str	r0, [r7, #4]
   RCC_ClkInitTypeDef clkconfig;
    uint32_t uwTimclock, uwAPB1Prescaler = 0U;
 8016cf4:	2300      	movs	r3, #0
 8016cf6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    uint32_t pFLatency;

    __TIM2_CLK_ENABLE();
 8016cfa:	4b84      	ldr	r3, [pc, #528]	; (8016f0c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x220>)
 8016cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016cfe:	4a83      	ldr	r2, [pc, #524]	; (8016f0c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x220>)
 8016d00:	f043 0301 	orr.w	r3, r3, #1
 8016d04:	6413      	str	r3, [r2, #64]	; 0x40
 8016d06:	4b81      	ldr	r3, [pc, #516]	; (8016f0c <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x220>)
 8016d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016d0a:	f003 0301 	and.w	r3, r3, #1
 8016d0e:	60bb      	str	r3, [r7, #8]
 8016d10:	68bb      	ldr	r3, [r7, #8]

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8016d12:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016d16:	2200      	movs	r2, #0
 8016d18:	601a      	str	r2, [r3, #0]
 8016d1a:	605a      	str	r2, [r3, #4]
 8016d1c:	609a      	str	r2, [r3, #8]
 8016d1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8016d20:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016d24:	2200      	movs	r2, #0
 8016d26:	601a      	str	r2, [r3, #0]
 8016d28:	605a      	str	r2, [r3, #4]
 8016d2a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8016d2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016d30:	2200      	movs	r2, #0
 8016d32:	601a      	str	r2, [r3, #0]
 8016d34:	605a      	str	r2, [r3, #4]
 8016d36:	609a      	str	r2, [r3, #8]
 8016d38:	60da      	str	r2, [r3, #12]
 8016d3a:	611a      	str	r2, [r3, #16]
 8016d3c:	615a      	str	r2, [r3, #20]
 8016d3e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8016d40:	f107 030c 	add.w	r3, r7, #12
 8016d44:	222c      	movs	r2, #44	; 0x2c
 8016d46:	2100      	movs	r1, #0
 8016d48:	4618      	mov	r0, r3
 8016d4a:	f00b fc02 	bl	8022552 <memset>
  htim1.Instance = TIM1;
 8016d4e:	4b70      	ldr	r3, [pc, #448]	; (8016f10 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016d50:	4a70      	ldr	r2, [pc, #448]	; (8016f14 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x228>)
 8016d52:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8016d54:	4b6e      	ldr	r3, [pc, #440]	; (8016f10 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016d56:	2200      	movs	r2, #0
 8016d58:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016d5a:	4b6d      	ldr	r3, [pc, #436]	; (8016f10 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016d5c:	2200      	movs	r2, #0
 8016d5e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8016d60:	4b6b      	ldr	r3, [pc, #428]	; (8016f10 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016d62:	2200      	movs	r2, #0
 8016d64:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8016d66:	4b6a      	ldr	r3, [pc, #424]	; (8016f10 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016d68:	2200      	movs	r2, #0
 8016d6a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8016d6c:	4b68      	ldr	r3, [pc, #416]	; (8016f10 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016d6e:	2200      	movs	r2, #0
 8016d70:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016d72:	4b67      	ldr	r3, [pc, #412]	; (8016f10 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016d74:	2200      	movs	r2, #0
 8016d76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8016d78:	4865      	ldr	r0, [pc, #404]	; (8016f10 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016d7a:	f7f2 f869 	bl	8008e50 <HAL_TIM_Base_Init>
 8016d7e:	4603      	mov	r3, r0
 8016d80:	2b00      	cmp	r3, #0
 8016d82:	bf14      	ite	ne
 8016d84:	2301      	movne	r3, #1
 8016d86:	2300      	moveq	r3, #0
 8016d88:	b2db      	uxtb	r3, r3
 8016d8a:	2b00      	cmp	r3, #0
 8016d8c:	d001      	beq.n	8016d92 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xa6>
  {
    Error_Handler( );
 8016d8e:	f001 fb23 	bl	80183d8 <Error_Handler>
  }

  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8016d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8016d96:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8016d98:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8016d9c:	4619      	mov	r1, r3
 8016d9e:	485c      	ldr	r0, [pc, #368]	; (8016f10 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016da0:	f7f2 fb38 	bl	8009414 <HAL_TIM_ConfigClockSource>
 8016da4:	4603      	mov	r3, r0
 8016da6:	2b00      	cmp	r3, #0
 8016da8:	bf14      	ite	ne
 8016daa:	2301      	movne	r3, #1
 8016dac:	2300      	moveq	r3, #0
 8016dae:	b2db      	uxtb	r3, r3
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d001      	beq.n	8016db8 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0xcc>
  {
    Error_Handler( );
 8016db4:	f001 fb10 	bl	80183d8 <Error_Handler>
  }

  htim1.Instance = TIM1;
 8016db8:	4b55      	ldr	r3, [pc, #340]	; (8016f10 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016dba:	4a56      	ldr	r2, [pc, #344]	; (8016f14 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x228>)
 8016dbc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8016dbe:	4b54      	ldr	r3, [pc, #336]	; (8016f10 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016dc0:	2200      	movs	r2, #0
 8016dc2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8016dc4:	4b52      	ldr	r3, [pc, #328]	; (8016f10 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016dc6:	2200      	movs	r2, #0
 8016dc8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8016dca:	4b51      	ldr	r3, [pc, #324]	; (8016f10 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016dcc:	2200      	movs	r2, #0
 8016dce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8016dd0:	4b4f      	ldr	r3, [pc, #316]	; (8016f10 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016dd2:	2200      	movs	r2, #0
 8016dd4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8016dd6:	4b4e      	ldr	r3, [pc, #312]	; (8016f10 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016dd8:	2200      	movs	r2, #0
 8016dda:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8016ddc:	4b4c      	ldr	r3, [pc, #304]	; (8016f10 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016dde:	2200      	movs	r2, #0
 8016de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8016de2:	484b      	ldr	r0, [pc, #300]	; (8016f10 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016de4:	f7f2 f8b4 	bl	8008f50 <HAL_TIM_PWM_Init>
 8016de8:	4603      	mov	r3, r0
 8016dea:	2b00      	cmp	r3, #0
 8016dec:	bf14      	ite	ne
 8016dee:	2301      	movne	r3, #1
 8016df0:	2300      	moveq	r3, #0
 8016df2:	b2db      	uxtb	r3, r3
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d001      	beq.n	8016dfc <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x110>
  {
    Error_Handler( );
 8016df8:	f001 faee 	bl	80183d8 <Error_Handler>
  }

  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8016dfc:	2300      	movs	r3, #0
 8016dfe:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8016e00:	2300      	movs	r3, #0
 8016e02:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8016e04:	2300      	movs	r3, #0
 8016e06:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8016e08:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8016e0c:	4619      	mov	r1, r3
 8016e0e:	4840      	ldr	r0, [pc, #256]	; (8016f10 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016e10:	f7f2 ff7a 	bl	8009d08 <HAL_TIMEx_MasterConfigSynchronization>
 8016e14:	4603      	mov	r3, r0
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	bf14      	ite	ne
 8016e1a:	2301      	movne	r3, #1
 8016e1c:	2300      	moveq	r3, #0
 8016e1e:	b2db      	uxtb	r3, r3
 8016e20:	2b00      	cmp	r3, #0
 8016e22:	d001      	beq.n	8016e28 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x13c>
  {
    Error_Handler( );
 8016e24:	f001 fad8 	bl	80183d8 <Error_Handler>
  }

  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8016e28:	2360      	movs	r3, #96	; 0x60
 8016e2a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8016e2c:	2300      	movs	r3, #0
 8016e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8016e30:	2300      	movs	r3, #0
 8016e32:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8016e34:	2300      	movs	r3, #0
 8016e36:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8016e38:	2300      	movs	r3, #0
 8016e3a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8016e3c:	2300      	movs	r3, #0
 8016e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8016e40:	2300      	movs	r3, #0
 8016e42:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8016e44:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8016e48:	2200      	movs	r2, #0
 8016e4a:	4619      	mov	r1, r3
 8016e4c:	4830      	ldr	r0, [pc, #192]	; (8016f10 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016e4e:	f7f2 f9c9 	bl	80091e4 <HAL_TIM_PWM_ConfigChannel>
 8016e52:	4603      	mov	r3, r0
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	bf14      	ite	ne
 8016e58:	2301      	movne	r3, #1
 8016e5a:	2300      	moveq	r3, #0
 8016e5c:	b2db      	uxtb	r3, r3
 8016e5e:	2b00      	cmp	r3, #0
 8016e60:	d001      	beq.n	8016e66 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x17a>
  {
    Error_Handler( );
 8016e62:	f001 fab9 	bl	80183d8 <Error_Handler>
  }

  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8016e66:	2300      	movs	r3, #0
 8016e68:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8016e6a:	2300      	movs	r3, #0
 8016e6c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8016e6e:	2300      	movs	r3, #0
 8016e70:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.DeadTime = 0;
 8016e72:	2300      	movs	r3, #0
 8016e74:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8016e76:	2300      	movs	r3, #0
 8016e78:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8016e7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8016e7e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8016e80:	2300      	movs	r3, #0
 8016e82:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8016e84:	2300      	movs	r3, #0
 8016e86:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8016e88:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8016e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2Filter = 0;
 8016e8e:	2300      	movs	r3, #0
 8016e90:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8016e92:	2300      	movs	r3, #0
 8016e94:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8016e96:	f107 030c 	add.w	r3, r7, #12
 8016e9a:	4619      	mov	r1, r3
 8016e9c:	481c      	ldr	r0, [pc, #112]	; (8016f10 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016e9e:	f7f2 ff8f 	bl	8009dc0 <HAL_TIMEx_ConfigBreakDeadTime>
 8016ea2:	4603      	mov	r3, r0
 8016ea4:	2b00      	cmp	r3, #0
 8016ea6:	bf14      	ite	ne
 8016ea8:	2301      	movne	r3, #1
 8016eaa:	2300      	moveq	r3, #0
 8016eac:	b2db      	uxtb	r3, r3
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d001      	beq.n	8016eb6 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x1ca>
  {
    Error_Handler( );
 8016eb2:	f001 fa91 	bl	80183d8 <Error_Handler>
  }

    /* Get clock configuration */
    HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8016eb6:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8016eba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8016ebe:	4611      	mov	r1, r2
 8016ec0:	4618      	mov	r0, r3
 8016ec2:	f7ef fad9 	bl	8006478 <HAL_RCC_GetClockConfig>

    /* TIM2 is on APB1 bus */
    uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8016ec6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8016eca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

    if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8016ece:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8016ed2:	2b00      	cmp	r3, #0
 8016ed4:	d104      	bne.n	8016ee0 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x1f4>
        uwTimclock = HAL_RCC_GetPCLK1Freq();
 8016ed6:	f7ef faa7 	bl	8006428 <HAL_RCC_GetPCLK1Freq>
 8016eda:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
 8016ede:	e005      	b.n	8016eec <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x200>
    else
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8016ee0:	f7ef faa2 	bl	8006428 <HAL_RCC_GetPCLK1Freq>
 8016ee4:	4603      	mov	r3, r0
 8016ee6:	005b      	lsls	r3, r3, #1
 8016ee8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    m_sysclkRatio = HAL_RCC_GetHCLKFreq() / uwTimclock;
 8016eec:	f7ef fa90 	bl	8006410 <HAL_RCC_GetHCLKFreq>
 8016ef0:	4602      	mov	r2, r0
 8016ef2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8016ef6:	fbb2 f2f3 	udiv	r2, r2, r3
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	60da      	str	r2, [r3, #12]

    HAL_TIM_Base_Start(&htim1);
 8016efe:	4804      	ldr	r0, [pc, #16]	; (8016f10 <_ZN8touchgfx22STM32F7Instrumentation4initEv+0x224>)
 8016f00:	f7f1 ffd2 	bl	8008ea8 <HAL_TIM_Base_Start>
}
 8016f04:	bf00      	nop
 8016f06:	3790      	adds	r7, #144	; 0x90
 8016f08:	46bd      	mov	sp, r7
 8016f0a:	bd80      	pop	{r7, pc}
 8016f0c:	40023800 	.word	0x40023800
 8016f10:	20009380 	.word	0x20009380
 8016f14:	40010000 	.word	0x40010000

08016f18 <_ZN8touchgfx22STM32F7Instrumentation12getElapsedUSEjjj>:

//Board specific clockfrequency
unsigned int STM32F7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
 8016f18:	b480      	push	{r7}
 8016f1a:	b085      	sub	sp, #20
 8016f1c:	af00      	add	r7, sp, #0
 8016f1e:	60f8      	str	r0, [r7, #12]
 8016f20:	60b9      	str	r1, [r7, #8]
 8016f22:	607a      	str	r2, [r7, #4]
 8016f24:	603b      	str	r3, [r7, #0]
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8016f26:	687a      	ldr	r2, [r7, #4]
 8016f28:	68bb      	ldr	r3, [r7, #8]
 8016f2a:	1ad2      	subs	r2, r2, r3
 8016f2c:	683b      	ldr	r3, [r7, #0]
 8016f2e:	085b      	lsrs	r3, r3, #1
 8016f30:	441a      	add	r2, r3
 8016f32:	683b      	ldr	r3, [r7, #0]
 8016f34:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8016f38:	4618      	mov	r0, r3
 8016f3a:	3714      	adds	r7, #20
 8016f3c:	46bd      	mov	sp, r7
 8016f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f42:	4770      	bx	lr

08016f44 <_ZN8touchgfx22STM32F7Instrumentation12getCPUCyclesEv>:

unsigned int STM32F7Instrumentation::getCPUCycles()
{
 8016f44:	b480      	push	{r7}
 8016f46:	b083      	sub	sp, #12
 8016f48:	af00      	add	r7, sp, #0
 8016f4a:	6078      	str	r0, [r7, #4]
    return __HAL_TIM_GET_COUNTER(&htim1) * m_sysclkRatio;
 8016f4c:	4b06      	ldr	r3, [pc, #24]	; (8016f68 <_ZN8touchgfx22STM32F7Instrumentation12getCPUCyclesEv+0x24>)
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016f52:	687a      	ldr	r2, [r7, #4]
 8016f54:	68d2      	ldr	r2, [r2, #12]
 8016f56:	fb02 f303 	mul.w	r3, r2, r3
}
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	370c      	adds	r7, #12
 8016f5e:	46bd      	mov	sp, r7
 8016f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f64:	4770      	bx	lr
 8016f66:	bf00      	nop
 8016f68:	20009380 	.word	0x20009380

08016f6c <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb>:

void STM32F7Instrumentation::setMCUActive(bool active)
{
 8016f6c:	b580      	push	{r7, lr}
 8016f6e:	b082      	sub	sp, #8
 8016f70:	af00      	add	r7, sp, #0
 8016f72:	6078      	str	r0, [r7, #4]
 8016f74:	460b      	mov	r3, r1
 8016f76:	70fb      	strb	r3, [r7, #3]
    if (active) //idle task sched out
 8016f78:	78fb      	ldrb	r3, [r7, #3]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d00f      	beq.n	8016f9e <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb+0x32>
    {
        cc_consumed += getCPUCycles() - cc_in;
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	3310      	adds	r3, #16
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	6878      	ldr	r0, [r7, #4]
 8016f88:	4798      	blx	r3
 8016f8a:	4602      	mov	r2, r0
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	689b      	ldr	r3, [r3, #8]
 8016f90:	1ad2      	subs	r2, r2, r3
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	685b      	ldr	r3, [r3, #4]
 8016f96:	441a      	add	r2, r3
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	605a      	str	r2, [r3, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8016f9c:	e008      	b.n	8016fb0 <_ZN8touchgfx22STM32F7Instrumentation12setMCUActiveEb+0x44>
        cc_in = getCPUCycles();
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	3310      	adds	r3, #16
 8016fa4:	681b      	ldr	r3, [r3, #0]
 8016fa6:	6878      	ldr	r0, [r7, #4]
 8016fa8:	4798      	blx	r3
 8016faa:	4602      	mov	r2, r0
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	609a      	str	r2, [r3, #8]
}
 8016fb0:	bf00      	nop
 8016fb2:	3708      	adds	r7, #8
 8016fb4:	46bd      	mov	sp, r7
 8016fb6:	bd80      	pop	{r7, pc}

08016fb8 <_ZN8touchgfx22STM32F7TouchController4initEv>:
}

using namespace touchgfx;

void STM32F7TouchController::init()
{
 8016fb8:	b590      	push	{r4, r7, lr}
 8016fba:	b083      	sub	sp, #12
 8016fbc:	af00      	add	r7, sp, #0
 8016fbe:	6078      	str	r0, [r7, #4]
 /* USER CODE BEGIN F4TouchController_init */

  /* Add code for touch controller Initialization */
  BSP_TS_Init(LCD_GetXSize(), LCD_GetYSize());
 8016fc0:	f7fe f818 	bl	8014ff4 <LCD_GetXSize>
 8016fc4:	4603      	mov	r3, r0
 8016fc6:	b29c      	uxth	r4, r3
 8016fc8:	f7fe f81d 	bl	8015006 <LCD_GetYSize>
 8016fcc:	4603      	mov	r3, r0
 8016fce:	b29b      	uxth	r3, r3
 8016fd0:	4619      	mov	r1, r3
 8016fd2:	4620      	mov	r0, r4
 8016fd4:	f7fd f8d0 	bl	8014178 <BSP_TS_Init>

/* USER CODE END F4TouchController_init */
}
 8016fd8:	bf00      	nop
 8016fda:	370c      	adds	r7, #12
 8016fdc:	46bd      	mov	sp, r7
 8016fde:	bd90      	pop	{r4, r7, pc}

08016fe0 <_ZN8touchgfx22STM32F7TouchController11sampleTouchERlS1_>:

bool STM32F7TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8016fe0:	b580      	push	{r7, lr}
 8016fe2:	b090      	sub	sp, #64	; 0x40
 8016fe4:	af00      	add	r7, sp, #0
 8016fe6:	60f8      	str	r0, [r7, #12]
 8016fe8:	60b9      	str	r1, [r7, #8]
 8016fea:	607a      	str	r2, [r7, #4]
/* USER CODE BEGIN  F4TouchController_sampleTouch  */

 TS_StateTypeDef state = { 0 };
 8016fec:	f107 0314 	add.w	r3, r7, #20
 8016ff0:	222c      	movs	r2, #44	; 0x2c
 8016ff2:	2100      	movs	r1, #0
 8016ff4:	4618      	mov	r0, r3
 8016ff6:	f00b faac 	bl	8022552 <memset>
    BSP_TS_GetState(&state);
 8016ffa:	f107 0314 	add.w	r3, r7, #20
 8016ffe:	4618      	mov	r0, r3
 8017000:	f7fd f8fa 	bl	80141f8 <BSP_TS_GetState>
    if (state.touchDetected)
 8017004:	7d3b      	ldrb	r3, [r7, #20]
 8017006:	2b00      	cmp	r3, #0
 8017008:	d009      	beq.n	801701e <_ZN8touchgfx22STM32F7TouchController11sampleTouchERlS1_+0x3e>
    {
        x = state.touchX[0];
 801700a:	8afb      	ldrh	r3, [r7, #22]
 801700c:	461a      	mov	r2, r3
 801700e:	68bb      	ldr	r3, [r7, #8]
 8017010:	601a      	str	r2, [r3, #0]
        y = state.touchY[0];
 8017012:	8c3b      	ldrh	r3, [r7, #32]
 8017014:	461a      	mov	r2, r3
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	601a      	str	r2, [r3, #0]

        return true;
 801701a:	2301      	movs	r3, #1
 801701c:	e000      	b.n	8017020 <_ZN8touchgfx22STM32F7TouchController11sampleTouchERlS1_+0x40>
    }
    return false; 
 801701e:	2300      	movs	r3, #0

/* USER CODE END F4TouchController_sampleTouch  */
}
 8017020:	4618      	mov	r0, r3
 8017022:	3740      	adds	r7, #64	; 0x40
 8017024:	46bd      	mov	sp, r7
 8017026:	bd80      	pop	{r7, pc}

08017028 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
uint8_t BSP_SD_Init(void)
{
 8017028:	b580      	push	{r7, lr}
 801702a:	b082      	sub	sp, #8
 801702c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 801702e:	2300      	movs	r3, #0
 8017030:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8017032:	f000 f87b 	bl	801712c <BSP_SD_IsDetected>
 8017036:	4603      	mov	r3, r0
 8017038:	2b01      	cmp	r3, #1
 801703a:	d001      	beq.n	8017040 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 801703c:	2302      	movs	r3, #2
 801703e:	e012      	b.n	8017066 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8017040:	480b      	ldr	r0, [pc, #44]	; (8017070 <BSP_SD_Init+0x48>)
 8017042:	f7f0 fcd7 	bl	80079f4 <HAL_SD_Init>
 8017046:	4603      	mov	r3, r0
 8017048:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 801704a:	79fb      	ldrb	r3, [r7, #7]
 801704c:	2b00      	cmp	r3, #0
 801704e:	d109      	bne.n	8017064 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8017050:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8017054:	4806      	ldr	r0, [pc, #24]	; (8017070 <BSP_SD_Init+0x48>)
 8017056:	f7f1 f957 	bl	8008308 <HAL_SD_ConfigWideBusOperation>
 801705a:	4603      	mov	r3, r0
 801705c:	2b00      	cmp	r3, #0
 801705e:	d001      	beq.n	8017064 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8017060:	2301      	movs	r3, #1
 8017062:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8017064:	79fb      	ldrb	r3, [r7, #7]
}
 8017066:	4618      	mov	r0, r3
 8017068:	3708      	adds	r7, #8
 801706a:	46bd      	mov	sp, r7
 801706c:	bd80      	pop	{r7, pc}
 801706e:	bf00      	nop
 8017070:	200096d0 	.word	0x200096d0

08017074 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read 
  * @retval SD status
  */
uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8017074:	b580      	push	{r7, lr}
 8017076:	b086      	sub	sp, #24
 8017078:	af00      	add	r7, sp, #0
 801707a:	60f8      	str	r0, [r7, #12]
 801707c:	60b9      	str	r1, [r7, #8]
 801707e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8017080:	2300      	movs	r3, #0
 8017082:	75fb      	strb	r3, [r7, #23]
  
  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	68ba      	ldr	r2, [r7, #8]
 8017088:	68f9      	ldr	r1, [r7, #12]
 801708a:	4806      	ldr	r0, [pc, #24]	; (80170a4 <BSP_SD_ReadBlocks_DMA+0x30>)
 801708c:	f7f0 fd42 	bl	8007b14 <HAL_SD_ReadBlocks_DMA>
 8017090:	4603      	mov	r3, r0
 8017092:	2b00      	cmp	r3, #0
 8017094:	d001      	beq.n	801709a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8017096:	2301      	movs	r3, #1
 8017098:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 801709a:	7dfb      	ldrb	r3, [r7, #23]
}
 801709c:	4618      	mov	r0, r3
 801709e:	3718      	adds	r7, #24
 80170a0:	46bd      	mov	sp, r7
 80170a2:	bd80      	pop	{r7, pc}
 80170a4:	200096d0 	.word	0x200096d0

080170a8 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write 
  * @retval SD status
  */
uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80170a8:	b580      	push	{r7, lr}
 80170aa:	b086      	sub	sp, #24
 80170ac:	af00      	add	r7, sp, #0
 80170ae:	60f8      	str	r0, [r7, #12]
 80170b0:	60b9      	str	r1, [r7, #8]
 80170b2:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80170b4:	2300      	movs	r3, #0
 80170b6:	75fb      	strb	r3, [r7, #23]
  
  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80170b8:	687b      	ldr	r3, [r7, #4]
 80170ba:	68ba      	ldr	r2, [r7, #8]
 80170bc:	68f9      	ldr	r1, [r7, #12]
 80170be:	4806      	ldr	r0, [pc, #24]	; (80170d8 <BSP_SD_WriteBlocks_DMA+0x30>)
 80170c0:	f7f0 fdf6 	bl	8007cb0 <HAL_SD_WriteBlocks_DMA>
 80170c4:	4603      	mov	r3, r0
 80170c6:	2b00      	cmp	r3, #0
 80170c8:	d001      	beq.n	80170ce <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80170ca:	2301      	movs	r3, #1
 80170cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return sd_state; 
 80170ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80170d0:	4618      	mov	r0, r3
 80170d2:	3718      	adds	r7, #24
 80170d4:	46bd      	mov	sp, r7
 80170d6:	bd80      	pop	{r7, pc}
 80170d8:	200096d0 	.word	0x200096d0

080170dc <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
uint8_t BSP_SD_GetCardState(void)
{
 80170dc:	b580      	push	{r7, lr}
 80170de:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80170e0:	4805      	ldr	r0, [pc, #20]	; (80170f8 <BSP_SD_GetCardState+0x1c>)
 80170e2:	f7f1 f98d 	bl	8008400 <HAL_SD_GetCardState>
 80170e6:	4603      	mov	r3, r0
 80170e8:	2b04      	cmp	r3, #4
 80170ea:	bf14      	ite	ne
 80170ec:	2301      	movne	r3, #1
 80170ee:	2300      	moveq	r3, #0
 80170f0:	b2db      	uxtb	r3, r3
}
 80170f2:	4618      	mov	r0, r3
 80170f4:	bd80      	pop	{r7, pc}
 80170f6:	bf00      	nop
 80170f8:	200096d0 	.word	0x200096d0

080170fc <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None 
  */
void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80170fc:	b580      	push	{r7, lr}
 80170fe:	b082      	sub	sp, #8
 8017100:	af00      	add	r7, sp, #0
 8017102:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8017104:	6879      	ldr	r1, [r7, #4]
 8017106:	4803      	ldr	r0, [pc, #12]	; (8017114 <BSP_SD_GetCardInfo+0x18>)
 8017108:	f7f1 f8d2 	bl	80082b0 <HAL_SD_GetCardInfo>
}
 801710c:	bf00      	nop
 801710e:	3708      	adds	r7, #8
 8017110:	46bd      	mov	sp, r7
 8017112:	bd80      	pop	{r7, pc}
 8017114:	200096d0 	.word	0x200096d0

08017118 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8017118:	b580      	push	{r7, lr}
 801711a:	b082      	sub	sp, #8
 801711c:	af00      	add	r7, sp, #0
 801711e:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8017120:	f001 fb66 	bl	80187f0 <BSP_SD_ReadCpltCallback>
}
 8017124:	bf00      	nop
 8017126:	3708      	adds	r7, #8
 8017128:	46bd      	mov	sp, r7
 801712a:	bd80      	pop	{r7, pc}

0801712c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
uint8_t BSP_SD_IsDetected(void)
{
 801712c:	b580      	push	{r7, lr}
 801712e:	b082      	sub	sp, #8
 8017130:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8017132:	2301      	movs	r3, #1
 8017134:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0) 
 8017136:	f000 f81d 	bl	8017174 <BSP_PlatformIsDetected>
 801713a:	4603      	mov	r3, r0
 801713c:	2b00      	cmp	r3, #0
 801713e:	d101      	bne.n	8017144 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8017140:	2300      	movs	r3, #0
 8017142:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8017144:	79fb      	ldrb	r3, [r7, #7]
 8017146:	b2db      	uxtb	r3, r3
}
 8017148:	4618      	mov	r0, r3
 801714a:	3708      	adds	r7, #8
 801714c:	46bd      	mov	sp, r7
 801714e:	bd80      	pop	{r7, pc}

08017150 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8017150:	b580      	push	{r7, lr}
 8017152:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8017154:	4904      	ldr	r1, [pc, #16]	; (8017168 <MX_FATFS_Init+0x18>)
 8017156:	4805      	ldr	r0, [pc, #20]	; (801716c <MX_FATFS_Init+0x1c>)
 8017158:	f7fa f832 	bl	80111c0 <FATFS_LinkDriver>
 801715c:	4603      	mov	r3, r0
 801715e:	461a      	mov	r2, r3
 8017160:	4b03      	ldr	r3, [pc, #12]	; (8017170 <MX_FATFS_Init+0x20>)
 8017162:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8017164:	bf00      	nop
 8017166:	bd80      	pop	{r7, pc}
 8017168:	2000a2d0 	.word	0x2000a2d0
 801716c:	08024b80 	.word	0x08024b80
 8017170:	2000a2d4 	.word	0x2000a2d4

08017174 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8017174:	b580      	push	{r7, lr}
 8017176:	b082      	sub	sp, #8
 8017178:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 801717a:	2301      	movs	r3, #1
 801717c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 801717e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8017182:	4806      	ldr	r0, [pc, #24]	; (801719c <BSP_PlatformIsDetected+0x28>)
 8017184:	f7eb fd98 	bl	8002cb8 <HAL_GPIO_ReadPin>
 8017188:	4603      	mov	r3, r0
 801718a:	2b00      	cmp	r3, #0
 801718c:	d001      	beq.n	8017192 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 801718e:	2300      	movs	r3, #0
 8017190:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */ 
    return status;
 8017192:	79fb      	ldrb	r3, [r7, #7]
}  
 8017194:	4618      	mov	r0, r3
 8017196:	3708      	adds	r7, #8
 8017198:	46bd      	mov	sp, r7
 801719a:	bd80      	pop	{r7, pc}
 801719c:	40020800 	.word	0x40020800

080171a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80171a0:	b5b0      	push	{r4, r5, r7, lr}
 80171a2:	b086      	sub	sp, #24
 80171a4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80171a6:	f7e9 fca5 	bl	8000af4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80171aa:	f000 f841 	bl	8017230 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80171ae:	f000 ff1f 	bl	8017ff0 <_ZL12MX_GPIO_Initv>
  MX_ADC3_Init();
 80171b2:	f000 f911 	bl	80173d8 <_ZL12MX_ADC3_Initv>
  MX_CRC_Init();
 80171b6:	f000 f96b 	bl	8017490 <_ZL11MX_CRC_Initv>
  MX_DCMI_Init();
 80171ba:	f000 f991 	bl	80174e0 <_ZL12MX_DCMI_Initv>
  MX_ETH_Init();
 80171be:	f000 f9c9 	bl	8017554 <_ZL11MX_ETH_Initv>
  MX_I2C1_Init();
 80171c2:	f000 fa01 	bl	80175c8 <_ZL12MX_I2C1_Initv>
  MX_I2C3_Init();
 80171c6:	f000 fa4d 	bl	8017664 <_ZL12MX_I2C3_Initv>
  MX_QUADSPI_Init();
 80171ca:	f000 fa99 	bl	8017700 <_ZL15MX_QUADSPI_Initv>
  MX_RTC_Init();
 80171ce:	f000 fac7 	bl	8017760 <_ZL11MX_RTC_Initv>
  MX_SAI2_Init();
 80171d2:	f000 fb8b 	bl	80178ec <_ZL12MX_SAI2_Initv>
  MX_SDMMC1_SD_Init();
 80171d6:	f000 fc3b 	bl	8017a50 <_ZL17MX_SDMMC1_SD_Initv>
  MX_SPDIFRX_Init();
 80171da:	f000 fc59 	bl	8017a90 <_ZL15MX_SPDIFRX_Initv>
  MX_SPI2_Init();
 80171de:	f000 fc8d 	bl	8017afc <_ZL12MX_SPI2_Initv>
  MX_TIM3_Init();
 80171e2:	f000 fccd 	bl	8017b80 <_ZL12MX_TIM3_Initv>
  MX_TIM5_Init();
 80171e6:	f000 fd5b 	bl	8017ca0 <_ZL12MX_TIM5_Initv>
  MX_TIM8_Init();
 80171ea:	f000 fde9 	bl	8017dc0 <_ZL12MX_TIM8_Initv>
  MX_TIM12_Init();
 80171ee:	f000 fe49 	bl	8017e84 <_ZL13MX_TIM12_Initv>
  MX_USART1_UART_Init();
 80171f2:	f000 fe95 	bl	8017f20 <_ZL19MX_USART1_UART_Initv>
  MX_USART6_UART_Init();
 80171f6:	f000 fec7 	bl	8017f88 <_ZL19MX_USART6_UART_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

/* Initialise the graphical hardware */
  GRAPHICS_HW_Init();
 80171fa:	f7fd ff0d 	bl	8015018 <_Z16GRAPHICS_HW_Initv>

  /* Initialise the graphical stack engine */
  GRAPHICS_Init();
 80171fe:	f7fd ff83 	bl	8015108 <_Z13GRAPHICS_Initv>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 4096);
 8017202:	4b09      	ldr	r3, [pc, #36]	; (8017228 <main+0x88>)
 8017204:	1d3c      	adds	r4, r7, #4
 8017206:	461d      	mov	r5, r3
 8017208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801720a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801720c:	682b      	ldr	r3, [r5, #0]
 801720e:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8017210:	1d3b      	adds	r3, r7, #4
 8017212:	2100      	movs	r1, #0
 8017214:	4618      	mov	r0, r3
 8017216:	f7fa f82f 	bl	8011278 <osThreadCreate>
 801721a:	4602      	mov	r2, r0
 801721c:	4b03      	ldr	r3, [pc, #12]	; (801722c <main+0x8c>)
 801721e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8017220:	f7fa f807 	bl	8011232 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8017224:	e7fe      	b.n	8017224 <main+0x84>
 8017226:	bf00      	nop
 8017228:	08023a28 	.word	0x08023a28
 801722c:	20009a04 	.word	0x20009a04

08017230 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8017230:	b580      	push	{r7, lr}
 8017232:	b0b4      	sub	sp, #208	; 0xd0
 8017234:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8017236:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 801723a:	2230      	movs	r2, #48	; 0x30
 801723c:	2100      	movs	r1, #0
 801723e:	4618      	mov	r0, r3
 8017240:	f00b f987 	bl	8022552 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8017244:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8017248:	2200      	movs	r2, #0
 801724a:	601a      	str	r2, [r3, #0]
 801724c:	605a      	str	r2, [r3, #4]
 801724e:	609a      	str	r2, [r3, #8]
 8017250:	60da      	str	r2, [r3, #12]
 8017252:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8017254:	f107 0308 	add.w	r3, r7, #8
 8017258:	2284      	movs	r2, #132	; 0x84
 801725a:	2100      	movs	r1, #0
 801725c:	4618      	mov	r0, r3
 801725e:	f00b f978 	bl	8022552 <memset>

  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 8017262:	f7ee fb9b 	bl	800599c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8017266:	4b59      	ldr	r3, [pc, #356]	; (80173cc <SystemClock_Config+0x19c>)
 8017268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801726a:	4a58      	ldr	r2, [pc, #352]	; (80173cc <SystemClock_Config+0x19c>)
 801726c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8017270:	6413      	str	r3, [r2, #64]	; 0x40
 8017272:	4b56      	ldr	r3, [pc, #344]	; (80173cc <SystemClock_Config+0x19c>)
 8017274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8017276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801727a:	607b      	str	r3, [r7, #4]
 801727c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 801727e:	4b54      	ldr	r3, [pc, #336]	; (80173d0 <SystemClock_Config+0x1a0>)
 8017280:	681b      	ldr	r3, [r3, #0]
 8017282:	4a53      	ldr	r2, [pc, #332]	; (80173d0 <SystemClock_Config+0x1a0>)
 8017284:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8017288:	6013      	str	r3, [r2, #0]
 801728a:	4b51      	ldr	r3, [pc, #324]	; (80173d0 <SystemClock_Config+0x1a0>)
 801728c:	681b      	ldr	r3, [r3, #0]
 801728e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8017292:	603b      	str	r3, [r7, #0]
 8017294:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8017296:	2309      	movs	r3, #9
 8017298:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 801729c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80172a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80172a4:	2301      	movs	r3, #1
 80172a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80172aa:	2302      	movs	r3, #2
 80172ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80172b0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80172b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 80172b8:	2319      	movs	r3, #25
 80172ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 80172be:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80172c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80172c6:	2302      	movs	r3, #2
 80172c8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80172cc:	2309      	movs	r3, #9
 80172ce:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80172d2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80172d6:	4618      	mov	r0, r3
 80172d8:	f7ee fc90 	bl	8005bfc <HAL_RCC_OscConfig>
 80172dc:	4603      	mov	r3, r0
 80172de:	2b00      	cmp	r3, #0
 80172e0:	bf14      	ite	ne
 80172e2:	2301      	movne	r3, #1
 80172e4:	2300      	moveq	r3, #0
 80172e6:	b2db      	uxtb	r3, r3
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d001      	beq.n	80172f0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80172ec:	f001 f874 	bl	80183d8 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80172f0:	f7ee fb64 	bl	80059bc <HAL_PWREx_EnableOverDrive>
 80172f4:	4603      	mov	r3, r0
 80172f6:	2b00      	cmp	r3, #0
 80172f8:	bf14      	ite	ne
 80172fa:	2301      	movne	r3, #1
 80172fc:	2300      	moveq	r3, #0
 80172fe:	b2db      	uxtb	r3, r3
 8017300:	2b00      	cmp	r3, #0
 8017302:	d001      	beq.n	8017308 <SystemClock_Config+0xd8>
  {
    Error_Handler();
 8017304:	f001 f868 	bl	80183d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8017308:	230f      	movs	r3, #15
 801730a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801730e:	2302      	movs	r3, #2
 8017310:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8017314:	2300      	movs	r3, #0
 8017316:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801731a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 801731e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8017322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017326:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 801732a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 801732e:	2106      	movs	r1, #6
 8017330:	4618      	mov	r0, r3
 8017332:	f7ee fed3 	bl	80060dc <HAL_RCC_ClockConfig>
 8017336:	4603      	mov	r3, r0
 8017338:	2b00      	cmp	r3, #0
 801733a:	bf14      	ite	ne
 801733c:	2301      	movne	r3, #1
 801733e:	2300      	moveq	r3, #0
 8017340:	b2db      	uxtb	r3, r3
 8017342:	2b00      	cmp	r3, #0
 8017344:	d001      	beq.n	801734a <SystemClock_Config+0x11a>
  {
    Error_Handler();
 8017346:	f001 f847 	bl	80183d8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPDIFRX|RCC_PERIPHCLK_LTDC
 801734a:	4b22      	ldr	r3, [pc, #136]	; (80173d4 <SystemClock_Config+0x1a4>)
 801734c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART1
                              |RCC_PERIPHCLK_USART6|RCC_PERIPHCLK_SAI2
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_I2C3
                              |RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 100;
 801734e:	2364      	movs	r3, #100	; 0x64
 8017350:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SP = RCC_PLLP_DIV2;
 8017352:	2302      	movs	r3, #2
 8017354:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8017356:	2302      	movs	r3, #2
 8017358:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SQ = 2;
 801735a:	2302      	movs	r3, #2
 801735c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 801735e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8017362:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8017364:	2305      	movs	r3, #5
 8017366:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8017368:	2302      	movs	r3, #2
 801736a:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 801736c:	2303      	movs	r3, #3
 801736e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLI2SDivQ = 1;
 8017370:	2301      	movs	r3, #1
 8017372:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8017374:	2301      	movs	r3, #1
 8017376:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8017378:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 801737c:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 801737e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8017382:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 8017384:	2300      	movs	r3, #0
 8017386:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8017388:	2300      	movs	r3, #0
 801738a:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 801738c:	2300      	movs	r3, #0
 801738e:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8017390:	2300      	movs	r3, #0
 8017392:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8017394:	2300      	movs	r3, #0
 8017396:	677b      	str	r3, [r7, #116]	; 0x74
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8017398:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801739c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80173a0:	2300      	movs	r3, #0
 80173a2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80173a6:	f107 0308 	add.w	r3, r7, #8
 80173aa:	4618      	mov	r0, r3
 80173ac:	f7ef f896 	bl	80064dc <HAL_RCCEx_PeriphCLKConfig>
 80173b0:	4603      	mov	r3, r0
 80173b2:	2b00      	cmp	r3, #0
 80173b4:	bf14      	ite	ne
 80173b6:	2301      	movne	r3, #1
 80173b8:	2300      	moveq	r3, #0
 80173ba:	b2db      	uxtb	r3, r3
 80173bc:	2b00      	cmp	r3, #0
 80173be:	d001      	beq.n	80173c4 <SystemClock_Config+0x194>
  {
    Error_Handler();
 80173c0:	f001 f80a 	bl	80183d8 <Error_Handler>
  }
}
 80173c4:	bf00      	nop
 80173c6:	37d0      	adds	r7, #208	; 0xd0
 80173c8:	46bd      	mov	sp, r7
 80173ca:	bd80      	pop	{r7, pc}
 80173cc:	40023800 	.word	0x40023800
 80173d0:	40007000 	.word	0x40007000
 80173d4:	01b14868 	.word	0x01b14868

080173d8 <_ZL12MX_ADC3_Initv>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80173d8:	b580      	push	{r7, lr}
 80173da:	b084      	sub	sp, #16
 80173dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80173de:	463b      	mov	r3, r7
 80173e0:	2200      	movs	r2, #0
 80173e2:	601a      	str	r2, [r3, #0]
 80173e4:	605a      	str	r2, [r3, #4]
 80173e6:	609a      	str	r2, [r3, #8]
 80173e8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc3.Instance = ADC3;
 80173ea:	4b26      	ldr	r3, [pc, #152]	; (8017484 <_ZL12MX_ADC3_Initv+0xac>)
 80173ec:	4a26      	ldr	r2, [pc, #152]	; (8017488 <_ZL12MX_ADC3_Initv+0xb0>)
 80173ee:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80173f0:	4b24      	ldr	r3, [pc, #144]	; (8017484 <_ZL12MX_ADC3_Initv+0xac>)
 80173f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80173f6:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80173f8:	4b22      	ldr	r3, [pc, #136]	; (8017484 <_ZL12MX_ADC3_Initv+0xac>)
 80173fa:	2200      	movs	r2, #0
 80173fc:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80173fe:	4b21      	ldr	r3, [pc, #132]	; (8017484 <_ZL12MX_ADC3_Initv+0xac>)
 8017400:	2200      	movs	r2, #0
 8017402:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8017404:	4b1f      	ldr	r3, [pc, #124]	; (8017484 <_ZL12MX_ADC3_Initv+0xac>)
 8017406:	2200      	movs	r2, #0
 8017408:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 801740a:	4b1e      	ldr	r3, [pc, #120]	; (8017484 <_ZL12MX_ADC3_Initv+0xac>)
 801740c:	2200      	movs	r2, #0
 801740e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8017412:	4b1c      	ldr	r3, [pc, #112]	; (8017484 <_ZL12MX_ADC3_Initv+0xac>)
 8017414:	2200      	movs	r2, #0
 8017416:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8017418:	4b1a      	ldr	r3, [pc, #104]	; (8017484 <_ZL12MX_ADC3_Initv+0xac>)
 801741a:	4a1c      	ldr	r2, [pc, #112]	; (801748c <_ZL12MX_ADC3_Initv+0xb4>)
 801741c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 801741e:	4b19      	ldr	r3, [pc, #100]	; (8017484 <_ZL12MX_ADC3_Initv+0xac>)
 8017420:	2200      	movs	r2, #0
 8017422:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8017424:	4b17      	ldr	r3, [pc, #92]	; (8017484 <_ZL12MX_ADC3_Initv+0xac>)
 8017426:	2201      	movs	r2, #1
 8017428:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 801742a:	4b16      	ldr	r3, [pc, #88]	; (8017484 <_ZL12MX_ADC3_Initv+0xac>)
 801742c:	2200      	movs	r2, #0
 801742e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8017432:	4b14      	ldr	r3, [pc, #80]	; (8017484 <_ZL12MX_ADC3_Initv+0xac>)
 8017434:	2201      	movs	r2, #1
 8017436:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8017438:	4812      	ldr	r0, [pc, #72]	; (8017484 <_ZL12MX_ADC3_Initv+0xac>)
 801743a:	f7e9 fbab 	bl	8000b94 <HAL_ADC_Init>
 801743e:	4603      	mov	r3, r0
 8017440:	2b00      	cmp	r3, #0
 8017442:	bf14      	ite	ne
 8017444:	2301      	movne	r3, #1
 8017446:	2300      	moveq	r3, #0
 8017448:	b2db      	uxtb	r3, r3
 801744a:	2b00      	cmp	r3, #0
 801744c:	d001      	beq.n	8017452 <_ZL12MX_ADC3_Initv+0x7a>
  {
    Error_Handler();
 801744e:	f000 ffc3 	bl	80183d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8017452:	2304      	movs	r3, #4
 8017454:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8017456:	2301      	movs	r3, #1
 8017458:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 801745a:	2300      	movs	r3, #0
 801745c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 801745e:	463b      	mov	r3, r7
 8017460:	4619      	mov	r1, r3
 8017462:	4808      	ldr	r0, [pc, #32]	; (8017484 <_ZL12MX_ADC3_Initv+0xac>)
 8017464:	f7e9 fbda 	bl	8000c1c <HAL_ADC_ConfigChannel>
 8017468:	4603      	mov	r3, r0
 801746a:	2b00      	cmp	r3, #0
 801746c:	bf14      	ite	ne
 801746e:	2301      	movne	r3, #1
 8017470:	2300      	moveq	r3, #0
 8017472:	b2db      	uxtb	r3, r3
 8017474:	2b00      	cmp	r3, #0
 8017476:	d001      	beq.n	801747c <_ZL12MX_ADC3_Initv+0xa4>
  {
    Error_Handler();
 8017478:	f000 ffae 	bl	80183d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 801747c:	bf00      	nop
 801747e:	3710      	adds	r7, #16
 8017480:	46bd      	mov	sp, r7
 8017482:	bd80      	pop	{r7, pc}
 8017484:	200093c0 	.word	0x200093c0
 8017488:	40012200 	.word	0x40012200
 801748c:	0f000001 	.word	0x0f000001

08017490 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8017490:	b580      	push	{r7, lr}
 8017492:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8017494:	4b10      	ldr	r3, [pc, #64]	; (80174d8 <_ZL11MX_CRC_Initv+0x48>)
 8017496:	4a11      	ldr	r2, [pc, #68]	; (80174dc <_ZL11MX_CRC_Initv+0x4c>)
 8017498:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 801749a:	4b0f      	ldr	r3, [pc, #60]	; (80174d8 <_ZL11MX_CRC_Initv+0x48>)
 801749c:	2200      	movs	r2, #0
 801749e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 80174a0:	4b0d      	ldr	r3, [pc, #52]	; (80174d8 <_ZL11MX_CRC_Initv+0x48>)
 80174a2:	2200      	movs	r2, #0
 80174a4:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 80174a6:	4b0c      	ldr	r3, [pc, #48]	; (80174d8 <_ZL11MX_CRC_Initv+0x48>)
 80174a8:	2200      	movs	r2, #0
 80174aa:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80174ac:	4b0a      	ldr	r3, [pc, #40]	; (80174d8 <_ZL11MX_CRC_Initv+0x48>)
 80174ae:	2200      	movs	r2, #0
 80174b0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80174b2:	4b09      	ldr	r3, [pc, #36]	; (80174d8 <_ZL11MX_CRC_Initv+0x48>)
 80174b4:	2201      	movs	r2, #1
 80174b6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80174b8:	4807      	ldr	r0, [pc, #28]	; (80174d8 <_ZL11MX_CRC_Initv+0x48>)
 80174ba:	f7e9 feef 	bl	800129c <HAL_CRC_Init>
 80174be:	4603      	mov	r3, r0
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	bf14      	ite	ne
 80174c4:	2301      	movne	r3, #1
 80174c6:	2300      	moveq	r3, #0
 80174c8:	b2db      	uxtb	r3, r3
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	d001      	beq.n	80174d2 <_ZL11MX_CRC_Initv+0x42>
  {
    Error_Handler();
 80174ce:	f000 ff83 	bl	80183d8 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80174d2:	bf00      	nop
 80174d4:	bd80      	pop	{r7, pc}
 80174d6:	bf00      	nop
 80174d8:	20009408 	.word	0x20009408
 80174dc:	40023000 	.word	0x40023000

080174e0 <_ZL12MX_DCMI_Initv>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 80174e0:	b580      	push	{r7, lr}
 80174e2:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 80174e4:	4b19      	ldr	r3, [pc, #100]	; (801754c <_ZL12MX_DCMI_Initv+0x6c>)
 80174e6:	4a1a      	ldr	r2, [pc, #104]	; (8017550 <_ZL12MX_DCMI_Initv+0x70>)
 80174e8:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 80174ea:	4b18      	ldr	r3, [pc, #96]	; (801754c <_ZL12MX_DCMI_Initv+0x6c>)
 80174ec:	2200      	movs	r2, #0
 80174ee:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 80174f0:	4b16      	ldr	r3, [pc, #88]	; (801754c <_ZL12MX_DCMI_Initv+0x6c>)
 80174f2:	2200      	movs	r2, #0
 80174f4:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 80174f6:	4b15      	ldr	r3, [pc, #84]	; (801754c <_ZL12MX_DCMI_Initv+0x6c>)
 80174f8:	2200      	movs	r2, #0
 80174fa:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 80174fc:	4b13      	ldr	r3, [pc, #76]	; (801754c <_ZL12MX_DCMI_Initv+0x6c>)
 80174fe:	2200      	movs	r2, #0
 8017500:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 8017502:	4b12      	ldr	r3, [pc, #72]	; (801754c <_ZL12MX_DCMI_Initv+0x6c>)
 8017504:	2200      	movs	r2, #0
 8017506:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8017508:	4b10      	ldr	r3, [pc, #64]	; (801754c <_ZL12MX_DCMI_Initv+0x6c>)
 801750a:	2200      	movs	r2, #0
 801750c:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 801750e:	4b0f      	ldr	r3, [pc, #60]	; (801754c <_ZL12MX_DCMI_Initv+0x6c>)
 8017510:	2200      	movs	r2, #0
 8017512:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 8017514:	4b0d      	ldr	r3, [pc, #52]	; (801754c <_ZL12MX_DCMI_Initv+0x6c>)
 8017516:	2200      	movs	r2, #0
 8017518:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 801751a:	4b0c      	ldr	r3, [pc, #48]	; (801754c <_ZL12MX_DCMI_Initv+0x6c>)
 801751c:	2200      	movs	r2, #0
 801751e:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8017520:	4b0a      	ldr	r3, [pc, #40]	; (801754c <_ZL12MX_DCMI_Initv+0x6c>)
 8017522:	2200      	movs	r2, #0
 8017524:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 8017526:	4b09      	ldr	r3, [pc, #36]	; (801754c <_ZL12MX_DCMI_Initv+0x6c>)
 8017528:	2200      	movs	r2, #0
 801752a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 801752c:	4807      	ldr	r0, [pc, #28]	; (801754c <_ZL12MX_DCMI_Initv+0x6c>)
 801752e:	f7e9 ff9f 	bl	8001470 <HAL_DCMI_Init>
 8017532:	4603      	mov	r3, r0
 8017534:	2b00      	cmp	r3, #0
 8017536:	bf14      	ite	ne
 8017538:	2301      	movne	r3, #1
 801753a:	2300      	moveq	r3, #0
 801753c:	b2db      	uxtb	r3, r3
 801753e:	2b00      	cmp	r3, #0
 8017540:	d001      	beq.n	8017546 <_ZL12MX_DCMI_Initv+0x66>
  {
    Error_Handler();
 8017542:	f000 ff49 	bl	80183d8 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8017546:	bf00      	nop
 8017548:	bd80      	pop	{r7, pc}
 801754a:	bf00      	nop
 801754c:	2000942c 	.word	0x2000942c
 8017550:	50050000 	.word	0x50050000

08017554 <_ZL11MX_ETH_Initv>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8017554:	b580      	push	{r7, lr}
 8017556:	b082      	sub	sp, #8
 8017558:	af00      	add	r7, sp, #0
   uint8_t MACAddr[6] ;

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 801755a:	4b19      	ldr	r3, [pc, #100]	; (80175c0 <_ZL11MX_ETH_Initv+0x6c>)
 801755c:	4a19      	ldr	r2, [pc, #100]	; (80175c4 <_ZL11MX_ETH_Initv+0x70>)
 801755e:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8017560:	4b17      	ldr	r3, [pc, #92]	; (80175c0 <_ZL11MX_ETH_Initv+0x6c>)
 8017562:	2201      	movs	r2, #1
 8017564:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8017566:	4b16      	ldr	r3, [pc, #88]	; (80175c0 <_ZL11MX_ETH_Initv+0x6c>)
 8017568:	2200      	movs	r2, #0
 801756a:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 801756c:	2300      	movs	r3, #0
 801756e:	703b      	strb	r3, [r7, #0]
  MACAddr[1] = 0x80;
 8017570:	2380      	movs	r3, #128	; 0x80
 8017572:	707b      	strb	r3, [r7, #1]
  MACAddr[2] = 0xE1;
 8017574:	23e1      	movs	r3, #225	; 0xe1
 8017576:	70bb      	strb	r3, [r7, #2]
  MACAddr[3] = 0x00;
 8017578:	2300      	movs	r3, #0
 801757a:	70fb      	strb	r3, [r7, #3]
  MACAddr[4] = 0x00;
 801757c:	2300      	movs	r3, #0
 801757e:	713b      	strb	r3, [r7, #4]
  MACAddr[5] = 0x00;
 8017580:	2300      	movs	r3, #0
 8017582:	717b      	strb	r3, [r7, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8017584:	4a0e      	ldr	r2, [pc, #56]	; (80175c0 <_ZL11MX_ETH_Initv+0x6c>)
 8017586:	463b      	mov	r3, r7
 8017588:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 801758a:	4b0d      	ldr	r3, [pc, #52]	; (80175c0 <_ZL11MX_ETH_Initv+0x6c>)
 801758c:	2200      	movs	r2, #0
 801758e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8017590:	4b0b      	ldr	r3, [pc, #44]	; (80175c0 <_ZL11MX_ETH_Initv+0x6c>)
 8017592:	2200      	movs	r2, #0
 8017594:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8017596:	4b0a      	ldr	r3, [pc, #40]	; (80175c0 <_ZL11MX_ETH_Initv+0x6c>)
 8017598:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801759c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 801759e:	4808      	ldr	r0, [pc, #32]	; (80175c0 <_ZL11MX_ETH_Initv+0x6c>)
 80175a0:	f7ea fc6a 	bl	8001e78 <HAL_ETH_Init>
 80175a4:	4603      	mov	r3, r0
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	bf14      	ite	ne
 80175aa:	2301      	movne	r3, #1
 80175ac:	2300      	moveq	r3, #0
 80175ae:	b2db      	uxtb	r3, r3
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d001      	beq.n	80175b8 <_ZL11MX_ETH_Initv+0x64>
  {
    Error_Handler();
 80175b4:	f000 ff10 	bl	80183d8 <Error_Handler>
  }
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80175b8:	bf00      	nop
 80175ba:	3708      	adds	r7, #8
 80175bc:	46bd      	mov	sp, r7
 80175be:	bd80      	pop	{r7, pc}
 80175c0:	2000947c 	.word	0x2000947c
 80175c4:	40028000 	.word	0x40028000

080175c8 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80175c8:	b580      	push	{r7, lr}
 80175ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80175cc:	4b22      	ldr	r3, [pc, #136]	; (8017658 <_ZL12MX_I2C1_Initv+0x90>)
 80175ce:	4a23      	ldr	r2, [pc, #140]	; (801765c <_ZL12MX_I2C1_Initv+0x94>)
 80175d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80175d2:	4b21      	ldr	r3, [pc, #132]	; (8017658 <_ZL12MX_I2C1_Initv+0x90>)
 80175d4:	4a22      	ldr	r2, [pc, #136]	; (8017660 <_ZL12MX_I2C1_Initv+0x98>)
 80175d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80175d8:	4b1f      	ldr	r3, [pc, #124]	; (8017658 <_ZL12MX_I2C1_Initv+0x90>)
 80175da:	2200      	movs	r2, #0
 80175dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80175de:	4b1e      	ldr	r3, [pc, #120]	; (8017658 <_ZL12MX_I2C1_Initv+0x90>)
 80175e0:	2201      	movs	r2, #1
 80175e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80175e4:	4b1c      	ldr	r3, [pc, #112]	; (8017658 <_ZL12MX_I2C1_Initv+0x90>)
 80175e6:	2200      	movs	r2, #0
 80175e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80175ea:	4b1b      	ldr	r3, [pc, #108]	; (8017658 <_ZL12MX_I2C1_Initv+0x90>)
 80175ec:	2200      	movs	r2, #0
 80175ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80175f0:	4b19      	ldr	r3, [pc, #100]	; (8017658 <_ZL12MX_I2C1_Initv+0x90>)
 80175f2:	2200      	movs	r2, #0
 80175f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80175f6:	4b18      	ldr	r3, [pc, #96]	; (8017658 <_ZL12MX_I2C1_Initv+0x90>)
 80175f8:	2200      	movs	r2, #0
 80175fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80175fc:	4b16      	ldr	r3, [pc, #88]	; (8017658 <_ZL12MX_I2C1_Initv+0x90>)
 80175fe:	2200      	movs	r2, #0
 8017600:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8017602:	4815      	ldr	r0, [pc, #84]	; (8017658 <_ZL12MX_I2C1_Initv+0x90>)
 8017604:	f7ec ffe4 	bl	80045d0 <HAL_I2C_Init>
 8017608:	4603      	mov	r3, r0
 801760a:	2b00      	cmp	r3, #0
 801760c:	bf14      	ite	ne
 801760e:	2301      	movne	r3, #1
 8017610:	2300      	moveq	r3, #0
 8017612:	b2db      	uxtb	r3, r3
 8017614:	2b00      	cmp	r3, #0
 8017616:	d001      	beq.n	801761c <_ZL12MX_I2C1_Initv+0x54>
  {
    Error_Handler();
 8017618:	f000 fede 	bl	80183d8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801761c:	2100      	movs	r1, #0
 801761e:	480e      	ldr	r0, [pc, #56]	; (8017658 <_ZL12MX_I2C1_Initv+0x90>)
 8017620:	f7ed fcee 	bl	8005000 <HAL_I2CEx_ConfigAnalogFilter>
 8017624:	4603      	mov	r3, r0
 8017626:	2b00      	cmp	r3, #0
 8017628:	bf14      	ite	ne
 801762a:	2301      	movne	r3, #1
 801762c:	2300      	moveq	r3, #0
 801762e:	b2db      	uxtb	r3, r3
 8017630:	2b00      	cmp	r3, #0
 8017632:	d001      	beq.n	8017638 <_ZL12MX_I2C1_Initv+0x70>
  {
    Error_Handler();
 8017634:	f000 fed0 	bl	80183d8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8017638:	2100      	movs	r1, #0
 801763a:	4807      	ldr	r0, [pc, #28]	; (8017658 <_ZL12MX_I2C1_Initv+0x90>)
 801763c:	f7ed fd2b 	bl	8005096 <HAL_I2CEx_ConfigDigitalFilter>
 8017640:	4603      	mov	r3, r0
 8017642:	2b00      	cmp	r3, #0
 8017644:	bf14      	ite	ne
 8017646:	2301      	movne	r3, #1
 8017648:	2300      	moveq	r3, #0
 801764a:	b2db      	uxtb	r3, r3
 801764c:	2b00      	cmp	r3, #0
 801764e:	d001      	beq.n	8017654 <_ZL12MX_I2C1_Initv+0x8c>
  {
    Error_Handler();
 8017650:	f000 fec2 	bl	80183d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8017654:	bf00      	nop
 8017656:	bd80      	pop	{r7, pc}
 8017658:	200094c4 	.word	0x200094c4
 801765c:	40005400 	.word	0x40005400
 8017660:	00c0eaff 	.word	0x00c0eaff

08017664 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8017664:	b580      	push	{r7, lr}
 8017666:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8017668:	4b22      	ldr	r3, [pc, #136]	; (80176f4 <_ZL12MX_I2C3_Initv+0x90>)
 801766a:	4a23      	ldr	r2, [pc, #140]	; (80176f8 <_ZL12MX_I2C3_Initv+0x94>)
 801766c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 801766e:	4b21      	ldr	r3, [pc, #132]	; (80176f4 <_ZL12MX_I2C3_Initv+0x90>)
 8017670:	4a22      	ldr	r2, [pc, #136]	; (80176fc <_ZL12MX_I2C3_Initv+0x98>)
 8017672:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8017674:	4b1f      	ldr	r3, [pc, #124]	; (80176f4 <_ZL12MX_I2C3_Initv+0x90>)
 8017676:	2200      	movs	r2, #0
 8017678:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 801767a:	4b1e      	ldr	r3, [pc, #120]	; (80176f4 <_ZL12MX_I2C3_Initv+0x90>)
 801767c:	2201      	movs	r2, #1
 801767e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8017680:	4b1c      	ldr	r3, [pc, #112]	; (80176f4 <_ZL12MX_I2C3_Initv+0x90>)
 8017682:	2200      	movs	r2, #0
 8017684:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8017686:	4b1b      	ldr	r3, [pc, #108]	; (80176f4 <_ZL12MX_I2C3_Initv+0x90>)
 8017688:	2200      	movs	r2, #0
 801768a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 801768c:	4b19      	ldr	r3, [pc, #100]	; (80176f4 <_ZL12MX_I2C3_Initv+0x90>)
 801768e:	2200      	movs	r2, #0
 8017690:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8017692:	4b18      	ldr	r3, [pc, #96]	; (80176f4 <_ZL12MX_I2C3_Initv+0x90>)
 8017694:	2200      	movs	r2, #0
 8017696:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8017698:	4b16      	ldr	r3, [pc, #88]	; (80176f4 <_ZL12MX_I2C3_Initv+0x90>)
 801769a:	2200      	movs	r2, #0
 801769c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 801769e:	4815      	ldr	r0, [pc, #84]	; (80176f4 <_ZL12MX_I2C3_Initv+0x90>)
 80176a0:	f7ec ff96 	bl	80045d0 <HAL_I2C_Init>
 80176a4:	4603      	mov	r3, r0
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	bf14      	ite	ne
 80176aa:	2301      	movne	r3, #1
 80176ac:	2300      	moveq	r3, #0
 80176ae:	b2db      	uxtb	r3, r3
 80176b0:	2b00      	cmp	r3, #0
 80176b2:	d001      	beq.n	80176b8 <_ZL12MX_I2C3_Initv+0x54>
  {
    Error_Handler();
 80176b4:	f000 fe90 	bl	80183d8 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80176b8:	2100      	movs	r1, #0
 80176ba:	480e      	ldr	r0, [pc, #56]	; (80176f4 <_ZL12MX_I2C3_Initv+0x90>)
 80176bc:	f7ed fca0 	bl	8005000 <HAL_I2CEx_ConfigAnalogFilter>
 80176c0:	4603      	mov	r3, r0
 80176c2:	2b00      	cmp	r3, #0
 80176c4:	bf14      	ite	ne
 80176c6:	2301      	movne	r3, #1
 80176c8:	2300      	moveq	r3, #0
 80176ca:	b2db      	uxtb	r3, r3
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	d001      	beq.n	80176d4 <_ZL12MX_I2C3_Initv+0x70>
  {
    Error_Handler();
 80176d0:	f000 fe82 	bl	80183d8 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80176d4:	2100      	movs	r1, #0
 80176d6:	4807      	ldr	r0, [pc, #28]	; (80176f4 <_ZL12MX_I2C3_Initv+0x90>)
 80176d8:	f7ed fcdd 	bl	8005096 <HAL_I2CEx_ConfigDigitalFilter>
 80176dc:	4603      	mov	r3, r0
 80176de:	2b00      	cmp	r3, #0
 80176e0:	bf14      	ite	ne
 80176e2:	2301      	movne	r3, #1
 80176e4:	2300      	moveq	r3, #0
 80176e6:	b2db      	uxtb	r3, r3
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d001      	beq.n	80176f0 <_ZL12MX_I2C3_Initv+0x8c>
  {
    Error_Handler();
 80176ec:	f000 fe74 	bl	80183d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80176f0:	bf00      	nop
 80176f2:	bd80      	pop	{r7, pc}
 80176f4:	20009510 	.word	0x20009510
 80176f8:	40005c00 	.word	0x40005c00
 80176fc:	00c0eaff 	.word	0x00c0eaff

08017700 <_ZL15MX_QUADSPI_Initv>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8017700:	b580      	push	{r7, lr}
 8017702:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8017704:	4b14      	ldr	r3, [pc, #80]	; (8017758 <_ZL15MX_QUADSPI_Initv+0x58>)
 8017706:	4a15      	ldr	r2, [pc, #84]	; (801775c <_ZL15MX_QUADSPI_Initv+0x5c>)
 8017708:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 255;
 801770a:	4b13      	ldr	r3, [pc, #76]	; (8017758 <_ZL15MX_QUADSPI_Initv+0x58>)
 801770c:	22ff      	movs	r2, #255	; 0xff
 801770e:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 1;
 8017710:	4b11      	ldr	r3, [pc, #68]	; (8017758 <_ZL15MX_QUADSPI_Initv+0x58>)
 8017712:	2201      	movs	r2, #1
 8017714:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8017716:	4b10      	ldr	r3, [pc, #64]	; (8017758 <_ZL15MX_QUADSPI_Initv+0x58>)
 8017718:	2200      	movs	r2, #0
 801771a:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 1;
 801771c:	4b0e      	ldr	r3, [pc, #56]	; (8017758 <_ZL15MX_QUADSPI_Initv+0x58>)
 801771e:	2201      	movs	r2, #1
 8017720:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8017722:	4b0d      	ldr	r3, [pc, #52]	; (8017758 <_ZL15MX_QUADSPI_Initv+0x58>)
 8017724:	2200      	movs	r2, #0
 8017726:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8017728:	4b0b      	ldr	r3, [pc, #44]	; (8017758 <_ZL15MX_QUADSPI_Initv+0x58>)
 801772a:	2200      	movs	r2, #0
 801772c:	619a      	str	r2, [r3, #24]
  hqspi.Init.FlashID = QSPI_FLASH_ID_1;
 801772e:	4b0a      	ldr	r3, [pc, #40]	; (8017758 <_ZL15MX_QUADSPI_Initv+0x58>)
 8017730:	2200      	movs	r2, #0
 8017732:	61da      	str	r2, [r3, #28]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_DISABLE;
 8017734:	4b08      	ldr	r3, [pc, #32]	; (8017758 <_ZL15MX_QUADSPI_Initv+0x58>)
 8017736:	2200      	movs	r2, #0
 8017738:	621a      	str	r2, [r3, #32]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 801773a:	4807      	ldr	r0, [pc, #28]	; (8017758 <_ZL15MX_QUADSPI_Initv+0x58>)
 801773c:	f7ee f98e 	bl	8005a5c <HAL_QSPI_Init>
 8017740:	4603      	mov	r3, r0
 8017742:	2b00      	cmp	r3, #0
 8017744:	bf14      	ite	ne
 8017746:	2301      	movne	r3, #1
 8017748:	2300      	moveq	r3, #0
 801774a:	b2db      	uxtb	r3, r3
 801774c:	2b00      	cmp	r3, #0
 801774e:	d001      	beq.n	8017754 <_ZL15MX_QUADSPI_Initv+0x54>
  {
    Error_Handler();
 8017750:	f000 fe42 	bl	80183d8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8017754:	bf00      	nop
 8017756:	bd80      	pop	{r7, pc}
 8017758:	2000955c 	.word	0x2000955c
 801775c:	a0001000 	.word	0xa0001000

08017760 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8017760:	b580      	push	{r7, lr}
 8017762:	b092      	sub	sp, #72	; 0x48
 8017764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8017766:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801776a:	2200      	movs	r2, #0
 801776c:	601a      	str	r2, [r3, #0]
 801776e:	605a      	str	r2, [r3, #4]
 8017770:	609a      	str	r2, [r3, #8]
 8017772:	60da      	str	r2, [r3, #12]
 8017774:	611a      	str	r2, [r3, #16]
 8017776:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8017778:	2300      	movs	r3, #0
 801777a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 801777c:	463b      	mov	r3, r7
 801777e:	222c      	movs	r2, #44	; 0x2c
 8017780:	2100      	movs	r1, #0
 8017782:	4618      	mov	r0, r3
 8017784:	f00a fee5 	bl	8022552 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8017788:	4b56      	ldr	r3, [pc, #344]	; (80178e4 <_ZL11MX_RTC_Initv+0x184>)
 801778a:	4a57      	ldr	r2, [pc, #348]	; (80178e8 <_ZL11MX_RTC_Initv+0x188>)
 801778c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 801778e:	4b55      	ldr	r3, [pc, #340]	; (80178e4 <_ZL11MX_RTC_Initv+0x184>)
 8017790:	2200      	movs	r2, #0
 8017792:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8017794:	4b53      	ldr	r3, [pc, #332]	; (80178e4 <_ZL11MX_RTC_Initv+0x184>)
 8017796:	227f      	movs	r2, #127	; 0x7f
 8017798:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 801779a:	4b52      	ldr	r3, [pc, #328]	; (80178e4 <_ZL11MX_RTC_Initv+0x184>)
 801779c:	22ff      	movs	r2, #255	; 0xff
 801779e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80177a0:	4b50      	ldr	r3, [pc, #320]	; (80178e4 <_ZL11MX_RTC_Initv+0x184>)
 80177a2:	2200      	movs	r2, #0
 80177a4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80177a6:	4b4f      	ldr	r3, [pc, #316]	; (80178e4 <_ZL11MX_RTC_Initv+0x184>)
 80177a8:	2200      	movs	r2, #0
 80177aa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80177ac:	4b4d      	ldr	r3, [pc, #308]	; (80178e4 <_ZL11MX_RTC_Initv+0x184>)
 80177ae:	2200      	movs	r2, #0
 80177b0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80177b2:	484c      	ldr	r0, [pc, #304]	; (80178e4 <_ZL11MX_RTC_Initv+0x184>)
 80177b4:	f7ef fbb4 	bl	8006f20 <HAL_RTC_Init>
 80177b8:	4603      	mov	r3, r0
 80177ba:	2b00      	cmp	r3, #0
 80177bc:	bf14      	ite	ne
 80177be:	2301      	movne	r3, #1
 80177c0:	2300      	moveq	r3, #0
 80177c2:	b2db      	uxtb	r3, r3
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d001      	beq.n	80177cc <_ZL11MX_RTC_Initv+0x6c>
  {
    Error_Handler();
 80177c8:	f000 fe06 	bl	80183d8 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 80177cc:	2300      	movs	r3, #0
 80177ce:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80177d2:	2300      	movs	r3, #0
 80177d4:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80177d8:	2300      	movs	r3, #0
 80177da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80177de:	2300      	movs	r3, #0
 80177e0:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80177e2:	2300      	movs	r3, #0
 80177e4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80177e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80177ea:	2201      	movs	r2, #1
 80177ec:	4619      	mov	r1, r3
 80177ee:	483d      	ldr	r0, [pc, #244]	; (80178e4 <_ZL11MX_RTC_Initv+0x184>)
 80177f0:	f7ef fc12 	bl	8007018 <HAL_RTC_SetTime>
 80177f4:	4603      	mov	r3, r0
 80177f6:	2b00      	cmp	r3, #0
 80177f8:	bf14      	ite	ne
 80177fa:	2301      	movne	r3, #1
 80177fc:	2300      	moveq	r3, #0
 80177fe:	b2db      	uxtb	r3, r3
 8017800:	2b00      	cmp	r3, #0
 8017802:	d001      	beq.n	8017808 <_ZL11MX_RTC_Initv+0xa8>
  {
    Error_Handler();
 8017804:	f000 fde8 	bl	80183d8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8017808:	2301      	movs	r3, #1
 801780a:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 801780e:	2301      	movs	r3, #1
 8017810:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8017814:	2301      	movs	r3, #1
 8017816:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 801781a:	2300      	movs	r3, #0
 801781c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8017820:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017824:	2201      	movs	r2, #1
 8017826:	4619      	mov	r1, r3
 8017828:	482e      	ldr	r0, [pc, #184]	; (80178e4 <_ZL11MX_RTC_Initv+0x184>)
 801782a:	f7ef fcb3 	bl	8007194 <HAL_RTC_SetDate>
 801782e:	4603      	mov	r3, r0
 8017830:	2b00      	cmp	r3, #0
 8017832:	bf14      	ite	ne
 8017834:	2301      	movne	r3, #1
 8017836:	2300      	moveq	r3, #0
 8017838:	b2db      	uxtb	r3, r3
 801783a:	2b00      	cmp	r3, #0
 801783c:	d001      	beq.n	8017842 <_ZL11MX_RTC_Initv+0xe2>
  {
    Error_Handler();
 801783e:	f000 fdcb 	bl	80183d8 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8017842:	2300      	movs	r3, #0
 8017844:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8017846:	2300      	movs	r3, #0
 8017848:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 801784a:	2300      	movs	r3, #0
 801784c:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 801784e:	2300      	movs	r3, #0
 8017850:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8017852:	2300      	movs	r3, #0
 8017854:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8017856:	2300      	movs	r3, #0
 8017858:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 801785a:	2300      	movs	r3, #0
 801785c:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 801785e:	2300      	movs	r3, #0
 8017860:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8017862:	2300      	movs	r3, #0
 8017864:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8017866:	2301      	movs	r3, #1
 8017868:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 801786c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8017870:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8017872:	463b      	mov	r3, r7
 8017874:	2201      	movs	r2, #1
 8017876:	4619      	mov	r1, r3
 8017878:	481a      	ldr	r0, [pc, #104]	; (80178e4 <_ZL11MX_RTC_Initv+0x184>)
 801787a:	f7ef fd33 	bl	80072e4 <HAL_RTC_SetAlarm>
 801787e:	4603      	mov	r3, r0
 8017880:	2b00      	cmp	r3, #0
 8017882:	bf14      	ite	ne
 8017884:	2301      	movne	r3, #1
 8017886:	2300      	moveq	r3, #0
 8017888:	b2db      	uxtb	r3, r3
 801788a:	2b00      	cmp	r3, #0
 801788c:	d001      	beq.n	8017892 <_ZL11MX_RTC_Initv+0x132>
  {
    Error_Handler();
 801788e:	f000 fda3 	bl	80183d8 <Error_Handler>
  }
  /** Enable the Alarm B 
  */
  sAlarm.AlarmDateWeekDay = 0x1;
 8017892:	2301      	movs	r3, #1
 8017894:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_B;
 8017898:	f44f 7300 	mov.w	r3, #512	; 0x200
 801789c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 801789e:	463b      	mov	r3, r7
 80178a0:	2201      	movs	r2, #1
 80178a2:	4619      	mov	r1, r3
 80178a4:	480f      	ldr	r0, [pc, #60]	; (80178e4 <_ZL11MX_RTC_Initv+0x184>)
 80178a6:	f7ef fd1d 	bl	80072e4 <HAL_RTC_SetAlarm>
 80178aa:	4603      	mov	r3, r0
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	bf14      	ite	ne
 80178b0:	2301      	movne	r3, #1
 80178b2:	2300      	moveq	r3, #0
 80178b4:	b2db      	uxtb	r3, r3
 80178b6:	2b00      	cmp	r3, #0
 80178b8:	d001      	beq.n	80178be <_ZL11MX_RTC_Initv+0x15e>
  {
    Error_Handler();
 80178ba:	f000 fd8d 	bl	80183d8 <Error_Handler>
  }
  /** Enable the TimeStamp 
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 80178be:	2202      	movs	r2, #2
 80178c0:	2100      	movs	r1, #0
 80178c2:	4808      	ldr	r0, [pc, #32]	; (80178e4 <_ZL11MX_RTC_Initv+0x184>)
 80178c4:	f7ef fe98 	bl	80075f8 <HAL_RTCEx_SetTimeStamp>
 80178c8:	4603      	mov	r3, r0
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	bf14      	ite	ne
 80178ce:	2301      	movne	r3, #1
 80178d0:	2300      	moveq	r3, #0
 80178d2:	b2db      	uxtb	r3, r3
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	d001      	beq.n	80178dc <_ZL11MX_RTC_Initv+0x17c>
  {
    Error_Handler();
 80178d8:	f000 fd7e 	bl	80183d8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80178dc:	bf00      	nop
 80178de:	3748      	adds	r7, #72	; 0x48
 80178e0:	46bd      	mov	sp, r7
 80178e2:	bd80      	pop	{r7, pc}
 80178e4:	200095a8 	.word	0x200095a8
 80178e8:	40002800 	.word	0x40002800

080178ec <_ZL12MX_SAI2_Initv>:
  * @brief SAI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI2_Init(void)
{
 80178ec:	b580      	push	{r7, lr}
 80178ee:	af00      	add	r7, sp, #0
  /* USER CODE END SAI2_Init 0 */

  /* USER CODE BEGIN SAI2_Init 1 */

  /* USER CODE END SAI2_Init 1 */
  hsai_BlockA2.Instance = SAI2_Block_A;
 80178f0:	4b52      	ldr	r3, [pc, #328]	; (8017a3c <_ZL12MX_SAI2_Initv+0x150>)
 80178f2:	4a53      	ldr	r2, [pc, #332]	; (8017a40 <_ZL12MX_SAI2_Initv+0x154>)
 80178f4:	601a      	str	r2, [r3, #0]
  hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80178f6:	4b51      	ldr	r3, [pc, #324]	; (8017a3c <_ZL12MX_SAI2_Initv+0x150>)
 80178f8:	2200      	movs	r2, #0
 80178fa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80178fc:	4b4f      	ldr	r3, [pc, #316]	; (8017a3c <_ZL12MX_SAI2_Initv+0x150>)
 80178fe:	2200      	movs	r2, #0
 8017900:	605a      	str	r2, [r3, #4]
  hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 8017902:	4b4e      	ldr	r3, [pc, #312]	; (8017a3c <_ZL12MX_SAI2_Initv+0x150>)
 8017904:	2240      	movs	r2, #64	; 0x40
 8017906:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8017908:	4b4c      	ldr	r3, [pc, #304]	; (8017a3c <_ZL12MX_SAI2_Initv+0x150>)
 801790a:	2200      	movs	r2, #0
 801790c:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 801790e:	4b4b      	ldr	r3, [pc, #300]	; (8017a3c <_ZL12MX_SAI2_Initv+0x150>)
 8017910:	2200      	movs	r2, #0
 8017912:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8017914:	4b49      	ldr	r3, [pc, #292]	; (8017a3c <_ZL12MX_SAI2_Initv+0x150>)
 8017916:	2200      	movs	r2, #0
 8017918:	609a      	str	r2, [r3, #8]
  hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 801791a:	4b48      	ldr	r3, [pc, #288]	; (8017a3c <_ZL12MX_SAI2_Initv+0x150>)
 801791c:	2200      	movs	r2, #0
 801791e:	611a      	str	r2, [r3, #16]
  hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8017920:	4b46      	ldr	r3, [pc, #280]	; (8017a3c <_ZL12MX_SAI2_Initv+0x150>)
 8017922:	2200      	movs	r2, #0
 8017924:	615a      	str	r2, [r3, #20]
  hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8017926:	4b45      	ldr	r3, [pc, #276]	; (8017a3c <_ZL12MX_SAI2_Initv+0x150>)
 8017928:	2200      	movs	r2, #0
 801792a:	619a      	str	r2, [r3, #24]
  hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 801792c:	4b43      	ldr	r3, [pc, #268]	; (8017a3c <_ZL12MX_SAI2_Initv+0x150>)
 801792e:	4a45      	ldr	r2, [pc, #276]	; (8017a44 <_ZL12MX_SAI2_Initv+0x158>)
 8017930:	61da      	str	r2, [r3, #28]
  hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8017932:	4b42      	ldr	r3, [pc, #264]	; (8017a3c <_ZL12MX_SAI2_Initv+0x150>)
 8017934:	2200      	movs	r2, #0
 8017936:	60da      	str	r2, [r3, #12]
  hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8017938:	4b40      	ldr	r3, [pc, #256]	; (8017a3c <_ZL12MX_SAI2_Initv+0x150>)
 801793a:	2200      	movs	r2, #0
 801793c:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 801793e:	4b3f      	ldr	r3, [pc, #252]	; (8017a3c <_ZL12MX_SAI2_Initv+0x150>)
 8017940:	2200      	movs	r2, #0
 8017942:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8017944:	4b3d      	ldr	r3, [pc, #244]	; (8017a3c <_ZL12MX_SAI2_Initv+0x150>)
 8017946:	2200      	movs	r2, #0
 8017948:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA2.FrameInit.FrameLength = 8;
 801794a:	4b3c      	ldr	r3, [pc, #240]	; (8017a3c <_ZL12MX_SAI2_Initv+0x150>)
 801794c:	2208      	movs	r2, #8
 801794e:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8017950:	4b3a      	ldr	r3, [pc, #232]	; (8017a3c <_ZL12MX_SAI2_Initv+0x150>)
 8017952:	2201      	movs	r2, #1
 8017954:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8017956:	4b39      	ldr	r3, [pc, #228]	; (8017a3c <_ZL12MX_SAI2_Initv+0x150>)
 8017958:	2200      	movs	r2, #0
 801795a:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 801795c:	4b37      	ldr	r3, [pc, #220]	; (8017a3c <_ZL12MX_SAI2_Initv+0x150>)
 801795e:	2200      	movs	r2, #0
 8017960:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8017962:	4b36      	ldr	r3, [pc, #216]	; (8017a3c <_ZL12MX_SAI2_Initv+0x150>)
 8017964:	2200      	movs	r2, #0
 8017966:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 8017968:	4b34      	ldr	r3, [pc, #208]	; (8017a3c <_ZL12MX_SAI2_Initv+0x150>)
 801796a:	2200      	movs	r2, #0
 801796c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 801796e:	4b33      	ldr	r3, [pc, #204]	; (8017a3c <_ZL12MX_SAI2_Initv+0x150>)
 8017970:	2200      	movs	r2, #0
 8017972:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA2.SlotInit.SlotNumber = 1;
 8017974:	4b31      	ldr	r3, [pc, #196]	; (8017a3c <_ZL12MX_SAI2_Initv+0x150>)
 8017976:	2201      	movs	r2, #1
 8017978:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 801797a:	4b30      	ldr	r3, [pc, #192]	; (8017a3c <_ZL12MX_SAI2_Initv+0x150>)
 801797c:	2200      	movs	r2, #0
 801797e:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK)
 8017980:	482e      	ldr	r0, [pc, #184]	; (8017a3c <_ZL12MX_SAI2_Initv+0x150>)
 8017982:	f7ef fe8f 	bl	80076a4 <HAL_SAI_Init>
 8017986:	4603      	mov	r3, r0
 8017988:	2b00      	cmp	r3, #0
 801798a:	bf14      	ite	ne
 801798c:	2301      	movne	r3, #1
 801798e:	2300      	moveq	r3, #0
 8017990:	b2db      	uxtb	r3, r3
 8017992:	2b00      	cmp	r3, #0
 8017994:	d001      	beq.n	801799a <_ZL12MX_SAI2_Initv+0xae>
  {
    Error_Handler();
 8017996:	f000 fd1f 	bl	80183d8 <Error_Handler>
  }
  hsai_BlockB2.Instance = SAI2_Block_B;
 801799a:	4b2b      	ldr	r3, [pc, #172]	; (8017a48 <_ZL12MX_SAI2_Initv+0x15c>)
 801799c:	4a2b      	ldr	r2, [pc, #172]	; (8017a4c <_ZL12MX_SAI2_Initv+0x160>)
 801799e:	601a      	str	r2, [r3, #0]
  hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80179a0:	4b29      	ldr	r3, [pc, #164]	; (8017a48 <_ZL12MX_SAI2_Initv+0x15c>)
 80179a2:	2200      	movs	r2, #0
 80179a4:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80179a6:	4b28      	ldr	r3, [pc, #160]	; (8017a48 <_ZL12MX_SAI2_Initv+0x15c>)
 80179a8:	2203      	movs	r2, #3
 80179aa:	605a      	str	r2, [r3, #4]
  hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80179ac:	4b26      	ldr	r3, [pc, #152]	; (8017a48 <_ZL12MX_SAI2_Initv+0x15c>)
 80179ae:	2240      	movs	r2, #64	; 0x40
 80179b0:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80179b2:	4b25      	ldr	r3, [pc, #148]	; (8017a48 <_ZL12MX_SAI2_Initv+0x15c>)
 80179b4:	2200      	movs	r2, #0
 80179b6:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80179b8:	4b23      	ldr	r3, [pc, #140]	; (8017a48 <_ZL12MX_SAI2_Initv+0x15c>)
 80179ba:	2200      	movs	r2, #0
 80179bc:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 80179be:	4b22      	ldr	r3, [pc, #136]	; (8017a48 <_ZL12MX_SAI2_Initv+0x15c>)
 80179c0:	2201      	movs	r2, #1
 80179c2:	609a      	str	r2, [r3, #8]
  hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80179c4:	4b20      	ldr	r3, [pc, #128]	; (8017a48 <_ZL12MX_SAI2_Initv+0x15c>)
 80179c6:	2200      	movs	r2, #0
 80179c8:	611a      	str	r2, [r3, #16]
  hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80179ca:	4b1f      	ldr	r3, [pc, #124]	; (8017a48 <_ZL12MX_SAI2_Initv+0x15c>)
 80179cc:	2200      	movs	r2, #0
 80179ce:	619a      	str	r2, [r3, #24]
  hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80179d0:	4b1d      	ldr	r3, [pc, #116]	; (8017a48 <_ZL12MX_SAI2_Initv+0x15c>)
 80179d2:	2200      	movs	r2, #0
 80179d4:	60da      	str	r2, [r3, #12]
  hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80179d6:	4b1c      	ldr	r3, [pc, #112]	; (8017a48 <_ZL12MX_SAI2_Initv+0x15c>)
 80179d8:	2200      	movs	r2, #0
 80179da:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80179dc:	4b1a      	ldr	r3, [pc, #104]	; (8017a48 <_ZL12MX_SAI2_Initv+0x15c>)
 80179de:	2200      	movs	r2, #0
 80179e0:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80179e2:	4b19      	ldr	r3, [pc, #100]	; (8017a48 <_ZL12MX_SAI2_Initv+0x15c>)
 80179e4:	2200      	movs	r2, #0
 80179e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB2.FrameInit.FrameLength = 24;
 80179e8:	4b17      	ldr	r3, [pc, #92]	; (8017a48 <_ZL12MX_SAI2_Initv+0x15c>)
 80179ea:	2218      	movs	r2, #24
 80179ec:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80179ee:	4b16      	ldr	r3, [pc, #88]	; (8017a48 <_ZL12MX_SAI2_Initv+0x15c>)
 80179f0:	2201      	movs	r2, #1
 80179f2:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80179f4:	4b14      	ldr	r3, [pc, #80]	; (8017a48 <_ZL12MX_SAI2_Initv+0x15c>)
 80179f6:	2200      	movs	r2, #0
 80179f8:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80179fa:	4b13      	ldr	r3, [pc, #76]	; (8017a48 <_ZL12MX_SAI2_Initv+0x15c>)
 80179fc:	2200      	movs	r2, #0
 80179fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8017a00:	4b11      	ldr	r3, [pc, #68]	; (8017a48 <_ZL12MX_SAI2_Initv+0x15c>)
 8017a02:	2200      	movs	r2, #0
 8017a04:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8017a06:	4b10      	ldr	r3, [pc, #64]	; (8017a48 <_ZL12MX_SAI2_Initv+0x15c>)
 8017a08:	2200      	movs	r2, #0
 8017a0a:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8017a0c:	4b0e      	ldr	r3, [pc, #56]	; (8017a48 <_ZL12MX_SAI2_Initv+0x15c>)
 8017a0e:	2200      	movs	r2, #0
 8017a10:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB2.SlotInit.SlotNumber = 1;
 8017a12:	4b0d      	ldr	r3, [pc, #52]	; (8017a48 <_ZL12MX_SAI2_Initv+0x15c>)
 8017a14:	2201      	movs	r2, #1
 8017a16:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8017a18:	4b0b      	ldr	r3, [pc, #44]	; (8017a48 <_ZL12MX_SAI2_Initv+0x15c>)
 8017a1a:	2200      	movs	r2, #0
 8017a1c:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK)
 8017a1e:	480a      	ldr	r0, [pc, #40]	; (8017a48 <_ZL12MX_SAI2_Initv+0x15c>)
 8017a20:	f7ef fe40 	bl	80076a4 <HAL_SAI_Init>
 8017a24:	4603      	mov	r3, r0
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	bf14      	ite	ne
 8017a2a:	2301      	movne	r3, #1
 8017a2c:	2300      	moveq	r3, #0
 8017a2e:	b2db      	uxtb	r3, r3
 8017a30:	2b00      	cmp	r3, #0
 8017a32:	d001      	beq.n	8017a38 <_ZL12MX_SAI2_Initv+0x14c>
  {
    Error_Handler();
 8017a34:	f000 fcd0 	bl	80183d8 <Error_Handler>
  }
  /* USER CODE BEGIN SAI2_Init 2 */

  /* USER CODE END SAI2_Init 2 */

}
 8017a38:	bf00      	nop
 8017a3a:	bd80      	pop	{r7, pc}
 8017a3c:	200095c8 	.word	0x200095c8
 8017a40:	40015c04 	.word	0x40015c04
 8017a44:	0002ee00 	.word	0x0002ee00
 8017a48:	2000964c 	.word	0x2000964c
 8017a4c:	40015c24 	.word	0x40015c24

08017a50 <_ZL17MX_SDMMC1_SD_Initv>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8017a50:	b480      	push	{r7}
 8017a52:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8017a54:	4b0c      	ldr	r3, [pc, #48]	; (8017a88 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8017a56:	4a0d      	ldr	r2, [pc, #52]	; (8017a8c <_ZL17MX_SDMMC1_SD_Initv+0x3c>)
 8017a58:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8017a5a:	4b0b      	ldr	r3, [pc, #44]	; (8017a88 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8017a5c:	2200      	movs	r2, #0
 8017a5e:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8017a60:	4b09      	ldr	r3, [pc, #36]	; (8017a88 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8017a62:	2200      	movs	r2, #0
 8017a64:	609a      	str	r2, [r3, #8]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8017a66:	4b08      	ldr	r3, [pc, #32]	; (8017a88 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8017a68:	2200      	movs	r2, #0
 8017a6a:	60da      	str	r2, [r3, #12]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8017a6c:	4b06      	ldr	r3, [pc, #24]	; (8017a88 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8017a6e:	2200      	movs	r2, #0
 8017a70:	611a      	str	r2, [r3, #16]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8017a72:	4b05      	ldr	r3, [pc, #20]	; (8017a88 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8017a74:	2200      	movs	r2, #0
 8017a76:	615a      	str	r2, [r3, #20]
  hsd1.Init.ClockDiv = 0;
 8017a78:	4b03      	ldr	r3, [pc, #12]	; (8017a88 <_ZL17MX_SDMMC1_SD_Initv+0x38>)
 8017a7a:	2200      	movs	r2, #0
 8017a7c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8017a7e:	bf00      	nop
 8017a80:	46bd      	mov	sp, r7
 8017a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a86:	4770      	bx	lr
 8017a88:	200096d0 	.word	0x200096d0
 8017a8c:	40012c00 	.word	0x40012c00

08017a90 <_ZL15MX_SPDIFRX_Initv>:
  * @brief SPDIFRX Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPDIFRX_Init(void)
{
 8017a90:	b580      	push	{r7, lr}
 8017a92:	af00      	add	r7, sp, #0
  /* USER CODE END SPDIFRX_Init 0 */

  /* USER CODE BEGIN SPDIFRX_Init 1 */

  /* USER CODE END SPDIFRX_Init 1 */
  hspdif.Instance = SPDIFRX;
 8017a94:	4b18      	ldr	r3, [pc, #96]	; (8017af8 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8017a96:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8017a9a:	601a      	str	r2, [r3, #0]
  hspdif.Init.InputSelection = SPDIFRX_INPUT_IN0;
 8017a9c:	4b16      	ldr	r3, [pc, #88]	; (8017af8 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8017a9e:	2200      	movs	r2, #0
 8017aa0:	605a      	str	r2, [r3, #4]
  hspdif.Init.Retries = SPDIFRX_MAXRETRIES_NONE;
 8017aa2:	4b15      	ldr	r3, [pc, #84]	; (8017af8 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8017aa4:	2200      	movs	r2, #0
 8017aa6:	609a      	str	r2, [r3, #8]
  hspdif.Init.WaitForActivity = SPDIFRX_WAITFORACTIVITY_OFF;
 8017aa8:	4b13      	ldr	r3, [pc, #76]	; (8017af8 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8017aaa:	2200      	movs	r2, #0
 8017aac:	60da      	str	r2, [r3, #12]
  hspdif.Init.ChannelSelection = SPDIFRX_CHANNEL_A;
 8017aae:	4b12      	ldr	r3, [pc, #72]	; (8017af8 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8017ab0:	2200      	movs	r2, #0
 8017ab2:	611a      	str	r2, [r3, #16]
  hspdif.Init.DataFormat = SPDIFRX_DATAFORMAT_LSB;
 8017ab4:	4b10      	ldr	r3, [pc, #64]	; (8017af8 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8017ab6:	2200      	movs	r2, #0
 8017ab8:	615a      	str	r2, [r3, #20]
  hspdif.Init.StereoMode = SPDIFRX_STEREOMODE_DISABLE;
 8017aba:	4b0f      	ldr	r3, [pc, #60]	; (8017af8 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8017abc:	2200      	movs	r2, #0
 8017abe:	619a      	str	r2, [r3, #24]
  hspdif.Init.PreambleTypeMask = SPDIFRX_PREAMBLETYPEMASK_OFF;
 8017ac0:	4b0d      	ldr	r3, [pc, #52]	; (8017af8 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8017ac2:	2200      	movs	r2, #0
 8017ac4:	61da      	str	r2, [r3, #28]
  hspdif.Init.ChannelStatusMask = SPDIFRX_CHANNELSTATUS_OFF;
 8017ac6:	4b0c      	ldr	r3, [pc, #48]	; (8017af8 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8017ac8:	2200      	movs	r2, #0
 8017aca:	621a      	str	r2, [r3, #32]
  hspdif.Init.ValidityBitMask = SPDIFRX_VALIDITYMASK_OFF;
 8017acc:	4b0a      	ldr	r3, [pc, #40]	; (8017af8 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8017ace:	2200      	movs	r2, #0
 8017ad0:	625a      	str	r2, [r3, #36]	; 0x24
  hspdif.Init.ParityErrorMask = SPDIFRX_PARITYERRORMASK_OFF;
 8017ad2:	4b09      	ldr	r3, [pc, #36]	; (8017af8 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8017ad4:	2200      	movs	r2, #0
 8017ad6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_SPDIFRX_Init(&hspdif) != HAL_OK)
 8017ad8:	4807      	ldr	r0, [pc, #28]	; (8017af8 <_ZL15MX_SPDIFRX_Initv+0x68>)
 8017ada:	f7f1 f8cb 	bl	8008c74 <HAL_SPDIFRX_Init>
 8017ade:	4603      	mov	r3, r0
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	bf14      	ite	ne
 8017ae4:	2301      	movne	r3, #1
 8017ae6:	2300      	moveq	r3, #0
 8017ae8:	b2db      	uxtb	r3, r3
 8017aea:	2b00      	cmp	r3, #0
 8017aec:	d001      	beq.n	8017af2 <_ZL15MX_SPDIFRX_Initv+0x62>
  {
    Error_Handler();
 8017aee:	f000 fc73 	bl	80183d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPDIFRX_Init 2 */

  /* USER CODE END SPDIFRX_Init 2 */

}
 8017af2:	bf00      	nop
 8017af4:	bd80      	pop	{r7, pc}
 8017af6:	bf00      	nop
 8017af8:	20009754 	.word	0x20009754

08017afc <_ZL12MX_SPI2_Initv>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8017afc:	b580      	push	{r7, lr}
 8017afe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8017b00:	4b1d      	ldr	r3, [pc, #116]	; (8017b78 <_ZL12MX_SPI2_Initv+0x7c>)
 8017b02:	4a1e      	ldr	r2, [pc, #120]	; (8017b7c <_ZL12MX_SPI2_Initv+0x80>)
 8017b04:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8017b06:	4b1c      	ldr	r3, [pc, #112]	; (8017b78 <_ZL12MX_SPI2_Initv+0x7c>)
 8017b08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8017b0c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8017b0e:	4b1a      	ldr	r3, [pc, #104]	; (8017b78 <_ZL12MX_SPI2_Initv+0x7c>)
 8017b10:	2200      	movs	r2, #0
 8017b12:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8017b14:	4b18      	ldr	r3, [pc, #96]	; (8017b78 <_ZL12MX_SPI2_Initv+0x7c>)
 8017b16:	f44f 7240 	mov.w	r2, #768	; 0x300
 8017b1a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8017b1c:	4b16      	ldr	r3, [pc, #88]	; (8017b78 <_ZL12MX_SPI2_Initv+0x7c>)
 8017b1e:	2200      	movs	r2, #0
 8017b20:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8017b22:	4b15      	ldr	r3, [pc, #84]	; (8017b78 <_ZL12MX_SPI2_Initv+0x7c>)
 8017b24:	2200      	movs	r2, #0
 8017b26:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8017b28:	4b13      	ldr	r3, [pc, #76]	; (8017b78 <_ZL12MX_SPI2_Initv+0x7c>)
 8017b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017b2e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8017b30:	4b11      	ldr	r3, [pc, #68]	; (8017b78 <_ZL12MX_SPI2_Initv+0x7c>)
 8017b32:	2200      	movs	r2, #0
 8017b34:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8017b36:	4b10      	ldr	r3, [pc, #64]	; (8017b78 <_ZL12MX_SPI2_Initv+0x7c>)
 8017b38:	2200      	movs	r2, #0
 8017b3a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8017b3c:	4b0e      	ldr	r3, [pc, #56]	; (8017b78 <_ZL12MX_SPI2_Initv+0x7c>)
 8017b3e:	2200      	movs	r2, #0
 8017b40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8017b42:	4b0d      	ldr	r3, [pc, #52]	; (8017b78 <_ZL12MX_SPI2_Initv+0x7c>)
 8017b44:	2200      	movs	r2, #0
 8017b46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8017b48:	4b0b      	ldr	r3, [pc, #44]	; (8017b78 <_ZL12MX_SPI2_Initv+0x7c>)
 8017b4a:	2207      	movs	r2, #7
 8017b4c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8017b4e:	4b0a      	ldr	r3, [pc, #40]	; (8017b78 <_ZL12MX_SPI2_Initv+0x7c>)
 8017b50:	2200      	movs	r2, #0
 8017b52:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8017b54:	4b08      	ldr	r3, [pc, #32]	; (8017b78 <_ZL12MX_SPI2_Initv+0x7c>)
 8017b56:	2208      	movs	r2, #8
 8017b58:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8017b5a:	4807      	ldr	r0, [pc, #28]	; (8017b78 <_ZL12MX_SPI2_Initv+0x7c>)
 8017b5c:	f7f1 f8e6 	bl	8008d2c <HAL_SPI_Init>
 8017b60:	4603      	mov	r3, r0
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	bf14      	ite	ne
 8017b66:	2301      	movne	r3, #1
 8017b68:	2300      	moveq	r3, #0
 8017b6a:	b2db      	uxtb	r3, r3
 8017b6c:	2b00      	cmp	r3, #0
 8017b6e:	d001      	beq.n	8017b74 <_ZL12MX_SPI2_Initv+0x78>
  {
    Error_Handler();
 8017b70:	f000 fc32 	bl	80183d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8017b74:	bf00      	nop
 8017b76:	bd80      	pop	{r7, pc}
 8017b78:	200097a0 	.word	0x200097a0
 8017b7c:	40003800 	.word	0x40003800

08017b80 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8017b80:	b580      	push	{r7, lr}
 8017b82:	b08e      	sub	sp, #56	; 0x38
 8017b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017b86:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017b8a:	2200      	movs	r2, #0
 8017b8c:	601a      	str	r2, [r3, #0]
 8017b8e:	605a      	str	r2, [r3, #4]
 8017b90:	609a      	str	r2, [r3, #8]
 8017b92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017b94:	f107 031c 	add.w	r3, r7, #28
 8017b98:	2200      	movs	r2, #0
 8017b9a:	601a      	str	r2, [r3, #0]
 8017b9c:	605a      	str	r2, [r3, #4]
 8017b9e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8017ba0:	463b      	mov	r3, r7
 8017ba2:	2200      	movs	r2, #0
 8017ba4:	601a      	str	r2, [r3, #0]
 8017ba6:	605a      	str	r2, [r3, #4]
 8017ba8:	609a      	str	r2, [r3, #8]
 8017baa:	60da      	str	r2, [r3, #12]
 8017bac:	611a      	str	r2, [r3, #16]
 8017bae:	615a      	str	r2, [r3, #20]
 8017bb0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8017bb2:	4b39      	ldr	r3, [pc, #228]	; (8017c98 <_ZL12MX_TIM3_Initv+0x118>)
 8017bb4:	4a39      	ldr	r2, [pc, #228]	; (8017c9c <_ZL12MX_TIM3_Initv+0x11c>)
 8017bb6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8017bb8:	4b37      	ldr	r3, [pc, #220]	; (8017c98 <_ZL12MX_TIM3_Initv+0x118>)
 8017bba:	2200      	movs	r2, #0
 8017bbc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017bbe:	4b36      	ldr	r3, [pc, #216]	; (8017c98 <_ZL12MX_TIM3_Initv+0x118>)
 8017bc0:	2200      	movs	r2, #0
 8017bc2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8017bc4:	4b34      	ldr	r3, [pc, #208]	; (8017c98 <_ZL12MX_TIM3_Initv+0x118>)
 8017bc6:	2200      	movs	r2, #0
 8017bc8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017bca:	4b33      	ldr	r3, [pc, #204]	; (8017c98 <_ZL12MX_TIM3_Initv+0x118>)
 8017bcc:	2200      	movs	r2, #0
 8017bce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017bd0:	4b31      	ldr	r3, [pc, #196]	; (8017c98 <_ZL12MX_TIM3_Initv+0x118>)
 8017bd2:	2200      	movs	r2, #0
 8017bd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8017bd6:	4830      	ldr	r0, [pc, #192]	; (8017c98 <_ZL12MX_TIM3_Initv+0x118>)
 8017bd8:	f7f1 f93a 	bl	8008e50 <HAL_TIM_Base_Init>
 8017bdc:	4603      	mov	r3, r0
 8017bde:	2b00      	cmp	r3, #0
 8017be0:	bf14      	ite	ne
 8017be2:	2301      	movne	r3, #1
 8017be4:	2300      	moveq	r3, #0
 8017be6:	b2db      	uxtb	r3, r3
 8017be8:	2b00      	cmp	r3, #0
 8017bea:	d001      	beq.n	8017bf0 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 8017bec:	f000 fbf4 	bl	80183d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017bf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017bf4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8017bf6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017bfa:	4619      	mov	r1, r3
 8017bfc:	4826      	ldr	r0, [pc, #152]	; (8017c98 <_ZL12MX_TIM3_Initv+0x118>)
 8017bfe:	f7f1 fc09 	bl	8009414 <HAL_TIM_ConfigClockSource>
 8017c02:	4603      	mov	r3, r0
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	bf14      	ite	ne
 8017c08:	2301      	movne	r3, #1
 8017c0a:	2300      	moveq	r3, #0
 8017c0c:	b2db      	uxtb	r3, r3
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	d001      	beq.n	8017c16 <_ZL12MX_TIM3_Initv+0x96>
  {
    Error_Handler();
 8017c12:	f000 fbe1 	bl	80183d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8017c16:	4820      	ldr	r0, [pc, #128]	; (8017c98 <_ZL12MX_TIM3_Initv+0x118>)
 8017c18:	f7f1 f99a 	bl	8008f50 <HAL_TIM_PWM_Init>
 8017c1c:	4603      	mov	r3, r0
 8017c1e:	2b00      	cmp	r3, #0
 8017c20:	bf14      	ite	ne
 8017c22:	2301      	movne	r3, #1
 8017c24:	2300      	moveq	r3, #0
 8017c26:	b2db      	uxtb	r3, r3
 8017c28:	2b00      	cmp	r3, #0
 8017c2a:	d001      	beq.n	8017c30 <_ZL12MX_TIM3_Initv+0xb0>
  {
    Error_Handler();
 8017c2c:	f000 fbd4 	bl	80183d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017c30:	2300      	movs	r3, #0
 8017c32:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017c34:	2300      	movs	r3, #0
 8017c36:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8017c38:	f107 031c 	add.w	r3, r7, #28
 8017c3c:	4619      	mov	r1, r3
 8017c3e:	4816      	ldr	r0, [pc, #88]	; (8017c98 <_ZL12MX_TIM3_Initv+0x118>)
 8017c40:	f7f2 f862 	bl	8009d08 <HAL_TIMEx_MasterConfigSynchronization>
 8017c44:	4603      	mov	r3, r0
 8017c46:	2b00      	cmp	r3, #0
 8017c48:	bf14      	ite	ne
 8017c4a:	2301      	movne	r3, #1
 8017c4c:	2300      	moveq	r3, #0
 8017c4e:	b2db      	uxtb	r3, r3
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	d001      	beq.n	8017c58 <_ZL12MX_TIM3_Initv+0xd8>
  {
    Error_Handler();
 8017c54:	f000 fbc0 	bl	80183d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8017c58:	2360      	movs	r3, #96	; 0x60
 8017c5a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8017c5c:	2300      	movs	r3, #0
 8017c5e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8017c60:	2300      	movs	r3, #0
 8017c62:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8017c64:	2300      	movs	r3, #0
 8017c66:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8017c68:	463b      	mov	r3, r7
 8017c6a:	2200      	movs	r2, #0
 8017c6c:	4619      	mov	r1, r3
 8017c6e:	480a      	ldr	r0, [pc, #40]	; (8017c98 <_ZL12MX_TIM3_Initv+0x118>)
 8017c70:	f7f1 fab8 	bl	80091e4 <HAL_TIM_PWM_ConfigChannel>
 8017c74:	4603      	mov	r3, r0
 8017c76:	2b00      	cmp	r3, #0
 8017c78:	bf14      	ite	ne
 8017c7a:	2301      	movne	r3, #1
 8017c7c:	2300      	moveq	r3, #0
 8017c7e:	b2db      	uxtb	r3, r3
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d001      	beq.n	8017c88 <_ZL12MX_TIM3_Initv+0x108>
  {
    Error_Handler();
 8017c84:	f000 fba8 	bl	80183d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8017c88:	4803      	ldr	r0, [pc, #12]	; (8017c98 <_ZL12MX_TIM3_Initv+0x118>)
 8017c8a:	f001 fa8f 	bl	80191ac <HAL_TIM_MspPostInit>

}
 8017c8e:	bf00      	nop
 8017c90:	3738      	adds	r7, #56	; 0x38
 8017c92:	46bd      	mov	sp, r7
 8017c94:	bd80      	pop	{r7, pc}
 8017c96:	bf00      	nop
 8017c98:	20009804 	.word	0x20009804
 8017c9c:	40000400 	.word	0x40000400

08017ca0 <_ZL12MX_TIM5_Initv>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8017ca0:	b580      	push	{r7, lr}
 8017ca2:	b08e      	sub	sp, #56	; 0x38
 8017ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017ca6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017caa:	2200      	movs	r2, #0
 8017cac:	601a      	str	r2, [r3, #0]
 8017cae:	605a      	str	r2, [r3, #4]
 8017cb0:	609a      	str	r2, [r3, #8]
 8017cb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017cb4:	f107 031c 	add.w	r3, r7, #28
 8017cb8:	2200      	movs	r2, #0
 8017cba:	601a      	str	r2, [r3, #0]
 8017cbc:	605a      	str	r2, [r3, #4]
 8017cbe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8017cc0:	463b      	mov	r3, r7
 8017cc2:	2200      	movs	r2, #0
 8017cc4:	601a      	str	r2, [r3, #0]
 8017cc6:	605a      	str	r2, [r3, #4]
 8017cc8:	609a      	str	r2, [r3, #8]
 8017cca:	60da      	str	r2, [r3, #12]
 8017ccc:	611a      	str	r2, [r3, #16]
 8017cce:	615a      	str	r2, [r3, #20]
 8017cd0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8017cd2:	4b39      	ldr	r3, [pc, #228]	; (8017db8 <_ZL12MX_TIM5_Initv+0x118>)
 8017cd4:	4a39      	ldr	r2, [pc, #228]	; (8017dbc <_ZL12MX_TIM5_Initv+0x11c>)
 8017cd6:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8017cd8:	4b37      	ldr	r3, [pc, #220]	; (8017db8 <_ZL12MX_TIM5_Initv+0x118>)
 8017cda:	2200      	movs	r2, #0
 8017cdc:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017cde:	4b36      	ldr	r3, [pc, #216]	; (8017db8 <_ZL12MX_TIM5_Initv+0x118>)
 8017ce0:	2200      	movs	r2, #0
 8017ce2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0;
 8017ce4:	4b34      	ldr	r3, [pc, #208]	; (8017db8 <_ZL12MX_TIM5_Initv+0x118>)
 8017ce6:	2200      	movs	r2, #0
 8017ce8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017cea:	4b33      	ldr	r3, [pc, #204]	; (8017db8 <_ZL12MX_TIM5_Initv+0x118>)
 8017cec:	2200      	movs	r2, #0
 8017cee:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017cf0:	4b31      	ldr	r3, [pc, #196]	; (8017db8 <_ZL12MX_TIM5_Initv+0x118>)
 8017cf2:	2200      	movs	r2, #0
 8017cf4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8017cf6:	4830      	ldr	r0, [pc, #192]	; (8017db8 <_ZL12MX_TIM5_Initv+0x118>)
 8017cf8:	f7f1 f8aa 	bl	8008e50 <HAL_TIM_Base_Init>
 8017cfc:	4603      	mov	r3, r0
 8017cfe:	2b00      	cmp	r3, #0
 8017d00:	bf14      	ite	ne
 8017d02:	2301      	movne	r3, #1
 8017d04:	2300      	moveq	r3, #0
 8017d06:	b2db      	uxtb	r3, r3
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d001      	beq.n	8017d10 <_ZL12MX_TIM5_Initv+0x70>
  {
    Error_Handler();
 8017d0c:	f000 fb64 	bl	80183d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017d10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017d14:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8017d16:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8017d1a:	4619      	mov	r1, r3
 8017d1c:	4826      	ldr	r0, [pc, #152]	; (8017db8 <_ZL12MX_TIM5_Initv+0x118>)
 8017d1e:	f7f1 fb79 	bl	8009414 <HAL_TIM_ConfigClockSource>
 8017d22:	4603      	mov	r3, r0
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	bf14      	ite	ne
 8017d28:	2301      	movne	r3, #1
 8017d2a:	2300      	moveq	r3, #0
 8017d2c:	b2db      	uxtb	r3, r3
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d001      	beq.n	8017d36 <_ZL12MX_TIM5_Initv+0x96>
  {
    Error_Handler();
 8017d32:	f000 fb51 	bl	80183d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8017d36:	4820      	ldr	r0, [pc, #128]	; (8017db8 <_ZL12MX_TIM5_Initv+0x118>)
 8017d38:	f7f1 f90a 	bl	8008f50 <HAL_TIM_PWM_Init>
 8017d3c:	4603      	mov	r3, r0
 8017d3e:	2b00      	cmp	r3, #0
 8017d40:	bf14      	ite	ne
 8017d42:	2301      	movne	r3, #1
 8017d44:	2300      	moveq	r3, #0
 8017d46:	b2db      	uxtb	r3, r3
 8017d48:	2b00      	cmp	r3, #0
 8017d4a:	d001      	beq.n	8017d50 <_ZL12MX_TIM5_Initv+0xb0>
  {
    Error_Handler();
 8017d4c:	f000 fb44 	bl	80183d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017d50:	2300      	movs	r3, #0
 8017d52:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017d54:	2300      	movs	r3, #0
 8017d56:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8017d58:	f107 031c 	add.w	r3, r7, #28
 8017d5c:	4619      	mov	r1, r3
 8017d5e:	4816      	ldr	r0, [pc, #88]	; (8017db8 <_ZL12MX_TIM5_Initv+0x118>)
 8017d60:	f7f1 ffd2 	bl	8009d08 <HAL_TIMEx_MasterConfigSynchronization>
 8017d64:	4603      	mov	r3, r0
 8017d66:	2b00      	cmp	r3, #0
 8017d68:	bf14      	ite	ne
 8017d6a:	2301      	movne	r3, #1
 8017d6c:	2300      	moveq	r3, #0
 8017d6e:	b2db      	uxtb	r3, r3
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d001      	beq.n	8017d78 <_ZL12MX_TIM5_Initv+0xd8>
  {
    Error_Handler();
 8017d74:	f000 fb30 	bl	80183d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8017d78:	2360      	movs	r3, #96	; 0x60
 8017d7a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8017d7c:	2300      	movs	r3, #0
 8017d7e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8017d80:	2300      	movs	r3, #0
 8017d82:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8017d84:	2300      	movs	r3, #0
 8017d86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8017d88:	463b      	mov	r3, r7
 8017d8a:	220c      	movs	r2, #12
 8017d8c:	4619      	mov	r1, r3
 8017d8e:	480a      	ldr	r0, [pc, #40]	; (8017db8 <_ZL12MX_TIM5_Initv+0x118>)
 8017d90:	f7f1 fa28 	bl	80091e4 <HAL_TIM_PWM_ConfigChannel>
 8017d94:	4603      	mov	r3, r0
 8017d96:	2b00      	cmp	r3, #0
 8017d98:	bf14      	ite	ne
 8017d9a:	2301      	movne	r3, #1
 8017d9c:	2300      	moveq	r3, #0
 8017d9e:	b2db      	uxtb	r3, r3
 8017da0:	2b00      	cmp	r3, #0
 8017da2:	d001      	beq.n	8017da8 <_ZL12MX_TIM5_Initv+0x108>
  {
    Error_Handler();
 8017da4:	f000 fb18 	bl	80183d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8017da8:	4803      	ldr	r0, [pc, #12]	; (8017db8 <_ZL12MX_TIM5_Initv+0x118>)
 8017daa:	f001 f9ff 	bl	80191ac <HAL_TIM_MspPostInit>

}
 8017dae:	bf00      	nop
 8017db0:	3738      	adds	r7, #56	; 0x38
 8017db2:	46bd      	mov	sp, r7
 8017db4:	bd80      	pop	{r7, pc}
 8017db6:	bf00      	nop
 8017db8:	20009844 	.word	0x20009844
 8017dbc:	40000c00 	.word	0x40000c00

08017dc0 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8017dc0:	b580      	push	{r7, lr}
 8017dc2:	b088      	sub	sp, #32
 8017dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8017dc6:	f107 0310 	add.w	r3, r7, #16
 8017dca:	2200      	movs	r2, #0
 8017dcc:	601a      	str	r2, [r3, #0]
 8017dce:	605a      	str	r2, [r3, #4]
 8017dd0:	609a      	str	r2, [r3, #8]
 8017dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8017dd4:	1d3b      	adds	r3, r7, #4
 8017dd6:	2200      	movs	r2, #0
 8017dd8:	601a      	str	r2, [r3, #0]
 8017dda:	605a      	str	r2, [r3, #4]
 8017ddc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8017dde:	4b27      	ldr	r3, [pc, #156]	; (8017e7c <_ZL12MX_TIM8_Initv+0xbc>)
 8017de0:	4a27      	ldr	r2, [pc, #156]	; (8017e80 <_ZL12MX_TIM8_Initv+0xc0>)
 8017de2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8017de4:	4b25      	ldr	r3, [pc, #148]	; (8017e7c <_ZL12MX_TIM8_Initv+0xbc>)
 8017de6:	2200      	movs	r2, #0
 8017de8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017dea:	4b24      	ldr	r3, [pc, #144]	; (8017e7c <_ZL12MX_TIM8_Initv+0xbc>)
 8017dec:	2200      	movs	r2, #0
 8017dee:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 0;
 8017df0:	4b22      	ldr	r3, [pc, #136]	; (8017e7c <_ZL12MX_TIM8_Initv+0xbc>)
 8017df2:	2200      	movs	r2, #0
 8017df4:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017df6:	4b21      	ldr	r3, [pc, #132]	; (8017e7c <_ZL12MX_TIM8_Initv+0xbc>)
 8017df8:	2200      	movs	r2, #0
 8017dfa:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8017dfc:	4b1f      	ldr	r3, [pc, #124]	; (8017e7c <_ZL12MX_TIM8_Initv+0xbc>)
 8017dfe:	2200      	movs	r2, #0
 8017e00:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017e02:	4b1e      	ldr	r3, [pc, #120]	; (8017e7c <_ZL12MX_TIM8_Initv+0xbc>)
 8017e04:	2200      	movs	r2, #0
 8017e06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8017e08:	481c      	ldr	r0, [pc, #112]	; (8017e7c <_ZL12MX_TIM8_Initv+0xbc>)
 8017e0a:	f7f1 f821 	bl	8008e50 <HAL_TIM_Base_Init>
 8017e0e:	4603      	mov	r3, r0
 8017e10:	2b00      	cmp	r3, #0
 8017e12:	bf14      	ite	ne
 8017e14:	2301      	movne	r3, #1
 8017e16:	2300      	moveq	r3, #0
 8017e18:	b2db      	uxtb	r3, r3
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d001      	beq.n	8017e22 <_ZL12MX_TIM8_Initv+0x62>
  {
    Error_Handler();
 8017e1e:	f000 fadb 	bl	80183d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8017e22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8017e26:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8017e28:	f107 0310 	add.w	r3, r7, #16
 8017e2c:	4619      	mov	r1, r3
 8017e2e:	4813      	ldr	r0, [pc, #76]	; (8017e7c <_ZL12MX_TIM8_Initv+0xbc>)
 8017e30:	f7f1 faf0 	bl	8009414 <HAL_TIM_ConfigClockSource>
 8017e34:	4603      	mov	r3, r0
 8017e36:	2b00      	cmp	r3, #0
 8017e38:	bf14      	ite	ne
 8017e3a:	2301      	movne	r3, #1
 8017e3c:	2300      	moveq	r3, #0
 8017e3e:	b2db      	uxtb	r3, r3
 8017e40:	2b00      	cmp	r3, #0
 8017e42:	d001      	beq.n	8017e48 <_ZL12MX_TIM8_Initv+0x88>
  {
    Error_Handler();
 8017e44:	f000 fac8 	bl	80183d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8017e48:	2300      	movs	r3, #0
 8017e4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8017e4c:	2300      	movs	r3, #0
 8017e4e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8017e50:	2300      	movs	r3, #0
 8017e52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8017e54:	1d3b      	adds	r3, r7, #4
 8017e56:	4619      	mov	r1, r3
 8017e58:	4808      	ldr	r0, [pc, #32]	; (8017e7c <_ZL12MX_TIM8_Initv+0xbc>)
 8017e5a:	f7f1 ff55 	bl	8009d08 <HAL_TIMEx_MasterConfigSynchronization>
 8017e5e:	4603      	mov	r3, r0
 8017e60:	2b00      	cmp	r3, #0
 8017e62:	bf14      	ite	ne
 8017e64:	2301      	movne	r3, #1
 8017e66:	2300      	moveq	r3, #0
 8017e68:	b2db      	uxtb	r3, r3
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d001      	beq.n	8017e72 <_ZL12MX_TIM8_Initv+0xb2>
  {
    Error_Handler();
 8017e6e:	f000 fab3 	bl	80183d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8017e72:	bf00      	nop
 8017e74:	3720      	adds	r7, #32
 8017e76:	46bd      	mov	sp, r7
 8017e78:	bd80      	pop	{r7, pc}
 8017e7a:	bf00      	nop
 8017e7c:	20009884 	.word	0x20009884
 8017e80:	40010400 	.word	0x40010400

08017e84 <_ZL13MX_TIM12_Initv>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8017e84:	b580      	push	{r7, lr}
 8017e86:	b088      	sub	sp, #32
 8017e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8017e8a:	1d3b      	adds	r3, r7, #4
 8017e8c:	2200      	movs	r2, #0
 8017e8e:	601a      	str	r2, [r3, #0]
 8017e90:	605a      	str	r2, [r3, #4]
 8017e92:	609a      	str	r2, [r3, #8]
 8017e94:	60da      	str	r2, [r3, #12]
 8017e96:	611a      	str	r2, [r3, #16]
 8017e98:	615a      	str	r2, [r3, #20]
 8017e9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8017e9c:	4b1e      	ldr	r3, [pc, #120]	; (8017f18 <_ZL13MX_TIM12_Initv+0x94>)
 8017e9e:	4a1f      	ldr	r2, [pc, #124]	; (8017f1c <_ZL13MX_TIM12_Initv+0x98>)
 8017ea0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8017ea2:	4b1d      	ldr	r3, [pc, #116]	; (8017f18 <_ZL13MX_TIM12_Initv+0x94>)
 8017ea4:	2200      	movs	r2, #0
 8017ea6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8017ea8:	4b1b      	ldr	r3, [pc, #108]	; (8017f18 <_ZL13MX_TIM12_Initv+0x94>)
 8017eaa:	2200      	movs	r2, #0
 8017eac:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 0;
 8017eae:	4b1a      	ldr	r3, [pc, #104]	; (8017f18 <_ZL13MX_TIM12_Initv+0x94>)
 8017eb0:	2200      	movs	r2, #0
 8017eb2:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8017eb4:	4b18      	ldr	r3, [pc, #96]	; (8017f18 <_ZL13MX_TIM12_Initv+0x94>)
 8017eb6:	2200      	movs	r2, #0
 8017eb8:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8017eba:	4b17      	ldr	r3, [pc, #92]	; (8017f18 <_ZL13MX_TIM12_Initv+0x94>)
 8017ebc:	2200      	movs	r2, #0
 8017ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8017ec0:	4815      	ldr	r0, [pc, #84]	; (8017f18 <_ZL13MX_TIM12_Initv+0x94>)
 8017ec2:	f7f1 f845 	bl	8008f50 <HAL_TIM_PWM_Init>
 8017ec6:	4603      	mov	r3, r0
 8017ec8:	2b00      	cmp	r3, #0
 8017eca:	bf14      	ite	ne
 8017ecc:	2301      	movne	r3, #1
 8017ece:	2300      	moveq	r3, #0
 8017ed0:	b2db      	uxtb	r3, r3
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d001      	beq.n	8017eda <_ZL13MX_TIM12_Initv+0x56>
  {
    Error_Handler();
 8017ed6:	f000 fa7f 	bl	80183d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8017eda:	2360      	movs	r3, #96	; 0x60
 8017edc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8017ede:	2300      	movs	r3, #0
 8017ee0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8017ee2:	2300      	movs	r3, #0
 8017ee4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8017ee6:	2300      	movs	r3, #0
 8017ee8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8017eea:	1d3b      	adds	r3, r7, #4
 8017eec:	2200      	movs	r2, #0
 8017eee:	4619      	mov	r1, r3
 8017ef0:	4809      	ldr	r0, [pc, #36]	; (8017f18 <_ZL13MX_TIM12_Initv+0x94>)
 8017ef2:	f7f1 f977 	bl	80091e4 <HAL_TIM_PWM_ConfigChannel>
 8017ef6:	4603      	mov	r3, r0
 8017ef8:	2b00      	cmp	r3, #0
 8017efa:	bf14      	ite	ne
 8017efc:	2301      	movne	r3, #1
 8017efe:	2300      	moveq	r3, #0
 8017f00:	b2db      	uxtb	r3, r3
 8017f02:	2b00      	cmp	r3, #0
 8017f04:	d001      	beq.n	8017f0a <_ZL13MX_TIM12_Initv+0x86>
  {
    Error_Handler();
 8017f06:	f000 fa67 	bl	80183d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8017f0a:	4803      	ldr	r0, [pc, #12]	; (8017f18 <_ZL13MX_TIM12_Initv+0x94>)
 8017f0c:	f001 f94e 	bl	80191ac <HAL_TIM_MspPostInit>

}
 8017f10:	bf00      	nop
 8017f12:	3720      	adds	r7, #32
 8017f14:	46bd      	mov	sp, r7
 8017f16:	bd80      	pop	{r7, pc}
 8017f18:	200098c4 	.word	0x200098c4
 8017f1c:	40001800 	.word	0x40001800

08017f20 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8017f20:	b580      	push	{r7, lr}
 8017f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8017f24:	4b16      	ldr	r3, [pc, #88]	; (8017f80 <_ZL19MX_USART1_UART_Initv+0x60>)
 8017f26:	4a17      	ldr	r2, [pc, #92]	; (8017f84 <_ZL19MX_USART1_UART_Initv+0x64>)
 8017f28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8017f2a:	4b15      	ldr	r3, [pc, #84]	; (8017f80 <_ZL19MX_USART1_UART_Initv+0x60>)
 8017f2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8017f30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8017f32:	4b13      	ldr	r3, [pc, #76]	; (8017f80 <_ZL19MX_USART1_UART_Initv+0x60>)
 8017f34:	2200      	movs	r2, #0
 8017f36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8017f38:	4b11      	ldr	r3, [pc, #68]	; (8017f80 <_ZL19MX_USART1_UART_Initv+0x60>)
 8017f3a:	2200      	movs	r2, #0
 8017f3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8017f3e:	4b10      	ldr	r3, [pc, #64]	; (8017f80 <_ZL19MX_USART1_UART_Initv+0x60>)
 8017f40:	2200      	movs	r2, #0
 8017f42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8017f44:	4b0e      	ldr	r3, [pc, #56]	; (8017f80 <_ZL19MX_USART1_UART_Initv+0x60>)
 8017f46:	220c      	movs	r2, #12
 8017f48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8017f4a:	4b0d      	ldr	r3, [pc, #52]	; (8017f80 <_ZL19MX_USART1_UART_Initv+0x60>)
 8017f4c:	2200      	movs	r2, #0
 8017f4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8017f50:	4b0b      	ldr	r3, [pc, #44]	; (8017f80 <_ZL19MX_USART1_UART_Initv+0x60>)
 8017f52:	2200      	movs	r2, #0
 8017f54:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8017f56:	4b0a      	ldr	r3, [pc, #40]	; (8017f80 <_ZL19MX_USART1_UART_Initv+0x60>)
 8017f58:	2200      	movs	r2, #0
 8017f5a:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8017f5c:	4b08      	ldr	r3, [pc, #32]	; (8017f80 <_ZL19MX_USART1_UART_Initv+0x60>)
 8017f5e:	2200      	movs	r2, #0
 8017f60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8017f62:	4807      	ldr	r0, [pc, #28]	; (8017f80 <_ZL19MX_USART1_UART_Initv+0x60>)
 8017f64:	f7f1 ffc8 	bl	8009ef8 <HAL_UART_Init>
 8017f68:	4603      	mov	r3, r0
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	bf14      	ite	ne
 8017f6e:	2301      	movne	r3, #1
 8017f70:	2300      	moveq	r3, #0
 8017f72:	b2db      	uxtb	r3, r3
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	d001      	beq.n	8017f7c <_ZL19MX_USART1_UART_Initv+0x5c>
  {
    Error_Handler();
 8017f78:	f000 fa2e 	bl	80183d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8017f7c:	bf00      	nop
 8017f7e:	bd80      	pop	{r7, pc}
 8017f80:	20009904 	.word	0x20009904
 8017f84:	40011000 	.word	0x40011000

08017f88 <_ZL19MX_USART6_UART_Initv>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8017f88:	b580      	push	{r7, lr}
 8017f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8017f8c:	4b16      	ldr	r3, [pc, #88]	; (8017fe8 <_ZL19MX_USART6_UART_Initv+0x60>)
 8017f8e:	4a17      	ldr	r2, [pc, #92]	; (8017fec <_ZL19MX_USART6_UART_Initv+0x64>)
 8017f90:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8017f92:	4b15      	ldr	r3, [pc, #84]	; (8017fe8 <_ZL19MX_USART6_UART_Initv+0x60>)
 8017f94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8017f98:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8017f9a:	4b13      	ldr	r3, [pc, #76]	; (8017fe8 <_ZL19MX_USART6_UART_Initv+0x60>)
 8017f9c:	2200      	movs	r2, #0
 8017f9e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8017fa0:	4b11      	ldr	r3, [pc, #68]	; (8017fe8 <_ZL19MX_USART6_UART_Initv+0x60>)
 8017fa2:	2200      	movs	r2, #0
 8017fa4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8017fa6:	4b10      	ldr	r3, [pc, #64]	; (8017fe8 <_ZL19MX_USART6_UART_Initv+0x60>)
 8017fa8:	2200      	movs	r2, #0
 8017faa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8017fac:	4b0e      	ldr	r3, [pc, #56]	; (8017fe8 <_ZL19MX_USART6_UART_Initv+0x60>)
 8017fae:	220c      	movs	r2, #12
 8017fb0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8017fb2:	4b0d      	ldr	r3, [pc, #52]	; (8017fe8 <_ZL19MX_USART6_UART_Initv+0x60>)
 8017fb4:	2200      	movs	r2, #0
 8017fb6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8017fb8:	4b0b      	ldr	r3, [pc, #44]	; (8017fe8 <_ZL19MX_USART6_UART_Initv+0x60>)
 8017fba:	2200      	movs	r2, #0
 8017fbc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8017fbe:	4b0a      	ldr	r3, [pc, #40]	; (8017fe8 <_ZL19MX_USART6_UART_Initv+0x60>)
 8017fc0:	2200      	movs	r2, #0
 8017fc2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8017fc4:	4b08      	ldr	r3, [pc, #32]	; (8017fe8 <_ZL19MX_USART6_UART_Initv+0x60>)
 8017fc6:	2200      	movs	r2, #0
 8017fc8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8017fca:	4807      	ldr	r0, [pc, #28]	; (8017fe8 <_ZL19MX_USART6_UART_Initv+0x60>)
 8017fcc:	f7f1 ff94 	bl	8009ef8 <HAL_UART_Init>
 8017fd0:	4603      	mov	r3, r0
 8017fd2:	2b00      	cmp	r3, #0
 8017fd4:	bf14      	ite	ne
 8017fd6:	2301      	movne	r3, #1
 8017fd8:	2300      	moveq	r3, #0
 8017fda:	b2db      	uxtb	r3, r3
 8017fdc:	2b00      	cmp	r3, #0
 8017fde:	d001      	beq.n	8017fe4 <_ZL19MX_USART6_UART_Initv+0x5c>
  {
    Error_Handler();
 8017fe0:	f000 f9fa 	bl	80183d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8017fe4:	bf00      	nop
 8017fe6:	bd80      	pop	{r7, pc}
 8017fe8:	20009984 	.word	0x20009984
 8017fec:	40011400 	.word	0x40011400

08017ff0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8017ff0:	b580      	push	{r7, lr}
 8017ff2:	b090      	sub	sp, #64	; 0x40
 8017ff4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8017ff6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8017ffa:	2200      	movs	r2, #0
 8017ffc:	601a      	str	r2, [r3, #0]
 8017ffe:	605a      	str	r2, [r3, #4]
 8018000:	609a      	str	r2, [r3, #8]
 8018002:	60da      	str	r2, [r3, #12]
 8018004:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8018006:	4baf      	ldr	r3, [pc, #700]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 8018008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801800a:	4aae      	ldr	r2, [pc, #696]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 801800c:	f043 0310 	orr.w	r3, r3, #16
 8018010:	6313      	str	r3, [r2, #48]	; 0x30
 8018012:	4bac      	ldr	r3, [pc, #688]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 8018014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018016:	f003 0310 	and.w	r3, r3, #16
 801801a:	62bb      	str	r3, [r7, #40]	; 0x28
 801801c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOG_CLK_ENABLE();
 801801e:	4ba9      	ldr	r3, [pc, #676]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 8018020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018022:	4aa8      	ldr	r2, [pc, #672]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 8018024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018028:	6313      	str	r3, [r2, #48]	; 0x30
 801802a:	4ba6      	ldr	r3, [pc, #664]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 801802c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801802e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018032:	627b      	str	r3, [r7, #36]	; 0x24
 8018034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8018036:	4ba3      	ldr	r3, [pc, #652]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 8018038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801803a:	4aa2      	ldr	r2, [pc, #648]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 801803c:	f043 0302 	orr.w	r3, r3, #2
 8018040:	6313      	str	r3, [r2, #48]	; 0x30
 8018042:	4ba0      	ldr	r3, [pc, #640]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 8018044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018046:	f003 0302 	and.w	r3, r3, #2
 801804a:	623b      	str	r3, [r7, #32]
 801804c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 801804e:	4b9d      	ldr	r3, [pc, #628]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 8018050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018052:	4a9c      	ldr	r2, [pc, #624]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 8018054:	f043 0308 	orr.w	r3, r3, #8
 8018058:	6313      	str	r3, [r2, #48]	; 0x30
 801805a:	4b9a      	ldr	r3, [pc, #616]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 801805c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801805e:	f003 0308 	and.w	r3, r3, #8
 8018062:	61fb      	str	r3, [r7, #28]
 8018064:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8018066:	4b97      	ldr	r3, [pc, #604]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 8018068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801806a:	4a96      	ldr	r2, [pc, #600]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 801806c:	f043 0304 	orr.w	r3, r3, #4
 8018070:	6313      	str	r3, [r2, #48]	; 0x30
 8018072:	4b94      	ldr	r3, [pc, #592]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 8018074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018076:	f003 0304 	and.w	r3, r3, #4
 801807a:	61bb      	str	r3, [r7, #24]
 801807c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 801807e:	4b91      	ldr	r3, [pc, #580]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 8018080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018082:	4a90      	ldr	r2, [pc, #576]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 8018084:	f043 0301 	orr.w	r3, r3, #1
 8018088:	6313      	str	r3, [r2, #48]	; 0x30
 801808a:	4b8e      	ldr	r3, [pc, #568]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 801808c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801808e:	f003 0301 	and.w	r3, r3, #1
 8018092:	617b      	str	r3, [r7, #20]
 8018094:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8018096:	4b8b      	ldr	r3, [pc, #556]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 8018098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801809a:	4a8a      	ldr	r2, [pc, #552]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 801809c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80180a0:	6313      	str	r3, [r2, #48]	; 0x30
 80180a2:	4b88      	ldr	r3, [pc, #544]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 80180a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80180aa:	613b      	str	r3, [r7, #16]
 80180ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80180ae:	4b85      	ldr	r3, [pc, #532]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 80180b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180b2:	4a84      	ldr	r2, [pc, #528]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 80180b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80180b8:	6313      	str	r3, [r2, #48]	; 0x30
 80180ba:	4b82      	ldr	r3, [pc, #520]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 80180bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80180c2:	60fb      	str	r3, [r7, #12]
 80180c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80180c6:	4b7f      	ldr	r3, [pc, #508]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 80180c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180ca:	4a7e      	ldr	r2, [pc, #504]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 80180cc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80180d0:	6313      	str	r3, [r2, #48]	; 0x30
 80180d2:	4b7c      	ldr	r3, [pc, #496]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 80180d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80180da:	60bb      	str	r3, [r7, #8]
 80180dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80180de:	4b79      	ldr	r3, [pc, #484]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 80180e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180e2:	4a78      	ldr	r2, [pc, #480]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 80180e4:	f043 0320 	orr.w	r3, r3, #32
 80180e8:	6313      	str	r3, [r2, #48]	; 0x30
 80180ea:	4b76      	ldr	r3, [pc, #472]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 80180ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180ee:	f003 0320 	and.w	r3, r3, #32
 80180f2:	607b      	str	r3, [r7, #4]
 80180f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80180f6:	4b73      	ldr	r3, [pc, #460]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 80180f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80180fa:	4a72      	ldr	r2, [pc, #456]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 80180fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018100:	6313      	str	r3, [r2, #48]	; 0x30
 8018102:	4b70      	ldr	r3, [pc, #448]	; (80182c4 <_ZL12MX_GPIO_Initv+0x2d4>)
 8018104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018106:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801810a:	603b      	str	r3, [r7, #0]
 801810c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 801810e:	2201      	movs	r2, #1
 8018110:	2120      	movs	r1, #32
 8018112:	486d      	ldr	r0, [pc, #436]	; (80182c8 <_ZL12MX_GPIO_Initv+0x2d8>)
 8018114:	f7ea fde8 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin|ARDUINO_D8_Pin, GPIO_PIN_RESET);
 8018118:	2200      	movs	r2, #0
 801811a:	210c      	movs	r1, #12
 801811c:	486b      	ldr	r0, [pc, #428]	; (80182cc <_ZL12MX_GPIO_Initv+0x2dc>)
 801811e:	f7ea fde3 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8018122:	2201      	movs	r2, #1
 8018124:	2108      	movs	r1, #8
 8018126:	486a      	ldr	r0, [pc, #424]	; (80182d0 <_ZL12MX_GPIO_Initv+0x2e0>)
 8018128:	f7ea fdde 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 801812c:	2201      	movs	r2, #1
 801812e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8018132:	4866      	ldr	r0, [pc, #408]	; (80182cc <_ZL12MX_GPIO_Initv+0x2dc>)
 8018134:	f7ea fdd8 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 8018138:	2200      	movs	r2, #0
 801813a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 801813e:	4865      	ldr	r0, [pc, #404]	; (80182d4 <_ZL12MX_GPIO_Initv+0x2e4>)
 8018140:	f7ea fdd2 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin, GPIO_PIN_RESET);
 8018144:	2200      	movs	r2, #0
 8018146:	21c8      	movs	r1, #200	; 0xc8
 8018148:	4863      	ldr	r0, [pc, #396]	; (80182d8 <_ZL12MX_GPIO_Initv+0x2e8>)
 801814a:	f7ea fdcd 	bl	8002ce8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 801814e:	2308      	movs	r3, #8
 8018150:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018152:	2300      	movs	r3, #0
 8018154:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018156:	2300      	movs	r3, #0
 8018158:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 801815a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801815e:	4619      	mov	r1, r3
 8018160:	485e      	ldr	r0, [pc, #376]	; (80182dc <_ZL12MX_GPIO_Initv+0x2ec>)
 8018162:	f7ea faf5 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin 
                           ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin 
 8018166:	f643 4323 	movw	r3, #15395	; 0x3c23
 801816a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D2_Pin|ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801816c:	2302      	movs	r3, #2
 801816e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018170:	2300      	movs	r3, #0
 8018172:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018174:	2303      	movs	r3, #3
 8018176:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8018178:	230a      	movs	r3, #10
 801817a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801817c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018180:	4619      	mov	r1, r3
 8018182:	4857      	ldr	r0, [pc, #348]	; (80182e0 <_ZL12MX_GPIO_Initv+0x2f0>)
 8018184:	f7ea fae4 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
  GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 8018188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801818c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801818e:	2302      	movs	r3, #2
 8018190:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018192:	2300      	movs	r3, #0
 8018194:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018196:	2300      	movs	r3, #0
 8018198:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 801819a:	2301      	movs	r3, #1
 801819c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 801819e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80181a2:	4619      	mov	r1, r3
 80181a4:	484f      	ldr	r0, [pc, #316]	; (80182e4 <_ZL12MX_GPIO_Initv+0x2f4>)
 80181a6:	f7ea fad3 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80181aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80181ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80181b0:	2300      	movs	r3, #0
 80181b2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80181b4:	2300      	movs	r3, #0
 80181b6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80181b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80181bc:	4619      	mov	r1, r3
 80181be:	484a      	ldr	r0, [pc, #296]	; (80182e8 <_ZL12MX_GPIO_Initv+0x2f8>)
 80181c0:	f7ea fac6 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 80181c4:	2340      	movs	r3, #64	; 0x40
 80181c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80181c8:	4b48      	ldr	r3, [pc, #288]	; (80182ec <_ZL12MX_GPIO_Initv+0x2fc>)
 80181ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80181cc:	2300      	movs	r3, #0
 80181ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80181d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80181d4:	4619      	mov	r1, r3
 80181d6:	483c      	ldr	r0, [pc, #240]	; (80182c8 <_ZL12MX_GPIO_Initv+0x2d8>)
 80181d8:	f7ea faba 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80181dc:	2320      	movs	r3, #32
 80181de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80181e0:	2301      	movs	r3, #1
 80181e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80181e4:	2300      	movs	r3, #0
 80181e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80181e8:	2300      	movs	r3, #0
 80181ea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80181ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80181f0:	4619      	mov	r1, r3
 80181f2:	4835      	ldr	r0, [pc, #212]	; (80182c8 <_ZL12MX_GPIO_Initv+0x2d8>)
 80181f4:	f7ea faac 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D7_Pin|ARDUINO_D8_Pin|LCD_DISP_Pin;
 80181f8:	f241 030c 	movw	r3, #4108	; 0x100c
 80181fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80181fe:	2301      	movs	r3, #1
 8018200:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018202:	2300      	movs	r3, #0
 8018204:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018206:	2300      	movs	r3, #0
 8018208:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801820a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801820e:	4619      	mov	r1, r3
 8018210:	482e      	ldr	r0, [pc, #184]	; (80182cc <_ZL12MX_GPIO_Initv+0x2dc>)
 8018212:	f7ea fa9d 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8018216:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801821a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801821c:	2300      	movs	r3, #0
 801821e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018220:	2300      	movs	r3, #0
 8018222:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8018224:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018228:	4619      	mov	r1, r3
 801822a:	4831      	ldr	r0, [pc, #196]	; (80182f0 <_ZL12MX_GPIO_Initv+0x300>)
 801822c:	f7ea fa90 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8018230:	2308      	movs	r3, #8
 8018232:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8018234:	2301      	movs	r3, #1
 8018236:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018238:	2300      	movs	r3, #0
 801823a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801823c:	2300      	movs	r3, #0
 801823e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8018240:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018244:	4619      	mov	r1, r3
 8018246:	4822      	ldr	r0, [pc, #136]	; (80182d0 <_ZL12MX_GPIO_Initv+0x2e0>)
 8018248:	f7ea fa82 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 801824c:	2310      	movs	r3, #16
 801824e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8018250:	2300      	movs	r3, #0
 8018252:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018254:	2300      	movs	r3, #0
 8018256:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8018258:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801825c:	4619      	mov	r1, r3
 801825e:	481a      	ldr	r0, [pc, #104]	; (80182c8 <_ZL12MX_GPIO_Initv+0x2d8>)
 8018260:	f7ea fa76 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8018264:	f248 0304 	movw	r3, #32772	; 0x8004
 8018268:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801826a:	2300      	movs	r3, #0
 801826c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801826e:	2300      	movs	r3, #0
 8018270:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8018272:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018276:	4619      	mov	r1, r3
 8018278:	4816      	ldr	r0, [pc, #88]	; (80182d4 <_ZL12MX_GPIO_Initv+0x2e4>)
 801827a:	f7ea fa69 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_PWR_EN_Pin */
  GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 801827e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8018282:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8018284:	2301      	movs	r3, #1
 8018286:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018288:	2300      	movs	r3, #0
 801828a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801828c:	2300      	movs	r3, #0
 801828e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8018290:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018294:	4619      	mov	r1, r3
 8018296:	480f      	ldr	r0, [pc, #60]	; (80182d4 <_ZL12MX_GPIO_Initv+0x2e4>)
 8018298:	f7ea fa5a 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 801829c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80182a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80182a2:	4b12      	ldr	r3, [pc, #72]	; (80182ec <_ZL12MX_GPIO_Initv+0x2fc>)
 80182a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80182a6:	2300      	movs	r3, #0
 80182a8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80182aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80182ae:	4619      	mov	r1, r3
 80182b0:	4806      	ldr	r0, [pc, #24]	; (80182cc <_ZL12MX_GPIO_Initv+0x2dc>)
 80182b2:	f7ea fa4d 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 80182b6:	2310      	movs	r3, #16
 80182b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80182ba:	2302      	movs	r3, #2
 80182bc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80182be:	2300      	movs	r3, #0
 80182c0:	e018      	b.n	80182f4 <_ZL12MX_GPIO_Initv+0x304>
 80182c2:	bf00      	nop
 80182c4:	40023800 	.word	0x40023800
 80182c8:	40020c00 	.word	0x40020c00
 80182cc:	40022000 	.word	0x40022000
 80182d0:	40022800 	.word	0x40022800
 80182d4:	40021c00 	.word	0x40021c00
 80182d8:	40021800 	.word	0x40021800
 80182dc:	40021000 	.word	0x40021000
 80182e0:	40020400 	.word	0x40020400
 80182e4:	40020000 	.word	0x40020000
 80182e8:	40022400 	.word	0x40022400
 80182ec:	10120000 	.word	0x10120000
 80182f0:	40020800 	.word	0x40020800
 80182f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80182f6:	2303      	movs	r3, #3
 80182f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80182fa:	230a      	movs	r3, #10
 80182fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 80182fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018302:	4619      	mov	r1, r3
 8018304:	4820      	ldr	r0, [pc, #128]	; (8018388 <_ZL12MX_GPIO_Initv+0x398>)
 8018306:	f7ea fa23 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
  GPIO_InitStruct.Pin = ARDUINO_D4_Pin|ARDUINO_D2_Pin|EXT_RST_Pin;
 801830a:	23c8      	movs	r3, #200	; 0xc8
 801830c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801830e:	2301      	movs	r3, #1
 8018310:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018312:	2300      	movs	r3, #0
 8018314:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018316:	2300      	movs	r3, #0
 8018318:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801831a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801831e:	4619      	mov	r1, r3
 8018320:	481a      	ldr	r0, [pc, #104]	; (801838c <_ZL12MX_GPIO_Initv+0x39c>)
 8018322:	f7ea fa15 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8018326:	2305      	movs	r3, #5
 8018328:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801832a:	2302      	movs	r3, #2
 801832c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801832e:	2300      	movs	r3, #0
 8018330:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018332:	2303      	movs	r3, #3
 8018334:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8018336:	230a      	movs	r3, #10
 8018338:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801833a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801833e:	4619      	mov	r1, r3
 8018340:	4813      	ldr	r0, [pc, #76]	; (8018390 <_ZL12MX_GPIO_Initv+0x3a0>)
 8018342:	f7ea fa05 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_RXER_Pin */
  GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8018346:	2304      	movs	r3, #4
 8018348:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801834a:	2300      	movs	r3, #0
 801834c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801834e:	2300      	movs	r3, #0
 8018350:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8018352:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018356:	4619      	mov	r1, r3
 8018358:	480c      	ldr	r0, [pc, #48]	; (801838c <_ZL12MX_GPIO_Initv+0x39c>)
 801835a:	f7ea f9f9 	bl	8002750 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 801835e:	2328      	movs	r3, #40	; 0x28
 8018360:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018362:	2302      	movs	r3, #2
 8018364:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018366:	2300      	movs	r3, #0
 8018368:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801836a:	2303      	movs	r3, #3
 801836c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 801836e:	230a      	movs	r3, #10
 8018370:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018372:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8018376:	4619      	mov	r1, r3
 8018378:	4806      	ldr	r0, [pc, #24]	; (8018394 <_ZL12MX_GPIO_Initv+0x3a4>)
 801837a:	f7ea f9e9 	bl	8002750 <HAL_GPIO_Init>

}
 801837e:	bf00      	nop
 8018380:	3740      	adds	r7, #64	; 0x40
 8018382:	46bd      	mov	sp, r7
 8018384:	bd80      	pop	{r7, pc}
 8018386:	bf00      	nop
 8018388:	40021c00 	.word	0x40021c00
 801838c:	40021800 	.word	0x40021800
 8018390:	40020800 	.word	0x40020800
 8018394:	40020000 	.word	0x40020000

08018398 <_Z16StartDefaultTaskPKv>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8018398:	b580      	push	{r7, lr}
 801839a:	b082      	sub	sp, #8
 801839c:	af00      	add	r7, sp, #0
 801839e:	6078      	str	r0, [r7, #4]
  /* init code for FATFS */
  MX_FATFS_Init();
 80183a0:	f7fe fed6 	bl	8017150 <MX_FATFS_Init>

  /* init code for USB_HOST */
  MX_USB_HOST_Init();
 80183a4:	f001 fa36 	bl	8019814 <MX_USB_HOST_Init>

/* Graphic application */  
  GRAPHICS_MainTask();
 80183a8:	f7fc feb4 	bl	8015114 <_Z17GRAPHICS_MainTaskv>

  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80183ac:	2001      	movs	r0, #1
 80183ae:	f7f8 ff8a 	bl	80112c6 <osDelay>
 80183b2:	e7fb      	b.n	80183ac <_Z16StartDefaultTaskPKv+0x14>

080183b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80183b4:	b580      	push	{r7, lr}
 80183b6:	b082      	sub	sp, #8
 80183b8:	af00      	add	r7, sp, #0
 80183ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	681b      	ldr	r3, [r3, #0]
 80183c0:	4a04      	ldr	r2, [pc, #16]	; (80183d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80183c2:	4293      	cmp	r3, r2
 80183c4:	d101      	bne.n	80183ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80183c6:	f7e8 fba3 	bl	8000b10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80183ca:	bf00      	nop
 80183cc:	3708      	adds	r7, #8
 80183ce:	46bd      	mov	sp, r7
 80183d0:	bd80      	pop	{r7, pc}
 80183d2:	bf00      	nop
 80183d4:	40001000 	.word	0x40001000

080183d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80183d8:	b480      	push	{r7}
 80183da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80183dc:	bf00      	nop
 80183de:	46bd      	mov	sp, r7
 80183e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183e4:	4770      	bx	lr

080183e6 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80183e6:	b580      	push	{r7, lr}
 80183e8:	b084      	sub	sp, #16
 80183ea:	af00      	add	r7, sp, #0
 80183ec:	6078      	str	r0, [r7, #4]
  uint32_t timer = osKernelSysTick();
 80183ee:	f7f8 ff33 	bl	8011258 <osKernelSysTick>
 80183f2:	60f8      	str	r0, [r7, #12]
  /* block until SDIO peripherial is ready again or a timeout occur */
  while( osKernelSysTick() - timer < timeout)
 80183f4:	e006      	b.n	8018404 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80183f6:	f7fe fe71 	bl	80170dc <BSP_SD_GetCardState>
 80183fa:	4603      	mov	r3, r0
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d101      	bne.n	8018404 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8018400:	2300      	movs	r3, #0
 8018402:	e009      	b.n	8018418 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 8018404:	f7f8 ff28 	bl	8011258 <osKernelSysTick>
 8018408:	4602      	mov	r2, r0
 801840a:	68fb      	ldr	r3, [r7, #12]
 801840c:	1ad3      	subs	r3, r2, r3
 801840e:	687a      	ldr	r2, [r7, #4]
 8018410:	429a      	cmp	r2, r3
 8018412:	d8f0      	bhi.n	80183f6 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8018414:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018418:	4618      	mov	r0, r3
 801841a:	3710      	adds	r7, #16
 801841c:	46bd      	mov	sp, r7
 801841e:	bd80      	pop	{r7, pc}

08018420 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8018420:	b580      	push	{r7, lr}
 8018422:	b082      	sub	sp, #8
 8018424:	af00      	add	r7, sp, #0
 8018426:	4603      	mov	r3, r0
 8018428:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801842a:	4b0b      	ldr	r3, [pc, #44]	; (8018458 <SD_CheckStatus+0x38>)
 801842c:	2201      	movs	r2, #1
 801842e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8018430:	f7fe fe54 	bl	80170dc <BSP_SD_GetCardState>
 8018434:	4603      	mov	r3, r0
 8018436:	2b00      	cmp	r3, #0
 8018438:	d107      	bne.n	801844a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801843a:	4b07      	ldr	r3, [pc, #28]	; (8018458 <SD_CheckStatus+0x38>)
 801843c:	781b      	ldrb	r3, [r3, #0]
 801843e:	b2db      	uxtb	r3, r3
 8018440:	f023 0301 	bic.w	r3, r3, #1
 8018444:	b2da      	uxtb	r2, r3
 8018446:	4b04      	ldr	r3, [pc, #16]	; (8018458 <SD_CheckStatus+0x38>)
 8018448:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801844a:	4b03      	ldr	r3, [pc, #12]	; (8018458 <SD_CheckStatus+0x38>)
 801844c:	781b      	ldrb	r3, [r3, #0]
 801844e:	b2db      	uxtb	r3, r3
}
 8018450:	4618      	mov	r0, r3
 8018452:	3708      	adds	r7, #8
 8018454:	46bd      	mov	sp, r7
 8018456:	bd80      	pop	{r7, pc}
 8018458:	2000006e 	.word	0x2000006e

0801845c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 801845c:	b580      	push	{r7, lr}
 801845e:	b084      	sub	sp, #16
 8018460:	af00      	add	r7, sp, #0
 8018462:	4603      	mov	r3, r0
 8018464:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT; 
 8018466:	4b1a      	ldr	r3, [pc, #104]	; (80184d0 <SD_initialize+0x74>)
 8018468:	2201      	movs	r2, #1
 801846a:	701a      	strb	r2, [r3, #0]

  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
  if(osKernelRunning())
 801846c:	f7f8 fee8 	bl	8011240 <osKernelRunning>
 8018470:	4603      	mov	r3, r0
 8018472:	2b00      	cmp	r3, #0
 8018474:	d025      	beq.n	80184c2 <SD_initialize+0x66>
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 8018476:	f7fe fdd7 	bl	8017028 <BSP_SD_Init>
 801847a:	4603      	mov	r3, r0
 801847c:	2b00      	cmp	r3, #0
 801847e:	d107      	bne.n	8018490 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 8018480:	79fb      	ldrb	r3, [r7, #7]
 8018482:	4618      	mov	r0, r3
 8018484:	f7ff ffcc 	bl	8018420 <SD_CheckStatus>
 8018488:	4603      	mov	r3, r0
 801848a:	461a      	mov	r2, r3
 801848c:	4b10      	ldr	r3, [pc, #64]	; (80184d0 <SD_initialize+0x74>)
 801848e:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if ((Stat != STA_NOINIT) && (SDQueueID == NULL))
 8018490:	4b0f      	ldr	r3, [pc, #60]	; (80184d0 <SD_initialize+0x74>)
 8018492:	781b      	ldrb	r3, [r3, #0]
 8018494:	b2db      	uxtb	r3, r3
 8018496:	2b01      	cmp	r3, #1
 8018498:	d013      	beq.n	80184c2 <SD_initialize+0x66>
 801849a:	4b0e      	ldr	r3, [pc, #56]	; (80184d4 <SD_initialize+0x78>)
 801849c:	681b      	ldr	r3, [r3, #0]
 801849e:	2b00      	cmp	r3, #0
 80184a0:	d10f      	bne.n	80184c2 <SD_initialize+0x66>
    {
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 80184a2:	4a0d      	ldr	r2, [pc, #52]	; (80184d8 <SD_initialize+0x7c>)
 80184a4:	f107 0308 	add.w	r3, r7, #8
 80184a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80184ac:	e883 0003 	stmia.w	r3, {r0, r1}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 80184b0:	f107 0308 	add.w	r3, r7, #8
 80184b4:	2100      	movs	r1, #0
 80184b6:	4618      	mov	r0, r3
 80184b8:	f7f8 ffc2 	bl	8011440 <osMessageCreate>
 80184bc:	4602      	mov	r2, r0
 80184be:	4b05      	ldr	r3, [pc, #20]	; (80184d4 <SD_initialize+0x78>)
 80184c0:	601a      	str	r2, [r3, #0]
    }
  }
  return Stat;
 80184c2:	4b03      	ldr	r3, [pc, #12]	; (80184d0 <SD_initialize+0x74>)
 80184c4:	781b      	ldrb	r3, [r3, #0]
 80184c6:	b2db      	uxtb	r3, r3
}
 80184c8:	4618      	mov	r0, r3
 80184ca:	3710      	adds	r7, #16
 80184cc:	46bd      	mov	sp, r7
 80184ce:	bd80      	pop	{r7, pc}
 80184d0:	2000006e 	.word	0x2000006e
 80184d4:	20009c08 	.word	0x20009c08
 80184d8:	08023a3c 	.word	0x08023a3c

080184dc <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80184dc:	b580      	push	{r7, lr}
 80184de:	b082      	sub	sp, #8
 80184e0:	af00      	add	r7, sp, #0
 80184e2:	4603      	mov	r3, r0
 80184e4:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80184e6:	79fb      	ldrb	r3, [r7, #7]
 80184e8:	4618      	mov	r0, r3
 80184ea:	f7ff ff99 	bl	8018420 <SD_CheckStatus>
 80184ee:	4603      	mov	r3, r0
}
 80184f0:	4618      	mov	r0, r3
 80184f2:	3708      	adds	r7, #8
 80184f4:	46bd      	mov	sp, r7
 80184f6:	bd80      	pop	{r7, pc}

080184f8 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
   
DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80184f8:	b580      	push	{r7, lr}
 80184fa:	b08e      	sub	sp, #56	; 0x38
 80184fc:	af00      	add	r7, sp, #0
 80184fe:	61b9      	str	r1, [r7, #24]
 8018500:	617a      	str	r2, [r7, #20]
 8018502:	613b      	str	r3, [r7, #16]
 8018504:	4603      	mov	r3, r0
 8018506:	77fb      	strb	r3, [r7, #31]
  DRESULT res = RES_ERROR;
 8018508:	2301      	movs	r3, #1
 801850a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 801850e:	f247 5030 	movw	r0, #30000	; 0x7530
 8018512:	f7ff ff68 	bl	80183e6 <SD_CheckStatusWithTimeout>
 8018516:	4603      	mov	r3, r0
 8018518:	2b00      	cmp	r3, #0
 801851a:	da02      	bge.n	8018522 <SD_read+0x2a>
  {
    return res;
 801851c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018520:	e06c      	b.n	80185fc <SD_read+0x104>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8018522:	69bb      	ldr	r3, [r7, #24]
 8018524:	f003 0303 	and.w	r3, r3, #3
 8018528:	2b00      	cmp	r3, #0
 801852a:	d11e      	bne.n	801856a <SD_read+0x72>
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 801852c:	693a      	ldr	r2, [r7, #16]
 801852e:	6979      	ldr	r1, [r7, #20]
 8018530:	69b8      	ldr	r0, [r7, #24]
 8018532:	f7fe fd9f 	bl	8017074 <BSP_SD_ReadBlocks_DMA>
 8018536:	4603      	mov	r3, r0
 8018538:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    if (ret == MSD_OK) {
 801853c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8018540:	2b00      	cmp	r3, #0
 8018542:	d159      	bne.n	80185f8 <SD_read+0x100>
      /* wait for a message from the queue or a timeout */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8018544:	4b2f      	ldr	r3, [pc, #188]	; (8018604 <SD_read+0x10c>)
 8018546:	6819      	ldr	r1, [r3, #0]
 8018548:	f107 0320 	add.w	r3, r7, #32
 801854c:	f247 5230 	movw	r2, #30000	; 0x7530
 8018550:	4618      	mov	r0, r3
 8018552:	f7f8 ffc7 	bl	80114e4 <osMessageGet>
      if (event.status == osEventMessage) {
 8018556:	6a3b      	ldr	r3, [r7, #32]
 8018558:	2b10      	cmp	r3, #16
 801855a:	d14d      	bne.n	80185f8 <SD_read+0x100>
        if (event.value.v == READ_CPLT_MSG) {
 801855c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801855e:	2b01      	cmp	r3, #1
 8018560:	d14a      	bne.n	80185f8 <SD_read+0x100>
          res = RES_OK;
 8018562:	2300      	movs	r3, #0
 8018564:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8018568:	e046      	b.n	80185f8 <SD_read+0x100>
#if defined(ENABLE_SCRATCH_BUFFER)
  } else {
    /* Slow path, fetch each sector a part and memcpy to destination buffer */
    int i;
    uint8_t ret;
    for (i = 0; i < count; i++) {
 801856a:	2300      	movs	r3, #0
 801856c:	633b      	str	r3, [r7, #48]	; 0x30
 801856e:	e032      	b.n	80185d6 <SD_read+0xde>
      ret = BSP_SD_ReadBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 8018570:	697b      	ldr	r3, [r7, #20]
 8018572:	1c5a      	adds	r2, r3, #1
 8018574:	617a      	str	r2, [r7, #20]
 8018576:	2201      	movs	r2, #1
 8018578:	4619      	mov	r1, r3
 801857a:	4823      	ldr	r0, [pc, #140]	; (8018608 <SD_read+0x110>)
 801857c:	f7fe fd7a 	bl	8017074 <BSP_SD_ReadBlocks_DMA>
 8018580:	4603      	mov	r3, r0
 8018582:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      if (ret == MSD_OK) {
 8018586:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801858a:	2b00      	cmp	r3, #0
 801858c:	d128      	bne.n	80185e0 <SD_read+0xe8>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 801858e:	4b1d      	ldr	r3, [pc, #116]	; (8018604 <SD_read+0x10c>)
 8018590:	6819      	ldr	r1, [r3, #0]
 8018592:	463b      	mov	r3, r7
 8018594:	f247 5230 	movw	r2, #30000	; 0x7530
 8018598:	4618      	mov	r0, r3
 801859a:	f7f8 ffa3 	bl	80114e4 <osMessageGet>
 801859e:	f107 0320 	add.w	r3, r7, #32
 80185a2:	463a      	mov	r2, r7
 80185a4:	ca07      	ldmia	r2, {r0, r1, r2}
 80185a6:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 80185aa:	6a3b      	ldr	r3, [r7, #32]
 80185ac:	2b10      	cmp	r3, #16
 80185ae:	d10f      	bne.n	80185d0 <SD_read+0xd8>
          if (event.value.v == READ_CPLT_MSG) {
 80185b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80185b2:	2b01      	cmp	r3, #1
 80185b4:	d10c      	bne.n	80185d0 <SD_read+0xd8>
            *
            * invalidate the scratch buffer before the next read to get the actual data instead of the cached one
            */
            SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif
            memcpy(buff, scratch, BLOCKSIZE);
 80185b6:	69bb      	ldr	r3, [r7, #24]
 80185b8:	4a13      	ldr	r2, [pc, #76]	; (8018608 <SD_read+0x110>)
 80185ba:	4618      	mov	r0, r3
 80185bc:	4611      	mov	r1, r2
 80185be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80185c2:	461a      	mov	r2, r3
 80185c4:	f009 ffba 	bl	802253c <memcpy>
            buff += BLOCKSIZE;
 80185c8:	69bb      	ldr	r3, [r7, #24]
 80185ca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80185ce:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 80185d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185d2:	3301      	adds	r3, #1
 80185d4:	633b      	str	r3, [r7, #48]	; 0x30
 80185d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185d8:	693a      	ldr	r2, [r7, #16]
 80185da:	429a      	cmp	r2, r3
 80185dc:	d8c8      	bhi.n	8018570 <SD_read+0x78>
 80185de:	e000      	b.n	80185e2 <SD_read+0xea>
          }
        }
      }
      else
      {
        break;
 80185e0:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 80185e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185e4:	693a      	ldr	r2, [r7, #16]
 80185e6:	429a      	cmp	r2, r3
 80185e8:	d106      	bne.n	80185f8 <SD_read+0x100>
 80185ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80185ee:	2b00      	cmp	r3, #0
 80185f0:	d102      	bne.n	80185f8 <SD_read+0x100>
      res = RES_OK;
 80185f2:	2300      	movs	r3, #0
 80185f4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }

#endif

  return res;
 80185f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
} 
 80185fc:	4618      	mov	r0, r3
 80185fe:	3738      	adds	r7, #56	; 0x38
 8018600:	46bd      	mov	sp, r7
 8018602:	bd80      	pop	{r7, pc}
 8018604:	20009c08 	.word	0x20009c08
 8018608:	20009a08 	.word	0x20009a08

0801860c <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
   
DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 801860c:	b580      	push	{r7, lr}
 801860e:	b090      	sub	sp, #64	; 0x40
 8018610:	af00      	add	r7, sp, #0
 8018612:	61b9      	str	r1, [r7, #24]
 8018614:	617a      	str	r2, [r7, #20]
 8018616:	613b      	str	r3, [r7, #16]
 8018618:	4603      	mov	r3, r0
 801861a:	77fb      	strb	r3, [r7, #31]
  osEvent event;
  DRESULT res = RES_ERROR;
 801861c:	2301      	movs	r3, #1
 801861e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)   
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8018622:	f247 5030 	movw	r0, #30000	; 0x7530
 8018626:	f7ff fede 	bl	80183e6 <SD_CheckStatusWithTimeout>
 801862a:	4603      	mov	r3, r0
 801862c:	2b00      	cmp	r3, #0
 801862e:	da02      	bge.n	8018636 <SD_write+0x2a>
  {
    return res;
 8018630:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8018634:	e07c      	b.n	8018730 <SD_write+0x124>
  }

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
 8018636:	69bb      	ldr	r3, [r7, #24]
 8018638:	f003 0303 	and.w	r3, r3, #3
 801863c:	2b00      	cmp	r3, #0
 801863e:	d12e      	bne.n	801869e <SD_write+0x92>
    * This is not needed if the memory region is configured as W/T.
    */
    alignedAddr = (uint32_t)buff & ~0x1F;
    SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8018640:	693a      	ldr	r2, [r7, #16]
 8018642:	6979      	ldr	r1, [r7, #20]
 8018644:	69b8      	ldr	r0, [r7, #24]
 8018646:	f7fe fd2f 	bl	80170a8 <BSP_SD_WriteBlocks_DMA>
 801864a:	4603      	mov	r3, r0
 801864c:	2b00      	cmp	r3, #0
 801864e:	d16d      	bne.n	801872c <SD_write+0x120>
                              (uint32_t) (sector),
                              count) == MSD_OK)
    {
      /* Get the message from the queue */
      event = osMessageGet(SDQueueID, SD_TIMEOUT);
 8018650:	4b39      	ldr	r3, [pc, #228]	; (8018738 <SD_write+0x12c>)
 8018652:	6819      	ldr	r1, [r3, #0]
 8018654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018658:	f247 5230 	movw	r2, #30000	; 0x7530
 801865c:	4618      	mov	r0, r3
 801865e:	f7f8 ff41 	bl	80114e4 <osMessageGet>

      if (event.status == osEventMessage)
 8018662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018664:	2b10      	cmp	r3, #16
 8018666:	d161      	bne.n	801872c <SD_write+0x120>
      {
        if (event.value.v == WRITE_CPLT_MSG)
 8018668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801866a:	2b02      	cmp	r3, #2
 801866c:	d15e      	bne.n	801872c <SD_write+0x120>
        {
          timer = osKernelSysTick() + SD_TIMEOUT;
 801866e:	f7f8 fdf3 	bl	8011258 <osKernelSysTick>
 8018672:	4602      	mov	r2, r0
 8018674:	f247 5330 	movw	r3, #30000	; 0x7530
 8018678:	4413      	add	r3, r2
 801867a:	633b      	str	r3, [r7, #48]	; 0x30
          /* block until SDIO IP is ready or a timeout occur */
          while(timer > osKernelSysTick())
 801867c:	e008      	b.n	8018690 <SD_write+0x84>
          {
            if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801867e:	f7fe fd2d 	bl	80170dc <BSP_SD_GetCardState>
 8018682:	4603      	mov	r3, r0
 8018684:	2b00      	cmp	r3, #0
 8018686:	d103      	bne.n	8018690 <SD_write+0x84>
            {
              res = RES_OK;
 8018688:	2300      	movs	r3, #0
 801868a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
              break;
 801868e:	e04d      	b.n	801872c <SD_write+0x120>
          while(timer > osKernelSysTick())
 8018690:	f7f8 fde2 	bl	8011258 <osKernelSysTick>
 8018694:	4602      	mov	r2, r0
 8018696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018698:	4293      	cmp	r3, r2
 801869a:	d8f0      	bhi.n	801867e <SD_write+0x72>
 801869c:	e046      	b.n	801872c <SD_write+0x120>
    * invalidate the scratch buffer before the next write to get the actual data instead of the cached one
    */
    SCB_InvalidateDCache_by_Addr((uint32_t*)scratch, BLOCKSIZE);
#endif

    for (i = 0; i < count; i++) {
 801869e:	2300      	movs	r3, #0
 80186a0:	63bb      	str	r3, [r7, #56]	; 0x38
 80186a2:	e032      	b.n	801870a <SD_write+0xfe>
      ret = BSP_SD_WriteBlocks_DMA((uint32_t*)scratch, (uint32_t)sector++, 1);
 80186a4:	697b      	ldr	r3, [r7, #20]
 80186a6:	1c5a      	adds	r2, r3, #1
 80186a8:	617a      	str	r2, [r7, #20]
 80186aa:	2201      	movs	r2, #1
 80186ac:	4619      	mov	r1, r3
 80186ae:	4823      	ldr	r0, [pc, #140]	; (801873c <SD_write+0x130>)
 80186b0:	f7fe fcfa 	bl	80170a8 <BSP_SD_WriteBlocks_DMA>
 80186b4:	4603      	mov	r3, r0
 80186b6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      if (ret == MSD_OK) {
 80186ba:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80186be:	2b00      	cmp	r3, #0
 80186c0:	d128      	bne.n	8018714 <SD_write+0x108>
        /* wait for a message from the queue or a timeout */
        event = osMessageGet(SDQueueID, SD_TIMEOUT);
 80186c2:	4b1d      	ldr	r3, [pc, #116]	; (8018738 <SD_write+0x12c>)
 80186c4:	6819      	ldr	r1, [r3, #0]
 80186c6:	463b      	mov	r3, r7
 80186c8:	f247 5230 	movw	r2, #30000	; 0x7530
 80186cc:	4618      	mov	r0, r3
 80186ce:	f7f8 ff09 	bl	80114e4 <osMessageGet>
 80186d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80186d6:	463a      	mov	r2, r7
 80186d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80186da:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (event.status == osEventMessage) {
 80186de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186e0:	2b10      	cmp	r3, #16
 80186e2:	d10f      	bne.n	8018704 <SD_write+0xf8>
          if (event.value.v == WRITE_CPLT_MSG) {
 80186e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186e6:	2b02      	cmp	r3, #2
 80186e8:	d10c      	bne.n	8018704 <SD_write+0xf8>
            memcpy((void *)buff, (void *)scratch, BLOCKSIZE);
 80186ea:	69bb      	ldr	r3, [r7, #24]
 80186ec:	4a13      	ldr	r2, [pc, #76]	; (801873c <SD_write+0x130>)
 80186ee:	4618      	mov	r0, r3
 80186f0:	4611      	mov	r1, r2
 80186f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80186f6:	461a      	mov	r2, r3
 80186f8:	f009 ff20 	bl	802253c <memcpy>
            buff += BLOCKSIZE;
 80186fc:	69bb      	ldr	r3, [r7, #24]
 80186fe:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8018702:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < count; i++) {
 8018704:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018706:	3301      	adds	r3, #1
 8018708:	63bb      	str	r3, [r7, #56]	; 0x38
 801870a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801870c:	693a      	ldr	r2, [r7, #16]
 801870e:	429a      	cmp	r2, r3
 8018710:	d8c8      	bhi.n	80186a4 <SD_write+0x98>
 8018712:	e000      	b.n	8018716 <SD_write+0x10a>
          }
        }
      }
      else
      {
        break;
 8018714:	bf00      	nop
      }
    }

    if ((i == count) && (ret == MSD_OK))
 8018716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018718:	693a      	ldr	r2, [r7, #16]
 801871a:	429a      	cmp	r2, r3
 801871c:	d106      	bne.n	801872c <SD_write+0x120>
 801871e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018722:	2b00      	cmp	r3, #0
 8018724:	d102      	bne.n	801872c <SD_write+0x120>
      res = RES_OK;
 8018726:	2300      	movs	r3, #0
 8018728:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }
#endif
  return res;
 801872c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
} 
 8018730:	4618      	mov	r0, r3
 8018732:	3740      	adds	r7, #64	; 0x40
 8018734:	46bd      	mov	sp, r7
 8018736:	bd80      	pop	{r7, pc}
 8018738:	20009c08 	.word	0x20009c08
 801873c:	20009a08 	.word	0x20009a08

08018740 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8018740:	b580      	push	{r7, lr}
 8018742:	b08c      	sub	sp, #48	; 0x30
 8018744:	af00      	add	r7, sp, #0
 8018746:	4603      	mov	r3, r0
 8018748:	603a      	str	r2, [r7, #0]
 801874a:	71fb      	strb	r3, [r7, #7]
 801874c:	460b      	mov	r3, r1
 801874e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8018750:	2301      	movs	r3, #1
 8018752:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8018756:	4b25      	ldr	r3, [pc, #148]	; (80187ec <SD_ioctl+0xac>)
 8018758:	781b      	ldrb	r3, [r3, #0]
 801875a:	b2db      	uxtb	r3, r3
 801875c:	f003 0301 	and.w	r3, r3, #1
 8018760:	2b00      	cmp	r3, #0
 8018762:	d001      	beq.n	8018768 <SD_ioctl+0x28>
 8018764:	2303      	movs	r3, #3
 8018766:	e03c      	b.n	80187e2 <SD_ioctl+0xa2>

  switch (cmd)
 8018768:	79bb      	ldrb	r3, [r7, #6]
 801876a:	2b03      	cmp	r3, #3
 801876c:	d834      	bhi.n	80187d8 <SD_ioctl+0x98>
 801876e:	a201      	add	r2, pc, #4	; (adr r2, 8018774 <SD_ioctl+0x34>)
 8018770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018774:	08018785 	.word	0x08018785
 8018778:	0801878d 	.word	0x0801878d
 801877c:	080187a5 	.word	0x080187a5
 8018780:	080187bf 	.word	0x080187bf
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8018784:	2300      	movs	r3, #0
 8018786:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 801878a:	e028      	b.n	80187de <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 801878c:	f107 030c 	add.w	r3, r7, #12
 8018790:	4618      	mov	r0, r3
 8018792:	f7fe fcb3 	bl	80170fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8018796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018798:	683b      	ldr	r3, [r7, #0]
 801879a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 801879c:	2300      	movs	r3, #0
 801879e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80187a2:	e01c      	b.n	80187de <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80187a4:	f107 030c 	add.w	r3, r7, #12
 80187a8:	4618      	mov	r0, r3
 80187aa:	f7fe fca7 	bl	80170fc <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80187ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187b0:	b29a      	uxth	r2, r3
 80187b2:	683b      	ldr	r3, [r7, #0]
 80187b4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80187b6:	2300      	movs	r3, #0
 80187b8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80187bc:	e00f      	b.n	80187de <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80187be:	f107 030c 	add.w	r3, r7, #12
 80187c2:	4618      	mov	r0, r3
 80187c4:	f7fe fc9a 	bl	80170fc <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80187c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80187ca:	0a5a      	lsrs	r2, r3, #9
 80187cc:	683b      	ldr	r3, [r7, #0]
 80187ce:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80187d0:	2300      	movs	r3, #0
 80187d2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80187d6:	e002      	b.n	80187de <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80187d8:	2304      	movs	r3, #4
 80187da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80187de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80187e2:	4618      	mov	r0, r3
 80187e4:	3730      	adds	r7, #48	; 0x30
 80187e6:	46bd      	mov	sp, r7
 80187e8:	bd80      	pop	{r7, pc}
 80187ea:	bf00      	nop
 80187ec:	2000006e 	.word	0x2000006e

080187f0 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80187f0:	b580      	push	{r7, lr}
 80187f2:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
  osMessagePut(SDQueueID, READ_CPLT_MSG, osWaitForever);
 80187f4:	4b04      	ldr	r3, [pc, #16]	; (8018808 <BSP_SD_ReadCpltCallback+0x18>)
 80187f6:	681b      	ldr	r3, [r3, #0]
 80187f8:	f04f 32ff 	mov.w	r2, #4294967295
 80187fc:	2101      	movs	r1, #1
 80187fe:	4618      	mov	r0, r3
 8018800:	f7f8 fe30 	bl	8011464 <osMessagePut>
}
 8018804:	bf00      	nop
 8018806:	bd80      	pop	{r7, pc}
 8018808:	20009c08 	.word	0x20009c08

0801880c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801880c:	b580      	push	{r7, lr}
 801880e:	b082      	sub	sp, #8
 8018810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8018812:	4b11      	ldr	r3, [pc, #68]	; (8018858 <HAL_MspInit+0x4c>)
 8018814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018816:	4a10      	ldr	r2, [pc, #64]	; (8018858 <HAL_MspInit+0x4c>)
 8018818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801881c:	6413      	str	r3, [r2, #64]	; 0x40
 801881e:	4b0e      	ldr	r3, [pc, #56]	; (8018858 <HAL_MspInit+0x4c>)
 8018820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018826:	607b      	str	r3, [r7, #4]
 8018828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801882a:	4b0b      	ldr	r3, [pc, #44]	; (8018858 <HAL_MspInit+0x4c>)
 801882c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801882e:	4a0a      	ldr	r2, [pc, #40]	; (8018858 <HAL_MspInit+0x4c>)
 8018830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8018834:	6453      	str	r3, [r2, #68]	; 0x44
 8018836:	4b08      	ldr	r3, [pc, #32]	; (8018858 <HAL_MspInit+0x4c>)
 8018838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801883a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801883e:	603b      	str	r3, [r7, #0]
 8018840:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8018842:	2200      	movs	r2, #0
 8018844:	210f      	movs	r1, #15
 8018846:	f06f 0001 	mvn.w	r0, #1
 801884a:	f7e8 fcef 	bl	800122c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 801884e:	bf00      	nop
 8018850:	3708      	adds	r7, #8
 8018852:	46bd      	mov	sp, r7
 8018854:	bd80      	pop	{r7, pc}
 8018856:	bf00      	nop
 8018858:	40023800 	.word	0x40023800

0801885c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 801885c:	b580      	push	{r7, lr}
 801885e:	b08a      	sub	sp, #40	; 0x28
 8018860:	af00      	add	r7, sp, #0
 8018862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018864:	f107 0314 	add.w	r3, r7, #20
 8018868:	2200      	movs	r2, #0
 801886a:	601a      	str	r2, [r3, #0]
 801886c:	605a      	str	r2, [r3, #4]
 801886e:	609a      	str	r2, [r3, #8]
 8018870:	60da      	str	r2, [r3, #12]
 8018872:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8018874:	687b      	ldr	r3, [r7, #4]
 8018876:	681b      	ldr	r3, [r3, #0]
 8018878:	4a21      	ldr	r2, [pc, #132]	; (8018900 <HAL_ADC_MspInit+0xa4>)
 801887a:	4293      	cmp	r3, r2
 801887c:	d13c      	bne.n	80188f8 <HAL_ADC_MspInit+0x9c>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 801887e:	4b21      	ldr	r3, [pc, #132]	; (8018904 <HAL_ADC_MspInit+0xa8>)
 8018880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018882:	4a20      	ldr	r2, [pc, #128]	; (8018904 <HAL_ADC_MspInit+0xa8>)
 8018884:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8018888:	6453      	str	r3, [r2, #68]	; 0x44
 801888a:	4b1e      	ldr	r3, [pc, #120]	; (8018904 <HAL_ADC_MspInit+0xa8>)
 801888c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801888e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018892:	613b      	str	r3, [r7, #16]
 8018894:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8018896:	4b1b      	ldr	r3, [pc, #108]	; (8018904 <HAL_ADC_MspInit+0xa8>)
 8018898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801889a:	4a1a      	ldr	r2, [pc, #104]	; (8018904 <HAL_ADC_MspInit+0xa8>)
 801889c:	f043 0320 	orr.w	r3, r3, #32
 80188a0:	6313      	str	r3, [r2, #48]	; 0x30
 80188a2:	4b18      	ldr	r3, [pc, #96]	; (8018904 <HAL_ADC_MspInit+0xa8>)
 80188a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80188a6:	f003 0320 	and.w	r3, r3, #32
 80188aa:	60fb      	str	r3, [r7, #12]
 80188ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80188ae:	4b15      	ldr	r3, [pc, #84]	; (8018904 <HAL_ADC_MspInit+0xa8>)
 80188b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80188b2:	4a14      	ldr	r2, [pc, #80]	; (8018904 <HAL_ADC_MspInit+0xa8>)
 80188b4:	f043 0301 	orr.w	r3, r3, #1
 80188b8:	6313      	str	r3, [r2, #48]	; 0x30
 80188ba:	4b12      	ldr	r3, [pc, #72]	; (8018904 <HAL_ADC_MspInit+0xa8>)
 80188bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80188be:	f003 0301 	and.w	r3, r3, #1
 80188c2:	60bb      	str	r3, [r7, #8]
 80188c4:	68bb      	ldr	r3, [r7, #8]
    PF10     ------> ADC3_IN8
    PF9     ------> ADC3_IN7
    PF8     ------> ADC3_IN6
    PA0/WKUP     ------> ADC3_IN0 
    */
    GPIO_InitStruct.Pin = ARDUINO_A4_Pin|ARDUINO_A5_Pin|ARDUINO_A1_Pin|ARDUINO_A2_Pin 
 80188c6:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 80188ca:	617b      	str	r3, [r7, #20]
                          |ARDUINO_A3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80188cc:	2303      	movs	r3, #3
 80188ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80188d0:	2300      	movs	r3, #0
 80188d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80188d4:	f107 0314 	add.w	r3, r7, #20
 80188d8:	4619      	mov	r1, r3
 80188da:	480b      	ldr	r0, [pc, #44]	; (8018908 <HAL_ADC_MspInit+0xac>)
 80188dc:	f7e9 ff38 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 80188e0:	2301      	movs	r3, #1
 80188e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80188e4:	2303      	movs	r3, #3
 80188e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80188e8:	2300      	movs	r3, #0
 80188ea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 80188ec:	f107 0314 	add.w	r3, r7, #20
 80188f0:	4619      	mov	r1, r3
 80188f2:	4806      	ldr	r0, [pc, #24]	; (801890c <HAL_ADC_MspInit+0xb0>)
 80188f4:	f7e9 ff2c 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80188f8:	bf00      	nop
 80188fa:	3728      	adds	r7, #40	; 0x28
 80188fc:	46bd      	mov	sp, r7
 80188fe:	bd80      	pop	{r7, pc}
 8018900:	40012200 	.word	0x40012200
 8018904:	40023800 	.word	0x40023800
 8018908:	40021400 	.word	0x40021400
 801890c:	40020000 	.word	0x40020000

08018910 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8018910:	b480      	push	{r7}
 8018912:	b085      	sub	sp, #20
 8018914:	af00      	add	r7, sp, #0
 8018916:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8018918:	687b      	ldr	r3, [r7, #4]
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	4a0a      	ldr	r2, [pc, #40]	; (8018948 <HAL_CRC_MspInit+0x38>)
 801891e:	4293      	cmp	r3, r2
 8018920:	d10b      	bne.n	801893a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8018922:	4b0a      	ldr	r3, [pc, #40]	; (801894c <HAL_CRC_MspInit+0x3c>)
 8018924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018926:	4a09      	ldr	r2, [pc, #36]	; (801894c <HAL_CRC_MspInit+0x3c>)
 8018928:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801892c:	6313      	str	r3, [r2, #48]	; 0x30
 801892e:	4b07      	ldr	r3, [pc, #28]	; (801894c <HAL_CRC_MspInit+0x3c>)
 8018930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018932:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8018936:	60fb      	str	r3, [r7, #12]
 8018938:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 801893a:	bf00      	nop
 801893c:	3714      	adds	r7, #20
 801893e:	46bd      	mov	sp, r7
 8018940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018944:	4770      	bx	lr
 8018946:	bf00      	nop
 8018948:	40023000 	.word	0x40023000
 801894c:	40023800 	.word	0x40023800

08018950 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8018950:	b580      	push	{r7, lr}
 8018952:	b08e      	sub	sp, #56	; 0x38
 8018954:	af00      	add	r7, sp, #0
 8018956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018958:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801895c:	2200      	movs	r2, #0
 801895e:	601a      	str	r2, [r3, #0]
 8018960:	605a      	str	r2, [r3, #4]
 8018962:	609a      	str	r2, [r3, #8]
 8018964:	60da      	str	r2, [r3, #12]
 8018966:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	4a50      	ldr	r2, [pc, #320]	; (8018ab0 <HAL_DCMI_MspInit+0x160>)
 801896e:	4293      	cmp	r3, r2
 8018970:	f040 809a 	bne.w	8018aa8 <HAL_DCMI_MspInit+0x158>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8018974:	4b4f      	ldr	r3, [pc, #316]	; (8018ab4 <HAL_DCMI_MspInit+0x164>)
 8018976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018978:	4a4e      	ldr	r2, [pc, #312]	; (8018ab4 <HAL_DCMI_MspInit+0x164>)
 801897a:	f043 0301 	orr.w	r3, r3, #1
 801897e:	6353      	str	r3, [r2, #52]	; 0x34
 8018980:	4b4c      	ldr	r3, [pc, #304]	; (8018ab4 <HAL_DCMI_MspInit+0x164>)
 8018982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018984:	f003 0301 	and.w	r3, r3, #1
 8018988:	623b      	str	r3, [r7, #32]
 801898a:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 801898c:	4b49      	ldr	r3, [pc, #292]	; (8018ab4 <HAL_DCMI_MspInit+0x164>)
 801898e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018990:	4a48      	ldr	r2, [pc, #288]	; (8018ab4 <HAL_DCMI_MspInit+0x164>)
 8018992:	f043 0310 	orr.w	r3, r3, #16
 8018996:	6313      	str	r3, [r2, #48]	; 0x30
 8018998:	4b46      	ldr	r3, [pc, #280]	; (8018ab4 <HAL_DCMI_MspInit+0x164>)
 801899a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801899c:	f003 0310 	and.w	r3, r3, #16
 80189a0:	61fb      	str	r3, [r7, #28]
 80189a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80189a4:	4b43      	ldr	r3, [pc, #268]	; (8018ab4 <HAL_DCMI_MspInit+0x164>)
 80189a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80189a8:	4a42      	ldr	r2, [pc, #264]	; (8018ab4 <HAL_DCMI_MspInit+0x164>)
 80189aa:	f043 0308 	orr.w	r3, r3, #8
 80189ae:	6313      	str	r3, [r2, #48]	; 0x30
 80189b0:	4b40      	ldr	r3, [pc, #256]	; (8018ab4 <HAL_DCMI_MspInit+0x164>)
 80189b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80189b4:	f003 0308 	and.w	r3, r3, #8
 80189b8:	61bb      	str	r3, [r7, #24]
 80189ba:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80189bc:	4b3d      	ldr	r3, [pc, #244]	; (8018ab4 <HAL_DCMI_MspInit+0x164>)
 80189be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80189c0:	4a3c      	ldr	r2, [pc, #240]	; (8018ab4 <HAL_DCMI_MspInit+0x164>)
 80189c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80189c6:	6313      	str	r3, [r2, #48]	; 0x30
 80189c8:	4b3a      	ldr	r3, [pc, #232]	; (8018ab4 <HAL_DCMI_MspInit+0x164>)
 80189ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80189cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80189d0:	617b      	str	r3, [r7, #20]
 80189d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80189d4:	4b37      	ldr	r3, [pc, #220]	; (8018ab4 <HAL_DCMI_MspInit+0x164>)
 80189d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80189d8:	4a36      	ldr	r2, [pc, #216]	; (8018ab4 <HAL_DCMI_MspInit+0x164>)
 80189da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80189de:	6313      	str	r3, [r2, #48]	; 0x30
 80189e0:	4b34      	ldr	r3, [pc, #208]	; (8018ab4 <HAL_DCMI_MspInit+0x164>)
 80189e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80189e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80189e8:	613b      	str	r3, [r7, #16]
 80189ea:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80189ec:	4b31      	ldr	r3, [pc, #196]	; (8018ab4 <HAL_DCMI_MspInit+0x164>)
 80189ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80189f0:	4a30      	ldr	r2, [pc, #192]	; (8018ab4 <HAL_DCMI_MspInit+0x164>)
 80189f2:	f043 0301 	orr.w	r3, r3, #1
 80189f6:	6313      	str	r3, [r2, #48]	; 0x30
 80189f8:	4b2e      	ldr	r3, [pc, #184]	; (8018ab4 <HAL_DCMI_MspInit+0x164>)
 80189fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80189fc:	f003 0301 	and.w	r3, r3, #1
 8018a00:	60fb      	str	r3, [r7, #12]
 8018a02:	68fb      	ldr	r3, [r7, #12]
    PH9     ------> DCMI_D0
    PH11     ------> DCMI_D2
    PA6     ------> DCMI_PIXCLK
    PH10     ------> DCMI_D1 
    */
    GPIO_InitStruct.Pin = DCMI_D6_Pin|DCMI_D7_Pin;
 8018a04:	2360      	movs	r3, #96	; 0x60
 8018a06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018a08:	2302      	movs	r3, #2
 8018a0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018a0c:	2300      	movs	r3, #0
 8018a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018a10:	2300      	movs	r3, #0
 8018a12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8018a14:	230d      	movs	r3, #13
 8018a16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8018a18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018a1c:	4619      	mov	r1, r3
 8018a1e:	4826      	ldr	r0, [pc, #152]	; (8018ab8 <HAL_DCMI_MspInit+0x168>)
 8018a20:	f7e9 fe96 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8018a24:	2308      	movs	r3, #8
 8018a26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018a28:	2302      	movs	r3, #2
 8018a2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018a2c:	2300      	movs	r3, #0
 8018a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018a30:	2300      	movs	r3, #0
 8018a32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8018a34:	230d      	movs	r3, #13
 8018a36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8018a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018a3c:	4619      	mov	r1, r3
 8018a3e:	481f      	ldr	r0, [pc, #124]	; (8018abc <HAL_DCMI_MspInit+0x16c>)
 8018a40:	f7e9 fe86 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8018a44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8018a48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018a4a:	2302      	movs	r3, #2
 8018a4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018a4e:	2300      	movs	r3, #0
 8018a50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018a52:	2300      	movs	r3, #0
 8018a54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8018a56:	230d      	movs	r3, #13
 8018a58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8018a5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018a5e:	4619      	mov	r1, r3
 8018a60:	4817      	ldr	r0, [pc, #92]	; (8018ac0 <HAL_DCMI_MspInit+0x170>)
 8018a62:	f7e9 fe75 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_D4_Pin|DCMI_D3_Pin|DCMI_D0_Pin|DCMI_D2_Pin 
 8018a66:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8018a6a:	627b      	str	r3, [r7, #36]	; 0x24
                          |DCMI_D1_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018a6c:	2302      	movs	r3, #2
 8018a6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018a70:	2300      	movs	r3, #0
 8018a72:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018a74:	2300      	movs	r3, #0
 8018a76:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8018a78:	230d      	movs	r3, #13
 8018a7a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8018a7c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018a80:	4619      	mov	r1, r3
 8018a82:	4810      	ldr	r0, [pc, #64]	; (8018ac4 <HAL_DCMI_MspInit+0x174>)
 8018a84:	f7e9 fe64 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = DCMI_HSYNC_Pin|GPIO_PIN_6;
 8018a88:	2350      	movs	r3, #80	; 0x50
 8018a8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018a8c:	2302      	movs	r3, #2
 8018a8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018a90:	2300      	movs	r3, #0
 8018a92:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018a94:	2300      	movs	r3, #0
 8018a96:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8018a98:	230d      	movs	r3, #13
 8018a9a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018a9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018aa0:	4619      	mov	r1, r3
 8018aa2:	4809      	ldr	r0, [pc, #36]	; (8018ac8 <HAL_DCMI_MspInit+0x178>)
 8018aa4:	f7e9 fe54 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8018aa8:	bf00      	nop
 8018aaa:	3738      	adds	r7, #56	; 0x38
 8018aac:	46bd      	mov	sp, r7
 8018aae:	bd80      	pop	{r7, pc}
 8018ab0:	50050000 	.word	0x50050000
 8018ab4:	40023800 	.word	0x40023800
 8018ab8:	40021000 	.word	0x40021000
 8018abc:	40020c00 	.word	0x40020c00
 8018ac0:	40021800 	.word	0x40021800
 8018ac4:	40021c00 	.word	0x40021c00
 8018ac8:	40020000 	.word	0x40020000

08018acc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8018acc:	b580      	push	{r7, lr}
 8018ace:	b08e      	sub	sp, #56	; 0x38
 8018ad0:	af00      	add	r7, sp, #0
 8018ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018ad4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018ad8:	2200      	movs	r2, #0
 8018ada:	601a      	str	r2, [r3, #0]
 8018adc:	605a      	str	r2, [r3, #4]
 8018ade:	609a      	str	r2, [r3, #8]
 8018ae0:	60da      	str	r2, [r3, #12]
 8018ae2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8018ae4:	687b      	ldr	r3, [r7, #4]
 8018ae6:	681b      	ldr	r3, [r3, #0]
 8018ae8:	4a3f      	ldr	r2, [pc, #252]	; (8018be8 <HAL_ETH_MspInit+0x11c>)
 8018aea:	4293      	cmp	r3, r2
 8018aec:	d178      	bne.n	8018be0 <HAL_ETH_MspInit+0x114>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8018aee:	4b3f      	ldr	r3, [pc, #252]	; (8018bec <HAL_ETH_MspInit+0x120>)
 8018af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018af2:	4a3e      	ldr	r2, [pc, #248]	; (8018bec <HAL_ETH_MspInit+0x120>)
 8018af4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8018af8:	6313      	str	r3, [r2, #48]	; 0x30
 8018afa:	4b3c      	ldr	r3, [pc, #240]	; (8018bec <HAL_ETH_MspInit+0x120>)
 8018afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018b02:	623b      	str	r3, [r7, #32]
 8018b04:	6a3b      	ldr	r3, [r7, #32]
 8018b06:	4b39      	ldr	r3, [pc, #228]	; (8018bec <HAL_ETH_MspInit+0x120>)
 8018b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b0a:	4a38      	ldr	r2, [pc, #224]	; (8018bec <HAL_ETH_MspInit+0x120>)
 8018b0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8018b10:	6313      	str	r3, [r2, #48]	; 0x30
 8018b12:	4b36      	ldr	r3, [pc, #216]	; (8018bec <HAL_ETH_MspInit+0x120>)
 8018b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b16:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8018b1a:	61fb      	str	r3, [r7, #28]
 8018b1c:	69fb      	ldr	r3, [r7, #28]
 8018b1e:	4b33      	ldr	r3, [pc, #204]	; (8018bec <HAL_ETH_MspInit+0x120>)
 8018b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b22:	4a32      	ldr	r2, [pc, #200]	; (8018bec <HAL_ETH_MspInit+0x120>)
 8018b24:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8018b28:	6313      	str	r3, [r2, #48]	; 0x30
 8018b2a:	4b30      	ldr	r3, [pc, #192]	; (8018bec <HAL_ETH_MspInit+0x120>)
 8018b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018b32:	61bb      	str	r3, [r7, #24]
 8018b34:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8018b36:	4b2d      	ldr	r3, [pc, #180]	; (8018bec <HAL_ETH_MspInit+0x120>)
 8018b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b3a:	4a2c      	ldr	r2, [pc, #176]	; (8018bec <HAL_ETH_MspInit+0x120>)
 8018b3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018b40:	6313      	str	r3, [r2, #48]	; 0x30
 8018b42:	4b2a      	ldr	r3, [pc, #168]	; (8018bec <HAL_ETH_MspInit+0x120>)
 8018b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018b4a:	617b      	str	r3, [r7, #20]
 8018b4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8018b4e:	4b27      	ldr	r3, [pc, #156]	; (8018bec <HAL_ETH_MspInit+0x120>)
 8018b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b52:	4a26      	ldr	r2, [pc, #152]	; (8018bec <HAL_ETH_MspInit+0x120>)
 8018b54:	f043 0304 	orr.w	r3, r3, #4
 8018b58:	6313      	str	r3, [r2, #48]	; 0x30
 8018b5a:	4b24      	ldr	r3, [pc, #144]	; (8018bec <HAL_ETH_MspInit+0x120>)
 8018b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b5e:	f003 0304 	and.w	r3, r3, #4
 8018b62:	613b      	str	r3, [r7, #16]
 8018b64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018b66:	4b21      	ldr	r3, [pc, #132]	; (8018bec <HAL_ETH_MspInit+0x120>)
 8018b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b6a:	4a20      	ldr	r2, [pc, #128]	; (8018bec <HAL_ETH_MspInit+0x120>)
 8018b6c:	f043 0301 	orr.w	r3, r3, #1
 8018b70:	6313      	str	r3, [r2, #48]	; 0x30
 8018b72:	4b1e      	ldr	r3, [pc, #120]	; (8018bec <HAL_ETH_MspInit+0x120>)
 8018b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018b76:	f003 0301 	and.w	r3, r3, #1
 8018b7a:	60fb      	str	r3, [r7, #12]
 8018b7c:	68fb      	ldr	r3, [r7, #12]
    PC4     ------> ETH_RXD0
    PA2     ------> ETH_MDIO
    PC5     ------> ETH_RXD1
    PA7     ------> ETH_CRS_DV 
    */
    GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8018b7e:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8018b82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018b84:	2302      	movs	r3, #2
 8018b86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018b88:	2300      	movs	r3, #0
 8018b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018b8c:	2303      	movs	r3, #3
 8018b8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8018b90:	230b      	movs	r3, #11
 8018b92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8018b94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018b98:	4619      	mov	r1, r3
 8018b9a:	4815      	ldr	r0, [pc, #84]	; (8018bf0 <HAL_ETH_MspInit+0x124>)
 8018b9c:	f7e9 fdd8 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8018ba0:	2332      	movs	r3, #50	; 0x32
 8018ba2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018ba4:	2302      	movs	r3, #2
 8018ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018ba8:	2300      	movs	r3, #0
 8018baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018bac:	2303      	movs	r3, #3
 8018bae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8018bb0:	230b      	movs	r3, #11
 8018bb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8018bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018bb8:	4619      	mov	r1, r3
 8018bba:	480e      	ldr	r0, [pc, #56]	; (8018bf4 <HAL_ETH_MspInit+0x128>)
 8018bbc:	f7e9 fdc8 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8018bc0:	2386      	movs	r3, #134	; 0x86
 8018bc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018bc4:	2302      	movs	r3, #2
 8018bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018bc8:	2300      	movs	r3, #0
 8018bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018bcc:	2303      	movs	r3, #3
 8018bce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8018bd0:	230b      	movs	r3, #11
 8018bd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8018bd8:	4619      	mov	r1, r3
 8018bda:	4807      	ldr	r0, [pc, #28]	; (8018bf8 <HAL_ETH_MspInit+0x12c>)
 8018bdc:	f7e9 fdb8 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8018be0:	bf00      	nop
 8018be2:	3738      	adds	r7, #56	; 0x38
 8018be4:	46bd      	mov	sp, r7
 8018be6:	bd80      	pop	{r7, pc}
 8018be8:	40028000 	.word	0x40028000
 8018bec:	40023800 	.word	0x40023800
 8018bf0:	40021800 	.word	0x40021800
 8018bf4:	40020800 	.word	0x40020800
 8018bf8:	40020000 	.word	0x40020000

08018bfc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8018bfc:	b580      	push	{r7, lr}
 8018bfe:	b08c      	sub	sp, #48	; 0x30
 8018c00:	af00      	add	r7, sp, #0
 8018c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018c04:	f107 031c 	add.w	r3, r7, #28
 8018c08:	2200      	movs	r2, #0
 8018c0a:	601a      	str	r2, [r3, #0]
 8018c0c:	605a      	str	r2, [r3, #4]
 8018c0e:	609a      	str	r2, [r3, #8]
 8018c10:	60da      	str	r2, [r3, #12]
 8018c12:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	681b      	ldr	r3, [r3, #0]
 8018c18:	4a2f      	ldr	r2, [pc, #188]	; (8018cd8 <HAL_I2C_MspInit+0xdc>)
 8018c1a:	4293      	cmp	r3, r2
 8018c1c:	d129      	bne.n	8018c72 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8018c1e:	4b2f      	ldr	r3, [pc, #188]	; (8018cdc <HAL_I2C_MspInit+0xe0>)
 8018c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018c22:	4a2e      	ldr	r2, [pc, #184]	; (8018cdc <HAL_I2C_MspInit+0xe0>)
 8018c24:	f043 0302 	orr.w	r3, r3, #2
 8018c28:	6313      	str	r3, [r2, #48]	; 0x30
 8018c2a:	4b2c      	ldr	r3, [pc, #176]	; (8018cdc <HAL_I2C_MspInit+0xe0>)
 8018c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018c2e:	f003 0302 	and.w	r3, r3, #2
 8018c32:	61bb      	str	r3, [r7, #24]
 8018c34:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8018c36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8018c3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8018c3c:	2312      	movs	r3, #18
 8018c3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8018c40:	2301      	movs	r3, #1
 8018c42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018c44:	2300      	movs	r3, #0
 8018c46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8018c48:	2304      	movs	r3, #4
 8018c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8018c4c:	f107 031c 	add.w	r3, r7, #28
 8018c50:	4619      	mov	r1, r3
 8018c52:	4823      	ldr	r0, [pc, #140]	; (8018ce0 <HAL_I2C_MspInit+0xe4>)
 8018c54:	f7e9 fd7c 	bl	8002750 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8018c58:	4b20      	ldr	r3, [pc, #128]	; (8018cdc <HAL_I2C_MspInit+0xe0>)
 8018c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c5c:	4a1f      	ldr	r2, [pc, #124]	; (8018cdc <HAL_I2C_MspInit+0xe0>)
 8018c5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8018c62:	6413      	str	r3, [r2, #64]	; 0x40
 8018c64:	4b1d      	ldr	r3, [pc, #116]	; (8018cdc <HAL_I2C_MspInit+0xe0>)
 8018c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c68:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8018c6c:	617b      	str	r3, [r7, #20]
 8018c6e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8018c70:	e02d      	b.n	8018cce <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8018c72:	687b      	ldr	r3, [r7, #4]
 8018c74:	681b      	ldr	r3, [r3, #0]
 8018c76:	4a1b      	ldr	r2, [pc, #108]	; (8018ce4 <HAL_I2C_MspInit+0xe8>)
 8018c78:	4293      	cmp	r3, r2
 8018c7a:	d128      	bne.n	8018cce <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8018c7c:	4b17      	ldr	r3, [pc, #92]	; (8018cdc <HAL_I2C_MspInit+0xe0>)
 8018c7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018c80:	4a16      	ldr	r2, [pc, #88]	; (8018cdc <HAL_I2C_MspInit+0xe0>)
 8018c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018c86:	6313      	str	r3, [r2, #48]	; 0x30
 8018c88:	4b14      	ldr	r3, [pc, #80]	; (8018cdc <HAL_I2C_MspInit+0xe0>)
 8018c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018c90:	613b      	str	r3, [r7, #16]
 8018c92:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8018c94:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8018c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8018c9a:	2312      	movs	r3, #18
 8018c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8018c9e:	2301      	movs	r3, #1
 8018ca0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018ca2:	2303      	movs	r3, #3
 8018ca4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8018ca6:	2304      	movs	r3, #4
 8018ca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8018caa:	f107 031c 	add.w	r3, r7, #28
 8018cae:	4619      	mov	r1, r3
 8018cb0:	480d      	ldr	r0, [pc, #52]	; (8018ce8 <HAL_I2C_MspInit+0xec>)
 8018cb2:	f7e9 fd4d 	bl	8002750 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8018cb6:	4b09      	ldr	r3, [pc, #36]	; (8018cdc <HAL_I2C_MspInit+0xe0>)
 8018cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018cba:	4a08      	ldr	r2, [pc, #32]	; (8018cdc <HAL_I2C_MspInit+0xe0>)
 8018cbc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8018cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8018cc2:	4b06      	ldr	r3, [pc, #24]	; (8018cdc <HAL_I2C_MspInit+0xe0>)
 8018cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018cc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8018cca:	60fb      	str	r3, [r7, #12]
 8018ccc:	68fb      	ldr	r3, [r7, #12]
}
 8018cce:	bf00      	nop
 8018cd0:	3730      	adds	r7, #48	; 0x30
 8018cd2:	46bd      	mov	sp, r7
 8018cd4:	bd80      	pop	{r7, pc}
 8018cd6:	bf00      	nop
 8018cd8:	40005400 	.word	0x40005400
 8018cdc:	40023800 	.word	0x40023800
 8018ce0:	40020400 	.word	0x40020400
 8018ce4:	40005c00 	.word	0x40005c00
 8018ce8:	40021c00 	.word	0x40021c00

08018cec <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8018cec:	b580      	push	{r7, lr}
 8018cee:	b082      	sub	sp, #8
 8018cf0:	af00      	add	r7, sp, #0
 8018cf2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	681b      	ldr	r3, [r3, #0]
 8018cf8:	4a11      	ldr	r2, [pc, #68]	; (8018d40 <HAL_I2C_MspDeInit+0x54>)
 8018cfa:	4293      	cmp	r3, r2
 8018cfc:	d10b      	bne.n	8018d16 <HAL_I2C_MspDeInit+0x2a>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8018cfe:	4b11      	ldr	r3, [pc, #68]	; (8018d44 <HAL_I2C_MspDeInit+0x58>)
 8018d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d02:	4a10      	ldr	r2, [pc, #64]	; (8018d44 <HAL_I2C_MspDeInit+0x58>)
 8018d04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8018d08:	6413      	str	r3, [r2, #64]	; 0x40
  
    /**I2C1 GPIO Configuration    
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    HAL_GPIO_DeInit(GPIOB, ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin);
 8018d0a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8018d0e:	480e      	ldr	r0, [pc, #56]	; (8018d48 <HAL_I2C_MspDeInit+0x5c>)
 8018d10:	f7e9 fec8 	bl	8002aa4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8018d14:	e00f      	b.n	8018d36 <HAL_I2C_MspDeInit+0x4a>
  else if(hi2c->Instance==I2C3)
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	681b      	ldr	r3, [r3, #0]
 8018d1a:	4a0c      	ldr	r2, [pc, #48]	; (8018d4c <HAL_I2C_MspDeInit+0x60>)
 8018d1c:	4293      	cmp	r3, r2
 8018d1e:	d10a      	bne.n	8018d36 <HAL_I2C_MspDeInit+0x4a>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8018d20:	4b08      	ldr	r3, [pc, #32]	; (8018d44 <HAL_I2C_MspDeInit+0x58>)
 8018d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d24:	4a07      	ldr	r2, [pc, #28]	; (8018d44 <HAL_I2C_MspDeInit+0x58>)
 8018d26:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8018d2a:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOH, LCD_SCL_Pin|LCD_SDA_Pin);
 8018d2c:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8018d30:	4807      	ldr	r0, [pc, #28]	; (8018d50 <HAL_I2C_MspDeInit+0x64>)
 8018d32:	f7e9 feb7 	bl	8002aa4 <HAL_GPIO_DeInit>
}
 8018d36:	bf00      	nop
 8018d38:	3708      	adds	r7, #8
 8018d3a:	46bd      	mov	sp, r7
 8018d3c:	bd80      	pop	{r7, pc}
 8018d3e:	bf00      	nop
 8018d40:	40005400 	.word	0x40005400
 8018d44:	40023800 	.word	0x40023800
 8018d48:	40020400 	.word	0x40020400
 8018d4c:	40005c00 	.word	0x40005c00
 8018d50:	40021c00 	.word	0x40021c00

08018d54 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8018d54:	b580      	push	{r7, lr}
 8018d56:	b08c      	sub	sp, #48	; 0x30
 8018d58:	af00      	add	r7, sp, #0
 8018d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018d5c:	f107 031c 	add.w	r3, r7, #28
 8018d60:	2200      	movs	r2, #0
 8018d62:	601a      	str	r2, [r3, #0]
 8018d64:	605a      	str	r2, [r3, #4]
 8018d66:	609a      	str	r2, [r3, #8]
 8018d68:	60da      	str	r2, [r3, #12]
 8018d6a:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8018d6c:	687b      	ldr	r3, [r7, #4]
 8018d6e:	681b      	ldr	r3, [r3, #0]
 8018d70:	4a3b      	ldr	r2, [pc, #236]	; (8018e60 <HAL_QSPI_MspInit+0x10c>)
 8018d72:	4293      	cmp	r3, r2
 8018d74:	d170      	bne.n	8018e58 <HAL_QSPI_MspInit+0x104>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8018d76:	4b3b      	ldr	r3, [pc, #236]	; (8018e64 <HAL_QSPI_MspInit+0x110>)
 8018d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018d7a:	4a3a      	ldr	r2, [pc, #232]	; (8018e64 <HAL_QSPI_MspInit+0x110>)
 8018d7c:	f043 0302 	orr.w	r3, r3, #2
 8018d80:	6393      	str	r3, [r2, #56]	; 0x38
 8018d82:	4b38      	ldr	r3, [pc, #224]	; (8018e64 <HAL_QSPI_MspInit+0x110>)
 8018d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8018d86:	f003 0302 	and.w	r3, r3, #2
 8018d8a:	61bb      	str	r3, [r7, #24]
 8018d8c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8018d8e:	4b35      	ldr	r3, [pc, #212]	; (8018e64 <HAL_QSPI_MspInit+0x110>)
 8018d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018d92:	4a34      	ldr	r2, [pc, #208]	; (8018e64 <HAL_QSPI_MspInit+0x110>)
 8018d94:	f043 0310 	orr.w	r3, r3, #16
 8018d98:	6313      	str	r3, [r2, #48]	; 0x30
 8018d9a:	4b32      	ldr	r3, [pc, #200]	; (8018e64 <HAL_QSPI_MspInit+0x110>)
 8018d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018d9e:	f003 0310 	and.w	r3, r3, #16
 8018da2:	617b      	str	r3, [r7, #20]
 8018da4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8018da6:	4b2f      	ldr	r3, [pc, #188]	; (8018e64 <HAL_QSPI_MspInit+0x110>)
 8018da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018daa:	4a2e      	ldr	r2, [pc, #184]	; (8018e64 <HAL_QSPI_MspInit+0x110>)
 8018dac:	f043 0302 	orr.w	r3, r3, #2
 8018db0:	6313      	str	r3, [r2, #48]	; 0x30
 8018db2:	4b2c      	ldr	r3, [pc, #176]	; (8018e64 <HAL_QSPI_MspInit+0x110>)
 8018db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018db6:	f003 0302 	and.w	r3, r3, #2
 8018dba:	613b      	str	r3, [r7, #16]
 8018dbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8018dbe:	4b29      	ldr	r3, [pc, #164]	; (8018e64 <HAL_QSPI_MspInit+0x110>)
 8018dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018dc2:	4a28      	ldr	r2, [pc, #160]	; (8018e64 <HAL_QSPI_MspInit+0x110>)
 8018dc4:	f043 0308 	orr.w	r3, r3, #8
 8018dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8018dca:	4b26      	ldr	r3, [pc, #152]	; (8018e64 <HAL_QSPI_MspInit+0x110>)
 8018dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018dce:	f003 0308 	and.w	r3, r3, #8
 8018dd2:	60fb      	str	r3, [r7, #12]
 8018dd4:	68fb      	ldr	r3, [r7, #12]
    PB2     ------> QUADSPI_CLK
    PD12     ------> QUADSPI_BK1_IO1
    PD13     ------> QUADSPI_BK1_IO3
    PD11     ------> QUADSPI_BK1_IO0 
    */
    GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8018dd6:	2304      	movs	r3, #4
 8018dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018dda:	2302      	movs	r3, #2
 8018ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018dde:	2300      	movs	r3, #0
 8018de0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018de2:	2303      	movs	r3, #3
 8018de4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8018de6:	2309      	movs	r3, #9
 8018de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8018dea:	f107 031c 	add.w	r3, r7, #28
 8018dee:	4619      	mov	r1, r3
 8018df0:	481d      	ldr	r0, [pc, #116]	; (8018e68 <HAL_QSPI_MspInit+0x114>)
 8018df2:	f7e9 fcad 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8018df6:	2340      	movs	r3, #64	; 0x40
 8018df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018dfa:	2302      	movs	r3, #2
 8018dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018dfe:	2300      	movs	r3, #0
 8018e00:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018e02:	2303      	movs	r3, #3
 8018e04:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8018e06:	230a      	movs	r3, #10
 8018e08:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8018e0a:	f107 031c 	add.w	r3, r7, #28
 8018e0e:	4619      	mov	r1, r3
 8018e10:	4816      	ldr	r0, [pc, #88]	; (8018e6c <HAL_QSPI_MspInit+0x118>)
 8018e12:	f7e9 fc9d 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8018e16:	2304      	movs	r3, #4
 8018e18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018e1a:	2302      	movs	r3, #2
 8018e1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018e1e:	2300      	movs	r3, #0
 8018e20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018e22:	2303      	movs	r3, #3
 8018e24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8018e26:	2309      	movs	r3, #9
 8018e28:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8018e2a:	f107 031c 	add.w	r3, r7, #28
 8018e2e:	4619      	mov	r1, r3
 8018e30:	480e      	ldr	r0, [pc, #56]	; (8018e6c <HAL_QSPI_MspInit+0x118>)
 8018e32:	f7e9 fc8d 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D3_Pin|QSPI_D0_Pin;
 8018e36:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8018e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018e3c:	2302      	movs	r3, #2
 8018e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018e40:	2300      	movs	r3, #0
 8018e42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018e44:	2303      	movs	r3, #3
 8018e46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8018e48:	2309      	movs	r3, #9
 8018e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8018e4c:	f107 031c 	add.w	r3, r7, #28
 8018e50:	4619      	mov	r1, r3
 8018e52:	4807      	ldr	r0, [pc, #28]	; (8018e70 <HAL_QSPI_MspInit+0x11c>)
 8018e54:	f7e9 fc7c 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8018e58:	bf00      	nop
 8018e5a:	3730      	adds	r7, #48	; 0x30
 8018e5c:	46bd      	mov	sp, r7
 8018e5e:	bd80      	pop	{r7, pc}
 8018e60:	a0001000 	.word	0xa0001000
 8018e64:	40023800 	.word	0x40023800
 8018e68:	40021000 	.word	0x40021000
 8018e6c:	40020400 	.word	0x40020400
 8018e70:	40020c00 	.word	0x40020c00

08018e74 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8018e74:	b480      	push	{r7}
 8018e76:	b083      	sub	sp, #12
 8018e78:	af00      	add	r7, sp, #0
 8018e7a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8018e7c:	687b      	ldr	r3, [r7, #4]
 8018e7e:	681b      	ldr	r3, [r3, #0]
 8018e80:	4a07      	ldr	r2, [pc, #28]	; (8018ea0 <HAL_RTC_MspInit+0x2c>)
 8018e82:	4293      	cmp	r3, r2
 8018e84:	d105      	bne.n	8018e92 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8018e86:	4b07      	ldr	r3, [pc, #28]	; (8018ea4 <HAL_RTC_MspInit+0x30>)
 8018e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018e8a:	4a06      	ldr	r2, [pc, #24]	; (8018ea4 <HAL_RTC_MspInit+0x30>)
 8018e8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8018e90:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8018e92:	bf00      	nop
 8018e94:	370c      	adds	r7, #12
 8018e96:	46bd      	mov	sp, r7
 8018e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e9c:	4770      	bx	lr
 8018e9e:	bf00      	nop
 8018ea0:	40002800 	.word	0x40002800
 8018ea4:	40023800 	.word	0x40023800

08018ea8 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8018ea8:	b580      	push	{r7, lr}
 8018eaa:	b08a      	sub	sp, #40	; 0x28
 8018eac:	af00      	add	r7, sp, #0
 8018eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018eb0:	f107 0314 	add.w	r3, r7, #20
 8018eb4:	2200      	movs	r2, #0
 8018eb6:	601a      	str	r2, [r3, #0]
 8018eb8:	605a      	str	r2, [r3, #4]
 8018eba:	609a      	str	r2, [r3, #8]
 8018ebc:	60da      	str	r2, [r3, #12]
 8018ebe:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	4a25      	ldr	r2, [pc, #148]	; (8018f5c <HAL_SD_MspInit+0xb4>)
 8018ec6:	4293      	cmp	r3, r2
 8018ec8:	d144      	bne.n	8018f54 <HAL_SD_MspInit+0xac>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8018eca:	4b25      	ldr	r3, [pc, #148]	; (8018f60 <HAL_SD_MspInit+0xb8>)
 8018ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ece:	4a24      	ldr	r2, [pc, #144]	; (8018f60 <HAL_SD_MspInit+0xb8>)
 8018ed0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8018ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8018ed6:	4b22      	ldr	r3, [pc, #136]	; (8018f60 <HAL_SD_MspInit+0xb8>)
 8018ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8018ede:	613b      	str	r3, [r7, #16]
 8018ee0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8018ee2:	4b1f      	ldr	r3, [pc, #124]	; (8018f60 <HAL_SD_MspInit+0xb8>)
 8018ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ee6:	4a1e      	ldr	r2, [pc, #120]	; (8018f60 <HAL_SD_MspInit+0xb8>)
 8018ee8:	f043 0304 	orr.w	r3, r3, #4
 8018eec:	6313      	str	r3, [r2, #48]	; 0x30
 8018eee:	4b1c      	ldr	r3, [pc, #112]	; (8018f60 <HAL_SD_MspInit+0xb8>)
 8018ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ef2:	f003 0304 	and.w	r3, r3, #4
 8018ef6:	60fb      	str	r3, [r7, #12]
 8018ef8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8018efa:	4b19      	ldr	r3, [pc, #100]	; (8018f60 <HAL_SD_MspInit+0xb8>)
 8018efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018efe:	4a18      	ldr	r2, [pc, #96]	; (8018f60 <HAL_SD_MspInit+0xb8>)
 8018f00:	f043 0308 	orr.w	r3, r3, #8
 8018f04:	6313      	str	r3, [r2, #48]	; 0x30
 8018f06:	4b16      	ldr	r3, [pc, #88]	; (8018f60 <HAL_SD_MspInit+0xb8>)
 8018f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018f0a:	f003 0308 	and.w	r3, r3, #8
 8018f0e:	60bb      	str	r3, [r7, #8]
 8018f10:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0 
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9 
 8018f12:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8018f16:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018f18:	2302      	movs	r3, #2
 8018f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018f1c:	2300      	movs	r3, #0
 8018f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018f20:	2303      	movs	r3, #3
 8018f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8018f24:	230c      	movs	r3, #12
 8018f26:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8018f28:	f107 0314 	add.w	r3, r7, #20
 8018f2c:	4619      	mov	r1, r3
 8018f2e:	480d      	ldr	r0, [pc, #52]	; (8018f64 <HAL_SD_MspInit+0xbc>)
 8018f30:	f7e9 fc0e 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_CMD_Pin;
 8018f34:	2304      	movs	r3, #4
 8018f36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018f38:	2302      	movs	r3, #2
 8018f3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018f3c:	2300      	movs	r3, #0
 8018f3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8018f40:	2303      	movs	r3, #3
 8018f42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8018f44:	230c      	movs	r3, #12
 8018f46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_CMD_GPIO_Port, &GPIO_InitStruct);
 8018f48:	f107 0314 	add.w	r3, r7, #20
 8018f4c:	4619      	mov	r1, r3
 8018f4e:	4806      	ldr	r0, [pc, #24]	; (8018f68 <HAL_SD_MspInit+0xc0>)
 8018f50:	f7e9 fbfe 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8018f54:	bf00      	nop
 8018f56:	3728      	adds	r7, #40	; 0x28
 8018f58:	46bd      	mov	sp, r7
 8018f5a:	bd80      	pop	{r7, pc}
 8018f5c:	40012c00 	.word	0x40012c00
 8018f60:	40023800 	.word	0x40023800
 8018f64:	40020800 	.word	0x40020800
 8018f68:	40020c00 	.word	0x40020c00

08018f6c <HAL_SPDIFRX_MspInit>:
* This function configures the hardware resources used in this example
* @param hspdifrx: SPDIFRX handle pointer
* @retval None
*/
void HAL_SPDIFRX_MspInit(SPDIFRX_HandleTypeDef* hspdifrx)
{
 8018f6c:	b580      	push	{r7, lr}
 8018f6e:	b08a      	sub	sp, #40	; 0x28
 8018f70:	af00      	add	r7, sp, #0
 8018f72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018f74:	f107 0314 	add.w	r3, r7, #20
 8018f78:	2200      	movs	r2, #0
 8018f7a:	601a      	str	r2, [r3, #0]
 8018f7c:	605a      	str	r2, [r3, #4]
 8018f7e:	609a      	str	r2, [r3, #8]
 8018f80:	60da      	str	r2, [r3, #12]
 8018f82:	611a      	str	r2, [r3, #16]
  if(hspdifrx->Instance==SPDIFRX)
 8018f84:	687b      	ldr	r3, [r7, #4]
 8018f86:	681b      	ldr	r3, [r3, #0]
 8018f88:	f1b3 2f40 	cmp.w	r3, #1073758208	; 0x40004000
 8018f8c:	d127      	bne.n	8018fde <HAL_SPDIFRX_MspInit+0x72>
  {
  /* USER CODE BEGIN SPDIFRX_MspInit 0 */

  /* USER CODE END SPDIFRX_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPDIFRX_CLK_ENABLE();
 8018f8e:	4b16      	ldr	r3, [pc, #88]	; (8018fe8 <HAL_SPDIFRX_MspInit+0x7c>)
 8018f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f92:	4a15      	ldr	r2, [pc, #84]	; (8018fe8 <HAL_SPDIFRX_MspInit+0x7c>)
 8018f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018f98:	6413      	str	r3, [r2, #64]	; 0x40
 8018f9a:	4b13      	ldr	r3, [pc, #76]	; (8018fe8 <HAL_SPDIFRX_MspInit+0x7c>)
 8018f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018fa2:	613b      	str	r3, [r7, #16]
 8018fa4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8018fa6:	4b10      	ldr	r3, [pc, #64]	; (8018fe8 <HAL_SPDIFRX_MspInit+0x7c>)
 8018fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018faa:	4a0f      	ldr	r2, [pc, #60]	; (8018fe8 <HAL_SPDIFRX_MspInit+0x7c>)
 8018fac:	f043 0308 	orr.w	r3, r3, #8
 8018fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8018fb2:	4b0d      	ldr	r3, [pc, #52]	; (8018fe8 <HAL_SPDIFRX_MspInit+0x7c>)
 8018fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018fb6:	f003 0308 	and.w	r3, r3, #8
 8018fba:	60fb      	str	r3, [r7, #12]
 8018fbc:	68fb      	ldr	r3, [r7, #12]
    /**SPDIFRX GPIO Configuration    
    PD7     ------> SPDIFRX_IN0 
    */
    GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 8018fbe:	2380      	movs	r3, #128	; 0x80
 8018fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018fc2:	2302      	movs	r3, #2
 8018fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018fc6:	2300      	movs	r3, #0
 8018fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018fca:	2300      	movs	r3, #0
 8018fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 8018fce:	2308      	movs	r3, #8
 8018fd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8018fd2:	f107 0314 	add.w	r3, r7, #20
 8018fd6:	4619      	mov	r1, r3
 8018fd8:	4804      	ldr	r0, [pc, #16]	; (8018fec <HAL_SPDIFRX_MspInit+0x80>)
 8018fda:	f7e9 fbb9 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPDIFRX_MspInit 1 */

  /* USER CODE END SPDIFRX_MspInit 1 */
  }

}
 8018fde:	bf00      	nop
 8018fe0:	3728      	adds	r7, #40	; 0x28
 8018fe2:	46bd      	mov	sp, r7
 8018fe4:	bd80      	pop	{r7, pc}
 8018fe6:	bf00      	nop
 8018fe8:	40023800 	.word	0x40023800
 8018fec:	40020c00 	.word	0x40020c00

08018ff0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8018ff0:	b580      	push	{r7, lr}
 8018ff2:	b08a      	sub	sp, #40	; 0x28
 8018ff4:	af00      	add	r7, sp, #0
 8018ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018ff8:	f107 0314 	add.w	r3, r7, #20
 8018ffc:	2200      	movs	r2, #0
 8018ffe:	601a      	str	r2, [r3, #0]
 8019000:	605a      	str	r2, [r3, #4]
 8019002:	609a      	str	r2, [r3, #8]
 8019004:	60da      	str	r2, [r3, #12]
 8019006:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	681b      	ldr	r3, [r3, #0]
 801900c:	4a25      	ldr	r2, [pc, #148]	; (80190a4 <HAL_SPI_MspInit+0xb4>)
 801900e:	4293      	cmp	r3, r2
 8019010:	d144      	bne.n	801909c <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8019012:	4b25      	ldr	r3, [pc, #148]	; (80190a8 <HAL_SPI_MspInit+0xb8>)
 8019014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019016:	4a24      	ldr	r2, [pc, #144]	; (80190a8 <HAL_SPI_MspInit+0xb8>)
 8019018:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801901c:	6413      	str	r3, [r2, #64]	; 0x40
 801901e:	4b22      	ldr	r3, [pc, #136]	; (80190a8 <HAL_SPI_MspInit+0xb8>)
 8019020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019022:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019026:	613b      	str	r3, [r7, #16]
 8019028:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOI_CLK_ENABLE();
 801902a:	4b1f      	ldr	r3, [pc, #124]	; (80190a8 <HAL_SPI_MspInit+0xb8>)
 801902c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801902e:	4a1e      	ldr	r2, [pc, #120]	; (80190a8 <HAL_SPI_MspInit+0xb8>)
 8019030:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019034:	6313      	str	r3, [r2, #48]	; 0x30
 8019036:	4b1c      	ldr	r3, [pc, #112]	; (80190a8 <HAL_SPI_MspInit+0xb8>)
 8019038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801903a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801903e:	60fb      	str	r3, [r7, #12]
 8019040:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8019042:	4b19      	ldr	r3, [pc, #100]	; (80190a8 <HAL_SPI_MspInit+0xb8>)
 8019044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019046:	4a18      	ldr	r2, [pc, #96]	; (80190a8 <HAL_SPI_MspInit+0xb8>)
 8019048:	f043 0302 	orr.w	r3, r3, #2
 801904c:	6313      	str	r3, [r2, #48]	; 0x30
 801904e:	4b16      	ldr	r3, [pc, #88]	; (80190a8 <HAL_SPI_MspInit+0xb8>)
 8019050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019052:	f003 0302 	and.w	r3, r3, #2
 8019056:	60bb      	str	r3, [r7, #8]
 8019058:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration    
    PI1     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI 
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 801905a:	2302      	movs	r3, #2
 801905c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801905e:	2302      	movs	r3, #2
 8019060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019062:	2300      	movs	r3, #0
 8019064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8019066:	2300      	movs	r3, #0
 8019068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801906a:	2305      	movs	r3, #5
 801906c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 801906e:	f107 0314 	add.w	r3, r7, #20
 8019072:	4619      	mov	r1, r3
 8019074:	480d      	ldr	r0, [pc, #52]	; (80190ac <HAL_SPI_MspInit+0xbc>)
 8019076:	f7e9 fb6b 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 801907a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 801907e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019080:	2302      	movs	r3, #2
 8019082:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019084:	2300      	movs	r3, #0
 8019086:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8019088:	2300      	movs	r3, #0
 801908a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 801908c:	2305      	movs	r3, #5
 801908e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8019090:	f107 0314 	add.w	r3, r7, #20
 8019094:	4619      	mov	r1, r3
 8019096:	4806      	ldr	r0, [pc, #24]	; (80190b0 <HAL_SPI_MspInit+0xc0>)
 8019098:	f7e9 fb5a 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 801909c:	bf00      	nop
 801909e:	3728      	adds	r7, #40	; 0x28
 80190a0:	46bd      	mov	sp, r7
 80190a2:	bd80      	pop	{r7, pc}
 80190a4:	40003800 	.word	0x40003800
 80190a8:	40023800 	.word	0x40023800
 80190ac:	40022000 	.word	0x40022000
 80190b0:	40020400 	.word	0x40020400

080190b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80190b4:	b480      	push	{r7}
 80190b6:	b087      	sub	sp, #28
 80190b8:	af00      	add	r7, sp, #0
 80190ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80190bc:	687b      	ldr	r3, [r7, #4]
 80190be:	681b      	ldr	r3, [r3, #0]
 80190c0:	4a25      	ldr	r2, [pc, #148]	; (8019158 <HAL_TIM_Base_MspInit+0xa4>)
 80190c2:	4293      	cmp	r3, r2
 80190c4:	d10c      	bne.n	80190e0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80190c6:	4b25      	ldr	r3, [pc, #148]	; (801915c <HAL_TIM_Base_MspInit+0xa8>)
 80190c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80190ca:	4a24      	ldr	r2, [pc, #144]	; (801915c <HAL_TIM_Base_MspInit+0xa8>)
 80190cc:	f043 0301 	orr.w	r3, r3, #1
 80190d0:	6453      	str	r3, [r2, #68]	; 0x44
 80190d2:	4b22      	ldr	r3, [pc, #136]	; (801915c <HAL_TIM_Base_MspInit+0xa8>)
 80190d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80190d6:	f003 0301 	and.w	r3, r3, #1
 80190da:	617b      	str	r3, [r7, #20]
 80190dc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80190de:	e034      	b.n	801914a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM3)
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	681b      	ldr	r3, [r3, #0]
 80190e4:	4a1e      	ldr	r2, [pc, #120]	; (8019160 <HAL_TIM_Base_MspInit+0xac>)
 80190e6:	4293      	cmp	r3, r2
 80190e8:	d10c      	bne.n	8019104 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80190ea:	4b1c      	ldr	r3, [pc, #112]	; (801915c <HAL_TIM_Base_MspInit+0xa8>)
 80190ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80190ee:	4a1b      	ldr	r2, [pc, #108]	; (801915c <HAL_TIM_Base_MspInit+0xa8>)
 80190f0:	f043 0302 	orr.w	r3, r3, #2
 80190f4:	6413      	str	r3, [r2, #64]	; 0x40
 80190f6:	4b19      	ldr	r3, [pc, #100]	; (801915c <HAL_TIM_Base_MspInit+0xa8>)
 80190f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80190fa:	f003 0302 	and.w	r3, r3, #2
 80190fe:	613b      	str	r3, [r7, #16]
 8019100:	693b      	ldr	r3, [r7, #16]
}
 8019102:	e022      	b.n	801914a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM5)
 8019104:	687b      	ldr	r3, [r7, #4]
 8019106:	681b      	ldr	r3, [r3, #0]
 8019108:	4a16      	ldr	r2, [pc, #88]	; (8019164 <HAL_TIM_Base_MspInit+0xb0>)
 801910a:	4293      	cmp	r3, r2
 801910c:	d10c      	bne.n	8019128 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM5_CLK_ENABLE();
 801910e:	4b13      	ldr	r3, [pc, #76]	; (801915c <HAL_TIM_Base_MspInit+0xa8>)
 8019110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019112:	4a12      	ldr	r2, [pc, #72]	; (801915c <HAL_TIM_Base_MspInit+0xa8>)
 8019114:	f043 0308 	orr.w	r3, r3, #8
 8019118:	6413      	str	r3, [r2, #64]	; 0x40
 801911a:	4b10      	ldr	r3, [pc, #64]	; (801915c <HAL_TIM_Base_MspInit+0xa8>)
 801911c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801911e:	f003 0308 	and.w	r3, r3, #8
 8019122:	60fb      	str	r3, [r7, #12]
 8019124:	68fb      	ldr	r3, [r7, #12]
}
 8019126:	e010      	b.n	801914a <HAL_TIM_Base_MspInit+0x96>
  else if(htim_base->Instance==TIM8)
 8019128:	687b      	ldr	r3, [r7, #4]
 801912a:	681b      	ldr	r3, [r3, #0]
 801912c:	4a0e      	ldr	r2, [pc, #56]	; (8019168 <HAL_TIM_Base_MspInit+0xb4>)
 801912e:	4293      	cmp	r3, r2
 8019130:	d10b      	bne.n	801914a <HAL_TIM_Base_MspInit+0x96>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8019132:	4b0a      	ldr	r3, [pc, #40]	; (801915c <HAL_TIM_Base_MspInit+0xa8>)
 8019134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019136:	4a09      	ldr	r2, [pc, #36]	; (801915c <HAL_TIM_Base_MspInit+0xa8>)
 8019138:	f043 0302 	orr.w	r3, r3, #2
 801913c:	6453      	str	r3, [r2, #68]	; 0x44
 801913e:	4b07      	ldr	r3, [pc, #28]	; (801915c <HAL_TIM_Base_MspInit+0xa8>)
 8019140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019142:	f003 0302 	and.w	r3, r3, #2
 8019146:	60bb      	str	r3, [r7, #8]
 8019148:	68bb      	ldr	r3, [r7, #8]
}
 801914a:	bf00      	nop
 801914c:	371c      	adds	r7, #28
 801914e:	46bd      	mov	sp, r7
 8019150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019154:	4770      	bx	lr
 8019156:	bf00      	nop
 8019158:	40010000 	.word	0x40010000
 801915c:	40023800 	.word	0x40023800
 8019160:	40000400 	.word	0x40000400
 8019164:	40000c00 	.word	0x40000c00
 8019168:	40010400 	.word	0x40010400

0801916c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 801916c:	b480      	push	{r7}
 801916e:	b085      	sub	sp, #20
 8019170:	af00      	add	r7, sp, #0
 8019172:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM12)
 8019174:	687b      	ldr	r3, [r7, #4]
 8019176:	681b      	ldr	r3, [r3, #0]
 8019178:	4a0a      	ldr	r2, [pc, #40]	; (80191a4 <HAL_TIM_PWM_MspInit+0x38>)
 801917a:	4293      	cmp	r3, r2
 801917c:	d10b      	bne.n	8019196 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM12_MspInit 0 */

  /* USER CODE END TIM12_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM12_CLK_ENABLE();
 801917e:	4b0a      	ldr	r3, [pc, #40]	; (80191a8 <HAL_TIM_PWM_MspInit+0x3c>)
 8019180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019182:	4a09      	ldr	r2, [pc, #36]	; (80191a8 <HAL_TIM_PWM_MspInit+0x3c>)
 8019184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019188:	6413      	str	r3, [r2, #64]	; 0x40
 801918a:	4b07      	ldr	r3, [pc, #28]	; (80191a8 <HAL_TIM_PWM_MspInit+0x3c>)
 801918c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801918e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019192:	60fb      	str	r3, [r7, #12]
 8019194:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8019196:	bf00      	nop
 8019198:	3714      	adds	r7, #20
 801919a:	46bd      	mov	sp, r7
 801919c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191a0:	4770      	bx	lr
 80191a2:	bf00      	nop
 80191a4:	40001800 	.word	0x40001800
 80191a8:	40023800 	.word	0x40023800

080191ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80191ac:	b580      	push	{r7, lr}
 80191ae:	b08c      	sub	sp, #48	; 0x30
 80191b0:	af00      	add	r7, sp, #0
 80191b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80191b4:	f107 031c 	add.w	r3, r7, #28
 80191b8:	2200      	movs	r2, #0
 80191ba:	601a      	str	r2, [r3, #0]
 80191bc:	605a      	str	r2, [r3, #4]
 80191be:	609a      	str	r2, [r3, #8]
 80191c0:	60da      	str	r2, [r3, #12]
 80191c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80191c4:	687b      	ldr	r3, [r7, #4]
 80191c6:	681b      	ldr	r3, [r3, #0]
 80191c8:	4a44      	ldr	r2, [pc, #272]	; (80192dc <HAL_TIM_MspPostInit+0x130>)
 80191ca:	4293      	cmp	r3, r2
 80191cc:	d11d      	bne.n	801920a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80191ce:	4b44      	ldr	r3, [pc, #272]	; (80192e0 <HAL_TIM_MspPostInit+0x134>)
 80191d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80191d2:	4a43      	ldr	r2, [pc, #268]	; (80192e0 <HAL_TIM_MspPostInit+0x134>)
 80191d4:	f043 0301 	orr.w	r3, r3, #1
 80191d8:	6313      	str	r3, [r2, #48]	; 0x30
 80191da:	4b41      	ldr	r3, [pc, #260]	; (80192e0 <HAL_TIM_MspPostInit+0x134>)
 80191dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80191de:	f003 0301 	and.w	r3, r3, #1
 80191e2:	61bb      	str	r3, [r7, #24]
 80191e4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 80191e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80191ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80191ec:	2302      	movs	r3, #2
 80191ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80191f0:	2300      	movs	r3, #0
 80191f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80191f4:	2300      	movs	r3, #0
 80191f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80191f8:	2301      	movs	r3, #1
 80191fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 80191fc:	f107 031c 	add.w	r3, r7, #28
 8019200:	4619      	mov	r1, r3
 8019202:	4838      	ldr	r0, [pc, #224]	; (80192e4 <HAL_TIM_MspPostInit+0x138>)
 8019204:	f7e9 faa4 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8019208:	e064      	b.n	80192d4 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM3)
 801920a:	687b      	ldr	r3, [r7, #4]
 801920c:	681b      	ldr	r3, [r3, #0]
 801920e:	4a36      	ldr	r2, [pc, #216]	; (80192e8 <HAL_TIM_MspPostInit+0x13c>)
 8019210:	4293      	cmp	r3, r2
 8019212:	d11c      	bne.n	801924e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8019214:	4b32      	ldr	r3, [pc, #200]	; (80192e0 <HAL_TIM_MspPostInit+0x134>)
 8019216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019218:	4a31      	ldr	r2, [pc, #196]	; (80192e0 <HAL_TIM_MspPostInit+0x134>)
 801921a:	f043 0302 	orr.w	r3, r3, #2
 801921e:	6313      	str	r3, [r2, #48]	; 0x30
 8019220:	4b2f      	ldr	r3, [pc, #188]	; (80192e0 <HAL_TIM_MspPostInit+0x134>)
 8019222:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019224:	f003 0302 	and.w	r3, r3, #2
 8019228:	617b      	str	r3, [r7, #20]
 801922a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 801922c:	2310      	movs	r3, #16
 801922e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019230:	2302      	movs	r3, #2
 8019232:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019234:	2300      	movs	r3, #0
 8019236:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8019238:	2300      	movs	r3, #0
 801923a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 801923c:	2302      	movs	r3, #2
 801923e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8019240:	f107 031c 	add.w	r3, r7, #28
 8019244:	4619      	mov	r1, r3
 8019246:	4829      	ldr	r0, [pc, #164]	; (80192ec <HAL_TIM_MspPostInit+0x140>)
 8019248:	f7e9 fa82 	bl	8002750 <HAL_GPIO_Init>
}
 801924c:	e042      	b.n	80192d4 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM5)
 801924e:	687b      	ldr	r3, [r7, #4]
 8019250:	681b      	ldr	r3, [r3, #0]
 8019252:	4a27      	ldr	r2, [pc, #156]	; (80192f0 <HAL_TIM_MspPostInit+0x144>)
 8019254:	4293      	cmp	r3, r2
 8019256:	d11c      	bne.n	8019292 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8019258:	4b21      	ldr	r3, [pc, #132]	; (80192e0 <HAL_TIM_MspPostInit+0x134>)
 801925a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801925c:	4a20      	ldr	r2, [pc, #128]	; (80192e0 <HAL_TIM_MspPostInit+0x134>)
 801925e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8019262:	6313      	str	r3, [r2, #48]	; 0x30
 8019264:	4b1e      	ldr	r3, [pc, #120]	; (80192e0 <HAL_TIM_MspPostInit+0x134>)
 8019266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801926c:	613b      	str	r3, [r7, #16]
 801926e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8019270:	2301      	movs	r3, #1
 8019272:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019274:	2302      	movs	r3, #2
 8019276:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019278:	2300      	movs	r3, #0
 801927a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801927c:	2300      	movs	r3, #0
 801927e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8019280:	2302      	movs	r3, #2
 8019282:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8019284:	f107 031c 	add.w	r3, r7, #28
 8019288:	4619      	mov	r1, r3
 801928a:	481a      	ldr	r0, [pc, #104]	; (80192f4 <HAL_TIM_MspPostInit+0x148>)
 801928c:	f7e9 fa60 	bl	8002750 <HAL_GPIO_Init>
}
 8019290:	e020      	b.n	80192d4 <HAL_TIM_MspPostInit+0x128>
  else if(htim->Instance==TIM12)
 8019292:	687b      	ldr	r3, [r7, #4]
 8019294:	681b      	ldr	r3, [r3, #0]
 8019296:	4a18      	ldr	r2, [pc, #96]	; (80192f8 <HAL_TIM_MspPostInit+0x14c>)
 8019298:	4293      	cmp	r3, r2
 801929a:	d11b      	bne.n	80192d4 <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 801929c:	4b10      	ldr	r3, [pc, #64]	; (80192e0 <HAL_TIM_MspPostInit+0x134>)
 801929e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80192a0:	4a0f      	ldr	r2, [pc, #60]	; (80192e0 <HAL_TIM_MspPostInit+0x134>)
 80192a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80192a6:	6313      	str	r3, [r2, #48]	; 0x30
 80192a8:	4b0d      	ldr	r3, [pc, #52]	; (80192e0 <HAL_TIM_MspPostInit+0x134>)
 80192aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80192ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80192b0:	60fb      	str	r3, [r7, #12]
 80192b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 80192b4:	2340      	movs	r3, #64	; 0x40
 80192b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80192b8:	2302      	movs	r3, #2
 80192ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80192bc:	2300      	movs	r3, #0
 80192be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80192c0:	2300      	movs	r3, #0
 80192c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80192c4:	2309      	movs	r3, #9
 80192c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 80192c8:	f107 031c 	add.w	r3, r7, #28
 80192cc:	4619      	mov	r1, r3
 80192ce:	480b      	ldr	r0, [pc, #44]	; (80192fc <HAL_TIM_MspPostInit+0x150>)
 80192d0:	f7e9 fa3e 	bl	8002750 <HAL_GPIO_Init>
}
 80192d4:	bf00      	nop
 80192d6:	3730      	adds	r7, #48	; 0x30
 80192d8:	46bd      	mov	sp, r7
 80192da:	bd80      	pop	{r7, pc}
 80192dc:	40010000 	.word	0x40010000
 80192e0:	40023800 	.word	0x40023800
 80192e4:	40020000 	.word	0x40020000
 80192e8:	40000400 	.word	0x40000400
 80192ec:	40020400 	.word	0x40020400
 80192f0:	40000c00 	.word	0x40000c00
 80192f4:	40022000 	.word	0x40022000
 80192f8:	40001800 	.word	0x40001800
 80192fc:	40021c00 	.word	0x40021c00

08019300 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8019300:	b580      	push	{r7, lr}
 8019302:	b08c      	sub	sp, #48	; 0x30
 8019304:	af00      	add	r7, sp, #0
 8019306:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8019308:	f107 031c 	add.w	r3, r7, #28
 801930c:	2200      	movs	r2, #0
 801930e:	601a      	str	r2, [r3, #0]
 8019310:	605a      	str	r2, [r3, #4]
 8019312:	609a      	str	r2, [r3, #8]
 8019314:	60da      	str	r2, [r3, #12]
 8019316:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8019318:	687b      	ldr	r3, [r7, #4]
 801931a:	681b      	ldr	r3, [r3, #0]
 801931c:	4a3c      	ldr	r2, [pc, #240]	; (8019410 <HAL_UART_MspInit+0x110>)
 801931e:	4293      	cmp	r3, r2
 8019320:	d145      	bne.n	80193ae <HAL_UART_MspInit+0xae>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8019322:	4b3c      	ldr	r3, [pc, #240]	; (8019414 <HAL_UART_MspInit+0x114>)
 8019324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019326:	4a3b      	ldr	r2, [pc, #236]	; (8019414 <HAL_UART_MspInit+0x114>)
 8019328:	f043 0310 	orr.w	r3, r3, #16
 801932c:	6453      	str	r3, [r2, #68]	; 0x44
 801932e:	4b39      	ldr	r3, [pc, #228]	; (8019414 <HAL_UART_MspInit+0x114>)
 8019330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019332:	f003 0310 	and.w	r3, r3, #16
 8019336:	61bb      	str	r3, [r7, #24]
 8019338:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801933a:	4b36      	ldr	r3, [pc, #216]	; (8019414 <HAL_UART_MspInit+0x114>)
 801933c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801933e:	4a35      	ldr	r2, [pc, #212]	; (8019414 <HAL_UART_MspInit+0x114>)
 8019340:	f043 0302 	orr.w	r3, r3, #2
 8019344:	6313      	str	r3, [r2, #48]	; 0x30
 8019346:	4b33      	ldr	r3, [pc, #204]	; (8019414 <HAL_UART_MspInit+0x114>)
 8019348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801934a:	f003 0302 	and.w	r3, r3, #2
 801934e:	617b      	str	r3, [r7, #20]
 8019350:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019352:	4b30      	ldr	r3, [pc, #192]	; (8019414 <HAL_UART_MspInit+0x114>)
 8019354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019356:	4a2f      	ldr	r2, [pc, #188]	; (8019414 <HAL_UART_MspInit+0x114>)
 8019358:	f043 0301 	orr.w	r3, r3, #1
 801935c:	6313      	str	r3, [r2, #48]	; 0x30
 801935e:	4b2d      	ldr	r3, [pc, #180]	; (8019414 <HAL_UART_MspInit+0x114>)
 8019360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019362:	f003 0301 	and.w	r3, r3, #1
 8019366:	613b      	str	r3, [r7, #16]
 8019368:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration    
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX 
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 801936a:	2380      	movs	r3, #128	; 0x80
 801936c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801936e:	2302      	movs	r3, #2
 8019370:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019372:	2300      	movs	r3, #0
 8019374:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8019376:	2300      	movs	r3, #0
 8019378:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801937a:	2307      	movs	r3, #7
 801937c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 801937e:	f107 031c 	add.w	r3, r7, #28
 8019382:	4619      	mov	r1, r3
 8019384:	4824      	ldr	r0, [pc, #144]	; (8019418 <HAL_UART_MspInit+0x118>)
 8019386:	f7e9 f9e3 	bl	8002750 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 801938a:	f44f 7300 	mov.w	r3, #512	; 0x200
 801938e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019390:	2302      	movs	r3, #2
 8019392:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019394:	2300      	movs	r3, #0
 8019396:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8019398:	2300      	movs	r3, #0
 801939a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801939c:	2307      	movs	r3, #7
 801939e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80193a0:	f107 031c 	add.w	r3, r7, #28
 80193a4:	4619      	mov	r1, r3
 80193a6:	481d      	ldr	r0, [pc, #116]	; (801941c <HAL_UART_MspInit+0x11c>)
 80193a8:	f7e9 f9d2 	bl	8002750 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80193ac:	e02c      	b.n	8019408 <HAL_UART_MspInit+0x108>
  else if(huart->Instance==USART6)
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	681b      	ldr	r3, [r3, #0]
 80193b2:	4a1b      	ldr	r2, [pc, #108]	; (8019420 <HAL_UART_MspInit+0x120>)
 80193b4:	4293      	cmp	r3, r2
 80193b6:	d127      	bne.n	8019408 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART6_CLK_ENABLE();
 80193b8:	4b16      	ldr	r3, [pc, #88]	; (8019414 <HAL_UART_MspInit+0x114>)
 80193ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80193bc:	4a15      	ldr	r2, [pc, #84]	; (8019414 <HAL_UART_MspInit+0x114>)
 80193be:	f043 0320 	orr.w	r3, r3, #32
 80193c2:	6453      	str	r3, [r2, #68]	; 0x44
 80193c4:	4b13      	ldr	r3, [pc, #76]	; (8019414 <HAL_UART_MspInit+0x114>)
 80193c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80193c8:	f003 0320 	and.w	r3, r3, #32
 80193cc:	60fb      	str	r3, [r7, #12]
 80193ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80193d0:	4b10      	ldr	r3, [pc, #64]	; (8019414 <HAL_UART_MspInit+0x114>)
 80193d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80193d4:	4a0f      	ldr	r2, [pc, #60]	; (8019414 <HAL_UART_MspInit+0x114>)
 80193d6:	f043 0304 	orr.w	r3, r3, #4
 80193da:	6313      	str	r3, [r2, #48]	; 0x30
 80193dc:	4b0d      	ldr	r3, [pc, #52]	; (8019414 <HAL_UART_MspInit+0x114>)
 80193de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80193e0:	f003 0304 	and.w	r3, r3, #4
 80193e4:	60bb      	str	r3, [r7, #8]
 80193e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin|ARDUINO_TX_D1_Pin;
 80193e8:	23c0      	movs	r3, #192	; 0xc0
 80193ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80193ec:	2302      	movs	r3, #2
 80193ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80193f0:	2300      	movs	r3, #0
 80193f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80193f4:	2303      	movs	r3, #3
 80193f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80193f8:	2308      	movs	r3, #8
 80193fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80193fc:	f107 031c 	add.w	r3, r7, #28
 8019400:	4619      	mov	r1, r3
 8019402:	4808      	ldr	r0, [pc, #32]	; (8019424 <HAL_UART_MspInit+0x124>)
 8019404:	f7e9 f9a4 	bl	8002750 <HAL_GPIO_Init>
}
 8019408:	bf00      	nop
 801940a:	3730      	adds	r7, #48	; 0x30
 801940c:	46bd      	mov	sp, r7
 801940e:	bd80      	pop	{r7, pc}
 8019410:	40011000 	.word	0x40011000
 8019414:	40023800 	.word	0x40023800
 8019418:	40020400 	.word	0x40020400
 801941c:	40020000 	.word	0x40020000
 8019420:	40011400 	.word	0x40011400
 8019424:	40020800 	.word	0x40020800

08019428 <HAL_SAI_MspInit>:
}

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8019428:	b580      	push	{r7, lr}
 801942a:	b08a      	sub	sp, #40	; 0x28
 801942c:	af00      	add	r7, sp, #0
 801942e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	681b      	ldr	r3, [r3, #0]
 8019434:	4a2b      	ldr	r2, [pc, #172]	; (80194e4 <HAL_SAI_MspInit+0xbc>)
 8019436:	4293      	cmp	r3, r2
 8019438:	d124      	bne.n	8019484 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 801943a:	4b2b      	ldr	r3, [pc, #172]	; (80194e8 <HAL_SAI_MspInit+0xc0>)
 801943c:	681b      	ldr	r3, [r3, #0]
 801943e:	2b00      	cmp	r3, #0
 8019440:	d10b      	bne.n	801945a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8019442:	4b2a      	ldr	r3, [pc, #168]	; (80194ec <HAL_SAI_MspInit+0xc4>)
 8019444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019446:	4a29      	ldr	r2, [pc, #164]	; (80194ec <HAL_SAI_MspInit+0xc4>)
 8019448:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801944c:	6453      	str	r3, [r2, #68]	; 0x44
 801944e:	4b27      	ldr	r3, [pc, #156]	; (80194ec <HAL_SAI_MspInit+0xc4>)
 8019450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019452:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8019456:	613b      	str	r3, [r7, #16]
 8019458:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 801945a:	4b23      	ldr	r3, [pc, #140]	; (80194e8 <HAL_SAI_MspInit+0xc0>)
 801945c:	681b      	ldr	r3, [r3, #0]
 801945e:	3301      	adds	r3, #1
 8019460:	4a21      	ldr	r2, [pc, #132]	; (80194e8 <HAL_SAI_MspInit+0xc0>)
 8019462:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A 
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8019464:	23f0      	movs	r3, #240	; 0xf0
 8019466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019468:	2302      	movs	r3, #2
 801946a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801946c:	2300      	movs	r3, #0
 801946e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8019470:	2300      	movs	r3, #0
 8019472:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8019474:	230a      	movs	r3, #10
 8019476:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8019478:	f107 0314 	add.w	r3, r7, #20
 801947c:	4619      	mov	r1, r3
 801947e:	481c      	ldr	r0, [pc, #112]	; (80194f0 <HAL_SAI_MspInit+0xc8>)
 8019480:	f7e9 f966 	bl	8002750 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI2_Block_B)
 8019484:	687b      	ldr	r3, [r7, #4]
 8019486:	681b      	ldr	r3, [r3, #0]
 8019488:	4a1a      	ldr	r2, [pc, #104]	; (80194f4 <HAL_SAI_MspInit+0xcc>)
 801948a:	4293      	cmp	r3, r2
 801948c:	d125      	bne.n	80194da <HAL_SAI_MspInit+0xb2>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 801948e:	4b16      	ldr	r3, [pc, #88]	; (80194e8 <HAL_SAI_MspInit+0xc0>)
 8019490:	681b      	ldr	r3, [r3, #0]
 8019492:	2b00      	cmp	r3, #0
 8019494:	d10b      	bne.n	80194ae <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8019496:	4b15      	ldr	r3, [pc, #84]	; (80194ec <HAL_SAI_MspInit+0xc4>)
 8019498:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801949a:	4a14      	ldr	r2, [pc, #80]	; (80194ec <HAL_SAI_MspInit+0xc4>)
 801949c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80194a0:	6453      	str	r3, [r2, #68]	; 0x44
 80194a2:	4b12      	ldr	r3, [pc, #72]	; (80194ec <HAL_SAI_MspInit+0xc4>)
 80194a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80194a6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80194aa:	60fb      	str	r3, [r7, #12]
 80194ac:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80194ae:	4b0e      	ldr	r3, [pc, #56]	; (80194e8 <HAL_SAI_MspInit+0xc0>)
 80194b0:	681b      	ldr	r3, [r3, #0]
 80194b2:	3301      	adds	r3, #1
 80194b4:	4a0c      	ldr	r2, [pc, #48]	; (80194e8 <HAL_SAI_MspInit+0xc0>)
 80194b6:	6013      	str	r3, [r2, #0]
    
    /**SAI2_B_Block_B GPIO Configuration    
    PG10     ------> SAI2_SD_B 
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80194b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80194bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80194be:	2302      	movs	r3, #2
 80194c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80194c2:	2300      	movs	r3, #0
 80194c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80194c6:	2300      	movs	r3, #0
 80194c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80194ca:	230a      	movs	r3, #10
 80194cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80194ce:	f107 0314 	add.w	r3, r7, #20
 80194d2:	4619      	mov	r1, r3
 80194d4:	4808      	ldr	r0, [pc, #32]	; (80194f8 <HAL_SAI_MspInit+0xd0>)
 80194d6:	f7e9 f93b 	bl	8002750 <HAL_GPIO_Init>

    }
}
 80194da:	bf00      	nop
 80194dc:	3728      	adds	r7, #40	; 0x28
 80194de:	46bd      	mov	sp, r7
 80194e0:	bd80      	pop	{r7, pc}
 80194e2:	bf00      	nop
 80194e4:	40015c04 	.word	0x40015c04
 80194e8:	20009c0c 	.word	0x20009c0c
 80194ec:	40023800 	.word	0x40023800
 80194f0:	40022000 	.word	0x40022000
 80194f4:	40015c24 	.word	0x40015c24
 80194f8:	40021800 	.word	0x40021800

080194fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80194fc:	b580      	push	{r7, lr}
 80194fe:	b08c      	sub	sp, #48	; 0x30
 8019500:	af00      	add	r7, sp, #0
 8019502:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8019504:	2300      	movs	r3, #0
 8019506:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8019508:	2300      	movs	r3, #0
 801950a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 801950c:	2200      	movs	r2, #0
 801950e:	6879      	ldr	r1, [r7, #4]
 8019510:	2036      	movs	r0, #54	; 0x36
 8019512:	f7e7 fe8b 	bl	800122c <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8019516:	2036      	movs	r0, #54	; 0x36
 8019518:	f7e7 fea4 	bl	8001264 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 801951c:	4b1f      	ldr	r3, [pc, #124]	; (801959c <HAL_InitTick+0xa0>)
 801951e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019520:	4a1e      	ldr	r2, [pc, #120]	; (801959c <HAL_InitTick+0xa0>)
 8019522:	f043 0310 	orr.w	r3, r3, #16
 8019526:	6413      	str	r3, [r2, #64]	; 0x40
 8019528:	4b1c      	ldr	r3, [pc, #112]	; (801959c <HAL_InitTick+0xa0>)
 801952a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801952c:	f003 0310 	and.w	r3, r3, #16
 8019530:	60fb      	str	r3, [r7, #12]
 8019532:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8019534:	f107 0210 	add.w	r2, r7, #16
 8019538:	f107 0314 	add.w	r3, r7, #20
 801953c:	4611      	mov	r1, r2
 801953e:	4618      	mov	r0, r3
 8019540:	f7ec ff9a 	bl	8006478 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8019544:	f7ec ff70 	bl	8006428 <HAL_RCC_GetPCLK1Freq>
 8019548:	4603      	mov	r3, r0
 801954a:	005b      	lsls	r3, r3, #1
 801954c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 801954e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019550:	4a13      	ldr	r2, [pc, #76]	; (80195a0 <HAL_InitTick+0xa4>)
 8019552:	fba2 2303 	umull	r2, r3, r2, r3
 8019556:	0c9b      	lsrs	r3, r3, #18
 8019558:	3b01      	subs	r3, #1
 801955a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 801955c:	4b11      	ldr	r3, [pc, #68]	; (80195a4 <HAL_InitTick+0xa8>)
 801955e:	4a12      	ldr	r2, [pc, #72]	; (80195a8 <HAL_InitTick+0xac>)
 8019560:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8019562:	4b10      	ldr	r3, [pc, #64]	; (80195a4 <HAL_InitTick+0xa8>)
 8019564:	f240 32e7 	movw	r2, #999	; 0x3e7
 8019568:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 801956a:	4a0e      	ldr	r2, [pc, #56]	; (80195a4 <HAL_InitTick+0xa8>)
 801956c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801956e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8019570:	4b0c      	ldr	r3, [pc, #48]	; (80195a4 <HAL_InitTick+0xa8>)
 8019572:	2200      	movs	r2, #0
 8019574:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8019576:	4b0b      	ldr	r3, [pc, #44]	; (80195a4 <HAL_InitTick+0xa8>)
 8019578:	2200      	movs	r2, #0
 801957a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 801957c:	4809      	ldr	r0, [pc, #36]	; (80195a4 <HAL_InitTick+0xa8>)
 801957e:	f7ef fc67 	bl	8008e50 <HAL_TIM_Base_Init>
 8019582:	4603      	mov	r3, r0
 8019584:	2b00      	cmp	r3, #0
 8019586:	d104      	bne.n	8019592 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8019588:	4806      	ldr	r0, [pc, #24]	; (80195a4 <HAL_InitTick+0xa8>)
 801958a:	f7ef fcb7 	bl	8008efc <HAL_TIM_Base_Start_IT>
 801958e:	4603      	mov	r3, r0
 8019590:	e000      	b.n	8019594 <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8019592:	2301      	movs	r3, #1
}
 8019594:	4618      	mov	r0, r3
 8019596:	3730      	adds	r7, #48	; 0x30
 8019598:	46bd      	mov	sp, r7
 801959a:	bd80      	pop	{r7, pc}
 801959c:	40023800 	.word	0x40023800
 80195a0:	431bde83 	.word	0x431bde83
 80195a4:	2000a2d8 	.word	0x2000a2d8
 80195a8:	40001000 	.word	0x40001000

080195ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80195ac:	b480      	push	{r7}
 80195ae:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80195b0:	bf00      	nop
 80195b2:	46bd      	mov	sp, r7
 80195b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195b8:	4770      	bx	lr

080195ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80195ba:	b480      	push	{r7}
 80195bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80195be:	e7fe      	b.n	80195be <HardFault_Handler+0x4>

080195c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80195c0:	b480      	push	{r7}
 80195c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80195c4:	e7fe      	b.n	80195c4 <MemManage_Handler+0x4>

080195c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80195c6:	b480      	push	{r7}
 80195c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80195ca:	e7fe      	b.n	80195ca <BusFault_Handler+0x4>

080195cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80195cc:	b480      	push	{r7}
 80195ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80195d0:	e7fe      	b.n	80195d0 <UsageFault_Handler+0x4>

080195d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80195d2:	b480      	push	{r7}
 80195d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80195d6:	bf00      	nop
 80195d8:	46bd      	mov	sp, r7
 80195da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195de:	4770      	bx	lr

080195e0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80195e0:	b580      	push	{r7, lr}
 80195e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80195e4:	4802      	ldr	r0, [pc, #8]	; (80195f0 <TIM6_DAC_IRQHandler+0x10>)
 80195e6:	f7ef fcde 	bl	8008fa6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80195ea:	bf00      	nop
 80195ec:	bd80      	pop	{r7, pc}
 80195ee:	bf00      	nop
 80195f0:	2000a2d8 	.word	0x2000a2d8

080195f4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80195f4:	b580      	push	{r7, lr}
 80195f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80195f8:	4802      	ldr	r0, [pc, #8]	; (8019604 <OTG_FS_IRQHandler+0x10>)
 80195fa:	f7e9 fe07 	bl	800320c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80195fe:	bf00      	nop
 8019600:	bd80      	pop	{r7, pc}
 8019602:	bf00      	nop
 8019604:	2000a6f0 	.word	0x2000a6f0

08019608 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8019608:	b580      	push	{r7, lr}
 801960a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 801960c:	4802      	ldr	r0, [pc, #8]	; (8019618 <LTDC_IRQHandler+0x10>)
 801960e:	f7eb fe77 	bl	8005300 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8019612:	bf00      	nop
 8019614:	bd80      	pop	{r7, pc}
 8019616:	bf00      	nop
 8019618:	20009248 	.word	0x20009248

0801961c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 801961c:	b580      	push	{r7, lr}
 801961e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8019620:	4802      	ldr	r0, [pc, #8]	; (801962c <DMA2D_IRQHandler+0x10>)
 8019622:	f7e8 f9ea 	bl	80019fa <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8019626:	bf00      	nop
 8019628:	bd80      	pop	{r7, pc}
 801962a:	bf00      	nop
 801962c:	200092f0 	.word	0x200092f0

08019630 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8019630:	b480      	push	{r7}
 8019632:	af00      	add	r7, sp, #0
	return 1;
 8019634:	2301      	movs	r3, #1
}
 8019636:	4618      	mov	r0, r3
 8019638:	46bd      	mov	sp, r7
 801963a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801963e:	4770      	bx	lr

08019640 <_kill>:

int _kill(int pid, int sig)
{
 8019640:	b580      	push	{r7, lr}
 8019642:	b082      	sub	sp, #8
 8019644:	af00      	add	r7, sp, #0
 8019646:	6078      	str	r0, [r7, #4]
 8019648:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 801964a:	f008 ff2b 	bl	80224a4 <__errno>
 801964e:	4602      	mov	r2, r0
 8019650:	2316      	movs	r3, #22
 8019652:	6013      	str	r3, [r2, #0]
	return -1;
 8019654:	f04f 33ff 	mov.w	r3, #4294967295
}
 8019658:	4618      	mov	r0, r3
 801965a:	3708      	adds	r7, #8
 801965c:	46bd      	mov	sp, r7
 801965e:	bd80      	pop	{r7, pc}

08019660 <_exit>:

void _exit (int status)
{
 8019660:	b580      	push	{r7, lr}
 8019662:	b082      	sub	sp, #8
 8019664:	af00      	add	r7, sp, #0
 8019666:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8019668:	f04f 31ff 	mov.w	r1, #4294967295
 801966c:	6878      	ldr	r0, [r7, #4]
 801966e:	f7ff ffe7 	bl	8019640 <_kill>
	while (1) {}		/* Make sure we hang here */
 8019672:	e7fe      	b.n	8019672 <_exit+0x12>

08019674 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8019674:	b580      	push	{r7, lr}
 8019676:	b086      	sub	sp, #24
 8019678:	af00      	add	r7, sp, #0
 801967a:	60f8      	str	r0, [r7, #12]
 801967c:	60b9      	str	r1, [r7, #8]
 801967e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8019680:	2300      	movs	r3, #0
 8019682:	617b      	str	r3, [r7, #20]
 8019684:	e00a      	b.n	801969c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8019686:	f3af 8000 	nop.w
 801968a:	4601      	mov	r1, r0
 801968c:	68bb      	ldr	r3, [r7, #8]
 801968e:	1c5a      	adds	r2, r3, #1
 8019690:	60ba      	str	r2, [r7, #8]
 8019692:	b2ca      	uxtb	r2, r1
 8019694:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8019696:	697b      	ldr	r3, [r7, #20]
 8019698:	3301      	adds	r3, #1
 801969a:	617b      	str	r3, [r7, #20]
 801969c:	697a      	ldr	r2, [r7, #20]
 801969e:	687b      	ldr	r3, [r7, #4]
 80196a0:	429a      	cmp	r2, r3
 80196a2:	dbf0      	blt.n	8019686 <_read+0x12>
	}

return len;
 80196a4:	687b      	ldr	r3, [r7, #4]
}
 80196a6:	4618      	mov	r0, r3
 80196a8:	3718      	adds	r7, #24
 80196aa:	46bd      	mov	sp, r7
 80196ac:	bd80      	pop	{r7, pc}

080196ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80196ae:	b580      	push	{r7, lr}
 80196b0:	b086      	sub	sp, #24
 80196b2:	af00      	add	r7, sp, #0
 80196b4:	60f8      	str	r0, [r7, #12]
 80196b6:	60b9      	str	r1, [r7, #8]
 80196b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80196ba:	2300      	movs	r3, #0
 80196bc:	617b      	str	r3, [r7, #20]
 80196be:	e009      	b.n	80196d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80196c0:	68bb      	ldr	r3, [r7, #8]
 80196c2:	1c5a      	adds	r2, r3, #1
 80196c4:	60ba      	str	r2, [r7, #8]
 80196c6:	781b      	ldrb	r3, [r3, #0]
 80196c8:	4618      	mov	r0, r3
 80196ca:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80196ce:	697b      	ldr	r3, [r7, #20]
 80196d0:	3301      	adds	r3, #1
 80196d2:	617b      	str	r3, [r7, #20]
 80196d4:	697a      	ldr	r2, [r7, #20]
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	429a      	cmp	r2, r3
 80196da:	dbf1      	blt.n	80196c0 <_write+0x12>
	}
	return len;
 80196dc:	687b      	ldr	r3, [r7, #4]
}
 80196de:	4618      	mov	r0, r3
 80196e0:	3718      	adds	r7, #24
 80196e2:	46bd      	mov	sp, r7
 80196e4:	bd80      	pop	{r7, pc}

080196e6 <_close>:

int _close(int file)
{
 80196e6:	b480      	push	{r7}
 80196e8:	b083      	sub	sp, #12
 80196ea:	af00      	add	r7, sp, #0
 80196ec:	6078      	str	r0, [r7, #4]
	return -1;
 80196ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80196f2:	4618      	mov	r0, r3
 80196f4:	370c      	adds	r7, #12
 80196f6:	46bd      	mov	sp, r7
 80196f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196fc:	4770      	bx	lr

080196fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80196fe:	b480      	push	{r7}
 8019700:	b083      	sub	sp, #12
 8019702:	af00      	add	r7, sp, #0
 8019704:	6078      	str	r0, [r7, #4]
 8019706:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8019708:	683b      	ldr	r3, [r7, #0]
 801970a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801970e:	605a      	str	r2, [r3, #4]
	return 0;
 8019710:	2300      	movs	r3, #0
}
 8019712:	4618      	mov	r0, r3
 8019714:	370c      	adds	r7, #12
 8019716:	46bd      	mov	sp, r7
 8019718:	f85d 7b04 	ldr.w	r7, [sp], #4
 801971c:	4770      	bx	lr

0801971e <_isatty>:

int _isatty(int file)
{
 801971e:	b480      	push	{r7}
 8019720:	b083      	sub	sp, #12
 8019722:	af00      	add	r7, sp, #0
 8019724:	6078      	str	r0, [r7, #4]
	return 1;
 8019726:	2301      	movs	r3, #1
}
 8019728:	4618      	mov	r0, r3
 801972a:	370c      	adds	r7, #12
 801972c:	46bd      	mov	sp, r7
 801972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019732:	4770      	bx	lr

08019734 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8019734:	b480      	push	{r7}
 8019736:	b085      	sub	sp, #20
 8019738:	af00      	add	r7, sp, #0
 801973a:	60f8      	str	r0, [r7, #12]
 801973c:	60b9      	str	r1, [r7, #8]
 801973e:	607a      	str	r2, [r7, #4]
	return 0;
 8019740:	2300      	movs	r3, #0
}
 8019742:	4618      	mov	r0, r3
 8019744:	3714      	adds	r7, #20
 8019746:	46bd      	mov	sp, r7
 8019748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801974c:	4770      	bx	lr
	...

08019750 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8019750:	b580      	push	{r7, lr}
 8019752:	b084      	sub	sp, #16
 8019754:	af00      	add	r7, sp, #0
 8019756:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8019758:	4b11      	ldr	r3, [pc, #68]	; (80197a0 <_sbrk+0x50>)
 801975a:	681b      	ldr	r3, [r3, #0]
 801975c:	2b00      	cmp	r3, #0
 801975e:	d102      	bne.n	8019766 <_sbrk+0x16>
		heap_end = &end;
 8019760:	4b0f      	ldr	r3, [pc, #60]	; (80197a0 <_sbrk+0x50>)
 8019762:	4a10      	ldr	r2, [pc, #64]	; (80197a4 <_sbrk+0x54>)
 8019764:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8019766:	4b0e      	ldr	r3, [pc, #56]	; (80197a0 <_sbrk+0x50>)
 8019768:	681b      	ldr	r3, [r3, #0]
 801976a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 801976c:	4b0c      	ldr	r3, [pc, #48]	; (80197a0 <_sbrk+0x50>)
 801976e:	681a      	ldr	r2, [r3, #0]
 8019770:	687b      	ldr	r3, [r7, #4]
 8019772:	4413      	add	r3, r2
 8019774:	466a      	mov	r2, sp
 8019776:	4293      	cmp	r3, r2
 8019778:	d907      	bls.n	801978a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 801977a:	f008 fe93 	bl	80224a4 <__errno>
 801977e:	4602      	mov	r2, r0
 8019780:	230c      	movs	r3, #12
 8019782:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8019784:	f04f 33ff 	mov.w	r3, #4294967295
 8019788:	e006      	b.n	8019798 <_sbrk+0x48>
	}

	heap_end += incr;
 801978a:	4b05      	ldr	r3, [pc, #20]	; (80197a0 <_sbrk+0x50>)
 801978c:	681a      	ldr	r2, [r3, #0]
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	4413      	add	r3, r2
 8019792:	4a03      	ldr	r2, [pc, #12]	; (80197a0 <_sbrk+0x50>)
 8019794:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8019796:	68fb      	ldr	r3, [r7, #12]
}
 8019798:	4618      	mov	r0, r3
 801979a:	3710      	adds	r7, #16
 801979c:	46bd      	mov	sp, r7
 801979e:	bd80      	pop	{r7, pc}
 80197a0:	20009c10 	.word	0x20009c10
 80197a4:	2000a9b8 	.word	0x2000a9b8

080197a8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80197a8:	b480      	push	{r7}
 80197aa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80197ac:	4b15      	ldr	r3, [pc, #84]	; (8019804 <SystemInit+0x5c>)
 80197ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80197b2:	4a14      	ldr	r2, [pc, #80]	; (8019804 <SystemInit+0x5c>)
 80197b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80197b8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80197bc:	4b12      	ldr	r3, [pc, #72]	; (8019808 <SystemInit+0x60>)
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	4a11      	ldr	r2, [pc, #68]	; (8019808 <SystemInit+0x60>)
 80197c2:	f043 0301 	orr.w	r3, r3, #1
 80197c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80197c8:	4b0f      	ldr	r3, [pc, #60]	; (8019808 <SystemInit+0x60>)
 80197ca:	2200      	movs	r2, #0
 80197cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80197ce:	4b0e      	ldr	r3, [pc, #56]	; (8019808 <SystemInit+0x60>)
 80197d0:	681a      	ldr	r2, [r3, #0]
 80197d2:	490d      	ldr	r1, [pc, #52]	; (8019808 <SystemInit+0x60>)
 80197d4:	4b0d      	ldr	r3, [pc, #52]	; (801980c <SystemInit+0x64>)
 80197d6:	4013      	ands	r3, r2
 80197d8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80197da:	4b0b      	ldr	r3, [pc, #44]	; (8019808 <SystemInit+0x60>)
 80197dc:	4a0c      	ldr	r2, [pc, #48]	; (8019810 <SystemInit+0x68>)
 80197de:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80197e0:	4b09      	ldr	r3, [pc, #36]	; (8019808 <SystemInit+0x60>)
 80197e2:	681b      	ldr	r3, [r3, #0]
 80197e4:	4a08      	ldr	r2, [pc, #32]	; (8019808 <SystemInit+0x60>)
 80197e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80197ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80197ec:	4b06      	ldr	r3, [pc, #24]	; (8019808 <SystemInit+0x60>)
 80197ee:	2200      	movs	r2, #0
 80197f0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80197f2:	4b04      	ldr	r3, [pc, #16]	; (8019804 <SystemInit+0x5c>)
 80197f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80197f8:	609a      	str	r2, [r3, #8]
#endif
}
 80197fa:	bf00      	nop
 80197fc:	46bd      	mov	sp, r7
 80197fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019802:	4770      	bx	lr
 8019804:	e000ed00 	.word	0xe000ed00
 8019808:	40023800 	.word	0x40023800
 801980c:	fef6ffff 	.word	0xfef6ffff
 8019810:	24003010 	.word	0x24003010

08019814 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8019814:	b580      	push	{r7, lr}
 8019816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8019818:	2201      	movs	r2, #1
 801981a:	490e      	ldr	r1, [pc, #56]	; (8019854 <MX_USB_HOST_Init+0x40>)
 801981c:	480e      	ldr	r0, [pc, #56]	; (8019858 <MX_USB_HOST_Init+0x44>)
 801981e:	f7f3 f96d 	bl	800cafc <USBH_Init>
 8019822:	4603      	mov	r3, r0
 8019824:	2b00      	cmp	r3, #0
 8019826:	d001      	beq.n	801982c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8019828:	f7fe fdd6 	bl	80183d8 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801982c:	490b      	ldr	r1, [pc, #44]	; (801985c <MX_USB_HOST_Init+0x48>)
 801982e:	480a      	ldr	r0, [pc, #40]	; (8019858 <MX_USB_HOST_Init+0x44>)
 8019830:	f7f3 f9ff 	bl	800cc32 <USBH_RegisterClass>
 8019834:	4603      	mov	r3, r0
 8019836:	2b00      	cmp	r3, #0
 8019838:	d001      	beq.n	801983e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801983a:	f7fe fdcd 	bl	80183d8 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801983e:	4806      	ldr	r0, [pc, #24]	; (8019858 <MX_USB_HOST_Init+0x44>)
 8019840:	f7f3 fa84 	bl	800cd4c <USBH_Start>
 8019844:	4603      	mov	r3, r0
 8019846:	2b00      	cmp	r3, #0
 8019848:	d001      	beq.n	801984e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801984a:	f7fe fdc5 	bl	80183d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801984e:	bf00      	nop
 8019850:	bd80      	pop	{r7, pc}
 8019852:	bf00      	nop
 8019854:	08019861 	.word	0x08019861
 8019858:	2000a318 	.word	0x2000a318
 801985c:	2000002c 	.word	0x2000002c

08019860 <USBH_UserProcess>:

/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8019860:	b480      	push	{r7}
 8019862:	b083      	sub	sp, #12
 8019864:	af00      	add	r7, sp, #0
 8019866:	6078      	str	r0, [r7, #4]
 8019868:	460b      	mov	r3, r1
 801986a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801986c:	78fb      	ldrb	r3, [r7, #3]
 801986e:	3b01      	subs	r3, #1
 8019870:	2b04      	cmp	r3, #4
 8019872:	d819      	bhi.n	80198a8 <USBH_UserProcess+0x48>
 8019874:	a201      	add	r2, pc, #4	; (adr r2, 801987c <USBH_UserProcess+0x1c>)
 8019876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801987a:	bf00      	nop
 801987c:	080198a9 	.word	0x080198a9
 8019880:	08019899 	.word	0x08019899
 8019884:	080198a9 	.word	0x080198a9
 8019888:	080198a1 	.word	0x080198a1
 801988c:	08019891 	.word	0x08019891
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8019890:	4b09      	ldr	r3, [pc, #36]	; (80198b8 <USBH_UserProcess+0x58>)
 8019892:	2203      	movs	r2, #3
 8019894:	701a      	strb	r2, [r3, #0]
  break;
 8019896:	e008      	b.n	80198aa <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8019898:	4b07      	ldr	r3, [pc, #28]	; (80198b8 <USBH_UserProcess+0x58>)
 801989a:	2202      	movs	r2, #2
 801989c:	701a      	strb	r2, [r3, #0]
  break;
 801989e:	e004      	b.n	80198aa <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80198a0:	4b05      	ldr	r3, [pc, #20]	; (80198b8 <USBH_UserProcess+0x58>)
 80198a2:	2201      	movs	r2, #1
 80198a4:	701a      	strb	r2, [r3, #0]
  break;
 80198a6:	e000      	b.n	80198aa <USBH_UserProcess+0x4a>

  default:
  break;
 80198a8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80198aa:	bf00      	nop
 80198ac:	370c      	adds	r7, #12
 80198ae:	46bd      	mov	sp, r7
 80198b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198b4:	4770      	bx	lr
 80198b6:	bf00      	nop
 80198b8:	20009c14 	.word	0x20009c14

080198bc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80198bc:	b580      	push	{r7, lr}
 80198be:	b08a      	sub	sp, #40	; 0x28
 80198c0:	af00      	add	r7, sp, #0
 80198c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80198c4:	f107 0314 	add.w	r3, r7, #20
 80198c8:	2200      	movs	r2, #0
 80198ca:	601a      	str	r2, [r3, #0]
 80198cc:	605a      	str	r2, [r3, #4]
 80198ce:	609a      	str	r2, [r3, #8]
 80198d0:	60da      	str	r2, [r3, #12]
 80198d2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	681b      	ldr	r3, [r3, #0]
 80198d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80198dc:	d13c      	bne.n	8019958 <HAL_HCD_MspInit+0x9c>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80198de:	4b20      	ldr	r3, [pc, #128]	; (8019960 <HAL_HCD_MspInit+0xa4>)
 80198e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80198e2:	4a1f      	ldr	r2, [pc, #124]	; (8019960 <HAL_HCD_MspInit+0xa4>)
 80198e4:	f043 0301 	orr.w	r3, r3, #1
 80198e8:	6313      	str	r3, [r2, #48]	; 0x30
 80198ea:	4b1d      	ldr	r3, [pc, #116]	; (8019960 <HAL_HCD_MspInit+0xa4>)
 80198ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80198ee:	f003 0301 	and.w	r3, r3, #1
 80198f2:	613b      	str	r3, [r7, #16]
 80198f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    PA10     ------> USB_OTG_FS_ID 
    */
    GPIO_InitStruct.Pin = OTG_FS_P_Pin|OTG_FS_N_Pin|OTG_FS_ID_Pin;
 80198f6:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80198fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80198fc:	2302      	movs	r3, #2
 80198fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8019900:	2300      	movs	r3, #0
 8019902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8019904:	2303      	movs	r3, #3
 8019906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8019908:	230a      	movs	r3, #10
 801990a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801990c:	f107 0314 	add.w	r3, r7, #20
 8019910:	4619      	mov	r1, r3
 8019912:	4814      	ldr	r0, [pc, #80]	; (8019964 <HAL_HCD_MspInit+0xa8>)
 8019914:	f7e8 ff1c 	bl	8002750 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8019918:	4b11      	ldr	r3, [pc, #68]	; (8019960 <HAL_HCD_MspInit+0xa4>)
 801991a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801991c:	4a10      	ldr	r2, [pc, #64]	; (8019960 <HAL_HCD_MspInit+0xa4>)
 801991e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019922:	6353      	str	r3, [r2, #52]	; 0x34
 8019924:	4b0e      	ldr	r3, [pc, #56]	; (8019960 <HAL_HCD_MspInit+0xa4>)
 8019926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019928:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801992c:	60fb      	str	r3, [r7, #12]
 801992e:	68fb      	ldr	r3, [r7, #12]
 8019930:	4b0b      	ldr	r3, [pc, #44]	; (8019960 <HAL_HCD_MspInit+0xa4>)
 8019932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019934:	4a0a      	ldr	r2, [pc, #40]	; (8019960 <HAL_HCD_MspInit+0xa4>)
 8019936:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801993a:	6453      	str	r3, [r2, #68]	; 0x44
 801993c:	4b08      	ldr	r3, [pc, #32]	; (8019960 <HAL_HCD_MspInit+0xa4>)
 801993e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019940:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019944:	60bb      	str	r3, [r7, #8]
 8019946:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 8019948:	2200      	movs	r2, #0
 801994a:	2105      	movs	r1, #5
 801994c:	2043      	movs	r0, #67	; 0x43
 801994e:	f7e7 fc6d 	bl	800122c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8019952:	2043      	movs	r0, #67	; 0x43
 8019954:	f7e7 fc86 	bl	8001264 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019958:	bf00      	nop
 801995a:	3728      	adds	r7, #40	; 0x28
 801995c:	46bd      	mov	sp, r7
 801995e:	bd80      	pop	{r7, pc}
 8019960:	40023800 	.word	0x40023800
 8019964:	40020000 	.word	0x40020000

08019968 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8019968:	b580      	push	{r7, lr}
 801996a:	b082      	sub	sp, #8
 801996c:	af00      	add	r7, sp, #0
 801996e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8019970:	687b      	ldr	r3, [r7, #4]
 8019972:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019976:	4618      	mov	r0, r3
 8019978:	f7f3 fd3b 	bl	800d3f2 <USBH_LL_IncTimer>
}
 801997c:	bf00      	nop
 801997e:	3708      	adds	r7, #8
 8019980:	46bd      	mov	sp, r7
 8019982:	bd80      	pop	{r7, pc}

08019984 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8019984:	b580      	push	{r7, lr}
 8019986:	b082      	sub	sp, #8
 8019988:	af00      	add	r7, sp, #0
 801998a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 801998c:	687b      	ldr	r3, [r7, #4]
 801998e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019992:	4618      	mov	r0, r3
 8019994:	f7f3 fd80 	bl	800d498 <USBH_LL_Connect>
}
 8019998:	bf00      	nop
 801999a:	3708      	adds	r7, #8
 801999c:	46bd      	mov	sp, r7
 801999e:	bd80      	pop	{r7, pc}

080199a0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80199a0:	b580      	push	{r7, lr}
 80199a2:	b082      	sub	sp, #8
 80199a4:	af00      	add	r7, sp, #0
 80199a6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80199ae:	4618      	mov	r0, r3
 80199b0:	f7f3 fda6 	bl	800d500 <USBH_LL_Disconnect>
}
 80199b4:	bf00      	nop
 80199b6:	3708      	adds	r7, #8
 80199b8:	46bd      	mov	sp, r7
 80199ba:	bd80      	pop	{r7, pc}

080199bc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80199bc:	b580      	push	{r7, lr}
 80199be:	b082      	sub	sp, #8
 80199c0:	af00      	add	r7, sp, #0
 80199c2:	6078      	str	r0, [r7, #4]
 80199c4:	460b      	mov	r3, r1
 80199c6:	70fb      	strb	r3, [r7, #3]
 80199c8:	4613      	mov	r3, r2
 80199ca:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
 80199cc:	687b      	ldr	r3, [r7, #4]
 80199ce:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80199d2:	4618      	mov	r0, r3
 80199d4:	f7f3 fde4 	bl	800d5a0 <USBH_LL_NotifyURBChange>
#endif
}
 80199d8:	bf00      	nop
 80199da:	3708      	adds	r7, #8
 80199dc:	46bd      	mov	sp, r7
 80199de:	bd80      	pop	{r7, pc}

080199e0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80199e0:	b580      	push	{r7, lr}
 80199e2:	b082      	sub	sp, #8
 80199e4:	af00      	add	r7, sp, #0
 80199e6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80199e8:	687b      	ldr	r3, [r7, #4]
 80199ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80199ee:	4618      	mov	r0, r3
 80199f0:	f7f3 fd29 	bl	800d446 <USBH_LL_PortEnabled>
} 
 80199f4:	bf00      	nop
 80199f6:	3708      	adds	r7, #8
 80199f8:	46bd      	mov	sp, r7
 80199fa:	bd80      	pop	{r7, pc}

080199fc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80199fc:	b580      	push	{r7, lr}
 80199fe:	b082      	sub	sp, #8
 8019a00:	af00      	add	r7, sp, #0
 8019a02:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8019a04:	687b      	ldr	r3, [r7, #4]
 8019a06:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8019a0a:	4618      	mov	r0, r3
 8019a0c:	f7f3 fd29 	bl	800d462 <USBH_LL_PortDisabled>
} 
 8019a10:	bf00      	nop
 8019a12:	3708      	adds	r7, #8
 8019a14:	46bd      	mov	sp, r7
 8019a16:	bd80      	pop	{r7, pc}

08019a18 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8019a18:	b580      	push	{r7, lr}
 8019a1a:	b082      	sub	sp, #8
 8019a1c:	af00      	add	r7, sp, #0
 8019a1e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8019a20:	687b      	ldr	r3, [r7, #4]
 8019a22:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8019a26:	2b01      	cmp	r3, #1
 8019a28:	d12a      	bne.n	8019a80 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8019a2a:	4a18      	ldr	r2, [pc, #96]	; (8019a8c <USBH_LL_Init+0x74>)
 8019a2c:	687b      	ldr	r3, [r7, #4]
 8019a2e:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	4a15      	ldr	r2, [pc, #84]	; (8019a8c <USBH_LL_Init+0x74>)
 8019a36:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019a3a:	4b14      	ldr	r3, [pc, #80]	; (8019a8c <USBH_LL_Init+0x74>)
 8019a3c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8019a40:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8019a42:	4b12      	ldr	r3, [pc, #72]	; (8019a8c <USBH_LL_Init+0x74>)
 8019a44:	2208      	movs	r2, #8
 8019a46:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8019a48:	4b10      	ldr	r3, [pc, #64]	; (8019a8c <USBH_LL_Init+0x74>)
 8019a4a:	2203      	movs	r2, #3
 8019a4c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8019a4e:	4b0f      	ldr	r3, [pc, #60]	; (8019a8c <USBH_LL_Init+0x74>)
 8019a50:	2200      	movs	r2, #0
 8019a52:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8019a54:	4b0d      	ldr	r3, [pc, #52]	; (8019a8c <USBH_LL_Init+0x74>)
 8019a56:	2202      	movs	r2, #2
 8019a58:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8019a5a:	4b0c      	ldr	r3, [pc, #48]	; (8019a8c <USBH_LL_Init+0x74>)
 8019a5c:	2200      	movs	r2, #0
 8019a5e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8019a60:	480a      	ldr	r0, [pc, #40]	; (8019a8c <USBH_LL_Init+0x74>)
 8019a62:	f7e9 f95a 	bl	8002d1a <HAL_HCD_Init>
 8019a66:	4603      	mov	r3, r0
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	d001      	beq.n	8019a70 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8019a6c:	f7fe fcb4 	bl	80183d8 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8019a70:	4806      	ldr	r0, [pc, #24]	; (8019a8c <USBH_LL_Init+0x74>)
 8019a72:	f7e9 fd49 	bl	8003508 <HAL_HCD_GetCurrentFrame>
 8019a76:	4603      	mov	r3, r0
 8019a78:	4619      	mov	r1, r3
 8019a7a:	6878      	ldr	r0, [r7, #4]
 8019a7c:	f7f3 fcaa 	bl	800d3d4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8019a80:	2300      	movs	r3, #0
}
 8019a82:	4618      	mov	r0, r3
 8019a84:	3708      	adds	r7, #8
 8019a86:	46bd      	mov	sp, r7
 8019a88:	bd80      	pop	{r7, pc}
 8019a8a:	bf00      	nop
 8019a8c:	2000a6f0 	.word	0x2000a6f0

08019a90 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8019a90:	b580      	push	{r7, lr}
 8019a92:	b084      	sub	sp, #16
 8019a94:	af00      	add	r7, sp, #0
 8019a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a98:	2300      	movs	r3, #0
 8019a9a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019a9c:	2300      	movs	r3, #0
 8019a9e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8019aa6:	4618      	mov	r0, r3
 8019aa8:	f7e9 fcb6 	bl	8003418 <HAL_HCD_Start>
 8019aac:	4603      	mov	r3, r0
 8019aae:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019ab0:	7bfb      	ldrb	r3, [r7, #15]
 8019ab2:	4618      	mov	r0, r3
 8019ab4:	f000 f95c 	bl	8019d70 <USBH_Get_USB_Status>
 8019ab8:	4603      	mov	r3, r0
 8019aba:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8019abc:	7bbb      	ldrb	r3, [r7, #14]
}
 8019abe:	4618      	mov	r0, r3
 8019ac0:	3710      	adds	r7, #16
 8019ac2:	46bd      	mov	sp, r7
 8019ac4:	bd80      	pop	{r7, pc}

08019ac6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8019ac6:	b580      	push	{r7, lr}
 8019ac8:	b084      	sub	sp, #16
 8019aca:	af00      	add	r7, sp, #0
 8019acc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019ace:	2300      	movs	r3, #0
 8019ad0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019ad2:	2300      	movs	r3, #0
 8019ad4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8019ad6:	687b      	ldr	r3, [r7, #4]
 8019ad8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8019adc:	4618      	mov	r0, r3
 8019ade:	f7e9 fcbe 	bl	800345e <HAL_HCD_Stop>
 8019ae2:	4603      	mov	r3, r0
 8019ae4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019ae6:	7bfb      	ldrb	r3, [r7, #15]
 8019ae8:	4618      	mov	r0, r3
 8019aea:	f000 f941 	bl	8019d70 <USBH_Get_USB_Status>
 8019aee:	4603      	mov	r3, r0
 8019af0:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 8019af2:	7bbb      	ldrb	r3, [r7, #14]
}
 8019af4:	4618      	mov	r0, r3
 8019af6:	3710      	adds	r7, #16
 8019af8:	46bd      	mov	sp, r7
 8019afa:	bd80      	pop	{r7, pc}

08019afc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8019afc:	b580      	push	{r7, lr}
 8019afe:	b084      	sub	sp, #16
 8019b00:	af00      	add	r7, sp, #0
 8019b02:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8019b04:	2301      	movs	r3, #1
 8019b06:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8019b08:	687b      	ldr	r3, [r7, #4]
 8019b0a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8019b0e:	4618      	mov	r0, r3
 8019b10:	f7e9 fd08 	bl	8003524 <HAL_HCD_GetCurrentSpeed>
 8019b14:	4603      	mov	r3, r0
 8019b16:	2b01      	cmp	r3, #1
 8019b18:	d007      	beq.n	8019b2a <USBH_LL_GetSpeed+0x2e>
 8019b1a:	2b01      	cmp	r3, #1
 8019b1c:	d302      	bcc.n	8019b24 <USBH_LL_GetSpeed+0x28>
 8019b1e:	2b02      	cmp	r3, #2
 8019b20:	d006      	beq.n	8019b30 <USBH_LL_GetSpeed+0x34>
 8019b22:	e008      	b.n	8019b36 <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8019b24:	2300      	movs	r3, #0
 8019b26:	73fb      	strb	r3, [r7, #15]
    break;
 8019b28:	e008      	b.n	8019b3c <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 8019b2a:	2301      	movs	r3, #1
 8019b2c:	73fb      	strb	r3, [r7, #15]
    break;
 8019b2e:	e005      	b.n	8019b3c <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 8019b30:	2302      	movs	r3, #2
 8019b32:	73fb      	strb	r3, [r7, #15]
    break;
 8019b34:	e002      	b.n	8019b3c <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 8019b36:	2301      	movs	r3, #1
 8019b38:	73fb      	strb	r3, [r7, #15]
    break;
 8019b3a:	bf00      	nop
  }
  return  speed;
 8019b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8019b3e:	4618      	mov	r0, r3
 8019b40:	3710      	adds	r7, #16
 8019b42:	46bd      	mov	sp, r7
 8019b44:	bd80      	pop	{r7, pc}

08019b46 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8019b46:	b580      	push	{r7, lr}
 8019b48:	b084      	sub	sp, #16
 8019b4a:	af00      	add	r7, sp, #0
 8019b4c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019b4e:	2300      	movs	r3, #0
 8019b50:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019b52:	2300      	movs	r3, #0
 8019b54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8019b56:	687b      	ldr	r3, [r7, #4]
 8019b58:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8019b5c:	4618      	mov	r0, r3
 8019b5e:	f7e9 fc9b 	bl	8003498 <HAL_HCD_ResetPort>
 8019b62:	4603      	mov	r3, r0
 8019b64:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 8019b66:	7bfb      	ldrb	r3, [r7, #15]
 8019b68:	4618      	mov	r0, r3
 8019b6a:	f000 f901 	bl	8019d70 <USBH_Get_USB_Status>
 8019b6e:	4603      	mov	r3, r0
 8019b70:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8019b72:	7bbb      	ldrb	r3, [r7, #14]
}
 8019b74:	4618      	mov	r0, r3
 8019b76:	3710      	adds	r7, #16
 8019b78:	46bd      	mov	sp, r7
 8019b7a:	bd80      	pop	{r7, pc}

08019b7c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019b7c:	b580      	push	{r7, lr}
 8019b7e:	b082      	sub	sp, #8
 8019b80:	af00      	add	r7, sp, #0
 8019b82:	6078      	str	r0, [r7, #4]
 8019b84:	460b      	mov	r3, r1
 8019b86:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8019b88:	687b      	ldr	r3, [r7, #4]
 8019b8a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8019b8e:	78fa      	ldrb	r2, [r7, #3]
 8019b90:	4611      	mov	r1, r2
 8019b92:	4618      	mov	r0, r3
 8019b94:	f7e9 fca3 	bl	80034de <HAL_HCD_HC_GetXferCount>
 8019b98:	4603      	mov	r3, r0
}
 8019b9a:	4618      	mov	r0, r3
 8019b9c:	3708      	adds	r7, #8
 8019b9e:	46bd      	mov	sp, r7
 8019ba0:	bd80      	pop	{r7, pc}

08019ba2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8019ba2:	b590      	push	{r4, r7, lr}
 8019ba4:	b089      	sub	sp, #36	; 0x24
 8019ba6:	af04      	add	r7, sp, #16
 8019ba8:	6078      	str	r0, [r7, #4]
 8019baa:	4608      	mov	r0, r1
 8019bac:	4611      	mov	r1, r2
 8019bae:	461a      	mov	r2, r3
 8019bb0:	4603      	mov	r3, r0
 8019bb2:	70fb      	strb	r3, [r7, #3]
 8019bb4:	460b      	mov	r3, r1
 8019bb6:	70bb      	strb	r3, [r7, #2]
 8019bb8:	4613      	mov	r3, r2
 8019bba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019bbc:	2300      	movs	r3, #0
 8019bbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019bc0:	2300      	movs	r3, #0
 8019bc2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8019bc4:	687b      	ldr	r3, [r7, #4]
 8019bc6:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8019bca:	787c      	ldrb	r4, [r7, #1]
 8019bcc:	78ba      	ldrb	r2, [r7, #2]
 8019bce:	78f9      	ldrb	r1, [r7, #3]
 8019bd0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019bd2:	9302      	str	r3, [sp, #8]
 8019bd4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8019bd8:	9301      	str	r3, [sp, #4]
 8019bda:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019bde:	9300      	str	r3, [sp, #0]
 8019be0:	4623      	mov	r3, r4
 8019be2:	f7e9 f8f0 	bl	8002dc6 <HAL_HCD_HC_Init>
 8019be6:	4603      	mov	r3, r0
 8019be8:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8019bea:	7bfb      	ldrb	r3, [r7, #15]
 8019bec:	4618      	mov	r0, r3
 8019bee:	f000 f8bf 	bl	8019d70 <USBH_Get_USB_Status>
 8019bf2:	4603      	mov	r3, r0
 8019bf4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8019bf6:	7bbb      	ldrb	r3, [r7, #14]
}
 8019bf8:	4618      	mov	r0, r3
 8019bfa:	3714      	adds	r7, #20
 8019bfc:	46bd      	mov	sp, r7
 8019bfe:	bd90      	pop	{r4, r7, pc}

08019c00 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019c00:	b580      	push	{r7, lr}
 8019c02:	b084      	sub	sp, #16
 8019c04:	af00      	add	r7, sp, #0
 8019c06:	6078      	str	r0, [r7, #4]
 8019c08:	460b      	mov	r3, r1
 8019c0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019c0c:	2300      	movs	r3, #0
 8019c0e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019c10:	2300      	movs	r3, #0
 8019c12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8019c1a:	78fa      	ldrb	r2, [r7, #3]
 8019c1c:	4611      	mov	r1, r2
 8019c1e:	4618      	mov	r0, r3
 8019c20:	f7e9 f969 	bl	8002ef6 <HAL_HCD_HC_Halt>
 8019c24:	4603      	mov	r3, r0
 8019c26:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8019c28:	7bfb      	ldrb	r3, [r7, #15]
 8019c2a:	4618      	mov	r0, r3
 8019c2c:	f000 f8a0 	bl	8019d70 <USBH_Get_USB_Status>
 8019c30:	4603      	mov	r3, r0
 8019c32:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8019c34:	7bbb      	ldrb	r3, [r7, #14]
}
 8019c36:	4618      	mov	r0, r3
 8019c38:	3710      	adds	r7, #16
 8019c3a:	46bd      	mov	sp, r7
 8019c3c:	bd80      	pop	{r7, pc}

08019c3e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8019c3e:	b590      	push	{r4, r7, lr}
 8019c40:	b089      	sub	sp, #36	; 0x24
 8019c42:	af04      	add	r7, sp, #16
 8019c44:	6078      	str	r0, [r7, #4]
 8019c46:	4608      	mov	r0, r1
 8019c48:	4611      	mov	r1, r2
 8019c4a:	461a      	mov	r2, r3
 8019c4c:	4603      	mov	r3, r0
 8019c4e:	70fb      	strb	r3, [r7, #3]
 8019c50:	460b      	mov	r3, r1
 8019c52:	70bb      	strb	r3, [r7, #2]
 8019c54:	4613      	mov	r3, r2
 8019c56:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019c58:	2300      	movs	r3, #0
 8019c5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019c5c:	2300      	movs	r3, #0
 8019c5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8019c60:	687b      	ldr	r3, [r7, #4]
 8019c62:	f8d3 03c4 	ldr.w	r0, [r3, #964]	; 0x3c4
 8019c66:	787c      	ldrb	r4, [r7, #1]
 8019c68:	78ba      	ldrb	r2, [r7, #2]
 8019c6a:	78f9      	ldrb	r1, [r7, #3]
 8019c6c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8019c70:	9303      	str	r3, [sp, #12]
 8019c72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8019c74:	9302      	str	r3, [sp, #8]
 8019c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c78:	9301      	str	r3, [sp, #4]
 8019c7a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019c7e:	9300      	str	r3, [sp, #0]
 8019c80:	4623      	mov	r3, r4
 8019c82:	f7e9 f95b 	bl	8002f3c <HAL_HCD_HC_SubmitRequest>
 8019c86:	4603      	mov	r3, r0
 8019c88:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8019c8a:	7bfb      	ldrb	r3, [r7, #15]
 8019c8c:	4618      	mov	r0, r3
 8019c8e:	f000 f86f 	bl	8019d70 <USBH_Get_USB_Status>
 8019c92:	4603      	mov	r3, r0
 8019c94:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 8019c96:	7bbb      	ldrb	r3, [r7, #14]
}
 8019c98:	4618      	mov	r0, r3
 8019c9a:	3714      	adds	r7, #20
 8019c9c:	46bd      	mov	sp, r7
 8019c9e:	bd90      	pop	{r4, r7, pc}

08019ca0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8019ca0:	b580      	push	{r7, lr}
 8019ca2:	b082      	sub	sp, #8
 8019ca4:	af00      	add	r7, sp, #0
 8019ca6:	6078      	str	r0, [r7, #4]
 8019ca8:	460b      	mov	r3, r1
 8019caa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8019cb2:	78fa      	ldrb	r2, [r7, #3]
 8019cb4:	4611      	mov	r1, r2
 8019cb6:	4618      	mov	r0, r3
 8019cb8:	f7e9 fbfc 	bl	80034b4 <HAL_HCD_HC_GetURBState>
 8019cbc:	4603      	mov	r3, r0
}
 8019cbe:	4618      	mov	r0, r3
 8019cc0:	3708      	adds	r7, #8
 8019cc2:	46bd      	mov	sp, r7
 8019cc4:	bd80      	pop	{r7, pc}

08019cc6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8019cc6:	b580      	push	{r7, lr}
 8019cc8:	b082      	sub	sp, #8
 8019cca:	af00      	add	r7, sp, #0
 8019ccc:	6078      	str	r0, [r7, #4]
 8019cce:	460b      	mov	r3, r1
 8019cd0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8019cd2:	687b      	ldr	r3, [r7, #4]
 8019cd4:	f893 33c0 	ldrb.w	r3, [r3, #960]	; 0x3c0
 8019cd8:	2b01      	cmp	r3, #1
 8019cda:	d103      	bne.n	8019ce4 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8019cdc:	78fb      	ldrb	r3, [r7, #3]
 8019cde:	4618      	mov	r0, r3
 8019ce0:	f000 f872 	bl	8019dc8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8019ce4:	20c8      	movs	r0, #200	; 0xc8
 8019ce6:	f7e6 ff33 	bl	8000b50 <HAL_Delay>
  return USBH_OK;
 8019cea:	2300      	movs	r3, #0
}
 8019cec:	4618      	mov	r0, r3
 8019cee:	3708      	adds	r7, #8
 8019cf0:	46bd      	mov	sp, r7
 8019cf2:	bd80      	pop	{r7, pc}

08019cf4 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8019cf4:	b480      	push	{r7}
 8019cf6:	b085      	sub	sp, #20
 8019cf8:	af00      	add	r7, sp, #0
 8019cfa:	6078      	str	r0, [r7, #4]
 8019cfc:	460b      	mov	r3, r1
 8019cfe:	70fb      	strb	r3, [r7, #3]
 8019d00:	4613      	mov	r3, r2
 8019d02:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8019d0a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8019d0c:	78fa      	ldrb	r2, [r7, #3]
 8019d0e:	68f9      	ldr	r1, [r7, #12]
 8019d10:	4613      	mov	r3, r2
 8019d12:	009b      	lsls	r3, r3, #2
 8019d14:	4413      	add	r3, r2
 8019d16:	00db      	lsls	r3, r3, #3
 8019d18:	440b      	add	r3, r1
 8019d1a:	333b      	adds	r3, #59	; 0x3b
 8019d1c:	781b      	ldrb	r3, [r3, #0]
 8019d1e:	2b00      	cmp	r3, #0
 8019d20:	d00a      	beq.n	8019d38 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8019d22:	78fa      	ldrb	r2, [r7, #3]
 8019d24:	68f9      	ldr	r1, [r7, #12]
 8019d26:	4613      	mov	r3, r2
 8019d28:	009b      	lsls	r3, r3, #2
 8019d2a:	4413      	add	r3, r2
 8019d2c:	00db      	lsls	r3, r3, #3
 8019d2e:	440b      	add	r3, r1
 8019d30:	3350      	adds	r3, #80	; 0x50
 8019d32:	78ba      	ldrb	r2, [r7, #2]
 8019d34:	701a      	strb	r2, [r3, #0]
 8019d36:	e009      	b.n	8019d4c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8019d38:	78fa      	ldrb	r2, [r7, #3]
 8019d3a:	68f9      	ldr	r1, [r7, #12]
 8019d3c:	4613      	mov	r3, r2
 8019d3e:	009b      	lsls	r3, r3, #2
 8019d40:	4413      	add	r3, r2
 8019d42:	00db      	lsls	r3, r3, #3
 8019d44:	440b      	add	r3, r1
 8019d46:	3351      	adds	r3, #81	; 0x51
 8019d48:	78ba      	ldrb	r2, [r7, #2]
 8019d4a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8019d4c:	2300      	movs	r3, #0
}
 8019d4e:	4618      	mov	r0, r3
 8019d50:	3714      	adds	r7, #20
 8019d52:	46bd      	mov	sp, r7
 8019d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d58:	4770      	bx	lr

08019d5a <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8019d5a:	b580      	push	{r7, lr}
 8019d5c:	b082      	sub	sp, #8
 8019d5e:	af00      	add	r7, sp, #0
 8019d60:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8019d62:	6878      	ldr	r0, [r7, #4]
 8019d64:	f7e6 fef4 	bl	8000b50 <HAL_Delay>
}
 8019d68:	bf00      	nop
 8019d6a:	3708      	adds	r7, #8
 8019d6c:	46bd      	mov	sp, r7
 8019d6e:	bd80      	pop	{r7, pc}

08019d70 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019d70:	b480      	push	{r7}
 8019d72:	b085      	sub	sp, #20
 8019d74:	af00      	add	r7, sp, #0
 8019d76:	4603      	mov	r3, r0
 8019d78:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8019d7a:	2300      	movs	r3, #0
 8019d7c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019d7e:	79fb      	ldrb	r3, [r7, #7]
 8019d80:	2b03      	cmp	r3, #3
 8019d82:	d817      	bhi.n	8019db4 <USBH_Get_USB_Status+0x44>
 8019d84:	a201      	add	r2, pc, #4	; (adr r2, 8019d8c <USBH_Get_USB_Status+0x1c>)
 8019d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019d8a:	bf00      	nop
 8019d8c:	08019d9d 	.word	0x08019d9d
 8019d90:	08019da3 	.word	0x08019da3
 8019d94:	08019da9 	.word	0x08019da9
 8019d98:	08019daf 	.word	0x08019daf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8019d9c:	2300      	movs	r3, #0
 8019d9e:	73fb      	strb	r3, [r7, #15]
    break;
 8019da0:	e00b      	b.n	8019dba <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8019da2:	2302      	movs	r3, #2
 8019da4:	73fb      	strb	r3, [r7, #15]
    break;
 8019da6:	e008      	b.n	8019dba <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8019da8:	2301      	movs	r3, #1
 8019daa:	73fb      	strb	r3, [r7, #15]
    break;
 8019dac:	e005      	b.n	8019dba <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8019dae:	2302      	movs	r3, #2
 8019db0:	73fb      	strb	r3, [r7, #15]
    break;
 8019db2:	e002      	b.n	8019dba <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8019db4:	2302      	movs	r3, #2
 8019db6:	73fb      	strb	r3, [r7, #15]
    break;
 8019db8:	bf00      	nop
  }
  return usb_status;
 8019dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8019dbc:	4618      	mov	r0, r3
 8019dbe:	3714      	adds	r7, #20
 8019dc0:	46bd      	mov	sp, r7
 8019dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dc6:	4770      	bx	lr

08019dc8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 0 : VBUS Active
  *           - 1 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{ 
 8019dc8:	b580      	push	{r7, lr}
 8019dca:	b084      	sub	sp, #16
 8019dcc:	af00      	add	r7, sp, #0
 8019dce:	4603      	mov	r3, r0
 8019dd0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state; 
 8019dd2:	79fb      	ldrb	r3, [r7, #7]
 8019dd4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8019dd6:	79fb      	ldrb	r3, [r7, #7]
 8019dd8:	2b00      	cmp	r3, #0
 8019dda:	d102      	bne.n	8019de2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */ 	     
    data = GPIO_PIN_SET;
 8019ddc:	2301      	movs	r3, #1
 8019dde:	73fb      	strb	r3, [r7, #15]
 8019de0:	e001      	b.n	8019de6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 8019de2:	2300      	movs	r3, #0
 8019de4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOD,GPIO_PIN_5,(GPIO_PinState)data);
 8019de6:	7bfb      	ldrb	r3, [r7, #15]
 8019de8:	461a      	mov	r2, r3
 8019dea:	2120      	movs	r1, #32
 8019dec:	4803      	ldr	r0, [pc, #12]	; (8019dfc <MX_DriverVbusFS+0x34>)
 8019dee:	f7e8 ff7b 	bl	8002ce8 <HAL_GPIO_WritePin>
}
 8019df2:	bf00      	nop
 8019df4:	3710      	adds	r7, #16
 8019df6:	46bd      	mov	sp, r7
 8019df8:	bd80      	pop	{r7, pc}
 8019dfa:	bf00      	nop
 8019dfc:	40020c00 	.word	0x40020c00

08019e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8019e00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8019e38 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8019e04:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8019e06:	e003      	b.n	8019e10 <LoopCopyDataInit>

08019e08 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8019e08:	4b0c      	ldr	r3, [pc, #48]	; (8019e3c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8019e0a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8019e0c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8019e0e:	3104      	adds	r1, #4

08019e10 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8019e10:	480b      	ldr	r0, [pc, #44]	; (8019e40 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8019e12:	4b0c      	ldr	r3, [pc, #48]	; (8019e44 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8019e14:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8019e16:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8019e18:	d3f6      	bcc.n	8019e08 <CopyDataInit>
  ldr  r2, =_sbss
 8019e1a:	4a0b      	ldr	r2, [pc, #44]	; (8019e48 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8019e1c:	e002      	b.n	8019e24 <LoopFillZerobss>

08019e1e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8019e1e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8019e20:	f842 3b04 	str.w	r3, [r2], #4

08019e24 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8019e24:	4b09      	ldr	r3, [pc, #36]	; (8019e4c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8019e26:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8019e28:	d3f9      	bcc.n	8019e1e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8019e2a:	f7ff fcbd 	bl	80197a8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8019e2e:	f008 fb51 	bl	80224d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8019e32:	f7fd f9b5 	bl	80171a0 <main>
  bx  lr    
 8019e36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8019e38:	2004ffff 	.word	0x2004ffff
  ldr  r3, =_sidata
 8019e3c:	08042518 	.word	0x08042518
  ldr  r0, =_sdata
 8019e40:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8019e44:	2000010c 	.word	0x2000010c
  ldr  r2, =_sbss
 8019e48:	2000010c 	.word	0x2000010c
  ldr  r3, = _ebss
 8019e4c:	2000a9b8 	.word	0x2000a9b8

08019e50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8019e50:	e7fe      	b.n	8019e50 <ADC_IRQHandler>

08019e52 <_ZN23ApplicationFontProvider7getFontEt>:
extern touchgfx::InternalFlashFont& getFont_verdana_20_4bpp();
extern touchgfx::InternalFlashFont& getFont_verdana_40_4bpp();
extern touchgfx::InternalFlashFont& getFont_verdana_10_4bpp();

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId fontId)
{
 8019e52:	b580      	push	{r7, lr}
 8019e54:	b082      	sub	sp, #8
 8019e56:	af00      	add	r7, sp, #0
 8019e58:	6078      	str	r0, [r7, #4]
 8019e5a:	460b      	mov	r3, r1
 8019e5c:	807b      	strh	r3, [r7, #2]
    switch (fontId)
 8019e5e:	887b      	ldrh	r3, [r7, #2]
 8019e60:	2b01      	cmp	r3, #1
 8019e62:	d007      	beq.n	8019e74 <_ZN23ApplicationFontProvider7getFontEt+0x22>
 8019e64:	2b02      	cmp	r3, #2
 8019e66:	d009      	beq.n	8019e7c <_ZN23ApplicationFontProvider7getFontEt+0x2a>
 8019e68:	2b00      	cmp	r3, #0
 8019e6a:	d10b      	bne.n	8019e84 <_ZN23ApplicationFontProvider7getFontEt+0x32>
    {
    case Typography::DEFAULT:
        return &(getFont_verdana_20_4bpp());
 8019e6c:	f000 f898 	bl	8019fa0 <_Z23getFont_verdana_20_4bppv>
 8019e70:	4603      	mov	r3, r0
 8019e72:	e008      	b.n	8019e86 <_ZN23ApplicationFontProvider7getFontEt+0x34>
    case Typography::LARGE:
        return &(getFont_verdana_40_4bpp());
 8019e74:	f000 f8d2 	bl	801a01c <_Z23getFont_verdana_40_4bppv>
 8019e78:	4603      	mov	r3, r0
 8019e7a:	e004      	b.n	8019e86 <_ZN23ApplicationFontProvider7getFontEt+0x34>
    case Typography::SMALL:
        return &(getFont_verdana_10_4bpp());
 8019e7c:	f000 f852 	bl	8019f24 <_Z23getFont_verdana_10_4bppv>
 8019e80:	4603      	mov	r3, r0
 8019e82:	e000      	b.n	8019e86 <_ZN23ApplicationFontProvider7getFontEt+0x34>
    default:
        return 0;
 8019e84:	2300      	movs	r3, #0
    }
}
 8019e86:	4618      	mov	r0, r3
 8019e88:	3708      	adds	r7, #8
 8019e8a:	46bd      	mov	sp, r7
 8019e8c:	bd80      	pop	{r7, pc}
	...

08019e90 <_ZN8touchgfx4FontD1Ev>:
 *        It provides utility functions such as obtaining string width and font height.
 */
class Font
{
public:
    virtual ~Font() { }
 8019e90:	b480      	push	{r7}
 8019e92:	b083      	sub	sp, #12
 8019e94:	af00      	add	r7, sp, #0
 8019e96:	6078      	str	r0, [r7, #4]
 8019e98:	4a04      	ldr	r2, [pc, #16]	; (8019eac <_ZN8touchgfx4FontD1Ev+0x1c>)
 8019e9a:	687b      	ldr	r3, [r7, #4]
 8019e9c:	601a      	str	r2, [r3, #0]
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	4618      	mov	r0, r3
 8019ea2:	370c      	adds	r7, #12
 8019ea4:	46bd      	mov	sp, r7
 8019ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019eaa:	4770      	bx	lr
 8019eac:	08025d78 	.word	0x08025d78

08019eb0 <_ZN8touchgfx4FontD0Ev>:
 8019eb0:	b580      	push	{r7, lr}
 8019eb2:	b082      	sub	sp, #8
 8019eb4:	af00      	add	r7, sp, #0
 8019eb6:	6078      	str	r0, [r7, #4]
 8019eb8:	6878      	ldr	r0, [r7, #4]
 8019eba:	f7ff ffe9 	bl	8019e90 <_ZN8touchgfx4FontD1Ev>
 8019ebe:	2110      	movs	r1, #16
 8019ec0:	6878      	ldr	r0, [r7, #4]
 8019ec2:	f008 faae 	bl	8022422 <_ZdlPvj>
 8019ec6:	687b      	ldr	r3, [r7, #4]
 8019ec8:	4618      	mov	r0, r3
 8019eca:	3708      	adds	r7, #8
 8019ecc:	46bd      	mov	sp, r7
 8019ece:	bd80      	pop	{r7, pc}

08019ed0 <_ZN8touchgfx9ConstFontD1Ev>:
 * @note Pure virtual class. Create an application-
 *          specific implementation of getPixelData.
 *
 * @see Font
 */
class ConstFont : public Font
 8019ed0:	b580      	push	{r7, lr}
 8019ed2:	b082      	sub	sp, #8
 8019ed4:	af00      	add	r7, sp, #0
 8019ed6:	6078      	str	r0, [r7, #4]
 8019ed8:	4a05      	ldr	r2, [pc, #20]	; (8019ef0 <_ZN8touchgfx9ConstFontD1Ev+0x20>)
 8019eda:	687b      	ldr	r3, [r7, #4]
 8019edc:	601a      	str	r2, [r3, #0]
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	4618      	mov	r0, r3
 8019ee2:	f7ff ffd5 	bl	8019e90 <_ZN8touchgfx4FontD1Ev>
 8019ee6:	687b      	ldr	r3, [r7, #4]
 8019ee8:	4618      	mov	r0, r3
 8019eea:	3708      	adds	r7, #8
 8019eec:	46bd      	mov	sp, r7
 8019eee:	bd80      	pop	{r7, pc}
 8019ef0:	08025e2c 	.word	0x08025e2c

08019ef4 <_ZN8touchgfx9ConstFontD0Ev>:
 8019ef4:	b580      	push	{r7, lr}
 8019ef6:	b082      	sub	sp, #8
 8019ef8:	af00      	add	r7, sp, #0
 8019efa:	6078      	str	r0, [r7, #4]
 8019efc:	6878      	ldr	r0, [r7, #4]
 8019efe:	f7ff ffe7 	bl	8019ed0 <_ZN8touchgfx9ConstFontD1Ev>
 8019f02:	2118      	movs	r1, #24
 8019f04:	6878      	ldr	r0, [r7, #4]
 8019f06:	f008 fa8c 	bl	8022422 <_ZdlPvj>
 8019f0a:	687b      	ldr	r3, [r7, #4]
 8019f0c:	4618      	mov	r0, r3
 8019f0e:	3708      	adds	r7, #8
 8019f10:	46bd      	mov	sp, r7
 8019f12:	bd80      	pop	{r7, pc}

08019f14 <__tcf_0>:
extern const touchgfx::KerningNode kerning_verdana_10_4bpp[];
touchgfx::InternalFlashFont& getFont_verdana_10_4bpp();

touchgfx::InternalFlashFont& getFont_verdana_10_4bpp()
{
    static touchgfx::InternalFlashFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 65, 10, 2, 4, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0);
 8019f14:	b580      	push	{r7, lr}
 8019f16:	af00      	add	r7, sp, #0
 8019f18:	4801      	ldr	r0, [pc, #4]	; (8019f20 <__tcf_0+0xc>)
 8019f1a:	f000 f8b5 	bl	801a088 <_ZN8touchgfx17InternalFlashFontD1Ev>
 8019f1e:	bd80      	pop	{r7, pc}
 8019f20:	20009c18 	.word	0x20009c18

08019f24 <_Z23getFont_verdana_10_4bppv>:
{
 8019f24:	b580      	push	{r7, lr}
 8019f26:	b088      	sub	sp, #32
 8019f28:	af08      	add	r7, sp, #32
    static touchgfx::InternalFlashFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 65, 10, 2, 4, 1, 1, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0);
 8019f2a:	4b13      	ldr	r3, [pc, #76]	; (8019f78 <_Z23getFont_verdana_10_4bppv+0x54>)
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	f003 0301 	and.w	r3, r3, #1
 8019f32:	2b00      	cmp	r3, #0
 8019f34:	d11b      	bne.n	8019f6e <_Z23getFont_verdana_10_4bppv+0x4a>
 8019f36:	2300      	movs	r3, #0
 8019f38:	9307      	str	r3, [sp, #28]
 8019f3a:	233f      	movs	r3, #63	; 0x3f
 8019f3c:	9306      	str	r3, [sp, #24]
 8019f3e:	4b0f      	ldr	r3, [pc, #60]	; (8019f7c <_Z23getFont_verdana_10_4bppv+0x58>)
 8019f40:	9305      	str	r3, [sp, #20]
 8019f42:	4b0f      	ldr	r3, [pc, #60]	; (8019f80 <_Z23getFont_verdana_10_4bppv+0x5c>)
 8019f44:	9304      	str	r3, [sp, #16]
 8019f46:	2301      	movs	r3, #1
 8019f48:	9303      	str	r3, [sp, #12]
 8019f4a:	2301      	movs	r3, #1
 8019f4c:	9302      	str	r3, [sp, #8]
 8019f4e:	2304      	movs	r3, #4
 8019f50:	9301      	str	r3, [sp, #4]
 8019f52:	2302      	movs	r3, #2
 8019f54:	9300      	str	r3, [sp, #0]
 8019f56:	230a      	movs	r3, #10
 8019f58:	2241      	movs	r2, #65	; 0x41
 8019f5a:	490a      	ldr	r1, [pc, #40]	; (8019f84 <_Z23getFont_verdana_10_4bppv+0x60>)
 8019f5c:	480a      	ldr	r0, [pc, #40]	; (8019f88 <_Z23getFont_verdana_10_4bppv+0x64>)
 8019f5e:	f005 fcb1 	bl	801f8c4 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 8019f62:	4b05      	ldr	r3, [pc, #20]	; (8019f78 <_Z23getFont_verdana_10_4bppv+0x54>)
 8019f64:	2201      	movs	r2, #1
 8019f66:	601a      	str	r2, [r3, #0]
 8019f68:	4808      	ldr	r0, [pc, #32]	; (8019f8c <_Z23getFont_verdana_10_4bppv+0x68>)
 8019f6a:	f008 fa95 	bl	8022498 <atexit>
    return verdana_10_4bpp;
 8019f6e:	4b06      	ldr	r3, [pc, #24]	; (8019f88 <_Z23getFont_verdana_10_4bppv+0x64>)
}
 8019f70:	4618      	mov	r0, r3
 8019f72:	46bd      	mov	sp, r7
 8019f74:	bd80      	pop	{r7, pc}
 8019f76:	bf00      	nop
 8019f78:	20009c38 	.word	0x20009c38
 8019f7c:	0802cf30 	.word	0x0802cf30
 8019f80:	08026638 	.word	0x08026638
 8019f84:	0802d2dc 	.word	0x0802d2dc
 8019f88:	20009c18 	.word	0x20009c18
 8019f8c:	08019f15 	.word	0x08019f15

08019f90 <__tcf_1>:
extern const touchgfx::KerningNode kerning_verdana_20_4bpp[];
touchgfx::InternalFlashFont& getFont_verdana_20_4bpp();

touchgfx::InternalFlashFont& getFont_verdana_20_4bpp()
{
    static touchgfx::InternalFlashFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 66, 20, 4, 4, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0);
 8019f90:	b580      	push	{r7, lr}
 8019f92:	af00      	add	r7, sp, #0
 8019f94:	4801      	ldr	r0, [pc, #4]	; (8019f9c <__tcf_1+0xc>)
 8019f96:	f000 f877 	bl	801a088 <_ZN8touchgfx17InternalFlashFontD1Ev>
 8019f9a:	bd80      	pop	{r7, pc}
 8019f9c:	20009c3c 	.word	0x20009c3c

08019fa0 <_Z23getFont_verdana_20_4bppv>:
{
 8019fa0:	b580      	push	{r7, lr}
 8019fa2:	b088      	sub	sp, #32
 8019fa4:	af08      	add	r7, sp, #32
    static touchgfx::InternalFlashFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 66, 20, 4, 4, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0);
 8019fa6:	4b13      	ldr	r3, [pc, #76]	; (8019ff4 <_Z23getFont_verdana_20_4bppv+0x54>)
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	f003 0301 	and.w	r3, r3, #1
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	d11b      	bne.n	8019fea <_Z23getFont_verdana_20_4bppv+0x4a>
 8019fb2:	2300      	movs	r3, #0
 8019fb4:	9307      	str	r3, [sp, #28]
 8019fb6:	233f      	movs	r3, #63	; 0x3f
 8019fb8:	9306      	str	r3, [sp, #24]
 8019fba:	4b0f      	ldr	r3, [pc, #60]	; (8019ff8 <_Z23getFont_verdana_20_4bppv+0x58>)
 8019fbc:	9305      	str	r3, [sp, #20]
 8019fbe:	4b0f      	ldr	r3, [pc, #60]	; (8019ffc <_Z23getFont_verdana_20_4bppv+0x5c>)
 8019fc0:	9304      	str	r3, [sp, #16]
 8019fc2:	2301      	movs	r3, #1
 8019fc4:	9303      	str	r3, [sp, #12]
 8019fc6:	2301      	movs	r3, #1
 8019fc8:	9302      	str	r3, [sp, #8]
 8019fca:	2304      	movs	r3, #4
 8019fcc:	9301      	str	r3, [sp, #4]
 8019fce:	2304      	movs	r3, #4
 8019fd0:	9300      	str	r3, [sp, #0]
 8019fd2:	2314      	movs	r3, #20
 8019fd4:	2242      	movs	r2, #66	; 0x42
 8019fd6:	490a      	ldr	r1, [pc, #40]	; (801a000 <_Z23getFont_verdana_20_4bppv+0x60>)
 8019fd8:	480a      	ldr	r0, [pc, #40]	; (801a004 <_Z23getFont_verdana_20_4bppv+0x64>)
 8019fda:	f005 fc73 	bl	801f8c4 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 8019fde:	4b05      	ldr	r3, [pc, #20]	; (8019ff4 <_Z23getFont_verdana_20_4bppv+0x54>)
 8019fe0:	2201      	movs	r2, #1
 8019fe2:	601a      	str	r2, [r3, #0]
 8019fe4:	4808      	ldr	r0, [pc, #32]	; (801a008 <_Z23getFont_verdana_20_4bppv+0x68>)
 8019fe6:	f008 fa57 	bl	8022498 <atexit>
    return verdana_20_4bpp;
 8019fea:	4b06      	ldr	r3, [pc, #24]	; (801a004 <_Z23getFont_verdana_20_4bppv+0x64>)
}
 8019fec:	4618      	mov	r0, r3
 8019fee:	46bd      	mov	sp, r7
 8019ff0:	bd80      	pop	{r7, pc}
 8019ff2:	bf00      	nop
 8019ff4:	20009c5c 	.word	0x20009c5c
 8019ff8:	0802cf4c 	.word	0x0802cf4c
 8019ffc:	08026c54 	.word	0x08026c54
 801a000:	0802d66c 	.word	0x0802d66c
 801a004:	20009c3c 	.word	0x20009c3c
 801a008:	08019f91 	.word	0x08019f91

0801a00c <__tcf_2>:
extern const touchgfx::KerningNode kerning_verdana_40_4bpp[];
touchgfx::InternalFlashFont& getFont_verdana_40_4bpp();

touchgfx::InternalFlashFont& getFont_verdana_40_4bpp()
{
    static touchgfx::InternalFlashFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 65, 40, 8, 4, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0);
 801a00c:	b580      	push	{r7, lr}
 801a00e:	af00      	add	r7, sp, #0
 801a010:	4801      	ldr	r0, [pc, #4]	; (801a018 <__tcf_2+0xc>)
 801a012:	f000 f839 	bl	801a088 <_ZN8touchgfx17InternalFlashFontD1Ev>
 801a016:	bd80      	pop	{r7, pc}
 801a018:	20009c60 	.word	0x20009c60

0801a01c <_Z23getFont_verdana_40_4bppv>:
{
 801a01c:	b580      	push	{r7, lr}
 801a01e:	b088      	sub	sp, #32
 801a020:	af08      	add	r7, sp, #32
    static touchgfx::InternalFlashFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 65, 40, 8, 4, 2, 2, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0);
 801a022:	4b13      	ldr	r3, [pc, #76]	; (801a070 <_Z23getFont_verdana_40_4bppv+0x54>)
 801a024:	681b      	ldr	r3, [r3, #0]
 801a026:	f003 0301 	and.w	r3, r3, #1
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	d11b      	bne.n	801a066 <_Z23getFont_verdana_40_4bppv+0x4a>
 801a02e:	2300      	movs	r3, #0
 801a030:	9307      	str	r3, [sp, #28]
 801a032:	233f      	movs	r3, #63	; 0x3f
 801a034:	9306      	str	r3, [sp, #24]
 801a036:	4b0f      	ldr	r3, [pc, #60]	; (801a074 <_Z23getFont_verdana_40_4bppv+0x58>)
 801a038:	9305      	str	r3, [sp, #20]
 801a03a:	4b0f      	ldr	r3, [pc, #60]	; (801a078 <_Z23getFont_verdana_40_4bppv+0x5c>)
 801a03c:	9304      	str	r3, [sp, #16]
 801a03e:	2302      	movs	r3, #2
 801a040:	9303      	str	r3, [sp, #12]
 801a042:	2302      	movs	r3, #2
 801a044:	9302      	str	r3, [sp, #8]
 801a046:	2304      	movs	r3, #4
 801a048:	9301      	str	r3, [sp, #4]
 801a04a:	2308      	movs	r3, #8
 801a04c:	9300      	str	r3, [sp, #0]
 801a04e:	2328      	movs	r3, #40	; 0x28
 801a050:	2241      	movs	r2, #65	; 0x41
 801a052:	490a      	ldr	r1, [pc, #40]	; (801a07c <_Z23getFont_verdana_40_4bppv+0x60>)
 801a054:	480a      	ldr	r0, [pc, #40]	; (801a080 <_Z23getFont_verdana_40_4bppv+0x64>)
 801a056:	f005 fc35 	bl	801f8c4 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>
 801a05a:	4b05      	ldr	r3, [pc, #20]	; (801a070 <_Z23getFont_verdana_40_4bppv+0x54>)
 801a05c:	2201      	movs	r2, #1
 801a05e:	601a      	str	r2, [r3, #0]
 801a060:	4808      	ldr	r0, [pc, #32]	; (801a084 <_Z23getFont_verdana_40_4bppv+0x68>)
 801a062:	f008 fa19 	bl	8022498 <atexit>
    return verdana_40_4bpp;
 801a066:	4b06      	ldr	r3, [pc, #24]	; (801a080 <_Z23getFont_verdana_40_4bppv+0x64>)
}
 801a068:	4618      	mov	r0, r3
 801a06a:	46bd      	mov	sp, r7
 801a06c:	bd80      	pop	{r7, pc}
 801a06e:	bf00      	nop
 801a070:	20009c80 	.word	0x20009c80
 801a074:	0802d084 	.word	0x0802d084
 801a078:	08028014 	.word	0x08028014
 801a07c:	0802da08 	.word	0x0802da08
 801a080:	20009c60 	.word	0x20009c60
 801a084:	0801a00d 	.word	0x0801a00d

0801a088 <_ZN8touchgfx17InternalFlashFontD1Ev>:
 *        An InternalFlashFont has both glyph table and glyph data placed in a flash which
 *        supports random access read (i.e. not a NAND flash)
 *
 * @see ConstFont
 */
class InternalFlashFont : public ConstFont
 801a088:	b580      	push	{r7, lr}
 801a08a:	b082      	sub	sp, #8
 801a08c:	af00      	add	r7, sp, #0
 801a08e:	6078      	str	r0, [r7, #4]
 801a090:	4a05      	ldr	r2, [pc, #20]	; (801a0a8 <_ZN8touchgfx17InternalFlashFontD1Ev+0x20>)
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	601a      	str	r2, [r3, #0]
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	4618      	mov	r0, r3
 801a09a:	f7ff ff19 	bl	8019ed0 <_ZN8touchgfx9ConstFontD1Ev>
 801a09e:	687b      	ldr	r3, [r7, #4]
 801a0a0:	4618      	mov	r0, r3
 801a0a2:	3708      	adds	r7, #8
 801a0a4:	46bd      	mov	sp, r7
 801a0a6:	bd80      	pop	{r7, pc}
 801a0a8:	08025ec0 	.word	0x08025ec0

0801a0ac <_ZN8touchgfx17InternalFlashFontD0Ev>:
 801a0ac:	b580      	push	{r7, lr}
 801a0ae:	b082      	sub	sp, #8
 801a0b0:	af00      	add	r7, sp, #0
 801a0b2:	6078      	str	r0, [r7, #4]
 801a0b4:	6878      	ldr	r0, [r7, #4]
 801a0b6:	f7ff ffe7 	bl	801a088 <_ZN8touchgfx17InternalFlashFontD1Ev>
 801a0ba:	2120      	movs	r1, #32
 801a0bc:	6878      	ldr	r0, [r7, #4]
 801a0be:	f008 f9b0 	bl	8022422 <_ZdlPvj>
 801a0c2:	687b      	ldr	r3, [r7, #4]
 801a0c4:	4618      	mov	r0, r3
 801a0c6:	3708      	adds	r7, #8
 801a0c8:	46bd      	mov	sp, r7
 801a0ca:	bd80      	pop	{r7, pc}

0801a0cc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 801a0cc:	b480      	push	{r7}
 801a0ce:	b083      	sub	sp, #12
 801a0d0:	af00      	add	r7, sp, #0
 801a0d2:	6078      	str	r0, [r7, #4]
 801a0d4:	6039      	str	r1, [r7, #0]
 801a0d6:	683b      	ldr	r3, [r7, #0]
 801a0d8:	4618      	mov	r0, r3
 801a0da:	370c      	adds	r7, #12
 801a0dc:	46bd      	mov	sp, r7
 801a0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a0e2:	4770      	bx	lr

0801a0e4 <_ZN8touchgfx10TransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Constructs the Transition.
     */
    Transition() :
 801a0e4:	b480      	push	{r7}
 801a0e6:	b083      	sub	sp, #12
 801a0e8:	af00      	add	r7, sp, #0
 801a0ea:	6078      	str	r0, [r7, #4]
        screenContainer(0), done(false)
 801a0ec:	4a07      	ldr	r2, [pc, #28]	; (801a10c <_ZN8touchgfx10TransitionC1Ev+0x28>)
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	601a      	str	r2, [r3, #0]
 801a0f2:	687b      	ldr	r3, [r7, #4]
 801a0f4:	2200      	movs	r2, #0
 801a0f6:	605a      	str	r2, [r3, #4]
 801a0f8:	687b      	ldr	r3, [r7, #4]
 801a0fa:	2200      	movs	r2, #0
 801a0fc:	721a      	strb	r2, [r3, #8]
    {
    }
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	4618      	mov	r0, r3
 801a102:	370c      	adds	r7, #12
 801a104:	46bd      	mov	sp, r7
 801a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a10a:	4770      	bx	lr
 801a10c:	08024c28 	.word	0x08024c28

0801a110 <_ZN8touchgfx10TransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Transition()
 801a110:	b480      	push	{r7}
 801a112:	b083      	sub	sp, #12
 801a114:	af00      	add	r7, sp, #0
 801a116:	6078      	str	r0, [r7, #4]
    {
 801a118:	4a04      	ldr	r2, [pc, #16]	; (801a12c <_ZN8touchgfx10TransitionD1Ev+0x1c>)
 801a11a:	687b      	ldr	r3, [r7, #4]
 801a11c:	601a      	str	r2, [r3, #0]
    }
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	4618      	mov	r0, r3
 801a122:	370c      	adds	r7, #12
 801a124:	46bd      	mov	sp, r7
 801a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a12a:	4770      	bx	lr
 801a12c:	08024c28 	.word	0x08024c28

0801a130 <_ZN8touchgfx10TransitionD0Ev>:
    virtual ~Transition()
 801a130:	b580      	push	{r7, lr}
 801a132:	b082      	sub	sp, #8
 801a134:	af00      	add	r7, sp, #0
 801a136:	6078      	str	r0, [r7, #4]
    }
 801a138:	6878      	ldr	r0, [r7, #4]
 801a13a:	f7ff ffe9 	bl	801a110 <_ZN8touchgfx10TransitionD1Ev>
 801a13e:	210c      	movs	r1, #12
 801a140:	6878      	ldr	r0, [r7, #4]
 801a142:	f008 f96e 	bl	8022422 <_ZdlPvj>
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	4618      	mov	r0, r3
 801a14a:	3708      	adds	r7, #8
 801a14c:	46bd      	mov	sp, r7
 801a14e:	bd80      	pop	{r7, pc}

0801a150 <_ZN8touchgfx10Transition15handleTickEventEv>:
     *
     * @brief Called for every tick when transitioning.
     *
     *        Called for every tick when transitioning. Base does nothing.
     */
    virtual void handleTickEvent() { }
 801a150:	b480      	push	{r7}
 801a152:	b083      	sub	sp, #12
 801a154:	af00      	add	r7, sp, #0
 801a156:	6078      	str	r0, [r7, #4]
 801a158:	bf00      	nop
 801a15a:	370c      	adds	r7, #12
 801a15c:	46bd      	mov	sp, r7
 801a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a162:	4770      	bx	lr

0801a164 <_ZN8touchgfx10Transition8tearDownEv>:
     * @brief Tears down the Animation.
     *
     *        Tears down the Animation. Called before the d.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void tearDown() { }
 801a164:	b480      	push	{r7}
 801a166:	b083      	sub	sp, #12
 801a168:	af00      	add	r7, sp, #0
 801a16a:	6078      	str	r0, [r7, #4]
 801a16c:	bf00      	nop
 801a16e:	370c      	adds	r7, #12
 801a170:	46bd      	mov	sp, r7
 801a172:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a176:	4770      	bx	lr

0801a178 <_ZN8touchgfx10Transition4initEv>:
     * @brief Initializes the transition.
     *
     *        Initializes the transition. Called after the c.tor. when the application changes
     *        the transition. Base version does nothing.
     */
    virtual void init() { }
 801a178:	b480      	push	{r7}
 801a17a:	b083      	sub	sp, #12
 801a17c:	af00      	add	r7, sp, #0
 801a17e:	6078      	str	r0, [r7, #4]
 801a180:	bf00      	nop
 801a182:	370c      	adds	r7, #12
 801a184:	46bd      	mov	sp, r7
 801a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a18a:	4770      	bx	lr

0801a18c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *        Sets the screen container. Is used by Screen to enable the transition to access
     *        the container.
     *
     * @param [in] cont The container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
 801a18c:	b480      	push	{r7}
 801a18e:	b083      	sub	sp, #12
 801a190:	af00      	add	r7, sp, #0
 801a192:	6078      	str	r0, [r7, #4]
 801a194:	6039      	str	r1, [r7, #0]
    {
        screenContainer = &cont;
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	683a      	ldr	r2, [r7, #0]
 801a19a:	605a      	str	r2, [r3, #4]
    }
 801a19c:	bf00      	nop
 801a19e:	370c      	adds	r7, #12
 801a1a0:	46bd      	mov	sp, r7
 801a1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a1a6:	4770      	bx	lr

0801a1a8 <_ZN8touchgfx14MVPApplicationC1Ev>:
    MVPApplication() :
 801a1a8:	b580      	push	{r7, lr}
 801a1aa:	b082      	sub	sp, #8
 801a1ac:	af00      	add	r7, sp, #0
 801a1ae:	6078      	str	r0, [r7, #4]
        pendingScreenTransitionCallback(0)
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	4618      	mov	r0, r3
 801a1b4:	f004 fb3c 	bl	801e830 <_ZN8touchgfx11ApplicationC1Ev>
 801a1b8:	4a09      	ldr	r2, [pc, #36]	; (801a1e0 <_ZN8touchgfx14MVPApplicationC1Ev+0x38>)
 801a1ba:	687b      	ldr	r3, [r7, #4]
 801a1bc:	601a      	str	r2, [r3, #0]
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	2200      	movs	r2, #0
 801a1c2:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	2200      	movs	r2, #0
 801a1ca:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
        instance = this;
 801a1ce:	687b      	ldr	r3, [r7, #4]
 801a1d0:	4a04      	ldr	r2, [pc, #16]	; (801a1e4 <_ZN8touchgfx14MVPApplicationC1Ev+0x3c>)
 801a1d2:	6013      	str	r3, [r2, #0]
    }
 801a1d4:	687b      	ldr	r3, [r7, #4]
 801a1d6:	4618      	mov	r0, r3
 801a1d8:	3708      	adds	r7, #8
 801a1da:	46bd      	mov	sp, r7
 801a1dc:	bd80      	pop	{r7, pc}
 801a1de:	bf00      	nop
 801a1e0:	08024890 	.word	0x08024890
 801a1e4:	20009d90 	.word	0x20009d90

0801a1e8 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>:
 * @param [in] currentScreen    If non-null, the current screen.
 * @param [in] currentPresenter If non-null, the current presenter.
 * @param [in] currentTrans     If non-null, the current transaction.
 */
static inline void prepareTransition(Screen** currentScreen, Presenter** currentPresenter, Transition** currentTrans)
{
 801a1e8:	b580      	push	{r7, lr}
 801a1ea:	b084      	sub	sp, #16
 801a1ec:	af00      	add	r7, sp, #0
 801a1ee:	60f8      	str	r0, [r7, #12]
 801a1f0:	60b9      	str	r1, [r7, #8]
 801a1f2:	607a      	str	r2, [r7, #4]
    Application::getInstance()->clearAllTimerWidgets();
 801a1f4:	f004 fafa 	bl	801e7ec <_ZN8touchgfx11Application11getInstanceEv>
 801a1f8:	4603      	mov	r3, r0
 801a1fa:	4618      	mov	r0, r3
 801a1fc:	f004 fafc 	bl	801e7f8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>

    if (*currentTrans)
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	2b00      	cmp	r3, #0
 801a206:	d008      	beq.n	801a21a <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x32>
    {
        (*currentTrans)->tearDown();
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	681a      	ldr	r2, [r3, #0]
 801a20c:	687b      	ldr	r3, [r7, #4]
 801a20e:	681b      	ldr	r3, [r3, #0]
 801a210:	681b      	ldr	r3, [r3, #0]
 801a212:	330c      	adds	r3, #12
 801a214:	681b      	ldr	r3, [r3, #0]
 801a216:	4610      	mov	r0, r2
 801a218:	4798      	blx	r3
    }
    if (*currentTrans)
 801a21a:	687b      	ldr	r3, [r7, #4]
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	2b00      	cmp	r3, #0
 801a220:	d007      	beq.n	801a232 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x4a>
    {
        (*currentTrans)->~Transition();
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	681a      	ldr	r2, [r3, #0]
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	681b      	ldr	r3, [r3, #0]
 801a22a:	681b      	ldr	r3, [r3, #0]
 801a22c:	681b      	ldr	r3, [r3, #0]
 801a22e:	4610      	mov	r0, r2
 801a230:	4798      	blx	r3
    }
    if (*currentScreen)
 801a232:	68fb      	ldr	r3, [r7, #12]
 801a234:	681b      	ldr	r3, [r3, #0]
 801a236:	2b00      	cmp	r3, #0
 801a238:	d008      	beq.n	801a24c <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x64>
    {
        (*currentScreen)->tearDownScreen();
 801a23a:	68fb      	ldr	r3, [r7, #12]
 801a23c:	681a      	ldr	r2, [r3, #0]
 801a23e:	68fb      	ldr	r3, [r7, #12]
 801a240:	681b      	ldr	r3, [r3, #0]
 801a242:	681b      	ldr	r3, [r3, #0]
 801a244:	3314      	adds	r3, #20
 801a246:	681b      	ldr	r3, [r3, #0]
 801a248:	4610      	mov	r0, r2
 801a24a:	4798      	blx	r3
    }
    if (*currentPresenter)
 801a24c:	68bb      	ldr	r3, [r7, #8]
 801a24e:	681b      	ldr	r3, [r3, #0]
 801a250:	2b00      	cmp	r3, #0
 801a252:	d008      	beq.n	801a266 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x7e>
    {
        (*currentPresenter)->deactivate();
 801a254:	68bb      	ldr	r3, [r7, #8]
 801a256:	681a      	ldr	r2, [r3, #0]
 801a258:	68bb      	ldr	r3, [r7, #8]
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	681b      	ldr	r3, [r3, #0]
 801a25e:	3304      	adds	r3, #4
 801a260:	681b      	ldr	r3, [r3, #0]
 801a262:	4610      	mov	r0, r2
 801a264:	4798      	blx	r3
    }
    if (*currentScreen)
 801a266:	68fb      	ldr	r3, [r7, #12]
 801a268:	681b      	ldr	r3, [r3, #0]
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	d007      	beq.n	801a27e <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0x96>
    {
        (*currentScreen)->~Screen();
 801a26e:	68fb      	ldr	r3, [r7, #12]
 801a270:	681a      	ldr	r2, [r3, #0]
 801a272:	68fb      	ldr	r3, [r7, #12]
 801a274:	681b      	ldr	r3, [r3, #0]
 801a276:	681b      	ldr	r3, [r3, #0]
 801a278:	681b      	ldr	r3, [r3, #0]
 801a27a:	4610      	mov	r0, r2
 801a27c:	4798      	blx	r3
    }
    if (*currentPresenter)
 801a27e:	68bb      	ldr	r3, [r7, #8]
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	2b00      	cmp	r3, #0
 801a284:	d008      	beq.n	801a298 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE+0xb0>
    {
        (*currentPresenter)->~Presenter();
 801a286:	68bb      	ldr	r3, [r7, #8]
 801a288:	681a      	ldr	r2, [r3, #0]
 801a28a:	68bb      	ldr	r3, [r7, #8]
 801a28c:	681b      	ldr	r3, [r3, #0]
 801a28e:	681b      	ldr	r3, [r3, #0]
 801a290:	3308      	adds	r3, #8
 801a292:	681b      	ldr	r3, [r3, #0]
 801a294:	4610      	mov	r0, r2
 801a296:	4798      	blx	r3
    }
}
 801a298:	bf00      	nop
 801a29a:	3710      	adds	r7, #16
 801a29c:	46bd      	mov	sp, r7
 801a29e:	bd80      	pop	{r7, pc}

0801a2a0 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>:
 * @param [in] newScreen     If non-null, the new screen.
 * @param [in] newPresenter  If non-null, the new presenter.
 * @param [in] newTransition If non-null, the new transition.
 */
static inline void finalizeTransition(Screen* newScreen, Presenter* newPresenter, Transition* newTransition)
{
 801a2a0:	b580      	push	{r7, lr}
 801a2a2:	b084      	sub	sp, #16
 801a2a4:	af00      	add	r7, sp, #0
 801a2a6:	60f8      	str	r0, [r7, #12]
 801a2a8:	60b9      	str	r1, [r7, #8]
 801a2aa:	607a      	str	r2, [r7, #4]
    newScreen->setupScreen();
 801a2ac:	68fb      	ldr	r3, [r7, #12]
 801a2ae:	681b      	ldr	r3, [r3, #0]
 801a2b0:	330c      	adds	r3, #12
 801a2b2:	681b      	ldr	r3, [r3, #0]
 801a2b4:	68f8      	ldr	r0, [r7, #12]
 801a2b6:	4798      	blx	r3
    newPresenter->activate();
 801a2b8:	68bb      	ldr	r3, [r7, #8]
 801a2ba:	681b      	ldr	r3, [r3, #0]
 801a2bc:	681b      	ldr	r3, [r3, #0]
 801a2be:	68b8      	ldr	r0, [r7, #8]
 801a2c0:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 801a2c2:	6879      	ldr	r1, [r7, #4]
 801a2c4:	68f8      	ldr	r0, [r7, #12]
 801a2c6:	f005 fa9f 	bl	801f808 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	681b      	ldr	r3, [r3, #0]
 801a2ce:	3310      	adds	r3, #16
 801a2d0:	681b      	ldr	r3, [r3, #0]
 801a2d2:	6878      	ldr	r0, [r7, #4]
 801a2d4:	4798      	blx	r3

    Application::getInstance()->draw();
 801a2d6:	f004 fa89 	bl	801e7ec <_ZN8touchgfx11Application11getInstanceEv>
 801a2da:	4602      	mov	r2, r0
 801a2dc:	6813      	ldr	r3, [r2, #0]
 801a2de:	3328      	adds	r3, #40	; 0x28
 801a2e0:	681b      	ldr	r3, [r3, #0]
 801a2e2:	4610      	mov	r0, r2
 801a2e4:	4798      	blx	r3
}
 801a2e6:	bf00      	nop
 801a2e8:	3710      	adds	r7, #16
 801a2ea:	46bd      	mov	sp, r7
 801a2ec:	bd80      	pop	{r7, pc}

0801a2ee <_ZN5Model4bindEP13ModelListener>:

    /**
     * Sets the modelListener to point to the currently active presenter. Called automatically
     * when switching screen.
     */
    void bind(ModelListener* listener)
 801a2ee:	b480      	push	{r7}
 801a2f0:	b083      	sub	sp, #12
 801a2f2:	af00      	add	r7, sp, #0
 801a2f4:	6078      	str	r0, [r7, #4]
 801a2f6:	6039      	str	r1, [r7, #0]
    {
        modelListener = listener;
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	683a      	ldr	r2, [r7, #0]
 801a2fc:	601a      	str	r2, [r3, #0]
    }
 801a2fe:	bf00      	nop
 801a300:	370c      	adds	r7, #12
 801a302:	46bd      	mov	sp, r7
 801a304:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a308:	4770      	bx	lr
	...

0801a30c <_ZN8touchgfx12NoTransitionC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    NoTransition() : Transition() { }
 801a30c:	b580      	push	{r7, lr}
 801a30e:	b082      	sub	sp, #8
 801a310:	af00      	add	r7, sp, #0
 801a312:	6078      	str	r0, [r7, #4]
 801a314:	687b      	ldr	r3, [r7, #4]
 801a316:	4618      	mov	r0, r3
 801a318:	f7ff fee4 	bl	801a0e4 <_ZN8touchgfx10TransitionC1Ev>
 801a31c:	4a03      	ldr	r2, [pc, #12]	; (801a32c <_ZN8touchgfx12NoTransitionC1Ev+0x20>)
 801a31e:	687b      	ldr	r3, [r7, #4]
 801a320:	601a      	str	r2, [r3, #0]
 801a322:	687b      	ldr	r3, [r7, #4]
 801a324:	4618      	mov	r0, r3
 801a326:	3708      	adds	r7, #8
 801a328:	46bd      	mov	sp, r7
 801a32a:	bd80      	pop	{r7, pc}
 801a32c:	08024c08 	.word	0x08024c08

0801a330 <_ZN8touchgfx12NoTransitionD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~NoTransition() { }
 801a330:	b580      	push	{r7, lr}
 801a332:	b082      	sub	sp, #8
 801a334:	af00      	add	r7, sp, #0
 801a336:	6078      	str	r0, [r7, #4]
 801a338:	4a05      	ldr	r2, [pc, #20]	; (801a350 <_ZN8touchgfx12NoTransitionD1Ev+0x20>)
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	601a      	str	r2, [r3, #0]
 801a33e:	687b      	ldr	r3, [r7, #4]
 801a340:	4618      	mov	r0, r3
 801a342:	f7ff fee5 	bl	801a110 <_ZN8touchgfx10TransitionD1Ev>
 801a346:	687b      	ldr	r3, [r7, #4]
 801a348:	4618      	mov	r0, r3
 801a34a:	3708      	adds	r7, #8
 801a34c:	46bd      	mov	sp, r7
 801a34e:	bd80      	pop	{r7, pc}
 801a350:	08024c08 	.word	0x08024c08

0801a354 <_ZN8touchgfx12NoTransitionD0Ev>:
 801a354:	b580      	push	{r7, lr}
 801a356:	b082      	sub	sp, #8
 801a358:	af00      	add	r7, sp, #0
 801a35a:	6078      	str	r0, [r7, #4]
 801a35c:	6878      	ldr	r0, [r7, #4]
 801a35e:	f7ff ffe7 	bl	801a330 <_ZN8touchgfx12NoTransitionD1Ev>
 801a362:	210c      	movs	r1, #12
 801a364:	6878      	ldr	r0, [r7, #4]
 801a366:	f008 f85c 	bl	8022422 <_ZdlPvj>
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	4618      	mov	r0, r3
 801a36e:	3708      	adds	r7, #8
 801a370:	46bd      	mov	sp, r7
 801a372:	bd80      	pop	{r7, pc}

0801a374 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
     *
     * @brief Indicates that the transition is done after the first tick.
     *
     *        Indicates that the transition is done after the first tick.
     */
    virtual void handleTickEvent()
 801a374:	b480      	push	{r7}
 801a376:	b083      	sub	sp, #12
 801a378:	af00      	add	r7, sp, #0
 801a37a:	6078      	str	r0, [r7, #4]
    {
        done = true;
 801a37c:	687b      	ldr	r3, [r7, #4]
 801a37e:	2201      	movs	r2, #1
 801a380:	721a      	strb	r2, [r3, #8]
    }
 801a382:	bf00      	nop
 801a384:	370c      	adds	r7, #12
 801a386:	46bd      	mov	sp, r7
 801a388:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a38c:	4770      	bx	lr

0801a38e <_ZN13ModelListener4bindEP5Model>:

    /**
     * Sets the model pointer to point to the Model object. Called automatically
     * when switching screen.
     */
    void bind(Model* m)
 801a38e:	b480      	push	{r7}
 801a390:	b083      	sub	sp, #12
 801a392:	af00      	add	r7, sp, #0
 801a394:	6078      	str	r0, [r7, #4]
 801a396:	6039      	str	r1, [r7, #0]
    {
        model = m;
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	683a      	ldr	r2, [r7, #0]
 801a39c:	605a      	str	r2, [r3, #4]
    }
 801a39e:	bf00      	nop
 801a3a0:	370c      	adds	r7, #12
 801a3a2:	46bd      	mov	sp, r7
 801a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a3a8:	4770      	bx	lr
	...

0801a3ac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
#include <gui/screen2_screen/Screen2Presenter.hpp>

using namespace touchgfx;


FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 801a3ac:	b580      	push	{r7, lr}
 801a3ae:	b084      	sub	sp, #16
 801a3b0:	af00      	add	r7, sp, #0
 801a3b2:	60f8      	str	r0, [r7, #12]
 801a3b4:	60b9      	str	r1, [r7, #8]
 801a3b6:	607a      	str	r2, [r7, #4]
    : touchgfx::MVPApplication(),
      transitionCallback(),
      frontendHeap(heap),
      model(m)
 801a3b8:	68fb      	ldr	r3, [r7, #12]
 801a3ba:	4618      	mov	r0, r3
 801a3bc:	f7ff fef4 	bl	801a1a8 <_ZN8touchgfx14MVPApplicationC1Ev>
 801a3c0:	4a0c      	ldr	r2, [pc, #48]	; (801a3f4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x48>)
 801a3c2:	68fb      	ldr	r3, [r7, #12]
 801a3c4:	601a      	str	r2, [r3, #0]
 801a3c6:	68fb      	ldr	r3, [r7, #12]
 801a3c8:	f503 739c 	add.w	r3, r3, #312	; 0x138
 801a3cc:	4618      	mov	r0, r3
 801a3ce:	f000 f91d 	bl	801a60c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>
 801a3d2:	68fb      	ldr	r3, [r7, #12]
 801a3d4:	687a      	ldr	r2, [r7, #4]
 801a3d6:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
 801a3da:	68fb      	ldr	r3, [r7, #12]
 801a3dc:	68ba      	ldr	r2, [r7, #8]
 801a3de:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
{
    Texts::setLanguage(GB);
 801a3e2:	2000      	movs	r0, #0
 801a3e4:	f002 fac2 	bl	801c96c <_ZN8touchgfx5Texts11setLanguageEt>
}
 801a3e8:	68fb      	ldr	r3, [r7, #12]
 801a3ea:	4618      	mov	r0, r3
 801a3ec:	3710      	adds	r7, #16
 801a3ee:	46bd      	mov	sp, r7
 801a3f0:	bd80      	pop	{r7, pc}
 801a3f2:	bf00      	nop
 801a3f4:	0802483c 	.word	0x0802483c

0801a3f8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>:
class GenericCallback<void>
 801a3f8:	b480      	push	{r7}
 801a3fa:	b083      	sub	sp, #12
 801a3fc:	af00      	add	r7, sp, #0
 801a3fe:	6078      	str	r0, [r7, #4]
 801a400:	6039      	str	r1, [r7, #0]
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	4618      	mov	r0, r3
 801a406:	370c      	adds	r7, #12
 801a408:	46bd      	mov	sp, r7
 801a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a40e:	4770      	bx	lr

0801a410 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 801a410:	b580      	push	{r7, lr}
 801a412:	b082      	sub	sp, #8
 801a414:	af00      	add	r7, sp, #0
 801a416:	6078      	str	r0, [r7, #4]
 801a418:	6039      	str	r1, [r7, #0]
 801a41a:	687b      	ldr	r3, [r7, #4]
 801a41c:	683a      	ldr	r2, [r7, #0]
 801a41e:	4611      	mov	r1, r2
 801a420:	4618      	mov	r0, r3
 801a422:	f7ff ffe9 	bl	801a3f8 <_ZN8touchgfx15GenericCallbackIvvvEaSERKS1_>
 801a426:	683b      	ldr	r3, [r7, #0]
 801a428:	685a      	ldr	r2, [r3, #4]
 801a42a:	687b      	ldr	r3, [r7, #4]
 801a42c:	605a      	str	r2, [r3, #4]
 801a42e:	687b      	ldr	r3, [r7, #4]
 801a430:	683a      	ldr	r2, [r7, #0]
 801a432:	3308      	adds	r3, #8
 801a434:	3208      	adds	r2, #8
 801a436:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a43a:	e883 0003 	stmia.w	r3, {r0, r1}
 801a43e:	687b      	ldr	r3, [r7, #4]
 801a440:	4618      	mov	r0, r3
 801a442:	3708      	adds	r7, #8
 801a444:	46bd      	mov	sp, r7
 801a446:	bd80      	pop	{r7, pc}

0801a448 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv>:
 * Screen Transition Declarations
 */
// Screen1

void FrontendApplicationBase::gotoScreen1ScreenNoTransition()
{
 801a448:	b590      	push	{r4, r7, lr}
 801a44a:	b089      	sub	sp, #36	; 0x24
 801a44c:	af00      	add	r7, sp, #0
 801a44e:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenNoTransitionImpl);
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	f503 749c 	add.w	r4, r3, #312	; 0x138
 801a456:	4b10      	ldr	r3, [pc, #64]	; (801a498 <_ZN23FrontendApplicationBase29gotoScreen1ScreenNoTransitionEv+0x50>)
 801a458:	61bb      	str	r3, [r7, #24]
 801a45a:	2300      	movs	r3, #0
 801a45c:	61fb      	str	r3, [r7, #28]
 801a45e:	f107 0008 	add.w	r0, r7, #8
 801a462:	f107 0318 	add.w	r3, r7, #24
 801a466:	cb0c      	ldmia	r3, {r2, r3}
 801a468:	6879      	ldr	r1, [r7, #4]
 801a46a:	f000 f8eb 	bl	801a644 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 801a46e:	f107 0308 	add.w	r3, r7, #8
 801a472:	4619      	mov	r1, r3
 801a474:	4620      	mov	r0, r4
 801a476:	f7ff ffcb 	bl	801a410 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 801a47a:	f107 0308 	add.w	r3, r7, #8
 801a47e:	4618      	mov	r0, r3
 801a480:	f7fb f842 	bl	8015508 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 801a484:	687b      	ldr	r3, [r7, #4]
 801a486:	f503 729c 	add.w	r2, r3, #312	; 0x138
 801a48a:	687b      	ldr	r3, [r7, #4]
 801a48c:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 801a490:	bf00      	nop
 801a492:	3724      	adds	r7, #36	; 0x24
 801a494:	46bd      	mov	sp, r7
 801a496:	bd90      	pop	{r4, r7, pc}
 801a498:	0801a49d 	.word	0x0801a49d

0801a49c <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenNoTransitionImpl()
{
 801a49c:	b580      	push	{r7, lr}
 801a49e:	b084      	sub	sp, #16
 801a4a0:	af02      	add	r7, sp, #8
 801a4a2:	6078      	str	r0, [r7, #4]
    makeTransition<Screen1View, Screen1Presenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801a4a4:	687b      	ldr	r3, [r7, #4]
 801a4a6:	f503 7198 	add.w	r1, r3, #304	; 0x130
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 801a4b0:	461a      	mov	r2, r3
 801a4b2:	687b      	ldr	r3, [r7, #4]
 801a4b4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801a4b8:	9300      	str	r3, [sp, #0]
 801a4ba:	4b04      	ldr	r3, [pc, #16]	; (801a4cc <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x30>)
 801a4bc:	4804      	ldr	r0, [pc, #16]	; (801a4d0 <_ZN23FrontendApplicationBase33gotoScreen1ScreenNoTransitionImplEv+0x34>)
 801a4be:	f000 f8e1 	bl	801a684 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801a4c2:	bf00      	nop
 801a4c4:	3708      	adds	r7, #8
 801a4c6:	46bd      	mov	sp, r7
 801a4c8:	bd80      	pop	{r7, pc}
 801a4ca:	bf00      	nop
 801a4cc:	20009d8c 	.word	0x20009d8c
 801a4d0:	20009d88 	.word	0x20009d88

0801a4d4 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv>:


void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWest()
{
 801a4d4:	b590      	push	{r4, r7, lr}
 801a4d6:	b089      	sub	sp, #36	; 0x24
 801a4d8:	af00      	add	r7, sp, #0
 801a4da:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen1ScreenSlideTransitionWestImpl);
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	f503 749c 	add.w	r4, r3, #312	; 0x138
 801a4e2:	4b10      	ldr	r3, [pc, #64]	; (801a524 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv+0x50>)
 801a4e4:	61bb      	str	r3, [r7, #24]
 801a4e6:	2300      	movs	r3, #0
 801a4e8:	61fb      	str	r3, [r7, #28]
 801a4ea:	f107 0008 	add.w	r0, r7, #8
 801a4ee:	f107 0318 	add.w	r3, r7, #24
 801a4f2:	cb0c      	ldmia	r3, {r2, r3}
 801a4f4:	6879      	ldr	r1, [r7, #4]
 801a4f6:	f000 f8a5 	bl	801a644 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 801a4fa:	f107 0308 	add.w	r3, r7, #8
 801a4fe:	4619      	mov	r1, r3
 801a500:	4620      	mov	r0, r4
 801a502:	f7ff ff85 	bl	801a410 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 801a506:	f107 0308 	add.w	r3, r7, #8
 801a50a:	4618      	mov	r0, r3
 801a50c:	f7fa fffc 	bl	8015508 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 801a510:	687b      	ldr	r3, [r7, #4]
 801a512:	f503 729c 	add.w	r2, r3, #312	; 0x138
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 801a51c:	bf00      	nop
 801a51e:	3724      	adds	r7, #36	; 0x24
 801a520:	46bd      	mov	sp, r7
 801a522:	bd90      	pop	{r4, r7, pc}
 801a524:	0801a529 	.word	0x0801a529

0801a528 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv>:

void FrontendApplicationBase::gotoScreen1ScreenSlideTransitionWestImpl()
{
 801a528:	b580      	push	{r7, lr}
 801a52a:	b084      	sub	sp, #16
 801a52c:	af02      	add	r7, sp, #8
 801a52e:	6078      	str	r0, [r7, #4]
    makeTransition<Screen1View, Screen1Presenter, touchgfx::SlideTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	f503 7198 	add.w	r1, r3, #304	; 0x130
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 801a53c:	461a      	mov	r2, r3
 801a53e:	687b      	ldr	r3, [r7, #4]
 801a540:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801a544:	9300      	str	r3, [sp, #0]
 801a546:	4b04      	ldr	r3, [pc, #16]	; (801a558 <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x30>)
 801a548:	4804      	ldr	r0, [pc, #16]	; (801a55c <_ZN23FrontendApplicationBase40gotoScreen1ScreenSlideTransitionWestImplEv+0x34>)
 801a54a:	f000 f955 	bl	801a7f8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801a54e:	bf00      	nop
 801a550:	3708      	adds	r7, #8
 801a552:	46bd      	mov	sp, r7
 801a554:	bd80      	pop	{r7, pc}
 801a556:	bf00      	nop
 801a558:	20009d8c 	.word	0x20009d8c
 801a55c:	20009d88 	.word	0x20009d88

0801a560 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionWestEv>:

// Screen2

void FrontendApplicationBase::gotoScreen2ScreenSlideTransitionWest()
{
 801a560:	b590      	push	{r4, r7, lr}
 801a562:	b089      	sub	sp, #36	; 0x24
 801a564:	af00      	add	r7, sp, #0
 801a566:	6078      	str	r0, [r7, #4]
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplication::gotoScreen2ScreenSlideTransitionWestImpl);
 801a568:	687b      	ldr	r3, [r7, #4]
 801a56a:	f503 749c 	add.w	r4, r3, #312	; 0x138
 801a56e:	4b10      	ldr	r3, [pc, #64]	; (801a5b0 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionWestEv+0x50>)
 801a570:	61bb      	str	r3, [r7, #24]
 801a572:	2300      	movs	r3, #0
 801a574:	61fb      	str	r3, [r7, #28]
 801a576:	f107 0008 	add.w	r0, r7, #8
 801a57a:	f107 0318 	add.w	r3, r7, #24
 801a57e:	cb0c      	ldmia	r3, {r2, r3}
 801a580:	6879      	ldr	r1, [r7, #4]
 801a582:	f000 f85f 	bl	801a644 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>
 801a586:	f107 0308 	add.w	r3, r7, #8
 801a58a:	4619      	mov	r1, r3
 801a58c:	4620      	mov	r0, r4
 801a58e:	f7ff ff3f 	bl	801a410 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEaSEOS2_>
 801a592:	f107 0308 	add.w	r3, r7, #8
 801a596:	4618      	mov	r0, r3
 801a598:	f7fa ffb6 	bl	8015508 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>
    pendingScreenTransitionCallback = &transitionCallback;
 801a59c:	687b      	ldr	r3, [r7, #4]
 801a59e:	f503 729c 	add.w	r2, r3, #312	; 0x138
 801a5a2:	687b      	ldr	r3, [r7, #4]
 801a5a4:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
}
 801a5a8:	bf00      	nop
 801a5aa:	3724      	adds	r7, #36	; 0x24
 801a5ac:	46bd      	mov	sp, r7
 801a5ae:	bd90      	pop	{r4, r7, pc}
 801a5b0:	0801a5b5 	.word	0x0801a5b5

0801a5b4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionWestImplEv>:

void FrontendApplicationBase::gotoScreen2ScreenSlideTransitionWestImpl()
{
 801a5b4:	b580      	push	{r7, lr}
 801a5b6:	b084      	sub	sp, #16
 801a5b8:	af02      	add	r7, sp, #8
 801a5ba:	6078      	str	r0, [r7, #4]
    makeTransition<Screen2View, Screen2Presenter, touchgfx::SlideTransition<WEST>, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 801a5bc:	687b      	ldr	r3, [r7, #4]
 801a5be:	f503 7198 	add.w	r1, r3, #304	; 0x130
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 801a5c8:	461a      	mov	r2, r3
 801a5ca:	687b      	ldr	r3, [r7, #4]
 801a5cc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801a5d0:	9300      	str	r3, [sp, #0]
 801a5d2:	4b04      	ldr	r3, [pc, #16]	; (801a5e4 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionWestImplEv+0x30>)
 801a5d4:	4804      	ldr	r0, [pc, #16]	; (801a5e8 <_ZN23FrontendApplicationBase40gotoScreen2ScreenSlideTransitionWestImplEv+0x34>)
 801a5d6:	f000 f9cb 	bl	801a970 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>
}
 801a5da:	bf00      	nop
 801a5dc:	3708      	adds	r7, #8
 801a5de:	46bd      	mov	sp, r7
 801a5e0:	bd80      	pop	{r7, pc}
 801a5e2:	bf00      	nop
 801a5e4:	20009d8c 	.word	0x20009d8c
 801a5e8:	20009d88 	.word	0x20009d88

0801a5ec <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>:
class GenericCallback<void>
 801a5ec:	b480      	push	{r7}
 801a5ee:	b083      	sub	sp, #12
 801a5f0:	af00      	add	r7, sp, #0
 801a5f2:	6078      	str	r0, [r7, #4]
 801a5f4:	4a04      	ldr	r2, [pc, #16]	; (801a608 <_ZN8touchgfx15GenericCallbackIvvvEC1Ev+0x1c>)
 801a5f6:	687b      	ldr	r3, [r7, #4]
 801a5f8:	601a      	str	r2, [r3, #0]
 801a5fa:	687b      	ldr	r3, [r7, #4]
 801a5fc:	4618      	mov	r0, r3
 801a5fe:	370c      	adds	r7, #12
 801a600:	46bd      	mov	sp, r7
 801a602:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a606:	4770      	bx	lr
 801a608:	080248cc 	.word	0x080248cc

0801a60c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev>:
    Callback() : pobject(0), pmemfun_0(0) { }
 801a60c:	b580      	push	{r7, lr}
 801a60e:	b082      	sub	sp, #8
 801a610:	af00      	add	r7, sp, #0
 801a612:	6078      	str	r0, [r7, #4]
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	4618      	mov	r0, r3
 801a618:	f7ff ffe8 	bl	801a5ec <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801a61c:	4a08      	ldr	r2, [pc, #32]	; (801a640 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1Ev+0x34>)
 801a61e:	687b      	ldr	r3, [r7, #4]
 801a620:	601a      	str	r2, [r3, #0]
 801a622:	687b      	ldr	r3, [r7, #4]
 801a624:	2200      	movs	r2, #0
 801a626:	605a      	str	r2, [r3, #4]
 801a628:	687b      	ldr	r3, [r7, #4]
 801a62a:	2200      	movs	r2, #0
 801a62c:	609a      	str	r2, [r3, #8]
 801a62e:	687b      	ldr	r3, [r7, #4]
 801a630:	2200      	movs	r2, #0
 801a632:	60da      	str	r2, [r3, #12]
 801a634:	687b      	ldr	r3, [r7, #4]
 801a636:	4618      	mov	r0, r3
 801a638:	3708      	adds	r7, #8
 801a63a:	46bd      	mov	sp, r7
 801a63c:	bd80      	pop	{r7, pc}
 801a63e:	bf00      	nop
 801a640:	08024878 	.word	0x08024878

0801a644 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_0)())
 801a644:	b580      	push	{r7, lr}
 801a646:	b084      	sub	sp, #16
 801a648:	af00      	add	r7, sp, #0
 801a64a:	60f8      	str	r0, [r7, #12]
 801a64c:	60b9      	str	r1, [r7, #8]
 801a64e:	4639      	mov	r1, r7
 801a650:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 801a654:	68fb      	ldr	r3, [r7, #12]
 801a656:	4618      	mov	r0, r3
 801a658:	f7ff ffc8 	bl	801a5ec <_ZN8touchgfx15GenericCallbackIvvvEC1Ev>
 801a65c:	4a08      	ldr	r2, [pc, #32]	; (801a680 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvEC1EPS1_MS1_FvvE+0x3c>)
 801a65e:	68fb      	ldr	r3, [r7, #12]
 801a660:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801a662:	68fb      	ldr	r3, [r7, #12]
 801a664:	68ba      	ldr	r2, [r7, #8]
 801a666:	605a      	str	r2, [r3, #4]
        this->pmemfun_0 = pmemfun_0;
 801a668:	68fb      	ldr	r3, [r7, #12]
 801a66a:	3308      	adds	r3, #8
 801a66c:	463a      	mov	r2, r7
 801a66e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801a672:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801a676:	68fb      	ldr	r3, [r7, #12]
 801a678:	4618      	mov	r0, r3
 801a67a:	3710      	adds	r7, #16
 801a67c:	46bd      	mov	sp, r7
 801a67e:	bd80      	pop	{r7, pc}
 801a680:	08024878 	.word	0x08024878

0801a684 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
 *
 * @return Pointer to the new Presenter of the requested type. Incidentally it will be the same
 *         value as the old presenter due to memory reuse.
 */
template< class ScreenType, class PresenterType, class TransType, class ModelType  >
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 801a684:	b590      	push	{r4, r7, lr}
 801a686:	b089      	sub	sp, #36	; 0x24
 801a688:	af00      	add	r7, sp, #0
 801a68a:	60f8      	str	r0, [r7, #12]
 801a68c:	60b9      	str	r1, [r7, #8]
 801a68e:	607a      	str	r2, [r7, #4]
 801a690:	603b      	str	r3, [r7, #0]
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801a692:	687b      	ldr	r3, [r7, #4]
 801a694:	689a      	ldr	r2, [r3, #8]
 801a696:	687b      	ldr	r3, [r7, #4]
 801a698:	689b      	ldr	r3, [r3, #8]
 801a69a:	681b      	ldr	r3, [r3, #0]
 801a69c:	3320      	adds	r3, #32
 801a69e:	681b      	ldr	r3, [r3, #0]
 801a6a0:	4610      	mov	r0, r2
 801a6a2:	4798      	blx	r3
 801a6a4:	4603      	mov	r3, r0
 801a6a6:	f5b3 7f09 	cmp.w	r3, #548	; 0x224
 801a6aa:	d205      	bcs.n	801a6b8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 801a6ac:	4b4d      	ldr	r3, [pc, #308]	; (801a7e4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x160>)
 801a6ae:	4a4e      	ldr	r2, [pc, #312]	; (801a7e8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 801a6b0:	21c2      	movs	r1, #194	; 0xc2
 801a6b2:	484e      	ldr	r0, [pc, #312]	; (801a7ec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801a6b4:	f007 fed2 	bl	802245c <__assert_func>
 801a6b8:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801a6ba:	687b      	ldr	r3, [r7, #4]
 801a6bc:	685a      	ldr	r2, [r3, #4]
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	685b      	ldr	r3, [r3, #4]
 801a6c2:	681b      	ldr	r3, [r3, #0]
 801a6c4:	3320      	adds	r3, #32
 801a6c6:	681b      	ldr	r3, [r3, #0]
 801a6c8:	4610      	mov	r0, r2
 801a6ca:	4798      	blx	r3
 801a6cc:	4603      	mov	r3, r0
 801a6ce:	2b0f      	cmp	r3, #15
 801a6d0:	d805      	bhi.n	801a6de <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 801a6d2:	4b47      	ldr	r3, [pc, #284]	; (801a7f0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801a6d4:	4a44      	ldr	r2, [pc, #272]	; (801a7e8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 801a6d6:	21c3      	movs	r1, #195	; 0xc3
 801a6d8:	4844      	ldr	r0, [pc, #272]	; (801a7ec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801a6da:	f007 febf 	bl	802245c <__assert_func>
 801a6de:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	68da      	ldr	r2, [r3, #12]
 801a6e4:	687b      	ldr	r3, [r7, #4]
 801a6e6:	68db      	ldr	r3, [r3, #12]
 801a6e8:	681b      	ldr	r3, [r3, #0]
 801a6ea:	3320      	adds	r3, #32
 801a6ec:	681b      	ldr	r3, [r3, #0]
 801a6ee:	4610      	mov	r0, r2
 801a6f0:	4798      	blx	r3
 801a6f2:	4603      	mov	r3, r0
 801a6f4:	2b0b      	cmp	r3, #11
 801a6f6:	d805      	bhi.n	801a704 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 801a6f8:	4b3e      	ldr	r3, [pc, #248]	; (801a7f4 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 801a6fa:	4a3b      	ldr	r2, [pc, #236]	; (801a7e8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 801a6fc:	21c4      	movs	r1, #196	; 0xc4
 801a6fe:	483b      	ldr	r0, [pc, #236]	; (801a7ec <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801a700:	f007 feac 	bl	802245c <__assert_func>
 801a704:	bf00      	nop

    prepareTransition(currentScreen, currentPresenter, currentTrans);
 801a706:	683a      	ldr	r2, [r7, #0]
 801a708:	68b9      	ldr	r1, [r7, #8]
 801a70a:	68f8      	ldr	r0, [r7, #12]
 801a70c:	f7ff fd6c 	bl	801a1e8 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>

    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 801a710:	687b      	ldr	r3, [r7, #4]
 801a712:	68db      	ldr	r3, [r3, #12]
 801a714:	2100      	movs	r1, #0
 801a716:	4618      	mov	r0, r3
 801a718:	f000 f9e6 	bl	801aae8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>
 801a71c:	4603      	mov	r3, r0
 801a71e:	4619      	mov	r1, r3
 801a720:	200c      	movs	r0, #12
 801a722:	f7ff fcd3 	bl	801a0cc <_ZnwjPv>
 801a726:	4604      	mov	r4, r0
 801a728:	2c00      	cmp	r4, #0
 801a72a:	d004      	beq.n	801a736 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb2>
 801a72c:	4620      	mov	r0, r4
 801a72e:	f7ff fded 	bl	801a30c <_ZN8touchgfx12NoTransitionC1Ev>
 801a732:	4623      	mov	r3, r4
 801a734:	e000      	b.n	801a738 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 801a736:	4623      	mov	r3, r4
 801a738:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801a73a:	687b      	ldr	r3, [r7, #4]
 801a73c:	689b      	ldr	r3, [r3, #8]
 801a73e:	2100      	movs	r1, #0
 801a740:	4618      	mov	r0, r3
 801a742:	f000 f9e4 	bl	801ab0e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 801a746:	4603      	mov	r3, r0
 801a748:	4619      	mov	r1, r3
 801a74a:	f44f 7009 	mov.w	r0, #548	; 0x224
 801a74e:	f7ff fcbd 	bl	801a0cc <_ZnwjPv>
 801a752:	4604      	mov	r4, r0
 801a754:	2c00      	cmp	r4, #0
 801a756:	d004      	beq.n	801a762 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xde>
 801a758:	4620      	mov	r0, r4
 801a75a:	f002 fadb 	bl	801cd14 <_ZN11Screen1ViewC1Ev>
 801a75e:	4623      	mov	r3, r4
 801a760:	e000      	b.n	801a764 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 801a762:	4623      	mov	r3, r4
 801a764:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 801a766:	687b      	ldr	r3, [r7, #4]
 801a768:	685b      	ldr	r3, [r3, #4]
 801a76a:	2100      	movs	r1, #0
 801a76c:	4618      	mov	r0, r3
 801a76e:	f000 f9e1 	bl	801ab34 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 801a772:	4603      	mov	r3, r0
 801a774:	4619      	mov	r1, r3
 801a776:	2010      	movs	r0, #16
 801a778:	f7ff fca8 	bl	801a0cc <_ZnwjPv>
 801a77c:	4604      	mov	r4, r0
 801a77e:	2c00      	cmp	r4, #0
 801a780:	d005      	beq.n	801a78e <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10a>
 801a782:	69b9      	ldr	r1, [r7, #24]
 801a784:	4620      	mov	r0, r4
 801a786:	f002 fa5d 	bl	801cc44 <_ZN16Screen1PresenterC1ER11Screen1View>
 801a78a:	4623      	mov	r3, r4
 801a78c:	e000      	b.n	801a790 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 801a78e:	4623      	mov	r3, r4
 801a790:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 801a792:	683b      	ldr	r3, [r7, #0]
 801a794:	69fa      	ldr	r2, [r7, #28]
 801a796:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 801a798:	68bb      	ldr	r3, [r7, #8]
 801a79a:	697a      	ldr	r2, [r7, #20]
 801a79c:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801a79e:	68fb      	ldr	r3, [r7, #12]
 801a7a0:	69ba      	ldr	r2, [r7, #24]
 801a7a2:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 801a7a4:	697b      	ldr	r3, [r7, #20]
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d002      	beq.n	801a7b0 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12c>
 801a7aa:	697b      	ldr	r3, [r7, #20]
 801a7ac:	3304      	adds	r3, #4
 801a7ae:	e000      	b.n	801a7b2 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_12NoTransitionE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 801a7b0:	2300      	movs	r3, #0
 801a7b2:	4619      	mov	r1, r3
 801a7b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a7b6:	f7ff fd9a 	bl	801a2ee <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 801a7ba:	697b      	ldr	r3, [r7, #20]
 801a7bc:	3304      	adds	r3, #4
 801a7be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a7c0:	4618      	mov	r0, r3
 801a7c2:	f7ff fde4 	bl	801a38e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 801a7c6:	69bb      	ldr	r3, [r7, #24]
 801a7c8:	6979      	ldr	r1, [r7, #20]
 801a7ca:	4618      	mov	r0, r3
 801a7cc:	f000 f9c5 	bl	801ab5a <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>

    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 801a7d0:	69fa      	ldr	r2, [r7, #28]
 801a7d2:	6979      	ldr	r1, [r7, #20]
 801a7d4:	69b8      	ldr	r0, [r7, #24]
 801a7d6:	f7ff fd63 	bl	801a2a0 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>

    return newPresenter;
 801a7da:	697b      	ldr	r3, [r7, #20]
}
 801a7dc:	4618      	mov	r0, r3
 801a7de:	3724      	adds	r7, #36	; 0x24
 801a7e0:	46bd      	mov	sp, r7
 801a7e2:	bd90      	pop	{r4, r7, pc}
 801a7e4:	08023a44 	.word	0x08023a44
 801a7e8:	08024c40 	.word	0x08024c40
 801a7ec:	08023ad4 	.word	0x08023ad4
 801a7f0:	08023b44 	.word	0x08023b44
 801a7f4:	08023be8 	.word	0x08023be8

0801a7f8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 801a7f8:	b590      	push	{r4, r7, lr}
 801a7fa:	b089      	sub	sp, #36	; 0x24
 801a7fc:	af00      	add	r7, sp, #0
 801a7fe:	60f8      	str	r0, [r7, #12]
 801a800:	60b9      	str	r1, [r7, #8]
 801a802:	607a      	str	r2, [r7, #4]
 801a804:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	689a      	ldr	r2, [r3, #8]
 801a80a:	687b      	ldr	r3, [r7, #4]
 801a80c:	689b      	ldr	r3, [r3, #8]
 801a80e:	681b      	ldr	r3, [r3, #0]
 801a810:	3320      	adds	r3, #32
 801a812:	681b      	ldr	r3, [r3, #0]
 801a814:	4610      	mov	r0, r2
 801a816:	4798      	blx	r3
 801a818:	4603      	mov	r3, r0
 801a81a:	f5b3 7f09 	cmp.w	r3, #548	; 0x224
 801a81e:	d205      	bcs.n	801a82c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 801a820:	4b4e      	ldr	r3, [pc, #312]	; (801a95c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 801a822:	4a4f      	ldr	r2, [pc, #316]	; (801a960 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801a824:	21c2      	movs	r1, #194	; 0xc2
 801a826:	484f      	ldr	r0, [pc, #316]	; (801a964 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801a828:	f007 fe18 	bl	802245c <__assert_func>
 801a82c:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801a82e:	687b      	ldr	r3, [r7, #4]
 801a830:	685a      	ldr	r2, [r3, #4]
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	685b      	ldr	r3, [r3, #4]
 801a836:	681b      	ldr	r3, [r3, #0]
 801a838:	3320      	adds	r3, #32
 801a83a:	681b      	ldr	r3, [r3, #0]
 801a83c:	4610      	mov	r0, r2
 801a83e:	4798      	blx	r3
 801a840:	4603      	mov	r3, r0
 801a842:	2b0f      	cmp	r3, #15
 801a844:	d805      	bhi.n	801a852 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 801a846:	4b48      	ldr	r3, [pc, #288]	; (801a968 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 801a848:	4a45      	ldr	r2, [pc, #276]	; (801a960 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801a84a:	21c3      	movs	r1, #195	; 0xc3
 801a84c:	4845      	ldr	r0, [pc, #276]	; (801a964 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801a84e:	f007 fe05 	bl	802245c <__assert_func>
 801a852:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801a854:	687b      	ldr	r3, [r7, #4]
 801a856:	68da      	ldr	r2, [r3, #12]
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	68db      	ldr	r3, [r3, #12]
 801a85c:	681b      	ldr	r3, [r3, #0]
 801a85e:	3320      	adds	r3, #32
 801a860:	681b      	ldr	r3, [r3, #0]
 801a862:	4610      	mov	r0, r2
 801a864:	4798      	blx	r3
 801a866:	4603      	mov	r3, r0
 801a868:	2b57      	cmp	r3, #87	; 0x57
 801a86a:	d805      	bhi.n	801a878 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 801a86c:	4b3f      	ldr	r3, [pc, #252]	; (801a96c <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 801a86e:	4a3c      	ldr	r2, [pc, #240]	; (801a960 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801a870:	21c4      	movs	r1, #196	; 0xc4
 801a872:	483c      	ldr	r0, [pc, #240]	; (801a964 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801a874:	f007 fdf2 	bl	802245c <__assert_func>
 801a878:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 801a87a:	683a      	ldr	r2, [r7, #0]
 801a87c:	68b9      	ldr	r1, [r7, #8]
 801a87e:	68f8      	ldr	r0, [r7, #12]
 801a880:	f7ff fcb2 	bl	801a1e8 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 801a884:	687b      	ldr	r3, [r7, #4]
 801a886:	68db      	ldr	r3, [r3, #12]
 801a888:	2100      	movs	r1, #0
 801a88a:	4618      	mov	r0, r3
 801a88c:	f000 f973 	bl	801ab76 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>
 801a890:	4603      	mov	r3, r0
 801a892:	4619      	mov	r1, r3
 801a894:	2058      	movs	r0, #88	; 0x58
 801a896:	f7ff fc19 	bl	801a0cc <_ZnwjPv>
 801a89a:	4604      	mov	r4, r0
 801a89c:	2c00      	cmp	r4, #0
 801a89e:	d005      	beq.n	801a8ac <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 801a8a0:	2114      	movs	r1, #20
 801a8a2:	4620      	mov	r0, r4
 801a8a4:	f000 f99c 	bl	801abe0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>
 801a8a8:	4623      	mov	r3, r4
 801a8aa:	e000      	b.n	801a8ae <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 801a8ac:	4623      	mov	r3, r4
 801a8ae:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801a8b0:	687b      	ldr	r3, [r7, #4]
 801a8b2:	689b      	ldr	r3, [r3, #8]
 801a8b4:	2100      	movs	r1, #0
 801a8b6:	4618      	mov	r0, r3
 801a8b8:	f000 f929 	bl	801ab0e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>
 801a8bc:	4603      	mov	r3, r0
 801a8be:	4619      	mov	r1, r3
 801a8c0:	f44f 7009 	mov.w	r0, #548	; 0x224
 801a8c4:	f7ff fc02 	bl	801a0cc <_ZnwjPv>
 801a8c8:	4604      	mov	r4, r0
 801a8ca:	2c00      	cmp	r4, #0
 801a8cc:	d004      	beq.n	801a8d8 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 801a8ce:	4620      	mov	r0, r4
 801a8d0:	f002 fa20 	bl	801cd14 <_ZN11Screen1ViewC1Ev>
 801a8d4:	4623      	mov	r3, r4
 801a8d6:	e000      	b.n	801a8da <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 801a8d8:	4623      	mov	r3, r4
 801a8da:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 801a8dc:	687b      	ldr	r3, [r7, #4]
 801a8de:	685b      	ldr	r3, [r3, #4]
 801a8e0:	2100      	movs	r1, #0
 801a8e2:	4618      	mov	r0, r3
 801a8e4:	f000 f926 	bl	801ab34 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>
 801a8e8:	4603      	mov	r3, r0
 801a8ea:	4619      	mov	r1, r3
 801a8ec:	2010      	movs	r0, #16
 801a8ee:	f7ff fbed 	bl	801a0cc <_ZnwjPv>
 801a8f2:	4604      	mov	r4, r0
 801a8f4:	2c00      	cmp	r4, #0
 801a8f6:	d005      	beq.n	801a904 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 801a8f8:	69b9      	ldr	r1, [r7, #24]
 801a8fa:	4620      	mov	r0, r4
 801a8fc:	f002 f9a2 	bl	801cc44 <_ZN16Screen1PresenterC1ER11Screen1View>
 801a900:	4623      	mov	r3, r4
 801a902:	e000      	b.n	801a906 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 801a904:	4623      	mov	r3, r4
 801a906:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 801a908:	683b      	ldr	r3, [r7, #0]
 801a90a:	69fa      	ldr	r2, [r7, #28]
 801a90c:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 801a90e:	68bb      	ldr	r3, [r7, #8]
 801a910:	697a      	ldr	r2, [r7, #20]
 801a912:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801a914:	68fb      	ldr	r3, [r7, #12]
 801a916:	69ba      	ldr	r2, [r7, #24]
 801a918:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 801a91a:	697b      	ldr	r3, [r7, #20]
 801a91c:	2b00      	cmp	r3, #0
 801a91e:	d002      	beq.n	801a926 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 801a920:	697b      	ldr	r3, [r7, #20]
 801a922:	3304      	adds	r3, #4
 801a924:	e000      	b.n	801a928 <_ZN8touchgfx14makeTransitionI11Screen1View16Screen1PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 801a926:	2300      	movs	r3, #0
 801a928:	4619      	mov	r1, r3
 801a92a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a92c:	f7ff fcdf 	bl	801a2ee <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 801a930:	697b      	ldr	r3, [r7, #20]
 801a932:	3304      	adds	r3, #4
 801a934:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a936:	4618      	mov	r0, r3
 801a938:	f7ff fd29 	bl	801a38e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 801a93c:	69bb      	ldr	r3, [r7, #24]
 801a93e:	6979      	ldr	r1, [r7, #20]
 801a940:	4618      	mov	r0, r3
 801a942:	f000 f90a 	bl	801ab5a <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 801a946:	69fa      	ldr	r2, [r7, #28]
 801a948:	6979      	ldr	r1, [r7, #20]
 801a94a:	69b8      	ldr	r0, [r7, #24]
 801a94c:	f7ff fca8 	bl	801a2a0 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 801a950:	697b      	ldr	r3, [r7, #20]
}
 801a952:	4618      	mov	r0, r3
 801a954:	3724      	adds	r7, #36	; 0x24
 801a956:	46bd      	mov	sp, r7
 801a958:	bd90      	pop	{r4, r7, pc}
 801a95a:	bf00      	nop
 801a95c:	08023a44 	.word	0x08023a44
 801a960:	08024d44 	.word	0x08024d44
 801a964:	08023ad4 	.word	0x08023ad4
 801a968:	08023b44 	.word	0x08023b44
 801a96c:	08023be8 	.word	0x08023be8

0801a970 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_>:
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
 801a970:	b590      	push	{r4, r7, lr}
 801a972:	b089      	sub	sp, #36	; 0x24
 801a974:	af00      	add	r7, sp, #0
 801a976:	60f8      	str	r0, [r7, #12]
 801a978:	60b9      	str	r1, [r7, #8]
 801a97a:	607a      	str	r2, [r7, #4]
 801a97c:	603b      	str	r3, [r7, #0]
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	689a      	ldr	r2, [r3, #8]
 801a982:	687b      	ldr	r3, [r7, #4]
 801a984:	689b      	ldr	r3, [r3, #8]
 801a986:	681b      	ldr	r3, [r3, #0]
 801a988:	3320      	adds	r3, #32
 801a98a:	681b      	ldr	r3, [r3, #0]
 801a98c:	4610      	mov	r0, r2
 801a98e:	4798      	blx	r3
 801a990:	4603      	mov	r3, r0
 801a992:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 801a996:	d205      	bcs.n	801a9a4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x34>
 801a998:	4b4e      	ldr	r3, [pc, #312]	; (801aad4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x164>)
 801a99a:	4a4f      	ldr	r2, [pc, #316]	; (801aad8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801a99c:	21c2      	movs	r1, #194	; 0xc2
 801a99e:	484f      	ldr	r0, [pc, #316]	; (801aadc <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801a9a0:	f007 fd5c 	bl	802245c <__assert_func>
 801a9a4:	bf00      	nop
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 801a9a6:	687b      	ldr	r3, [r7, #4]
 801a9a8:	685a      	ldr	r2, [r3, #4]
 801a9aa:	687b      	ldr	r3, [r7, #4]
 801a9ac:	685b      	ldr	r3, [r3, #4]
 801a9ae:	681b      	ldr	r3, [r3, #0]
 801a9b0:	3320      	adds	r3, #32
 801a9b2:	681b      	ldr	r3, [r3, #0]
 801a9b4:	4610      	mov	r0, r2
 801a9b6:	4798      	blx	r3
 801a9b8:	4603      	mov	r3, r0
 801a9ba:	2b0f      	cmp	r3, #15
 801a9bc:	d805      	bhi.n	801a9ca <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x5a>
 801a9be:	4b48      	ldr	r3, [pc, #288]	; (801aae0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x170>)
 801a9c0:	4a45      	ldr	r2, [pc, #276]	; (801aad8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801a9c2:	21c3      	movs	r1, #195	; 0xc3
 801a9c4:	4845      	ldr	r0, [pc, #276]	; (801aadc <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801a9c6:	f007 fd49 	bl	802245c <__assert_func>
 801a9ca:	bf00      	nop
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 801a9cc:	687b      	ldr	r3, [r7, #4]
 801a9ce:	68da      	ldr	r2, [r3, #12]
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	68db      	ldr	r3, [r3, #12]
 801a9d4:	681b      	ldr	r3, [r3, #0]
 801a9d6:	3320      	adds	r3, #32
 801a9d8:	681b      	ldr	r3, [r3, #0]
 801a9da:	4610      	mov	r0, r2
 801a9dc:	4798      	blx	r3
 801a9de:	4603      	mov	r3, r0
 801a9e0:	2b57      	cmp	r3, #87	; 0x57
 801a9e2:	d805      	bhi.n	801a9f0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x80>
 801a9e4:	4b3f      	ldr	r3, [pc, #252]	; (801aae4 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x174>)
 801a9e6:	4a3c      	ldr	r2, [pc, #240]	; (801aad8 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x168>)
 801a9e8:	21c4      	movs	r1, #196	; 0xc4
 801a9ea:	483c      	ldr	r0, [pc, #240]	; (801aadc <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x16c>)
 801a9ec:	f007 fd36 	bl	802245c <__assert_func>
 801a9f0:	bf00      	nop
    prepareTransition(currentScreen, currentPresenter, currentTrans);
 801a9f2:	683a      	ldr	r2, [r7, #0]
 801a9f4:	68b9      	ldr	r1, [r7, #8]
 801a9f6:	68f8      	ldr	r0, [r7, #12]
 801a9f8:	f7ff fbf6 	bl	801a1e8 <_ZN8touchgfxL17prepareTransitionEPPNS_6ScreenEPPNS_9PresenterEPPNS_10TransitionE>
    TransType* newTransition = new (&heap.transitionStorage.at< TransType >(0)) TransType;
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	68db      	ldr	r3, [r3, #12]
 801aa00:	2100      	movs	r1, #0
 801aa02:	4618      	mov	r0, r3
 801aa04:	f000 f8b7 	bl	801ab76 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>
 801aa08:	4603      	mov	r3, r0
 801aa0a:	4619      	mov	r1, r3
 801aa0c:	2058      	movs	r0, #88	; 0x58
 801aa0e:	f7ff fb5d 	bl	801a0cc <_ZnwjPv>
 801aa12:	4604      	mov	r4, r0
 801aa14:	2c00      	cmp	r4, #0
 801aa16:	d005      	beq.n	801aa24 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb4>
 801aa18:	2114      	movs	r1, #20
 801aa1a:	4620      	mov	r0, r4
 801aa1c:	f000 f8e0 	bl	801abe0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>
 801aa20:	4623      	mov	r3, r4
 801aa22:	e000      	b.n	801aa26 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xb6>
 801aa24:	4623      	mov	r3, r4
 801aa26:	61fb      	str	r3, [r7, #28]
    ScreenType* newScreen = new (&heap.screenStorage.at< ScreenType >(0)) ScreenType;
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	689b      	ldr	r3, [r3, #8]
 801aa2c:	2100      	movs	r1, #0
 801aa2e:	4618      	mov	r0, r3
 801aa30:	f000 f96a 	bl	801ad08 <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>
 801aa34:	4603      	mov	r3, r0
 801aa36:	4619      	mov	r1, r3
 801aa38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 801aa3c:	f7ff fb46 	bl	801a0cc <_ZnwjPv>
 801aa40:	4604      	mov	r4, r0
 801aa42:	2c00      	cmp	r4, #0
 801aa44:	d004      	beq.n	801aa50 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe0>
 801aa46:	4620      	mov	r0, r4
 801aa48:	f002 fa66 	bl	801cf18 <_ZN11Screen2ViewC1Ev>
 801aa4c:	4623      	mov	r3, r4
 801aa4e:	e000      	b.n	801aa52 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0xe2>
 801aa50:	4623      	mov	r3, r4
 801aa52:	61bb      	str	r3, [r7, #24]
    PresenterType* newPresenter = new (&heap.presenterStorage.at< PresenterType >(0)) PresenterType(*newScreen);
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	685b      	ldr	r3, [r3, #4]
 801aa58:	2100      	movs	r1, #0
 801aa5a:	4618      	mov	r0, r3
 801aa5c:	f000 f967 	bl	801ad2e <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>
 801aa60:	4603      	mov	r3, r0
 801aa62:	4619      	mov	r1, r3
 801aa64:	2010      	movs	r0, #16
 801aa66:	f7ff fb31 	bl	801a0cc <_ZnwjPv>
 801aa6a:	4604      	mov	r4, r0
 801aa6c:	2c00      	cmp	r4, #0
 801aa6e:	d005      	beq.n	801aa7c <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10c>
 801aa70:	69b9      	ldr	r1, [r7, #24]
 801aa72:	4620      	mov	r0, r4
 801aa74:	f002 f9f8 	bl	801ce68 <_ZN16Screen2PresenterC1ER11Screen2View>
 801aa78:	4623      	mov	r3, r4
 801aa7a:	e000      	b.n	801aa7e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x10e>
 801aa7c:	4623      	mov	r3, r4
 801aa7e:	617b      	str	r3, [r7, #20]
    *currentTrans = newTransition;
 801aa80:	683b      	ldr	r3, [r7, #0]
 801aa82:	69fa      	ldr	r2, [r7, #28]
 801aa84:	601a      	str	r2, [r3, #0]
    *currentPresenter = newPresenter;
 801aa86:	68bb      	ldr	r3, [r7, #8]
 801aa88:	697a      	ldr	r2, [r7, #20]
 801aa8a:	601a      	str	r2, [r3, #0]
    *currentScreen = newScreen;
 801aa8c:	68fb      	ldr	r3, [r7, #12]
 801aa8e:	69ba      	ldr	r2, [r7, #24]
 801aa90:	601a      	str	r2, [r3, #0]
    model->bind(newPresenter);
 801aa92:	697b      	ldr	r3, [r7, #20]
 801aa94:	2b00      	cmp	r3, #0
 801aa96:	d002      	beq.n	801aa9e <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x12e>
 801aa98:	697b      	ldr	r3, [r7, #20]
 801aa9a:	3304      	adds	r3, #4
 801aa9c:	e000      	b.n	801aaa0 <_ZN8touchgfx14makeTransitionI11Screen2View16Screen2PresenterNS_15SlideTransitionILNS_9DirectionE3EEE5ModelEEPT0_PPNS_6ScreenEPPNS_9PresenterERNS_7MVPHeapEPPNS_10TransitionEPT2_+0x130>
 801aa9e:	2300      	movs	r3, #0
 801aaa0:	4619      	mov	r1, r3
 801aaa2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801aaa4:	f7ff fc23 	bl	801a2ee <_ZN5Model4bindEP13ModelListener>
    newPresenter->bind(model);
 801aaa8:	697b      	ldr	r3, [r7, #20]
 801aaaa:	3304      	adds	r3, #4
 801aaac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801aaae:	4618      	mov	r0, r3
 801aab0:	f7ff fc6d 	bl	801a38e <_ZN13ModelListener4bindEP5Model>
    newScreen->bind(*newPresenter);
 801aab4:	69bb      	ldr	r3, [r7, #24]
 801aab6:	6979      	ldr	r1, [r7, #20]
 801aab8:	4618      	mov	r0, r3
 801aaba:	f000 f94b 	bl	801ad54 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>
    finalizeTransition((Screen*)newScreen, (Presenter*)newPresenter, (Transition*)newTransition);
 801aabe:	69fa      	ldr	r2, [r7, #28]
 801aac0:	6979      	ldr	r1, [r7, #20]
 801aac2:	69b8      	ldr	r0, [r7, #24]
 801aac4:	f7ff fbec 	bl	801a2a0 <_ZN8touchgfxL18finalizeTransitionEPNS_6ScreenEPNS_9PresenterEPNS_10TransitionE>
    return newPresenter;
 801aac8:	697b      	ldr	r3, [r7, #20]
}
 801aaca:	4618      	mov	r0, r3
 801aacc:	3724      	adds	r7, #36	; 0x24
 801aace:	46bd      	mov	sp, r7
 801aad0:	bd90      	pop	{r4, r7, pc}
 801aad2:	bf00      	nop
 801aad4:	08023a44 	.word	0x08023a44
 801aad8:	08024e64 	.word	0x08024e64
 801aadc:	08023ad4 	.word	0x08023ad4
 801aae0:	08023b44 	.word	0x08023b44
 801aae4:	08023be8 	.word	0x08023be8

0801aae8 <_ZN8touchgfx17AbstractPartition2atINS_12NoTransitionEEERT_t>:
     * @param index The index into the Partition storage where the returned object is located.
     *
     * @return A typed reference to the object at the specified index.
     */
    template< typename T >
    T& at(const uint16_t index)
 801aae8:	b580      	push	{r7, lr}
 801aaea:	b082      	sub	sp, #8
 801aaec:	af00      	add	r7, sp, #0
 801aaee:	6078      	str	r0, [r7, #4]
 801aaf0:	460b      	mov	r3, r1
 801aaf2:	807b      	strh	r3, [r7, #2]
    {
        return *static_cast<T*>(element(index));
 801aaf4:	687b      	ldr	r3, [r7, #4]
 801aaf6:	681b      	ldr	r3, [r3, #0]
 801aaf8:	3324      	adds	r3, #36	; 0x24
 801aafa:	681b      	ldr	r3, [r3, #0]
 801aafc:	887a      	ldrh	r2, [r7, #2]
 801aafe:	4611      	mov	r1, r2
 801ab00:	6878      	ldr	r0, [r7, #4]
 801ab02:	4798      	blx	r3
 801ab04:	4603      	mov	r3, r0
    }
 801ab06:	4618      	mov	r0, r3
 801ab08:	3708      	adds	r7, #8
 801ab0a:	46bd      	mov	sp, r7
 801ab0c:	bd80      	pop	{r7, pc}

0801ab0e <_ZN8touchgfx17AbstractPartition2atI11Screen1ViewEERT_t>:
    T& at(const uint16_t index)
 801ab0e:	b580      	push	{r7, lr}
 801ab10:	b082      	sub	sp, #8
 801ab12:	af00      	add	r7, sp, #0
 801ab14:	6078      	str	r0, [r7, #4]
 801ab16:	460b      	mov	r3, r1
 801ab18:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801ab1a:	687b      	ldr	r3, [r7, #4]
 801ab1c:	681b      	ldr	r3, [r3, #0]
 801ab1e:	3324      	adds	r3, #36	; 0x24
 801ab20:	681b      	ldr	r3, [r3, #0]
 801ab22:	887a      	ldrh	r2, [r7, #2]
 801ab24:	4611      	mov	r1, r2
 801ab26:	6878      	ldr	r0, [r7, #4]
 801ab28:	4798      	blx	r3
 801ab2a:	4603      	mov	r3, r0
    }
 801ab2c:	4618      	mov	r0, r3
 801ab2e:	3708      	adds	r7, #8
 801ab30:	46bd      	mov	sp, r7
 801ab32:	bd80      	pop	{r7, pc}

0801ab34 <_ZN8touchgfx17AbstractPartition2atI16Screen1PresenterEERT_t>:
    T& at(const uint16_t index)
 801ab34:	b580      	push	{r7, lr}
 801ab36:	b082      	sub	sp, #8
 801ab38:	af00      	add	r7, sp, #0
 801ab3a:	6078      	str	r0, [r7, #4]
 801ab3c:	460b      	mov	r3, r1
 801ab3e:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	681b      	ldr	r3, [r3, #0]
 801ab44:	3324      	adds	r3, #36	; 0x24
 801ab46:	681b      	ldr	r3, [r3, #0]
 801ab48:	887a      	ldrh	r2, [r7, #2]
 801ab4a:	4611      	mov	r1, r2
 801ab4c:	6878      	ldr	r0, [r7, #4]
 801ab4e:	4798      	blx	r3
 801ab50:	4603      	mov	r3, r0
    }
 801ab52:	4618      	mov	r0, r3
 801ab54:	3708      	adds	r7, #8
 801ab56:	46bd      	mov	sp, r7
 801ab58:	bd80      	pop	{r7, pc}

0801ab5a <_ZN8touchgfx4ViewI16Screen1PresenterE4bindERS1_>:
     *        Binds an instance of a specific Presenter type (subclass) to the View instance.
     *        This function is called automatically when a new presenter/view pair is activated.
     *
     * @param [in] presenter The specific Presenter to be associated with the View.
     */
    void bind(T& presenter)
 801ab5a:	b480      	push	{r7}
 801ab5c:	b083      	sub	sp, #12
 801ab5e:	af00      	add	r7, sp, #0
 801ab60:	6078      	str	r0, [r7, #4]
 801ab62:	6039      	str	r1, [r7, #0]
    {
        this->presenter = &presenter;
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	683a      	ldr	r2, [r7, #0]
 801ab68:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801ab6a:	bf00      	nop
 801ab6c:	370c      	adds	r7, #12
 801ab6e:	46bd      	mov	sp, r7
 801ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ab74:	4770      	bx	lr

0801ab76 <_ZN8touchgfx17AbstractPartition2atINS_15SlideTransitionILNS_9DirectionE3EEEEERT_t>:
    T& at(const uint16_t index)
 801ab76:	b580      	push	{r7, lr}
 801ab78:	b082      	sub	sp, #8
 801ab7a:	af00      	add	r7, sp, #0
 801ab7c:	6078      	str	r0, [r7, #4]
 801ab7e:	460b      	mov	r3, r1
 801ab80:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	681b      	ldr	r3, [r3, #0]
 801ab86:	3324      	adds	r3, #36	; 0x24
 801ab88:	681b      	ldr	r3, [r3, #0]
 801ab8a:	887a      	ldrh	r2, [r7, #2]
 801ab8c:	4611      	mov	r1, r2
 801ab8e:	6878      	ldr	r0, [r7, #4]
 801ab90:	4798      	blx	r3
 801ab92:	4603      	mov	r3, r0
    }
 801ab94:	4618      	mov	r0, r3
 801ab96:	3708      	adds	r7, #8
 801ab98:	46bd      	mov	sp, r7
 801ab9a:	bd80      	pop	{r7, pc}

0801ab9c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 801ab9c:	b580      	push	{r7, lr}
 801ab9e:	b082      	sub	sp, #8
 801aba0:	af00      	add	r7, sp, #0
 801aba2:	6078      	str	r0, [r7, #4]
 801aba4:	4a05      	ldr	r2, [pc, #20]	; (801abbc <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev+0x20>)
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	601a      	str	r2, [r3, #0]
 801abaa:	687b      	ldr	r3, [r7, #4]
 801abac:	4618      	mov	r0, r3
 801abae:	f7f4 fa13 	bl	800efd8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvED1Ev>
 801abb2:	687b      	ldr	r3, [r7, #4]
 801abb4:	4618      	mov	r0, r3
 801abb6:	3708      	adds	r7, #8
 801abb8:	46bd      	mov	sp, r7
 801abba:	bd80      	pop	{r7, pc}
 801abbc:	08024bf0 	.word	0x08024bf0

0801abc0 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED0Ev>:
 801abc0:	b580      	push	{r7, lr}
 801abc2:	b082      	sub	sp, #8
 801abc4:	af00      	add	r7, sp, #0
 801abc6:	6078      	str	r0, [r7, #4]
 801abc8:	6878      	ldr	r0, [r7, #4]
 801abca:	f7ff ffe7 	bl	801ab9c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
 801abce:	2110      	movs	r1, #16
 801abd0:	6878      	ldr	r0, [r7, #4]
 801abd2:	f007 fc26 	bl	8022422 <_ZdlPvj>
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	4618      	mov	r0, r3
 801abda:	3708      	adds	r7, #8
 801abdc:	46bd      	mov	sp, r7
 801abde:	bd80      	pop	{r7, pc}

0801abe0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh>:
     *
     *        Constructor.
     *
     * @param transitionSteps Number of steps in the transition animation.
     */
    SlideTransition(const uint8_t transitionSteps = 20)
 801abe0:	b590      	push	{r4, r7, lr}
 801abe2:	b087      	sub	sp, #28
 801abe4:	af02      	add	r7, sp, #8
 801abe6:	6078      	str	r0, [r7, #4]
 801abe8:	460b      	mov	r3, r1
 801abea:	70fb      	strb	r3, [r7, #3]
          snapshotPtr(&snapshot),
          handleTickCallback(this, &SlideTransition::tickMoveDrawable),
          direction(templateDirection),
          animationSteps(transitionSteps),
          animationCounter(0),
          calculatedValue(0)
 801abec:	687b      	ldr	r3, [r7, #4]
 801abee:	4618      	mov	r0, r3
 801abf0:	f7ff fa78 	bl	801a0e4 <_ZN8touchgfx10TransitionC1Ev>
 801abf4:	4a3f      	ldr	r2, [pc, #252]	; (801acf4 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x114>)
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	601a      	str	r2, [r3, #0]
 801abfa:	687b      	ldr	r3, [r7, #4]
 801abfc:	330c      	adds	r3, #12
 801abfe:	4618      	mov	r0, r3
 801ac00:	f7f5 fec2 	bl	8010988 <_ZN8touchgfx14SnapshotWidgetC1Ev>
 801ac04:	687b      	ldr	r3, [r7, #4]
 801ac06:	f103 020c 	add.w	r2, r3, #12
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	63da      	str	r2, [r3, #60]	; 0x3c
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801ac14:	4a38      	ldr	r2, [pc, #224]	; (801acf8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x118>)
 801ac16:	f107 0308 	add.w	r3, r7, #8
 801ac1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ac1e:	e883 0003 	stmia.w	r3, {r0, r1}
 801ac22:	f107 0308 	add.w	r3, r7, #8
 801ac26:	cb0c      	ldmia	r3, {r2, r3}
 801ac28:	6879      	ldr	r1, [r7, #4]
 801ac2a:	4620      	mov	r0, r4
 801ac2c:	f000 f8da 	bl	801ade4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
 801ac30:	687b      	ldr	r3, [r7, #4]
 801ac32:	2203      	movs	r2, #3
 801ac34:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	78fa      	ldrb	r2, [r7, #3]
 801ac3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 801ac40:	687b      	ldr	r3, [r7, #4]
 801ac42:	2200      	movs	r2, #0
 801ac44:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	2200      	movs	r2, #0
 801ac4c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    {
        if (HAL::USE_ANIMATION_STORAGE)
 801ac50:	4b2a      	ldr	r3, [pc, #168]	; (801acfc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x11c>)
 801ac52:	781b      	ldrb	r3, [r3, #0]
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	d047      	beq.n	801ace8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
        {
            snapshot.setPosition(0, 0, HAL::DISPLAY_WIDTH, HAL::DISPLAY_HEIGHT);
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	f103 000c 	add.w	r0, r3, #12
 801ac5e:	4b28      	ldr	r3, [pc, #160]	; (801ad00 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 801ac60:	881b      	ldrh	r3, [r3, #0]
 801ac62:	b21a      	sxth	r2, r3
 801ac64:	4b27      	ldr	r3, [pc, #156]	; (801ad04 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 801ac66:	881b      	ldrh	r3, [r3, #0]
 801ac68:	b21b      	sxth	r3, r3
 801ac6a:	9300      	str	r3, [sp, #0]
 801ac6c:	4613      	mov	r3, r2
 801ac6e:	2200      	movs	r2, #0
 801ac70:	2100      	movs	r1, #0
 801ac72:	f7f3 fd91 	bl	800e798 <_ZN8touchgfx8Drawable11setPositionEssss>
            snapshot.makeSnapshot();
 801ac76:	687b      	ldr	r3, [r7, #4]
 801ac78:	330c      	adds	r3, #12
 801ac7a:	4618      	mov	r0, r3
 801ac7c:	f7f5 ff2c 	bl	8010ad8 <_ZN8touchgfx14SnapshotWidget12makeSnapshotEv>

            switch (direction)
 801ac80:	687b      	ldr	r3, [r7, #4]
 801ac82:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801ac86:	2b03      	cmp	r3, #3
 801ac88:	d82a      	bhi.n	801ace0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x100>
 801ac8a:	a201      	add	r2, pc, #4	; (adr r2, 801ac90 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0xb0>)
 801ac8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ac90:	0801acc1 	.word	0x0801acc1
 801ac94:	0801accf 	.word	0x0801accf
 801ac98:	0801aca1 	.word	0x0801aca1
 801ac9c:	0801acb3 	.word	0x0801acb3
            {
            case EAST:
                targetValue = -HAL::DISPLAY_WIDTH;
 801aca0:	4b17      	ldr	r3, [pc, #92]	; (801ad00 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 801aca2:	881b      	ldrh	r3, [r3, #0]
 801aca4:	425b      	negs	r3, r3
 801aca6:	b29b      	uxth	r3, r3
 801aca8:	b21a      	sxth	r2, r3
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                break;
 801acb0:	e01a      	b.n	801ace8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case WEST:
                targetValue = HAL::DISPLAY_WIDTH;
 801acb2:	4b13      	ldr	r3, [pc, #76]	; (801ad00 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x120>)
 801acb4:	881b      	ldrh	r3, [r3, #0]
 801acb6:	b21a      	sxth	r2, r3
 801acb8:	687b      	ldr	r3, [r7, #4]
 801acba:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                break;
 801acbe:	e013      	b.n	801ace8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case NORTH:
                targetValue = HAL::DISPLAY_HEIGHT;
 801acc0:	4b10      	ldr	r3, [pc, #64]	; (801ad04 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 801acc2:	881b      	ldrh	r3, [r3, #0]
 801acc4:	b21a      	sxth	r2, r3
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                break;
 801accc:	e00c      	b.n	801ace8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            case SOUTH:
                targetValue = -HAL::DISPLAY_HEIGHT;
 801acce:	4b0d      	ldr	r3, [pc, #52]	; (801ad04 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x124>)
 801acd0:	881b      	ldrh	r3, [r3, #0]
 801acd2:	425b      	negs	r3, r3
 801acd4:	b29b      	uxth	r3, r3
 801acd6:	b21a      	sxth	r2, r3
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
                break;
 801acde:	e003      	b.n	801ace8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EEC1Eh+0x108>
            default:
                done = true;
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	2201      	movs	r2, #1
 801ace4:	721a      	strb	r2, [r3, #8]
                // Nothing to do here
                break;
 801ace6:	bf00      	nop
            }
        }
    }
 801ace8:	687b      	ldr	r3, [r7, #4]
 801acea:	4618      	mov	r0, r3
 801acec:	3714      	adds	r7, #20
 801acee:	46bd      	mov	sp, r7
 801acf0:	bd90      	pop	{r4, r7, pc}
 801acf2:	bf00      	nop
 801acf4:	08024bc8 	.word	0x08024bc8
 801acf8:	08023c8c 	.word	0x08023c8c
 801acfc:	20009d33 	.word	0x20009d33
 801ad00:	20009d28 	.word	0x20009d28
 801ad04:	20009d2a 	.word	0x20009d2a

0801ad08 <_ZN8touchgfx17AbstractPartition2atI11Screen2ViewEERT_t>:
    T& at(const uint16_t index)
 801ad08:	b580      	push	{r7, lr}
 801ad0a:	b082      	sub	sp, #8
 801ad0c:	af00      	add	r7, sp, #0
 801ad0e:	6078      	str	r0, [r7, #4]
 801ad10:	460b      	mov	r3, r1
 801ad12:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	681b      	ldr	r3, [r3, #0]
 801ad18:	3324      	adds	r3, #36	; 0x24
 801ad1a:	681b      	ldr	r3, [r3, #0]
 801ad1c:	887a      	ldrh	r2, [r7, #2]
 801ad1e:	4611      	mov	r1, r2
 801ad20:	6878      	ldr	r0, [r7, #4]
 801ad22:	4798      	blx	r3
 801ad24:	4603      	mov	r3, r0
    }
 801ad26:	4618      	mov	r0, r3
 801ad28:	3708      	adds	r7, #8
 801ad2a:	46bd      	mov	sp, r7
 801ad2c:	bd80      	pop	{r7, pc}

0801ad2e <_ZN8touchgfx17AbstractPartition2atI16Screen2PresenterEERT_t>:
    T& at(const uint16_t index)
 801ad2e:	b580      	push	{r7, lr}
 801ad30:	b082      	sub	sp, #8
 801ad32:	af00      	add	r7, sp, #0
 801ad34:	6078      	str	r0, [r7, #4]
 801ad36:	460b      	mov	r3, r1
 801ad38:	807b      	strh	r3, [r7, #2]
        return *static_cast<T*>(element(index));
 801ad3a:	687b      	ldr	r3, [r7, #4]
 801ad3c:	681b      	ldr	r3, [r3, #0]
 801ad3e:	3324      	adds	r3, #36	; 0x24
 801ad40:	681b      	ldr	r3, [r3, #0]
 801ad42:	887a      	ldrh	r2, [r7, #2]
 801ad44:	4611      	mov	r1, r2
 801ad46:	6878      	ldr	r0, [r7, #4]
 801ad48:	4798      	blx	r3
 801ad4a:	4603      	mov	r3, r0
    }
 801ad4c:	4618      	mov	r0, r3
 801ad4e:	3708      	adds	r7, #8
 801ad50:	46bd      	mov	sp, r7
 801ad52:	bd80      	pop	{r7, pc}

0801ad54 <_ZN8touchgfx4ViewI16Screen2PresenterE4bindERS1_>:
    void bind(T& presenter)
 801ad54:	b480      	push	{r7}
 801ad56:	b083      	sub	sp, #12
 801ad58:	af00      	add	r7, sp, #0
 801ad5a:	6078      	str	r0, [r7, #4]
 801ad5c:	6039      	str	r1, [r7, #0]
        this->presenter = &presenter;
 801ad5e:	687b      	ldr	r3, [r7, #4]
 801ad60:	683a      	ldr	r2, [r7, #0]
 801ad62:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801ad64:	bf00      	nop
 801ad66:	370c      	adds	r7, #12
 801ad68:	46bd      	mov	sp, r7
 801ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad6e:	4770      	bx	lr

0801ad70 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE>:
     *
     *        Moves the Drawable.
     *
     * @param [in] d The Drawable to move.
     */
    virtual void tickMoveDrawable(Drawable& d)
 801ad70:	b580      	push	{r7, lr}
 801ad72:	b082      	sub	sp, #8
 801ad74:	af00      	add	r7, sp, #0
 801ad76:	6078      	str	r0, [r7, #4]
 801ad78:	6039      	str	r1, [r7, #0]
    {
        if (&d == snapshotPtr)
 801ad7a:	687b      	ldr	r3, [r7, #4]
 801ad7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801ad7e:	683a      	ldr	r2, [r7, #0]
 801ad80:	429a      	cmp	r2, r3
 801ad82:	d02a      	beq.n	801adda <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6a>
        {
            return;
        }

        switch (direction)
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801ad8a:	2b03      	cmp	r3, #3
 801ad8c:	d820      	bhi.n	801add0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x60>
 801ad8e:	a201      	add	r2, pc, #4	; (adr r2, 801ad94 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x24>)
 801ad90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ad94:	0801adbb 	.word	0x0801adbb
 801ad98:	0801adbb 	.word	0x0801adbb
 801ad9c:	0801ada5 	.word	0x0801ada5
 801ada0:	0801ada5 	.word	0x0801ada5
        {
        case EAST:
        case WEST:
            d.moveRelative(calculatedValue, 0);
 801ada4:	683b      	ldr	r3, [r7, #0]
 801ada6:	681b      	ldr	r3, [r3, #0]
 801ada8:	3354      	adds	r3, #84	; 0x54
 801adaa:	681b      	ldr	r3, [r3, #0]
 801adac:	687a      	ldr	r2, [r7, #4]
 801adae:	f9b2 1056 	ldrsh.w	r1, [r2, #86]	; 0x56
 801adb2:	2200      	movs	r2, #0
 801adb4:	6838      	ldr	r0, [r7, #0]
 801adb6:	4798      	blx	r3
            break;
 801adb8:	e010      	b.n	801addc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        case NORTH:
        case SOUTH:
            d.moveRelative(0, calculatedValue);
 801adba:	683b      	ldr	r3, [r7, #0]
 801adbc:	681b      	ldr	r3, [r3, #0]
 801adbe:	3354      	adds	r3, #84	; 0x54
 801adc0:	681b      	ldr	r3, [r3, #0]
 801adc2:	687a      	ldr	r2, [r7, #4]
 801adc4:	f9b2 2056 	ldrsh.w	r2, [r2, #86]	; 0x56
 801adc8:	2100      	movs	r1, #0
 801adca:	6838      	ldr	r0, [r7, #0]
 801adcc:	4798      	blx	r3
            break;
 801adce:	e005      	b.n	801addc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6c>
        default:
            // Special case, do not move. Class NoTransition can be used instead.
            done = true;
 801add0:	687b      	ldr	r3, [r7, #4]
 801add2:	2201      	movs	r2, #1
 801add4:	721a      	strb	r2, [r3, #8]
            break;
 801add6:	bf00      	nop
 801add8:	e000      	b.n	801addc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16tickMoveDrawableERNS_8DrawableE+0x6c>
            return;
 801adda:	bf00      	nop
        }
    }
 801addc:	3708      	adds	r7, #8
 801adde:	46bd      	mov	sp, r7
 801ade0:	bd80      	pop	{r7, pc}
 801ade2:	bf00      	nop

0801ade4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 801ade4:	b580      	push	{r7, lr}
 801ade6:	b084      	sub	sp, #16
 801ade8:	af00      	add	r7, sp, #0
 801adea:	60f8      	str	r0, [r7, #12]
 801adec:	60b9      	str	r1, [r7, #8]
 801adee:	4639      	mov	r1, r7
 801adf0:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 801adf4:	68fb      	ldr	r3, [r7, #12]
 801adf6:	4618      	mov	r0, r3
 801adf8:	f7f4 f8de 	bl	800efb8 <_ZN8touchgfx15GenericCallbackIRNS_8DrawableEvvEC1Ev>
 801adfc:	4a08      	ldr	r2, [pc, #32]	; (801ae20 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E+0x3c>)
 801adfe:	68fb      	ldr	r3, [r7, #12]
 801ae00:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801ae02:	68fb      	ldr	r3, [r7, #12]
 801ae04:	68ba      	ldr	r2, [r7, #8]
 801ae06:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 801ae08:	68fb      	ldr	r3, [r7, #12]
 801ae0a:	3308      	adds	r3, #8
 801ae0c:	463a      	mov	r2, r7
 801ae0e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801ae12:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801ae16:	68fb      	ldr	r3, [r7, #12]
 801ae18:	4618      	mov	r0, r3
 801ae1a:	3710      	adds	r7, #16
 801ae1c:	46bd      	mov	sp, r7
 801ae1e:	bd80      	pop	{r7, pc}
 801ae20:	08024bf0 	.word	0x08024bf0

0801ae24 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>:
    virtual ~SlideTransition()
 801ae24:	b580      	push	{r7, lr}
 801ae26:	b082      	sub	sp, #8
 801ae28:	af00      	add	r7, sp, #0
 801ae2a:	6078      	str	r0, [r7, #4]
    }
 801ae2c:	4a0a      	ldr	r2, [pc, #40]	; (801ae58 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev+0x34>)
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	601a      	str	r2, [r3, #0]
 801ae32:	687b      	ldr	r3, [r7, #4]
 801ae34:	3340      	adds	r3, #64	; 0x40
 801ae36:	4618      	mov	r0, r3
 801ae38:	f7ff feb0 	bl	801ab9c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
 801ae3c:	687b      	ldr	r3, [r7, #4]
 801ae3e:	330c      	adds	r3, #12
 801ae40:	4618      	mov	r0, r3
 801ae42:	f7f5 fdbb 	bl	80109bc <_ZN8touchgfx14SnapshotWidgetD1Ev>
 801ae46:	687b      	ldr	r3, [r7, #4]
 801ae48:	4618      	mov	r0, r3
 801ae4a:	f7ff f961 	bl	801a110 <_ZN8touchgfx10TransitionD1Ev>
 801ae4e:	687b      	ldr	r3, [r7, #4]
 801ae50:	4618      	mov	r0, r3
 801ae52:	3708      	adds	r7, #8
 801ae54:	46bd      	mov	sp, r7
 801ae56:	bd80      	pop	{r7, pc}
 801ae58:	08024bc8 	.word	0x08024bc8

0801ae5c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED0Ev>:
    virtual ~SlideTransition()
 801ae5c:	b580      	push	{r7, lr}
 801ae5e:	b082      	sub	sp, #8
 801ae60:	af00      	add	r7, sp, #0
 801ae62:	6078      	str	r0, [r7, #4]
    }
 801ae64:	6878      	ldr	r0, [r7, #4]
 801ae66:	f7ff ffdd 	bl	801ae24 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EED1Ev>
 801ae6a:	2158      	movs	r1, #88	; 0x58
 801ae6c:	6878      	ldr	r0, [r7, #4]
 801ae6e:	f007 fad8 	bl	8022422 <_ZdlPvj>
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	4618      	mov	r0, r3
 801ae76:	3708      	adds	r7, #8
 801ae78:	46bd      	mov	sp, r7
 801ae7a:	bd80      	pop	{r7, pc}

0801ae7c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv>:
    virtual void handleTickEvent()
 801ae7c:	b580      	push	{r7, lr}
 801ae7e:	b082      	sub	sp, #8
 801ae80:	af00      	add	r7, sp, #0
 801ae82:	6078      	str	r0, [r7, #4]
        if (!HAL::USE_ANIMATION_STORAGE)
 801ae84:	4b59      	ldr	r3, [pc, #356]	; (801afec <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x170>)
 801ae86:	781b      	ldrb	r3, [r3, #0]
 801ae88:	f083 0301 	eor.w	r3, r3, #1
 801ae8c:	b2db      	uxtb	r3, r3
 801ae8e:	2b00      	cmp	r3, #0
 801ae90:	d003      	beq.n	801ae9a <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x1e>
            done = true;
 801ae92:	687b      	ldr	r3, [r7, #4]
 801ae94:	2201      	movs	r2, #1
 801ae96:	721a      	strb	r2, [r3, #8]
            return;
 801ae98:	e0a5      	b.n	801afe6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x16a>
        Transition::handleTickEvent();
 801ae9a:	687b      	ldr	r3, [r7, #4]
 801ae9c:	4618      	mov	r0, r3
 801ae9e:	f7ff f957 	bl	801a150 <_ZN8touchgfx10Transition15handleTickEventEv>
        animationCounter++;
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 801aea8:	3301      	adds	r3, #1
 801aeaa:	b2da      	uxtb	r2, r3
 801aeac:	687b      	ldr	r3, [r7, #4]
 801aeae:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        if (animationCounter <= animationSteps)
 801aeb2:	687b      	ldr	r3, [r7, #4]
 801aeb4:	f893 2052 	ldrb.w	r2, [r3, #82]	; 0x52
 801aeb8:	687b      	ldr	r3, [r7, #4]
 801aeba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801aebe:	429a      	cmp	r2, r3
 801aec0:	d82f      	bhi.n	801af22 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xa6>
            calculatedValue = EasingEquations::cubicEaseOut(animationCounter, 0, targetValue, animationSteps);
 801aec2:	687b      	ldr	r3, [r7, #4]
 801aec4:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 801aec8:	b298      	uxth	r0, r3
 801aeca:	687b      	ldr	r3, [r7, #4]
 801aecc:	f9b3 2054 	ldrsh.w	r2, [r3, #84]	; 0x54
 801aed0:	687b      	ldr	r3, [r7, #4]
 801aed2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801aed6:	b29b      	uxth	r3, r3
 801aed8:	2100      	movs	r1, #0
 801aeda:	f004 fcaf 	bl	801f83c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>
 801aede:	4603      	mov	r3, r0
 801aee0:	461a      	mov	r2, r3
 801aee2:	687b      	ldr	r3, [r7, #4]
 801aee4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
            if (calculatedValue % 2)
 801aee8:	687b      	ldr	r3, [r7, #4]
 801aeea:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 801aeee:	b29b      	uxth	r3, r3
 801aef0:	f003 0301 	and.w	r3, r3, #1
 801aef4:	b29b      	uxth	r3, r3
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	d01b      	beq.n	801af32 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xb6>
                calculatedValue += (calculatedValue > 0 ? 1 : -1);
 801aefa:	687b      	ldr	r3, [r7, #4]
 801aefc:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 801af00:	b29b      	uxth	r3, r3
 801af02:	687a      	ldr	r2, [r7, #4]
 801af04:	f9b2 2056 	ldrsh.w	r2, [r2, #86]	; 0x56
 801af08:	2a00      	cmp	r2, #0
 801af0a:	dd01      	ble.n	801af10 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x94>
 801af0c:	2201      	movs	r2, #1
 801af0e:	e001      	b.n	801af14 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x98>
 801af10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801af14:	4413      	add	r3, r2
 801af16:	b29b      	uxth	r3, r3
 801af18:	b21a      	sxth	r2, r3
 801af1a:	687b      	ldr	r3, [r7, #4]
 801af1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
 801af20:	e007      	b.n	801af32 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xb6>
            done = true;
 801af22:	687b      	ldr	r3, [r7, #4]
 801af24:	2201      	movs	r2, #1
 801af26:	721a      	strb	r2, [r3, #8]
            animationCounter = 0;
 801af28:	687b      	ldr	r3, [r7, #4]
 801af2a:	2200      	movs	r2, #0
 801af2c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
            return;
 801af30:	e059      	b.n	801afe6 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x16a>
        switch (direction)
 801af32:	687b      	ldr	r3, [r7, #4]
 801af34:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801af38:	2b03      	cmp	r3, #3
 801af3a:	d845      	bhi.n	801afc8 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x14c>
 801af3c:	a201      	add	r2, pc, #4	; (adr r2, 801af44 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0xc8>)
 801af3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801af42:	bf00      	nop
 801af44:	0801af8f 	.word	0x0801af8f
 801af48:	0801af8f 	.word	0x0801af8f
 801af4c:	0801af55 	.word	0x0801af55
 801af50:	0801af55 	.word	0x0801af55
            calculatedValue -= snapshot.getX();
 801af54:	687b      	ldr	r3, [r7, #4]
 801af56:	330c      	adds	r3, #12
 801af58:	4618      	mov	r0, r3
 801af5a:	f7f3 fc4a 	bl	800e7f2 <_ZNK8touchgfx8Drawable4getXEv>
 801af5e:	4603      	mov	r3, r0
 801af60:	4619      	mov	r1, r3
 801af62:	687b      	ldr	r3, [r7, #4]
 801af64:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 801af68:	b29a      	uxth	r2, r3
 801af6a:	b28b      	uxth	r3, r1
 801af6c:	1ad3      	subs	r3, r2, r3
 801af6e:	b29b      	uxth	r3, r3
 801af70:	b21a      	sxth	r2, r3
 801af72:	687b      	ldr	r3, [r7, #4]
 801af74:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
            snapshot.moveRelative(calculatedValue, 0);
 801af78:	687b      	ldr	r3, [r7, #4]
 801af7a:	f103 000c 	add.w	r0, r3, #12
 801af7e:	687b      	ldr	r3, [r7, #4]
 801af80:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 801af84:	2200      	movs	r2, #0
 801af86:	4619      	mov	r1, r3
 801af88:	f004 f807 	bl	801ef9a <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 801af8c:	e020      	b.n	801afd0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x154>
            calculatedValue -= snapshot.getY();
 801af8e:	687b      	ldr	r3, [r7, #4]
 801af90:	330c      	adds	r3, #12
 801af92:	4618      	mov	r0, r3
 801af94:	f7f3 fc3a 	bl	800e80c <_ZNK8touchgfx8Drawable4getYEv>
 801af98:	4603      	mov	r3, r0
 801af9a:	4619      	mov	r1, r3
 801af9c:	687b      	ldr	r3, [r7, #4]
 801af9e:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 801afa2:	b29a      	uxth	r2, r3
 801afa4:	b28b      	uxth	r3, r1
 801afa6:	1ad3      	subs	r3, r2, r3
 801afa8:	b29b      	uxth	r3, r3
 801afaa:	b21a      	sxth	r2, r3
 801afac:	687b      	ldr	r3, [r7, #4]
 801afae:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
            snapshot.moveRelative(0, calculatedValue);
 801afb2:	687b      	ldr	r3, [r7, #4]
 801afb4:	f103 000c 	add.w	r0, r3, #12
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	f9b3 3056 	ldrsh.w	r3, [r3, #86]	; 0x56
 801afbe:	461a      	mov	r2, r3
 801afc0:	2100      	movs	r1, #0
 801afc2:	f003 ffea 	bl	801ef9a <_ZN8touchgfx8Drawable12moveRelativeEss>
            break;
 801afc6:	e003      	b.n	801afd0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE15handleTickEventEv+0x154>
            done = true;
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	2201      	movs	r2, #1
 801afcc:	721a      	strb	r2, [r3, #8]
            break;
 801afce:	bf00      	nop
        screenContainer->forEachChild(&handleTickCallback);
 801afd0:	687b      	ldr	r3, [r7, #4]
 801afd2:	6858      	ldr	r0, [r3, #4]
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	685b      	ldr	r3, [r3, #4]
 801afd8:	681b      	ldr	r3, [r3, #0]
 801afda:	337c      	adds	r3, #124	; 0x7c
 801afdc:	681b      	ldr	r3, [r3, #0]
 801afde:	687a      	ldr	r2, [r7, #4]
 801afe0:	3240      	adds	r2, #64	; 0x40
 801afe2:	4611      	mov	r1, r2
 801afe4:	4798      	blx	r3
    }
 801afe6:	3708      	adds	r7, #8
 801afe8:	46bd      	mov	sp, r7
 801afea:	bd80      	pop	{r7, pc}
 801afec:	20009d33 	.word	0x20009d33

0801aff0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv>:
    virtual void tearDown()
 801aff0:	b580      	push	{r7, lr}
 801aff2:	b082      	sub	sp, #8
 801aff4:	af00      	add	r7, sp, #0
 801aff6:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 801aff8:	4b09      	ldr	r3, [pc, #36]	; (801b020 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x30>)
 801affa:	781b      	ldrb	r3, [r3, #0]
 801affc:	2b00      	cmp	r3, #0
 801affe:	d00a      	beq.n	801b016 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE8tearDownEv+0x26>
            screenContainer->remove(snapshot);
 801b000:	687b      	ldr	r3, [r7, #4]
 801b002:	6858      	ldr	r0, [r3, #4]
 801b004:	687b      	ldr	r3, [r7, #4]
 801b006:	685b      	ldr	r3, [r3, #4]
 801b008:	681b      	ldr	r3, [r3, #0]
 801b00a:	3368      	adds	r3, #104	; 0x68
 801b00c:	681b      	ldr	r3, [r3, #0]
 801b00e:	687a      	ldr	r2, [r7, #4]
 801b010:	320c      	adds	r2, #12
 801b012:	4611      	mov	r1, r2
 801b014:	4798      	blx	r3
    }
 801b016:	bf00      	nop
 801b018:	3708      	adds	r7, #8
 801b01a:	46bd      	mov	sp, r7
 801b01c:	bd80      	pop	{r7, pc}
 801b01e:	bf00      	nop
 801b020:	20009d33 	.word	0x20009d33

0801b024 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv>:
    virtual void init()
 801b024:	b580      	push	{r7, lr}
 801b026:	b088      	sub	sp, #32
 801b028:	af00      	add	r7, sp, #0
 801b02a:	6078      	str	r0, [r7, #4]
        if (HAL::USE_ANIMATION_STORAGE)
 801b02c:	4b1a      	ldr	r3, [pc, #104]	; (801b098 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x74>)
 801b02e:	781b      	ldrb	r3, [r3, #0]
 801b030:	2b00      	cmp	r3, #0
 801b032:	d02d      	beq.n	801b090 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x6c>
            Transition::init();
 801b034:	687b      	ldr	r3, [r7, #4]
 801b036:	4618      	mov	r0, r3
 801b038:	f7ff f89e 	bl	801a178 <_ZN8touchgfx10Transition4initEv>
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 801b03c:	4a17      	ldr	r2, [pc, #92]	; (801b09c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE4initEv+0x78>)
 801b03e:	f107 0318 	add.w	r3, r7, #24
 801b042:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b046:	e883 0003 	stmia.w	r3, {r0, r1}
 801b04a:	f107 0008 	add.w	r0, r7, #8
 801b04e:	f107 0318 	add.w	r3, r7, #24
 801b052:	cb0c      	ldmia	r3, {r2, r3}
 801b054:	6879      	ldr	r1, [r7, #4]
 801b056:	f7ff fec5 	bl	801ade4 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvEC1EPS3_MS3_FvS5_E>
            screenContainer->forEachChild(&initCallback);
 801b05a:	687b      	ldr	r3, [r7, #4]
 801b05c:	685a      	ldr	r2, [r3, #4]
 801b05e:	687b      	ldr	r3, [r7, #4]
 801b060:	685b      	ldr	r3, [r3, #4]
 801b062:	681b      	ldr	r3, [r3, #0]
 801b064:	337c      	adds	r3, #124	; 0x7c
 801b066:	681b      	ldr	r3, [r3, #0]
 801b068:	f107 0108 	add.w	r1, r7, #8
 801b06c:	4610      	mov	r0, r2
 801b06e:	4798      	blx	r3
            screenContainer->add(snapshot);
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	6858      	ldr	r0, [r3, #4]
 801b074:	687b      	ldr	r3, [r7, #4]
 801b076:	685b      	ldr	r3, [r3, #4]
 801b078:	681b      	ldr	r3, [r3, #0]
 801b07a:	3364      	adds	r3, #100	; 0x64
 801b07c:	681b      	ldr	r3, [r3, #0]
 801b07e:	687a      	ldr	r2, [r7, #4]
 801b080:	320c      	adds	r2, #12
 801b082:	4611      	mov	r1, r2
 801b084:	4798      	blx	r3
            Callback<SlideTransition, Drawable&> initCallback(this, &SlideTransition::initMoveDrawable);
 801b086:	f107 0308 	add.w	r3, r7, #8
 801b08a:	4618      	mov	r0, r3
 801b08c:	f7ff fd86 	bl	801ab9c <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvED1Ev>
    }
 801b090:	bf00      	nop
 801b092:	3720      	adds	r7, #32
 801b094:	46bd      	mov	sp, r7
 801b096:	bd80      	pop	{r7, pc}
 801b098:	20009d33 	.word	0x20009d33
 801b09c:	08023c94 	.word	0x08023c94

0801b0a0 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE>:
    virtual void initMoveDrawable(Drawable& d)
 801b0a0:	b580      	push	{r7, lr}
 801b0a2:	b082      	sub	sp, #8
 801b0a4:	af00      	add	r7, sp, #0
 801b0a6:	6078      	str	r0, [r7, #4]
 801b0a8:	6039      	str	r1, [r7, #0]
        switch (direction)
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801b0b0:	2b03      	cmp	r3, #3
 801b0b2:	d83b      	bhi.n	801b12c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8c>
 801b0b4:	a201      	add	r2, pc, #4	; (adr r2, 801b0bc <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x1c>)
 801b0b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b0ba:	bf00      	nop
 801b0bc:	0801b0fd 	.word	0x0801b0fd
 801b0c0:	0801b117 	.word	0x0801b117
 801b0c4:	0801b0cd 	.word	0x0801b0cd
 801b0c8:	0801b0e3 	.word	0x0801b0e3
            d.moveRelative(HAL::DISPLAY_WIDTH, 0);
 801b0cc:	683b      	ldr	r3, [r7, #0]
 801b0ce:	681b      	ldr	r3, [r3, #0]
 801b0d0:	3354      	adds	r3, #84	; 0x54
 801b0d2:	681b      	ldr	r3, [r3, #0]
 801b0d4:	4a18      	ldr	r2, [pc, #96]	; (801b138 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x98>)
 801b0d6:	8812      	ldrh	r2, [r2, #0]
 801b0d8:	b211      	sxth	r1, r2
 801b0da:	2200      	movs	r2, #0
 801b0dc:	6838      	ldr	r0, [r7, #0]
 801b0de:	4798      	blx	r3
            break;
 801b0e0:	e025      	b.n	801b12e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(-HAL::DISPLAY_WIDTH, 0);
 801b0e2:	683b      	ldr	r3, [r7, #0]
 801b0e4:	681b      	ldr	r3, [r3, #0]
 801b0e6:	3354      	adds	r3, #84	; 0x54
 801b0e8:	681b      	ldr	r3, [r3, #0]
 801b0ea:	4a13      	ldr	r2, [pc, #76]	; (801b138 <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x98>)
 801b0ec:	8812      	ldrh	r2, [r2, #0]
 801b0ee:	4252      	negs	r2, r2
 801b0f0:	b292      	uxth	r2, r2
 801b0f2:	b211      	sxth	r1, r2
 801b0f4:	2200      	movs	r2, #0
 801b0f6:	6838      	ldr	r0, [r7, #0]
 801b0f8:	4798      	blx	r3
            break;
 801b0fa:	e018      	b.n	801b12e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, -HAL::DISPLAY_HEIGHT);
 801b0fc:	683b      	ldr	r3, [r7, #0]
 801b0fe:	681b      	ldr	r3, [r3, #0]
 801b100:	3354      	adds	r3, #84	; 0x54
 801b102:	681b      	ldr	r3, [r3, #0]
 801b104:	4a0d      	ldr	r2, [pc, #52]	; (801b13c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 801b106:	8812      	ldrh	r2, [r2, #0]
 801b108:	4252      	negs	r2, r2
 801b10a:	b292      	uxth	r2, r2
 801b10c:	b212      	sxth	r2, r2
 801b10e:	2100      	movs	r1, #0
 801b110:	6838      	ldr	r0, [r7, #0]
 801b112:	4798      	blx	r3
            break;
 801b114:	e00b      	b.n	801b12e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            d.moveRelative(0, HAL::DISPLAY_HEIGHT);
 801b116:	683b      	ldr	r3, [r7, #0]
 801b118:	681b      	ldr	r3, [r3, #0]
 801b11a:	3354      	adds	r3, #84	; 0x54
 801b11c:	681b      	ldr	r3, [r3, #0]
 801b11e:	4a07      	ldr	r2, [pc, #28]	; (801b13c <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x9c>)
 801b120:	8812      	ldrh	r2, [r2, #0]
 801b122:	b212      	sxth	r2, r2
 801b124:	2100      	movs	r1, #0
 801b126:	6838      	ldr	r0, [r7, #0]
 801b128:	4798      	blx	r3
            break;
 801b12a:	e000      	b.n	801b12e <_ZN8touchgfx15SlideTransitionILNS_9DirectionE3EE16initMoveDrawableERNS_8DrawableE+0x8e>
            break;
 801b12c:	bf00      	nop
    }
 801b12e:	bf00      	nop
 801b130:	3708      	adds	r7, #8
 801b132:	46bd      	mov	sp, r7
 801b134:	bd80      	pop	{r7, pc}
 801b136:	bf00      	nop
 801b138:	20009d28 	.word	0x20009d28
 801b13c:	20009d2a 	.word	0x20009d2a

0801b140 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_>:
    virtual void execute(T1 t1)
 801b140:	b580      	push	{r7, lr}
 801b142:	b082      	sub	sp, #8
 801b144:	af00      	add	r7, sp, #0
 801b146:	6078      	str	r0, [r7, #4]
 801b148:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801b14a:	687b      	ldr	r3, [r7, #4]
 801b14c:	685b      	ldr	r3, [r3, #4]
 801b14e:	687a      	ldr	r2, [r7, #4]
 801b150:	68d2      	ldr	r2, [r2, #12]
 801b152:	1052      	asrs	r2, r2, #1
 801b154:	1898      	adds	r0, r3, r2
 801b156:	687b      	ldr	r3, [r7, #4]
 801b158:	68db      	ldr	r3, [r3, #12]
 801b15a:	f003 0301 	and.w	r3, r3, #1
 801b15e:	2b00      	cmp	r3, #0
 801b160:	d102      	bne.n	801b168 <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_+0x28>
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	689b      	ldr	r3, [r3, #8]
 801b166:	e00a      	b.n	801b17e <_ZN8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7executeES5_+0x3e>
 801b168:	687b      	ldr	r3, [r7, #4]
 801b16a:	685b      	ldr	r3, [r3, #4]
 801b16c:	687a      	ldr	r2, [r7, #4]
 801b16e:	68d2      	ldr	r2, [r2, #12]
 801b170:	1052      	asrs	r2, r2, #1
 801b172:	4413      	add	r3, r2
 801b174:	681b      	ldr	r3, [r3, #0]
 801b176:	687a      	ldr	r2, [r7, #4]
 801b178:	6892      	ldr	r2, [r2, #8]
 801b17a:	4413      	add	r3, r2
 801b17c:	681b      	ldr	r3, [r3, #0]
 801b17e:	6839      	ldr	r1, [r7, #0]
 801b180:	4798      	blx	r3
    }
 801b182:	bf00      	nop
 801b184:	3708      	adds	r7, #8
 801b186:	46bd      	mov	sp, r7
 801b188:	bd80      	pop	{r7, pc}

0801b18a <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv>:
    virtual bool isValid() const
 801b18a:	b480      	push	{r7}
 801b18c:	b083      	sub	sp, #12
 801b18e:	af00      	add	r7, sp, #0
 801b190:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801b192:	687b      	ldr	r3, [r7, #4]
 801b194:	685b      	ldr	r3, [r3, #4]
 801b196:	2b00      	cmp	r3, #0
 801b198:	d010      	beq.n	801b1bc <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x32>
 801b19a:	687b      	ldr	r3, [r7, #4]
 801b19c:	689b      	ldr	r3, [r3, #8]
 801b19e:	2b00      	cmp	r3, #0
 801b1a0:	d107      	bne.n	801b1b2 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x28>
 801b1a2:	687b      	ldr	r3, [r7, #4]
 801b1a4:	68db      	ldr	r3, [r3, #12]
 801b1a6:	f003 0301 	and.w	r3, r3, #1
 801b1aa:	2b00      	cmp	r3, #0
 801b1ac:	d101      	bne.n	801b1b2 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x28>
 801b1ae:	2301      	movs	r3, #1
 801b1b0:	e000      	b.n	801b1b4 <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x2a>
 801b1b2:	2300      	movs	r3, #0
 801b1b4:	2b01      	cmp	r3, #1
 801b1b6:	d001      	beq.n	801b1bc <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x32>
 801b1b8:	2301      	movs	r3, #1
 801b1ba:	e000      	b.n	801b1be <_ZNK8touchgfx8CallbackINS_15SlideTransitionILNS_9DirectionE3EEERNS_8DrawableEvvE7isValidEv+0x34>
 801b1bc:	2300      	movs	r3, #0
    }
 801b1be:	4618      	mov	r0, r3
 801b1c0:	370c      	adds	r7, #12
 801b1c2:	46bd      	mov	sp, r7
 801b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b1c8:	4770      	bx	lr
	...

0801b1cc <_ZN8touchgfx6ScreenD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Screen() { }
 801b1cc:	b580      	push	{r7, lr}
 801b1ce:	b082      	sub	sp, #8
 801b1d0:	af00      	add	r7, sp, #0
 801b1d2:	6078      	str	r0, [r7, #4]
 801b1d4:	4a06      	ldr	r2, [pc, #24]	; (801b1f0 <_ZN8touchgfx6ScreenD1Ev+0x24>)
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	601a      	str	r2, [r3, #0]
 801b1da:	687b      	ldr	r3, [r7, #4]
 801b1dc:	3304      	adds	r3, #4
 801b1de:	4618      	mov	r0, r3
 801b1e0:	f7f3 fbee 	bl	800e9c0 <_ZN8touchgfx9ContainerD1Ev>
 801b1e4:	687b      	ldr	r3, [r7, #4]
 801b1e6:	4618      	mov	r0, r3
 801b1e8:	3708      	adds	r7, #8
 801b1ea:	46bd      	mov	sp, r7
 801b1ec:	bd80      	pop	{r7, pc}
 801b1ee:	bf00      	nop
 801b1f0:	08025e8c 	.word	0x08025e8c

0801b1f4 <_ZN8touchgfx6ScreenD0Ev>:
 801b1f4:	b580      	push	{r7, lr}
 801b1f6:	b082      	sub	sp, #8
 801b1f8:	af00      	add	r7, sp, #0
 801b1fa:	6078      	str	r0, [r7, #4]
 801b1fc:	6878      	ldr	r0, [r7, #4]
 801b1fe:	f7ff ffe5 	bl	801b1cc <_ZN8touchgfx6ScreenD1Ev>
 801b202:	213c      	movs	r1, #60	; 0x3c
 801b204:	6878      	ldr	r0, [r7, #4]
 801b206:	f007 f90c 	bl	8022422 <_ZdlPvj>
 801b20a:	687b      	ldr	r3, [r7, #4]
 801b20c:	4618      	mov	r0, r3
 801b20e:	3708      	adds	r7, #8
 801b210:	46bd      	mov	sp, r7
 801b212:	bd80      	pop	{r7, pc}

0801b214 <_ZN8touchgfx6Screen11setupScreenEv>:
     *        Base version does nothing, but place any screen specific initialization code in
     *        an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void setupScreen() { }
 801b214:	b480      	push	{r7}
 801b216:	b083      	sub	sp, #12
 801b218:	af00      	add	r7, sp, #0
 801b21a:	6078      	str	r0, [r7, #4]
 801b21c:	bf00      	nop
 801b21e:	370c      	adds	r7, #12
 801b220:	46bd      	mov	sp, r7
 801b222:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b226:	4770      	bx	lr

0801b228 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *        Base version does nothing, but override to do screen specific initialization code
     *        that has to be done after the transition to the screen.
     *
     * @see touchgfx::Application::handleTick()
     */
    virtual void afterTransition() { }
 801b228:	b480      	push	{r7}
 801b22a:	b083      	sub	sp, #12
 801b22c:	af00      	add	r7, sp, #0
 801b22e:	6078      	str	r0, [r7, #4]
 801b230:	bf00      	nop
 801b232:	370c      	adds	r7, #12
 801b234:	46bd      	mov	sp, r7
 801b236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b23a:	4770      	bx	lr

0801b23c <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *        displayed. Base version does nothing, but place any screen specific cleanup code
     *        in an overridden version.
     *
     * @see touchgfx::Application::switchScreen()
     */
    virtual void tearDownScreen() { }
 801b23c:	b480      	push	{r7}
 801b23e:	b083      	sub	sp, #12
 801b240:	af00      	add	r7, sp, #0
 801b242:	6078      	str	r0, [r7, #4]
 801b244:	bf00      	nop
 801b246:	370c      	adds	r7, #12
 801b248:	46bd      	mov	sp, r7
 801b24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b24e:	4770      	bx	lr

0801b250 <_ZN8touchgfx6Screen15handleTickEventEv>:
     *        Application::TICK_INTERVAL_MS.
     *
     *        Called by the Application on the current screen with a frequency of
     *        Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
 801b250:	b480      	push	{r7}
 801b252:	b083      	sub	sp, #12
 801b254:	af00      	add	r7, sp, #0
 801b256:	6078      	str	r0, [r7, #4]
    {
    }
 801b258:	bf00      	nop
 801b25a:	370c      	adds	r7, #12
 801b25c:	46bd      	mov	sp, r7
 801b25e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b262:	4770      	bx	lr

0801b264 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     *        Called by the Application on the reception of a "key", the meaning of which is
     *        platform/application specific. Default implementation does nothing.
     *
     * @param key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
 801b264:	b480      	push	{r7}
 801b266:	b083      	sub	sp, #12
 801b268:	af00      	add	r7, sp, #0
 801b26a:	6078      	str	r0, [r7, #4]
 801b26c:	460b      	mov	r3, r1
 801b26e:	70fb      	strb	r3, [r7, #3]
    {
    }
 801b270:	bf00      	nop
 801b272:	370c      	adds	r7, #12
 801b274:	46bd      	mov	sp, r7
 801b276:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b27a:	4770      	bx	lr

0801b27c <_ZN8touchgfx6Screen3addERNS_8DrawableE>:
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     *
     * @param [in] d The Drawable to add.
     */
    void add(Drawable& d)
 801b27c:	b580      	push	{r7, lr}
 801b27e:	b082      	sub	sp, #8
 801b280:	af00      	add	r7, sp, #0
 801b282:	6078      	str	r0, [r7, #4]
 801b284:	6039      	str	r1, [r7, #0]
    {
        container.add(d);
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	3304      	adds	r3, #4
 801b28a:	6839      	ldr	r1, [r7, #0]
 801b28c:	4618      	mov	r0, r3
 801b28e:	f7f3 fbe7 	bl	800ea60 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801b292:	bf00      	nop
 801b294:	3708      	adds	r7, #8
 801b296:	46bd      	mov	sp, r7
 801b298:	bd80      	pop	{r7, pc}

0801b29a <_ZN8touchgfx8TextArea14setLinespacingEt>:
    inline void setLinespacing(uint16_t space)
 801b29a:	b480      	push	{r7}
 801b29c:	b083      	sub	sp, #12
 801b29e:	af00      	add	r7, sp, #0
 801b2a0:	6078      	str	r0, [r7, #4]
 801b2a2:	460b      	mov	r3, r1
 801b2a4:	807b      	strh	r3, [r7, #2]
        linespace = space;
 801b2a6:	687b      	ldr	r3, [r7, #4]
 801b2a8:	887a      	ldrh	r2, [r7, #2]
 801b2aa:	859a      	strh	r2, [r3, #44]	; 0x2c
    }
 801b2ac:	bf00      	nop
 801b2ae:	370c      	adds	r7, #12
 801b2b0:	46bd      	mov	sp, r7
 801b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2b6:	4770      	bx	lr

0801b2b8 <_ZN8touchgfx14ButtonWithIcon8setIconXEs>:
    void setIconX(int16_t x)
 801b2b8:	b480      	push	{r7}
 801b2ba:	b083      	sub	sp, #12
 801b2bc:	af00      	add	r7, sp, #0
 801b2be:	6078      	str	r0, [r7, #4]
 801b2c0:	460b      	mov	r3, r1
 801b2c2:	807b      	strh	r3, [r7, #2]
        iconX = x;
 801b2c4:	687b      	ldr	r3, [r7, #4]
 801b2c6:	887a      	ldrh	r2, [r7, #2]
 801b2c8:	871a      	strh	r2, [r3, #56]	; 0x38
    }
 801b2ca:	bf00      	nop
 801b2cc:	370c      	adds	r7, #12
 801b2ce:	46bd      	mov	sp, r7
 801b2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2d4:	4770      	bx	lr

0801b2d6 <_ZN8touchgfx14ButtonWithIcon8setIconYEs>:
    void setIconY(int16_t y)
 801b2d6:	b480      	push	{r7}
 801b2d8:	b083      	sub	sp, #12
 801b2da:	af00      	add	r7, sp, #0
 801b2dc:	6078      	str	r0, [r7, #4]
 801b2de:	460b      	mov	r3, r1
 801b2e0:	807b      	strh	r3, [r7, #2]
        iconY = y;
 801b2e2:	687b      	ldr	r3, [r7, #4]
 801b2e4:	887a      	ldrh	r2, [r7, #2]
 801b2e6:	875a      	strh	r2, [r3, #58]	; 0x3a
    }
 801b2e8:	bf00      	nop
 801b2ea:	370c      	adds	r7, #12
 801b2ec:	46bd      	mov	sp, r7
 801b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2f2:	4770      	bx	lr

0801b2f4 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>:
    void setIconXY(int16_t x, int16_t y)
 801b2f4:	b580      	push	{r7, lr}
 801b2f6:	b082      	sub	sp, #8
 801b2f8:	af00      	add	r7, sp, #0
 801b2fa:	6078      	str	r0, [r7, #4]
 801b2fc:	460b      	mov	r3, r1
 801b2fe:	807b      	strh	r3, [r7, #2]
 801b300:	4613      	mov	r3, r2
 801b302:	803b      	strh	r3, [r7, #0]
        setIconX(x);
 801b304:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801b308:	4619      	mov	r1, r3
 801b30a:	6878      	ldr	r0, [r7, #4]
 801b30c:	f7ff ffd4 	bl	801b2b8 <_ZN8touchgfx14ButtonWithIcon8setIconXEs>
        setIconY(y);
 801b310:	f9b7 3000 	ldrsh.w	r3, [r7]
 801b314:	4619      	mov	r1, r3
 801b316:	6878      	ldr	r0, [r7, #4]
 801b318:	f7ff ffdd 	bl	801b2d6 <_ZN8touchgfx14ButtonWithIcon8setIconYEs>
    }
 801b31c:	bf00      	nop
 801b31e:	3708      	adds	r7, #8
 801b320:	46bd      	mov	sp, r7
 801b322:	bd80      	pop	{r7, pc}

0801b324 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>:
class View : public Screen
 801b324:	b580      	push	{r7, lr}
 801b326:	b082      	sub	sp, #8
 801b328:	af00      	add	r7, sp, #0
 801b32a:	6078      	str	r0, [r7, #4]
 801b32c:	4a05      	ldr	r2, [pc, #20]	; (801b344 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev+0x20>)
 801b32e:	687b      	ldr	r3, [r7, #4]
 801b330:	601a      	str	r2, [r3, #0]
 801b332:	687b      	ldr	r3, [r7, #4]
 801b334:	4618      	mov	r0, r3
 801b336:	f7ff ff49 	bl	801b1cc <_ZN8touchgfx6ScreenD1Ev>
 801b33a:	687b      	ldr	r3, [r7, #4]
 801b33c:	4618      	mov	r0, r3
 801b33e:	3708      	adds	r7, #8
 801b340:	46bd      	mov	sp, r7
 801b342:	bd80      	pop	{r7, pc}
 801b344:	08024fdc 	.word	0x08024fdc

0801b348 <_ZN8touchgfx4ViewI16Screen1PresenterED0Ev>:
 801b348:	b580      	push	{r7, lr}
 801b34a:	b082      	sub	sp, #8
 801b34c:	af00      	add	r7, sp, #0
 801b34e:	6078      	str	r0, [r7, #4]
 801b350:	6878      	ldr	r0, [r7, #4]
 801b352:	f7ff ffe7 	bl	801b324 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 801b356:	2140      	movs	r1, #64	; 0x40
 801b358:	6878      	ldr	r0, [r7, #4]
 801b35a:	f007 f862 	bl	8022422 <_ZdlPvj>
 801b35e:	687b      	ldr	r3, [r7, #4]
 801b360:	4618      	mov	r0, r3
 801b362:	3708      	adds	r7, #8
 801b364:	46bd      	mov	sp, r7
 801b366:	bd80      	pop	{r7, pc}

0801b368 <_ZN15Screen1ViewBaseD1Ev>:

class Screen1ViewBase : public touchgfx::View<Screen1Presenter>
{
public:
    Screen1ViewBase();
    virtual ~Screen1ViewBase() {}
 801b368:	b580      	push	{r7, lr}
 801b36a:	b082      	sub	sp, #8
 801b36c:	af00      	add	r7, sp, #0
 801b36e:	6078      	str	r0, [r7, #4]
 801b370:	4a1b      	ldr	r2, [pc, #108]	; (801b3e0 <_ZN15Screen1ViewBaseD1Ev+0x78>)
 801b372:	687b      	ldr	r3, [r7, #4]
 801b374:	601a      	str	r2, [r3, #0]
 801b376:	687b      	ldr	r3, [r7, #4]
 801b378:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 801b37c:	4618      	mov	r0, r3
 801b37e:	f000 fa69 	bl	801b854 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801b382:	687b      	ldr	r3, [r7, #4]
 801b384:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 801b388:	4618      	mov	r0, r3
 801b38a:	f7f5 f8a1 	bl	80104d0 <_ZN8touchgfx14ButtonWithIconD1Ev>
 801b38e:	687b      	ldr	r3, [r7, #4]
 801b390:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801b394:	4618      	mov	r0, r3
 801b396:	f7f4 fc61 	bl	800fc5c <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>
 801b39a:	687b      	ldr	r3, [r7, #4]
 801b39c:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801b3a0:	4618      	mov	r0, r3
 801b3a2:	f7f3 ff6f 	bl	800f284 <_ZN8touchgfx3BoxD1Ev>
 801b3a6:	687b      	ldr	r3, [r7, #4]
 801b3a8:	33d8      	adds	r3, #216	; 0xd8
 801b3aa:	4618      	mov	r0, r3
 801b3ac:	f7f4 fb1e 	bl	800f9ec <_ZN8touchgfx8TextAreaD1Ev>
 801b3b0:	687b      	ldr	r3, [r7, #4]
 801b3b2:	33a4      	adds	r3, #164	; 0xa4
 801b3b4:	4618      	mov	r0, r3
 801b3b6:	f7f4 fb19 	bl	800f9ec <_ZN8touchgfx8TextAreaD1Ev>
 801b3ba:	687b      	ldr	r3, [r7, #4]
 801b3bc:	3370      	adds	r3, #112	; 0x70
 801b3be:	4618      	mov	r0, r3
 801b3c0:	f7f4 f8da 	bl	800f578 <_ZN8touchgfx6ButtonD1Ev>
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	3340      	adds	r3, #64	; 0x40
 801b3c8:	4618      	mov	r0, r3
 801b3ca:	f7f3 ff5b 	bl	800f284 <_ZN8touchgfx3BoxD1Ev>
 801b3ce:	687b      	ldr	r3, [r7, #4]
 801b3d0:	4618      	mov	r0, r3
 801b3d2:	f7ff ffa7 	bl	801b324 <_ZN8touchgfx4ViewI16Screen1PresenterED1Ev>
 801b3d6:	687b      	ldr	r3, [r7, #4]
 801b3d8:	4618      	mov	r0, r3
 801b3da:	3708      	adds	r7, #8
 801b3dc:	46bd      	mov	sp, r7
 801b3de:	bd80      	pop	{r7, pc}
 801b3e0:	08024f8c 	.word	0x08024f8c

0801b3e4 <_ZN15Screen1ViewBaseD0Ev>:
 801b3e4:	b580      	push	{r7, lr}
 801b3e6:	b082      	sub	sp, #8
 801b3e8:	af00      	add	r7, sp, #0
 801b3ea:	6078      	str	r0, [r7, #4]
 801b3ec:	6878      	ldr	r0, [r7, #4]
 801b3ee:	f7ff ffbb 	bl	801b368 <_ZN15Screen1ViewBaseD1Ev>
 801b3f2:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 801b3f6:	6878      	ldr	r0, [r7, #4]
 801b3f8:	f007 f813 	bl	8022422 <_ZdlPvj>
 801b3fc:	687b      	ldr	r3, [r7, #4]
 801b3fe:	4618      	mov	r0, r3
 801b400:	3708      	adds	r7, #8
 801b402:	46bd      	mov	sp, r7
 801b404:	bd80      	pop	{r7, pc}

0801b406 <_ZN15Screen1ViewBase12button3clickEv>:
    virtual void setupScreen();

    /*
     * Custom Action Handlers
     */
    virtual void button3click()
 801b406:	b480      	push	{r7}
 801b408:	b083      	sub	sp, #12
 801b40a:	af00      	add	r7, sp, #0
 801b40c:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen1View
    }
 801b40e:	bf00      	nop
 801b410:	370c      	adds	r7, #12
 801b412:	46bd      	mov	sp, r7
 801b414:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b418:	4770      	bx	lr

0801b41a <_ZN15Screen1ViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 801b41a:	b580      	push	{r7, lr}
 801b41c:	b082      	sub	sp, #8
 801b41e:	af00      	add	r7, sp, #0
 801b420:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(Application::getInstance());
 801b422:	f003 f9e3 	bl	801e7ec <_ZN8touchgfx11Application11getInstanceEv>
 801b426:	4603      	mov	r3, r0
    }
 801b428:	4618      	mov	r0, r3
 801b42a:	3708      	adds	r7, #8
 801b42c:	46bd      	mov	sp, r7
 801b42e:	bd80      	pop	{r7, pc}

0801b430 <_ZN15Screen1ViewBaseC1Ev>:
#include <gui_generated/screen1_screen/Screen1ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include "BitmapDatabase.hpp"
#include <texts/TextKeysAndLanguages.hpp>

Screen1ViewBase::Screen1ViewBase() :
 801b430:	b590      	push	{r4, r7, lr}
 801b432:	b091      	sub	sp, #68	; 0x44
 801b434:	af02      	add	r7, sp, #8
 801b436:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen1ViewBase::buttonCallbackHandler)
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	4618      	mov	r0, r3
 801b43c:	f000 f9d4 	bl	801b7e8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>
 801b440:	4ad0      	ldr	r2, [pc, #832]	; (801b784 <_ZN15Screen1ViewBaseC1Ev+0x354>)
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	601a      	str	r2, [r3, #0]
 801b446:	687b      	ldr	r3, [r7, #4]
 801b448:	3340      	adds	r3, #64	; 0x40
 801b44a:	4618      	mov	r0, r3
 801b44c:	f7f3 fefa 	bl	800f244 <_ZN8touchgfx3BoxC1Ev>
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	3370      	adds	r3, #112	; 0x70
 801b454:	4618      	mov	r0, r3
 801b456:	f7f4 f86b 	bl	800f530 <_ZN8touchgfx6ButtonC1Ev>
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	33a4      	adds	r3, #164	; 0xa4
 801b45e:	4618      	mov	r0, r3
 801b460:	f7f4 fa16 	bl	800f890 <_ZN8touchgfx8TextAreaC1Ev>
 801b464:	687b      	ldr	r3, [r7, #4]
 801b466:	33d8      	adds	r3, #216	; 0xd8
 801b468:	4618      	mov	r0, r3
 801b46a:	f7f4 fa11 	bl	800f890 <_ZN8touchgfx8TextAreaC1Ev>
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801b474:	4618      	mov	r0, r3
 801b476:	f7f3 fee5 	bl	800f244 <_ZN8touchgfx3BoxC1Ev>
 801b47a:	687b      	ldr	r3, [r7, #4]
 801b47c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801b480:	4618      	mov	r0, r3
 801b482:	f7f4 fb09 	bl	800fa98 <_ZN8touchgfx23TextAreaWithOneWildcardC1Ev>
 801b486:	687b      	ldr	r3, [r7, #4]
 801b488:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 801b48c:	4618      	mov	r0, r3
 801b48e:	f7f4 ff0f 	bl	80102b0 <_ZN8touchgfx14ButtonWithIconC1Ev>
 801b492:	687b      	ldr	r3, [r7, #4]
 801b494:	f503 70f0 	add.w	r0, r3, #480	; 0x1e0
 801b498:	4bbb      	ldr	r3, [pc, #748]	; (801b788 <_ZN15Screen1ViewBaseC1Ev+0x358>)
 801b49a:	60bb      	str	r3, [r7, #8]
 801b49c:	2300      	movs	r3, #0
 801b49e:	60fb      	str	r3, [r7, #12]
 801b4a0:	f107 0308 	add.w	r3, r7, #8
 801b4a4:	cb0c      	ldmia	r3, {r2, r3}
 801b4a6:	6879      	ldr	r1, [r7, #4]
 801b4a8:	f000 f9b4 	bl	801b814 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
{
    box1.setPosition(1, 0, 480, 272);
 801b4ac:	687b      	ldr	r3, [r7, #4]
 801b4ae:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801b4b2:	f44f 7388 	mov.w	r3, #272	; 0x110
 801b4b6:	9300      	str	r3, [sp, #0]
 801b4b8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 801b4bc:	2200      	movs	r2, #0
 801b4be:	2101      	movs	r1, #1
 801b4c0:	f7f3 f96a 	bl	800e798 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(38, 51, 59));
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801b4ca:	223b      	movs	r2, #59	; 0x3b
 801b4cc:	2133      	movs	r1, #51	; 0x33
 801b4ce:	2026      	movs	r0, #38	; 0x26
 801b4d0:	f004 fdd6 	bl	8020080 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801b4d4:	4603      	mov	r3, r0
 801b4d6:	4619      	mov	r1, r3
 801b4d8:	4620      	mov	r0, r4
 801b4da:	f7f3 fef5 	bl	800f2c8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    button3.setXY(155, 34);
 801b4de:	687b      	ldr	r3, [r7, #4]
 801b4e0:	3370      	adds	r3, #112	; 0x70
 801b4e2:	2222      	movs	r2, #34	; 0x22
 801b4e4:	219b      	movs	r1, #155	; 0x9b
 801b4e6:	4618      	mov	r0, r3
 801b4e8:	f7f3 f9bb 	bl	800e862 <_ZN8touchgfx8Drawable5setXYEss>
    button3.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 801b4ec:	687b      	ldr	r3, [r7, #4]
 801b4ee:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801b4f2:	f107 0310 	add.w	r3, r7, #16
 801b4f6:	2100      	movs	r1, #0
 801b4f8:	4618      	mov	r0, r3
 801b4fa:	f7f3 fdb3 	bl	800f064 <_ZN8touchgfx6BitmapC1Et>
 801b4fe:	f107 0314 	add.w	r3, r7, #20
 801b502:	2101      	movs	r1, #1
 801b504:	4618      	mov	r0, r3
 801b506:	f7f3 fdad 	bl	800f064 <_ZN8touchgfx6BitmapC1Et>
 801b50a:	f107 0214 	add.w	r2, r7, #20
 801b50e:	f107 0310 	add.w	r3, r7, #16
 801b512:	4619      	mov	r1, r3
 801b514:	4620      	mov	r0, r4
 801b516:	f7f4 fe69 	bl	80101ec <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    button3.setAction(buttonCallback);
 801b51a:	687b      	ldr	r3, [r7, #4]
 801b51c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 801b526:	4619      	mov	r1, r3
 801b528:	4610      	mov	r0, r2
 801b52a:	f7f3 ffd1 	bl	800f4d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    textArea1.setXY(181, 52);
 801b52e:	687b      	ldr	r3, [r7, #4]
 801b530:	33a4      	adds	r3, #164	; 0xa4
 801b532:	2234      	movs	r2, #52	; 0x34
 801b534:	21b5      	movs	r1, #181	; 0xb5
 801b536:	4618      	mov	r0, r3
 801b538:	f7f3 f993 	bl	800e862 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(199, 196, 196));
 801b53c:	687b      	ldr	r3, [r7, #4]
 801b53e:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801b542:	22c4      	movs	r2, #196	; 0xc4
 801b544:	21c4      	movs	r1, #196	; 0xc4
 801b546:	20c7      	movs	r0, #199	; 0xc7
 801b548:	f004 fd9a 	bl	8020080 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801b54c:	4603      	mov	r3, r0
 801b54e:	4619      	mov	r1, r3
 801b550:	4620      	mov	r0, r4
 801b552:	f7f4 f9e0 	bl	800f916 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea1.setLinespacing(0);
 801b556:	687b      	ldr	r3, [r7, #4]
 801b558:	33a4      	adds	r3, #164	; 0xa4
 801b55a:	2100      	movs	r1, #0
 801b55c:	4618      	mov	r0, r3
 801b55e:	f7ff fe9c 	bl	801b29a <_ZN8touchgfx8TextArea14setLinespacingEt>
    textArea1.setTypedText(TypedText(T_SINGLEUSEID1));
 801b562:	687b      	ldr	r3, [r7, #4]
 801b564:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801b568:	f107 0318 	add.w	r3, r7, #24
 801b56c:	2100      	movs	r1, #0
 801b56e:	4618      	mov	r0, r3
 801b570:	f7f4 f8de 	bl	800f730 <_ZN8touchgfx9TypedTextC1Et>
 801b574:	8b39      	ldrh	r1, [r7, #24]
 801b576:	4620      	mov	r0, r4
 801b578:	f7f5 fb84 	bl	8010c84 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    textArea2.setXY(42, -136);
 801b57c:	687b      	ldr	r3, [r7, #4]
 801b57e:	33d8      	adds	r3, #216	; 0xd8
 801b580:	f06f 0287 	mvn.w	r2, #135	; 0x87
 801b584:	212a      	movs	r1, #42	; 0x2a
 801b586:	4618      	mov	r0, r3
 801b588:	f7f3 f96b 	bl	800e862 <_ZN8touchgfx8Drawable5setXYEss>
    textArea2.setColor(touchgfx::Color::getColorFrom24BitRGB(194, 188, 188));
 801b58c:	687b      	ldr	r3, [r7, #4]
 801b58e:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 801b592:	22bc      	movs	r2, #188	; 0xbc
 801b594:	21bc      	movs	r1, #188	; 0xbc
 801b596:	20c2      	movs	r0, #194	; 0xc2
 801b598:	f004 fd72 	bl	8020080 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801b59c:	4603      	mov	r3, r0
 801b59e:	4619      	mov	r1, r3
 801b5a0:	4620      	mov	r0, r4
 801b5a2:	f7f4 f9b8 	bl	800f916 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea2.setLinespacing(0);
 801b5a6:	687b      	ldr	r3, [r7, #4]
 801b5a8:	33d8      	adds	r3, #216	; 0xd8
 801b5aa:	2100      	movs	r1, #0
 801b5ac:	4618      	mov	r0, r3
 801b5ae:	f7ff fe74 	bl	801b29a <_ZN8touchgfx8TextArea14setLinespacingEt>
    textArea2.setTypedText(TypedText(T_SINGLEUSEID2));
 801b5b2:	687b      	ldr	r3, [r7, #4]
 801b5b4:	f103 04d8 	add.w	r4, r3, #216	; 0xd8
 801b5b8:	f107 031c 	add.w	r3, r7, #28
 801b5bc:	2101      	movs	r1, #1
 801b5be:	4618      	mov	r0, r3
 801b5c0:	f7f4 f8b6 	bl	800f730 <_ZN8touchgfx9TypedTextC1Et>
 801b5c4:	8bb9      	ldrh	r1, [r7, #28]
 801b5c6:	4620      	mov	r0, r4
 801b5c8:	f7f5 fb5c 	bl	8010c84 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    box2.setPosition(36, 111, 408, 50);
 801b5cc:	687b      	ldr	r3, [r7, #4]
 801b5ce:	f503 7086 	add.w	r0, r3, #268	; 0x10c
 801b5d2:	2332      	movs	r3, #50	; 0x32
 801b5d4:	9300      	str	r3, [sp, #0]
 801b5d6:	f44f 73cc 	mov.w	r3, #408	; 0x198
 801b5da:	226f      	movs	r2, #111	; 0x6f
 801b5dc:	2124      	movs	r1, #36	; 0x24
 801b5de:	f7f3 f8db 	bl	800e798 <_ZN8touchgfx8Drawable11setPositionEssss>
    box2.setColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801b5e2:	687b      	ldr	r3, [r7, #4]
 801b5e4:	f503 7486 	add.w	r4, r3, #268	; 0x10c
 801b5e8:	22ff      	movs	r2, #255	; 0xff
 801b5ea:	21ff      	movs	r1, #255	; 0xff
 801b5ec:	20ff      	movs	r0, #255	; 0xff
 801b5ee:	f004 fd47 	bl	8020080 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801b5f2:	4603      	mov	r3, r0
 801b5f4:	4619      	mov	r1, r3
 801b5f6:	4620      	mov	r0, r4
 801b5f8:	f7f3 fe66 	bl	800f2c8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    textArea3.setPosition(133, 124, 214, 25);
 801b5fc:	687b      	ldr	r3, [r7, #4]
 801b5fe:	f503 709e 	add.w	r0, r3, #316	; 0x13c
 801b602:	2319      	movs	r3, #25
 801b604:	9300      	str	r3, [sp, #0]
 801b606:	23d6      	movs	r3, #214	; 0xd6
 801b608:	227c      	movs	r2, #124	; 0x7c
 801b60a:	2185      	movs	r1, #133	; 0x85
 801b60c:	f7f3 f8c4 	bl	800e798 <_ZN8touchgfx8Drawable11setPositionEssss>
    textArea3.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 801b610:	687b      	ldr	r3, [r7, #4]
 801b612:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 801b616:	2200      	movs	r2, #0
 801b618:	2100      	movs	r1, #0
 801b61a:	2000      	movs	r0, #0
 801b61c:	f004 fd30 	bl	8020080 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801b620:	4603      	mov	r3, r0
 801b622:	4619      	mov	r1, r3
 801b624:	4620      	mov	r0, r4
 801b626:	f7f4 f976 	bl	800f916 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea3.setLinespacing(0);
 801b62a:	687b      	ldr	r3, [r7, #4]
 801b62c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801b630:	2100      	movs	r1, #0
 801b632:	4618      	mov	r0, r3
 801b634:	f7ff fe31 	bl	801b29a <_ZN8touchgfx8TextArea14setLinespacingEt>
    Unicode::snprintf(textArea3Buffer, TEXTAREA3_SIZE, "%s", TypedText(T_SINGLEUSEID4).getText());
 801b638:	687b      	ldr	r3, [r7, #4]
 801b63a:	f503 74d8 	add.w	r4, r3, #432	; 0x1b0
 801b63e:	f107 0320 	add.w	r3, r7, #32
 801b642:	2103      	movs	r1, #3
 801b644:	4618      	mov	r0, r3
 801b646:	f7f4 f873 	bl	800f730 <_ZN8touchgfx9TypedTextC1Et>
 801b64a:	f107 0320 	add.w	r3, r7, #32
 801b64e:	4618      	mov	r0, r3
 801b650:	f7f4 f892 	bl	800f778 <_ZNK8touchgfx9TypedText7getTextEv>
 801b654:	4603      	mov	r3, r0
 801b656:	4a4d      	ldr	r2, [pc, #308]	; (801b78c <_ZN15Screen1ViewBaseC1Ev+0x35c>)
 801b658:	2118      	movs	r1, #24
 801b65a:	4620      	mov	r0, r4
 801b65c:	f004 fd02 	bl	8020064 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
    textArea3.setWildcard(textArea3Buffer);
 801b660:	687b      	ldr	r3, [r7, #4]
 801b662:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 801b666:	687b      	ldr	r3, [r7, #4]
 801b668:	f503 73d8 	add.w	r3, r3, #432	; 0x1b0
 801b66c:	4619      	mov	r1, r3
 801b66e:	4610      	mov	r0, r2
 801b670:	f7f4 faac 	bl	800fbcc <_ZN8touchgfx23TextAreaWithOneWildcard11setWildcardEPKt>
    textArea3.setTypedText(TypedText(T_SINGLEUSEID3));
 801b674:	687b      	ldr	r3, [r7, #4]
 801b676:	f503 749e 	add.w	r4, r3, #316	; 0x13c
 801b67a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801b67e:	2102      	movs	r1, #2
 801b680:	4618      	mov	r0, r3
 801b682:	f7f4 f855 	bl	800f730 <_ZN8touchgfx9TypedTextC1Et>
 801b686:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 801b688:	4620      	mov	r0, r4
 801b68a:	f7f5 fafb 	bl	8010c84 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    buttonWithIcon1.setXY(155, 198);
 801b68e:	687b      	ldr	r3, [r7, #4]
 801b690:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 801b694:	22c6      	movs	r2, #198	; 0xc6
 801b696:	219b      	movs	r1, #155	; 0x9b
 801b698:	4618      	mov	r0, r3
 801b69a:	f7f3 f8e2 	bl	800e862 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithIcon1.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID), Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID), Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID));
 801b69e:	687b      	ldr	r3, [r7, #4]
 801b6a0:	f503 74ba 	add.w	r4, r3, #372	; 0x174
 801b6a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801b6a8:	2100      	movs	r1, #0
 801b6aa:	4618      	mov	r0, r3
 801b6ac:	f7f3 fcda 	bl	800f064 <_ZN8touchgfx6BitmapC1Et>
 801b6b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801b6b4:	2101      	movs	r1, #1
 801b6b6:	4618      	mov	r0, r3
 801b6b8:	f7f3 fcd4 	bl	800f064 <_ZN8touchgfx6BitmapC1Et>
 801b6bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801b6c0:	2102      	movs	r1, #2
 801b6c2:	4618      	mov	r0, r3
 801b6c4:	f7f3 fcce 	bl	800f064 <_ZN8touchgfx6BitmapC1Et>
 801b6c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b6cc:	2102      	movs	r1, #2
 801b6ce:	4618      	mov	r0, r3
 801b6d0:	f7f3 fcc8 	bl	800f064 <_ZN8touchgfx6BitmapC1Et>
 801b6d4:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801b6d8:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801b6dc:	f107 0128 	add.w	r1, r7, #40	; 0x28
 801b6e0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801b6e4:	9300      	str	r3, [sp, #0]
 801b6e6:	4603      	mov	r3, r0
 801b6e8:	4620      	mov	r0, r4
 801b6ea:	f7f4 fe07 	bl	80102fc <_ZN8touchgfx14ButtonWithIcon10setBitmapsERKNS_6BitmapES3_S3_S3_>
    buttonWithIcon1.setIconXY(81, 15);
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 801b6f4:	220f      	movs	r2, #15
 801b6f6:	2151      	movs	r1, #81	; 0x51
 801b6f8:	4618      	mov	r0, r3
 801b6fa:	f7ff fdfb 	bl	801b2f4 <_ZN8touchgfx14ButtonWithIcon9setIconXYEss>
    buttonWithIcon1.setAction(buttonCallback);
 801b6fe:	687b      	ldr	r3, [r7, #4]
 801b700:	f503 72ba 	add.w	r2, r3, #372	; 0x174
 801b704:	687b      	ldr	r3, [r7, #4]
 801b706:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 801b70a:	4619      	mov	r1, r3
 801b70c:	4610      	mov	r0, r2
 801b70e:	f7f3 fedf 	bl	800f4d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(box1);
 801b712:	687a      	ldr	r2, [r7, #4]
 801b714:	687b      	ldr	r3, [r7, #4]
 801b716:	3340      	adds	r3, #64	; 0x40
 801b718:	4619      	mov	r1, r3
 801b71a:	4610      	mov	r0, r2
 801b71c:	f7ff fdae 	bl	801b27c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(button3);
 801b720:	687a      	ldr	r2, [r7, #4]
 801b722:	687b      	ldr	r3, [r7, #4]
 801b724:	3370      	adds	r3, #112	; 0x70
 801b726:	4619      	mov	r1, r3
 801b728:	4610      	mov	r0, r2
 801b72a:	f7ff fda7 	bl	801b27c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 801b72e:	687a      	ldr	r2, [r7, #4]
 801b730:	687b      	ldr	r3, [r7, #4]
 801b732:	33a4      	adds	r3, #164	; 0xa4
 801b734:	4619      	mov	r1, r3
 801b736:	4610      	mov	r0, r2
 801b738:	f7ff fda0 	bl	801b27c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea2);
 801b73c:	687a      	ldr	r2, [r7, #4]
 801b73e:	687b      	ldr	r3, [r7, #4]
 801b740:	33d8      	adds	r3, #216	; 0xd8
 801b742:	4619      	mov	r1, r3
 801b744:	4610      	mov	r0, r2
 801b746:	f7ff fd99 	bl	801b27c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(box2);
 801b74a:	687a      	ldr	r2, [r7, #4]
 801b74c:	687b      	ldr	r3, [r7, #4]
 801b74e:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 801b752:	4619      	mov	r1, r3
 801b754:	4610      	mov	r0, r2
 801b756:	f7ff fd91 	bl	801b27c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea3);
 801b75a:	687a      	ldr	r2, [r7, #4]
 801b75c:	687b      	ldr	r3, [r7, #4]
 801b75e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801b762:	4619      	mov	r1, r3
 801b764:	4610      	mov	r0, r2
 801b766:	f7ff fd89 	bl	801b27c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithIcon1);
 801b76a:	687a      	ldr	r2, [r7, #4]
 801b76c:	687b      	ldr	r3, [r7, #4]
 801b76e:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 801b772:	4619      	mov	r1, r3
 801b774:	4610      	mov	r0, r2
 801b776:	f7ff fd81 	bl	801b27c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801b77a:	687b      	ldr	r3, [r7, #4]
 801b77c:	4618      	mov	r0, r3
 801b77e:	373c      	adds	r7, #60	; 0x3c
 801b780:	46bd      	mov	sp, r7
 801b782:	bd90      	pop	{r4, r7, pc}
 801b784:	08024f8c 	.word	0x08024f8c
 801b788:	0801b7a5 	.word	0x0801b7a5
 801b78c:	08023da4 	.word	0x08023da4

0801b790 <_ZN15Screen1ViewBase11setupScreenEv>:

void Screen1ViewBase::setupScreen()
{
 801b790:	b480      	push	{r7}
 801b792:	b083      	sub	sp, #12
 801b794:	af00      	add	r7, sp, #0
 801b796:	6078      	str	r0, [r7, #4]

}
 801b798:	bf00      	nop
 801b79a:	370c      	adds	r7, #12
 801b79c:	46bd      	mov	sp, r7
 801b79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b7a2:	4770      	bx	lr

0801b7a4 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen1ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 801b7a4:	b580      	push	{r7, lr}
 801b7a6:	b082      	sub	sp, #8
 801b7a8:	af00      	add	r7, sp, #0
 801b7aa:	6078      	str	r0, [r7, #4]
 801b7ac:	6039      	str	r1, [r7, #0]
    if (&src == &button3)
 801b7ae:	687b      	ldr	r3, [r7, #4]
 801b7b0:	3370      	adds	r3, #112	; 0x70
 801b7b2:	683a      	ldr	r2, [r7, #0]
 801b7b4:	429a      	cmp	r2, r3
 801b7b6:	d106      	bne.n	801b7c6 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x22>
    {
        //Interaction3
        //When button3 clicked call virtual function
        //Call button3click
        button3click();
 801b7b8:	687b      	ldr	r3, [r7, #4]
 801b7ba:	681b      	ldr	r3, [r3, #0]
 801b7bc:	332c      	adds	r3, #44	; 0x2c
 801b7be:	681b      	ldr	r3, [r3, #0]
 801b7c0:	6878      	ldr	r0, [r7, #4]
 801b7c2:	4798      	blx	r3
        //Interaction4
        //When buttonWithIcon1 clicked change screen to Screen2
        //Go to Screen2 with screen transition towards West
        application().gotoScreen2ScreenSlideTransitionWest();
    }
}
 801b7c4:	e00c      	b.n	801b7e0 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
    else if (&src == &buttonWithIcon1)
 801b7c6:	687b      	ldr	r3, [r7, #4]
 801b7c8:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 801b7cc:	683a      	ldr	r2, [r7, #0]
 801b7ce:	429a      	cmp	r2, r3
 801b7d0:	d106      	bne.n	801b7e0 <_ZN15Screen1ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
        application().gotoScreen2ScreenSlideTransitionWest();
 801b7d2:	6878      	ldr	r0, [r7, #4]
 801b7d4:	f7ff fe21 	bl	801b41a <_ZN15Screen1ViewBase11applicationEv>
 801b7d8:	4603      	mov	r3, r0
 801b7da:	4618      	mov	r0, r3
 801b7dc:	f7fe fec0 	bl	801a560 <_ZN23FrontendApplicationBase36gotoScreen2ScreenSlideTransitionWestEv>
}
 801b7e0:	bf00      	nop
 801b7e2:	3708      	adds	r7, #8
 801b7e4:	46bd      	mov	sp, r7
 801b7e6:	bd80      	pop	{r7, pc}

0801b7e8 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev>:
    View() : presenter(0)
 801b7e8:	b580      	push	{r7, lr}
 801b7ea:	b082      	sub	sp, #8
 801b7ec:	af00      	add	r7, sp, #0
 801b7ee:	6078      	str	r0, [r7, #4]
 801b7f0:	687b      	ldr	r3, [r7, #4]
 801b7f2:	4618      	mov	r0, r3
 801b7f4:	f003 fe8a 	bl	801f50c <_ZN8touchgfx6ScreenC1Ev>
 801b7f8:	4a05      	ldr	r2, [pc, #20]	; (801b810 <_ZN8touchgfx4ViewI16Screen1PresenterEC1Ev+0x28>)
 801b7fa:	687b      	ldr	r3, [r7, #4]
 801b7fc:	601a      	str	r2, [r3, #0]
 801b7fe:	687b      	ldr	r3, [r7, #4]
 801b800:	2200      	movs	r2, #0
 801b802:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	4618      	mov	r0, r3
 801b808:	3708      	adds	r7, #8
 801b80a:	46bd      	mov	sp, r7
 801b80c:	bd80      	pop	{r7, pc}
 801b80e:	bf00      	nop
 801b810:	08024fdc 	.word	0x08024fdc

0801b814 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 801b814:	b580      	push	{r7, lr}
 801b816:	b084      	sub	sp, #16
 801b818:	af00      	add	r7, sp, #0
 801b81a:	60f8      	str	r0, [r7, #12]
 801b81c:	60b9      	str	r1, [r7, #8]
 801b81e:	4639      	mov	r1, r7
 801b820:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 801b824:	68fb      	ldr	r3, [r7, #12]
 801b826:	4618      	mov	r0, r3
 801b828:	f7f3 fec8 	bl	800f5bc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 801b82c:	4a08      	ldr	r2, [pc, #32]	; (801b850 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 801b82e:	68fb      	ldr	r3, [r7, #12]
 801b830:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801b832:	68fb      	ldr	r3, [r7, #12]
 801b834:	68ba      	ldr	r2, [r7, #8]
 801b836:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 801b838:	68fb      	ldr	r3, [r7, #12]
 801b83a:	3308      	adds	r3, #8
 801b83c:	463a      	mov	r2, r7
 801b83e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801b842:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801b846:	68fb      	ldr	r3, [r7, #12]
 801b848:	4618      	mov	r0, r3
 801b84a:	3710      	adds	r7, #16
 801b84c:	46bd      	mov	sp, r7
 801b84e:	bd80      	pop	{r7, pc}
 801b850:	08024fc4 	.word	0x08024fc4

0801b854 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 801b854:	b580      	push	{r7, lr}
 801b856:	b082      	sub	sp, #8
 801b858:	af00      	add	r7, sp, #0
 801b85a:	6078      	str	r0, [r7, #4]
 801b85c:	4a05      	ldr	r2, [pc, #20]	; (801b874 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 801b85e:	687b      	ldr	r3, [r7, #4]
 801b860:	601a      	str	r2, [r3, #0]
 801b862:	687b      	ldr	r3, [r7, #4]
 801b864:	4618      	mov	r0, r3
 801b866:	f7f3 feb9 	bl	800f5dc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 801b86a:	687b      	ldr	r3, [r7, #4]
 801b86c:	4618      	mov	r0, r3
 801b86e:	3708      	adds	r7, #8
 801b870:	46bd      	mov	sp, r7
 801b872:	bd80      	pop	{r7, pc}
 801b874:	08024fc4 	.word	0x08024fc4

0801b878 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 801b878:	b580      	push	{r7, lr}
 801b87a:	b082      	sub	sp, #8
 801b87c:	af00      	add	r7, sp, #0
 801b87e:	6078      	str	r0, [r7, #4]
 801b880:	6878      	ldr	r0, [r7, #4]
 801b882:	f7ff ffe7 	bl	801b854 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801b886:	2110      	movs	r1, #16
 801b888:	6878      	ldr	r0, [r7, #4]
 801b88a:	f006 fdca 	bl	8022422 <_ZdlPvj>
 801b88e:	687b      	ldr	r3, [r7, #4]
 801b890:	4618      	mov	r0, r3
 801b892:	3708      	adds	r7, #8
 801b894:	46bd      	mov	sp, r7
 801b896:	bd80      	pop	{r7, pc}

0801b898 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 801b898:	b580      	push	{r7, lr}
 801b89a:	b082      	sub	sp, #8
 801b89c:	af00      	add	r7, sp, #0
 801b89e:	6078      	str	r0, [r7, #4]
 801b8a0:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801b8a2:	687b      	ldr	r3, [r7, #4]
 801b8a4:	685b      	ldr	r3, [r3, #4]
 801b8a6:	687a      	ldr	r2, [r7, #4]
 801b8a8:	68d2      	ldr	r2, [r2, #12]
 801b8aa:	1052      	asrs	r2, r2, #1
 801b8ac:	1898      	adds	r0, r3, r2
 801b8ae:	687b      	ldr	r3, [r7, #4]
 801b8b0:	68db      	ldr	r3, [r3, #12]
 801b8b2:	f003 0301 	and.w	r3, r3, #1
 801b8b6:	2b00      	cmp	r3, #0
 801b8b8:	d102      	bne.n	801b8c0 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 801b8ba:	687b      	ldr	r3, [r7, #4]
 801b8bc:	689b      	ldr	r3, [r3, #8]
 801b8be:	e00a      	b.n	801b8d6 <_ZN8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 801b8c0:	687b      	ldr	r3, [r7, #4]
 801b8c2:	685b      	ldr	r3, [r3, #4]
 801b8c4:	687a      	ldr	r2, [r7, #4]
 801b8c6:	68d2      	ldr	r2, [r2, #12]
 801b8c8:	1052      	asrs	r2, r2, #1
 801b8ca:	4413      	add	r3, r2
 801b8cc:	681b      	ldr	r3, [r3, #0]
 801b8ce:	687a      	ldr	r2, [r7, #4]
 801b8d0:	6892      	ldr	r2, [r2, #8]
 801b8d2:	4413      	add	r3, r2
 801b8d4:	681b      	ldr	r3, [r3, #0]
 801b8d6:	6839      	ldr	r1, [r7, #0]
 801b8d8:	4798      	blx	r3
    }
 801b8da:	bf00      	nop
 801b8dc:	3708      	adds	r7, #8
 801b8de:	46bd      	mov	sp, r7
 801b8e0:	bd80      	pop	{r7, pc}

0801b8e2 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 801b8e2:	b480      	push	{r7}
 801b8e4:	b083      	sub	sp, #12
 801b8e6:	af00      	add	r7, sp, #0
 801b8e8:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801b8ea:	687b      	ldr	r3, [r7, #4]
 801b8ec:	685b      	ldr	r3, [r3, #4]
 801b8ee:	2b00      	cmp	r3, #0
 801b8f0:	d010      	beq.n	801b914 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801b8f2:	687b      	ldr	r3, [r7, #4]
 801b8f4:	689b      	ldr	r3, [r3, #8]
 801b8f6:	2b00      	cmp	r3, #0
 801b8f8:	d107      	bne.n	801b90a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801b8fa:	687b      	ldr	r3, [r7, #4]
 801b8fc:	68db      	ldr	r3, [r3, #12]
 801b8fe:	f003 0301 	and.w	r3, r3, #1
 801b902:	2b00      	cmp	r3, #0
 801b904:	d101      	bne.n	801b90a <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801b906:	2301      	movs	r3, #1
 801b908:	e000      	b.n	801b90c <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 801b90a:	2300      	movs	r3, #0
 801b90c:	2b01      	cmp	r3, #1
 801b90e:	d001      	beq.n	801b914 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801b910:	2301      	movs	r3, #1
 801b912:	e000      	b.n	801b916 <_ZNK8touchgfx8CallbackI15Screen1ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 801b914:	2300      	movs	r3, #0
    }
 801b916:	4618      	mov	r0, r3
 801b918:	370c      	adds	r7, #12
 801b91a:	46bd      	mov	sp, r7
 801b91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b920:	4770      	bx	lr
	...

0801b924 <_ZN8touchgfx23AbstractButtonContainerC1Ev>:
    /**
     * @fn AbstractButtonContainer::AbstractButtonContainer()
     *
     * @brief Default constructor.
     */
    AbstractButtonContainer() : pressed(false), alpha(255), action(0)
 801b924:	b580      	push	{r7, lr}
 801b926:	b082      	sub	sp, #8
 801b928:	af00      	add	r7, sp, #0
 801b92a:	6078      	str	r0, [r7, #4]
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	4618      	mov	r0, r3
 801b930:	f7f3 fc10 	bl	800f154 <_ZN8touchgfx9ContainerC1Ev>
 801b934:	4a0b      	ldr	r2, [pc, #44]	; (801b964 <_ZN8touchgfx23AbstractButtonContainerC1Ev+0x40>)
 801b936:	687b      	ldr	r3, [r7, #4]
 801b938:	601a      	str	r2, [r3, #0]
 801b93a:	687b      	ldr	r3, [r7, #4]
 801b93c:	2200      	movs	r2, #0
 801b93e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 801b942:	687b      	ldr	r3, [r7, #4]
 801b944:	22ff      	movs	r2, #255	; 0xff
 801b946:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	2200      	movs	r2, #0
 801b94e:	631a      	str	r2, [r3, #48]	; 0x30
    {
        setTouchable(true);
 801b950:	687b      	ldr	r3, [r7, #4]
 801b952:	2101      	movs	r1, #1
 801b954:	4618      	mov	r0, r3
 801b956:	f7f3 fbc3 	bl	800f0e0 <_ZN8touchgfx8Drawable12setTouchableEb>
    }
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	4618      	mov	r0, r3
 801b95e:	3708      	adds	r7, #8
 801b960:	46bd      	mov	sp, r7
 801b962:	bd80      	pop	{r7, pc}
 801b964:	08025294 	.word	0x08025294

0801b968 <_ZN8touchgfx23AbstractButtonContainerD1Ev>:
    /**
     * @fn virtual AbstractButtonContainer::~AbstractButtonContainer()
     *
     * @brief Destructor.
     */
    virtual ~AbstractButtonContainer() {}
 801b968:	b580      	push	{r7, lr}
 801b96a:	b082      	sub	sp, #8
 801b96c:	af00      	add	r7, sp, #0
 801b96e:	6078      	str	r0, [r7, #4]
 801b970:	4a05      	ldr	r2, [pc, #20]	; (801b988 <_ZN8touchgfx23AbstractButtonContainerD1Ev+0x20>)
 801b972:	687b      	ldr	r3, [r7, #4]
 801b974:	601a      	str	r2, [r3, #0]
 801b976:	687b      	ldr	r3, [r7, #4]
 801b978:	4618      	mov	r0, r3
 801b97a:	f7f3 f821 	bl	800e9c0 <_ZN8touchgfx9ContainerD1Ev>
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	4618      	mov	r0, r3
 801b982:	3708      	adds	r7, #8
 801b984:	46bd      	mov	sp, r7
 801b986:	bd80      	pop	{r7, pc}
 801b988:	08025294 	.word	0x08025294

0801b98c <_ZN8touchgfx23AbstractButtonContainerD0Ev>:
 801b98c:	b580      	push	{r7, lr}
 801b98e:	b082      	sub	sp, #8
 801b990:	af00      	add	r7, sp, #0
 801b992:	6078      	str	r0, [r7, #4]
 801b994:	6878      	ldr	r0, [r7, #4]
 801b996:	f7ff ffe7 	bl	801b968 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 801b99a:	2134      	movs	r1, #52	; 0x34
 801b99c:	6878      	ldr	r0, [r7, #4]
 801b99e:	f006 fd40 	bl	8022422 <_ZdlPvj>
 801b9a2:	687b      	ldr	r3, [r7, #4]
 801b9a4:	4618      	mov	r0, r3
 801b9a6:	3708      	adds	r7, #8
 801b9a8:	46bd      	mov	sp, r7
 801b9aa:	bd80      	pop	{r7, pc}

0801b9ac <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>:
     *
     * @brief Sets the pressed state.
     *
     * @param isPressed True if is pressed, false if not.
     */
    void setPressed(bool isPressed)
 801b9ac:	b580      	push	{r7, lr}
 801b9ae:	b082      	sub	sp, #8
 801b9b0:	af00      	add	r7, sp, #0
 801b9b2:	6078      	str	r0, [r7, #4]
 801b9b4:	460b      	mov	r3, r1
 801b9b6:	70fb      	strb	r3, [r7, #3]
    {
        pressed = isPressed;
 801b9b8:	687b      	ldr	r3, [r7, #4]
 801b9ba:	78fa      	ldrb	r2, [r7, #3]
 801b9bc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
        handlePressedUpdated();
 801b9c0:	687b      	ldr	r3, [r7, #4]
 801b9c2:	681b      	ldr	r3, [r3, #0]
 801b9c4:	3388      	adds	r3, #136	; 0x88
 801b9c6:	681b      	ldr	r3, [r3, #0]
 801b9c8:	6878      	ldr	r0, [r7, #4]
 801b9ca:	4798      	blx	r3
    }
 801b9cc:	bf00      	nop
 801b9ce:	3708      	adds	r7, #8
 801b9d0:	46bd      	mov	sp, r7
 801b9d2:	bd80      	pop	{r7, pc}

0801b9d4 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>:
     *
     * @brief Gets the pressed state.
     *
     * @return True if it succeeds, false if it fails.
     */
    bool getPressed()
 801b9d4:	b480      	push	{r7}
 801b9d6:	b083      	sub	sp, #12
 801b9d8:	af00      	add	r7, sp, #0
 801b9da:	6078      	str	r0, [r7, #4]
    {
        return pressed;
 801b9dc:	687b      	ldr	r3, [r7, #4]
 801b9de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
    }
 801b9e2:	4618      	mov	r0, r3
 801b9e4:	370c      	adds	r7, #12
 801b9e6:	46bd      	mov	sp, r7
 801b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b9ec:	4770      	bx	lr

0801b9ee <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>:
     *
     * @brief Gets the alpha.
     *
     * @return The alpha value.
     */
    uint8_t getAlpha() const
 801b9ee:	b480      	push	{r7}
 801b9f0:	b083      	sub	sp, #12
 801b9f2:	af00      	add	r7, sp, #0
 801b9f4:	6078      	str	r0, [r7, #4]
    {
        return alpha;
 801b9f6:	687b      	ldr	r3, [r7, #4]
 801b9f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
    }
 801b9fc:	4618      	mov	r0, r3
 801b9fe:	370c      	adds	r7, #12
 801ba00:	46bd      	mov	sp, r7
 801ba02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba06:	4770      	bx	lr

0801ba08 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>:
     *
     * @brief Sets an action callback.
     *
     * @param callback The callback.
     */
    void setAction(GenericCallback< const AbstractButtonContainer& >& callback)
 801ba08:	b480      	push	{r7}
 801ba0a:	b083      	sub	sp, #12
 801ba0c:	af00      	add	r7, sp, #0
 801ba0e:	6078      	str	r0, [r7, #4]
 801ba10:	6039      	str	r1, [r7, #0]
    {
        action = &callback;
 801ba12:	687b      	ldr	r3, [r7, #4]
 801ba14:	683a      	ldr	r2, [r7, #0]
 801ba16:	631a      	str	r2, [r3, #48]	; 0x30
    }
 801ba18:	bf00      	nop
 801ba1a:	370c      	adds	r7, #12
 801ba1c:	46bd      	mov	sp, r7
 801ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba22:	4770      	bx	lr

0801ba24 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>:
    /**
     * @fn virtual void AbstractButtonContainer::handlePressedUpdated()
     *
     * @brief Handles the pressed updated.
     */
    virtual void handlePressedUpdated() {};
 801ba24:	b480      	push	{r7}
 801ba26:	b083      	sub	sp, #12
 801ba28:	af00      	add	r7, sp, #0
 801ba2a:	6078      	str	r0, [r7, #4]
 801ba2c:	bf00      	nop
 801ba2e:	370c      	adds	r7, #12
 801ba30:	46bd      	mov	sp, r7
 801ba32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba36:	4770      	bx	lr

0801ba38 <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>:
    /**
     * @fn virtual void AbstractButtonContainer::handleAlphaUpdated()
     *
     * @brief Handles the alpha updated.
     */
    virtual void handleAlphaUpdated() {};
 801ba38:	b480      	push	{r7}
 801ba3a:	b083      	sub	sp, #12
 801ba3c:	af00      	add	r7, sp, #0
 801ba3e:	6078      	str	r0, [r7, #4]
 801ba40:	bf00      	nop
 801ba42:	370c      	adds	r7, #12
 801ba44:	46bd      	mov	sp, r7
 801ba46:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba4a:	4770      	bx	lr

0801ba4c <_ZN8touchgfx18ClickButtonTriggerC1Ev>:
    /**
     * @fn ClickButtonTrigger::ClickButtonTrigger()
     *
     * @brief Default constructor.
     */
    ClickButtonTrigger() :
 801ba4c:	b580      	push	{r7, lr}
 801ba4e:	b082      	sub	sp, #8
 801ba50:	af00      	add	r7, sp, #0
 801ba52:	6078      	str	r0, [r7, #4]
        AbstractButtonContainer() { }
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	4618      	mov	r0, r3
 801ba58:	f7ff ff64 	bl	801b924 <_ZN8touchgfx23AbstractButtonContainerC1Ev>
 801ba5c:	4a03      	ldr	r2, [pc, #12]	; (801ba6c <_ZN8touchgfx18ClickButtonTriggerC1Ev+0x20>)
 801ba5e:	687b      	ldr	r3, [r7, #4]
 801ba60:	601a      	str	r2, [r3, #0]
 801ba62:	687b      	ldr	r3, [r7, #4]
 801ba64:	4618      	mov	r0, r3
 801ba66:	3708      	adds	r7, #8
 801ba68:	46bd      	mov	sp, r7
 801ba6a:	bd80      	pop	{r7, pc}
 801ba6c:	080251e4 	.word	0x080251e4

0801ba70 <_ZN8touchgfx18ClickButtonTriggerD1Ev>:
    /**
     * @fn virtual ClickButtonTrigger::~ClickButtonTrigger()
     *
     * @brief Destructor.
     */
    virtual ~ClickButtonTrigger() { }
 801ba70:	b580      	push	{r7, lr}
 801ba72:	b082      	sub	sp, #8
 801ba74:	af00      	add	r7, sp, #0
 801ba76:	6078      	str	r0, [r7, #4]
 801ba78:	4a05      	ldr	r2, [pc, #20]	; (801ba90 <_ZN8touchgfx18ClickButtonTriggerD1Ev+0x20>)
 801ba7a:	687b      	ldr	r3, [r7, #4]
 801ba7c:	601a      	str	r2, [r3, #0]
 801ba7e:	687b      	ldr	r3, [r7, #4]
 801ba80:	4618      	mov	r0, r3
 801ba82:	f7ff ff71 	bl	801b968 <_ZN8touchgfx23AbstractButtonContainerD1Ev>
 801ba86:	687b      	ldr	r3, [r7, #4]
 801ba88:	4618      	mov	r0, r3
 801ba8a:	3708      	adds	r7, #8
 801ba8c:	46bd      	mov	sp, r7
 801ba8e:	bd80      	pop	{r7, pc}
 801ba90:	080251e4 	.word	0x080251e4

0801ba94 <_ZN8touchgfx18ClickButtonTriggerD0Ev>:
 801ba94:	b580      	push	{r7, lr}
 801ba96:	b082      	sub	sp, #8
 801ba98:	af00      	add	r7, sp, #0
 801ba9a:	6078      	str	r0, [r7, #4]
 801ba9c:	6878      	ldr	r0, [r7, #4]
 801ba9e:	f7ff ffe7 	bl	801ba70 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 801baa2:	2134      	movs	r1, #52	; 0x34
 801baa4:	6878      	ldr	r0, [r7, #4]
 801baa6:	f006 fcbc 	bl	8022422 <_ZdlPvj>
 801baaa:	687b      	ldr	r3, [r7, #4]
 801baac:	4618      	mov	r0, r3
 801baae:	3708      	adds	r7, #8
 801bab0:	46bd      	mov	sp, r7
 801bab2:	bd80      	pop	{r7, pc}

0801bab4 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *        callback is called when receiving a REALEASED event in
     *        PRESSED state.
     *
     * @param event The event.
     */
    virtual void handleClickEvent(const ClickEvent& event)
 801bab4:	b580      	push	{r7, lr}
 801bab6:	b084      	sub	sp, #16
 801bab8:	af00      	add	r7, sp, #0
 801baba:	6078      	str	r0, [r7, #4]
 801babc:	6039      	str	r1, [r7, #0]
    {
        bool wasPressed = getPressed();
 801babe:	687b      	ldr	r3, [r7, #4]
 801bac0:	4618      	mov	r0, r3
 801bac2:	f7ff ff87 	bl	801b9d4 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 801bac6:	4603      	mov	r3, r0
 801bac8:	73fb      	strb	r3, [r7, #15]
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 801baca:	6838      	ldr	r0, [r7, #0]
 801bacc:	f7f3 fc90 	bl	800f3f0 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 801bad0:	4603      	mov	r3, r0
 801bad2:	2b00      	cmp	r3, #0
 801bad4:	bf0c      	ite	eq
 801bad6:	2301      	moveq	r3, #1
 801bad8:	2300      	movne	r3, #0
 801bada:	73bb      	strb	r3, [r7, #14]
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 801badc:	7bbb      	ldrb	r3, [r7, #14]
 801bade:	2b00      	cmp	r3, #0
 801bae0:	d005      	beq.n	801baee <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x3a>
 801bae2:	7bfb      	ldrb	r3, [r7, #15]
 801bae4:	f083 0301 	eor.w	r3, r3, #1
 801bae8:	b2db      	uxtb	r3, r3
 801baea:	2b00      	cmp	r3, #0
 801baec:	d108      	bne.n	801bb00 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x4c>
 801baee:	7bbb      	ldrb	r3, [r7, #14]
 801baf0:	f083 0301 	eor.w	r3, r3, #1
 801baf4:	b2db      	uxtb	r3, r3
 801baf6:	2b00      	cmp	r3, #0
 801baf8:	d00f      	beq.n	801bb1a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
 801bafa:	7bfb      	ldrb	r3, [r7, #15]
 801bafc:	2b00      	cmp	r3, #0
 801bafe:	d00c      	beq.n	801bb1a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x66>
        {
            setPressed(newPressedValue);
 801bb00:	687b      	ldr	r3, [r7, #4]
 801bb02:	7bba      	ldrb	r2, [r7, #14]
 801bb04:	4611      	mov	r1, r2
 801bb06:	4618      	mov	r0, r3
 801bb08:	f7ff ff50 	bl	801b9ac <_ZN8touchgfx23AbstractButtonContainer10setPressedEb>
            invalidate();
 801bb0c:	687a      	ldr	r2, [r7, #4]
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	681b      	ldr	r3, [r3, #0]
 801bb12:	3314      	adds	r3, #20
 801bb14:	681b      	ldr	r3, [r3, #0]
 801bb16:	4610      	mov	r0, r2
 801bb18:	4798      	blx	r3
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED) && action)
 801bb1a:	7bfb      	ldrb	r3, [r7, #15]
 801bb1c:	2b00      	cmp	r3, #0
 801bb1e:	d00b      	beq.n	801bb38 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 801bb20:	6838      	ldr	r0, [r7, #0]
 801bb22:	f7f3 fc65 	bl	800f3f0 <_ZNK8touchgfx10ClickEvent7getTypeEv>
 801bb26:	4603      	mov	r3, r0
 801bb28:	2b01      	cmp	r3, #1
 801bb2a:	d105      	bne.n	801bb38 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 801bb2c:	687b      	ldr	r3, [r7, #4]
 801bb2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb30:	2b00      	cmp	r3, #0
 801bb32:	d001      	beq.n	801bb38 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x84>
 801bb34:	2301      	movs	r3, #1
 801bb36:	e000      	b.n	801bb3a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x86>
 801bb38:	2300      	movs	r3, #0
 801bb3a:	2b00      	cmp	r3, #0
 801bb3c:	d015      	beq.n	801bb6a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb6>
        {
            if (action->isValid())
 801bb3e:	687b      	ldr	r3, [r7, #4]
 801bb40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801bb42:	687b      	ldr	r3, [r7, #4]
 801bb44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb46:	681b      	ldr	r3, [r3, #0]
 801bb48:	330c      	adds	r3, #12
 801bb4a:	681b      	ldr	r3, [r3, #0]
 801bb4c:	4610      	mov	r0, r2
 801bb4e:	4798      	blx	r3
 801bb50:	4603      	mov	r3, r0
 801bb52:	2b00      	cmp	r3, #0
 801bb54:	d009      	beq.n	801bb6a <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0xb6>
            {
                action->execute(*this);
 801bb56:	687b      	ldr	r3, [r7, #4]
 801bb58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801bb5a:	687b      	ldr	r3, [r7, #4]
 801bb5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801bb5e:	681b      	ldr	r3, [r3, #0]
 801bb60:	3308      	adds	r3, #8
 801bb62:	681b      	ldr	r3, [r3, #0]
 801bb64:	6879      	ldr	r1, [r7, #4]
 801bb66:	4610      	mov	r0, r2
 801bb68:	4798      	blx	r3
            }
        }
    }
 801bb6a:	bf00      	nop
 801bb6c:	3710      	adds	r7, #16
 801bb6e:	46bd      	mov	sp, r7
 801bb70:	bd80      	pop	{r7, pc}
	...

0801bb74 <_ZN8touchgfx13BoxWithBorderC1Ev>:
    BoxWithBorder() : Widget(), alpha(255), color(0), borderColor(0), borderSize(0)
 801bb74:	b580      	push	{r7, lr}
 801bb76:	b082      	sub	sp, #8
 801bb78:	af00      	add	r7, sp, #0
 801bb7a:	6078      	str	r0, [r7, #4]
 801bb7c:	687b      	ldr	r3, [r7, #4]
 801bb7e:	4618      	mov	r0, r3
 801bb80:	f7f3 fafe 	bl	800f180 <_ZN8touchgfx6WidgetC1Ev>
 801bb84:	4a0d      	ldr	r2, [pc, #52]	; (801bbbc <_ZN8touchgfx13BoxWithBorderC1Ev+0x48>)
 801bb86:	687b      	ldr	r3, [r7, #4]
 801bb88:	601a      	str	r2, [r3, #0]
 801bb8a:	687b      	ldr	r3, [r7, #4]
 801bb8c:	22ff      	movs	r2, #255	; 0xff
 801bb8e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
 801bb92:	687b      	ldr	r3, [r7, #4]
 801bb94:	3328      	adds	r3, #40	; 0x28
 801bb96:	2100      	movs	r1, #0
 801bb98:	4618      	mov	r0, r3
 801bb9a:	f7f3 fa3d 	bl	800f018 <_ZN8touchgfx9colortypeC1Em>
 801bb9e:	687b      	ldr	r3, [r7, #4]
 801bba0:	332c      	adds	r3, #44	; 0x2c
 801bba2:	2100      	movs	r1, #0
 801bba4:	4618      	mov	r0, r3
 801bba6:	f7f3 fa37 	bl	800f018 <_ZN8touchgfx9colortypeC1Em>
 801bbaa:	687b      	ldr	r3, [r7, #4]
 801bbac:	2200      	movs	r2, #0
 801bbae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }
 801bbb2:	687b      	ldr	r3, [r7, #4]
 801bbb4:	4618      	mov	r0, r3
 801bbb6:	3708      	adds	r7, #8
 801bbb8:	46bd      	mov	sp, r7
 801bbba:	bd80      	pop	{r7, pc}
 801bbbc:	0802430c 	.word	0x0802430c

0801bbc0 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>:
    void setColor(colortype color)
 801bbc0:	b480      	push	{r7}
 801bbc2:	b083      	sub	sp, #12
 801bbc4:	af00      	add	r7, sp, #0
 801bbc6:	6078      	str	r0, [r7, #4]
 801bbc8:	6039      	str	r1, [r7, #0]
        this->color = color;
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	683a      	ldr	r2, [r7, #0]
 801bbce:	629a      	str	r2, [r3, #40]	; 0x28
    }
 801bbd0:	bf00      	nop
 801bbd2:	370c      	adds	r7, #12
 801bbd4:	46bd      	mov	sp, r7
 801bbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbda:	4770      	bx	lr

0801bbdc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>:
    void setBorderColor(colortype color)
 801bbdc:	b480      	push	{r7}
 801bbde:	b083      	sub	sp, #12
 801bbe0:	af00      	add	r7, sp, #0
 801bbe2:	6078      	str	r0, [r7, #4]
 801bbe4:	6039      	str	r1, [r7, #0]
        this->borderColor = color;
 801bbe6:	687b      	ldr	r3, [r7, #4]
 801bbe8:	683a      	ldr	r2, [r7, #0]
 801bbea:	62da      	str	r2, [r3, #44]	; 0x2c
    }
 801bbec:	bf00      	nop
 801bbee:	370c      	adds	r7, #12
 801bbf0:	46bd      	mov	sp, r7
 801bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbf6:	4770      	bx	lr

0801bbf8 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>:
    void setBorderSize(uint8_t size)
 801bbf8:	b480      	push	{r7}
 801bbfa:	b083      	sub	sp, #12
 801bbfc:	af00      	add	r7, sp, #0
 801bbfe:	6078      	str	r0, [r7, #4]
 801bc00:	460b      	mov	r3, r1
 801bc02:	70fb      	strb	r3, [r7, #3]
        borderSize = size;
 801bc04:	687b      	ldr	r3, [r7, #4]
 801bc06:	78fa      	ldrb	r2, [r7, #3]
 801bc08:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    }
 801bc0c:	bf00      	nop
 801bc0e:	370c      	adds	r7, #12
 801bc10:	46bd      	mov	sp, r7
 801bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc16:	4770      	bx	lr

0801bc18 <_ZN8touchgfx13BoxWithBorder8setAlphaEh>:
    void setAlpha(uint8_t alpha)
 801bc18:	b480      	push	{r7}
 801bc1a:	b083      	sub	sp, #12
 801bc1c:	af00      	add	r7, sp, #0
 801bc1e:	6078      	str	r0, [r7, #4]
 801bc20:	460b      	mov	r3, r1
 801bc22:	70fb      	strb	r3, [r7, #3]
        this->alpha = alpha;
 801bc24:	687b      	ldr	r3, [r7, #4]
 801bc26:	78fa      	ldrb	r2, [r7, #3]
 801bc28:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    }
 801bc2c:	bf00      	nop
 801bc2e:	370c      	adds	r7, #12
 801bc30:	46bd      	mov	sp, r7
 801bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc36:	4770      	bx	lr

0801bc38 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>:
    void setLabelText(TypedText t)
 801bc38:	b580      	push	{r7, lr}
 801bc3a:	b082      	sub	sp, #8
 801bc3c:	af00      	add	r7, sp, #0
 801bc3e:	6078      	str	r0, [r7, #4]
 801bc40:	8039      	strh	r1, [r7, #0]
        typedText = t;
 801bc42:	687b      	ldr	r3, [r7, #4]
 801bc44:	883a      	ldrh	r2, [r7, #0]
 801bc46:	869a      	strh	r2, [r3, #52]	; 0x34
        updateTextPosition();
 801bc48:	6878      	ldr	r0, [r7, #4]
 801bc4a:	f000 f834 	bl	801bcb6 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
    }
 801bc4e:	bf00      	nop
 801bc50:	3708      	adds	r7, #8
 801bc52:	46bd      	mov	sp, r7
 801bc54:	bd80      	pop	{r7, pc}

0801bc56 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>:
    void setLabelColor(colortype col, bool performInvalidate = false)
 801bc56:	b580      	push	{r7, lr}
 801bc58:	b084      	sub	sp, #16
 801bc5a:	af00      	add	r7, sp, #0
 801bc5c:	60f8      	str	r0, [r7, #12]
 801bc5e:	60b9      	str	r1, [r7, #8]
 801bc60:	4613      	mov	r3, r2
 801bc62:	71fb      	strb	r3, [r7, #7]
        color = col;
 801bc64:	68fb      	ldr	r3, [r7, #12]
 801bc66:	68ba      	ldr	r2, [r7, #8]
 801bc68:	639a      	str	r2, [r3, #56]	; 0x38
        if (performInvalidate)
 801bc6a:	79fb      	ldrb	r3, [r7, #7]
 801bc6c:	2b00      	cmp	r3, #0
 801bc6e:	d006      	beq.n	801bc7e <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb+0x28>
            invalidate();
 801bc70:	68fa      	ldr	r2, [r7, #12]
 801bc72:	68fb      	ldr	r3, [r7, #12]
 801bc74:	681b      	ldr	r3, [r3, #0]
 801bc76:	3314      	adds	r3, #20
 801bc78:	681b      	ldr	r3, [r3, #0]
 801bc7a:	4610      	mov	r0, r2
 801bc7c:	4798      	blx	r3
    }
 801bc7e:	bf00      	nop
 801bc80:	3710      	adds	r7, #16
 801bc82:	46bd      	mov	sp, r7
 801bc84:	bd80      	pop	{r7, pc}

0801bc86 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>:
    void setLabelColorPressed(colortype col, bool performInvalidate = false)
 801bc86:	b580      	push	{r7, lr}
 801bc88:	b084      	sub	sp, #16
 801bc8a:	af00      	add	r7, sp, #0
 801bc8c:	60f8      	str	r0, [r7, #12]
 801bc8e:	60b9      	str	r1, [r7, #8]
 801bc90:	4613      	mov	r3, r2
 801bc92:	71fb      	strb	r3, [r7, #7]
        colorPressed = col;
 801bc94:	68fb      	ldr	r3, [r7, #12]
 801bc96:	68ba      	ldr	r2, [r7, #8]
 801bc98:	63da      	str	r2, [r3, #60]	; 0x3c
        if (performInvalidate)
 801bc9a:	79fb      	ldrb	r3, [r7, #7]
 801bc9c:	2b00      	cmp	r3, #0
 801bc9e:	d006      	beq.n	801bcae <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb+0x28>
            invalidate();
 801bca0:	68fa      	ldr	r2, [r7, #12]
 801bca2:	68fb      	ldr	r3, [r7, #12]
 801bca4:	681b      	ldr	r3, [r3, #0]
 801bca6:	3314      	adds	r3, #20
 801bca8:	681b      	ldr	r3, [r3, #0]
 801bcaa:	4610      	mov	r0, r2
 801bcac:	4798      	blx	r3
    }
 801bcae:	bf00      	nop
 801bcb0:	3710      	adds	r7, #16
 801bcb2:	46bd      	mov	sp, r7
 801bcb4:	bd80      	pop	{r7, pc}

0801bcb6 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
    void updateTextPosition()
 801bcb6:	b590      	push	{r4, r7, lr}
 801bcb8:	b085      	sub	sp, #20
 801bcba:	af00      	add	r7, sp, #0
 801bcbc:	6078      	str	r0, [r7, #4]
        const Font* f = typedText.getFont();
 801bcbe:	687b      	ldr	r3, [r7, #4]
 801bcc0:	3334      	adds	r3, #52	; 0x34
 801bcc2:	4618      	mov	r0, r3
 801bcc4:	f7f3 fd6e 	bl	800f7a4 <_ZNK8touchgfx9TypedText7getFontEv>
 801bcc8:	60f8      	str	r0, [r7, #12]
        const Unicode::UnicodeChar* s = typedText.getText();
 801bcca:	687b      	ldr	r3, [r7, #4]
 801bccc:	3334      	adds	r3, #52	; 0x34
 801bcce:	4618      	mov	r0, r3
 801bcd0:	f7f3 fd52 	bl	800f778 <_ZNK8touchgfx9TypedText7getTextEv>
 801bcd4:	60b8      	str	r0, [r7, #8]
        textHeightIncludingSpacing = f->getMaxTextHeight(s) * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 801bcd6:	68fb      	ldr	r3, [r7, #12]
 801bcd8:	681b      	ldr	r3, [r3, #0]
 801bcda:	3328      	adds	r3, #40	; 0x28
 801bcdc:	681b      	ldr	r3, [r3, #0]
 801bcde:	68b9      	ldr	r1, [r7, #8]
 801bce0:	68f8      	ldr	r0, [r7, #12]
 801bce2:	4798      	blx	r3
 801bce4:	4603      	mov	r3, r0
 801bce6:	b2dc      	uxtb	r4, r3
 801bce8:	68fb      	ldr	r3, [r7, #12]
 801bcea:	681b      	ldr	r3, [r3, #0]
 801bcec:	333c      	adds	r3, #60	; 0x3c
 801bcee:	681b      	ldr	r3, [r3, #0]
 801bcf0:	68b9      	ldr	r1, [r7, #8]
 801bcf2:	68f8      	ldr	r0, [r7, #12]
 801bcf4:	4798      	blx	r3
 801bcf6:	4603      	mov	r3, r0
 801bcf8:	b2db      	uxtb	r3, r3
 801bcfa:	fb14 f303 	smulbb	r3, r4, r3
 801bcfe:	b2dc      	uxtb	r4, r3
 801bd00:	68fb      	ldr	r3, [r7, #12]
 801bd02:	681b      	ldr	r3, [r3, #0]
 801bd04:	3324      	adds	r3, #36	; 0x24
 801bd06:	681b      	ldr	r3, [r3, #0]
 801bd08:	68b9      	ldr	r1, [r7, #8]
 801bd0a:	68f8      	ldr	r0, [r7, #12]
 801bd0c:	4798      	blx	r3
 801bd0e:	4603      	mov	r3, r0
 801bd10:	4423      	add	r3, r4
 801bd12:	b2da      	uxtb	r2, r3
 801bd14:	687b      	ldr	r3, [r7, #4]
 801bd16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
 801bd1a:	bf00      	nop
 801bd1c:	3714      	adds	r7, #20
 801bd1e:	46bd      	mov	sp, r7
 801bd20:	bd90      	pop	{r4, r7, pc}
	...

0801bd24 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>:
class View : public Screen
 801bd24:	b580      	push	{r7, lr}
 801bd26:	b082      	sub	sp, #8
 801bd28:	af00      	add	r7, sp, #0
 801bd2a:	6078      	str	r0, [r7, #4]
 801bd2c:	4a05      	ldr	r2, [pc, #20]	; (801bd44 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev+0x20>)
 801bd2e:	687b      	ldr	r3, [r7, #4]
 801bd30:	601a      	str	r2, [r3, #0]
 801bd32:	687b      	ldr	r3, [r7, #4]
 801bd34:	4618      	mov	r0, r3
 801bd36:	f7ff fa49 	bl	801b1cc <_ZN8touchgfx6ScreenD1Ev>
 801bd3a:	687b      	ldr	r3, [r7, #4]
 801bd3c:	4618      	mov	r0, r3
 801bd3e:	3708      	adds	r7, #8
 801bd40:	46bd      	mov	sp, r7
 801bd42:	bd80      	pop	{r7, pc}
 801bd44:	080251b0 	.word	0x080251b0

0801bd48 <_ZN8touchgfx4ViewI16Screen2PresenterED0Ev>:
 801bd48:	b580      	push	{r7, lr}
 801bd4a:	b082      	sub	sp, #8
 801bd4c:	af00      	add	r7, sp, #0
 801bd4e:	6078      	str	r0, [r7, #4]
 801bd50:	6878      	ldr	r0, [r7, #4]
 801bd52:	f7ff ffe7 	bl	801bd24 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 801bd56:	2140      	movs	r1, #64	; 0x40
 801bd58:	6878      	ldr	r0, [r7, #4]
 801bd5a:	f006 fb62 	bl	8022422 <_ZdlPvj>
 801bd5e:	687b      	ldr	r3, [r7, #4]
 801bd60:	4618      	mov	r0, r3
 801bd62:	3708      	adds	r7, #8
 801bd64:	46bd      	mov	sp, r7
 801bd66:	bd80      	pop	{r7, pc}

0801bd68 <_ZN15Screen2ViewBaseD1Ev>:

class Screen2ViewBase : public touchgfx::View<Screen2Presenter>
{
public:
    Screen2ViewBase();
    virtual ~Screen2ViewBase() {}
 801bd68:	b580      	push	{r7, lr}
 801bd6a:	b082      	sub	sp, #8
 801bd6c:	af00      	add	r7, sp, #0
 801bd6e:	6078      	str	r0, [r7, #4]
 801bd70:	4a19      	ldr	r2, [pc, #100]	; (801bdd8 <_ZN15Screen2ViewBaseD1Ev+0x70>)
 801bd72:	687b      	ldr	r3, [r7, #4]
 801bd74:	601a      	str	r2, [r3, #0]
 801bd76:	687b      	ldr	r3, [r7, #4]
 801bd78:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801bd7c:	4618      	mov	r0, r3
 801bd7e:	f000 fcc9 	bl	801c714 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 801bd82:	687b      	ldr	r3, [r7, #4]
 801bd84:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 801bd88:	4618      	mov	r0, r3
 801bd8a:	f000 fce5 	bl	801c758 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801bd8e:	687b      	ldr	r3, [r7, #4]
 801bd90:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801bd94:	4618      	mov	r0, r3
 801bd96:	f7f4 fd05 	bl	80107a4 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 801bd9a:	687b      	ldr	r3, [r7, #4]
 801bd9c:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 801bda0:	4618      	mov	r0, r3
 801bda2:	f7f4 fcff 	bl	80107a4 <_ZN8touchgfx15ButtonWithLabelD1Ev>
 801bda6:	687b      	ldr	r3, [r7, #4]
 801bda8:	33a4      	adds	r3, #164	; 0xa4
 801bdaa:	4618      	mov	r0, r3
 801bdac:	f000 fa44 	bl	801c238 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 801bdb0:	687b      	ldr	r3, [r7, #4]
 801bdb2:	3370      	adds	r3, #112	; 0x70
 801bdb4:	4618      	mov	r0, r3
 801bdb6:	f7f3 fe19 	bl	800f9ec <_ZN8touchgfx8TextAreaD1Ev>
 801bdba:	687b      	ldr	r3, [r7, #4]
 801bdbc:	3340      	adds	r3, #64	; 0x40
 801bdbe:	4618      	mov	r0, r3
 801bdc0:	f7f3 fa60 	bl	800f284 <_ZN8touchgfx3BoxD1Ev>
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	4618      	mov	r0, r3
 801bdc8:	f7ff ffac 	bl	801bd24 <_ZN8touchgfx4ViewI16Screen2PresenterED1Ev>
 801bdcc:	687b      	ldr	r3, [r7, #4]
 801bdce:	4618      	mov	r0, r3
 801bdd0:	3708      	adds	r7, #8
 801bdd2:	46bd      	mov	sp, r7
 801bdd4:	bd80      	pop	{r7, pc}
 801bdd6:	bf00      	nop
 801bdd8:	08025010 	.word	0x08025010

0801bddc <_ZN15Screen2ViewBaseD0Ev>:
 801bddc:	b580      	push	{r7, lr}
 801bdde:	b082      	sub	sp, #8
 801bde0:	af00      	add	r7, sp, #0
 801bde2:	6078      	str	r0, [r7, #4]
 801bde4:	6878      	ldr	r0, [r7, #4]
 801bde6:	f7ff ffbf 	bl	801bd68 <_ZN15Screen2ViewBaseD1Ev>
 801bdea:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801bdee:	6878      	ldr	r0, [r7, #4]
 801bdf0:	f006 fb17 	bl	8022422 <_ZdlPvj>
 801bdf4:	687b      	ldr	r3, [r7, #4]
 801bdf6:	4618      	mov	r0, r3
 801bdf8:	3708      	adds	r7, #8
 801bdfa:	46bd      	mov	sp, r7
 801bdfc:	bd80      	pop	{r7, pc}

0801bdfe <_ZN15Screen2ViewBase17uart_init_clickedEv>:
    virtual void setupScreen();

    /*
     * Custom Action Handlers
     */
    virtual void uart_init_clicked()
 801bdfe:	b480      	push	{r7}
 801be00:	b083      	sub	sp, #12
 801be02:	af00      	add	r7, sp, #0
 801be04:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen2View
    }
 801be06:	bf00      	nop
 801be08:	370c      	adds	r7, #12
 801be0a:	46bd      	mov	sp, r7
 801be0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be10:	4770      	bx	lr

0801be12 <_ZN15Screen2ViewBase17uart_send_clickedEv>:

    virtual void uart_send_clicked()
 801be12:	b480      	push	{r7}
 801be14:	b083      	sub	sp, #12
 801be16:	af00      	add	r7, sp, #0
 801be18:	6078      	str	r0, [r7, #4]
    {
        // Override and implement this function in Screen2View
    }
 801be1a:	bf00      	nop
 801be1c:	370c      	adds	r7, #12
 801be1e:	46bd      	mov	sp, r7
 801be20:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be24:	4770      	bx	lr

0801be26 <_ZN15Screen2ViewBase11applicationEv>:

protected:
    FrontendApplication& application() {
 801be26:	b580      	push	{r7, lr}
 801be28:	b082      	sub	sp, #8
 801be2a:	af00      	add	r7, sp, #0
 801be2c:	6078      	str	r0, [r7, #4]
        return *static_cast<FrontendApplication*>(Application::getInstance());
 801be2e:	f002 fcdd 	bl	801e7ec <_ZN8touchgfx11Application11getInstanceEv>
 801be32:	4603      	mov	r3, r0
    }
 801be34:	4618      	mov	r0, r3
 801be36:	3708      	adds	r7, #8
 801be38:	46bd      	mov	sp, r7
 801be3a:	bd80      	pop	{r7, pc}

0801be3c <_ZN15Screen2ViewBaseC1Ev>:
#include <gui_generated/screen2_screen/Screen2ViewBase.hpp>
#include <touchgfx/Color.hpp>
#include <texts/TextKeysAndLanguages.hpp>
#include "BitmapDatabase.hpp"

Screen2ViewBase::Screen2ViewBase() :
 801be3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be40:	b092      	sub	sp, #72	; 0x48
 801be42:	af02      	add	r7, sp, #8
 801be44:	6078      	str	r0, [r7, #4]
    buttonCallback(this, &Screen2ViewBase::buttonCallbackHandler),
    flexButtonCallback(this, &Screen2ViewBase::flexButtonCallbackHandler)
 801be46:	687b      	ldr	r3, [r7, #4]
 801be48:	4618      	mov	r0, r3
 801be4a:	f000 fa1d 	bl	801c288 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>
 801be4e:	4ad6      	ldr	r2, [pc, #856]	; (801c1a8 <_ZN15Screen2ViewBaseC1Ev+0x36c>)
 801be50:	687b      	ldr	r3, [r7, #4]
 801be52:	601a      	str	r2, [r3, #0]
 801be54:	687b      	ldr	r3, [r7, #4]
 801be56:	3340      	adds	r3, #64	; 0x40
 801be58:	4618      	mov	r0, r3
 801be5a:	f7f3 f9f3 	bl	800f244 <_ZN8touchgfx3BoxC1Ev>
 801be5e:	687b      	ldr	r3, [r7, #4]
 801be60:	3370      	adds	r3, #112	; 0x70
 801be62:	4618      	mov	r0, r3
 801be64:	f7f3 fd14 	bl	800f890 <_ZN8touchgfx8TextAreaC1Ev>
 801be68:	687b      	ldr	r3, [r7, #4]
 801be6a:	33a4      	adds	r3, #164	; 0xa4
 801be6c:	4618      	mov	r0, r3
 801be6e:	f000 fa21 	bl	801c2b4 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 801be72:	687b      	ldr	r3, [r7, #4]
 801be74:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 801be78:	4618      	mov	r0, r3
 801be7a:	f7f4 fb65 	bl	8010548 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 801be7e:	687b      	ldr	r3, [r7, #4]
 801be80:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801be84:	4618      	mov	r0, r3
 801be86:	f7f4 fb5f 	bl	8010548 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 801be8a:	687b      	ldr	r3, [r7, #4]
 801be8c:	f503 70ea 	add.w	r0, r3, #468	; 0x1d4
 801be90:	4bc6      	ldr	r3, [pc, #792]	; (801c1ac <_ZN15Screen2ViewBaseC1Ev+0x370>)
 801be92:	60fb      	str	r3, [r7, #12]
 801be94:	2300      	movs	r3, #0
 801be96:	613b      	str	r3, [r7, #16]
 801be98:	f107 030c 	add.w	r3, r7, #12
 801be9c:	cb0c      	ldmia	r3, {r2, r3}
 801be9e:	6879      	ldr	r1, [r7, #4]
 801bea0:	f000 fa40 	bl	801c324 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>
 801bea4:	687b      	ldr	r3, [r7, #4]
 801bea6:	f503 70f2 	add.w	r0, r3, #484	; 0x1e4
 801beaa:	4bc1      	ldr	r3, [pc, #772]	; (801c1b0 <_ZN15Screen2ViewBaseC1Ev+0x374>)
 801beac:	617b      	str	r3, [r7, #20]
 801beae:	2300      	movs	r3, #0
 801beb0:	61bb      	str	r3, [r7, #24]
 801beb2:	f107 0314 	add.w	r3, r7, #20
 801beb6:	cb0c      	ldmia	r3, {r2, r3}
 801beb8:	6879      	ldr	r1, [r7, #4]
 801beba:	f000 fa63 	bl	801c384 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>
{
    box1.setPosition(0, 0, 507, 311);
 801bebe:	687b      	ldr	r3, [r7, #4]
 801bec0:	f103 0040 	add.w	r0, r3, #64	; 0x40
 801bec4:	f240 1337 	movw	r3, #311	; 0x137
 801bec8:	9300      	str	r3, [sp, #0]
 801beca:	f240 13fb 	movw	r3, #507	; 0x1fb
 801bece:	2200      	movs	r2, #0
 801bed0:	2100      	movs	r1, #0
 801bed2:	f7f2 fc61 	bl	800e798 <_ZN8touchgfx8Drawable11setPositionEssss>
    box1.setColor(touchgfx::Color::getColorFrom24BitRGB(17, 138, 120));
 801bed6:	687b      	ldr	r3, [r7, #4]
 801bed8:	f103 0440 	add.w	r4, r3, #64	; 0x40
 801bedc:	2278      	movs	r2, #120	; 0x78
 801bede:	218a      	movs	r1, #138	; 0x8a
 801bee0:	2011      	movs	r0, #17
 801bee2:	f004 f8cd 	bl	8020080 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801bee6:	4603      	mov	r3, r0
 801bee8:	4619      	mov	r1, r3
 801beea:	4620      	mov	r0, r4
 801beec:	f7f3 f9ec 	bl	800f2c8 <_ZN8touchgfx3Box8setColorENS_9colortypeE>

    textArea1.setXY(352, 10);
 801bef0:	687b      	ldr	r3, [r7, #4]
 801bef2:	3370      	adds	r3, #112	; 0x70
 801bef4:	220a      	movs	r2, #10
 801bef6:	f44f 71b0 	mov.w	r1, #352	; 0x160
 801befa:	4618      	mov	r0, r3
 801befc:	f7f2 fcb1 	bl	800e862 <_ZN8touchgfx8Drawable5setXYEss>
    textArea1.setColor(touchgfx::Color::getColorFrom24BitRGB(0, 0, 0));
 801bf00:	687b      	ldr	r3, [r7, #4]
 801bf02:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801bf06:	2200      	movs	r2, #0
 801bf08:	2100      	movs	r1, #0
 801bf0a:	2000      	movs	r0, #0
 801bf0c:	f004 f8b8 	bl	8020080 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801bf10:	4603      	mov	r3, r0
 801bf12:	4619      	mov	r1, r3
 801bf14:	4620      	mov	r0, r4
 801bf16:	f7f3 fcfe 	bl	800f916 <_ZN8touchgfx8TextArea8setColorENS_9colortypeE>
    textArea1.setLinespacing(0);
 801bf1a:	687b      	ldr	r3, [r7, #4]
 801bf1c:	3370      	adds	r3, #112	; 0x70
 801bf1e:	2100      	movs	r1, #0
 801bf20:	4618      	mov	r0, r3
 801bf22:	f7ff f9ba 	bl	801b29a <_ZN8touchgfx8TextArea14setLinespacingEt>
    textArea1.setTypedText(TypedText(T_SINGLEUSEID5));
 801bf26:	687b      	ldr	r3, [r7, #4]
 801bf28:	f103 0470 	add.w	r4, r3, #112	; 0x70
 801bf2c:	f107 031c 	add.w	r3, r7, #28
 801bf30:	2104      	movs	r1, #4
 801bf32:	4618      	mov	r0, r3
 801bf34:	f7f3 fbfc 	bl	800f730 <_ZN8touchgfx9TypedTextC1Et>
 801bf38:	8bb9      	ldrh	r1, [r7, #28]
 801bf3a:	4620      	mov	r0, r4
 801bf3c:	f7f4 fea2 	bl	8010c84 <_ZN8touchgfx8TextArea12setTypedTextENS_9TypedTextE>

    flexButton1.setBoxWithBorderPosition(0, 0, 95, 44);
 801bf40:	687b      	ldr	r3, [r7, #4]
 801bf42:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 801bf46:	232c      	movs	r3, #44	; 0x2c
 801bf48:	9300      	str	r3, [sp, #0]
 801bf4a:	235f      	movs	r3, #95	; 0x5f
 801bf4c:	2200      	movs	r2, #0
 801bf4e:	2100      	movs	r1, #0
 801bf50:	f000 fa38 	bl	801c3c4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>
    flexButton1.setBorderSize(0);
 801bf54:	687b      	ldr	r3, [r7, #4]
 801bf56:	33a4      	adds	r3, #164	; 0xa4
 801bf58:	2100      	movs	r1, #0
 801bf5a:	4618      	mov	r0, r3
 801bf5c:	f000 fa52 	bl	801c404 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>
    flexButton1.setBoxWithBorderColors(touchgfx::Color::getColorFrom24BitRGB(43, 127, 168), touchgfx::Color::getColorFrom24BitRGB(215, 228, 232), touchgfx::Color::getColorFrom24BitRGB(8, 131, 255), touchgfx::Color::getColorFrom24BitRGB(51, 102, 153));
 801bf60:	687b      	ldr	r3, [r7, #4]
 801bf62:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801bf66:	22a8      	movs	r2, #168	; 0xa8
 801bf68:	217f      	movs	r1, #127	; 0x7f
 801bf6a:	202b      	movs	r0, #43	; 0x2b
 801bf6c:	f004 f888 	bl	8020080 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801bf70:	4605      	mov	r5, r0
 801bf72:	22e8      	movs	r2, #232	; 0xe8
 801bf74:	21e4      	movs	r1, #228	; 0xe4
 801bf76:	20d7      	movs	r0, #215	; 0xd7
 801bf78:	f004 f882 	bl	8020080 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801bf7c:	4606      	mov	r6, r0
 801bf7e:	22ff      	movs	r2, #255	; 0xff
 801bf80:	2183      	movs	r1, #131	; 0x83
 801bf82:	2008      	movs	r0, #8
 801bf84:	f004 f87c 	bl	8020080 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801bf88:	4680      	mov	r8, r0
 801bf8a:	2299      	movs	r2, #153	; 0x99
 801bf8c:	2166      	movs	r1, #102	; 0x66
 801bf8e:	2033      	movs	r0, #51	; 0x33
 801bf90:	f004 f876 	bl	8020080 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801bf94:	4603      	mov	r3, r0
 801bf96:	9300      	str	r3, [sp, #0]
 801bf98:	4643      	mov	r3, r8
 801bf9a:	4632      	mov	r2, r6
 801bf9c:	4629      	mov	r1, r5
 801bf9e:	4620      	mov	r0, r4
 801bfa0:	f000 fa41 	bl	801c426 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    flexButton1.setIconBitmaps(Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID), Bitmap(BITMAP_BLUE_ICONS_BACK_ARROW_32_ID));
 801bfa4:	687b      	ldr	r3, [r7, #4]
 801bfa6:	f103 04a4 	add.w	r4, r3, #164	; 0xa4
 801bfaa:	f107 0320 	add.w	r3, r7, #32
 801bfae:	2102      	movs	r1, #2
 801bfb0:	4618      	mov	r0, r3
 801bfb2:	f7f3 f857 	bl	800f064 <_ZN8touchgfx6BitmapC1Et>
 801bfb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801bfba:	2102      	movs	r1, #2
 801bfbc:	4618      	mov	r0, r3
 801bfbe:	f7f3 f851 	bl	800f064 <_ZN8touchgfx6BitmapC1Et>
 801bfc2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801bfc6:	f107 0320 	add.w	r3, r7, #32
 801bfca:	4619      	mov	r1, r3
 801bfcc:	4620      	mov	r0, r4
 801bfce:	f000 fa47 	bl	801c460 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>
    flexButton1.setIconXY(30, 8);
 801bfd2:	687b      	ldr	r3, [r7, #4]
 801bfd4:	33a4      	adds	r3, #164	; 0xa4
 801bfd6:	2208      	movs	r2, #8
 801bfd8:	211e      	movs	r1, #30
 801bfda:	4618      	mov	r0, r3
 801bfdc:	f000 fa8a 	bl	801c4f4 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE9setIconXYEss>
    flexButton1.setPosition(23, 215, 95, 44);
 801bfe0:	687b      	ldr	r3, [r7, #4]
 801bfe2:	f103 00a4 	add.w	r0, r3, #164	; 0xa4
 801bfe6:	232c      	movs	r3, #44	; 0x2c
 801bfe8:	9300      	str	r3, [sp, #0]
 801bfea:	235f      	movs	r3, #95	; 0x5f
 801bfec:	22d7      	movs	r2, #215	; 0xd7
 801bfee:	2117      	movs	r1, #23
 801bff0:	f7f2 fbd2 	bl	800e798 <_ZN8touchgfx8Drawable11setPositionEssss>
    flexButton1.setAction(flexButtonCallback);
 801bff4:	687b      	ldr	r3, [r7, #4]
 801bff6:	f103 02a4 	add.w	r2, r3, #164	; 0xa4
 801bffa:	687b      	ldr	r3, [r7, #4]
 801bffc:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801c000:	4619      	mov	r1, r3
 801c002:	4610      	mov	r0, r2
 801c004:	f7ff fd00 	bl	801ba08 <_ZN8touchgfx23AbstractButtonContainer9setActionERNS_15GenericCallbackIRKS0_vvEE>

    buttonWithLabel1.setXY(160, 70);
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 801c00e:	2246      	movs	r2, #70	; 0x46
 801c010:	21a0      	movs	r1, #160	; 0xa0
 801c012:	4618      	mov	r0, r3
 801c014:	f7f2 fc25 	bl	800e862 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 801c018:	687b      	ldr	r3, [r7, #4]
 801c01a:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 801c01e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c022:	2100      	movs	r1, #0
 801c024:	4618      	mov	r0, r3
 801c026:	f7f3 f81d 	bl	800f064 <_ZN8touchgfx6BitmapC1Et>
 801c02a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801c02e:	2101      	movs	r1, #1
 801c030:	4618      	mov	r0, r3
 801c032:	f7f3 f817 	bl	800f064 <_ZN8touchgfx6BitmapC1Et>
 801c036:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 801c03a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801c03e:	4619      	mov	r1, r3
 801c040:	4620      	mov	r0, r4
 801c042:	f7f4 f8d3 	bl	80101ec <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1.setLabelText(TypedText(T_SINGLEUSEID6));
 801c046:	687b      	ldr	r3, [r7, #4]
 801c048:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 801c04c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801c050:	2105      	movs	r1, #5
 801c052:	4618      	mov	r0, r3
 801c054:	f7f3 fb6c 	bl	800f730 <_ZN8touchgfx9TypedTextC1Et>
 801c058:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 801c05a:	4620      	mov	r0, r4
 801c05c:	f7ff fdec 	bl	801bc38 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    buttonWithLabel1.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801c060:	687b      	ldr	r3, [r7, #4]
 801c062:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 801c066:	22ff      	movs	r2, #255	; 0xff
 801c068:	21ff      	movs	r1, #255	; 0xff
 801c06a:	20ff      	movs	r0, #255	; 0xff
 801c06c:	f004 f808 	bl	8020080 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801c070:	4603      	mov	r3, r0
 801c072:	2200      	movs	r2, #0
 801c074:	4619      	mov	r1, r3
 801c076:	4620      	mov	r0, r4
 801c078:	f7ff fded 	bl	801bc56 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    buttonWithLabel1.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801c07c:	687b      	ldr	r3, [r7, #4]
 801c07e:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 801c082:	22ff      	movs	r2, #255	; 0xff
 801c084:	21ff      	movs	r1, #255	; 0xff
 801c086:	20ff      	movs	r0, #255	; 0xff
 801c088:	f003 fffa 	bl	8020080 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801c08c:	4603      	mov	r3, r0
 801c08e:	2200      	movs	r2, #0
 801c090:	4619      	mov	r1, r3
 801c092:	4620      	mov	r0, r4
 801c094:	f7ff fdf7 	bl	801bc86 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    buttonWithLabel1.setAction(buttonCallback);
 801c098:	687b      	ldr	r3, [r7, #4]
 801c09a:	f503 72a6 	add.w	r2, r3, #332	; 0x14c
 801c09e:	687b      	ldr	r3, [r7, #4]
 801c0a0:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 801c0a4:	4619      	mov	r1, r3
 801c0a6:	4610      	mov	r0, r2
 801c0a8:	f7f3 fa12 	bl	800f4d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    buttonWithLabel1_send.setXY(160, 136);
 801c0ac:	687b      	ldr	r3, [r7, #4]
 801c0ae:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801c0b2:	2288      	movs	r2, #136	; 0x88
 801c0b4:	21a0      	movs	r1, #160	; 0xa0
 801c0b6:	4618      	mov	r0, r3
 801c0b8:	f7f2 fbd3 	bl	800e862 <_ZN8touchgfx8Drawable5setXYEss>
    buttonWithLabel1_send.setBitmaps(Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_ID), Bitmap(BITMAP_BLUE_BUTTONS_ROUND_EDGE_SMALL_PRESSED_ID));
 801c0bc:	687b      	ldr	r3, [r7, #4]
 801c0be:	f503 74c8 	add.w	r4, r3, #400	; 0x190
 801c0c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801c0c6:	2100      	movs	r1, #0
 801c0c8:	4618      	mov	r0, r3
 801c0ca:	f7f2 ffcb 	bl	800f064 <_ZN8touchgfx6BitmapC1Et>
 801c0ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801c0d2:	2101      	movs	r1, #1
 801c0d4:	4618      	mov	r0, r3
 801c0d6:	f7f2 ffc5 	bl	800f064 <_ZN8touchgfx6BitmapC1Et>
 801c0da:	f107 0238 	add.w	r2, r7, #56	; 0x38
 801c0de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801c0e2:	4619      	mov	r1, r3
 801c0e4:	4620      	mov	r0, r4
 801c0e6:	f7f4 f881 	bl	80101ec <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
    buttonWithLabel1_send.setLabelText(TypedText(T_SINGLEUSEID7));
 801c0ea:	687b      	ldr	r3, [r7, #4]
 801c0ec:	f503 74c8 	add.w	r4, r3, #400	; 0x190
 801c0f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801c0f4:	2106      	movs	r1, #6
 801c0f6:	4618      	mov	r0, r3
 801c0f8:	f7f3 fb1a 	bl	800f730 <_ZN8touchgfx9TypedTextC1Et>
 801c0fc:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 801c0fe:	4620      	mov	r0, r4
 801c100:	f7ff fd9a 	bl	801bc38 <_ZN8touchgfx15ButtonWithLabel12setLabelTextENS_9TypedTextE>
    buttonWithLabel1_send.setLabelColor(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801c104:	687b      	ldr	r3, [r7, #4]
 801c106:	f503 74c8 	add.w	r4, r3, #400	; 0x190
 801c10a:	22ff      	movs	r2, #255	; 0xff
 801c10c:	21ff      	movs	r1, #255	; 0xff
 801c10e:	20ff      	movs	r0, #255	; 0xff
 801c110:	f003 ffb6 	bl	8020080 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801c114:	4603      	mov	r3, r0
 801c116:	2200      	movs	r2, #0
 801c118:	4619      	mov	r1, r3
 801c11a:	4620      	mov	r0, r4
 801c11c:	f7ff fd9b 	bl	801bc56 <_ZN8touchgfx15ButtonWithLabel13setLabelColorENS_9colortypeEb>
    buttonWithLabel1_send.setLabelColorPressed(touchgfx::Color::getColorFrom24BitRGB(255, 255, 255));
 801c120:	687b      	ldr	r3, [r7, #4]
 801c122:	f503 74c8 	add.w	r4, r3, #400	; 0x190
 801c126:	22ff      	movs	r2, #255	; 0xff
 801c128:	21ff      	movs	r1, #255	; 0xff
 801c12a:	20ff      	movs	r0, #255	; 0xff
 801c12c:	f003 ffa8 	bl	8020080 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>
 801c130:	4603      	mov	r3, r0
 801c132:	2200      	movs	r2, #0
 801c134:	4619      	mov	r1, r3
 801c136:	4620      	mov	r0, r4
 801c138:	f7ff fda5 	bl	801bc86 <_ZN8touchgfx15ButtonWithLabel20setLabelColorPressedENS_9colortypeEb>
    buttonWithLabel1_send.setAction(buttonCallback);
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	f503 72c8 	add.w	r2, r3, #400	; 0x190
 801c142:	687b      	ldr	r3, [r7, #4]
 801c144:	f503 73ea 	add.w	r3, r3, #468	; 0x1d4
 801c148:	4619      	mov	r1, r3
 801c14a:	4610      	mov	r0, r2
 801c14c:	f7f3 f9c0 	bl	800f4d0 <_ZN8touchgfx14AbstractButton9setActionERNS_15GenericCallbackIRKS0_vvEE>

    add(box1);
 801c150:	687a      	ldr	r2, [r7, #4]
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	3340      	adds	r3, #64	; 0x40
 801c156:	4619      	mov	r1, r3
 801c158:	4610      	mov	r0, r2
 801c15a:	f7ff f88f 	bl	801b27c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(textArea1);
 801c15e:	687a      	ldr	r2, [r7, #4]
 801c160:	687b      	ldr	r3, [r7, #4]
 801c162:	3370      	adds	r3, #112	; 0x70
 801c164:	4619      	mov	r1, r3
 801c166:	4610      	mov	r0, r2
 801c168:	f7ff f888 	bl	801b27c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(flexButton1);
 801c16c:	687a      	ldr	r2, [r7, #4]
 801c16e:	687b      	ldr	r3, [r7, #4]
 801c170:	33a4      	adds	r3, #164	; 0xa4
 801c172:	4619      	mov	r1, r3
 801c174:	4610      	mov	r0, r2
 801c176:	f7ff f881 	bl	801b27c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1);
 801c17a:	687a      	ldr	r2, [r7, #4]
 801c17c:	687b      	ldr	r3, [r7, #4]
 801c17e:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 801c182:	4619      	mov	r1, r3
 801c184:	4610      	mov	r0, r2
 801c186:	f7ff f879 	bl	801b27c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
    add(buttonWithLabel1_send);
 801c18a:	687a      	ldr	r2, [r7, #4]
 801c18c:	687b      	ldr	r3, [r7, #4]
 801c18e:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801c192:	4619      	mov	r1, r3
 801c194:	4610      	mov	r0, r2
 801c196:	f7ff f871 	bl	801b27c <_ZN8touchgfx6Screen3addERNS_8DrawableE>
}
 801c19a:	687b      	ldr	r3, [r7, #4]
 801c19c:	4618      	mov	r0, r3
 801c19e:	3740      	adds	r7, #64	; 0x40
 801c1a0:	46bd      	mov	sp, r7
 801c1a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c1a6:	bf00      	nop
 801c1a8:	08025010 	.word	0x08025010
 801c1ac:	0801c1c9 	.word	0x0801c1c9
 801c1b0:	0801c20d 	.word	0x0801c20d

0801c1b4 <_ZN15Screen2ViewBase11setupScreenEv>:

void Screen2ViewBase::setupScreen()
{
 801c1b4:	b480      	push	{r7}
 801c1b6:	b083      	sub	sp, #12
 801c1b8:	af00      	add	r7, sp, #0
 801c1ba:	6078      	str	r0, [r7, #4]

}
 801c1bc:	bf00      	nop
 801c1be:	370c      	adds	r7, #12
 801c1c0:	46bd      	mov	sp, r7
 801c1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1c6:	4770      	bx	lr

0801c1c8 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void Screen2ViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
 801c1c8:	b580      	push	{r7, lr}
 801c1ca:	b082      	sub	sp, #8
 801c1cc:	af00      	add	r7, sp, #0
 801c1ce:	6078      	str	r0, [r7, #4]
 801c1d0:	6039      	str	r1, [r7, #0]
    if (&src == &buttonWithLabel1)
 801c1d2:	687b      	ldr	r3, [r7, #4]
 801c1d4:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 801c1d8:	683a      	ldr	r2, [r7, #0]
 801c1da:	429a      	cmp	r2, r3
 801c1dc:	d106      	bne.n	801c1ec <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x24>
    {
        //Interaction2
        //When buttonWithLabel1 clicked call virtual function
        //Call uart_init_clicked
        uart_init_clicked();
 801c1de:	687b      	ldr	r3, [r7, #4]
 801c1e0:	681b      	ldr	r3, [r3, #0]
 801c1e2:	332c      	adds	r3, #44	; 0x2c
 801c1e4:	681b      	ldr	r3, [r3, #0]
 801c1e6:	6878      	ldr	r0, [r7, #4]
 801c1e8:	4798      	blx	r3
        //Interaction3
        //When buttonWithLabel1_send clicked call virtual function
        //Call uart_send_clicked
        uart_send_clicked();
    }
}
 801c1ea:	e00b      	b.n	801c204 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
    else if (&src == &buttonWithLabel1_send)
 801c1ec:	687b      	ldr	r3, [r7, #4]
 801c1ee:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 801c1f2:	683a      	ldr	r2, [r7, #0]
 801c1f4:	429a      	cmp	r2, r3
 801c1f6:	d105      	bne.n	801c204 <_ZN15Screen2ViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0x3c>
        uart_send_clicked();
 801c1f8:	687b      	ldr	r3, [r7, #4]
 801c1fa:	681b      	ldr	r3, [r3, #0]
 801c1fc:	3330      	adds	r3, #48	; 0x30
 801c1fe:	681b      	ldr	r3, [r3, #0]
 801c200:	6878      	ldr	r0, [r7, #4]
 801c202:	4798      	blx	r3
}
 801c204:	bf00      	nop
 801c206:	3708      	adds	r7, #8
 801c208:	46bd      	mov	sp, r7
 801c20a:	bd80      	pop	{r7, pc}

0801c20c <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void Screen2ViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
 801c20c:	b580      	push	{r7, lr}
 801c20e:	b082      	sub	sp, #8
 801c210:	af00      	add	r7, sp, #0
 801c212:	6078      	str	r0, [r7, #4]
 801c214:	6039      	str	r1, [r7, #0]
    if (&src == &flexButton1)
 801c216:	687b      	ldr	r3, [r7, #4]
 801c218:	33a4      	adds	r3, #164	; 0xa4
 801c21a:	683a      	ldr	r2, [r7, #0]
 801c21c:	429a      	cmp	r2, r3
 801c21e:	d106      	bne.n	801c22e <_ZN15Screen2ViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x22>
    {
        //Interaction1
        //When flexButton1 clicked change screen to Screen1
        //Go to Screen1 with screen transition towards West
        application().gotoScreen1ScreenSlideTransitionWest();
 801c220:	6878      	ldr	r0, [r7, #4]
 801c222:	f7ff fe00 	bl	801be26 <_ZN15Screen2ViewBase11applicationEv>
 801c226:	4603      	mov	r3, r0
 801c228:	4618      	mov	r0, r3
 801c22a:	f7fe f953 	bl	801a4d4 <_ZN23FrontendApplicationBase36gotoScreen1ScreenSlideTransitionWestEv>
    }
}
 801c22e:	bf00      	nop
 801c230:	3708      	adds	r7, #8
 801c232:	46bd      	mov	sp, r7
 801c234:	bd80      	pop	{r7, pc}
	...

0801c238 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>:
    /**
     * @fn virtual IconButtonStyle::~IconButtonStyle()
     *
     * @brief Destructor.
     */
    virtual ~IconButtonStyle() { }
 801c238:	b580      	push	{r7, lr}
 801c23a:	b082      	sub	sp, #8
 801c23c:	af00      	add	r7, sp, #0
 801c23e:	6078      	str	r0, [r7, #4]
 801c240:	4a08      	ldr	r2, [pc, #32]	; (801c264 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev+0x2c>)
 801c242:	687b      	ldr	r3, [r7, #4]
 801c244:	601a      	str	r2, [r3, #0]
 801c246:	687b      	ldr	r3, [r7, #4]
 801c248:	337c      	adds	r3, #124	; 0x7c
 801c24a:	4618      	mov	r0, r3
 801c24c:	f7f3 f86c 	bl	800f328 <_ZN8touchgfx5ImageD1Ev>
 801c250:	687b      	ldr	r3, [r7, #4]
 801c252:	4618      	mov	r0, r3
 801c254:	f000 f966 	bl	801c524 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 801c258:	687b      	ldr	r3, [r7, #4]
 801c25a:	4618      	mov	r0, r3
 801c25c:	3708      	adds	r7, #8
 801c25e:	46bd      	mov	sp, r7
 801c260:	bd80      	pop	{r7, pc}
 801c262:	bf00      	nop
 801c264:	0802507c 	.word	0x0802507c

0801c268 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED0Ev>:
 801c268:	b580      	push	{r7, lr}
 801c26a:	b082      	sub	sp, #8
 801c26c:	af00      	add	r7, sp, #0
 801c26e:	6078      	str	r0, [r7, #4]
 801c270:	6878      	ldr	r0, [r7, #4]
 801c272:	f7ff ffe1 	bl	801c238 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>
 801c276:	21a8      	movs	r1, #168	; 0xa8
 801c278:	6878      	ldr	r0, [r7, #4]
 801c27a:	f006 f8d2 	bl	8022422 <_ZdlPvj>
 801c27e:	687b      	ldr	r3, [r7, #4]
 801c280:	4618      	mov	r0, r3
 801c282:	3708      	adds	r7, #8
 801c284:	46bd      	mov	sp, r7
 801c286:	bd80      	pop	{r7, pc}

0801c288 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev>:
    View() : presenter(0)
 801c288:	b580      	push	{r7, lr}
 801c28a:	b082      	sub	sp, #8
 801c28c:	af00      	add	r7, sp, #0
 801c28e:	6078      	str	r0, [r7, #4]
 801c290:	687b      	ldr	r3, [r7, #4]
 801c292:	4618      	mov	r0, r3
 801c294:	f003 f93a 	bl	801f50c <_ZN8touchgfx6ScreenC1Ev>
 801c298:	4a05      	ldr	r2, [pc, #20]	; (801c2b0 <_ZN8touchgfx4ViewI16Screen2PresenterEC1Ev+0x28>)
 801c29a:	687b      	ldr	r3, [r7, #4]
 801c29c:	601a      	str	r2, [r3, #0]
 801c29e:	687b      	ldr	r3, [r7, #4]
 801c2a0:	2200      	movs	r2, #0
 801c2a2:	63da      	str	r2, [r3, #60]	; 0x3c
    }
 801c2a4:	687b      	ldr	r3, [r7, #4]
 801c2a6:	4618      	mov	r0, r3
 801c2a8:	3708      	adds	r7, #8
 801c2aa:	46bd      	mov	sp, r7
 801c2ac:	bd80      	pop	{r7, pc}
 801c2ae:	bf00      	nop
 801c2b0:	080251b0 	.word	0x080251b0

0801c2b4 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>:
    IconButtonStyle() : T()
 801c2b4:	b590      	push	{r4, r7, lr}
 801c2b6:	b085      	sub	sp, #20
 801c2b8:	af00      	add	r7, sp, #0
 801c2ba:	6078      	str	r0, [r7, #4]
 801c2bc:	687b      	ldr	r3, [r7, #4]
 801c2be:	4618      	mov	r0, r3
 801c2c0:	f000 f958 	bl	801c574 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 801c2c4:	4a16      	ldr	r2, [pc, #88]	; (801c320 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev+0x6c>)
 801c2c6:	687b      	ldr	r3, [r7, #4]
 801c2c8:	601a      	str	r2, [r3, #0]
 801c2ca:	687b      	ldr	r3, [r7, #4]
 801c2cc:	3378      	adds	r3, #120	; 0x78
 801c2ce:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c2d2:	4618      	mov	r0, r3
 801c2d4:	f7f2 fec6 	bl	800f064 <_ZN8touchgfx6BitmapC1Et>
 801c2d8:	687b      	ldr	r3, [r7, #4]
 801c2da:	337a      	adds	r3, #122	; 0x7a
 801c2dc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c2e0:	4618      	mov	r0, r3
 801c2e2:	f7f2 febf 	bl	800f064 <_ZN8touchgfx6BitmapC1Et>
 801c2e6:	687b      	ldr	r3, [r7, #4]
 801c2e8:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 801c2ec:	f107 030c 	add.w	r3, r7, #12
 801c2f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c2f4:	4618      	mov	r0, r3
 801c2f6:	f7f2 feb5 	bl	800f064 <_ZN8touchgfx6BitmapC1Et>
 801c2fa:	f107 030c 	add.w	r3, r7, #12
 801c2fe:	4619      	mov	r1, r3
 801c300:	4620      	mov	r0, r4
 801c302:	f7f2 ffef 	bl	800f2e4 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
        T::add(iconImage);
 801c306:	687a      	ldr	r2, [r7, #4]
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	337c      	adds	r3, #124	; 0x7c
 801c30c:	4619      	mov	r1, r3
 801c30e:	4610      	mov	r0, r2
 801c310:	f7f2 fba6 	bl	800ea60 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801c314:	687b      	ldr	r3, [r7, #4]
 801c316:	4618      	mov	r0, r3
 801c318:	3714      	adds	r7, #20
 801c31a:	46bd      	mov	sp, r7
 801c31c:	bd90      	pop	{r4, r7, pc}
 801c31e:	bf00      	nop
 801c320:	0802507c 	.word	0x0802507c

0801c324 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 801c324:	b580      	push	{r7, lr}
 801c326:	b084      	sub	sp, #16
 801c328:	af00      	add	r7, sp, #0
 801c32a:	60f8      	str	r0, [r7, #12]
 801c32c:	60b9      	str	r1, [r7, #8]
 801c32e:	4639      	mov	r1, r7
 801c330:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 801c334:	68fb      	ldr	r3, [r7, #12]
 801c336:	4618      	mov	r0, r3
 801c338:	f7f3 f940 	bl	800f5bc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvEC1Ev>
 801c33c:	4a08      	ldr	r2, [pc, #32]	; (801c360 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 801c33e:	68fb      	ldr	r3, [r7, #12]
 801c340:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801c342:	68fb      	ldr	r3, [r7, #12]
 801c344:	68ba      	ldr	r2, [r7, #8]
 801c346:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 801c348:	68fb      	ldr	r3, [r7, #12]
 801c34a:	3308      	adds	r3, #8
 801c34c:	463a      	mov	r2, r7
 801c34e:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c352:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801c356:	68fb      	ldr	r3, [r7, #12]
 801c358:	4618      	mov	r0, r3
 801c35a:	3710      	adds	r7, #16
 801c35c:	46bd      	mov	sp, r7
 801c35e:	bd80      	pop	{r7, pc}
 801c360:	08025064 	.word	0x08025064

0801c364 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>:
class GenericCallback<T1, void, void>
 801c364:	b480      	push	{r7}
 801c366:	b083      	sub	sp, #12
 801c368:	af00      	add	r7, sp, #0
 801c36a:	6078      	str	r0, [r7, #4]
 801c36c:	4a04      	ldr	r2, [pc, #16]	; (801c380 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev+0x1c>)
 801c36e:	687b      	ldr	r3, [r7, #4]
 801c370:	601a      	str	r2, [r3, #0]
 801c372:	687b      	ldr	r3, [r7, #4]
 801c374:	4618      	mov	r0, r3
 801c376:	370c      	adds	r7, #12
 801c378:	46bd      	mov	sp, r7
 801c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c37e:	4770      	bx	lr
 801c380:	0802527c 	.word	0x0802527c

0801c384 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E>:
    Callback(dest_type* pobject, void (dest_type::*pmemfun_1)(T1))
 801c384:	b580      	push	{r7, lr}
 801c386:	b084      	sub	sp, #16
 801c388:	af00      	add	r7, sp, #0
 801c38a:	60f8      	str	r0, [r7, #12]
 801c38c:	60b9      	str	r1, [r7, #8]
 801c38e:	4639      	mov	r1, r7
 801c390:	e881 000c 	stmia.w	r1, {r2, r3}
    {
 801c394:	68fb      	ldr	r3, [r7, #12]
 801c396:	4618      	mov	r0, r3
 801c398:	f7ff ffe4 	bl	801c364 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvEC1Ev>
 801c39c:	4a08      	ldr	r2, [pc, #32]	; (801c3c0 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvEC1EPS1_MS1_FvS4_E+0x3c>)
 801c39e:	68fb      	ldr	r3, [r7, #12]
 801c3a0:	601a      	str	r2, [r3, #0]
        this->pobject = pobject;
 801c3a2:	68fb      	ldr	r3, [r7, #12]
 801c3a4:	68ba      	ldr	r2, [r7, #8]
 801c3a6:	605a      	str	r2, [r3, #4]
        this->pmemfun_1 = pmemfun_1;
 801c3a8:	68fb      	ldr	r3, [r7, #12]
 801c3aa:	3308      	adds	r3, #8
 801c3ac:	463a      	mov	r2, r7
 801c3ae:	e892 0003 	ldmia.w	r2, {r0, r1}
 801c3b2:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 801c3b6:	68fb      	ldr	r3, [r7, #12]
 801c3b8:	4618      	mov	r0, r3
 801c3ba:	3710      	adds	r7, #16
 801c3bc:	46bd      	mov	sp, r7
 801c3be:	bd80      	pop	{r7, pc}
 801c3c0:	0802504c 	.word	0x0802504c

0801c3c4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE24setBoxWithBorderPositionEssss>:
     * @param x      The x coordinate of this BoxWithBorderButtonStyle.
     * @param y      The y coordinate of this BoxWithBorderButtonStyle.
     * @param width  The width of this BoxWithBorderButtonStyle.
     * @param height The height of this BoxWithBorderButtonStyle.
     */
    void setBoxWithBorderPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 801c3c4:	b590      	push	{r4, r7, lr}
 801c3c6:	b087      	sub	sp, #28
 801c3c8:	af02      	add	r7, sp, #8
 801c3ca:	60f8      	str	r0, [r7, #12]
 801c3cc:	4608      	mov	r0, r1
 801c3ce:	4611      	mov	r1, r2
 801c3d0:	461a      	mov	r2, r3
 801c3d2:	4603      	mov	r3, r0
 801c3d4:	817b      	strh	r3, [r7, #10]
 801c3d6:	460b      	mov	r3, r1
 801c3d8:	813b      	strh	r3, [r7, #8]
 801c3da:	4613      	mov	r3, r2
 801c3dc:	80fb      	strh	r3, [r7, #6]
    {
        borderBox.setPosition(x, y, width, height);
 801c3de:	68fb      	ldr	r3, [r7, #12]
 801c3e0:	f103 0034 	add.w	r0, r3, #52	; 0x34
 801c3e4:	f9b7 4006 	ldrsh.w	r4, [r7, #6]
 801c3e8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 801c3ec:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 801c3f0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801c3f4:	9300      	str	r3, [sp, #0]
 801c3f6:	4623      	mov	r3, r4
 801c3f8:	f7f2 f9ce 	bl	800e798 <_ZN8touchgfx8Drawable11setPositionEssss>
    }
 801c3fc:	bf00      	nop
 801c3fe:	3714      	adds	r7, #20
 801c400:	46bd      	mov	sp, r7
 801c402:	bd90      	pop	{r4, r7, pc}

0801c404 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE13setBorderSizeEh>:
     *
     * @brief Sets border size.
     *
     * @param size The size.
     */
    void setBorderSize(uint8_t size)
 801c404:	b580      	push	{r7, lr}
 801c406:	b082      	sub	sp, #8
 801c408:	af00      	add	r7, sp, #0
 801c40a:	6078      	str	r0, [r7, #4]
 801c40c:	460b      	mov	r3, r1
 801c40e:	70fb      	strb	r3, [r7, #3]
    {
        borderBox.setBorderSize(size);
 801c410:	687b      	ldr	r3, [r7, #4]
 801c412:	3334      	adds	r3, #52	; 0x34
 801c414:	78fa      	ldrb	r2, [r7, #3]
 801c416:	4611      	mov	r1, r2
 801c418:	4618      	mov	r0, r3
 801c41a:	f7ff fbed 	bl	801bbf8 <_ZN8touchgfx13BoxWithBorder13setBorderSizeEh>
    }
 801c41e:	bf00      	nop
 801c420:	3708      	adds	r7, #8
 801c422:	46bd      	mov	sp, r7
 801c424:	bd80      	pop	{r7, pc}

0801c426 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 801c426:	b580      	push	{r7, lr}
 801c428:	b084      	sub	sp, #16
 801c42a:	af00      	add	r7, sp, #0
 801c42c:	60f8      	str	r0, [r7, #12]
 801c42e:	60b9      	str	r1, [r7, #8]
 801c430:	607a      	str	r2, [r7, #4]
 801c432:	603b      	str	r3, [r7, #0]
        up = colorReleased;
 801c434:	68fb      	ldr	r3, [r7, #12]
 801c436:	68ba      	ldr	r2, [r7, #8]
 801c438:	669a      	str	r2, [r3, #104]	; 0x68
        down = colorPressed;
 801c43a:	68fb      	ldr	r3, [r7, #12]
 801c43c:	687a      	ldr	r2, [r7, #4]
 801c43e:	66da      	str	r2, [r3, #108]	; 0x6c
        borderUp = borderColorReleased;
 801c440:	68fb      	ldr	r3, [r7, #12]
 801c442:	683a      	ldr	r2, [r7, #0]
 801c444:	671a      	str	r2, [r3, #112]	; 0x70
        borderDown = borderColorPressed;
 801c446:	68fb      	ldr	r3, [r7, #12]
 801c448:	69ba      	ldr	r2, [r7, #24]
 801c44a:	675a      	str	r2, [r3, #116]	; 0x74
        handlePressedUpdated();
 801c44c:	68fb      	ldr	r3, [r7, #12]
 801c44e:	681b      	ldr	r3, [r3, #0]
 801c450:	3388      	adds	r3, #136	; 0x88
 801c452:	681b      	ldr	r3, [r3, #0]
 801c454:	68f8      	ldr	r0, [r7, #12]
 801c456:	4798      	blx	r3
    }
 801c458:	bf00      	nop
 801c45a:	3710      	adds	r7, #16
 801c45c:	46bd      	mov	sp, r7
 801c45e:	bd80      	pop	{r7, pc}

0801c460 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_>:
     * @brief Sets icon bitmaps.
     *
     * @param newIconReleased The new icon released.
     * @param newIconPressed  The new icon pressed.
     */
    virtual void setIconBitmaps(const Bitmap& newIconReleased, const Bitmap& newIconPressed)
 801c460:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c462:	b085      	sub	sp, #20
 801c464:	af00      	add	r7, sp, #0
 801c466:	60f8      	str	r0, [r7, #12]
 801c468:	60b9      	str	r1, [r7, #8]
 801c46a:	607a      	str	r2, [r7, #4]
    {
        iconReleased = newIconReleased;
 801c46c:	68fb      	ldr	r3, [r7, #12]
 801c46e:	68ba      	ldr	r2, [r7, #8]
 801c470:	8812      	ldrh	r2, [r2, #0]
 801c472:	f8a3 2078 	strh.w	r2, [r3, #120]	; 0x78
        iconPressed = newIconPressed;
 801c476:	68fb      	ldr	r3, [r7, #12]
 801c478:	687a      	ldr	r2, [r7, #4]
 801c47a:	8812      	ldrh	r2, [r2, #0]
 801c47c:	f8a3 207a 	strh.w	r2, [r3, #122]	; 0x7a

        iconImage.setXY((T::getWidth() / 2) - (newIconPressed.getWidth() / 2), (T::getHeight() / 2) - (newIconPressed.getHeight() / 2));
 801c480:	68fb      	ldr	r3, [r7, #12]
 801c482:	f103 057c 	add.w	r5, r3, #124	; 0x7c
 801c486:	68fb      	ldr	r3, [r7, #12]
 801c488:	4618      	mov	r0, r3
 801c48a:	f7f2 fd7a 	bl	800ef82 <_ZNK8touchgfx8Drawable8getWidthEv>
 801c48e:	4603      	mov	r3, r0
 801c490:	2b00      	cmp	r3, #0
 801c492:	da00      	bge.n	801c496 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_+0x36>
 801c494:	3301      	adds	r3, #1
 801c496:	105b      	asrs	r3, r3, #1
 801c498:	b21b      	sxth	r3, r3
 801c49a:	b29c      	uxth	r4, r3
 801c49c:	6878      	ldr	r0, [r7, #4]
 801c49e:	f003 fef1 	bl	8020284 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c4a2:	4603      	mov	r3, r0
 801c4a4:	085b      	lsrs	r3, r3, #1
 801c4a6:	b29b      	uxth	r3, r3
 801c4a8:	1ae3      	subs	r3, r4, r3
 801c4aa:	b29b      	uxth	r3, r3
 801c4ac:	b21e      	sxth	r6, r3
 801c4ae:	68fb      	ldr	r3, [r7, #12]
 801c4b0:	4618      	mov	r0, r3
 801c4b2:	f7f2 fd73 	bl	800ef9c <_ZNK8touchgfx8Drawable9getHeightEv>
 801c4b6:	4603      	mov	r3, r0
 801c4b8:	2b00      	cmp	r3, #0
 801c4ba:	da00      	bge.n	801c4be <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE14setIconBitmapsERKNS_6BitmapES7_+0x5e>
 801c4bc:	3301      	adds	r3, #1
 801c4be:	105b      	asrs	r3, r3, #1
 801c4c0:	b21b      	sxth	r3, r3
 801c4c2:	b29c      	uxth	r4, r3
 801c4c4:	6878      	ldr	r0, [r7, #4]
 801c4c6:	f003 ff15 	bl	80202f4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c4ca:	4603      	mov	r3, r0
 801c4cc:	085b      	lsrs	r3, r3, #1
 801c4ce:	b29b      	uxth	r3, r3
 801c4d0:	1ae3      	subs	r3, r4, r3
 801c4d2:	b29b      	uxth	r3, r3
 801c4d4:	b21b      	sxth	r3, r3
 801c4d6:	461a      	mov	r2, r3
 801c4d8:	4631      	mov	r1, r6
 801c4da:	4628      	mov	r0, r5
 801c4dc:	f7f2 f9c1 	bl	800e862 <_ZN8touchgfx8Drawable5setXYEss>

        handlePressedUpdated();
 801c4e0:	68fb      	ldr	r3, [r7, #12]
 801c4e2:	681b      	ldr	r3, [r3, #0]
 801c4e4:	3388      	adds	r3, #136	; 0x88
 801c4e6:	681b      	ldr	r3, [r3, #0]
 801c4e8:	68f8      	ldr	r0, [r7, #12]
 801c4ea:	4798      	blx	r3
    }
 801c4ec:	bf00      	nop
 801c4ee:	3714      	adds	r7, #20
 801c4f0:	46bd      	mov	sp, r7
 801c4f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801c4f4 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE9setIconXYEss>:
     * @brief Sets icon xy.
     *
     * @param x The x coordinate.
     * @param y The y coordinate.
     */
    void setIconXY(int16_t x, int16_t y)
 801c4f4:	b580      	push	{r7, lr}
 801c4f6:	b082      	sub	sp, #8
 801c4f8:	af00      	add	r7, sp, #0
 801c4fa:	6078      	str	r0, [r7, #4]
 801c4fc:	460b      	mov	r3, r1
 801c4fe:	807b      	strh	r3, [r7, #2]
 801c500:	4613      	mov	r3, r2
 801c502:	803b      	strh	r3, [r7, #0]
    {
        setIconX(x);
 801c504:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801c508:	4619      	mov	r1, r3
 801c50a:	6878      	ldr	r0, [r7, #4]
 801c50c:	f000 f8dd 	bl	801c6ca <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE8setIconXEs>
        setIconY(y);
 801c510:	f9b7 3000 	ldrsh.w	r3, [r7]
 801c514:	4619      	mov	r1, r3
 801c516:	6878      	ldr	r0, [r7, #4]
 801c518:	f000 f8e9 	bl	801c6ee <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE8setIconYEs>
    }
 801c51c:	bf00      	nop
 801c51e:	3708      	adds	r7, #8
 801c520:	46bd      	mov	sp, r7
 801c522:	bd80      	pop	{r7, pc}

0801c524 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
    virtual ~BoxWithBorderButtonStyle() { }
 801c524:	b580      	push	{r7, lr}
 801c526:	b082      	sub	sp, #8
 801c528:	af00      	add	r7, sp, #0
 801c52a:	6078      	str	r0, [r7, #4]
 801c52c:	4a08      	ldr	r2, [pc, #32]	; (801c550 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev+0x2c>)
 801c52e:	687b      	ldr	r3, [r7, #4]
 801c530:	601a      	str	r2, [r3, #0]
 801c532:	687b      	ldr	r3, [r7, #4]
 801c534:	3334      	adds	r3, #52	; 0x34
 801c536:	4618      	mov	r0, r3
 801c538:	f7f3 fc7e 	bl	800fe38 <_ZN8touchgfx13BoxWithBorderD1Ev>
 801c53c:	687b      	ldr	r3, [r7, #4]
 801c53e:	4618      	mov	r0, r3
 801c540:	f7ff fa96 	bl	801ba70 <_ZN8touchgfx18ClickButtonTriggerD1Ev>
 801c544:	687b      	ldr	r3, [r7, #4]
 801c546:	4618      	mov	r0, r3
 801c548:	3708      	adds	r7, #8
 801c54a:	46bd      	mov	sp, r7
 801c54c:	bd80      	pop	{r7, pc}
 801c54e:	bf00      	nop
 801c550:	08025118 	.word	0x08025118

0801c554 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
 801c554:	b580      	push	{r7, lr}
 801c556:	b082      	sub	sp, #8
 801c558:	af00      	add	r7, sp, #0
 801c55a:	6078      	str	r0, [r7, #4]
 801c55c:	6878      	ldr	r0, [r7, #4]
 801c55e:	f7ff ffe1 	bl	801c524 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>
 801c562:	2178      	movs	r1, #120	; 0x78
 801c564:	6878      	ldr	r0, [r7, #4]
 801c566:	f005 ff5c 	bl	8022422 <_ZdlPvj>
 801c56a:	687b      	ldr	r3, [r7, #4]
 801c56c:	4618      	mov	r0, r3
 801c56e:	3708      	adds	r7, #8
 801c570:	46bd      	mov	sp, r7
 801c572:	bd80      	pop	{r7, pc}

0801c574 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>:
    BoxWithBorderButtonStyle() : T(), up(), down()
 801c574:	b580      	push	{r7, lr}
 801c576:	b082      	sub	sp, #8
 801c578:	af00      	add	r7, sp, #0
 801c57a:	6078      	str	r0, [r7, #4]
 801c57c:	687b      	ldr	r3, [r7, #4]
 801c57e:	4618      	mov	r0, r3
 801c580:	f7ff fa64 	bl	801ba4c <_ZN8touchgfx18ClickButtonTriggerC1Ev>
 801c584:	4a17      	ldr	r2, [pc, #92]	; (801c5e4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x70>)
 801c586:	687b      	ldr	r3, [r7, #4]
 801c588:	601a      	str	r2, [r3, #0]
 801c58a:	687b      	ldr	r3, [r7, #4]
 801c58c:	3334      	adds	r3, #52	; 0x34
 801c58e:	4618      	mov	r0, r3
 801c590:	f7ff faf0 	bl	801bb74 <_ZN8touchgfx13BoxWithBorderC1Ev>
 801c594:	687b      	ldr	r3, [r7, #4]
 801c596:	3368      	adds	r3, #104	; 0x68
 801c598:	4618      	mov	r0, r3
 801c59a:	f7f3 f86b 	bl	800f674 <_ZN8touchgfx9colortypeC1Ev>
 801c59e:	687b      	ldr	r3, [r7, #4]
 801c5a0:	336c      	adds	r3, #108	; 0x6c
 801c5a2:	4618      	mov	r0, r3
 801c5a4:	f7f3 f866 	bl	800f674 <_ZN8touchgfx9colortypeC1Ev>
 801c5a8:	687b      	ldr	r3, [r7, #4]
 801c5aa:	3370      	adds	r3, #112	; 0x70
 801c5ac:	4618      	mov	r0, r3
 801c5ae:	f7f3 f861 	bl	800f674 <_ZN8touchgfx9colortypeC1Ev>
 801c5b2:	687b      	ldr	r3, [r7, #4]
 801c5b4:	3374      	adds	r3, #116	; 0x74
 801c5b6:	4618      	mov	r0, r3
 801c5b8:	f7f3 f85c 	bl	800f674 <_ZN8touchgfx9colortypeC1Ev>
        borderBox.setXY(0, 0);
 801c5bc:	687b      	ldr	r3, [r7, #4]
 801c5be:	3334      	adds	r3, #52	; 0x34
 801c5c0:	2200      	movs	r2, #0
 801c5c2:	2100      	movs	r1, #0
 801c5c4:	4618      	mov	r0, r3
 801c5c6:	f7f2 f94c 	bl	800e862 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 801c5ca:	687a      	ldr	r2, [r7, #4]
 801c5cc:	687b      	ldr	r3, [r7, #4]
 801c5ce:	3334      	adds	r3, #52	; 0x34
 801c5d0:	4619      	mov	r1, r3
 801c5d2:	4610      	mov	r0, r2
 801c5d4:	f7f2 fa44 	bl	800ea60 <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 801c5d8:	687b      	ldr	r3, [r7, #4]
 801c5da:	4618      	mov	r0, r3
 801c5dc:	3708      	adds	r7, #8
 801c5de:	46bd      	mov	sp, r7
 801c5e0:	bd80      	pop	{r7, pc}
 801c5e2:	bf00      	nop
 801c5e4:	08025118 	.word	0x08025118

0801c5e8 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>:
    virtual ~GenericCallback()
 801c5e8:	b480      	push	{r7}
 801c5ea:	b083      	sub	sp, #12
 801c5ec:	af00      	add	r7, sp, #0
 801c5ee:	6078      	str	r0, [r7, #4]
    }
 801c5f0:	4a04      	ldr	r2, [pc, #16]	; (801c604 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev+0x1c>)
 801c5f2:	687b      	ldr	r3, [r7, #4]
 801c5f4:	601a      	str	r2, [r3, #0]
 801c5f6:	687b      	ldr	r3, [r7, #4]
 801c5f8:	4618      	mov	r0, r3
 801c5fa:	370c      	adds	r7, #12
 801c5fc:	46bd      	mov	sp, r7
 801c5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c602:	4770      	bx	lr
 801c604:	0802527c 	.word	0x0802527c

0801c608 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED0Ev>:
    virtual ~GenericCallback()
 801c608:	b580      	push	{r7, lr}
 801c60a:	b082      	sub	sp, #8
 801c60c:	af00      	add	r7, sp, #0
 801c60e:	6078      	str	r0, [r7, #4]
    }
 801c610:	6878      	ldr	r0, [r7, #4]
 801c612:	f7ff ffe9 	bl	801c5e8 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 801c616:	2104      	movs	r1, #4
 801c618:	6878      	ldr	r0, [r7, #4]
 801c61a:	f005 ff02 	bl	8022422 <_ZdlPvj>
 801c61e:	687b      	ldr	r3, [r7, #4]
 801c620:	4618      	mov	r0, r3
 801c622:	3708      	adds	r7, #8
 801c624:	46bd      	mov	sp, r7
 801c626:	bd80      	pop	{r7, pc}

0801c628 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
    /**
     * @fn virtual void BoxWithBorderButtonStyle::handlePressedUpdated()
     *
     * @brief Handles the pressed updated.
     */
    virtual void handlePressedUpdated()
 801c628:	b590      	push	{r4, r7, lr}
 801c62a:	b083      	sub	sp, #12
 801c62c:	af00      	add	r7, sp, #0
 801c62e:	6078      	str	r0, [r7, #4]
    {
        borderBox.setColor(T::getPressed() ? down : up);
 801c630:	687b      	ldr	r3, [r7, #4]
 801c632:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801c636:	687b      	ldr	r3, [r7, #4]
 801c638:	4618      	mov	r0, r3
 801c63a:	f7ff f9cb 	bl	801b9d4 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 801c63e:	4603      	mov	r3, r0
 801c640:	2b00      	cmp	r3, #0
 801c642:	d002      	beq.n	801c64a <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x22>
 801c644:	687b      	ldr	r3, [r7, #4]
 801c646:	336c      	adds	r3, #108	; 0x6c
 801c648:	e001      	b.n	801c64e <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x26>
 801c64a:	687b      	ldr	r3, [r7, #4]
 801c64c:	3368      	adds	r3, #104	; 0x68
 801c64e:	6819      	ldr	r1, [r3, #0]
 801c650:	4620      	mov	r0, r4
 801c652:	f7ff fab5 	bl	801bbc0 <_ZN8touchgfx13BoxWithBorder8setColorENS_9colortypeE>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 801c656:	687b      	ldr	r3, [r7, #4]
 801c658:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801c65c:	687b      	ldr	r3, [r7, #4]
 801c65e:	4618      	mov	r0, r3
 801c660:	f7ff f9b8 	bl	801b9d4 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 801c664:	4603      	mov	r3, r0
 801c666:	2b00      	cmp	r3, #0
 801c668:	d002      	beq.n	801c670 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x48>
 801c66a:	687b      	ldr	r3, [r7, #4]
 801c66c:	3374      	adds	r3, #116	; 0x74
 801c66e:	e001      	b.n	801c674 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x4c>
 801c670:	687b      	ldr	r3, [r7, #4]
 801c672:	3370      	adds	r3, #112	; 0x70
 801c674:	6819      	ldr	r1, [r3, #0]
 801c676:	4620      	mov	r0, r4
 801c678:	f7ff fab0 	bl	801bbdc <_ZN8touchgfx13BoxWithBorder14setBorderColorENS_9colortypeE>
        T::handlePressedUpdated();
 801c67c:	687b      	ldr	r3, [r7, #4]
 801c67e:	4618      	mov	r0, r3
 801c680:	f7ff f9d0 	bl	801ba24 <_ZN8touchgfx23AbstractButtonContainer20handlePressedUpdatedEv>
    }
 801c684:	bf00      	nop
 801c686:	370c      	adds	r7, #12
 801c688:	46bd      	mov	sp, r7
 801c68a:	bd90      	pop	{r4, r7, pc}

0801c68c <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv>:
    /**
     * @fn virtual void IconButtonStyle::handlePressedUpdated()
     *
     * @brief Handles the pressed updated.
     */
    virtual void handlePressedUpdated()
 801c68c:	b590      	push	{r4, r7, lr}
 801c68e:	b083      	sub	sp, #12
 801c690:	af00      	add	r7, sp, #0
 801c692:	6078      	str	r0, [r7, #4]
    {
        iconImage.setBitmap(T::getPressed() ? iconPressed : iconReleased);
 801c694:	687b      	ldr	r3, [r7, #4]
 801c696:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 801c69a:	687b      	ldr	r3, [r7, #4]
 801c69c:	4618      	mov	r0, r3
 801c69e:	f7ff f999 	bl	801b9d4 <_ZN8touchgfx23AbstractButtonContainer10getPressedEv>
 801c6a2:	4603      	mov	r3, r0
 801c6a4:	2b00      	cmp	r3, #0
 801c6a6:	d002      	beq.n	801c6ae <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv+0x22>
 801c6a8:	687b      	ldr	r3, [r7, #4]
 801c6aa:	337a      	adds	r3, #122	; 0x7a
 801c6ac:	e001      	b.n	801c6b2 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv+0x26>
 801c6ae:	687b      	ldr	r3, [r7, #4]
 801c6b0:	3378      	adds	r3, #120	; 0x78
 801c6b2:	4619      	mov	r1, r3
 801c6b4:	4620      	mov	r0, r4
 801c6b6:	f7f4 f8bc 	bl	8010832 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
        T::handlePressedUpdated();
 801c6ba:	687b      	ldr	r3, [r7, #4]
 801c6bc:	4618      	mov	r0, r3
 801c6be:	f7ff ffb3 	bl	801c628 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>
    }
 801c6c2:	bf00      	nop
 801c6c4:	370c      	adds	r7, #12
 801c6c6:	46bd      	mov	sp, r7
 801c6c8:	bd90      	pop	{r4, r7, pc}

0801c6ca <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE8setIconXEs>:
    void setIconX(int16_t x)
 801c6ca:	b580      	push	{r7, lr}
 801c6cc:	b082      	sub	sp, #8
 801c6ce:	af00      	add	r7, sp, #0
 801c6d0:	6078      	str	r0, [r7, #4]
 801c6d2:	460b      	mov	r3, r1
 801c6d4:	807b      	strh	r3, [r7, #2]
        iconImage.setX(x);
 801c6d6:	687b      	ldr	r3, [r7, #4]
 801c6d8:	337c      	adds	r3, #124	; 0x7c
 801c6da:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801c6de:	4611      	mov	r1, r2
 801c6e0:	4618      	mov	r0, r3
 801c6e2:	f7f2 f8a0 	bl	800e826 <_ZN8touchgfx8Drawable4setXEs>
    }
 801c6e6:	bf00      	nop
 801c6e8:	3708      	adds	r7, #8
 801c6ea:	46bd      	mov	sp, r7
 801c6ec:	bd80      	pop	{r7, pc}

0801c6ee <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE8setIconYEs>:
    void setIconY(int16_t y)
 801c6ee:	b580      	push	{r7, lr}
 801c6f0:	b082      	sub	sp, #8
 801c6f2:	af00      	add	r7, sp, #0
 801c6f4:	6078      	str	r0, [r7, #4]
 801c6f6:	460b      	mov	r3, r1
 801c6f8:	807b      	strh	r3, [r7, #2]
        iconImage.setY(y);
 801c6fa:	687b      	ldr	r3, [r7, #4]
 801c6fc:	337c      	adds	r3, #124	; 0x7c
 801c6fe:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 801c702:	4611      	mov	r1, r2
 801c704:	4618      	mov	r0, r3
 801c706:	f7f2 f89d 	bl	800e844 <_ZN8touchgfx8Drawable4setYEs>
    }
 801c70a:	bf00      	nop
 801c70c:	3708      	adds	r7, #8
 801c70e:	46bd      	mov	sp, r7
 801c710:	bd80      	pop	{r7, pc}
	...

0801c714 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 801c714:	b580      	push	{r7, lr}
 801c716:	b082      	sub	sp, #8
 801c718:	af00      	add	r7, sp, #0
 801c71a:	6078      	str	r0, [r7, #4]
 801c71c:	4a05      	ldr	r2, [pc, #20]	; (801c734 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev+0x20>)
 801c71e:	687b      	ldr	r3, [r7, #4]
 801c720:	601a      	str	r2, [r3, #0]
 801c722:	687b      	ldr	r3, [r7, #4]
 801c724:	4618      	mov	r0, r3
 801c726:	f7ff ff5f 	bl	801c5e8 <_ZN8touchgfx15GenericCallbackIRKNS_23AbstractButtonContainerEvvED1Ev>
 801c72a:	687b      	ldr	r3, [r7, #4]
 801c72c:	4618      	mov	r0, r3
 801c72e:	3708      	adds	r7, #8
 801c730:	46bd      	mov	sp, r7
 801c732:	bd80      	pop	{r7, pc}
 801c734:	0802504c 	.word	0x0802504c

0801c738 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
 801c738:	b580      	push	{r7, lr}
 801c73a:	b082      	sub	sp, #8
 801c73c:	af00      	add	r7, sp, #0
 801c73e:	6078      	str	r0, [r7, #4]
 801c740:	6878      	ldr	r0, [r7, #4]
 801c742:	f7ff ffe7 	bl	801c714 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>
 801c746:	2110      	movs	r1, #16
 801c748:	6878      	ldr	r0, [r7, #4]
 801c74a:	f005 fe6a 	bl	8022422 <_ZdlPvj>
 801c74e:	687b      	ldr	r3, [r7, #4]
 801c750:	4618      	mov	r0, r3
 801c752:	3708      	adds	r7, #8
 801c754:	46bd      	mov	sp, r7
 801c756:	bd80      	pop	{r7, pc}

0801c758 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>:
 801c758:	b580      	push	{r7, lr}
 801c75a:	b082      	sub	sp, #8
 801c75c:	af00      	add	r7, sp, #0
 801c75e:	6078      	str	r0, [r7, #4]
 801c760:	4a05      	ldr	r2, [pc, #20]	; (801c778 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev+0x20>)
 801c762:	687b      	ldr	r3, [r7, #4]
 801c764:	601a      	str	r2, [r3, #0]
 801c766:	687b      	ldr	r3, [r7, #4]
 801c768:	4618      	mov	r0, r3
 801c76a:	f7f2 ff37 	bl	800f5dc <_ZN8touchgfx15GenericCallbackIRKNS_14AbstractButtonEvvED1Ev>
 801c76e:	687b      	ldr	r3, [r7, #4]
 801c770:	4618      	mov	r0, r3
 801c772:	3708      	adds	r7, #8
 801c774:	46bd      	mov	sp, r7
 801c776:	bd80      	pop	{r7, pc}
 801c778:	08025064 	.word	0x08025064

0801c77c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 801c77c:	b580      	push	{r7, lr}
 801c77e:	b082      	sub	sp, #8
 801c780:	af00      	add	r7, sp, #0
 801c782:	6078      	str	r0, [r7, #4]
 801c784:	6878      	ldr	r0, [r7, #4]
 801c786:	f7ff ffe7 	bl	801c758 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvED1Ev>
 801c78a:	2110      	movs	r1, #16
 801c78c:	6878      	ldr	r0, [r7, #4]
 801c78e:	f005 fe48 	bl	8022422 <_ZdlPvj>
 801c792:	687b      	ldr	r3, [r7, #4]
 801c794:	4618      	mov	r0, r3
 801c796:	3708      	adds	r7, #8
 801c798:	46bd      	mov	sp, r7
 801c79a:	bd80      	pop	{r7, pc}

0801c79c <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 801c79c:	b580      	push	{r7, lr}
 801c79e:	b082      	sub	sp, #8
 801c7a0:	af00      	add	r7, sp, #0
 801c7a2:	6078      	str	r0, [r7, #4]
 801c7a4:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801c7a6:	687b      	ldr	r3, [r7, #4]
 801c7a8:	685b      	ldr	r3, [r3, #4]
 801c7aa:	687a      	ldr	r2, [r7, #4]
 801c7ac:	68d2      	ldr	r2, [r2, #12]
 801c7ae:	1052      	asrs	r2, r2, #1
 801c7b0:	1898      	adds	r0, r3, r2
 801c7b2:	687b      	ldr	r3, [r7, #4]
 801c7b4:	68db      	ldr	r3, [r3, #12]
 801c7b6:	f003 0301 	and.w	r3, r3, #1
 801c7ba:	2b00      	cmp	r3, #0
 801c7bc:	d102      	bne.n	801c7c4 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x28>
 801c7be:	687b      	ldr	r3, [r7, #4]
 801c7c0:	689b      	ldr	r3, [r3, #8]
 801c7c2:	e00a      	b.n	801c7da <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_+0x3e>
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	685b      	ldr	r3, [r3, #4]
 801c7c8:	687a      	ldr	r2, [r7, #4]
 801c7ca:	68d2      	ldr	r2, [r2, #12]
 801c7cc:	1052      	asrs	r2, r2, #1
 801c7ce:	4413      	add	r3, r2
 801c7d0:	681b      	ldr	r3, [r3, #0]
 801c7d2:	687a      	ldr	r2, [r7, #4]
 801c7d4:	6892      	ldr	r2, [r2, #8]
 801c7d6:	4413      	add	r3, r2
 801c7d8:	681b      	ldr	r3, [r3, #0]
 801c7da:	6839      	ldr	r1, [r7, #0]
 801c7dc:	4798      	blx	r3
    }
 801c7de:	bf00      	nop
 801c7e0:	3708      	adds	r7, #8
 801c7e2:	46bd      	mov	sp, r7
 801c7e4:	bd80      	pop	{r7, pc}

0801c7e6 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 801c7e6:	b480      	push	{r7}
 801c7e8:	b083      	sub	sp, #12
 801c7ea:	af00      	add	r7, sp, #0
 801c7ec:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801c7ee:	687b      	ldr	r3, [r7, #4]
 801c7f0:	685b      	ldr	r3, [r3, #4]
 801c7f2:	2b00      	cmp	r3, #0
 801c7f4:	d010      	beq.n	801c818 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 801c7f6:	687b      	ldr	r3, [r7, #4]
 801c7f8:	689b      	ldr	r3, [r3, #8]
 801c7fa:	2b00      	cmp	r3, #0
 801c7fc:	d107      	bne.n	801c80e <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 801c7fe:	687b      	ldr	r3, [r7, #4]
 801c800:	68db      	ldr	r3, [r3, #12]
 801c802:	f003 0301 	and.w	r3, r3, #1
 801c806:	2b00      	cmp	r3, #0
 801c808:	d101      	bne.n	801c80e <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x28>
 801c80a:	2301      	movs	r3, #1
 801c80c:	e000      	b.n	801c810 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x2a>
 801c80e:	2300      	movs	r3, #0
 801c810:	2b01      	cmp	r3, #1
 801c812:	d001      	beq.n	801c818 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x32>
 801c814:	2301      	movs	r3, #1
 801c816:	e000      	b.n	801c81a <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x34>
 801c818:	2300      	movs	r3, #0
    }
 801c81a:	4618      	mov	r0, r3
 801c81c:	370c      	adds	r7, #12
 801c81e:	46bd      	mov	sp, r7
 801c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c824:	4770      	bx	lr

0801c826 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 801c826:	b580      	push	{r7, lr}
 801c828:	b082      	sub	sp, #8
 801c82a:	af00      	add	r7, sp, #0
 801c82c:	6078      	str	r0, [r7, #4]
 801c82e:	6039      	str	r1, [r7, #0]
        (pobject->*pmemfun_1)(t1);
 801c830:	687b      	ldr	r3, [r7, #4]
 801c832:	685b      	ldr	r3, [r3, #4]
 801c834:	687a      	ldr	r2, [r7, #4]
 801c836:	68d2      	ldr	r2, [r2, #12]
 801c838:	1052      	asrs	r2, r2, #1
 801c83a:	1898      	adds	r0, r3, r2
 801c83c:	687b      	ldr	r3, [r7, #4]
 801c83e:	68db      	ldr	r3, [r3, #12]
 801c840:	f003 0301 	and.w	r3, r3, #1
 801c844:	2b00      	cmp	r3, #0
 801c846:	d102      	bne.n	801c84e <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x28>
 801c848:	687b      	ldr	r3, [r7, #4]
 801c84a:	689b      	ldr	r3, [r3, #8]
 801c84c:	e00a      	b.n	801c864 <_ZN8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7executeES4_+0x3e>
 801c84e:	687b      	ldr	r3, [r7, #4]
 801c850:	685b      	ldr	r3, [r3, #4]
 801c852:	687a      	ldr	r2, [r7, #4]
 801c854:	68d2      	ldr	r2, [r2, #12]
 801c856:	1052      	asrs	r2, r2, #1
 801c858:	4413      	add	r3, r2
 801c85a:	681b      	ldr	r3, [r3, #0]
 801c85c:	687a      	ldr	r2, [r7, #4]
 801c85e:	6892      	ldr	r2, [r2, #8]
 801c860:	4413      	add	r3, r2
 801c862:	681b      	ldr	r3, [r3, #0]
 801c864:	6839      	ldr	r1, [r7, #0]
 801c866:	4798      	blx	r3
    }
 801c868:	bf00      	nop
 801c86a:	3708      	adds	r7, #8
 801c86c:	46bd      	mov	sp, r7
 801c86e:	bd80      	pop	{r7, pc}

0801c870 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 801c870:	b480      	push	{r7}
 801c872:	b083      	sub	sp, #12
 801c874:	af00      	add	r7, sp, #0
 801c876:	6078      	str	r0, [r7, #4]
        return (pobject != 0) && (pmemfun_1 != 0);
 801c878:	687b      	ldr	r3, [r7, #4]
 801c87a:	685b      	ldr	r3, [r3, #4]
 801c87c:	2b00      	cmp	r3, #0
 801c87e:	d010      	beq.n	801c8a2 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801c880:	687b      	ldr	r3, [r7, #4]
 801c882:	689b      	ldr	r3, [r3, #8]
 801c884:	2b00      	cmp	r3, #0
 801c886:	d107      	bne.n	801c898 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801c888:	687b      	ldr	r3, [r7, #4]
 801c88a:	68db      	ldr	r3, [r3, #12]
 801c88c:	f003 0301 	and.w	r3, r3, #1
 801c890:	2b00      	cmp	r3, #0
 801c892:	d101      	bne.n	801c898 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x28>
 801c894:	2301      	movs	r3, #1
 801c896:	e000      	b.n	801c89a <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x2a>
 801c898:	2300      	movs	r3, #0
 801c89a:	2b01      	cmp	r3, #1
 801c89c:	d001      	beq.n	801c8a2 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x32>
 801c89e:	2301      	movs	r3, #1
 801c8a0:	e000      	b.n	801c8a4 <_ZNK8touchgfx8CallbackI15Screen2ViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x34>
 801c8a2:	2300      	movs	r3, #0
    }
 801c8a4:	4618      	mov	r0, r3
 801c8a6:	370c      	adds	r7, #12
 801c8a8:	46bd      	mov	sp, r7
 801c8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8ae:	4770      	bx	lr

0801c8b0 <_ZN8touchgfx15IconButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE18handleAlphaUpdatedEv>:
    /**
     * @fn virtual void IconButtonStyle::handleAlphaUpdated()
     *
     * @brief Handles the alpha updated.
     */
    virtual void handleAlphaUpdated()
 801c8b0:	b590      	push	{r4, r7, lr}
 801c8b2:	b083      	sub	sp, #12
 801c8b4:	af00      	add	r7, sp, #0
 801c8b6:	6078      	str	r0, [r7, #4]
    {
        iconImage.setAlpha(T::getAlpha());
 801c8b8:	687b      	ldr	r3, [r7, #4]
 801c8ba:	f103 047c 	add.w	r4, r3, #124	; 0x7c
 801c8be:	687b      	ldr	r3, [r7, #4]
 801c8c0:	4618      	mov	r0, r3
 801c8c2:	f7ff f894 	bl	801b9ee <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 801c8c6:	4603      	mov	r3, r0
 801c8c8:	4619      	mov	r1, r3
 801c8ca:	4620      	mov	r0, r4
 801c8cc:	f7f2 fec2 	bl	800f654 <_ZN8touchgfx5Image8setAlphaEh>
        T::handleAlphaUpdated();
 801c8d0:	687b      	ldr	r3, [r7, #4]
 801c8d2:	4618      	mov	r0, r3
 801c8d4:	f000 f804 	bl	801c8e0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>
    }
 801c8d8:	bf00      	nop
 801c8da:	370c      	adds	r7, #12
 801c8dc:	46bd      	mov	sp, r7
 801c8de:	bd90      	pop	{r4, r7, pc}

0801c8e0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
    /**
     * @fn virtual void BoxWithBorderButtonStyle::handleAlphaUpdated()
     *
     * @brief Handles the alpha updated.
     */
    virtual void handleAlphaUpdated()
 801c8e0:	b590      	push	{r4, r7, lr}
 801c8e2:	b083      	sub	sp, #12
 801c8e4:	af00      	add	r7, sp, #0
 801c8e6:	6078      	str	r0, [r7, #4]
    {
        borderBox.setAlpha(T::getAlpha());
 801c8e8:	687b      	ldr	r3, [r7, #4]
 801c8ea:	f103 0434 	add.w	r4, r3, #52	; 0x34
 801c8ee:	687b      	ldr	r3, [r7, #4]
 801c8f0:	4618      	mov	r0, r3
 801c8f2:	f7ff f87c 	bl	801b9ee <_ZNK8touchgfx23AbstractButtonContainer8getAlphaEv>
 801c8f6:	4603      	mov	r3, r0
 801c8f8:	4619      	mov	r1, r3
 801c8fa:	4620      	mov	r0, r4
 801c8fc:	f7ff f98c 	bl	801bc18 <_ZN8touchgfx13BoxWithBorder8setAlphaEh>
        T::handleAlphaUpdated();
 801c900:	687b      	ldr	r3, [r7, #4]
 801c902:	4618      	mov	r0, r3
 801c904:	f7ff f898 	bl	801ba38 <_ZN8touchgfx23AbstractButtonContainer18handleAlphaUpdatedEv>
    }
 801c908:	bf00      	nop
 801c90a:	370c      	adds	r7, #12
 801c90c:	46bd      	mov	sp, r7
 801c90e:	bd90      	pop	{r4, r7, pc}

0801c910 <_ZN14BitmapDatabase11getInstanceEv>:
};

namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
 801c910:	b480      	push	{r7}
 801c912:	af00      	add	r7, sp, #0
    return bitmap_database;
 801c914:	4b02      	ldr	r3, [pc, #8]	; (801c920 <_ZN14BitmapDatabase11getInstanceEv+0x10>)
}
 801c916:	4618      	mov	r0, r3
 801c918:	46bd      	mov	sp, r7
 801c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c91e:	4770      	bx	lr
 801c920:	08025324 	.word	0x08025324

0801c924 <_ZN14BitmapDatabase15getInstanceSizeEv>:
uint16_t getInstanceSize()
{
 801c924:	b480      	push	{r7}
 801c926:	af00      	add	r7, sp, #0
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
 801c928:	2303      	movs	r3, #3
}
 801c92a:	4618      	mov	r0, r3
 801c92c:	46bd      	mov	sp, r7
 801c92e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c932:	4770      	bx	lr

0801c934 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>:
    static void registerTypedTextDatabase(const TypedTextData* data, const Font* const* f, const uint16_t n)
 801c934:	b480      	push	{r7}
 801c936:	b085      	sub	sp, #20
 801c938:	af00      	add	r7, sp, #0
 801c93a:	60f8      	str	r0, [r7, #12]
 801c93c:	60b9      	str	r1, [r7, #8]
 801c93e:	4613      	mov	r3, r2
 801c940:	80fb      	strh	r3, [r7, #6]
        typedTexts = data;
 801c942:	4a07      	ldr	r2, [pc, #28]	; (801c960 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x2c>)
 801c944:	68fb      	ldr	r3, [r7, #12]
 801c946:	6013      	str	r3, [r2, #0]
        fonts = f;
 801c948:	4a06      	ldr	r2, [pc, #24]	; (801c964 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x30>)
 801c94a:	68bb      	ldr	r3, [r7, #8]
 801c94c:	6013      	str	r3, [r2, #0]
        numberOfTypedTexts = n;
 801c94e:	4a06      	ldr	r2, [pc, #24]	; (801c968 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt+0x34>)
 801c950:	88fb      	ldrh	r3, [r7, #6]
 801c952:	8013      	strh	r3, [r2, #0]
    }
 801c954:	bf00      	nop
 801c956:	3714      	adds	r7, #20
 801c958:	46bd      	mov	sp, r7
 801c95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c95e:	4770      	bx	lr
 801c960:	20009d94 	.word	0x20009d94
 801c964:	20009d9c 	.word	0x20009d9c
 801c968:	20009d98 	.word	0x20009d98

0801c96c <_ZN8touchgfx5Texts11setLanguageEt>:

touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
const touchgfx::Unicode::UnicodeChar* const* touchgfx::Texts::currentLanguagePtr = languagesArray[currentLanguage];

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 801c96c:	b5b0      	push	{r4, r5, r7, lr}
 801c96e:	b082      	sub	sp, #8
 801c970:	af00      	add	r7, sp, #0
 801c972:	4603      	mov	r3, r0
 801c974:	80fb      	strh	r3, [r7, #6]
    currentLanguage = id;
 801c976:	4a0d      	ldr	r2, [pc, #52]	; (801c9ac <_ZN8touchgfx5Texts11setLanguageEt+0x40>)
 801c978:	88fb      	ldrh	r3, [r7, #6]
 801c97a:	8013      	strh	r3, [r2, #0]
    currentLanguagePtr = languagesArray[currentLanguage];
 801c97c:	4a0c      	ldr	r2, [pc, #48]	; (801c9b0 <_ZN8touchgfx5Texts11setLanguageEt+0x44>)
 801c97e:	4b0d      	ldr	r3, [pc, #52]	; (801c9b4 <_ZN8touchgfx5Texts11setLanguageEt+0x48>)
 801c980:	601a      	str	r2, [r3, #0]

    touchgfx::TypedText::registerTypedTextDatabase(TypedTextDatabase::getInstance(currentLanguage),
 801c982:	4b0a      	ldr	r3, [pc, #40]	; (801c9ac <_ZN8touchgfx5Texts11setLanguageEt+0x40>)
 801c984:	881b      	ldrh	r3, [r3, #0]
 801c986:	4618      	mov	r0, r3
 801c988:	f000 f838 	bl	801c9fc <_ZN17TypedTextDatabase11getInstanceEt>
 801c98c:	4604      	mov	r4, r0
 801c98e:	f000 f84b 	bl	801ca28 <_ZN17TypedTextDatabase8getFontsEv>
 801c992:	4605      	mov	r5, r0
 801c994:	f000 f840 	bl	801ca18 <_ZN17TypedTextDatabase15getInstanceSizeEv>
 801c998:	4603      	mov	r3, r0
 801c99a:	461a      	mov	r2, r3
 801c99c:	4629      	mov	r1, r5
 801c99e:	4620      	mov	r0, r4
 801c9a0:	f7ff ffc8 	bl	801c934 <_ZN8touchgfx9TypedText25registerTypedTextDatabaseEPKNS0_13TypedTextDataEPKPKNS_4FontEt>
                                                   TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
}
 801c9a4:	bf00      	nop
 801c9a6:	3708      	adds	r7, #8
 801c9a8:	46bd      	mov	sp, r7
 801c9aa:	bdb0      	pop	{r4, r5, r7, pc}
 801c9ac:	20009c94 	.word	0x20009c94
 801c9b0:	080424c8 	.word	0x080424c8
 801c9b4:	20009c98 	.word	0x20009c98

0801c9b8 <_Z41__static_initialization_and_destruction_0ii>:
 801c9b8:	b480      	push	{r7}
 801c9ba:	b083      	sub	sp, #12
 801c9bc:	af00      	add	r7, sp, #0
 801c9be:	6078      	str	r0, [r7, #4]
 801c9c0:	6039      	str	r1, [r7, #0]
 801c9c2:	687b      	ldr	r3, [r7, #4]
 801c9c4:	2b01      	cmp	r3, #1
 801c9c6:	d107      	bne.n	801c9d8 <_Z41__static_initialization_and_destruction_0ii+0x20>
 801c9c8:	683b      	ldr	r3, [r7, #0]
 801c9ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c9ce:	4293      	cmp	r3, r2
 801c9d0:	d102      	bne.n	801c9d8 <_Z41__static_initialization_and_destruction_0ii+0x20>
const touchgfx::Unicode::UnicodeChar* const* touchgfx::Texts::currentLanguagePtr = languagesArray[currentLanguage];
 801c9d2:	4a04      	ldr	r2, [pc, #16]	; (801c9e4 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 801c9d4:	4b04      	ldr	r3, [pc, #16]	; (801c9e8 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 801c9d6:	601a      	str	r2, [r3, #0]
}
 801c9d8:	bf00      	nop
 801c9da:	370c      	adds	r7, #12
 801c9dc:	46bd      	mov	sp, r7
 801c9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c9e2:	4770      	bx	lr
 801c9e4:	080424c8 	.word	0x080424c8
 801c9e8:	20009c98 	.word	0x20009c98

0801c9ec <_GLOBAL__sub_I__ZN8touchgfx4Font22getStringWidthFunctionE>:
 801c9ec:	b580      	push	{r7, lr}
 801c9ee:	af00      	add	r7, sp, #0
 801c9f0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801c9f4:	2001      	movs	r0, #1
 801c9f6:	f7ff ffdf 	bl	801c9b8 <_Z41__static_initialization_and_destruction_0ii>
 801c9fa:	bd80      	pop	{r7, pc}

0801c9fc <_ZN17TypedTextDatabase11getInstanceEt>:
};

namespace TypedTextDatabase
{
const touchgfx::TypedText::TypedTextData* getInstance(touchgfx::LanguageId id)
{
 801c9fc:	b480      	push	{r7}
 801c9fe:	b083      	sub	sp, #12
 801ca00:	af00      	add	r7, sp, #0
 801ca02:	4603      	mov	r3, r0
 801ca04:	80fb      	strh	r3, [r7, #6]
    return typedTextDatabaseArray[id];
 801ca06:	4b03      	ldr	r3, [pc, #12]	; (801ca14 <_ZN17TypedTextDatabase11getInstanceEt+0x18>)
}
 801ca08:	4618      	mov	r0, r3
 801ca0a:	370c      	adds	r7, #12
 801ca0c:	46bd      	mov	sp, r7
 801ca0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca12:	4770      	bx	lr
 801ca14:	080424e4 	.word	0x080424e4

0801ca18 <_ZN17TypedTextDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
 801ca18:	b480      	push	{r7}
 801ca1a:	af00      	add	r7, sp, #0
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
 801ca1c:	2307      	movs	r3, #7
}
 801ca1e:	4618      	mov	r0, r3
 801ca20:	46bd      	mov	sp, r7
 801ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca26:	4770      	bx	lr

0801ca28 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font* const* getFonts()
{
 801ca28:	b480      	push	{r7}
 801ca2a:	af00      	add	r7, sp, #0
    return _fonts;
 801ca2c:	4b02      	ldr	r3, [pc, #8]	; (801ca38 <_ZN17TypedTextDatabase8getFontsEv+0x10>)
}
 801ca2e:	4618      	mov	r0, r3
 801ca30:	46bd      	mov	sp, r7
 801ca32:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ca36:	4770      	bx	lr
 801ca38:	20009c9c 	.word	0x20009c9c

0801ca3c <_Z41__static_initialization_and_destruction_0ii>:
}
 801ca3c:	b580      	push	{r7, lr}
 801ca3e:	b082      	sub	sp, #8
 801ca40:	af00      	add	r7, sp, #0
 801ca42:	6078      	str	r0, [r7, #4]
 801ca44:	6039      	str	r1, [r7, #0]
 801ca46:	687b      	ldr	r3, [r7, #4]
 801ca48:	2b01      	cmp	r3, #1
 801ca4a:	d113      	bne.n	801ca74 <_Z41__static_initialization_and_destruction_0ii+0x38>
 801ca4c:	683b      	ldr	r3, [r7, #0]
 801ca4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ca52:	4293      	cmp	r3, r2
 801ca54:	d10e      	bne.n	801ca74 <_Z41__static_initialization_and_destruction_0ii+0x38>
    &(getFont_verdana_20_4bpp()),
 801ca56:	f7fd faa3 	bl	8019fa0 <_Z23getFont_verdana_20_4bppv>
 801ca5a:	4602      	mov	r2, r0
};
 801ca5c:	4b07      	ldr	r3, [pc, #28]	; (801ca7c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801ca5e:	601a      	str	r2, [r3, #0]
    &(getFont_verdana_40_4bpp()),
 801ca60:	f7fd fadc 	bl	801a01c <_Z23getFont_verdana_40_4bppv>
 801ca64:	4602      	mov	r2, r0
};
 801ca66:	4b05      	ldr	r3, [pc, #20]	; (801ca7c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801ca68:	605a      	str	r2, [r3, #4]
    &(getFont_verdana_10_4bpp())
 801ca6a:	f7fd fa5b 	bl	8019f24 <_Z23getFont_verdana_10_4bppv>
 801ca6e:	4602      	mov	r2, r0
};
 801ca70:	4b02      	ldr	r3, [pc, #8]	; (801ca7c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 801ca72:	609a      	str	r2, [r3, #8]
}
 801ca74:	bf00      	nop
 801ca76:	3708      	adds	r7, #8
 801ca78:	46bd      	mov	sp, r7
 801ca7a:	bd80      	pop	{r7, pc}
 801ca7c:	20009c9c 	.word	0x20009c9c

0801ca80 <_GLOBAL__sub_I__ZN17TypedTextDatabase11getInstanceEt>:
 801ca80:	b580      	push	{r7, lr}
 801ca82:	af00      	add	r7, sp, #0
 801ca84:	f64f 71ff 	movw	r1, #65535	; 0xffff
 801ca88:	2001      	movs	r0, #1
 801ca8a:	f7ff ffd7 	bl	801ca3c <_Z41__static_initialization_and_destruction_0ii>
 801ca8e:	bd80      	pop	{r7, pc}

0801ca90 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 801ca90:	b580      	push	{r7, lr}
 801ca92:	b084      	sub	sp, #16
 801ca94:	af00      	add	r7, sp, #0
 801ca96:	60f8      	str	r0, [r7, #12]
 801ca98:	60b9      	str	r1, [r7, #8]
 801ca9a:	607a      	str	r2, [r7, #4]
    : FrontendApplicationBase(m, heap)
 801ca9c:	68fb      	ldr	r3, [r7, #12]
 801ca9e:	687a      	ldr	r2, [r7, #4]
 801caa0:	68b9      	ldr	r1, [r7, #8]
 801caa2:	4618      	mov	r0, r3
 801caa4:	f7fd fc82 	bl	801a3ac <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 801caa8:	4a03      	ldr	r2, [pc, #12]	; (801cab8 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x28>)
 801caaa:	68fb      	ldr	r3, [r7, #12]
 801caac:	601a      	str	r2, [r3, #0]
{
}
 801caae:	68fb      	ldr	r3, [r7, #12]
 801cab0:	4618      	mov	r0, r3
 801cab2:	3710      	adds	r7, #16
 801cab4:	46bd      	mov	sp, r7
 801cab6:	bd80      	pop	{r7, pc}
 801cab8:	08024800 	.word	0x08024800

0801cabc <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 801cabc:	b480      	push	{r7}
 801cabe:	b083      	sub	sp, #12
 801cac0:	af00      	add	r7, sp, #0
 801cac2:	6078      	str	r0, [r7, #4]
 801cac4:	687b      	ldr	r3, [r7, #4]
 801cac6:	2200      	movs	r2, #0
 801cac8:	601a      	str	r2, [r3, #0]
{
}
 801caca:	687b      	ldr	r3, [r7, #4]
 801cacc:	4618      	mov	r0, r3
 801cace:	370c      	adds	r7, #12
 801cad0:	46bd      	mov	sp, r7
 801cad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cad6:	4770      	bx	lr

0801cad8 <_ZN5Model4tickEv>:

void Model::tick()
{
 801cad8:	b480      	push	{r7}
 801cada:	b083      	sub	sp, #12
 801cadc:	af00      	add	r7, sp, #0
 801cade:	6078      	str	r0, [r7, #4]
}
 801cae0:	bf00      	nop
 801cae2:	370c      	adds	r7, #12
 801cae4:	46bd      	mov	sp, r7
 801cae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801caea:	4770      	bx	lr

0801caec <_ZN8touchgfx9Presenter8activateEv>:
     * @brief Place initialization code for the Presenter here.
     *
     *        The activate function is called automatically when a screen transition causes
     *        this Presenter to become active. Place initialization code for the Presenter here.
     */
    virtual void activate()
 801caec:	b480      	push	{r7}
 801caee:	b083      	sub	sp, #12
 801caf0:	af00      	add	r7, sp, #0
 801caf2:	6078      	str	r0, [r7, #4]
    {
    }
 801caf4:	bf00      	nop
 801caf6:	370c      	adds	r7, #12
 801caf8:	46bd      	mov	sp, r7
 801cafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cafe:	4770      	bx	lr

0801cb00 <_ZN8touchgfx9Presenter10deactivateEv>:
     * @brief Place cleanup code for the Presenter here.
     *
     *        The deactivate function is called automatically when a screen transition causes
     *        this Presenter to become inactive. Place cleanup code for the Presenter here.
     */
    virtual void deactivate()
 801cb00:	b480      	push	{r7}
 801cb02:	b083      	sub	sp, #12
 801cb04:	af00      	add	r7, sp, #0
 801cb06:	6078      	str	r0, [r7, #4]
    {
    }
 801cb08:	bf00      	nop
 801cb0a:	370c      	adds	r7, #12
 801cb0c:	46bd      	mov	sp, r7
 801cb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb12:	4770      	bx	lr

0801cb14 <_ZN8touchgfx9PresenterD1Ev>:
     *
     * @brief Destructor.
     *
     *        Destructor.
     */
    virtual ~Presenter()
 801cb14:	b480      	push	{r7}
 801cb16:	b083      	sub	sp, #12
 801cb18:	af00      	add	r7, sp, #0
 801cb1a:	6078      	str	r0, [r7, #4]
    {
 801cb1c:	4a04      	ldr	r2, [pc, #16]	; (801cb30 <_ZN8touchgfx9PresenterD1Ev+0x1c>)
 801cb1e:	687b      	ldr	r3, [r7, #4]
 801cb20:	601a      	str	r2, [r3, #0]
    }
 801cb22:	687b      	ldr	r3, [r7, #4]
 801cb24:	4618      	mov	r0, r3
 801cb26:	370c      	adds	r7, #12
 801cb28:	46bd      	mov	sp, r7
 801cb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb2e:	4770      	bx	lr
 801cb30:	080253a0 	.word	0x080253a0

0801cb34 <_ZN8touchgfx9PresenterD0Ev>:
    virtual ~Presenter()
 801cb34:	b580      	push	{r7, lr}
 801cb36:	b082      	sub	sp, #8
 801cb38:	af00      	add	r7, sp, #0
 801cb3a:	6078      	str	r0, [r7, #4]
    }
 801cb3c:	6878      	ldr	r0, [r7, #4]
 801cb3e:	f7ff ffe9 	bl	801cb14 <_ZN8touchgfx9PresenterD1Ev>
 801cb42:	2104      	movs	r1, #4
 801cb44:	6878      	ldr	r0, [r7, #4]
 801cb46:	f005 fc6c 	bl	8022422 <_ZdlPvj>
 801cb4a:	687b      	ldr	r3, [r7, #4]
 801cb4c:	4618      	mov	r0, r3
 801cb4e:	3708      	adds	r7, #8
 801cb50:	46bd      	mov	sp, r7
 801cb52:	bd80      	pop	{r7, pc}

0801cb54 <_ZN8touchgfx9PresenterC1Ev>:
     *
     * @brief Default constructor.
     *
     *        Default constructor.
     */
    Presenter()
 801cb54:	b480      	push	{r7}
 801cb56:	b083      	sub	sp, #12
 801cb58:	af00      	add	r7, sp, #0
 801cb5a:	6078      	str	r0, [r7, #4]
    {
 801cb5c:	4a04      	ldr	r2, [pc, #16]	; (801cb70 <_ZN8touchgfx9PresenterC1Ev+0x1c>)
 801cb5e:	687b      	ldr	r3, [r7, #4]
 801cb60:	601a      	str	r2, [r3, #0]
    }
 801cb62:	687b      	ldr	r3, [r7, #4]
 801cb64:	4618      	mov	r0, r3
 801cb66:	370c      	adds	r7, #12
 801cb68:	46bd      	mov	sp, r7
 801cb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb6e:	4770      	bx	lr
 801cb70:	080253a0 	.word	0x080253a0

0801cb74 <_ZN13ModelListenerC1Ev>:
    ModelListener() : model(0) {}
 801cb74:	b480      	push	{r7}
 801cb76:	b083      	sub	sp, #12
 801cb78:	af00      	add	r7, sp, #0
 801cb7a:	6078      	str	r0, [r7, #4]
 801cb7c:	4a06      	ldr	r2, [pc, #24]	; (801cb98 <_ZN13ModelListenerC1Ev+0x24>)
 801cb7e:	687b      	ldr	r3, [r7, #4]
 801cb80:	601a      	str	r2, [r3, #0]
 801cb82:	687b      	ldr	r3, [r7, #4]
 801cb84:	2200      	movs	r2, #0
 801cb86:	605a      	str	r2, [r3, #4]
 801cb88:	687b      	ldr	r3, [r7, #4]
 801cb8a:	4618      	mov	r0, r3
 801cb8c:	370c      	adds	r7, #12
 801cb8e:	46bd      	mov	sp, r7
 801cb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cb94:	4770      	bx	lr
 801cb96:	bf00      	nop
 801cb98:	08025390 	.word	0x08025390

0801cb9c <_ZN13ModelListenerD1Ev>:
    virtual ~ModelListener() {}
 801cb9c:	b480      	push	{r7}
 801cb9e:	b083      	sub	sp, #12
 801cba0:	af00      	add	r7, sp, #0
 801cba2:	6078      	str	r0, [r7, #4]
 801cba4:	4a04      	ldr	r2, [pc, #16]	; (801cbb8 <_ZN13ModelListenerD1Ev+0x1c>)
 801cba6:	687b      	ldr	r3, [r7, #4]
 801cba8:	601a      	str	r2, [r3, #0]
 801cbaa:	687b      	ldr	r3, [r7, #4]
 801cbac:	4618      	mov	r0, r3
 801cbae:	370c      	adds	r7, #12
 801cbb0:	46bd      	mov	sp, r7
 801cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cbb6:	4770      	bx	lr
 801cbb8:	08025390 	.word	0x08025390

0801cbbc <_ZN13ModelListenerD0Ev>:
 801cbbc:	b580      	push	{r7, lr}
 801cbbe:	b082      	sub	sp, #8
 801cbc0:	af00      	add	r7, sp, #0
 801cbc2:	6078      	str	r0, [r7, #4]
 801cbc4:	6878      	ldr	r0, [r7, #4]
 801cbc6:	f7ff ffe9 	bl	801cb9c <_ZN13ModelListenerD1Ev>
 801cbca:	2108      	movs	r1, #8
 801cbcc:	6878      	ldr	r0, [r7, #4]
 801cbce:	f005 fc28 	bl	8022422 <_ZdlPvj>
 801cbd2:	687b      	ldr	r3, [r7, #4]
 801cbd4:	4618      	mov	r0, r3
 801cbd6:	3708      	adds	r7, #8
 801cbd8:	46bd      	mov	sp, r7
 801cbda:	bd80      	pop	{r7, pc}

0801cbdc <_ZN16Screen1PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen1Presenter() {};
 801cbdc:	b580      	push	{r7, lr}
 801cbde:	b082      	sub	sp, #8
 801cbe0:	af00      	add	r7, sp, #0
 801cbe2:	6078      	str	r0, [r7, #4]
 801cbe4:	4a09      	ldr	r2, [pc, #36]	; (801cc0c <_ZN16Screen1PresenterD1Ev+0x30>)
 801cbe6:	687b      	ldr	r3, [r7, #4]
 801cbe8:	601a      	str	r2, [r3, #0]
 801cbea:	4a09      	ldr	r2, [pc, #36]	; (801cc10 <_ZN16Screen1PresenterD1Ev+0x34>)
 801cbec:	687b      	ldr	r3, [r7, #4]
 801cbee:	605a      	str	r2, [r3, #4]
 801cbf0:	687b      	ldr	r3, [r7, #4]
 801cbf2:	3304      	adds	r3, #4
 801cbf4:	4618      	mov	r0, r3
 801cbf6:	f7ff ffd1 	bl	801cb9c <_ZN13ModelListenerD1Ev>
 801cbfa:	687b      	ldr	r3, [r7, #4]
 801cbfc:	4618      	mov	r0, r3
 801cbfe:	f7ff ff89 	bl	801cb14 <_ZN8touchgfx9PresenterD1Ev>
 801cc02:	687b      	ldr	r3, [r7, #4]
 801cc04:	4618      	mov	r0, r3
 801cc06:	3708      	adds	r7, #8
 801cc08:	46bd      	mov	sp, r7
 801cc0a:	bd80      	pop	{r7, pc}
 801cc0c:	08025368 	.word	0x08025368
 801cc10:	08025380 	.word	0x08025380

0801cc14 <_ZThn4_N16Screen1PresenterD1Ev>:
 801cc14:	f1a0 0004 	sub.w	r0, r0, #4
 801cc18:	e7e0      	b.n	801cbdc <_ZN16Screen1PresenterD1Ev>
 801cc1a:	bf00      	nop

0801cc1c <_ZN16Screen1PresenterD0Ev>:
 801cc1c:	b580      	push	{r7, lr}
 801cc1e:	b082      	sub	sp, #8
 801cc20:	af00      	add	r7, sp, #0
 801cc22:	6078      	str	r0, [r7, #4]
 801cc24:	6878      	ldr	r0, [r7, #4]
 801cc26:	f7ff ffd9 	bl	801cbdc <_ZN16Screen1PresenterD1Ev>
 801cc2a:	2110      	movs	r1, #16
 801cc2c:	6878      	ldr	r0, [r7, #4]
 801cc2e:	f005 fbf8 	bl	8022422 <_ZdlPvj>
 801cc32:	687b      	ldr	r3, [r7, #4]
 801cc34:	4618      	mov	r0, r3
 801cc36:	3708      	adds	r7, #8
 801cc38:	46bd      	mov	sp, r7
 801cc3a:	bd80      	pop	{r7, pc}

0801cc3c <_ZThn4_N16Screen1PresenterD0Ev>:
 801cc3c:	f1a0 0004 	sub.w	r0, r0, #4
 801cc40:	e7ec      	b.n	801cc1c <_ZN16Screen1PresenterD0Ev>
	...

0801cc44 <_ZN16Screen1PresenterC1ER11Screen1View>:
#include <gui/screen1_screen/Screen1View.hpp>
#include <gui/screen1_screen/Screen1Presenter.hpp>

Screen1Presenter::Screen1Presenter(Screen1View& v)
 801cc44:	b580      	push	{r7, lr}
 801cc46:	b082      	sub	sp, #8
 801cc48:	af00      	add	r7, sp, #0
 801cc4a:	6078      	str	r0, [r7, #4]
 801cc4c:	6039      	str	r1, [r7, #0]
    : view(v)
 801cc4e:	687b      	ldr	r3, [r7, #4]
 801cc50:	4618      	mov	r0, r3
 801cc52:	f7ff ff7f 	bl	801cb54 <_ZN8touchgfx9PresenterC1Ev>
 801cc56:	687b      	ldr	r3, [r7, #4]
 801cc58:	3304      	adds	r3, #4
 801cc5a:	4618      	mov	r0, r3
 801cc5c:	f7ff ff8a 	bl	801cb74 <_ZN13ModelListenerC1Ev>
 801cc60:	4a06      	ldr	r2, [pc, #24]	; (801cc7c <_ZN16Screen1PresenterC1ER11Screen1View+0x38>)
 801cc62:	687b      	ldr	r3, [r7, #4]
 801cc64:	601a      	str	r2, [r3, #0]
 801cc66:	4a06      	ldr	r2, [pc, #24]	; (801cc80 <_ZN16Screen1PresenterC1ER11Screen1View+0x3c>)
 801cc68:	687b      	ldr	r3, [r7, #4]
 801cc6a:	605a      	str	r2, [r3, #4]
 801cc6c:	687b      	ldr	r3, [r7, #4]
 801cc6e:	683a      	ldr	r2, [r7, #0]
 801cc70:	60da      	str	r2, [r3, #12]
{
}
 801cc72:	687b      	ldr	r3, [r7, #4]
 801cc74:	4618      	mov	r0, r3
 801cc76:	3708      	adds	r7, #8
 801cc78:	46bd      	mov	sp, r7
 801cc7a:	bd80      	pop	{r7, pc}
 801cc7c:	08025368 	.word	0x08025368
 801cc80:	08025380 	.word	0x08025380

0801cc84 <_ZN16Screen1Presenter8activateEv>:

void Screen1Presenter::activate()
{
 801cc84:	b480      	push	{r7}
 801cc86:	b083      	sub	sp, #12
 801cc88:	af00      	add	r7, sp, #0
 801cc8a:	6078      	str	r0, [r7, #4]

}
 801cc8c:	bf00      	nop
 801cc8e:	370c      	adds	r7, #12
 801cc90:	46bd      	mov	sp, r7
 801cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc96:	4770      	bx	lr

0801cc98 <_ZN16Screen1Presenter10deactivateEv>:

void Screen1Presenter::deactivate()
{
 801cc98:	b480      	push	{r7}
 801cc9a:	b083      	sub	sp, #12
 801cc9c:	af00      	add	r7, sp, #0
 801cc9e:	6078      	str	r0, [r7, #4]

}
 801cca0:	bf00      	nop
 801cca2:	370c      	adds	r7, #12
 801cca4:	46bd      	mov	sp, r7
 801cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ccaa:	4770      	bx	lr

0801ccac <_ZN11Screen1ViewD1Ev>:

class Screen1View : public Screen1ViewBase
{
public:
    Screen1View();
    virtual ~Screen1View() {}
 801ccac:	b580      	push	{r7, lr}
 801ccae:	b082      	sub	sp, #8
 801ccb0:	af00      	add	r7, sp, #0
 801ccb2:	6078      	str	r0, [r7, #4]
 801ccb4:	4a08      	ldr	r2, [pc, #32]	; (801ccd8 <_ZN11Screen1ViewD1Ev+0x2c>)
 801ccb6:	687b      	ldr	r3, [r7, #4]
 801ccb8:	601a      	str	r2, [r3, #0]
 801ccba:	687b      	ldr	r3, [r7, #4]
 801ccbc:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 801ccc0:	4618      	mov	r0, r3
 801ccc2:	f7f2 fc59 	bl	800f578 <_ZN8touchgfx6ButtonD1Ev>
 801ccc6:	687b      	ldr	r3, [r7, #4]
 801ccc8:	4618      	mov	r0, r3
 801ccca:	f7fe fb4d 	bl	801b368 <_ZN15Screen1ViewBaseD1Ev>
 801ccce:	687b      	ldr	r3, [r7, #4]
 801ccd0:	4618      	mov	r0, r3
 801ccd2:	3708      	adds	r7, #8
 801ccd4:	46bd      	mov	sp, r7
 801ccd6:	bd80      	pop	{r7, pc}
 801ccd8:	080253b8 	.word	0x080253b8

0801ccdc <_ZN11Screen1ViewD0Ev>:
 801ccdc:	b580      	push	{r7, lr}
 801ccde:	b082      	sub	sp, #8
 801cce0:	af00      	add	r7, sp, #0
 801cce2:	6078      	str	r0, [r7, #4]
 801cce4:	6878      	ldr	r0, [r7, #4]
 801cce6:	f7ff ffe1 	bl	801ccac <_ZN11Screen1ViewD1Ev>
 801ccea:	f44f 7109 	mov.w	r1, #548	; 0x224
 801ccee:	6878      	ldr	r0, [r7, #4]
 801ccf0:	f005 fb97 	bl	8022422 <_ZdlPvj>
 801ccf4:	687b      	ldr	r3, [r7, #4]
 801ccf6:	4618      	mov	r0, r3
 801ccf8:	3708      	adds	r7, #8
 801ccfa:	46bd      	mov	sp, r7
 801ccfc:	bd80      	pop	{r7, pc}

0801ccfe <_ZN11Screen1View8initUARTEv>:
#include <gui/screen1_screen/Screen1View.hpp>


// disabled
void Screen1View::initUART(){
 801ccfe:	b480      	push	{r7}
 801cd00:	b083      	sub	sp, #12
 801cd02:	af00      	add	r7, sp, #0
 801cd04:	6078      	str	r0, [r7, #4]

}
 801cd06:	bf00      	nop
 801cd08:	370c      	adds	r7, #12
 801cd0a:	46bd      	mov	sp, r7
 801cd0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cd10:	4770      	bx	lr
	...

0801cd14 <_ZN11Screen1ViewC1Ev>:


Screen1View::Screen1View()
 801cd14:	b580      	push	{r7, lr}
 801cd16:	b082      	sub	sp, #8
 801cd18:	af00      	add	r7, sp, #0
 801cd1a:	6078      	str	r0, [r7, #4]
 801cd1c:	687b      	ldr	r3, [r7, #4]
 801cd1e:	4618      	mov	r0, r3
 801cd20:	f7fe fb86 	bl	801b430 <_ZN15Screen1ViewBaseC1Ev>
 801cd24:	4a06      	ldr	r2, [pc, #24]	; (801cd40 <_ZN11Screen1ViewC1Ev+0x2c>)
 801cd26:	687b      	ldr	r3, [r7, #4]
 801cd28:	601a      	str	r2, [r3, #0]
 801cd2a:	687b      	ldr	r3, [r7, #4]
 801cd2c:	f503 73f8 	add.w	r3, r3, #496	; 0x1f0
 801cd30:	4618      	mov	r0, r3
 801cd32:	f7f2 fbfd 	bl	800f530 <_ZN8touchgfx6ButtonC1Ev>
{

}
 801cd36:	687b      	ldr	r3, [r7, #4]
 801cd38:	4618      	mov	r0, r3
 801cd3a:	3708      	adds	r7, #8
 801cd3c:	46bd      	mov	sp, r7
 801cd3e:	bd80      	pop	{r7, pc}
 801cd40:	080253b8 	.word	0x080253b8

0801cd44 <_ZN11Screen1View11setupScreenEv>:

void Screen1View::setupScreen()
{
 801cd44:	b580      	push	{r7, lr}
 801cd46:	b082      	sub	sp, #8
 801cd48:	af00      	add	r7, sp, #0
 801cd4a:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::setupScreen();
 801cd4c:	687b      	ldr	r3, [r7, #4]
 801cd4e:	4618      	mov	r0, r3
 801cd50:	f7fe fd1e 	bl	801b790 <_ZN15Screen1ViewBase11setupScreenEv>
    touchgfx_printf("screen 1 loaded \n");
}
 801cd54:	bf00      	nop
 801cd56:	3708      	adds	r7, #8
 801cd58:	46bd      	mov	sp, r7
 801cd5a:	bd80      	pop	{r7, pc}

0801cd5c <_ZN11Screen1View14tearDownScreenEv>:

void Screen1View::tearDownScreen()
{
 801cd5c:	b580      	push	{r7, lr}
 801cd5e:	b082      	sub	sp, #8
 801cd60:	af00      	add	r7, sp, #0
 801cd62:	6078      	str	r0, [r7, #4]
    Screen1ViewBase::tearDownScreen();
 801cd64:	687b      	ldr	r3, [r7, #4]
 801cd66:	4618      	mov	r0, r3
 801cd68:	f7fe fa68 	bl	801b23c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 801cd6c:	bf00      	nop
 801cd6e:	3708      	adds	r7, #8
 801cd70:	46bd      	mov	sp, r7
 801cd72:	bd80      	pop	{r7, pc}

0801cd74 <_ZN11Screen1View12button3clickEv>:

/* uart init button */


void Screen1View::button3click(){
 801cd74:	b580      	push	{r7, lr}
 801cd76:	b092      	sub	sp, #72	; 0x48
 801cd78:	af02      	add	r7, sp, #8
 801cd7a:	6078      	str	r0, [r7, #4]
	touchgfx_printf("inint uart\n");

	/* print out int and text on UI*/
	 int some_int = 50;
 801cd7c:	2332      	movs	r3, #50	; 0x32
 801cd7e:	63fb      	str	r3, [r7, #60]	; 0x3c
	 Unicode::UnicodeChar list[TEXTAREA3_SIZE] = {0x42,0xE1, 0xE9, 0}; // tmp Unicode char array
 801cd80:	f107 0308 	add.w	r3, r7, #8
 801cd84:	2230      	movs	r2, #48	; 0x30
 801cd86:	2100      	movs	r1, #0
 801cd88:	4618      	mov	r0, r3
 801cd8a:	f005 fbe2 	bl	8022552 <memset>
 801cd8e:	2342      	movs	r3, #66	; 0x42
 801cd90:	813b      	strh	r3, [r7, #8]
 801cd92:	23e1      	movs	r3, #225	; 0xe1
 801cd94:	817b      	strh	r3, [r7, #10]
 801cd96:	23e9      	movs	r3, #233	; 0xe9
 801cd98:	81bb      	strh	r3, [r7, #12]

	 const char* tmpp = "Hello World! "; // string to print
 801cd9a:	4b12      	ldr	r3, [pc, #72]	; (801cde4 <_ZN11Screen1View12button3clickEv+0x70>)
 801cd9c:	63bb      	str	r3, [r7, #56]	; 0x38

	 Unicode::strncpy(list, tmpp, TEXTAREA3_SIZE); // copt string to array.
 801cd9e:	f107 0308 	add.w	r3, r7, #8
 801cda2:	2218      	movs	r2, #24
 801cda4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801cda6:	4618      	mov	r0, r3
 801cda8:	f002 fe60 	bl	801fa6c <_ZN8touchgfx7Unicode7strncpyEPtPKct>

	 Unicode::snprintf(textArea3Buffer, TEXTAREA3_SIZE, "%s %d", list, some_int); // write out
 801cdac:	687b      	ldr	r3, [r7, #4]
 801cdae:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 801cdb2:	f107 0208 	add.w	r2, r7, #8
 801cdb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801cdb8:	9300      	str	r3, [sp, #0]
 801cdba:	4613      	mov	r3, r2
 801cdbc:	4a0a      	ldr	r2, [pc, #40]	; (801cde8 <_ZN11Screen1View12button3clickEv+0x74>)
 801cdbe:	2118      	movs	r1, #24
 801cdc0:	f003 f950 	bl	8020064 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
	 textArea3.invalidate();
 801cdc4:	687b      	ldr	r3, [r7, #4]
 801cdc6:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 801cdca:	4618      	mov	r0, r3
 801cdcc:	f002 f8b3 	bl	801ef36 <_ZNK8touchgfx8Drawable10invalidateEv>

#ifndef SIMULATOR
	initUART();
 801cdd0:	687b      	ldr	r3, [r7, #4]
 801cdd2:	681b      	ldr	r3, [r3, #0]
 801cdd4:	3334      	adds	r3, #52	; 0x34
 801cdd6:	681b      	ldr	r3, [r3, #0]
 801cdd8:	6878      	ldr	r0, [r7, #4]
 801cdda:	4798      	blx	r3

#endif
}
 801cddc:	bf00      	nop
 801cdde:	3740      	adds	r7, #64	; 0x40
 801cde0:	46bd      	mov	sp, r7
 801cde2:	bd80      	pop	{r7, pc}
 801cde4:	08023eb0 	.word	0x08023eb0
 801cde8:	08023ec0 	.word	0x08023ec0

0801cdec <_ZN11Screen1View12button2clickEv>:

void Screen1View::button2click()
{
 801cdec:	b480      	push	{r7}
 801cdee:	b083      	sub	sp, #12
 801cdf0:	af00      	add	r7, sp, #0
 801cdf2:	6078      	str	r0, [r7, #4]
}
 801cdf4:	bf00      	nop
 801cdf6:	370c      	adds	r7, #12
 801cdf8:	46bd      	mov	sp, r7
 801cdfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cdfe:	4770      	bx	lr

0801ce00 <_ZN16Screen2PresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~Screen2Presenter() {};
 801ce00:	b580      	push	{r7, lr}
 801ce02:	b082      	sub	sp, #8
 801ce04:	af00      	add	r7, sp, #0
 801ce06:	6078      	str	r0, [r7, #4]
 801ce08:	4a09      	ldr	r2, [pc, #36]	; (801ce30 <_ZN16Screen2PresenterD1Ev+0x30>)
 801ce0a:	687b      	ldr	r3, [r7, #4]
 801ce0c:	601a      	str	r2, [r3, #0]
 801ce0e:	4a09      	ldr	r2, [pc, #36]	; (801ce34 <_ZN16Screen2PresenterD1Ev+0x34>)
 801ce10:	687b      	ldr	r3, [r7, #4]
 801ce12:	605a      	str	r2, [r3, #4]
 801ce14:	687b      	ldr	r3, [r7, #4]
 801ce16:	3304      	adds	r3, #4
 801ce18:	4618      	mov	r0, r3
 801ce1a:	f7ff febf 	bl	801cb9c <_ZN13ModelListenerD1Ev>
 801ce1e:	687b      	ldr	r3, [r7, #4]
 801ce20:	4618      	mov	r0, r3
 801ce22:	f7ff fe77 	bl	801cb14 <_ZN8touchgfx9PresenterD1Ev>
 801ce26:	687b      	ldr	r3, [r7, #4]
 801ce28:	4618      	mov	r0, r3
 801ce2a:	3708      	adds	r7, #8
 801ce2c:	46bd      	mov	sp, r7
 801ce2e:	bd80      	pop	{r7, pc}
 801ce30:	080253f8 	.word	0x080253f8
 801ce34:	08025410 	.word	0x08025410

0801ce38 <_ZThn4_N16Screen2PresenterD1Ev>:
 801ce38:	f1a0 0004 	sub.w	r0, r0, #4
 801ce3c:	e7e0      	b.n	801ce00 <_ZN16Screen2PresenterD1Ev>
 801ce3e:	bf00      	nop

0801ce40 <_ZN16Screen2PresenterD0Ev>:
 801ce40:	b580      	push	{r7, lr}
 801ce42:	b082      	sub	sp, #8
 801ce44:	af00      	add	r7, sp, #0
 801ce46:	6078      	str	r0, [r7, #4]
 801ce48:	6878      	ldr	r0, [r7, #4]
 801ce4a:	f7ff ffd9 	bl	801ce00 <_ZN16Screen2PresenterD1Ev>
 801ce4e:	2110      	movs	r1, #16
 801ce50:	6878      	ldr	r0, [r7, #4]
 801ce52:	f005 fae6 	bl	8022422 <_ZdlPvj>
 801ce56:	687b      	ldr	r3, [r7, #4]
 801ce58:	4618      	mov	r0, r3
 801ce5a:	3708      	adds	r7, #8
 801ce5c:	46bd      	mov	sp, r7
 801ce5e:	bd80      	pop	{r7, pc}

0801ce60 <_ZThn4_N16Screen2PresenterD0Ev>:
 801ce60:	f1a0 0004 	sub.w	r0, r0, #4
 801ce64:	e7ec      	b.n	801ce40 <_ZN16Screen2PresenterD0Ev>
	...

0801ce68 <_ZN16Screen2PresenterC1ER11Screen2View>:
#include <gui/screen2_screen/Screen2View.hpp>
#include <gui/screen2_screen/Screen2Presenter.hpp>

Screen2Presenter::Screen2Presenter(Screen2View& v)
 801ce68:	b580      	push	{r7, lr}
 801ce6a:	b082      	sub	sp, #8
 801ce6c:	af00      	add	r7, sp, #0
 801ce6e:	6078      	str	r0, [r7, #4]
 801ce70:	6039      	str	r1, [r7, #0]
    : view(v)
 801ce72:	687b      	ldr	r3, [r7, #4]
 801ce74:	4618      	mov	r0, r3
 801ce76:	f7ff fe6d 	bl	801cb54 <_ZN8touchgfx9PresenterC1Ev>
 801ce7a:	687b      	ldr	r3, [r7, #4]
 801ce7c:	3304      	adds	r3, #4
 801ce7e:	4618      	mov	r0, r3
 801ce80:	f7ff fe78 	bl	801cb74 <_ZN13ModelListenerC1Ev>
 801ce84:	4a06      	ldr	r2, [pc, #24]	; (801cea0 <_ZN16Screen2PresenterC1ER11Screen2View+0x38>)
 801ce86:	687b      	ldr	r3, [r7, #4]
 801ce88:	601a      	str	r2, [r3, #0]
 801ce8a:	4a06      	ldr	r2, [pc, #24]	; (801cea4 <_ZN16Screen2PresenterC1ER11Screen2View+0x3c>)
 801ce8c:	687b      	ldr	r3, [r7, #4]
 801ce8e:	605a      	str	r2, [r3, #4]
 801ce90:	687b      	ldr	r3, [r7, #4]
 801ce92:	683a      	ldr	r2, [r7, #0]
 801ce94:	60da      	str	r2, [r3, #12]
{
}
 801ce96:	687b      	ldr	r3, [r7, #4]
 801ce98:	4618      	mov	r0, r3
 801ce9a:	3708      	adds	r7, #8
 801ce9c:	46bd      	mov	sp, r7
 801ce9e:	bd80      	pop	{r7, pc}
 801cea0:	080253f8 	.word	0x080253f8
 801cea4:	08025410 	.word	0x08025410

0801cea8 <_ZN16Screen2Presenter8activateEv>:

void Screen2Presenter::activate()
{
 801cea8:	b480      	push	{r7}
 801ceaa:	b083      	sub	sp, #12
 801ceac:	af00      	add	r7, sp, #0
 801ceae:	6078      	str	r0, [r7, #4]

}
 801ceb0:	bf00      	nop
 801ceb2:	370c      	adds	r7, #12
 801ceb4:	46bd      	mov	sp, r7
 801ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ceba:	4770      	bx	lr

0801cebc <_ZN16Screen2Presenter10deactivateEv>:

void Screen2Presenter::deactivate()
{
 801cebc:	b480      	push	{r7}
 801cebe:	b083      	sub	sp, #12
 801cec0:	af00      	add	r7, sp, #0
 801cec2:	6078      	str	r0, [r7, #4]

}
 801cec4:	bf00      	nop
 801cec6:	370c      	adds	r7, #12
 801cec8:	46bd      	mov	sp, r7
 801ceca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cece:	4770      	bx	lr

0801ced0 <_ZN11Screen2ViewD1Ev>:

class Screen2View : public Screen2ViewBase
{
public:
    Screen2View();
    virtual ~Screen2View() {}
 801ced0:	b580      	push	{r7, lr}
 801ced2:	b082      	sub	sp, #8
 801ced4:	af00      	add	r7, sp, #0
 801ced6:	6078      	str	r0, [r7, #4]
 801ced8:	4a05      	ldr	r2, [pc, #20]	; (801cef0 <_ZN11Screen2ViewD1Ev+0x20>)
 801ceda:	687b      	ldr	r3, [r7, #4]
 801cedc:	601a      	str	r2, [r3, #0]
 801cede:	687b      	ldr	r3, [r7, #4]
 801cee0:	4618      	mov	r0, r3
 801cee2:	f7fe ff41 	bl	801bd68 <_ZN15Screen2ViewBaseD1Ev>
 801cee6:	687b      	ldr	r3, [r7, #4]
 801cee8:	4618      	mov	r0, r3
 801ceea:	3708      	adds	r7, #8
 801ceec:	46bd      	mov	sp, r7
 801ceee:	bd80      	pop	{r7, pc}
 801cef0:	08025420 	.word	0x08025420

0801cef4 <_ZN11Screen2ViewD0Ev>:
 801cef4:	b580      	push	{r7, lr}
 801cef6:	b082      	sub	sp, #8
 801cef8:	af00      	add	r7, sp, #0
 801cefa:	6078      	str	r0, [r7, #4]
 801cefc:	6878      	ldr	r0, [r7, #4]
 801cefe:	f7ff ffe7 	bl	801ced0 <_ZN11Screen2ViewD1Ev>
 801cf02:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 801cf06:	6878      	ldr	r0, [r7, #4]
 801cf08:	f005 fa8b 	bl	8022422 <_ZdlPvj>
 801cf0c:	687b      	ldr	r3, [r7, #4]
 801cf0e:	4618      	mov	r0, r3
 801cf10:	3708      	adds	r7, #8
 801cf12:	46bd      	mov	sp, r7
 801cf14:	bd80      	pop	{r7, pc}
	...

0801cf18 <_ZN11Screen2ViewC1Ev>:
/*----------------------------------------------------------------------------*/

#endif


Screen2View::Screen2View()
 801cf18:	b580      	push	{r7, lr}
 801cf1a:	b082      	sub	sp, #8
 801cf1c:	af00      	add	r7, sp, #0
 801cf1e:	6078      	str	r0, [r7, #4]
 801cf20:	687b      	ldr	r3, [r7, #4]
 801cf22:	4618      	mov	r0, r3
 801cf24:	f7fe ff8a 	bl	801be3c <_ZN15Screen2ViewBaseC1Ev>
 801cf28:	4a03      	ldr	r2, [pc, #12]	; (801cf38 <_ZN11Screen2ViewC1Ev+0x20>)
 801cf2a:	687b      	ldr	r3, [r7, #4]
 801cf2c:	601a      	str	r2, [r3, #0]
{

}
 801cf2e:	687b      	ldr	r3, [r7, #4]
 801cf30:	4618      	mov	r0, r3
 801cf32:	3708      	adds	r7, #8
 801cf34:	46bd      	mov	sp, r7
 801cf36:	bd80      	pop	{r7, pc}
 801cf38:	08025420 	.word	0x08025420

0801cf3c <_ZN11Screen2View11setupScreenEv>:

void Screen2View::setupScreen()
{
 801cf3c:	b580      	push	{r7, lr}
 801cf3e:	b082      	sub	sp, #8
 801cf40:	af00      	add	r7, sp, #0
 801cf42:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::setupScreen();
 801cf44:	687b      	ldr	r3, [r7, #4]
 801cf46:	4618      	mov	r0, r3
 801cf48:	f7ff f934 	bl	801c1b4 <_ZN15Screen2ViewBase11setupScreenEv>
    touchgfx_printf("screen 2 loaded \n");
}
 801cf4c:	bf00      	nop
 801cf4e:	3708      	adds	r7, #8
 801cf50:	46bd      	mov	sp, r7
 801cf52:	bd80      	pop	{r7, pc}

0801cf54 <_ZN11Screen2View14tearDownScreenEv>:

void Screen2View::tearDownScreen()
{
 801cf54:	b580      	push	{r7, lr}
 801cf56:	b082      	sub	sp, #8
 801cf58:	af00      	add	r7, sp, #0
 801cf5a:	6078      	str	r0, [r7, #4]
    Screen2ViewBase::tearDownScreen();
 801cf5c:	687b      	ldr	r3, [r7, #4]
 801cf5e:	4618      	mov	r0, r3
 801cf60:	f7fe f96c 	bl	801b23c <_ZN8touchgfx6Screen14tearDownScreenEv>
}
 801cf64:	bf00      	nop
 801cf66:	3708      	adds	r7, #8
 801cf68:	46bd      	mov	sp, r7
 801cf6a:	bd80      	pop	{r7, pc}

0801cf6c <_ZN11Screen2View17uart_init_clickedEv>:

void Screen2View::uart_init_clicked(){
 801cf6c:	b580      	push	{r7, lr}
 801cf6e:	b082      	sub	sp, #8
 801cf70:	af00      	add	r7, sp, #0
 801cf72:	6078      	str	r0, [r7, #4]
	touchgfx_printf("init uart\n");

#ifndef SIMULATOR
  /* UART configuration */
    UartHandle.Instance        = USART1;
 801cf74:	4b10      	ldr	r3, [pc, #64]	; (801cfb8 <_ZN11Screen2View17uart_init_clickedEv+0x4c>)
 801cf76:	4a11      	ldr	r2, [pc, #68]	; (801cfbc <_ZN11Screen2View17uart_init_clickedEv+0x50>)
 801cf78:	601a      	str	r2, [r3, #0]
    UartHandle.Init.BaudRate   = 9600;
 801cf7a:	4b0f      	ldr	r3, [pc, #60]	; (801cfb8 <_ZN11Screen2View17uart_init_clickedEv+0x4c>)
 801cf7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 801cf80:	605a      	str	r2, [r3, #4]
    UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
 801cf82:	4b0d      	ldr	r3, [pc, #52]	; (801cfb8 <_ZN11Screen2View17uart_init_clickedEv+0x4c>)
 801cf84:	2200      	movs	r2, #0
 801cf86:	609a      	str	r2, [r3, #8]
    UartHandle.Init.StopBits   = UART_STOPBITS_1;
 801cf88:	4b0b      	ldr	r3, [pc, #44]	; (801cfb8 <_ZN11Screen2View17uart_init_clickedEv+0x4c>)
 801cf8a:	2200      	movs	r2, #0
 801cf8c:	60da      	str	r2, [r3, #12]
    UartHandle.Init.Parity     = UART_PARITY_NONE;
 801cf8e:	4b0a      	ldr	r3, [pc, #40]	; (801cfb8 <_ZN11Screen2View17uart_init_clickedEv+0x4c>)
 801cf90:	2200      	movs	r2, #0
 801cf92:	611a      	str	r2, [r3, #16]
    UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
 801cf94:	4b08      	ldr	r3, [pc, #32]	; (801cfb8 <_ZN11Screen2View17uart_init_clickedEv+0x4c>)
 801cf96:	2200      	movs	r2, #0
 801cf98:	619a      	str	r2, [r3, #24]
    UartHandle.Init.Mode       = UART_MODE_TX;
 801cf9a:	4b07      	ldr	r3, [pc, #28]	; (801cfb8 <_ZN11Screen2View17uart_init_clickedEv+0x4c>)
 801cf9c:	2208      	movs	r2, #8
 801cf9e:	615a      	str	r2, [r3, #20]

    /* Initialize UART peripheral */
    HAL_UART_Init(&UartHandle);
 801cfa0:	4805      	ldr	r0, [pc, #20]	; (801cfb8 <_ZN11Screen2View17uart_init_clickedEv+0x4c>)
 801cfa2:	f7ec ffa9 	bl	8009ef8 <HAL_UART_Init>

    /* Configures COM1 port */
    BSP_COM_Init(COM1, &UartHandle);
 801cfa6:	4904      	ldr	r1, [pc, #16]	; (801cfb8 <_ZN11Screen2View17uart_init_clickedEv+0x4c>)
 801cfa8:	2000      	movs	r0, #0
 801cfaa:	f7f6 fed3 	bl	8013d54 <BSP_COM_Init>
#endif

}
 801cfae:	bf00      	nop
 801cfb0:	3708      	adds	r7, #8
 801cfb2:	46bd      	mov	sp, r7
 801cfb4:	bd80      	pop	{r7, pc}
 801cfb6:	bf00      	nop
 801cfb8:	20009ca8 	.word	0x20009ca8
 801cfbc:	40011000 	.word	0x40011000

0801cfc0 <_ZN11Screen2View17uart_send_clickedEv>:


void Screen2View::uart_send_clicked(){
 801cfc0:	b580      	push	{r7, lr}
 801cfc2:	b082      	sub	sp, #8
 801cfc4:	af00      	add	r7, sp, #0
 801cfc6:	6078      	str	r0, [r7, #4]

	touchgfx_printf("hello and send uart text\n");
#ifndef SIMULATOR

	BSP_LED_On(LED_GREEN);
 801cfc8:	2000      	movs	r0, #0
 801cfca:	f7f6 feab 	bl	8013d24 <BSP_LED_On>
	/* Place your implementation of fputc here */
	  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
	 // HAL_UART_Transmit(&UartHandle, (uint8_t *)&ch, 1, 0xFFFF);
	 HAL_UART_Transmit(&UartHandle, (uint8_t*)aTxEndMessage,  TXENDMESSAGESIZE, 0xFF);
 801cfce:	23ff      	movs	r3, #255	; 0xff
 801cfd0:	221e      	movs	r2, #30
 801cfd2:	4904      	ldr	r1, [pc, #16]	; (801cfe4 <_ZN11Screen2View17uart_send_clickedEv+0x24>)
 801cfd4:	4804      	ldr	r0, [pc, #16]	; (801cfe8 <_ZN11Screen2View17uart_send_clickedEv+0x28>)
 801cfd6:	f7ec ffdd 	bl	8009f94 <HAL_UART_Transmit>

#endif



}
 801cfda:	bf00      	nop
 801cfdc:	3708      	adds	r7, #8
 801cfde:	46bd      	mov	sp, r7
 801cfe0:	bd80      	pop	{r7, pc}
 801cfe2:	bf00      	nop
 801cfe4:	20000084 	.word	0x20000084
 801cfe8:	20009ca8 	.word	0x20009ca8

0801cfec <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 801cfec:	8880      	ldrh	r0, [r0, #4]
 801cfee:	4770      	bx	lr

0801cff0 <_ZN8touchgfx17AbstractPartition5clearEv>:
 801cff0:	2300      	movs	r3, #0
 801cff2:	8083      	strh	r3, [r0, #4]
 801cff4:	4770      	bx	lr
	...

0801cff8 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 801cff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cffa:	6803      	ldr	r3, [r0, #0]
 801cffc:	460e      	mov	r6, r1
 801cffe:	2100      	movs	r1, #0
 801d000:	4604      	mov	r4, r0
 801d002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d004:	4798      	blx	r3
 801d006:	4605      	mov	r5, r0
 801d008:	6823      	ldr	r3, [r4, #0]
 801d00a:	4620      	mov	r0, r4
 801d00c:	1b75      	subs	r5, r6, r5
 801d00e:	6a1b      	ldr	r3, [r3, #32]
 801d010:	b2ad      	uxth	r5, r5
 801d012:	4798      	blx	r3
 801d014:	88a3      	ldrh	r3, [r4, #4]
 801d016:	fbb5 f0f0 	udiv	r0, r5, r0
 801d01a:	4298      	cmp	r0, r3
 801d01c:	b285      	uxth	r5, r0
 801d01e:	db05      	blt.n	801d02c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x34>
 801d020:	4b0e      	ldr	r3, [pc, #56]	; (801d05c <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x64>)
 801d022:	211e      	movs	r1, #30
 801d024:	4a0e      	ldr	r2, [pc, #56]	; (801d060 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801d026:	480f      	ldr	r0, [pc, #60]	; (801d064 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x6c>)
 801d028:	f005 fa18 	bl	802245c <__assert_func>
 801d02c:	6823      	ldr	r3, [r4, #0]
 801d02e:	2100      	movs	r1, #0
 801d030:	4620      	mov	r0, r4
 801d032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d034:	4798      	blx	r3
 801d036:	4607      	mov	r7, r0
 801d038:	6823      	ldr	r3, [r4, #0]
 801d03a:	4620      	mov	r0, r4
 801d03c:	1bf6      	subs	r6, r6, r7
 801d03e:	6a1b      	ldr	r3, [r3, #32]
 801d040:	b2b6      	uxth	r6, r6
 801d042:	4798      	blx	r3
 801d044:	fbb6 f3f0 	udiv	r3, r6, r0
 801d048:	fb03 6610 	mls	r6, r3, r0, r6
 801d04c:	b11e      	cbz	r6, 801d056 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x5e>
 801d04e:	4b06      	ldr	r3, [pc, #24]	; (801d068 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x70>)
 801d050:	211f      	movs	r1, #31
 801d052:	4a03      	ldr	r2, [pc, #12]	; (801d060 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x68>)
 801d054:	e7e7      	b.n	801d026 <_ZN8touchgfx17AbstractPartition7indexOfEPKv+0x2e>
 801d056:	4628      	mov	r0, r5
 801d058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d05a:	bf00      	nop
 801d05c:	08025454 	.word	0x08025454
 801d060:	080255c2 	.word	0x080255c2
 801d064:	08025469 	.word	0x08025469
 801d068:	08025497 	.word	0x08025497

0801d06c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 801d06c:	b538      	push	{r3, r4, r5, lr}
 801d06e:	6803      	ldr	r3, [r0, #0]
 801d070:	460d      	mov	r5, r1
 801d072:	4604      	mov	r4, r0
 801d074:	6a1b      	ldr	r3, [r3, #32]
 801d076:	4798      	blx	r3
 801d078:	4285      	cmp	r5, r0
 801d07a:	d905      	bls.n	801d088 <_ZN8touchgfx17AbstractPartition8allocateEt+0x1c>
 801d07c:	4b0c      	ldr	r3, [pc, #48]	; (801d0b0 <_ZN8touchgfx17AbstractPartition8allocateEt+0x44>)
 801d07e:	212f      	movs	r1, #47	; 0x2f
 801d080:	4a0c      	ldr	r2, [pc, #48]	; (801d0b4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801d082:	480d      	ldr	r0, [pc, #52]	; (801d0b8 <_ZN8touchgfx17AbstractPartition8allocateEt+0x4c>)
 801d084:	f005 f9ea 	bl	802245c <__assert_func>
 801d088:	6823      	ldr	r3, [r4, #0]
 801d08a:	4620      	mov	r0, r4
 801d08c:	88a5      	ldrh	r5, [r4, #4]
 801d08e:	69db      	ldr	r3, [r3, #28]
 801d090:	4798      	blx	r3
 801d092:	4285      	cmp	r5, r0
 801d094:	db03      	blt.n	801d09e <_ZN8touchgfx17AbstractPartition8allocateEt+0x32>
 801d096:	4b09      	ldr	r3, [pc, #36]	; (801d0bc <_ZN8touchgfx17AbstractPartition8allocateEt+0x50>)
 801d098:	2130      	movs	r1, #48	; 0x30
 801d09a:	4a06      	ldr	r2, [pc, #24]	; (801d0b4 <_ZN8touchgfx17AbstractPartition8allocateEt+0x48>)
 801d09c:	e7f1      	b.n	801d082 <_ZN8touchgfx17AbstractPartition8allocateEt+0x16>
 801d09e:	6823      	ldr	r3, [r4, #0]
 801d0a0:	4620      	mov	r0, r4
 801d0a2:	88a1      	ldrh	r1, [r4, #4]
 801d0a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d0a6:	4798      	blx	r3
 801d0a8:	88a3      	ldrh	r3, [r4, #4]
 801d0aa:	3301      	adds	r3, #1
 801d0ac:	80a3      	strh	r3, [r4, #4]
 801d0ae:	bd38      	pop	{r3, r4, r5, pc}
 801d0b0:	08025511 	.word	0x08025511
 801d0b4:	08025605 	.word	0x08025605
 801d0b8:	08025469 	.word	0x08025469
 801d0bc:	08025528 	.word	0x08025528

0801d0c0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 801d0c0:	b570      	push	{r4, r5, r6, lr}
 801d0c2:	6803      	ldr	r3, [r0, #0]
 801d0c4:	4616      	mov	r6, r2
 801d0c6:	4604      	mov	r4, r0
 801d0c8:	460d      	mov	r5, r1
 801d0ca:	6a1b      	ldr	r3, [r3, #32]
 801d0cc:	4798      	blx	r3
 801d0ce:	4286      	cmp	r6, r0
 801d0d0:	d905      	bls.n	801d0de <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x1e>
 801d0d2:	4b06      	ldr	r3, [pc, #24]	; (801d0ec <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x2c>)
 801d0d4:	2139      	movs	r1, #57	; 0x39
 801d0d6:	4a06      	ldr	r2, [pc, #24]	; (801d0f0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x30>)
 801d0d8:	4806      	ldr	r0, [pc, #24]	; (801d0f4 <_ZN8touchgfx17AbstractPartition10allocateAtEtt+0x34>)
 801d0da:	f005 f9bf 	bl	802245c <__assert_func>
 801d0de:	6823      	ldr	r3, [r4, #0]
 801d0e0:	4629      	mov	r1, r5
 801d0e2:	4620      	mov	r0, r4
 801d0e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d0e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d0ea:	4718      	bx	r3
 801d0ec:	08025511 	.word	0x08025511
 801d0f0:	08025578 	.word	0x08025578
 801d0f4:	08025469 	.word	0x08025469

0801d0f8 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 801d0f8:	4770      	bx	lr
	...

0801d0fc <_ZN8touchgfx17AbstractPartitionC1Ev>:
 801d0fc:	4a02      	ldr	r2, [pc, #8]	; (801d108 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 801d0fe:	6002      	str	r2, [r0, #0]
 801d100:	2200      	movs	r2, #0
 801d102:	8082      	strh	r2, [r0, #4]
 801d104:	4770      	bx	lr
 801d106:	bf00      	nop
 801d108:	0802554c 	.word	0x0802554c

0801d10c <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
 801d10c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 801d110:	4770      	bx	lr

0801d112 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 801d112:	2301      	movs	r3, #1
 801d114:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 801d118:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
 801d11c:	4770      	bx	lr

0801d11e <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 801d11e:	2301      	movs	r3, #1
 801d120:	f880 3047 	strb.w	r3, [r0, #71]	; 0x47
 801d124:	f880 3059 	strb.w	r3, [r0, #89]	; 0x59
 801d128:	4770      	bx	lr

0801d12a <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801d12a:	6843      	ldr	r3, [r0, #4]
 801d12c:	2201      	movs	r2, #1
 801d12e:	725a      	strb	r2, [r3, #9]
 801d130:	6840      	ldr	r0, [r0, #4]
 801d132:	6803      	ldr	r3, [r0, #0]
 801d134:	691b      	ldr	r3, [r3, #16]
 801d136:	4718      	bx	r3

0801d138 <_ZN8touchgfx3HAL8flushDMAEv>:
 801d138:	6840      	ldr	r0, [r0, #4]
 801d13a:	6803      	ldr	r3, [r0, #0]
 801d13c:	689b      	ldr	r3, [r3, #8]
 801d13e:	4718      	bx	r3

0801d140 <_ZN8touchgfx3HAL17registerTextCacheEPtt>:
 801d140:	4770      	bx	lr

0801d142 <_ZN8touchgfx3HAL15cacheTextStringEPKt>:
 801d142:	4608      	mov	r0, r1
 801d144:	4770      	bx	lr

0801d146 <_ZN8touchgfx3HAL22blitSetTransparencyKeyEt>:
 801d146:	4770      	bx	lr

0801d148 <_ZN8touchgfx3HAL10beginFrameEv>:
 801d148:	4b04      	ldr	r3, [pc, #16]	; (801d15c <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 801d14a:	781b      	ldrb	r3, [r3, #0]
 801d14c:	b123      	cbz	r3, 801d158 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 801d14e:	f890 005a 	ldrb.w	r0, [r0, #90]	; 0x5a
 801d152:	f080 0001 	eor.w	r0, r0, #1
 801d156:	4770      	bx	lr
 801d158:	2001      	movs	r0, #1
 801d15a:	4770      	bx	lr
 801d15c:	20009d32 	.word	0x20009d32

0801d160 <_ZN8touchgfx3HAL8endFrameEv>:
 801d160:	b510      	push	{r4, lr}
 801d162:	4604      	mov	r4, r0
 801d164:	6840      	ldr	r0, [r0, #4]
 801d166:	6803      	ldr	r3, [r0, #0]
 801d168:	689b      	ldr	r3, [r3, #8]
 801d16a:	4798      	blx	r3
 801d16c:	f894 3059 	ldrb.w	r3, [r4, #89]	; 0x59
 801d170:	b113      	cbz	r3, 801d178 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 801d172:	2301      	movs	r3, #1
 801d174:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
 801d178:	bd10      	pop	{r4, pc}

0801d17a <_ZN8touchgfx3HAL9taskEntryEv>:
 801d17a:	b508      	push	{r3, lr}
 801d17c:	6803      	ldr	r3, [r0, #0]
 801d17e:	4604      	mov	r4, r0
 801d180:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801d182:	4798      	blx	r3
 801d184:	6823      	ldr	r3, [r4, #0]
 801d186:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d188:	4620      	mov	r0, r4
 801d18a:	4798      	blx	r3
 801d18c:	f7f3 ff7c 	bl	8011088 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
 801d190:	6823      	ldr	r3, [r4, #0]
 801d192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801d194:	e7f8      	b.n	801d188 <_ZN8touchgfx3HAL9taskEntryEv+0xe>
	...

0801d198 <_ZN8touchgfx3HAL4tickEv>:
 801d198:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801d19a:	6803      	ldr	r3, [r0, #0]
 801d19c:	4604      	mov	r4, r0
 801d19e:	4d5d      	ldr	r5, [pc, #372]	; (801d314 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801d1a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801d1a4:	4798      	blx	r3
 801d1a6:	2800      	cmp	r0, #0
 801d1a8:	f000 8092 	beq.w	801d2d0 <_ZN8touchgfx3HAL4tickEv+0x138>
 801d1ac:	2001      	movs	r0, #1
 801d1ae:	2600      	movs	r6, #0
 801d1b0:	f7f8 fafc 	bl	80157ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801d1b4:	f894 3056 	ldrb.w	r3, [r4, #86]	; 0x56
 801d1b8:	f884 6047 	strb.w	r6, [r4, #71]	; 0x47
 801d1bc:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
 801d1c0:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
 801d1c4:	f884 6056 	strb.w	r6, [r4, #86]	; 0x56
 801d1c8:	b133      	cbz	r3, 801d1d8 <_ZN8touchgfx3HAL4tickEv+0x40>
 801d1ca:	6823      	ldr	r3, [r4, #0]
 801d1cc:	4620      	mov	r0, r4
 801d1ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801d1d2:	4798      	blx	r3
 801d1d4:	f884 6065 	strb.w	r6, [r4, #101]	; 0x65
 801d1d8:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 801d1dc:	2601      	movs	r6, #1
 801d1de:	6862      	ldr	r2, [r4, #4]
 801d1e0:	f083 0301 	eor.w	r3, r3, #1
 801d1e4:	702e      	strb	r6, [r5, #0]
 801d1e6:	7253      	strb	r3, [r2, #9]
 801d1e8:	f001 fb00 	bl	801e7ec <_ZN8touchgfx11Application11getInstanceEv>
 801d1ec:	6803      	ldr	r3, [r0, #0]
 801d1ee:	4631      	mov	r1, r6
 801d1f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d1f2:	4798      	blx	r3
 801d1f4:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 801d1f8:	b90b      	cbnz	r3, 801d1fe <_ZN8touchgfx3HAL4tickEv+0x66>
 801d1fa:	f884 6057 	strb.w	r6, [r4, #87]	; 0x57
 801d1fe:	f001 faf5 	bl	801e7ec <_ZN8touchgfx11Application11getInstanceEv>
 801d202:	6803      	ldr	r3, [r0, #0]
 801d204:	695b      	ldr	r3, [r3, #20]
 801d206:	4798      	blx	r3
 801d208:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801d20a:	6803      	ldr	r3, [r0, #0]
 801d20c:	691b      	ldr	r3, [r3, #16]
 801d20e:	4798      	blx	r3
 801d210:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
 801d214:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
 801d218:	3b01      	subs	r3, #1
 801d21a:	b2db      	uxtb	r3, r3
 801d21c:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
 801d220:	b10a      	cbz	r2, 801d226 <_ZN8touchgfx3HAL4tickEv+0x8e>
 801d222:	2b00      	cmp	r3, #0
 801d224:	d1eb      	bne.n	801d1fe <_ZN8touchgfx3HAL4tickEv+0x66>
 801d226:	4a3c      	ldr	r2, [pc, #240]	; (801d318 <_ZN8touchgfx3HAL4tickEv+0x180>)
 801d228:	f994 1054 	ldrsb.w	r1, [r4, #84]	; 0x54
 801d22c:	7813      	ldrb	r3, [r2, #0]
 801d22e:	3301      	adds	r3, #1
 801d230:	b25b      	sxtb	r3, r3
 801d232:	4299      	cmp	r1, r3
 801d234:	7013      	strb	r3, [r2, #0]
 801d236:	dc10      	bgt.n	801d25a <_ZN8touchgfx3HAL4tickEv+0xc2>
 801d238:	2300      	movs	r3, #0
 801d23a:	68e0      	ldr	r0, [r4, #12]
 801d23c:	a902      	add	r1, sp, #8
 801d23e:	7013      	strb	r3, [r2, #0]
 801d240:	aa03      	add	r2, sp, #12
 801d242:	6803      	ldr	r3, [r0, #0]
 801d244:	68db      	ldr	r3, [r3, #12]
 801d246:	4798      	blx	r3
 801d248:	6823      	ldr	r3, [r4, #0]
 801d24a:	2800      	cmp	r0, #0
 801d24c:	d04c      	beq.n	801d2e8 <_ZN8touchgfx3HAL4tickEv+0x150>
 801d24e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801d252:	4620      	mov	r0, r4
 801d254:	9a03      	ldr	r2, [sp, #12]
 801d256:	9902      	ldr	r1, [sp, #8]
 801d258:	4798      	blx	r3
 801d25a:	2300      	movs	r3, #0
 801d25c:	6960      	ldr	r0, [r4, #20]
 801d25e:	f88d 3007 	strb.w	r3, [sp, #7]
 801d262:	b130      	cbz	r0, 801d272 <_ZN8touchgfx3HAL4tickEv+0xda>
 801d264:	6803      	ldr	r3, [r0, #0]
 801d266:	f10d 0107 	add.w	r1, sp, #7
 801d26a:	68db      	ldr	r3, [r3, #12]
 801d26c:	4798      	blx	r3
 801d26e:	2800      	cmp	r0, #0
 801d270:	d149      	bne.n	801d306 <_ZN8touchgfx3HAL4tickEv+0x16e>
 801d272:	f104 0018 	add.w	r0, r4, #24
 801d276:	f005 f827 	bl	80222c8 <_ZN8touchgfx8Gestures4tickEv>
 801d27a:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 801d27e:	b30b      	cbz	r3, 801d2c4 <_ZN8touchgfx3HAL4tickEv+0x12c>
 801d280:	6920      	ldr	r0, [r4, #16]
 801d282:	6803      	ldr	r3, [r0, #0]
 801d284:	691b      	ldr	r3, [r3, #16]
 801d286:	4798      	blx	r3
 801d288:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801d28a:	4606      	mov	r6, r0
 801d28c:	b903      	cbnz	r3, 801d290 <_ZN8touchgfx3HAL4tickEv+0xf8>
 801d28e:	6620      	str	r0, [r4, #96]	; 0x60
 801d290:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801d292:	4a22      	ldr	r2, [pc, #136]	; (801d31c <_ZN8touchgfx3HAL4tickEv+0x184>)
 801d294:	1af3      	subs	r3, r6, r3
 801d296:	4293      	cmp	r3, r2
 801d298:	d914      	bls.n	801d2c4 <_ZN8touchgfx3HAL4tickEv+0x12c>
 801d29a:	6920      	ldr	r0, [r4, #16]
 801d29c:	6803      	ldr	r3, [r0, #0]
 801d29e:	699b      	ldr	r3, [r3, #24]
 801d2a0:	4798      	blx	r3
 801d2a2:	6e23      	ldr	r3, [r4, #96]	; 0x60
 801d2a4:	2264      	movs	r2, #100	; 0x64
 801d2a6:	1af3      	subs	r3, r6, r3
 801d2a8:	fbb3 f3f2 	udiv	r3, r3, r2
 801d2ac:	fbb0 f0f3 	udiv	r0, r0, r3
 801d2b0:	2800      	cmp	r0, #0
 801d2b2:	dc1e      	bgt.n	801d2f2 <_ZN8touchgfx3HAL4tickEv+0x15a>
 801d2b4:	f884 2055 	strb.w	r2, [r4, #85]	; 0x55
 801d2b8:	6920      	ldr	r0, [r4, #16]
 801d2ba:	2100      	movs	r1, #0
 801d2bc:	6803      	ldr	r3, [r0, #0]
 801d2be:	69db      	ldr	r3, [r3, #28]
 801d2c0:	4798      	blx	r3
 801d2c2:	6626      	str	r6, [r4, #96]	; 0x60
 801d2c4:	f001 fa92 	bl	801e7ec <_ZN8touchgfx11Application11getInstanceEv>
 801d2c8:	6803      	ldr	r3, [r0, #0]
 801d2ca:	2100      	movs	r1, #0
 801d2cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d2ce:	4798      	blx	r3
 801d2d0:	6823      	ldr	r3, [r4, #0]
 801d2d2:	4620      	mov	r0, r4
 801d2d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801d2d8:	4798      	blx	r3
 801d2da:	2001      	movs	r0, #1
 801d2dc:	f7f8 fa71 	bl	80157c2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801d2e0:	2300      	movs	r3, #0
 801d2e2:	702b      	strb	r3, [r5, #0]
 801d2e4:	b004      	add	sp, #16
 801d2e6:	bd70      	pop	{r4, r5, r6, pc}
 801d2e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801d2ec:	4620      	mov	r0, r4
 801d2ee:	4798      	blx	r3
 801d2f0:	e7b3      	b.n	801d25a <_ZN8touchgfx3HAL4tickEv+0xc2>
 801d2f2:	2863      	cmp	r0, #99	; 0x63
 801d2f4:	bfcb      	itete	gt
 801d2f6:	2300      	movgt	r3, #0
 801d2f8:	f1c0 0064 	rsble	r0, r0, #100	; 0x64
 801d2fc:	f884 3055 	strbgt.w	r3, [r4, #85]	; 0x55
 801d300:	f884 0055 	strble.w	r0, [r4, #85]	; 0x55
 801d304:	e7d8      	b.n	801d2b8 <_ZN8touchgfx3HAL4tickEv+0x120>
 801d306:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 801d308:	f89d 1007 	ldrb.w	r1, [sp, #7]
 801d30c:	6803      	ldr	r3, [r0, #0]
 801d30e:	68db      	ldr	r3, [r3, #12]
 801d310:	4798      	blx	r3
 801d312:	e7ae      	b.n	801d272 <_ZN8touchgfx3HAL4tickEv+0xda>
 801d314:	20009d38 	.word	0x20009d38
 801d318:	20009d39 	.word	0x20009d39
 801d31c:	05f5e100 	.word	0x05f5e100

0801d320 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 801d320:	f7f3 be4a 	b.w	8010fb8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801d324 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 801d324:	6481      	str	r1, [r0, #72]	; 0x48
 801d326:	3018      	adds	r0, #24
 801d328:	f004 bfcc 	b.w	80222c4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0801d32c <_ZN8touchgfx3HAL5touchEll>:
 801d32c:	b530      	push	{r4, r5, lr}
 801d32e:	b085      	sub	sp, #20
 801d330:	4604      	mov	r4, r0
 801d332:	a802      	add	r0, sp, #8
 801d334:	9102      	str	r1, [sp, #8]
 801d336:	9203      	str	r2, [sp, #12]
 801d338:	f001 f888 	bl	801e44c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 801d33c:	a903      	add	r1, sp, #12
 801d33e:	a802      	add	r0, sp, #8
 801d340:	f001 f8d2 	bl	801e4e8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 801d344:	f894 105b 	ldrb.w	r1, [r4, #91]	; 0x5b
 801d348:	9d02      	ldr	r5, [sp, #8]
 801d34a:	f104 0018 	add.w	r0, r4, #24
 801d34e:	9b03      	ldr	r3, [sp, #12]
 801d350:	b179      	cbz	r1, 801d372 <_ZN8touchgfx3HAL5touchEll+0x46>
 801d352:	b29b      	uxth	r3, r3
 801d354:	f8b4 2050 	ldrh.w	r2, [r4, #80]	; 0x50
 801d358:	f8b4 104c 	ldrh.w	r1, [r4, #76]	; 0x4c
 801d35c:	9300      	str	r3, [sp, #0]
 801d35e:	b2ab      	uxth	r3, r5
 801d360:	f004 ffc0 	bl	80222e4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 801d364:	b118      	cbz	r0, 801d36e <_ZN8touchgfx3HAL5touchEll+0x42>
 801d366:	9b02      	ldr	r3, [sp, #8]
 801d368:	64e3      	str	r3, [r4, #76]	; 0x4c
 801d36a:	9b03      	ldr	r3, [sp, #12]
 801d36c:	6523      	str	r3, [r4, #80]	; 0x50
 801d36e:	b005      	add	sp, #20
 801d370:	bd30      	pop	{r4, r5, pc}
 801d372:	b29b      	uxth	r3, r3
 801d374:	b2aa      	uxth	r2, r5
 801d376:	f004 fff9 	bl	802236c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801d37a:	2301      	movs	r3, #1
 801d37c:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 801d380:	e7f1      	b.n	801d366 <_ZN8touchgfx3HAL5touchEll+0x3a>

0801d382 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 801d382:	b530      	push	{r4, r5, lr}
 801d384:	2b00      	cmp	r3, #0
 801d386:	d04e      	beq.n	801d426 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 801d388:	ea81 0002 	eor.w	r0, r1, r2
 801d38c:	07c0      	lsls	r0, r0, #31
 801d38e:	d508      	bpl.n	801d3a2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 801d390:	3a01      	subs	r2, #1
 801d392:	440b      	add	r3, r1
 801d394:	4299      	cmp	r1, r3
 801d396:	d046      	beq.n	801d426 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 801d398:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801d39c:	f801 0b01 	strb.w	r0, [r1], #1
 801d3a0:	e7f8      	b.n	801d394 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 801d3a2:	07d5      	lsls	r5, r2, #31
 801d3a4:	bf42      	ittt	mi
 801d3a6:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801d3aa:	f103 33ff 	addmi.w	r3, r3, #4294967295
 801d3ae:	f801 0b01 	strbmi.w	r0, [r1], #1
 801d3b2:	2b01      	cmp	r3, #1
 801d3b4:	d915      	bls.n	801d3e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801d3b6:	ea81 0002 	eor.w	r0, r1, r2
 801d3ba:	0784      	lsls	r4, r0, #30
 801d3bc:	d01f      	beq.n	801d3fe <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x7c>
 801d3be:	1e95      	subs	r5, r2, #2
 801d3c0:	460c      	mov	r4, r1
 801d3c2:	f835 0f02 	ldrh.w	r0, [r5, #2]!
 801d3c6:	f824 0b02 	strh.w	r0, [r4], #2
 801d3ca:	1b18      	subs	r0, r3, r4
 801d3cc:	4408      	add	r0, r1
 801d3ce:	2801      	cmp	r0, #1
 801d3d0:	d8f7      	bhi.n	801d3c2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x40>
 801d3d2:	1e98      	subs	r0, r3, #2
 801d3d4:	f003 0301 	and.w	r3, r3, #1
 801d3d8:	f020 0001 	bic.w	r0, r0, #1
 801d3dc:	3002      	adds	r0, #2
 801d3de:	4401      	add	r1, r0
 801d3e0:	4402      	add	r2, r0
 801d3e2:	3a01      	subs	r2, #1
 801d3e4:	440b      	add	r3, r1
 801d3e6:	4299      	cmp	r1, r3
 801d3e8:	d01d      	beq.n	801d426 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0xa4>
 801d3ea:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 801d3ee:	f801 0b01 	strb.w	r0, [r1], #1
 801d3f2:	e7f8      	b.n	801d3e6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x64>
 801d3f4:	f855 4f04 	ldr.w	r4, [r5, #4]!
 801d3f8:	f840 4b04 	str.w	r4, [r0], #4
 801d3fc:	e008      	b.n	801d410 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8e>
 801d3fe:	0790      	lsls	r0, r2, #30
 801d400:	d004      	beq.n	801d40c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x8a>
 801d402:	f832 0b02 	ldrh.w	r0, [r2], #2
 801d406:	3b02      	subs	r3, #2
 801d408:	f821 0b02 	strh.w	r0, [r1], #2
 801d40c:	1f15      	subs	r5, r2, #4
 801d40e:	4608      	mov	r0, r1
 801d410:	1a1c      	subs	r4, r3, r0
 801d412:	440c      	add	r4, r1
 801d414:	2c03      	cmp	r4, #3
 801d416:	d8ed      	bhi.n	801d3f4 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x72>
 801d418:	f023 0003 	bic.w	r0, r3, #3
 801d41c:	f003 0303 	and.w	r3, r3, #3
 801d420:	4402      	add	r2, r0
 801d422:	4401      	add	r1, r0
 801d424:	e7dd      	b.n	801d3e2 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x60>
 801d426:	2001      	movs	r0, #1
 801d428:	bd30      	pop	{r4, r5, pc}

0801d42a <_ZN8touchgfx3HAL7noTouchEv>:
 801d42a:	b510      	push	{r4, lr}
 801d42c:	f890 305b 	ldrb.w	r3, [r0, #91]	; 0x5b
 801d430:	4604      	mov	r4, r0
 801d432:	b153      	cbz	r3, 801d44a <_ZN8touchgfx3HAL7noTouchEv+0x20>
 801d434:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 801d438:	2101      	movs	r1, #1
 801d43a:	f8b0 204c 	ldrh.w	r2, [r0, #76]	; 0x4c
 801d43e:	3018      	adds	r0, #24
 801d440:	f004 ff94 	bl	802236c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 801d444:	2300      	movs	r3, #0
 801d446:	f884 305b 	strb.w	r3, [r4, #91]	; 0x5b
 801d44a:	bd10      	pop	{r4, pc}

0801d44c <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 801d44c:	4b07      	ldr	r3, [pc, #28]	; (801d46c <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 801d44e:	b510      	push	{r4, lr}
 801d450:	781b      	ldrb	r3, [r3, #0]
 801d452:	4604      	mov	r4, r0
 801d454:	b12b      	cbz	r3, 801d462 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x16>
 801d456:	6803      	ldr	r3, [r0, #0]
 801d458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d45a:	4798      	blx	r3
 801d45c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801d45e:	4283      	cmp	r3, r0
 801d460:	d001      	beq.n	801d466 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801d462:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 801d464:	bd10      	pop	{r4, pc}
 801d466:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 801d468:	bd10      	pop	{r4, pc}
 801d46a:	bf00      	nop
 801d46c:	20009d32 	.word	0x20009d32

0801d470 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 801d470:	4b0a      	ldr	r3, [pc, #40]	; (801d49c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x2c>)
 801d472:	b510      	push	{r4, lr}
 801d474:	781b      	ldrb	r3, [r3, #0]
 801d476:	4604      	mov	r4, r0
 801d478:	b12b      	cbz	r3, 801d486 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x16>
 801d47a:	f7f3 fd7f 	bl	8010f7c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801d47e:	4620      	mov	r0, r4
 801d480:	f7ff ffe4 	bl	801d44c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801d484:	bd10      	pop	{r4, pc}
 801d486:	6840      	ldr	r0, [r0, #4]
 801d488:	f000 fb3e 	bl	801db08 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 801d48c:	2800      	cmp	r0, #0
 801d48e:	d0f4      	beq.n	801d47a <_ZN8touchgfx3HAL15lockFrameBufferEv+0xa>
 801d490:	6862      	ldr	r2, [r4, #4]
 801d492:	7a53      	ldrb	r3, [r2, #9]
 801d494:	2b00      	cmp	r3, #0
 801d496:	d0fc      	beq.n	801d492 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 801d498:	e7ef      	b.n	801d47a <_ZN8touchgfx3HAL15lockFrameBufferEv+0xa>
 801d49a:	bf00      	nop
 801d49c:	20009d32 	.word	0x20009d32

0801d4a0 <_ZN8touchgfx3HAL10initializeEv>:
 801d4a0:	b510      	push	{r4, lr}
 801d4a2:	4604      	mov	r4, r0
 801d4a4:	f7f3 fd3c 	bl	8010f20 <_ZN8touchgfx10OSWrappers10initializeEv>
 801d4a8:	6860      	ldr	r0, [r4, #4]
 801d4aa:	6803      	ldr	r3, [r0, #0]
 801d4ac:	68db      	ldr	r3, [r3, #12]
 801d4ae:	4798      	blx	r3
 801d4b0:	68e0      	ldr	r0, [r4, #12]
 801d4b2:	6803      	ldr	r3, [r0, #0]
 801d4b4:	689b      	ldr	r3, [r3, #8]
 801d4b6:	4798      	blx	r3
 801d4b8:	6823      	ldr	r3, [r4, #0]
 801d4ba:	4620      	mov	r0, r4
 801d4bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801d4be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d4c2:	4718      	bx	r3

0801d4c4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 801d4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d4c6:	461d      	mov	r5, r3
 801d4c8:	4b0b      	ldr	r3, [pc, #44]	; (801d4f8 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 801d4ca:	4617      	mov	r7, r2
 801d4cc:	460e      	mov	r6, r1
 801d4ce:	681b      	ldr	r3, [r3, #0]
 801d4d0:	6898      	ldr	r0, [r3, #8]
 801d4d2:	6803      	ldr	r3, [r0, #0]
 801d4d4:	6a1b      	ldr	r3, [r3, #32]
 801d4d6:	4798      	blx	r3
 801d4d8:	4b08      	ldr	r3, [pc, #32]	; (801d4fc <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x38>)
 801d4da:	2810      	cmp	r0, #16
 801d4dc:	bf15      	itete	ne
 801d4de:	881c      	ldrhne	r4, [r3, #0]
 801d4e0:	8818      	ldrheq	r0, [r3, #0]
 801d4e2:	fb07 6204 	mlane	r2, r7, r4, r6
 801d4e6:	fb07 6200 	mlaeq	r2, r7, r0, r6
 801d4ea:	bf16      	itet	ne
 801d4ec:	eb02 0242 	addne.w	r2, r2, r2, lsl #1
 801d4f0:	eb05 0042 	addeq.w	r0, r5, r2, lsl #1
 801d4f4:	18a8      	addne	r0, r5, r2
 801d4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801d4f8:	20009d34 	.word	0x20009d34
 801d4fc:	20009d2e 	.word	0x20009d2e

0801d500 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb>:
 801d500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d504:	b088      	sub	sp, #32
 801d506:	4698      	mov	r8, r3
 801d508:	4617      	mov	r7, r2
 801d50a:	2200      	movs	r2, #0
 801d50c:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801d510:	4604      	mov	r4, r0
 801d512:	9206      	str	r2, [sp, #24]
 801d514:	2bff      	cmp	r3, #255	; 0xff
 801d516:	f88d 301c 	strb.w	r3, [sp, #28]
 801d51a:	4b1d      	ldr	r3, [pc, #116]	; (801d590 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x90>)
 801d51c:	bf0c      	ite	eq
 801d51e:	2201      	moveq	r2, #1
 801d520:	2204      	movne	r2, #4
 801d522:	881b      	ldrh	r3, [r3, #0]
 801d524:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801d528:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801d52c:	9201      	str	r2, [sp, #4]
 801d52e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801d532:	9102      	str	r1, [sp, #8]
 801d534:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d538:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d53c:	f8ad 6010 	strh.w	r6, [sp, #16]
 801d540:	f8ad 5012 	strh.w	r5, [sp, #18]
 801d544:	f7ff ff82 	bl	801d44c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801d548:	4642      	mov	r2, r8
 801d54a:	4603      	mov	r3, r0
 801d54c:	4639      	mov	r1, r7
 801d54e:	4620      	mov	r0, r4
 801d550:	f7ff ffb8 	bl	801d4c4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801d554:	9003      	str	r0, [sp, #12]
 801d556:	b106      	cbz	r6, 801d55a <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x5a>
 801d558:	b935      	cbnz	r5, 801d568 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x68>
 801d55a:	4b0e      	ldr	r3, [pc, #56]	; (801d594 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x94>)
 801d55c:	f240 1143 	movw	r1, #323	; 0x143
 801d560:	4a0d      	ldr	r2, [pc, #52]	; (801d598 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x98>)
 801d562:	480e      	ldr	r0, [pc, #56]	; (801d59c <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x9c>)
 801d564:	f004 ff7a 	bl	802245c <__assert_func>
 801d568:	6823      	ldr	r3, [r4, #0]
 801d56a:	4620      	mov	r0, r4
 801d56c:	9d01      	ldr	r5, [sp, #4]
 801d56e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d570:	4798      	blx	r3
 801d572:	4228      	tst	r0, r5
 801d574:	d104      	bne.n	801d580 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x80>
 801d576:	4b0a      	ldr	r3, [pc, #40]	; (801d5a0 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0xa0>)
 801d578:	f44f 71a2 	mov.w	r1, #324	; 0x144
 801d57c:	4a06      	ldr	r2, [pc, #24]	; (801d598 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x98>)
 801d57e:	e7f0      	b.n	801d562 <_ZN8touchgfx3HAL8blitCopyEPKtttttthb+0x62>
 801d580:	6860      	ldr	r0, [r4, #4]
 801d582:	a901      	add	r1, sp, #4
 801d584:	6803      	ldr	r3, [r0, #0]
 801d586:	685b      	ldr	r3, [r3, #4]
 801d588:	4798      	blx	r3
 801d58a:	b008      	add	sp, #32
 801d58c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d590:	20009d2e 	.word	0x20009d2e
 801d594:	080256b1 	.word	0x080256b1
 801d598:	0802595f 	.word	0x0802595f
 801d59c:	080256e9 	.word	0x080256e9
 801d5a0:	0802570f 	.word	0x0802570f

0801d5a4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE>:
 801d5a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d5a8:	4698      	mov	r8, r3
 801d5aa:	b088      	sub	sp, #32
 801d5ac:	2300      	movs	r3, #0
 801d5ae:	4617      	mov	r7, r2
 801d5b0:	4604      	mov	r4, r0
 801d5b2:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801d5b6:	9306      	str	r3, [sp, #24]
 801d5b8:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 801d5bc:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801d5c0:	9301      	str	r3, [sp, #4]
 801d5c2:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d5c6:	9102      	str	r1, [sp, #8]
 801d5c8:	f8ad 3014 	strh.w	r3, [sp, #20]
 801d5cc:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
 801d5d0:	f8ad 6010 	strh.w	r6, [sp, #16]
 801d5d4:	f88d 301c 	strb.w	r3, [sp, #28]
 801d5d8:	f8ad 5012 	strh.w	r5, [sp, #18]
 801d5dc:	f7ff ff36 	bl	801d44c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801d5e0:	4642      	mov	r2, r8
 801d5e2:	4603      	mov	r3, r0
 801d5e4:	4639      	mov	r1, r7
 801d5e6:	4620      	mov	r0, r4
 801d5e8:	f7ff ff6c 	bl	801d4c4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801d5ec:	4b11      	ldr	r3, [pc, #68]	; (801d634 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x90>)
 801d5ee:	9003      	str	r0, [sp, #12]
 801d5f0:	881b      	ldrh	r3, [r3, #0]
 801d5f2:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d5f6:	b106      	cbz	r6, 801d5fa <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x56>
 801d5f8:	b935      	cbnz	r5, 801d608 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x64>
 801d5fa:	4b0f      	ldr	r3, [pc, #60]	; (801d638 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x94>)
 801d5fc:	f240 1153 	movw	r1, #339	; 0x153
 801d600:	4a0e      	ldr	r2, [pc, #56]	; (801d63c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x98>)
 801d602:	480f      	ldr	r0, [pc, #60]	; (801d640 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x9c>)
 801d604:	f004 ff2a 	bl	802245c <__assert_func>
 801d608:	6823      	ldr	r3, [r4, #0]
 801d60a:	4620      	mov	r0, r4
 801d60c:	9d01      	ldr	r5, [sp, #4]
 801d60e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d610:	4798      	blx	r3
 801d612:	4228      	tst	r0, r5
 801d614:	d104      	bne.n	801d620 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x7c>
 801d616:	4b0b      	ldr	r3, [pc, #44]	; (801d644 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0xa0>)
 801d618:	f44f 71aa 	mov.w	r1, #340	; 0x154
 801d61c:	4a07      	ldr	r2, [pc, #28]	; (801d63c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x98>)
 801d61e:	e7f0      	b.n	801d602 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsE+0x5e>
 801d620:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801d622:	a901      	add	r1, sp, #4
 801d624:	6860      	ldr	r0, [r4, #4]
 801d626:	9306      	str	r3, [sp, #24]
 801d628:	6803      	ldr	r3, [r0, #0]
 801d62a:	685b      	ldr	r3, [r3, #4]
 801d62c:	4798      	blx	r3
 801d62e:	b008      	add	sp, #32
 801d630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d634:	20009d2e 	.word	0x20009d2e
 801d638:	080256b1 	.word	0x080256b1
 801d63c:	080257fc 	.word	0x080257fc
 801d640:	080256e9 	.word	0x080256e9
 801d644:	0802570f 	.word	0x0802570f

0801d648 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth>:
 801d648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d64c:	b088      	sub	sp, #32
 801d64e:	4698      	mov	r8, r3
 801d650:	4617      	mov	r7, r2
 801d652:	2200      	movs	r2, #0
 801d654:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 801d658:	4604      	mov	r4, r0
 801d65a:	9206      	str	r2, [sp, #24]
 801d65c:	2bff      	cmp	r3, #255	; 0xff
 801d65e:	f8bd 6038 	ldrh.w	r6, [sp, #56]	; 0x38
 801d662:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
 801d666:	bf0c      	ite	eq
 801d668:	2220      	moveq	r2, #32
 801d66a:	2240      	movne	r2, #64	; 0x40
 801d66c:	9102      	str	r1, [sp, #8]
 801d66e:	9201      	str	r2, [sp, #4]
 801d670:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801d674:	f88d 301c 	strb.w	r3, [sp, #28]
 801d678:	f8ad 2014 	strh.w	r2, [sp, #20]
 801d67c:	f8ad 6010 	strh.w	r6, [sp, #16]
 801d680:	f8ad 5012 	strh.w	r5, [sp, #18]
 801d684:	f7ff fee2 	bl	801d44c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801d688:	4642      	mov	r2, r8
 801d68a:	4603      	mov	r3, r0
 801d68c:	4639      	mov	r1, r7
 801d68e:	4620      	mov	r0, r4
 801d690:	f7ff ff18 	bl	801d4c4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801d694:	4b10      	ldr	r3, [pc, #64]	; (801d6d8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x90>)
 801d696:	9003      	str	r0, [sp, #12]
 801d698:	881b      	ldrh	r3, [r3, #0]
 801d69a:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d69e:	b106      	cbz	r6, 801d6a2 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x5a>
 801d6a0:	b935      	cbnz	r5, 801d6b0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x68>
 801d6a2:	4b0e      	ldr	r3, [pc, #56]	; (801d6dc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x94>)
 801d6a4:	f44f 71b3 	mov.w	r1, #358	; 0x166
 801d6a8:	4a0d      	ldr	r2, [pc, #52]	; (801d6e0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x98>)
 801d6aa:	480e      	ldr	r0, [pc, #56]	; (801d6e4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x9c>)
 801d6ac:	f004 fed6 	bl	802245c <__assert_func>
 801d6b0:	6823      	ldr	r3, [r4, #0]
 801d6b2:	4620      	mov	r0, r4
 801d6b4:	9d01      	ldr	r5, [sp, #4]
 801d6b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d6b8:	4798      	blx	r3
 801d6ba:	4228      	tst	r0, r5
 801d6bc:	d104      	bne.n	801d6c8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x80>
 801d6be:	4b0a      	ldr	r3, [pc, #40]	; (801d6e8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0xa0>)
 801d6c0:	f240 1167 	movw	r1, #359	; 0x167
 801d6c4:	4a06      	ldr	r2, [pc, #24]	; (801d6e0 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x98>)
 801d6c6:	e7f0      	b.n	801d6aa <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttth+0x62>
 801d6c8:	6860      	ldr	r0, [r4, #4]
 801d6ca:	a901      	add	r1, sp, #4
 801d6cc:	6803      	ldr	r3, [r0, #0]
 801d6ce:	685b      	ldr	r3, [r3, #4]
 801d6d0:	4798      	blx	r3
 801d6d2:	b008      	add	sp, #32
 801d6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d6d8:	20009d2e 	.word	0x20009d2e
 801d6dc:	080256b1 	.word	0x080256b1
 801d6e0:	080258a0 	.word	0x080258a0
 801d6e4:	080256e9 	.word	0x080256e9
 801d6e8:	0802570f 	.word	0x0802570f

0801d6ec <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth>:
 801d6ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801d6f0:	b089      	sub	sp, #36	; 0x24
 801d6f2:	4699      	mov	r9, r3
 801d6f4:	4604      	mov	r4, r0
 801d6f6:	2500      	movs	r5, #0
 801d6f8:	f89d 6048 	ldrb.w	r6, [sp, #72]	; 0x48
 801d6fc:	4690      	mov	r8, r2
 801d6fe:	460f      	mov	r7, r1
 801d700:	9506      	str	r5, [sp, #24]
 801d702:	2eff      	cmp	r6, #255	; 0xff
 801d704:	9502      	str	r5, [sp, #8]
 801d706:	bf0c      	ite	eq
 801d708:	2302      	moveq	r3, #2
 801d70a:	2308      	movne	r3, #8
 801d70c:	9301      	str	r3, [sp, #4]
 801d70e:	f7ff fe9d 	bl	801d44c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801d712:	464a      	mov	r2, r9
 801d714:	4603      	mov	r3, r0
 801d716:	4641      	mov	r1, r8
 801d718:	4620      	mov	r0, r4
 801d71a:	f7ff fed3 	bl	801d4c4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801d71e:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
 801d722:	f8ad 5014 	strh.w	r5, [sp, #20]
 801d726:	f8ad 3010 	strh.w	r3, [sp, #16]
 801d72a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801d72e:	9d01      	ldr	r5, [sp, #4]
 801d730:	f8ad 3012 	strh.w	r3, [sp, #18]
 801d734:	4b0e      	ldr	r3, [pc, #56]	; (801d770 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x84>)
 801d736:	9003      	str	r0, [sp, #12]
 801d738:	4620      	mov	r0, r4
 801d73a:	881b      	ldrh	r3, [r3, #0]
 801d73c:	9706      	str	r7, [sp, #24]
 801d73e:	f8ad 3016 	strh.w	r3, [sp, #22]
 801d742:	6823      	ldr	r3, [r4, #0]
 801d744:	f88d 601c 	strb.w	r6, [sp, #28]
 801d748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d74a:	4798      	blx	r3
 801d74c:	4228      	tst	r0, r5
 801d74e:	d106      	bne.n	801d75e <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x72>
 801d750:	4b08      	ldr	r3, [pc, #32]	; (801d774 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x88>)
 801d752:	f240 1179 	movw	r1, #377	; 0x179
 801d756:	4a08      	ldr	r2, [pc, #32]	; (801d778 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x8c>)
 801d758:	4808      	ldr	r0, [pc, #32]	; (801d77c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttth+0x90>)
 801d75a:	f004 fe7f 	bl	802245c <__assert_func>
 801d75e:	6860      	ldr	r0, [r4, #4]
 801d760:	a901      	add	r1, sp, #4
 801d762:	6803      	ldr	r3, [r0, #0]
 801d764:	685b      	ldr	r3, [r3, #4]
 801d766:	4798      	blx	r3
 801d768:	b009      	add	sp, #36	; 0x24
 801d76a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801d76e:	bf00      	nop
 801d770:	20009d2e 	.word	0x20009d2e
 801d774:	0802570f 	.word	0x0802570f
 801d778:	080259d6 	.word	0x080259d6
 801d77c:	080256e9 	.word	0x080256e9

0801d780 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 801d780:	4b1d      	ldr	r3, [pc, #116]	; (801d7f8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x78>)
 801d782:	b570      	push	{r4, r5, r6, lr}
 801d784:	b08a      	sub	sp, #40	; 0x28
 801d786:	781b      	ldrb	r3, [r3, #0]
 801d788:	4604      	mov	r4, r0
 801d78a:	e88d 0006 	stmia.w	sp, {r1, r2}
 801d78e:	b933      	cbnz	r3, 801d79e <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x1e>
 801d790:	4b1a      	ldr	r3, [pc, #104]	; (801d7fc <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x7c>)
 801d792:	f240 1185 	movw	r1, #389	; 0x185
 801d796:	4a1a      	ldr	r2, [pc, #104]	; (801d800 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 801d798:	481a      	ldr	r0, [pc, #104]	; (801d804 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x84>)
 801d79a:	f004 fe5f 	bl	802245c <__assert_func>
 801d79e:	2300      	movs	r3, #0
 801d7a0:	f8bd 5000 	ldrh.w	r5, [sp]
 801d7a4:	f8bd 6002 	ldrh.w	r6, [sp, #2]
 801d7a8:	9308      	str	r3, [sp, #32]
 801d7aa:	2301      	movs	r3, #1
 801d7ac:	9303      	str	r3, [sp, #12]
 801d7ae:	6803      	ldr	r3, [r0, #0]
 801d7b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d7b2:	4798      	blx	r3
 801d7b4:	4632      	mov	r2, r6
 801d7b6:	4603      	mov	r3, r0
 801d7b8:	4629      	mov	r1, r5
 801d7ba:	4620      	mov	r0, r4
 801d7bc:	f7ff fe82 	bl	801d4c4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801d7c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d7c2:	9004      	str	r0, [sp, #16]
 801d7c4:	a903      	add	r1, sp, #12
 801d7c6:	9305      	str	r3, [sp, #20]
 801d7c8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801d7cc:	6860      	ldr	r0, [r4, #4]
 801d7ce:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d7d2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801d7d6:	f8ad 301a 	strh.w	r3, [sp, #26]
 801d7da:	4b0b      	ldr	r3, [pc, #44]	; (801d808 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x88>)
 801d7dc:	881b      	ldrh	r3, [r3, #0]
 801d7de:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d7e2:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d7e6:	23ff      	movs	r3, #255	; 0xff
 801d7e8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801d7ec:	6803      	ldr	r3, [r0, #0]
 801d7ee:	685b      	ldr	r3, [r3, #4]
 801d7f0:	4798      	blx	r3
 801d7f2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 801d7f4:	b00a      	add	sp, #40	; 0x28
 801d7f6:	bd70      	pop	{r4, r5, r6, pc}
 801d7f8:	20009d33 	.word	0x20009d33
 801d7fc:	08025643 	.word	0x08025643
 801d800:	08025919 	.word	0x08025919
 801d804:	080256e9 	.word	0x080256e9
 801d808:	20009d2e 	.word	0x20009d2e

0801d80c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 801d80c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d80e:	461d      	mov	r5, r3
 801d810:	b08b      	sub	sp, #44	; 0x2c
 801d812:	2300      	movs	r3, #0
 801d814:	4604      	mov	r4, r0
 801d816:	9308      	str	r3, [sp, #32]
 801d818:	2301      	movs	r3, #1
 801d81a:	9303      	str	r3, [sp, #12]
 801d81c:	6803      	ldr	r3, [r0, #0]
 801d81e:	e88d 0006 	stmia.w	sp, {r1, r2}
 801d822:	f8bd 6000 	ldrh.w	r6, [sp]
 801d826:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 801d82a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d82c:	4798      	blx	r3
 801d82e:	463a      	mov	r2, r7
 801d830:	4603      	mov	r3, r0
 801d832:	4631      	mov	r1, r6
 801d834:	4620      	mov	r0, r4
 801d836:	f7ff fe45 	bl	801d4c4 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 801d83a:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801d83e:	9004      	str	r0, [sp, #16]
 801d840:	a903      	add	r1, sp, #12
 801d842:	f8ad 3018 	strh.w	r3, [sp, #24]
 801d846:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801d84a:	6860      	ldr	r0, [r4, #4]
 801d84c:	f8ad 301a 	strh.w	r3, [sp, #26]
 801d850:	4b08      	ldr	r3, [pc, #32]	; (801d874 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x68>)
 801d852:	9505      	str	r5, [sp, #20]
 801d854:	881b      	ldrh	r3, [r3, #0]
 801d856:	f8ad 301c 	strh.w	r3, [sp, #28]
 801d85a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801d85c:	f8ad 301e 	strh.w	r3, [sp, #30]
 801d860:	23ff      	movs	r3, #255	; 0xff
 801d862:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 801d866:	6803      	ldr	r3, [r0, #0]
 801d868:	685b      	ldr	r3, [r3, #4]
 801d86a:	4798      	blx	r3
 801d86c:	4628      	mov	r0, r5
 801d86e:	b00b      	add	sp, #44	; 0x2c
 801d870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d872:	bf00      	nop
 801d874:	20009d2e 	.word	0x20009d2e

0801d878 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 801d878:	b570      	push	{r4, r5, r6, lr}
 801d87a:	f890 305a 	ldrb.w	r3, [r0, #90]	; 0x5a
 801d87e:	4604      	mov	r4, r0
 801d880:	b19b      	cbz	r3, 801d8aa <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 801d882:	2002      	movs	r0, #2
 801d884:	f7f7 ffa8 	bl	80157d8 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 801d888:	2300      	movs	r3, #0
 801d88a:	4620      	mov	r0, r4
 801d88c:	f884 305a 	strb.w	r3, [r4, #90]	; 0x5a
 801d890:	f884 3059 	strb.w	r3, [r4, #89]	; 0x59
 801d894:	6823      	ldr	r3, [r4, #0]
 801d896:	f8d3 5090 	ldr.w	r5, [r3, #144]	; 0x90
 801d89a:	f7ff fdd7 	bl	801d44c <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 801d89e:	4601      	mov	r1, r0
 801d8a0:	4620      	mov	r0, r4
 801d8a2:	462b      	mov	r3, r5
 801d8a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d8a8:	4718      	bx	r3
 801d8aa:	bd70      	pop	{r4, r5, r6, pc}

0801d8ac <_ZN8touchgfx3HAL12setMCUActiveEb>:
 801d8ac:	b570      	push	{r4, r5, r6, lr}
 801d8ae:	4605      	mov	r5, r0
 801d8b0:	460c      	mov	r4, r1
 801d8b2:	2003      	movs	r0, #3
 801d8b4:	b149      	cbz	r1, 801d8ca <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 801d8b6:	f7f7 ff79 	bl	80157ac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 801d8ba:	6928      	ldr	r0, [r5, #16]
 801d8bc:	b168      	cbz	r0, 801d8da <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801d8be:	6803      	ldr	r3, [r0, #0]
 801d8c0:	2101      	movs	r1, #1
 801d8c2:	695b      	ldr	r3, [r3, #20]
 801d8c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d8c8:	4718      	bx	r3
 801d8ca:	f7f7 ff7a 	bl	80157c2 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 801d8ce:	6928      	ldr	r0, [r5, #16]
 801d8d0:	b118      	cbz	r0, 801d8da <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 801d8d2:	6803      	ldr	r3, [r0, #0]
 801d8d4:	4621      	mov	r1, r4
 801d8d6:	695b      	ldr	r3, [r3, #20]
 801d8d8:	e7f4      	b.n	801d8c4 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 801d8da:	bd70      	pop	{r4, r5, r6, pc}

0801d8dc <_ZN8touchgfx13DMA_Interface10initializeEv>:
 801d8dc:	4770      	bx	lr

0801d8de <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 801d8de:	68c2      	ldr	r2, [r0, #12]
 801d8e0:	6900      	ldr	r0, [r0, #16]
 801d8e2:	1a13      	subs	r3, r2, r0
 801d8e4:	4258      	negs	r0, r3
 801d8e6:	4158      	adcs	r0, r3
 801d8e8:	4770      	bx	lr

0801d8ea <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 801d8ea:	68c2      	ldr	r2, [r0, #12]
 801d8ec:	6903      	ldr	r3, [r0, #16]
 801d8ee:	1a9b      	subs	r3, r3, r2
 801d8f0:	2b00      	cmp	r3, #0
 801d8f2:	bfdc      	itt	le
 801d8f4:	6882      	ldrle	r2, [r0, #8]
 801d8f6:	189b      	addle	r3, r3, r2
 801d8f8:	2b01      	cmp	r3, #1
 801d8fa:	bfcc      	ite	gt
 801d8fc:	2000      	movgt	r0, #0
 801d8fe:	2001      	movle	r0, #1
 801d900:	4770      	bx	lr

0801d902 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 801d902:	6902      	ldr	r2, [r0, #16]
 801d904:	6843      	ldr	r3, [r0, #4]
 801d906:	201c      	movs	r0, #28
 801d908:	fb00 3002 	mla	r0, r0, r2, r3
 801d90c:	4770      	bx	lr

0801d90e <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 801d90e:	6803      	ldr	r3, [r0, #0]
 801d910:	691b      	ldr	r3, [r3, #16]
 801d912:	4718      	bx	r3

0801d914 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 801d914:	4770      	bx	lr

0801d916 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 801d916:	4770      	bx	lr

0801d918 <_ZN8touchgfx13DMA_Interface7executeEv>:
 801d918:	2301      	movs	r3, #1
 801d91a:	b570      	push	{r4, r5, r6, lr}
 801d91c:	7203      	strb	r3, [r0, #8]
 801d91e:	4604      	mov	r4, r0
 801d920:	6840      	ldr	r0, [r0, #4]
 801d922:	6803      	ldr	r3, [r0, #0]
 801d924:	699b      	ldr	r3, [r3, #24]
 801d926:	4798      	blx	r3
 801d928:	6803      	ldr	r3, [r0, #0]
 801d92a:	4605      	mov	r5, r0
 801d92c:	2b08      	cmp	r3, #8
 801d92e:	d01e      	beq.n	801d96e <_ZN8touchgfx13DMA_Interface7executeEv+0x56>
 801d930:	d80b      	bhi.n	801d94a <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 801d932:	2b02      	cmp	r3, #2
 801d934:	d027      	beq.n	801d986 <_ZN8touchgfx13DMA_Interface7executeEv+0x6e>
 801d936:	2b04      	cmp	r3, #4
 801d938:	d011      	beq.n	801d95e <_ZN8touchgfx13DMA_Interface7executeEv+0x46>
 801d93a:	2b01      	cmp	r3, #1
 801d93c:	d028      	beq.n	801d990 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801d93e:	4b17      	ldr	r3, [pc, #92]	; (801d99c <_ZN8touchgfx13DMA_Interface7executeEv+0x84>)
 801d940:	218d      	movs	r1, #141	; 0x8d
 801d942:	4a17      	ldr	r2, [pc, #92]	; (801d9a0 <_ZN8touchgfx13DMA_Interface7executeEv+0x88>)
 801d944:	4817      	ldr	r0, [pc, #92]	; (801d9a4 <_ZN8touchgfx13DMA_Interface7executeEv+0x8c>)
 801d946:	f004 fd89 	bl	802245c <__assert_func>
 801d94a:	2b40      	cmp	r3, #64	; 0x40
 801d94c:	d020      	beq.n	801d990 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801d94e:	d801      	bhi.n	801d954 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 801d950:	2b20      	cmp	r3, #32
 801d952:	e7f3      	b.n	801d93c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801d954:	2b80      	cmp	r3, #128	; 0x80
 801d956:	d01b      	beq.n	801d990 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 801d958:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801d95c:	e7ee      	b.n	801d93c <_ZN8touchgfx13DMA_Interface7executeEv+0x24>
 801d95e:	6823      	ldr	r3, [r4, #0]
 801d960:	7e01      	ldrb	r1, [r0, #24]
 801d962:	4620      	mov	r0, r4
 801d964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d966:	4798      	blx	r3
 801d968:	6823      	ldr	r3, [r4, #0]
 801d96a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d96c:	e006      	b.n	801d97c <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 801d96e:	6823      	ldr	r3, [r4, #0]
 801d970:	7e01      	ldrb	r1, [r0, #24]
 801d972:	4620      	mov	r0, r4
 801d974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d976:	4798      	blx	r3
 801d978:	6823      	ldr	r3, [r4, #0]
 801d97a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d97c:	4629      	mov	r1, r5
 801d97e:	4620      	mov	r0, r4
 801d980:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d984:	4718      	bx	r3
 801d986:	6823      	ldr	r3, [r4, #0]
 801d988:	4620      	mov	r0, r4
 801d98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d98c:	4798      	blx	r3
 801d98e:	e7f3      	b.n	801d978 <_ZN8touchgfx13DMA_Interface7executeEv+0x60>
 801d990:	6823      	ldr	r3, [r4, #0]
 801d992:	4620      	mov	r0, r4
 801d994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801d996:	4798      	blx	r3
 801d998:	e7e6      	b.n	801d968 <_ZN8touchgfx13DMA_Interface7executeEv+0x50>
 801d99a:	bf00      	nop
 801d99c:	08025a41 	.word	0x08025a41
 801d9a0:	08025b4c 	.word	0x08025b4c
 801d9a4:	08025a66 	.word	0x08025a66

0801d9a8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 801d9a8:	b570      	push	{r4, r5, r6, lr}
 801d9aa:	4604      	mov	r4, r0
 801d9ac:	460e      	mov	r6, r1
 801d9ae:	6860      	ldr	r0, [r4, #4]
 801d9b0:	6803      	ldr	r3, [r0, #0]
 801d9b2:	685b      	ldr	r3, [r3, #4]
 801d9b4:	4798      	blx	r3
 801d9b6:	2800      	cmp	r0, #0
 801d9b8:	d1f9      	bne.n	801d9ae <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 801d9ba:	4d0b      	ldr	r5, [pc, #44]	; (801d9e8 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x40>)
 801d9bc:	6828      	ldr	r0, [r5, #0]
 801d9be:	6803      	ldr	r3, [r0, #0]
 801d9c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801d9c2:	4798      	blx	r3
 801d9c4:	f7f3 fb14 	bl	8010ff0 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 801d9c8:	6860      	ldr	r0, [r4, #4]
 801d9ca:	4631      	mov	r1, r6
 801d9cc:	6803      	ldr	r3, [r0, #0]
 801d9ce:	689b      	ldr	r3, [r3, #8]
 801d9d0:	4798      	blx	r3
 801d9d2:	6823      	ldr	r3, [r4, #0]
 801d9d4:	4620      	mov	r0, r4
 801d9d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801d9d8:	4798      	blx	r3
 801d9da:	6828      	ldr	r0, [r5, #0]
 801d9dc:	6803      	ldr	r3, [r0, #0]
 801d9de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d9e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d9e4:	4718      	bx	r3
 801d9e6:	bf00      	nop
 801d9e8:	20009d34 	.word	0x20009d34

0801d9ec <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 801d9ec:	b508      	push	{r3, lr}
 801d9ee:	f7f3 fac5 	bl	8010f7c <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 801d9f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801d9f6:	f7f3 badf 	b.w	8010fb8 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0801d9fa <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 801d9fa:	b570      	push	{r4, r5, r6, lr}
 801d9fc:	4604      	mov	r4, r0
 801d9fe:	6840      	ldr	r0, [r0, #4]
 801da00:	6803      	ldr	r3, [r0, #0]
 801da02:	681b      	ldr	r3, [r3, #0]
 801da04:	4798      	blx	r3
 801da06:	4605      	mov	r5, r0
 801da08:	b908      	cbnz	r0, 801da0e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x14>
 801da0a:	7a23      	ldrb	r3, [r4, #8]
 801da0c:	b973      	cbnz	r3, 801da2c <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x32>
 801da0e:	6860      	ldr	r0, [r4, #4]
 801da10:	6803      	ldr	r3, [r0, #0]
 801da12:	681b      	ldr	r3, [r3, #0]
 801da14:	4798      	blx	r3
 801da16:	b928      	cbnz	r0, 801da24 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x2a>
 801da18:	6823      	ldr	r3, [r4, #0]
 801da1a:	4620      	mov	r0, r4
 801da1c:	6a1b      	ldr	r3, [r3, #32]
 801da1e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801da22:	4718      	bx	r3
 801da24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801da28:	f7f3 bafe 	b.w	8011028 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>
 801da2c:	6860      	ldr	r0, [r4, #4]
 801da2e:	6803      	ldr	r3, [r0, #0]
 801da30:	695b      	ldr	r3, [r3, #20]
 801da32:	4798      	blx	r3
 801da34:	7225      	strb	r5, [r4, #8]
 801da36:	e7ea      	b.n	801da0e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x14>

0801da38 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 801da38:	b510      	push	{r4, lr}
 801da3a:	68c3      	ldr	r3, [r0, #12]
 801da3c:	6902      	ldr	r2, [r0, #16]
 801da3e:	1ad2      	subs	r2, r2, r3
 801da40:	2a00      	cmp	r2, #0
 801da42:	bfdc      	itt	le
 801da44:	6884      	ldrle	r4, [r0, #8]
 801da46:	1912      	addle	r2, r2, r4
 801da48:	2a01      	cmp	r2, #1
 801da4a:	dd17      	ble.n	801da7c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x44>
 801da4c:	6842      	ldr	r2, [r0, #4]
 801da4e:	241c      	movs	r4, #28
 801da50:	fb04 2303 	mla	r3, r4, r3, r2
 801da54:	f101 0218 	add.w	r2, r1, #24
 801da58:	f851 4b04 	ldr.w	r4, [r1], #4
 801da5c:	4291      	cmp	r1, r2
 801da5e:	f843 4b04 	str.w	r4, [r3], #4
 801da62:	d1f9      	bne.n	801da58 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 801da64:	780a      	ldrb	r2, [r1, #0]
 801da66:	701a      	strb	r2, [r3, #0]
 801da68:	68c3      	ldr	r3, [r0, #12]
 801da6a:	6882      	ldr	r2, [r0, #8]
 801da6c:	f3bf 8f5b 	dmb	ish
 801da70:	3301      	adds	r3, #1
 801da72:	4293      	cmp	r3, r2
 801da74:	bfa8      	it	ge
 801da76:	1a9b      	subge	r3, r3, r2
 801da78:	60c3      	str	r3, [r0, #12]
 801da7a:	bd10      	pop	{r4, pc}
 801da7c:	4b02      	ldr	r3, [pc, #8]	; (801da88 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x50>)
 801da7e:	213b      	movs	r1, #59	; 0x3b
 801da80:	4a02      	ldr	r2, [pc, #8]	; (801da8c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x54>)
 801da82:	4803      	ldr	r0, [pc, #12]	; (801da90 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x58>)
 801da84:	f004 fcea 	bl	802245c <__assert_func>
 801da88:	08025a8c 	.word	0x08025a8c
 801da8c:	08025b7c 	.word	0x08025b7c
 801da90:	08025a66 	.word	0x08025a66

0801da94 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 801da94:	b510      	push	{r4, lr}
 801da96:	6803      	ldr	r3, [r0, #0]
 801da98:	4604      	mov	r4, r0
 801da9a:	681b      	ldr	r3, [r3, #0]
 801da9c:	4798      	blx	r3
 801da9e:	b128      	cbz	r0, 801daac <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x18>
 801daa0:	4b07      	ldr	r3, [pc, #28]	; (801dac0 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x2c>)
 801daa2:	2141      	movs	r1, #65	; 0x41
 801daa4:	4a07      	ldr	r2, [pc, #28]	; (801dac4 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x30>)
 801daa6:	4808      	ldr	r0, [pc, #32]	; (801dac8 <_ZN8touchgfx17LockFreeDMA_Queue3popEv+0x34>)
 801daa8:	f004 fcd8 	bl	802245c <__assert_func>
 801daac:	6923      	ldr	r3, [r4, #16]
 801daae:	68a2      	ldr	r2, [r4, #8]
 801dab0:	f3bf 8f5b 	dmb	ish
 801dab4:	3301      	adds	r3, #1
 801dab6:	4293      	cmp	r3, r2
 801dab8:	bfa8      	it	ge
 801daba:	1a9b      	subge	r3, r3, r2
 801dabc:	6123      	str	r3, [r4, #16]
 801dabe:	bd10      	pop	{r4, pc}
 801dac0:	08025aaf 	.word	0x08025aaf
 801dac4:	08025bca 	.word	0x08025bca
 801dac8:	08025a66 	.word	0x08025a66

0801dacc <_ZN8touchgfx13DMA_Interface5startEv>:
 801dacc:	b510      	push	{r4, lr}
 801dace:	4604      	mov	r4, r0
 801dad0:	6840      	ldr	r0, [r0, #4]
 801dad2:	6803      	ldr	r3, [r0, #0]
 801dad4:	681b      	ldr	r3, [r3, #0]
 801dad6:	4798      	blx	r3
 801dad8:	b948      	cbnz	r0, 801daee <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801dada:	7a63      	ldrb	r3, [r4, #9]
 801dadc:	b13b      	cbz	r3, 801daee <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801dade:	7a23      	ldrb	r3, [r4, #8]
 801dae0:	b92b      	cbnz	r3, 801daee <_ZN8touchgfx13DMA_Interface5startEv+0x22>
 801dae2:	6823      	ldr	r3, [r4, #0]
 801dae4:	4620      	mov	r0, r4
 801dae6:	6a1b      	ldr	r3, [r3, #32]
 801dae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801daec:	4718      	bx	r3
 801daee:	bd10      	pop	{r4, pc}

0801daf0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 801daf0:	b510      	push	{r4, lr}
 801daf2:	6082      	str	r2, [r0, #8]
 801daf4:	2200      	movs	r2, #0
 801daf6:	4c03      	ldr	r4, [pc, #12]	; (801db04 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 801daf8:	6041      	str	r1, [r0, #4]
 801dafa:	6004      	str	r4, [r0, #0]
 801dafc:	60c2      	str	r2, [r0, #12]
 801dafe:	6102      	str	r2, [r0, #16]
 801db00:	bd10      	pop	{r4, pc}
 801db02:	bf00      	nop
 801db04:	08025b30 	.word	0x08025b30

0801db08 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 801db08:	6840      	ldr	r0, [r0, #4]
 801db0a:	6803      	ldr	r3, [r0, #0]
 801db0c:	681b      	ldr	r3, [r3, #0]
 801db0e:	4718      	bx	r3

0801db10 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>:
 801db10:	b538      	push	{r3, r4, r5, lr}
 801db12:	4604      	mov	r4, r0
 801db14:	2500      	movs	r5, #0
 801db16:	9804      	ldr	r0, [sp, #16]
 801db18:	7223      	strb	r3, [r4, #8]
 801db1a:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801db1e:	8025      	strh	r5, [r4, #0]
 801db20:	60e5      	str	r5, [r4, #12]
 801db22:	82e5      	strh	r5, [r4, #22]
 801db24:	8325      	strh	r5, [r4, #24]
 801db26:	8365      	strh	r5, [r4, #26]
 801db28:	83a5      	strh	r5, [r4, #28]
 801db2a:	83e5      	strh	r5, [r4, #30]
 801db2c:	8425      	strh	r5, [r4, #32]
 801db2e:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
 801db32:	6061      	str	r1, [r4, #4]
 801db34:	7263      	strb	r3, [r4, #9]
 801db36:	6120      	str	r0, [r4, #16]
 801db38:	82a2      	strh	r2, [r4, #20]
 801db3a:	6803      	ldr	r3, [r0, #0]
 801db3c:	695b      	ldr	r3, [r3, #20]
 801db3e:	4798      	blx	r3
 801db40:	4605      	mov	r5, r0
 801db42:	b330      	cbz	r0, 801db92 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x82>
 801db44:	6920      	ldr	r0, [r4, #16]
 801db46:	4629      	mov	r1, r5
 801db48:	6803      	ldr	r3, [r0, #0]
 801db4a:	68db      	ldr	r3, [r3, #12]
 801db4c:	4798      	blx	r3
 801db4e:	60e0      	str	r0, [r4, #12]
 801db50:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801db54:	4602      	mov	r2, r0
 801db56:	7a81      	ldrb	r1, [r0, #10]
 801db58:	2b00      	cmp	r3, #0
 801db5a:	bfb4      	ite	lt
 801db5c:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801db60:	2300      	movge	r3, #0
 801db62:	430b      	orrs	r3, r1
 801db64:	8423      	strh	r3, [r4, #32]
 801db66:	7a63      	ldrb	r3, [r4, #9]
 801db68:	2b04      	cmp	r3, #4
 801db6a:	d112      	bne.n	801db92 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE+0x82>
 801db6c:	6920      	ldr	r0, [r4, #16]
 801db6e:	4629      	mov	r1, r5
 801db70:	6803      	ldr	r3, [r0, #0]
 801db72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801db74:	4798      	blx	r3
 801db76:	68e2      	ldr	r2, [r4, #12]
 801db78:	f992 300d 	ldrsb.w	r3, [r2, #13]
 801db7c:	7a91      	ldrb	r1, [r2, #10]
 801db7e:	2b00      	cmp	r3, #0
 801db80:	bfb4      	ite	lt
 801db82:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801db86:	2300      	movge	r3, #0
 801db88:	430b      	orrs	r3, r1
 801db8a:	4418      	add	r0, r3
 801db8c:	8c23      	ldrh	r3, [r4, #32]
 801db8e:	4418      	add	r0, r3
 801db90:	8420      	strh	r0, [r4, #32]
 801db92:	4620      	mov	r0, r4
 801db94:	bd38      	pop	{r3, r4, r5, pc}

0801db96 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 801db96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db9a:	2600      	movs	r6, #0
 801db9c:	4682      	mov	sl, r0
 801db9e:	460f      	mov	r7, r1
 801dba0:	4693      	mov	fp, r2
 801dba2:	46b1      	mov	r9, r6
 801dba4:	46b0      	mov	r8, r6
 801dba6:	9301      	str	r3, [sp, #4]
 801dba8:	455e      	cmp	r6, fp
 801dbaa:	da26      	bge.n	801dbfa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x64>
 801dbac:	9901      	ldr	r1, [sp, #4]
 801dbae:	4650      	mov	r0, sl
 801dbb0:	f001 fef0 	bl	801f994 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801dbb4:	4605      	mov	r5, r0
 801dbb6:	b300      	cbz	r0, 801dbfa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x64>
 801dbb8:	280a      	cmp	r0, #10
 801dbba:	d01e      	beq.n	801dbfa <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x64>
 801dbbc:	683b      	ldr	r3, [r7, #0]
 801dbbe:	4601      	mov	r1, r0
 801dbc0:	4638      	mov	r0, r7
 801dbc2:	68db      	ldr	r3, [r3, #12]
 801dbc4:	4798      	blx	r3
 801dbc6:	4602      	mov	r2, r0
 801dbc8:	b1a0      	cbz	r0, 801dbf4 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x5e>
 801dbca:	7a83      	ldrb	r3, [r0, #10]
 801dbcc:	4649      	mov	r1, r9
 801dbce:	8885      	ldrh	r5, [r0, #4]
 801dbd0:	9300      	str	r3, [sp, #0]
 801dbd2:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801dbd6:	4638      	mov	r0, r7
 801dbd8:	2b00      	cmp	r3, #0
 801dbda:	683b      	ldr	r3, [r7, #0]
 801dbdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dbde:	bfb4      	ite	lt
 801dbe0:	f44f 7480 	movlt.w	r4, #256	; 0x100
 801dbe4:	2400      	movge	r4, #0
 801dbe6:	4798      	blx	r3
 801dbe8:	9b00      	ldr	r3, [sp, #0]
 801dbea:	431c      	orrs	r4, r3
 801dbec:	4404      	add	r4, r0
 801dbee:	44a0      	add	r8, r4
 801dbf0:	fa1f f888 	uxth.w	r8, r8
 801dbf4:	3601      	adds	r6, #1
 801dbf6:	46a9      	mov	r9, r5
 801dbf8:	e7d6      	b.n	801dba8 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x12>
 801dbfa:	4640      	mov	r0, r8
 801dbfc:	b003      	add	sp, #12
 801dbfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dc02 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 801dc02:	2a02      	cmp	r2, #2
 801dc04:	b530      	push	{r4, r5, lr}
 801dc06:	d011      	beq.n	801dc2c <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 801dc08:	2a03      	cmp	r2, #3
 801dc0a:	d01c      	beq.n	801dc46 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 801dc0c:	2a01      	cmp	r2, #1
 801dc0e:	d128      	bne.n	801dc62 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x60>
 801dc10:	888b      	ldrh	r3, [r1, #4]
 801dc12:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 801dc16:	8801      	ldrh	r1, [r0, #0]
 801dc18:	1a9b      	subs	r3, r3, r2
 801dc1a:	8844      	ldrh	r4, [r0, #2]
 801dc1c:	1a5b      	subs	r3, r3, r1
 801dc1e:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801dc22:	8004      	strh	r4, [r0, #0]
 801dc24:	8043      	strh	r3, [r0, #2]
 801dc26:	8081      	strh	r1, [r0, #4]
 801dc28:	80c2      	strh	r2, [r0, #6]
 801dc2a:	bd30      	pop	{r4, r5, pc}
 801dc2c:	88cb      	ldrh	r3, [r1, #6]
 801dc2e:	88c2      	ldrh	r2, [r0, #6]
 801dc30:	1a9b      	subs	r3, r3, r2
 801dc32:	8842      	ldrh	r2, [r0, #2]
 801dc34:	1a9b      	subs	r3, r3, r2
 801dc36:	888a      	ldrh	r2, [r1, #4]
 801dc38:	8881      	ldrh	r1, [r0, #4]
 801dc3a:	8043      	strh	r3, [r0, #2]
 801dc3c:	1a52      	subs	r2, r2, r1
 801dc3e:	8801      	ldrh	r1, [r0, #0]
 801dc40:	1a52      	subs	r2, r2, r1
 801dc42:	8002      	strh	r2, [r0, #0]
 801dc44:	bd30      	pop	{r4, r5, pc}
 801dc46:	88cb      	ldrh	r3, [r1, #6]
 801dc48:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801dc4c:	8841      	ldrh	r1, [r0, #2]
 801dc4e:	1a9b      	subs	r3, r3, r2
 801dc50:	f9b0 5000 	ldrsh.w	r5, [r0]
 801dc54:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 801dc58:	1a5b      	subs	r3, r3, r1
 801dc5a:	8045      	strh	r5, [r0, #2]
 801dc5c:	8082      	strh	r2, [r0, #4]
 801dc5e:	8003      	strh	r3, [r0, #0]
 801dc60:	80c4      	strh	r4, [r0, #6]
 801dc62:	bd30      	pop	{r4, r5, pc}

0801dc64 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz>:
 801dc64:	b570      	push	{r4, r5, r6, lr}
 801dc66:	b086      	sub	sp, #24
 801dc68:	ad02      	add	r5, sp, #8
 801dc6a:	e885 0006 	stmia.w	r5, {r1, r2}
 801dc6e:	461a      	mov	r2, r3
 801dc70:	ab0c      	add	r3, sp, #48	; 0x30
 801dc72:	9305      	str	r3, [sp, #20]
 801dc74:	4b0a      	ldr	r3, [pc, #40]	; (801dca0 <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RNS0_13StringVisualsEPKtz+0x3c>)
 801dc76:	685c      	ldr	r4, [r3, #4]
 801dc78:	f014 0f01 	tst.w	r4, #1
 801dc7c:	ea4f 0464 	mov.w	r4, r4, asr #1
 801dc80:	bf1c      	itt	ne
 801dc82:	681b      	ldrne	r3, [r3, #0]
 801dc84:	5901      	ldrne	r1, [r0, r4]
 801dc86:	4420      	add	r0, r4
 801dc88:	bf0c      	ite	eq
 801dc8a:	681e      	ldreq	r6, [r3, #0]
 801dc8c:	58ce      	ldrne	r6, [r1, r3]
 801dc8e:	4629      	mov	r1, r5
 801dc90:	9b05      	ldr	r3, [sp, #20]
 801dc92:	9301      	str	r3, [sp, #4]
 801dc94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801dc96:	9300      	str	r3, [sp, #0]
 801dc98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801dc9a:	47b0      	blx	r6
 801dc9c:	b006      	add	sp, #24
 801dc9e:	bd70      	pop	{r4, r5, r6, pc}
 801dca0:	2000007c 	.word	0x2000007c

0801dca4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 801dca4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dca8:	b097      	sub	sp, #92	; 0x5c
 801dcaa:	9112      	str	r1, [sp, #72]	; 0x48
 801dcac:	9313      	str	r3, [sp, #76]	; 0x4c
 801dcae:	9921      	ldr	r1, [sp, #132]	; 0x84
 801dcb0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801dcb2:	8809      	ldrh	r1, [r1, #0]
 801dcb4:	889b      	ldrh	r3, [r3, #4]
 801dcb6:	9f22      	ldr	r7, [sp, #136]	; 0x88
 801dcb8:	440b      	add	r3, r1
 801dcba:	920f      	str	r2, [sp, #60]	; 0x3c
 801dcbc:	f89d 2098 	ldrb.w	r2, [sp, #152]	; 0x98
 801dcc0:	b21b      	sxth	r3, r3
 801dcc2:	900e      	str	r0, [sp, #56]	; 0x38
 801dcc4:	f89d a08c 	ldrb.w	sl, [sp, #140]	; 0x8c
 801dcc8:	930d      	str	r3, [sp, #52]	; 0x34
 801dcca:	683b      	ldr	r3, [r7, #0]
 801dccc:	7a59      	ldrb	r1, [r3, #9]
 801dcce:	7a1b      	ldrb	r3, [r3, #8]
 801dcd0:	9111      	str	r1, [sp, #68]	; 0x44
 801dcd2:	9310      	str	r3, [sp, #64]	; 0x40
 801dcd4:	9b20      	ldr	r3, [sp, #128]	; 0x80
 801dcd6:	f9b3 6000 	ldrsh.w	r6, [r3]
 801dcda:	2a00      	cmp	r2, #0
 801dcdc:	d04b      	beq.n	801dd76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd2>
 801dcde:	7c3b      	ldrb	r3, [r7, #16]
 801dce0:	9a25      	ldr	r2, [sp, #148]	; 0x94
 801dce2:	2b04      	cmp	r3, #4
 801dce4:	bf0c      	ite	eq
 801dce6:	2302      	moveq	r3, #2
 801dce8:	2301      	movne	r3, #1
 801dcea:	4413      	add	r3, r2
 801dcec:	2500      	movs	r5, #0
 801dcee:	930c      	str	r3, [sp, #48]	; 0x30
 801dcf0:	46a9      	mov	r9, r5
 801dcf2:	462c      	mov	r4, r5
 801dcf4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801dcf6:	4599      	cmp	r9, r3
 801dcf8:	da6a      	bge.n	801ddd0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12c>
 801dcfa:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801dcfc:	4599      	cmp	r9, r3
 801dcfe:	db3c      	blt.n	801dd7a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xd6>
 801dd00:	6838      	ldr	r0, [r7, #0]
 801dd02:	6803      	ldr	r3, [r0, #0]
 801dd04:	695b      	ldr	r3, [r3, #20]
 801dd06:	4798      	blx	r3
 801dd08:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801dd0c:	4680      	mov	r8, r0
 801dd0e:	4298      	cmp	r0, r3
 801dd10:	d045      	beq.n	801dd9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801dd12:	f242 030b 	movw	r3, #8203	; 0x200b
 801dd16:	4298      	cmp	r0, r3
 801dd18:	d041      	beq.n	801dd9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801dd1a:	2800      	cmp	r0, #0
 801dd1c:	d057      	beq.n	801ddce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801dd1e:	280a      	cmp	r0, #10
 801dd20:	d055      	beq.n	801ddce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801dd22:	6838      	ldr	r0, [r7, #0]
 801dd24:	aa15      	add	r2, sp, #84	; 0x54
 801dd26:	4641      	mov	r1, r8
 801dd28:	6803      	ldr	r3, [r0, #0]
 801dd2a:	f8d3 b008 	ldr.w	fp, [r3, #8]
 801dd2e:	f10d 0353 	add.w	r3, sp, #83	; 0x53
 801dd32:	47d8      	blx	fp
 801dd34:	4683      	mov	fp, r0
 801dd36:	b328      	cbz	r0, 801dd84 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xe0>
 801dd38:	f8b0 8004 	ldrh.w	r8, [r0, #4]
 801dd3c:	f1ba 0f00 	cmp.w	sl, #0
 801dd40:	d031      	beq.n	801dda6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x102>
 801dd42:	f99b 200d 	ldrsb.w	r2, [fp, #13]
 801dd46:	f89b 300a 	ldrb.w	r3, [fp, #10]
 801dd4a:	2a00      	cmp	r2, #0
 801dd4c:	bfb4      	ite	lt
 801dd4e:	f44f 7580 	movlt.w	r5, #256	; 0x100
 801dd52:	2500      	movge	r5, #0
 801dd54:	f1ba 0f01 	cmp.w	sl, #1
 801dd58:	ea45 0503 	orr.w	r5, r5, r3
 801dd5c:	d125      	bne.n	801ddaa <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x106>
 801dd5e:	1b76      	subs	r6, r6, r5
 801dd60:	2c00      	cmp	r4, #0
 801dd62:	d147      	bne.n	801ddf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801dd64:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801dd66:	19ab      	adds	r3, r5, r6
 801dd68:	4413      	add	r3, r2
 801dd6a:	9a21      	ldr	r2, [sp, #132]	; 0x84
 801dd6c:	f9b2 2000 	ldrsh.w	r2, [r2]
 801dd70:	4293      	cmp	r3, r2
 801dd72:	da4a      	bge.n	801de0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x166>
 801dd74:	e02b      	b.n	801ddce <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12a>
 801dd76:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801dd78:	e7b8      	b.n	801dcec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x48>
 801dd7a:	4651      	mov	r1, sl
 801dd7c:	9824      	ldr	r0, [sp, #144]	; 0x90
 801dd7e:	f001 fe09 	bl	801f994 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801dd82:	e7c1      	b.n	801dd08 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x64>
 801dd84:	6838      	ldr	r0, [r7, #0]
 801dd86:	6803      	ldr	r3, [r0, #0]
 801dd88:	691b      	ldr	r3, [r3, #16]
 801dd8a:	4798      	blx	r3
 801dd8c:	f64f 63ff 	movw	r3, #65279	; 0xfeff
 801dd90:	4298      	cmp	r0, r3
 801dd92:	d004      	beq.n	801dd9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801dd94:	f242 030b 	movw	r3, #8203	; 0x200b
 801dd98:	4298      	cmp	r0, r3
 801dd9a:	bf18      	it	ne
 801dd9c:	2500      	movne	r5, #0
 801dd9e:	f109 0901 	add.w	r9, r9, #1
 801dda2:	4644      	mov	r4, r8
 801dda4:	e7a6      	b.n	801dcf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 801dda6:	442e      	add	r6, r5
 801dda8:	e7cb      	b.n	801dd42 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x9e>
 801ddaa:	2c00      	cmp	r4, #0
 801ddac:	f000 80a6 	beq.w	801defc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x258>
 801ddb0:	f1ba 0f00 	cmp.w	sl, #0
 801ddb4:	d11e      	bne.n	801ddf4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 801ddb6:	6838      	ldr	r0, [r7, #0]
 801ddb8:	465a      	mov	r2, fp
 801ddba:	4621      	mov	r1, r4
 801ddbc:	6803      	ldr	r3, [r0, #0]
 801ddbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ddc0:	4798      	blx	r3
 801ddc2:	4406      	add	r6, r0
 801ddc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ddc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ddc8:	1af3      	subs	r3, r6, r3
 801ddca:	4293      	cmp	r3, r2
 801ddcc:	dd1d      	ble.n	801de0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x166>
 801ddce:	4644      	mov	r4, r8
 801ddd0:	2c00      	cmp	r4, #0
 801ddd2:	f000 8091 	beq.w	801def8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x254>
 801ddd6:	2c0a      	cmp	r4, #10
 801ddd8:	f000 8087 	beq.w	801deea <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x246>
 801dddc:	f109 0901 	add.w	r9, r9, #1
 801dde0:	9b25      	ldr	r3, [sp, #148]	; 0x94
 801dde2:	4599      	cmp	r9, r3
 801dde4:	f280 8082 	bge.w	801deec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x248>
 801dde8:	4651      	mov	r1, sl
 801ddea:	9824      	ldr	r0, [sp, #144]	; 0x90
 801ddec:	f001 fdd2 	bl	801f994 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ddf0:	4604      	mov	r4, r0
 801ddf2:	e7ed      	b.n	801ddd0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12c>
 801ddf4:	6838      	ldr	r0, [r7, #0]
 801ddf6:	465a      	mov	r2, fp
 801ddf8:	4621      	mov	r1, r4
 801ddfa:	6803      	ldr	r3, [r0, #0]
 801ddfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ddfe:	4798      	blx	r3
 801de00:	f1ba 0f01 	cmp.w	sl, #1
 801de04:	eba6 0600 	sub.w	r6, r6, r0
 801de08:	d0ac      	beq.n	801dd64 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xc0>
 801de0a:	f89b 300d 	ldrb.w	r3, [fp, #13]
 801de0e:	f99b 2009 	ldrsb.w	r2, [fp, #9]
 801de12:	f013 0f08 	tst.w	r3, #8
 801de16:	f89b 1006 	ldrb.w	r1, [fp, #6]
 801de1a:	4432      	add	r2, r6
 801de1c:	9821      	ldr	r0, [sp, #132]	; 0x84
 801de1e:	bf14      	ite	ne
 801de20:	f44f 7380 	movne.w	r3, #256	; 0x100
 801de24:	2300      	moveq	r3, #0
 801de26:	f9b0 4000 	ldrsh.w	r4, [r0]
 801de2a:	430b      	orrs	r3, r1
 801de2c:	4413      	add	r3, r2
 801de2e:	42a3      	cmp	r3, r4
 801de30:	dbb5      	blt.n	801dd9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801de32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801de34:	429a      	cmp	r2, r3
 801de36:	dab2      	bge.n	801dd9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801de38:	6838      	ldr	r0, [r7, #0]
 801de3a:	42b4      	cmp	r4, r6
 801de3c:	6803      	ldr	r3, [r0, #0]
 801de3e:	bfcc      	ite	gt
 801de40:	1ba4      	subgt	r4, r4, r6
 801de42:	2400      	movle	r4, #0
 801de44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801de46:	bfc8      	it	gt
 801de48:	b2a4      	uxthgt	r4, r4
 801de4a:	4798      	blx	r3
 801de4c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 801de4e:	4a2e      	ldr	r2, [pc, #184]	; (801df08 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x264>)
 801de50:	4418      	add	r0, r3
 801de52:	f89b 300d 	ldrb.w	r3, [fp, #13]
 801de56:	f89b e008 	ldrb.w	lr, [fp, #8]
 801de5a:	f013 0f40 	tst.w	r3, #64	; 0x40
 801de5e:	bf14      	ite	ne
 801de60:	4611      	movne	r1, r2
 801de62:	2100      	moveq	r1, #0
 801de64:	f013 0f20 	tst.w	r3, #32
 801de68:	ea41 010e 	orr.w	r1, r1, lr
 801de6c:	bf14      	ite	ne
 801de6e:	f44f 7280 	movne.w	r2, #256	; 0x100
 801de72:	2200      	moveq	r2, #0
 801de74:	430a      	orrs	r2, r1
 801de76:	9921      	ldr	r1, [sp, #132]	; 0x84
 801de78:	1a80      	subs	r0, r0, r2
 801de7a:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 801de7e:	b280      	uxth	r0, r0
 801de80:	b202      	sxth	r2, r0
 801de82:	428a      	cmp	r2, r1
 801de84:	da2f      	bge.n	801dee6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x242>
 801de86:	f013 0f10 	tst.w	r3, #16
 801de8a:	f89b e007 	ldrb.w	lr, [fp, #7]
 801de8e:	bf14      	ite	ne
 801de90:	f44f 7380 	movne.w	r3, #256	; 0x100
 801de94:	2300      	moveq	r3, #0
 801de96:	ea43 030e 	orr.w	r3, r3, lr
 801de9a:	441a      	add	r2, r3
 801de9c:	4291      	cmp	r1, r2
 801de9e:	f73f af7e 	bgt.w	801dd9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801dea2:	1a08      	subs	r0, r1, r0
 801dea4:	460a      	mov	r2, r1
 801dea6:	b280      	uxth	r0, r0
 801dea8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801deaa:	6819      	ldr	r1, [r3, #0]
 801deac:	79bb      	ldrb	r3, [r7, #6]
 801deae:	930a      	str	r3, [sp, #40]	; 0x28
 801deb0:	7bbb      	ldrb	r3, [r7, #14]
 801deb2:	9309      	str	r3, [sp, #36]	; 0x24
 801deb4:	f89d 3053 	ldrb.w	r3, [sp, #83]	; 0x53
 801deb8:	9308      	str	r3, [sp, #32]
 801deba:	68bb      	ldr	r3, [r7, #8]
 801debc:	9402      	str	r4, [sp, #8]
 801debe:	4434      	add	r4, r6
 801dec0:	9307      	str	r3, [sp, #28]
 801dec2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801dec4:	b224      	sxth	r4, r4
 801dec6:	9003      	str	r0, [sp, #12]
 801dec8:	9306      	str	r3, [sp, #24]
 801deca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801decc:	f8cd b014 	str.w	fp, [sp, #20]
 801ded0:	9304      	str	r3, [sp, #16]
 801ded2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ded4:	9201      	str	r2, [sp, #4]
 801ded6:	9400      	str	r4, [sp, #0]
 801ded8:	980e      	ldr	r0, [sp, #56]	; 0x38
 801deda:	6a8c      	ldr	r4, [r1, #40]	; 0x28
 801dedc:	681a      	ldr	r2, [r3, #0]
 801dede:	9912      	ldr	r1, [sp, #72]	; 0x48
 801dee0:	685b      	ldr	r3, [r3, #4]
 801dee2:	47a0      	blx	r4
 801dee4:	e75b      	b.n	801dd9e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfa>
 801dee6:	2000      	movs	r0, #0
 801dee8:	e7de      	b.n	801dea8 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x204>
 801deea:	240a      	movs	r4, #10
 801deec:	fab4 f084 	clz	r0, r4
 801def0:	0940      	lsrs	r0, r0, #5
 801def2:	b017      	add	sp, #92	; 0x5c
 801def4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801def8:	2400      	movs	r4, #0
 801defa:	e7f7      	b.n	801deec <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x248>
 801defc:	f1ba 0f00 	cmp.w	sl, #0
 801df00:	f43f af60 	beq.w	801ddc4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x120>
 801df04:	e781      	b.n	801de0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x166>
 801df06:	bf00      	nop
 801df08:	fffffe00 	.word	0xfffffe00

0801df0c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 801df0c:	b530      	push	{r4, r5, lr}
 801df0e:	8ac4      	ldrh	r4, [r0, #22]
 801df10:	8b45      	ldrh	r5, [r0, #26]
 801df12:	8343      	strh	r3, [r0, #26]
 801df14:	442c      	add	r4, r5
 801df16:	1ae4      	subs	r4, r4, r3
 801df18:	8b83      	ldrh	r3, [r0, #28]
 801df1a:	82c4      	strh	r4, [r0, #22]
 801df1c:	8b04      	ldrh	r4, [r0, #24]
 801df1e:	4422      	add	r2, r4
 801df20:	440c      	add	r4, r1
 801df22:	1a59      	subs	r1, r3, r1
 801df24:	83c2      	strh	r2, [r0, #30]
 801df26:	8304      	strh	r4, [r0, #24]
 801df28:	8381      	strh	r1, [r0, #28]
 801df2a:	bd30      	pop	{r4, r5, pc}

0801df2c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>:
 801df2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df30:	f890 b009 	ldrb.w	fp, [r0, #9]
 801df34:	b085      	sub	sp, #20
 801df36:	4604      	mov	r4, r0
 801df38:	460f      	mov	r7, r1
 801df3a:	f1ab 0303 	sub.w	r3, fp, #3
 801df3e:	b331      	cbz	r1, 801df8e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x62>
 801df40:	2b01      	cmp	r3, #1
 801df42:	d922      	bls.n	801df8a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x5e>
 801df44:	f10b 32ff 	add.w	r2, fp, #4294967295
 801df48:	f1d2 0a00 	rsbs	sl, r2, #0
 801df4c:	eb4a 0a02 	adc.w	sl, sl, r2
 801df50:	f1ab 0302 	sub.w	r3, fp, #2
 801df54:	2500      	movs	r5, #0
 801df56:	f1d3 0b00 	rsbs	fp, r3, #0
 801df5a:	9501      	str	r5, [sp, #4]
 801df5c:	eb4b 0b03 	adc.w	fp, fp, r3
 801df60:	2600      	movs	r6, #0
 801df62:	82e6      	strh	r6, [r4, #22]
 801df64:	8326      	strh	r6, [r4, #24]
 801df66:	7a21      	ldrb	r1, [r4, #8]
 801df68:	6860      	ldr	r0, [r4, #4]
 801df6a:	f8b4 9000 	ldrh.w	r9, [r4]
 801df6e:	f001 fd11 	bl	801f994 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801df72:	4601      	mov	r1, r0
 801df74:	8020      	strh	r0, [r4, #0]
 801df76:	b9c8      	cbnz	r0, 801dfac <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x80>
 801df78:	8ba2      	ldrh	r2, [r4, #28]
 801df7a:	2300      	movs	r3, #0
 801df7c:	4611      	mov	r1, r2
 801df7e:	4620      	mov	r0, r4
 801df80:	b005      	add	sp, #20
 801df82:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801df86:	f7ff bfc1 	b.w	801df0c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801df8a:	468a      	mov	sl, r1
 801df8c:	e7e0      	b.n	801df50 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x24>
 801df8e:	2b01      	cmp	r3, #1
 801df90:	f10b 3bff 	add.w	fp, fp, #4294967295
 801df94:	468a      	mov	sl, r1
 801df96:	bf8c      	ite	hi
 801df98:	2300      	movhi	r3, #0
 801df9a:	2301      	movls	r3, #1
 801df9c:	f1bb 0f01 	cmp.w	fp, #1
 801dfa0:	468b      	mov	fp, r1
 801dfa2:	9301      	str	r3, [sp, #4]
 801dfa4:	bf8c      	ite	hi
 801dfa6:	2500      	movhi	r5, #0
 801dfa8:	2501      	movls	r5, #1
 801dfaa:	e7d9      	b.n	801df60 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x34>
 801dfac:	8b63      	ldrh	r3, [r4, #26]
 801dfae:	280a      	cmp	r0, #10
 801dfb0:	f103 0301 	add.w	r3, r3, #1
 801dfb4:	8363      	strh	r3, [r4, #26]
 801dfb6:	d0df      	beq.n	801df78 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x4c>
 801dfb8:	6920      	ldr	r0, [r4, #16]
 801dfba:	6803      	ldr	r3, [r0, #0]
 801dfbc:	68db      	ldr	r3, [r3, #12]
 801dfbe:	4798      	blx	r3
 801dfc0:	4602      	mov	r2, r0
 801dfc2:	2800      	cmp	r0, #0
 801dfc4:	d0cf      	beq.n	801df66 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801dfc6:	8883      	ldrh	r3, [r0, #4]
 801dfc8:	f8b4 801c 	ldrh.w	r8, [r4, #28]
 801dfcc:	2b20      	cmp	r3, #32
 801dfce:	8023      	strh	r3, [r4, #0]
 801dfd0:	d103      	bne.n	801dfda <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xae>
 801dfd2:	f1b9 0f20 	cmp.w	r9, #32
 801dfd6:	bf18      	it	ne
 801dfd8:	4646      	movne	r6, r8
 801dfda:	7a93      	ldrb	r3, [r2, #10]
 801dfdc:	4649      	mov	r1, r9
 801dfde:	6920      	ldr	r0, [r4, #16]
 801dfe0:	9302      	str	r3, [sp, #8]
 801dfe2:	f992 300d 	ldrsb.w	r3, [r2, #13]
 801dfe6:	2b00      	cmp	r3, #0
 801dfe8:	bfb4      	ite	lt
 801dfea:	f44f 7380 	movlt.w	r3, #256	; 0x100
 801dfee:	2300      	movge	r3, #0
 801dff0:	9303      	str	r3, [sp, #12]
 801dff2:	6803      	ldr	r3, [r0, #0]
 801dff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801dff6:	4798      	blx	r3
 801dff8:	9b03      	ldr	r3, [sp, #12]
 801dffa:	9a02      	ldr	r2, [sp, #8]
 801dffc:	8aa1      	ldrh	r1, [r4, #20]
 801dffe:	431a      	orrs	r2, r3
 801e000:	8b23      	ldrh	r3, [r4, #24]
 801e002:	4402      	add	r2, r0
 801e004:	8ba0      	ldrh	r0, [r4, #28]
 801e006:	4402      	add	r2, r0
 801e008:	b292      	uxth	r2, r2
 801e00a:	83a2      	strh	r2, [r4, #28]
 801e00c:	4413      	add	r3, r2
 801e00e:	b327      	cbz	r7, 801e05a <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x12e>
 801e010:	f1ba 0f00 	cmp.w	sl, #0
 801e014:	d105      	bne.n	801e022 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0xf6>
 801e016:	f1bb 0f00 	cmp.w	fp, #0
 801e01a:	d00f      	beq.n	801e03c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x110>
 801e01c:	8820      	ldrh	r0, [r4, #0]
 801e01e:	2820      	cmp	r0, #32
 801e020:	d10c      	bne.n	801e03c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x110>
 801e022:	8c20      	ldrh	r0, [r4, #32]
 801e024:	4418      	add	r0, r3
 801e026:	4281      	cmp	r1, r0
 801e028:	da02      	bge.n	801e030 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x104>
 801e02a:	8ae0      	ldrh	r0, [r4, #22]
 801e02c:	2800      	cmp	r0, #0
 801e02e:	d13a      	bne.n	801e0a6 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x17a>
 801e030:	2300      	movs	r3, #0
 801e032:	4611      	mov	r1, r2
 801e034:	4620      	mov	r0, r4
 801e036:	f7ff ff69 	bl	801df0c <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 801e03a:	e794      	b.n	801df66 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801e03c:	428b      	cmp	r3, r1
 801e03e:	dd92      	ble.n	801df66 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801e040:	8ae3      	ldrh	r3, [r4, #22]
 801e042:	2b00      	cmp	r3, #0
 801e044:	d08f      	beq.n	801df66 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801e046:	2301      	movs	r3, #1
 801e048:	8c22      	ldrh	r2, [r4, #32]
 801e04a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
 801e04e:	8be3      	ldrh	r3, [r4, #30]
 801e050:	4413      	add	r3, r2
 801e052:	83e3      	strh	r3, [r4, #30]
 801e054:	b005      	add	sp, #20
 801e056:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e05a:	428b      	cmp	r3, r1
 801e05c:	dd17      	ble.n	801e08e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x162>
 801e05e:	9b01      	ldr	r3, [sp, #4]
 801e060:	b113      	cbz	r3, 801e068 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x13c>
 801e062:	2301      	movs	r3, #1
 801e064:	4642      	mov	r2, r8
 801e066:	e789      	b.n	801df7c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x50>
 801e068:	2d00      	cmp	r5, #0
 801e06a:	f43f af7c 	beq.w	801df66 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801e06e:	8823      	ldrh	r3, [r4, #0]
 801e070:	2b20      	cmp	r3, #32
 801e072:	f43f af78 	beq.w	801df66 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801e076:	f1b9 0f20 	cmp.w	r9, #32
 801e07a:	d103      	bne.n	801e084 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x158>
 801e07c:	2301      	movs	r3, #1
 801e07e:	4632      	mov	r2, r6
 801e080:	4641      	mov	r1, r8
 801e082:	e77c      	b.n	801df7e <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x52>
 801e084:	8ae3      	ldrh	r3, [r4, #22]
 801e086:	2b00      	cmp	r3, #0
 801e088:	f43f af6d 	beq.w	801df66 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801e08c:	e7e2      	b.n	801e054 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x128>
 801e08e:	8823      	ldrh	r3, [r4, #0]
 801e090:	2b20      	cmp	r3, #32
 801e092:	f43f af68 	beq.w	801df66 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801e096:	f1b9 0f20 	cmp.w	r9, #32
 801e09a:	f47f af64 	bne.w	801df66 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801e09e:	2301      	movs	r3, #1
 801e0a0:	4632      	mov	r2, r6
 801e0a2:	4641      	mov	r1, r8
 801e0a4:	e7c6      	b.n	801e034 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x108>
 801e0a6:	428b      	cmp	r3, r1
 801e0a8:	f77f af5d 	ble.w	801df66 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x3a>
 801e0ac:	e7cb      	b.n	801e046 <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb+0x11a>

0801e0ae <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 801e0ae:	b570      	push	{r4, r5, r6, lr}
 801e0b0:	4606      	mov	r6, r0
 801e0b2:	b08c      	sub	sp, #48	; 0x30
 801e0b4:	4615      	mov	r5, r2
 801e0b6:	b191      	cbz	r1, 801e0de <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x30>
 801e0b8:	2401      	movs	r4, #1
 801e0ba:	9101      	str	r1, [sp, #4]
 801e0bc:	9300      	str	r3, [sp, #0]
 801e0be:	4601      	mov	r1, r0
 801e0c0:	4613      	mov	r3, r2
 801e0c2:	a803      	add	r0, sp, #12
 801e0c4:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 801e0c8:	f7ff fd22 	bl	801db10 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801e0cc:	2100      	movs	r1, #0
 801e0ce:	a803      	add	r0, sp, #12
 801e0d0:	f7ff ff2c 	bl	801df2c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801e0d4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 801e0d8:	b173      	cbz	r3, 801e0f8 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801e0da:	3401      	adds	r4, #1
 801e0dc:	e7f6      	b.n	801e0cc <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x1e>
 801e0de:	2401      	movs	r4, #1
 801e0e0:	4611      	mov	r1, r2
 801e0e2:	f001 fc57 	bl	801f994 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e0e6:	280a      	cmp	r0, #10
 801e0e8:	4629      	mov	r1, r5
 801e0ea:	4630      	mov	r0, r6
 801e0ec:	bf08      	it	eq
 801e0ee:	3401      	addeq	r4, #1
 801e0f0:	f001 fc50 	bl	801f994 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e0f4:	2800      	cmp	r0, #0
 801e0f6:	d1f6      	bne.n	801e0e6 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x38>
 801e0f8:	b2a0      	uxth	r0, r4
 801e0fa:	b00c      	add	sp, #48	; 0x30
 801e0fc:	bd70      	pop	{r4, r5, r6, pc}
	...

0801e100 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 801e100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e104:	b0ab      	sub	sp, #172	; 0xac
 801e106:	4689      	mov	r9, r1
 801e108:	461c      	mov	r4, r3
 801e10a:	f8dd a0d0 	ldr.w	sl, [sp, #208]	; 0xd0
 801e10e:	9009      	str	r0, [sp, #36]	; 0x24
 801e110:	f1ba 0f00 	cmp.w	sl, #0
 801e114:	f000 80ac 	beq.w	801e270 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801e118:	681b      	ldr	r3, [r3, #0]
 801e11a:	2b00      	cmp	r3, #0
 801e11c:	f000 80a8 	beq.w	801e270 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801e120:	7ba3      	ldrb	r3, [r4, #14]
 801e122:	2b00      	cmp	r3, #0
 801e124:	f000 80a4 	beq.w	801e270 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801e128:	6810      	ldr	r0, [r2, #0]
 801e12a:	ab0b      	add	r3, sp, #44	; 0x2c
 801e12c:	6851      	ldr	r1, [r2, #4]
 801e12e:	f10d 083c 	add.w	r8, sp, #60	; 0x3c
 801e132:	f9b9 2006 	ldrsh.w	r2, [r9, #6]
 801e136:	c303      	stmia	r3!, {r0, r1}
 801e138:	f9b9 1004 	ldrsh.w	r1, [r9, #4]
 801e13c:	2300      	movs	r3, #0
 801e13e:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801e142:	a80b      	add	r0, sp, #44	; 0x2c
 801e144:	f8ad 1038 	strh.w	r1, [sp, #56]	; 0x38
 801e148:	a90d      	add	r1, sp, #52	; 0x34
 801e14a:	79a2      	ldrb	r2, [r4, #6]
 801e14c:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801e150:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801e154:	f7ff fd55 	bl	801dc02 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801e158:	a90d      	add	r1, sp, #52	; 0x34
 801e15a:	79a2      	ldrb	r2, [r4, #6]
 801e15c:	4608      	mov	r0, r1
 801e15e:	f7ff fd50 	bl	801dc02 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 801e162:	4640      	mov	r0, r8
 801e164:	f001 fc5c 	bl	801fa20 <_ZN8touchgfx12TextProviderC1Ev>
 801e168:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801e16a:	4651      	mov	r1, sl
 801e16c:	4640      	mov	r0, r8
 801e16e:	f001 fc60 	bl	801fa32 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801e172:	a815      	add	r0, sp, #84	; 0x54
 801e174:	f001 fc54 	bl	801fa20 <_ZN8touchgfx12TextProviderC1Ev>
 801e178:	7927      	ldrb	r7, [r4, #4]
 801e17a:	b127      	cbz	r7, 801e186 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x86>
 801e17c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801e17e:	4651      	mov	r1, sl
 801e180:	a815      	add	r0, sp, #84	; 0x54
 801e182:	f001 fc56 	bl	801fa32 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801e186:	6820      	ldr	r0, [r4, #0]
 801e188:	89a5      	ldrh	r5, [r4, #12]
 801e18a:	6803      	ldr	r3, [r0, #0]
 801e18c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801e18e:	4798      	blx	r3
 801e190:	4405      	add	r5, r0
 801e192:	a81b      	add	r0, sp, #108	; 0x6c
 801e194:	f9bd 602e 	ldrsh.w	r6, [sp, #46]	; 0x2e
 801e198:	f001 fc42 	bl	801fa20 <_ZN8touchgfx12TextProviderC1Ev>
 801e19c:	7c23      	ldrb	r3, [r4, #16]
 801e19e:	fb96 f6f5 	sdiv	r6, r6, r5
 801e1a2:	b123      	cbz	r3, 801e1ae <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xae>
 801e1a4:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 801e1a6:	4651      	mov	r1, sl
 801e1a8:	a81b      	add	r0, sp, #108	; 0x6c
 801e1aa:	f001 fc42 	bl	801fa32 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801e1ae:	7c21      	ldrb	r1, [r4, #16]
 801e1b0:	a821      	add	r0, sp, #132	; 0x84
 801e1b2:	7963      	ldrb	r3, [r4, #5]
 801e1b4:	9101      	str	r1, [sp, #4]
 801e1b6:	6821      	ldr	r1, [r4, #0]
 801e1b8:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
 801e1bc:	9100      	str	r1, [sp, #0]
 801e1be:	a91b      	add	r1, sp, #108	; 0x6c
 801e1c0:	f7ff fca6 	bl	801db10 <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEthPKNS_4FontENS_14WideTextActionE>
 801e1c4:	7c23      	ldrb	r3, [r4, #16]
 801e1c6:	bb03      	cbnz	r3, 801e20a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x10a>
 801e1c8:	fa1f fa85 	uxth.w	sl, r5
 801e1cc:	2e00      	cmp	r6, #0
 801e1ce:	dd52      	ble.n	801e276 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x176>
 801e1d0:	7961      	ldrb	r1, [r4, #5]
 801e1d2:	4640      	mov	r0, r8
 801e1d4:	f001 fbde 	bl	801f994 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e1d8:	4683      	mov	fp, r0
 801e1da:	b11f      	cbz	r7, 801e1e4 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xe4>
 801e1dc:	7961      	ldrb	r1, [r4, #5]
 801e1de:	a815      	add	r0, sp, #84	; 0x54
 801e1e0:	f001 fbd8 	bl	801f994 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e1e4:	f1bb 0f00 	cmp.w	fp, #0
 801e1e8:	d042      	beq.n	801e270 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801e1ea:	f1bb 0f0a 	cmp.w	fp, #10
 801e1ee:	d1ed      	bne.n	801e1cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xcc>
 801e1f0:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801e1f4:	3e01      	subs	r6, #1
 801e1f6:	4453      	add	r3, sl
 801e1f8:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801e1fc:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801e200:	eba3 030a 	sub.w	r3, r3, sl
 801e204:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e208:	e7e0      	b.n	801e1cc <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xcc>
 801e20a:	006b      	lsls	r3, r5, #1
 801e20c:	fa1f fa85 	uxth.w	sl, r5
 801e210:	9308      	str	r3, [sp, #32]
 801e212:	2e00      	cmp	r6, #0
 801e214:	dd2f      	ble.n	801e276 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x176>
 801e216:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801e21a:	a821      	add	r0, sp, #132	; 0x84
 801e21c:	9b08      	ldr	r3, [sp, #32]
 801e21e:	428b      	cmp	r3, r1
 801e220:	bfd4      	ite	le
 801e222:	2100      	movle	r1, #0
 801e224:	2101      	movgt	r1, #1
 801e226:	f7ff fe81 	bl	801df2c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801e22a:	f8bd b09a 	ldrh.w	fp, [sp, #154]	; 0x9a
 801e22e:	f1bb 0f00 	cmp.w	fp, #0
 801e232:	d00d      	beq.n	801e250 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x150>
 801e234:	7961      	ldrb	r1, [r4, #5]
 801e236:	4640      	mov	r0, r8
 801e238:	f001 fbac 	bl	801f994 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e23c:	b11f      	cbz	r7, 801e246 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x146>
 801e23e:	7961      	ldrb	r1, [r4, #5]
 801e240:	a815      	add	r0, sp, #84	; 0x54
 801e242:	f001 fba7 	bl	801f994 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801e246:	f10b 33ff 	add.w	r3, fp, #4294967295
 801e24a:	fa1f fb83 	uxth.w	fp, r3
 801e24e:	e7ee      	b.n	801e22e <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x12e>
 801e250:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801e254:	3e01      	subs	r6, #1
 801e256:	4453      	add	r3, sl
 801e258:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801e25c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
 801e260:	eba3 030a 	sub.w	r3, r3, sl
 801e264:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 801e268:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 801e26c:	2b00      	cmp	r3, #0
 801e26e:	d1d0      	bne.n	801e212 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x112>
 801e270:	b02b      	add	sp, #172	; 0xac
 801e272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e276:	4b40      	ldr	r3, [pc, #256]	; (801e378 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x278>)
 801e278:	ea4f 0b45 	mov.w	fp, r5, lsl #1
 801e27c:	f04f 0a02 	mov.w	sl, #2
 801e280:	6818      	ldr	r0, [r3, #0]
 801e282:	6803      	ldr	r3, [r0, #0]
 801e284:	6a1b      	ldr	r3, [r3, #32]
 801e286:	4798      	blx	r3
 801e288:	4606      	mov	r6, r0
 801e28a:	7c23      	ldrb	r3, [r4, #16]
 801e28c:	2b00      	cmp	r3, #0
 801e28e:	d067      	beq.n	801e360 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x260>
 801e290:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	; 0x3a
 801e294:	a821      	add	r0, sp, #132	; 0x84
 801e296:	458b      	cmp	fp, r1
 801e298:	bfd4      	ite	le
 801e29a:	2100      	movle	r1, #0
 801e29c:	2101      	movgt	r1, #1
 801e29e:	f7ff fe45 	bl	801df2c <_ZN8touchgfx3LCD22WideTextInternalStruct22getStringLengthForLineEb>
 801e2a2:	2f00      	cmp	r7, #0
 801e2a4:	d055      	beq.n	801e352 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801e2a6:	7c23      	ldrb	r3, [r4, #16]
 801e2a8:	2b00      	cmp	r3, #0
 801e2aa:	d05b      	beq.n	801e364 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x264>
 801e2ac:	f9bd 30a2 	ldrsh.w	r3, [sp, #162]	; 0xa2
 801e2b0:	7922      	ldrb	r2, [r4, #4]
 801e2b2:	2a01      	cmp	r2, #1
 801e2b4:	d145      	bne.n	801e342 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x242>
 801e2b6:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	; 0x38
 801e2ba:	1ac0      	subs	r0, r0, r3
 801e2bc:	fb90 f0fa 	sdiv	r0, r0, sl
 801e2c0:	b200      	sxth	r0, r0
 801e2c2:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
 801e2c6:	4418      	add	r0, r3
 801e2c8:	7c23      	ldrb	r3, [r4, #16]
 801e2ca:	f8ad 002a 	strh.w	r0, [sp, #42]	; 0x2a
 801e2ce:	2b00      	cmp	r3, #0
 801e2d0:	d043      	beq.n	801e35a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25a>
 801e2d2:	f8bd 209a 	ldrh.w	r2, [sp, #154]	; 0x9a
 801e2d6:	9205      	str	r2, [sp, #20]
 801e2d8:	2200      	movs	r2, #0
 801e2da:	f89d 10a6 	ldrb.w	r1, [sp, #166]	; 0xa6
 801e2de:	9203      	str	r2, [sp, #12]
 801e2e0:	aa0b      	add	r2, sp, #44	; 0x2c
 801e2e2:	9106      	str	r1, [sp, #24]
 801e2e4:	4631      	mov	r1, r6
 801e2e6:	9201      	str	r2, [sp, #4]
 801e2e8:	f10d 022a 	add.w	r2, sp, #42	; 0x2a
 801e2ec:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801e2f0:	9200      	str	r2, [sp, #0]
 801e2f2:	464a      	mov	r2, r9
 801e2f4:	f8cd 8010 	str.w	r8, [sp, #16]
 801e2f8:	9402      	str	r4, [sp, #8]
 801e2fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e2fc:	f7ff fcd2 	bl	801dca4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEsRsRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 801e300:	b9c8      	cbnz	r0, 801e336 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801e302:	b2aa      	uxth	r2, r5
 801e304:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
 801e308:	4611      	mov	r1, r2
 801e30a:	4413      	add	r3, r2
 801e30c:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
 801e310:	b21b      	sxth	r3, r3
 801e312:	1a52      	subs	r2, r2, r1
 801e314:	7c21      	ldrb	r1, [r4, #16]
 801e316:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 801e31a:	b212      	sxth	r2, r2
 801e31c:	f8ad 203a 	strh.w	r2, [sp, #58]	; 0x3a
 801e320:	b109      	cbz	r1, 801e326 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x226>
 801e322:	4295      	cmp	r5, r2
 801e324:	dc07      	bgt.n	801e336 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x236>
 801e326:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 801e32a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801e32e:	440a      	add	r2, r1
 801e330:	b212      	sxth	r2, r2
 801e332:	4293      	cmp	r3, r2
 801e334:	dda9      	ble.n	801e28a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x18a>
 801e336:	4b10      	ldr	r3, [pc, #64]	; (801e378 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x278>)
 801e338:	6818      	ldr	r0, [r3, #0]
 801e33a:	6803      	ldr	r3, [r0, #0]
 801e33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e33e:	4798      	blx	r3
 801e340:	e796      	b.n	801e270 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x170>
 801e342:	2a02      	cmp	r2, #2
 801e344:	d107      	bne.n	801e356 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 801e346:	7be2      	ldrb	r2, [r4, #15]
 801e348:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 801e34c:	1a80      	subs	r0, r0, r2
 801e34e:	1ac0      	subs	r0, r0, r3
 801e350:	e7b6      	b.n	801e2c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c0>
 801e352:	7be0      	ldrb	r0, [r4, #15]
 801e354:	e7b5      	b.n	801e2c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>
 801e356:	2000      	movs	r0, #0
 801e358:	e7b3      	b.n	801e2c2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c2>
 801e35a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801e35e:	e7ba      	b.n	801e2d6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1d6>
 801e360:	2f00      	cmp	r7, #0
 801e362:	d0f6      	beq.n	801e352 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801e364:	2300      	movs	r3, #0
 801e366:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801e36a:	6821      	ldr	r1, [r4, #0]
 801e36c:	a815      	add	r0, sp, #84	; 0x54
 801e36e:	f7ff fc12 	bl	801db96 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 801e372:	b203      	sxth	r3, r0
 801e374:	e79c      	b.n	801e2b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1b0>
 801e376:	bf00      	nop
 801e378:	20009d34 	.word	0x20009d34

0801e37c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 801e37c:	2b02      	cmp	r3, #2
 801e37e:	d00e      	beq.n	801e39e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x22>
 801e380:	2b03      	cmp	r3, #3
 801e382:	d012      	beq.n	801e3aa <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x2e>
 801e384:	2b01      	cmp	r3, #1
 801e386:	d003      	beq.n	801e390 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x14>
 801e388:	f9b0 2000 	ldrsh.w	r2, [r0]
 801e38c:	1850      	adds	r0, r2, r1
 801e38e:	4770      	bx	lr
 801e390:	8803      	ldrh	r3, [r0, #0]
 801e392:	8880      	ldrh	r0, [r0, #4]
 801e394:	4418      	add	r0, r3
 801e396:	b200      	sxth	r0, r0
 801e398:	1a80      	subs	r0, r0, r2
 801e39a:	3801      	subs	r0, #1
 801e39c:	4770      	bx	lr
 801e39e:	8803      	ldrh	r3, [r0, #0]
 801e3a0:	8880      	ldrh	r0, [r0, #4]
 801e3a2:	4418      	add	r0, r3
 801e3a4:	b200      	sxth	r0, r0
 801e3a6:	1a40      	subs	r0, r0, r1
 801e3a8:	e7f7      	b.n	801e39a <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 801e3aa:	f9b0 0000 	ldrsh.w	r0, [r0]
 801e3ae:	4410      	add	r0, r2
 801e3b0:	4770      	bx	lr

0801e3b2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801e3b2:	2b02      	cmp	r3, #2
 801e3b4:	d008      	beq.n	801e3c8 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x16>
 801e3b6:	2b03      	cmp	r3, #3
 801e3b8:	d00d      	beq.n	801e3d6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 801e3ba:	f9b0 0002 	ldrsh.w	r0, [r0, #2]
 801e3be:	2b01      	cmp	r3, #1
 801e3c0:	bf14      	ite	ne
 801e3c2:	1880      	addne	r0, r0, r2
 801e3c4:	1840      	addeq	r0, r0, r1
 801e3c6:	4770      	bx	lr
 801e3c8:	8843      	ldrh	r3, [r0, #2]
 801e3ca:	88c0      	ldrh	r0, [r0, #6]
 801e3cc:	4418      	add	r0, r3
 801e3ce:	b200      	sxth	r0, r0
 801e3d0:	1a80      	subs	r0, r0, r2
 801e3d2:	3801      	subs	r0, #1
 801e3d4:	4770      	bx	lr
 801e3d6:	8843      	ldrh	r3, [r0, #2]
 801e3d8:	88c0      	ldrh	r0, [r0, #6]
 801e3da:	4418      	add	r0, r3
 801e3dc:	b200      	sxth	r0, r0
 801e3de:	1a40      	subs	r0, r0, r1
 801e3e0:	e7f7      	b.n	801e3d2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x20>

0801e3e2 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>:
 801e3e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e3e4:	f8dd c014 	ldr.w	ip, [sp, #20]
 801e3e8:	1e05      	subs	r5, r0, #0
 801e3ea:	f04f 0601 	mov.w	r6, #1
 801e3ee:	9c06      	ldr	r4, [sp, #24]
 801e3f0:	bfba      	itte	lt
 801e3f2:	f04f 37ff 	movlt.w	r7, #4294967295
 801e3f6:	426d      	neglt	r5, r5
 801e3f8:	2701      	movge	r7, #1
 801e3fa:	f1bc 0f00 	cmp.w	ip, #0
 801e3fe:	f8dd e01c 	ldr.w	lr, [sp, #28]
 801e402:	bfbc      	itt	lt
 801e404:	f1cc 0c00 	rsblt	ip, ip, #0
 801e408:	427f      	neglt	r7, r7
 801e40a:	2c00      	cmp	r4, #0
 801e40c:	fa4c f001 	asr.w	r0, ip, r1
 801e410:	fa06 f101 	lsl.w	r1, r6, r1
 801e414:	bfbc      	itt	lt
 801e416:	4264      	neglt	r4, r4
 801e418:	427f      	neglt	r7, r7
 801e41a:	3901      	subs	r1, #1
 801e41c:	ea01 010c 	and.w	r1, r1, ip
 801e420:	434d      	muls	r5, r1
 801e422:	f8de 1000 	ldr.w	r1, [lr]
 801e426:	fb03 1300 	mla	r3, r3, r0, r1
 801e42a:	fb95 f1f4 	sdiv	r1, r5, r4
 801e42e:	fb04 5511 	mls	r5, r4, r1, r5
 801e432:	441d      	add	r5, r3
 801e434:	fb95 f3f4 	sdiv	r3, r5, r4
 801e438:	4419      	add	r1, r3
 801e43a:	fb04 5413 	mls	r4, r4, r3, r5
 801e43e:	fb02 1000 	mla	r0, r2, r0, r1
 801e442:	f8ce 4000 	str.w	r4, [lr]
 801e446:	4378      	muls	r0, r7
 801e448:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0801e44c <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 801e44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e450:	4c24      	ldr	r4, [pc, #144]	; (801e4e4 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x98>)
 801e452:	b086      	sub	sp, #24
 801e454:	4605      	mov	r5, r0
 801e456:	6807      	ldr	r7, [r0, #0]
 801e458:	69a3      	ldr	r3, [r4, #24]
 801e45a:	b92b      	cbnz	r3, 801e468 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1c>
 801e45c:	6840      	ldr	r0, [r0, #4]
 801e45e:	602f      	str	r7, [r5, #0]
 801e460:	6068      	str	r0, [r5, #4]
 801e462:	b006      	add	sp, #24
 801e464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e468:	f04f 0802 	mov.w	r8, #2
 801e46c:	68a2      	ldr	r2, [r4, #8]
 801e46e:	ae06      	add	r6, sp, #24
 801e470:	6820      	ldr	r0, [r4, #0]
 801e472:	fb93 f1f8 	sdiv	r1, r3, r8
 801e476:	440a      	add	r2, r1
 801e478:	69e1      	ldr	r1, [r4, #28]
 801e47a:	f846 2d04 	str.w	r2, [r6, #-4]!
 801e47e:	9301      	str	r3, [sp, #4]
 801e480:	9700      	str	r7, [sp, #0]
 801e482:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 801e484:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 801e486:	9602      	str	r6, [sp, #8]
 801e488:	f7ff ffab 	bl	801e3e2 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801e48c:	69a3      	ldr	r3, [r4, #24]
 801e48e:	4607      	mov	r7, r0
 801e490:	6b22      	ldr	r2, [r4, #48]	; 0x30
 801e492:	9301      	str	r3, [sp, #4]
 801e494:	686b      	ldr	r3, [r5, #4]
 801e496:	6a21      	ldr	r1, [r4, #32]
 801e498:	9300      	str	r3, [sp, #0]
 801e49a:	9602      	str	r6, [sp, #8]
 801e49c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e49e:	6860      	ldr	r0, [r4, #4]
 801e4a0:	f7ff ff9f 	bl	801e3e2 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801e4a4:	69a2      	ldr	r2, [r4, #24]
 801e4a6:	6963      	ldr	r3, [r4, #20]
 801e4a8:	4407      	add	r7, r0
 801e4aa:	9201      	str	r2, [sp, #4]
 801e4ac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801e4ae:	9602      	str	r6, [sp, #8]
 801e4b0:	68e0      	ldr	r0, [r4, #12]
 801e4b2:	fb92 f8f8 	sdiv	r8, r2, r8
 801e4b6:	4443      	add	r3, r8
 801e4b8:	6b62      	ldr	r2, [r4, #52]	; 0x34
 801e4ba:	9305      	str	r3, [sp, #20]
 801e4bc:	682b      	ldr	r3, [r5, #0]
 801e4be:	9300      	str	r3, [sp, #0]
 801e4c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 801e4c2:	f7ff ff8e 	bl	801e3e2 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801e4c6:	69a3      	ldr	r3, [r4, #24]
 801e4c8:	4680      	mov	r8, r0
 801e4ca:	9602      	str	r6, [sp, #8]
 801e4cc:	9301      	str	r3, [sp, #4]
 801e4ce:	686b      	ldr	r3, [r5, #4]
 801e4d0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 801e4d2:	9300      	str	r3, [sp, #0]
 801e4d4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 801e4d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 801e4d8:	6920      	ldr	r0, [r4, #16]
 801e4da:	f7ff ff82 	bl	801e3e2 <_ZN8touchgfx16TouchCalibration6muldivEllllllRl>
 801e4de:	4440      	add	r0, r8
 801e4e0:	e7bd      	b.n	801e45e <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x12>
 801e4e2:	bf00      	nop
 801e4e4:	20009d3c 	.word	0x20009d3c

0801e4e8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801e4e8:	4b07      	ldr	r3, [pc, #28]	; (801e508 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801e4ea:	b510      	push	{r4, lr}
 801e4ec:	781b      	ldrb	r3, [r3, #0]
 801e4ee:	2b01      	cmp	r3, #1
 801e4f0:	d108      	bne.n	801e504 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801e4f2:	4b06      	ldr	r3, [pc, #24]	; (801e50c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 801e4f4:	880c      	ldrh	r4, [r1, #0]
 801e4f6:	881b      	ldrh	r3, [r3, #0]
 801e4f8:	f9b0 2000 	ldrsh.w	r2, [r0]
 801e4fc:	3b01      	subs	r3, #1
 801e4fe:	1b1b      	subs	r3, r3, r4
 801e500:	8003      	strh	r3, [r0, #0]
 801e502:	800a      	strh	r2, [r1, #0]
 801e504:	bd10      	pop	{r4, pc}
 801e506:	bf00      	nop
 801e508:	20009d2c 	.word	0x20009d2c
 801e50c:	20009d30 	.word	0x20009d30

0801e510 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801e510:	4b07      	ldr	r3, [pc, #28]	; (801e530 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801e512:	b510      	push	{r4, lr}
 801e514:	781b      	ldrb	r3, [r3, #0]
 801e516:	2b01      	cmp	r3, #1
 801e518:	d108      	bne.n	801e52c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801e51a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801e51e:	f9b0 4000 	ldrsh.w	r4, [r0]
 801e522:	8003      	strh	r3, [r0, #0]
 801e524:	8893      	ldrh	r3, [r2, #4]
 801e526:	3b01      	subs	r3, #1
 801e528:	1b1b      	subs	r3, r3, r4
 801e52a:	800b      	strh	r3, [r1, #0]
 801e52c:	bd10      	pop	{r4, pc}
 801e52e:	bf00      	nop
 801e530:	20009d2c 	.word	0x20009d2c

0801e534 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801e534:	4b0a      	ldr	r3, [pc, #40]	; (801e560 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x2c>)
 801e536:	b513      	push	{r0, r1, r4, lr}
 801e538:	f9b3 4000 	ldrsh.w	r4, [r3]
 801e53c:	4b09      	ldr	r3, [pc, #36]	; (801e564 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x30>)
 801e53e:	f8ad 4004 	strh.w	r4, [sp, #4]
 801e542:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e546:	2300      	movs	r3, #0
 801e548:	f8ad 2006 	strh.w	r2, [sp, #6]
 801e54c:	466a      	mov	r2, sp
 801e54e:	f8ad 3000 	strh.w	r3, [sp]
 801e552:	f8ad 3002 	strh.w	r3, [sp, #2]
 801e556:	f7ff ffdb 	bl	801e510 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801e55a:	b002      	add	sp, #8
 801e55c:	bd10      	pop	{r4, pc}
 801e55e:	bf00      	nop
 801e560:	20009d28 	.word	0x20009d28
 801e564:	20009d2a 	.word	0x20009d2a

0801e568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 801e568:	4b0a      	ldr	r3, [pc, #40]	; (801e594 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 801e56a:	460a      	mov	r2, r1
 801e56c:	b510      	push	{r4, lr}
 801e56e:	781b      	ldrb	r3, [r3, #0]
 801e570:	2b01      	cmp	r3, #1
 801e572:	d10d      	bne.n	801e590 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801e574:	8881      	ldrh	r1, [r0, #4]
 801e576:	8803      	ldrh	r3, [r0, #0]
 801e578:	440b      	add	r3, r1
 801e57a:	4601      	mov	r1, r0
 801e57c:	3b01      	subs	r3, #1
 801e57e:	f821 3b02 	strh.w	r3, [r1], #2
 801e582:	f7ff ffc5 	bl	801e510 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801e586:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 801e58a:	88c2      	ldrh	r2, [r0, #6]
 801e58c:	80c3      	strh	r3, [r0, #6]
 801e58e:	8082      	strh	r2, [r0, #4]
 801e590:	bd10      	pop	{r4, pc}
 801e592:	bf00      	nop
 801e594:	20009d2c 	.word	0x20009d2c

0801e598 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 801e598:	4b0a      	ldr	r3, [pc, #40]	; (801e5c4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x2c>)
 801e59a:	b507      	push	{r0, r1, r2, lr}
 801e59c:	f9b3 1000 	ldrsh.w	r1, [r3]
 801e5a0:	4b09      	ldr	r3, [pc, #36]	; (801e5c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x30>)
 801e5a2:	f8ad 1004 	strh.w	r1, [sp, #4]
 801e5a6:	4669      	mov	r1, sp
 801e5a8:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e5ac:	2300      	movs	r3, #0
 801e5ae:	f8ad 2006 	strh.w	r2, [sp, #6]
 801e5b2:	f8ad 3000 	strh.w	r3, [sp]
 801e5b6:	f8ad 3002 	strh.w	r3, [sp, #2]
 801e5ba:	f7ff ffd5 	bl	801e568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e5be:	b003      	add	sp, #12
 801e5c0:	f85d fb04 	ldr.w	pc, [sp], #4
 801e5c4:	20009d28 	.word	0x20009d28
 801e5c8:	20009d2a 	.word	0x20009d2a

0801e5cc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 801e5cc:	4b03      	ldr	r3, [pc, #12]	; (801e5dc <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 801e5ce:	6818      	ldr	r0, [r3, #0]
 801e5d0:	b110      	cbz	r0, 801e5d8 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801e5d2:	6803      	ldr	r3, [r0, #0]
 801e5d4:	699b      	ldr	r3, [r3, #24]
 801e5d6:	4718      	bx	r3
 801e5d8:	4770      	bx	lr
 801e5da:	bf00      	nop
 801e5dc:	20009d88 	.word	0x20009d88

0801e5e0 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 801e5e0:	4770      	bx	lr
	...

0801e5e4 <_ZN8touchgfx11Application4drawEv>:
 801e5e4:	4b0b      	ldr	r3, [pc, #44]	; (801e614 <_ZN8touchgfx11Application4drawEv+0x30>)
 801e5e6:	b507      	push	{r0, r1, r2, lr}
 801e5e8:	f9b3 1000 	ldrsh.w	r1, [r3]
 801e5ec:	4b0a      	ldr	r3, [pc, #40]	; (801e618 <_ZN8touchgfx11Application4drawEv+0x34>)
 801e5ee:	f8ad 1004 	strh.w	r1, [sp, #4]
 801e5f2:	4669      	mov	r1, sp
 801e5f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e5f8:	2300      	movs	r3, #0
 801e5fa:	f8ad 3000 	strh.w	r3, [sp]
 801e5fe:	f8ad 3002 	strh.w	r3, [sp, #2]
 801e602:	6803      	ldr	r3, [r0, #0]
 801e604:	f8ad 2006 	strh.w	r2, [sp, #6]
 801e608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801e60a:	4798      	blx	r3
 801e60c:	b003      	add	sp, #12
 801e60e:	f85d fb04 	ldr.w	pc, [sp], #4
 801e612:	bf00      	nop
 801e614:	20009d28 	.word	0x20009d28
 801e618:	20009d2a 	.word	0x20009d2a

0801e61c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801e61c:	4b03      	ldr	r3, [pc, #12]	; (801e62c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801e61e:	6818      	ldr	r0, [r3, #0]
 801e620:	b110      	cbz	r0, 801e628 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 801e622:	6803      	ldr	r3, [r0, #0]
 801e624:	69db      	ldr	r3, [r3, #28]
 801e626:	4718      	bx	r3
 801e628:	4770      	bx	lr
 801e62a:	bf00      	nop
 801e62c:	20009d88 	.word	0x20009d88

0801e630 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 801e630:	4b03      	ldr	r3, [pc, #12]	; (801e640 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 801e632:	6818      	ldr	r0, [r3, #0]
 801e634:	b110      	cbz	r0, 801e63c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 801e636:	6803      	ldr	r3, [r0, #0]
 801e638:	6a1b      	ldr	r3, [r3, #32]
 801e63a:	4718      	bx	r3
 801e63c:	4770      	bx	lr
 801e63e:	bf00      	nop
 801e640:	20009d88 	.word	0x20009d88

0801e644 <_ZN8touchgfx11Application14handleKeyEventEh>:
 801e644:	4b03      	ldr	r3, [pc, #12]	; (801e654 <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801e646:	6818      	ldr	r0, [r3, #0]
 801e648:	b110      	cbz	r0, 801e650 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 801e64a:	6803      	ldr	r3, [r0, #0]
 801e64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e64e:	4718      	bx	r3
 801e650:	4770      	bx	lr
 801e652:	bf00      	nop
 801e654:	20009d88 	.word	0x20009d88

0801e658 <_ZN8touchgfx11Application15handleTickEventEv>:
 801e658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e65c:	4d3d      	ldr	r5, [pc, #244]	; (801e754 <_ZN8touchgfx11Application15handleTickEventEv+0xfc>)
 801e65e:	4604      	mov	r4, r0
 801e660:	6828      	ldr	r0, [r5, #0]
 801e662:	2800      	cmp	r0, #0
 801e664:	d047      	beq.n	801e6f6 <_ZN8touchgfx11Application15handleTickEventEv+0x9e>
 801e666:	7a03      	ldrb	r3, [r0, #8]
 801e668:	2b00      	cmp	r3, #0
 801e66a:	d144      	bne.n	801e6f6 <_ZN8touchgfx11Application15handleTickEventEv+0x9e>
 801e66c:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801e670:	6803      	ldr	r3, [r0, #0]
 801e672:	689b      	ldr	r3, [r3, #8]
 801e674:	e03c      	b.n	801e6f0 <_ZN8touchgfx11Application15handleTickEventEv+0x98>
 801e676:	3b01      	subs	r3, #1
 801e678:	f04f 0c00 	mov.w	ip, #0
 801e67c:	1c5a      	adds	r2, r3, #1
 801e67e:	d031      	beq.n	801e6e4 <_ZN8touchgfx11Application15handleTickEventEv+0x8c>
 801e680:	18e2      	adds	r2, r4, r3
 801e682:	f892 1088 	ldrb.w	r1, [r2, #136]	; 0x88
 801e686:	bb59      	cbnz	r1, 801e6e0 <_ZN8touchgfx11Application15handleTickEventEv+0x88>
 801e688:	b298      	uxth	r0, r3
 801e68a:	1d25      	adds	r5, r4, #4
 801e68c:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 801e690:	f8d2 8004 	ldr.w	r8, [r2, #4]
 801e694:	f8b4 2084 	ldrh.w	r2, [r4, #132]	; 0x84
 801e698:	428a      	cmp	r2, r1
 801e69a:	dd14      	ble.n	801e6c6 <_ZN8touchgfx11Application15handleTickEventEv+0x6e>
 801e69c:	682e      	ldr	r6, [r5, #0]
 801e69e:	45b0      	cmp	r8, r6
 801e6a0:	d106      	bne.n	801e6b0 <_ZN8touchgfx11Application15handleTickEventEv+0x58>
 801e6a2:	46ae      	mov	lr, r5
 801e6a4:	460e      	mov	r6, r1
 801e6a6:	2e1e      	cmp	r6, #30
 801e6a8:	dd05      	ble.n	801e6b6 <_ZN8touchgfx11Application15handleTickEventEv+0x5e>
 801e6aa:	3a01      	subs	r2, #1
 801e6ac:	f8a4 2084 	strh.w	r2, [r4, #132]	; 0x84
 801e6b0:	3101      	adds	r1, #1
 801e6b2:	3504      	adds	r5, #4
 801e6b4:	e7ee      	b.n	801e694 <_ZN8touchgfx11Application15handleTickEventEv+0x3c>
 801e6b6:	3601      	adds	r6, #1
 801e6b8:	f8de 7004 	ldr.w	r7, [lr, #4]
 801e6bc:	42b2      	cmp	r2, r6
 801e6be:	f84e 7b04 	str.w	r7, [lr], #4
 801e6c2:	dcf0      	bgt.n	801e6a6 <_ZN8touchgfx11Application15handleTickEventEv+0x4e>
 801e6c4:	e7f1      	b.n	801e6aa <_ZN8touchgfx11Application15handleTickEventEv+0x52>
 801e6c6:	4290      	cmp	r0, r2
 801e6c8:	da07      	bge.n	801e6da <_ZN8touchgfx11Application15handleTickEventEv+0x82>
 801e6ca:	1821      	adds	r1, r4, r0
 801e6cc:	3001      	adds	r0, #1
 801e6ce:	f891 5089 	ldrb.w	r5, [r1, #137]	; 0x89
 801e6d2:	b280      	uxth	r0, r0
 801e6d4:	f881 5088 	strb.w	r5, [r1, #136]	; 0x88
 801e6d8:	e7f5      	b.n	801e6c6 <_ZN8touchgfx11Application15handleTickEventEv+0x6e>
 801e6da:	4422      	add	r2, r4
 801e6dc:	f882 c088 	strb.w	ip, [r2, #136]	; 0x88
 801e6e0:	3b01      	subs	r3, #1
 801e6e2:	e7cb      	b.n	801e67c <_ZN8touchgfx11Application15handleTickEventEv+0x24>
 801e6e4:	4b1c      	ldr	r3, [pc, #112]	; (801e758 <_ZN8touchgfx11Application15handleTickEventEv+0x100>)
 801e6e6:	6818      	ldr	r0, [r3, #0]
 801e6e8:	2800      	cmp	r0, #0
 801e6ea:	d031      	beq.n	801e750 <_ZN8touchgfx11Application15handleTickEventEv+0xf8>
 801e6ec:	6803      	ldr	r3, [r0, #0]
 801e6ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801e6f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801e6f4:	4718      	bx	r3
 801e6f6:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
 801e6fa:	b913      	cbnz	r3, 801e702 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801e6fc:	b108      	cbz	r0, 801e702 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801e6fe:	7a03      	ldrb	r3, [r0, #8]
 801e700:	b9a3      	cbnz	r3, 801e72c <_ZN8touchgfx11Application15handleTickEventEv+0xd4>
 801e702:	eba4 0584 	sub.w	r5, r4, r4, lsl #2
 801e706:	f104 0788 	add.w	r7, r4, #136	; 0x88
 801e70a:	2600      	movs	r6, #0
 801e70c:	f5a5 7508 	sub.w	r5, r5, #544	; 0x220
 801e710:	f8b4 3084 	ldrh.w	r3, [r4, #132]	; 0x84
 801e714:	429e      	cmp	r6, r3
 801e716:	daae      	bge.n	801e676 <_ZN8touchgfx11Application15handleTickEventEv+0x1e>
 801e718:	f817 3b01 	ldrb.w	r3, [r7], #1
 801e71c:	b123      	cbz	r3, 801e728 <_ZN8touchgfx11Application15handleTickEventEv+0xd0>
 801e71e:	f855 0027 	ldr.w	r0, [r5, r7, lsl #2]
 801e722:	6803      	ldr	r3, [r0, #0]
 801e724:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801e726:	4798      	blx	r3
 801e728:	3601      	adds	r6, #1
 801e72a:	e7f1      	b.n	801e710 <_ZN8touchgfx11Application15handleTickEventEv+0xb8>
 801e72c:	4b0a      	ldr	r3, [pc, #40]	; (801e758 <_ZN8touchgfx11Application15handleTickEventEv+0x100>)
 801e72e:	6818      	ldr	r0, [r3, #0]
 801e730:	b110      	cbz	r0, 801e738 <_ZN8touchgfx11Application15handleTickEventEv+0xe0>
 801e732:	6803      	ldr	r3, [r0, #0]
 801e734:	691b      	ldr	r3, [r3, #16]
 801e736:	4798      	blx	r3
 801e738:	6828      	ldr	r0, [r5, #0]
 801e73a:	6803      	ldr	r3, [r0, #0]
 801e73c:	68db      	ldr	r3, [r3, #12]
 801e73e:	4798      	blx	r3
 801e740:	6823      	ldr	r3, [r4, #0]
 801e742:	4620      	mov	r0, r4
 801e744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e746:	4798      	blx	r3
 801e748:	2301      	movs	r3, #1
 801e74a:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
 801e74e:	e7d8      	b.n	801e702 <_ZN8touchgfx11Application15handleTickEventEv+0xaa>
 801e750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e754:	20009d8c 	.word	0x20009d8c
 801e758:	20009d88 	.word	0x20009d88

0801e75c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801e75c:	b570      	push	{r4, r5, r6, lr}
 801e75e:	4606      	mov	r6, r0
 801e760:	460c      	mov	r4, r1
 801e762:	b929      	cbnz	r1, 801e770 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x14>
 801e764:	4b0c      	ldr	r3, [pc, #48]	; (801e798 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x3c>)
 801e766:	2161      	movs	r1, #97	; 0x61
 801e768:	4a0c      	ldr	r2, [pc, #48]	; (801e79c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x40>)
 801e76a:	480d      	ldr	r0, [pc, #52]	; (801e7a0 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x44>)
 801e76c:	f003 fe76 	bl	802245c <__assert_func>
 801e770:	2300      	movs	r3, #0
 801e772:	4d0c      	ldr	r5, [pc, #48]	; (801e7a4 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x48>)
 801e774:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 801e778:	6828      	ldr	r0, [r5, #0]
 801e77a:	b110      	cbz	r0, 801e782 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x26>
 801e77c:	6803      	ldr	r3, [r0, #0]
 801e77e:	695b      	ldr	r3, [r3, #20]
 801e780:	4798      	blx	r3
 801e782:	602c      	str	r4, [r5, #0]
 801e784:	4620      	mov	r0, r4
 801e786:	6823      	ldr	r3, [r4, #0]
 801e788:	68db      	ldr	r3, [r3, #12]
 801e78a:	4798      	blx	r3
 801e78c:	6833      	ldr	r3, [r6, #0]
 801e78e:	4630      	mov	r0, r6
 801e790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801e792:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801e796:	4718      	bx	r3
 801e798:	08025bfa 	.word	0x08025bfa
 801e79c:	08025cc4 	.word	0x08025cc4
 801e7a0:	08025c04 	.word	0x08025c04
 801e7a4:	20009d88 	.word	0x20009d88

0801e7a8 <_ZNK8touchgfx4Rect8includesERKS0_>:
 801e7a8:	b570      	push	{r4, r5, r6, lr}
 801e7aa:	f9b1 4000 	ldrsh.w	r4, [r1]
 801e7ae:	f9b0 5000 	ldrsh.w	r5, [r0]
 801e7b2:	42ac      	cmp	r4, r5
 801e7b4:	db18      	blt.n	801e7e8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801e7b6:	f9b1 2002 	ldrsh.w	r2, [r1, #2]
 801e7ba:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801e7be:	429a      	cmp	r2, r3
 801e7c0:	db12      	blt.n	801e7e8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801e7c2:	8886      	ldrh	r6, [r0, #4]
 801e7c4:	4435      	add	r5, r6
 801e7c6:	888e      	ldrh	r6, [r1, #4]
 801e7c8:	4434      	add	r4, r6
 801e7ca:	b22d      	sxth	r5, r5
 801e7cc:	b224      	sxth	r4, r4
 801e7ce:	42a5      	cmp	r5, r4
 801e7d0:	db0a      	blt.n	801e7e8 <_ZNK8touchgfx4Rect8includesERKS0_+0x40>
 801e7d2:	88c0      	ldrh	r0, [r0, #6]
 801e7d4:	4418      	add	r0, r3
 801e7d6:	88cb      	ldrh	r3, [r1, #6]
 801e7d8:	441a      	add	r2, r3
 801e7da:	b200      	sxth	r0, r0
 801e7dc:	b212      	sxth	r2, r2
 801e7de:	4290      	cmp	r0, r2
 801e7e0:	bfb4      	ite	lt
 801e7e2:	2000      	movlt	r0, #0
 801e7e4:	2001      	movge	r0, #1
 801e7e6:	bd70      	pop	{r4, r5, r6, pc}
 801e7e8:	2000      	movs	r0, #0
 801e7ea:	bd70      	pop	{r4, r5, r6, pc}

0801e7ec <_ZN8touchgfx11Application11getInstanceEv>:
 801e7ec:	4b01      	ldr	r3, [pc, #4]	; (801e7f4 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801e7ee:	6818      	ldr	r0, [r3, #0]
 801e7f0:	4770      	bx	lr
 801e7f2:	bf00      	nop
 801e7f4:	20009d90 	.word	0x20009d90

0801e7f8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>:
 801e7f8:	2300      	movs	r3, #0
 801e7fa:	f100 0288 	add.w	r2, r0, #136	; 0x88
 801e7fe:	30a8      	adds	r0, #168	; 0xa8
 801e800:	f820 3c24 	strh.w	r3, [r0, #-36]
 801e804:	f802 3b01 	strb.w	r3, [r2], #1
 801e808:	4282      	cmp	r2, r0
 801e80a:	d1fb      	bne.n	801e804 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv+0xc>
 801e80c:	4770      	bx	lr

0801e80e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 801e80e:	4603      	mov	r3, r0
 801e810:	f100 0140 	add.w	r1, r0, #64	; 0x40
 801e814:	2200      	movs	r2, #0
 801e816:	801a      	strh	r2, [r3, #0]
 801e818:	3308      	adds	r3, #8
 801e81a:	f823 2c06 	strh.w	r2, [r3, #-6]
 801e81e:	f823 2c04 	strh.w	r2, [r3, #-4]
 801e822:	f823 2c02 	strh.w	r2, [r3, #-2]
 801e826:	428b      	cmp	r3, r1
 801e828:	d1f5      	bne.n	801e816 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 801e82a:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
 801e82e:	4770      	bx	lr

0801e830 <_ZN8touchgfx11ApplicationC1Ev>:
 801e830:	b570      	push	{r4, r5, r6, lr}
 801e832:	4b16      	ldr	r3, [pc, #88]	; (801e88c <_ZN8touchgfx11ApplicationC1Ev+0x5c>)
 801e834:	2500      	movs	r5, #0
 801e836:	4604      	mov	r4, r0
 801e838:	30a8      	adds	r0, #168	; 0xa8
 801e83a:	f840 3ca8 	str.w	r3, [r0, #-168]
 801e83e:	f820 5c24 	strh.w	r5, [r0, #-36]
 801e842:	f7ff ffe4 	bl	801e80e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801e846:	f104 00ea 	add.w	r0, r4, #234	; 0xea
 801e84a:	f7ff ffe0 	bl	801e80e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801e84e:	f884 512c 	strb.w	r5, [r4, #300]	; 0x12c
 801e852:	f884 512d 	strb.w	r5, [r4, #301]	; 0x12d
 801e856:	490e      	ldr	r1, [pc, #56]	; (801e890 <_ZN8touchgfx11ApplicationC1Ev+0x60>)
 801e858:	480e      	ldr	r0, [pc, #56]	; (801e894 <_ZN8touchgfx11ApplicationC1Ev+0x64>)
 801e85a:	f003 fcfd 	bl	8022258 <CRC_Lock>
 801e85e:	4e0e      	ldr	r6, [pc, #56]	; (801e898 <_ZN8touchgfx11ApplicationC1Ev+0x68>)
 801e860:	4b0e      	ldr	r3, [pc, #56]	; (801e89c <_ZN8touchgfx11ApplicationC1Ev+0x6c>)
 801e862:	b158      	cbz	r0, 801e87c <_ZN8touchgfx11ApplicationC1Ev+0x4c>
 801e864:	801d      	strh	r5, [r3, #0]
 801e866:	2300      	movs	r3, #0
 801e868:	4a0d      	ldr	r2, [pc, #52]	; (801e8a0 <_ZN8touchgfx11ApplicationC1Ev+0x70>)
 801e86a:	4620      	mov	r0, r4
 801e86c:	6013      	str	r3, [r2, #0]
 801e86e:	4a0d      	ldr	r2, [pc, #52]	; (801e8a4 <_ZN8touchgfx11ApplicationC1Ev+0x74>)
 801e870:	6033      	str	r3, [r6, #0]
 801e872:	6013      	str	r3, [r2, #0]
 801e874:	f7ff ffc0 	bl	801e7f8 <_ZN8touchgfx11Application20clearAllTimerWidgetsEv>
 801e878:	4620      	mov	r0, r4
 801e87a:	bd70      	pop	{r4, r5, r6, pc}
 801e87c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801e880:	2002      	movs	r0, #2
 801e882:	801a      	strh	r2, [r3, #0]
 801e884:	6030      	str	r0, [r6, #0]
 801e886:	f000 fe7d 	bl	801f584 <_ZN8touchgfx6Screen4drawEv>
 801e88a:	e7ec      	b.n	801e866 <_ZN8touchgfx11ApplicationC1Ev+0x36>
 801e88c:	08025c90 	.word	0x08025c90
 801e890:	b5e8b5cd 	.word	0xb5e8b5cd
 801e894:	f407a5c2 	.word	0xf407a5c2
 801e898:	20009d88 	.word	0x20009d88
 801e89c:	200000a0 	.word	0x200000a0
 801e8a0:	20009d90 	.word	0x20009d90
 801e8a4:	20009d8c 	.word	0x20009d8c

0801e8a8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801e8a8:	2300      	movs	r3, #0
 801e8aa:	8003      	strh	r3, [r0, #0]
 801e8ac:	8043      	strh	r3, [r0, #2]
 801e8ae:	8083      	strh	r3, [r0, #4]
 801e8b0:	80c3      	strh	r3, [r0, #6]
 801e8b2:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
 801e8b6:	429a      	cmp	r2, r3
 801e8b8:	b530      	push	{r4, r5, lr}
 801e8ba:	da12      	bge.n	801e8e2 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801e8bc:	eb01 04c2 	add.w	r4, r1, r2, lsl #3
 801e8c0:	3b01      	subs	r3, #1
 801e8c2:	6825      	ldr	r5, [r4, #0]
 801e8c4:	b29b      	uxth	r3, r3
 801e8c6:	6005      	str	r5, [r0, #0]
 801e8c8:	429a      	cmp	r2, r3
 801e8ca:	6865      	ldr	r5, [r4, #4]
 801e8cc:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
 801e8d0:	6045      	str	r5, [r0, #4]
 801e8d2:	da06      	bge.n	801e8e2 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x3a>
 801e8d4:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 801e8d8:	681d      	ldr	r5, [r3, #0]
 801e8da:	f841 5032 	str.w	r5, [r1, r2, lsl #3]
 801e8de:	685d      	ldr	r5, [r3, #4]
 801e8e0:	6065      	str	r5, [r4, #4]
 801e8e2:	bd30      	pop	{r4, r5, pc}

0801e8e4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>:
 801e8e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801e8e6:	e88d 0006 	stmia.w	sp, {r1, r2}
 801e8ea:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
 801e8ee:	4604      	mov	r4, r0
 801e8f0:	466b      	mov	r3, sp
 801e8f2:	2a07      	cmp	r2, #7
 801e8f4:	dd06      	ble.n	801e904 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x20>
 801e8f6:	4b09      	ldr	r3, [pc, #36]	; (801e91c <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x38>)
 801e8f8:	f240 11f9 	movw	r1, #505	; 0x1f9
 801e8fc:	4a08      	ldr	r2, [pc, #32]	; (801e920 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x3c>)
 801e8fe:	4809      	ldr	r0, [pc, #36]	; (801e924 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_+0x40>)
 801e900:	f003 fdac 	bl	802245c <__assert_func>
 801e904:	1c51      	adds	r1, r2, #1
 801e906:	eb00 05c2 	add.w	r5, r0, r2, lsl #3
 801e90a:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 801e90e:	cb03      	ldmia	r3!, {r0, r1}
 801e910:	f844 0032 	str.w	r0, [r4, r2, lsl #3]
 801e914:	6069      	str	r1, [r5, #4]
 801e916:	b003      	add	sp, #12
 801e918:	bd30      	pop	{r4, r5, pc}
 801e91a:	bf00      	nop
 801e91c:	08025c2e 	.word	0x08025c2e
 801e920:	08025d08 	.word	0x08025d08
 801e924:	08025c5d 	.word	0x08025c5d

0801e928 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 801e928:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e92c:	b089      	sub	sp, #36	; 0x24
 801e92e:	4606      	mov	r6, r0
 801e930:	4668      	mov	r0, sp
 801e932:	466c      	mov	r4, sp
 801e934:	e88d 0006 	stmia.w	sp, {r1, r2}
 801e938:	f7ef feea 	bl	800e710 <_ZNK8touchgfx4Rect7isEmptyEv>
 801e93c:	bbb0      	cbnz	r0, 801e9ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801e93e:	f8b6 50e8 	ldrh.w	r5, [r6, #232]	; 0xe8
 801e942:	b1fd      	cbz	r5, 801e984 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c>
 801e944:	3d01      	subs	r5, #1
 801e946:	af04      	add	r7, sp, #16
 801e948:	f04f 090a 	mov.w	r9, #10
 801e94c:	eb06 02c5 	add.w	r2, r6, r5, lsl #3
 801e950:	ab02      	add	r3, sp, #8
 801e952:	fa1f f885 	uxth.w	r8, r5
 801e956:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801e95a:	6851      	ldr	r1, [r2, #4]
 801e95c:	c303      	stmia	r3!, {r0, r1}
 801e95e:	4621      	mov	r1, r4
 801e960:	a802      	add	r0, sp, #8
 801e962:	f7ff ff21 	bl	801e7a8 <_ZNK8touchgfx4Rect8includesERKS0_>
 801e966:	bb08      	cbnz	r0, 801e9ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x84>
 801e968:	a902      	add	r1, sp, #8
 801e96a:	4620      	mov	r0, r4
 801e96c:	f7ff ff1c 	bl	801e7a8 <_ZNK8touchgfx4Rect8includesERKS0_>
 801e970:	b1f8      	cbz	r0, 801e9b2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x8a>
 801e972:	4642      	mov	r2, r8
 801e974:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801e978:	a806      	add	r0, sp, #24
 801e97a:	f7ff ff95 	bl	801e8a8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e97e:	f115 35ff 	adds.w	r5, r5, #4294967295
 801e982:	d2e3      	bcs.n	801e94c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24>
 801e984:	f8b6 30e8 	ldrh.w	r3, [r6, #232]	; 0xe8
 801e988:	f106 05a8 	add.w	r5, r6, #168	; 0xa8
 801e98c:	2b08      	cmp	r3, #8
 801e98e:	d108      	bne.n	801e9a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801e990:	4629      	mov	r1, r5
 801e992:	a806      	add	r0, sp, #24
 801e994:	2207      	movs	r2, #7
 801e996:	f7ff ff87 	bl	801e8a8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e99a:	a906      	add	r1, sp, #24
 801e99c:	4620      	mov	r0, r4
 801e99e:	f7ef fe2b 	bl	800e5f8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e9a2:	4628      	mov	r0, r5
 801e9a4:	e894 0006 	ldmia.w	r4, {r1, r2}
 801e9a8:	f7ff ff9c 	bl	801e8e4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801e9ac:	b009      	add	sp, #36	; 0x24
 801e9ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e9b2:	4621      	mov	r1, r4
 801e9b4:	a802      	add	r0, sp, #8
 801e9b6:	f7ef fd5c 	bl	800e472 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801e9ba:	b150      	cbz	r0, 801e9d2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xaa>
 801e9bc:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801e9c0:	a806      	add	r0, sp, #24
 801e9c2:	4642      	mov	r2, r8
 801e9c4:	f7ff ff70 	bl	801e8a8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801e9c8:	a902      	add	r1, sp, #8
 801e9ca:	4620      	mov	r0, r4
 801e9cc:	f7ef fe14 	bl	800e5f8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e9d0:	e7d5      	b.n	801e97e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801e9d2:	e894 0003 	ldmia.w	r4, {r0, r1}
 801e9d6:	e887 0003 	stmia.w	r7, {r0, r1}
 801e9da:	a902      	add	r1, sp, #8
 801e9dc:	4638      	mov	r0, r7
 801e9de:	f7ef fe0b 	bl	800e5f8 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801e9e2:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801e9e6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 801e9ea:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801e9ee:	fb13 f302 	smulbb	r3, r3, r2
 801e9f2:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 801e9f6:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801e9fa:	fb11 f102 	smulbb	r1, r1, r2
 801e9fe:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801ea02:	fb09 f303 	mul.w	r3, r9, r3
 801ea06:	fb12 1100 	smlabb	r1, r2, r0, r1
 801ea0a:	220b      	movs	r2, #11
 801ea0c:	434a      	muls	r2, r1
 801ea0e:	4293      	cmp	r3, r2
 801ea10:	dab5      	bge.n	801e97e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 801ea12:	f106 01a8 	add.w	r1, r6, #168	; 0xa8
 801ea16:	a806      	add	r0, sp, #24
 801ea18:	4642      	mov	r2, r8
 801ea1a:	f7ff ff45 	bl	801e8a8 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801ea1e:	e897 0003 	ldmia.w	r7, {r0, r1}
 801ea22:	e884 0003 	stmia.w	r4, {r0, r1}
 801ea26:	e7aa      	b.n	801e97e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>

0801ea28 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801ea28:	4b1b      	ldr	r3, [pc, #108]	; (801ea98 <_ZN8touchgfx11Application4drawERNS_4RectE+0x70>)
 801ea2a:	b530      	push	{r4, r5, lr}
 801ea2c:	460c      	mov	r4, r1
 801ea2e:	f9b3 1000 	ldrsh.w	r1, [r3]
 801ea32:	4b1a      	ldr	r3, [pc, #104]	; (801ea9c <_ZN8touchgfx11Application4drawERNS_4RectE+0x74>)
 801ea34:	b085      	sub	sp, #20
 801ea36:	4605      	mov	r5, r0
 801ea38:	6820      	ldr	r0, [r4, #0]
 801ea3a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801ea3e:	2300      	movs	r3, #0
 801ea40:	f8ad 1004 	strh.w	r1, [sp, #4]
 801ea44:	f8ad 3000 	strh.w	r3, [sp]
 801ea48:	6861      	ldr	r1, [r4, #4]
 801ea4a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801ea4e:	ab02      	add	r3, sp, #8
 801ea50:	f8ad 2006 	strh.w	r2, [sp, #6]
 801ea54:	c303      	stmia	r3!, {r0, r1}
 801ea56:	4669      	mov	r1, sp
 801ea58:	a802      	add	r0, sp, #8
 801ea5a:	f7ef fd51 	bl	800e500 <_ZN8touchgfx4RectaNERKS0_>
 801ea5e:	ab02      	add	r3, sp, #8
 801ea60:	cb03      	ldmia	r3!, {r0, r1}
 801ea62:	4b0f      	ldr	r3, [pc, #60]	; (801eaa0 <_ZN8touchgfx11Application4drawERNS_4RectE+0x78>)
 801ea64:	6020      	str	r0, [r4, #0]
 801ea66:	6818      	ldr	r0, [r3, #0]
 801ea68:	6061      	str	r1, [r4, #4]
 801ea6a:	b138      	cbz	r0, 801ea7c <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>
 801ea6c:	f895 312c 	ldrb.w	r3, [r5, #300]	; 0x12c
 801ea70:	b133      	cbz	r3, 801ea80 <_ZN8touchgfx11Application4drawERNS_4RectE+0x58>
 801ea72:	6821      	ldr	r1, [r4, #0]
 801ea74:	4628      	mov	r0, r5
 801ea76:	6862      	ldr	r2, [r4, #4]
 801ea78:	f7ff ff56 	bl	801e928 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801ea7c:	b005      	add	sp, #20
 801ea7e:	bd30      	pop	{r4, r5, pc}
 801ea80:	6803      	ldr	r3, [r0, #0]
 801ea82:	4621      	mov	r1, r4
 801ea84:	689b      	ldr	r3, [r3, #8]
 801ea86:	4798      	blx	r3
 801ea88:	4b06      	ldr	r3, [pc, #24]	; (801eaa4 <_ZN8touchgfx11Application4drawERNS_4RectE+0x7c>)
 801ea8a:	4621      	mov	r1, r4
 801ea8c:	6818      	ldr	r0, [r3, #0]
 801ea8e:	6803      	ldr	r3, [r0, #0]
 801ea90:	695b      	ldr	r3, [r3, #20]
 801ea92:	4798      	blx	r3
 801ea94:	e7f2      	b.n	801ea7c <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>
 801ea96:	bf00      	nop
 801ea98:	20009d28 	.word	0x20009d28
 801ea9c:	20009d2a 	.word	0x20009d2a
 801eaa0:	20009d88 	.word	0x20009d88
 801eaa4:	20009d34 	.word	0x20009d34

0801eaa8 <_ZN8touchgfx11Application19cacheDrawOperationsEb>:
 801eaa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eaac:	4604      	mov	r4, r0
 801eaae:	b096      	sub	sp, #88	; 0x58
 801eab0:	f880 112c 	strb.w	r1, [r0, #300]	; 0x12c
 801eab4:	b129      	cbz	r1, 801eac2 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a>
 801eab6:	2300      	movs	r3, #0
 801eab8:	f8a0 30e8 	strh.w	r3, [r0, #232]	; 0xe8
 801eabc:	b016      	add	sp, #88	; 0x58
 801eabe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801eac2:	f8b0 30e8 	ldrh.w	r3, [r0, #232]	; 0xe8
 801eac6:	2b00      	cmp	r3, #0
 801eac8:	d0f8      	beq.n	801eabc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801eaca:	4f6e      	ldr	r7, [pc, #440]	; (801ec84 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1dc>)
 801eacc:	a805      	add	r0, sp, #20
 801eace:	f7ff fe9e 	bl	801e80e <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 801ead2:	883d      	ldrh	r5, [r7, #0]
 801ead4:	462e      	mov	r6, r5
 801ead6:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801eada:	429e      	cmp	r6, r3
 801eadc:	db10      	blt.n	801eb00 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x58>
 801eade:	462e      	mov	r6, r5
 801eae0:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
 801eae4:	429e      	cmp	r6, r3
 801eae6:	da17      	bge.n	801eb18 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x70>
 801eae8:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801eaec:	3601      	adds	r6, #1
 801eaee:	4620      	mov	r0, r4
 801eaf0:	f8d3 10ea 	ldr.w	r1, [r3, #234]	; 0xea
 801eaf4:	b2b6      	uxth	r6, r6
 801eaf6:	f8d3 20ee 	ldr.w	r2, [r3, #238]	; 0xee
 801eafa:	f7ff ff15 	bl	801e928 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>
 801eafe:	e7ef      	b.n	801eae0 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x38>
 801eb00:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801eb04:	3601      	adds	r6, #1
 801eb06:	a805      	add	r0, sp, #20
 801eb08:	f8d3 10a8 	ldr.w	r1, [r3, #168]	; 0xa8
 801eb0c:	b2b6      	uxth	r6, r6
 801eb0e:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 801eb12:	f7ff fee7 	bl	801e8e4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801eb16:	e7de      	b.n	801ead6 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x2e>
 801eb18:	4e5b      	ldr	r6, [pc, #364]	; (801ec88 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e0>)
 801eb1a:	6833      	ldr	r3, [r6, #0]
 801eb1c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801eb20:	2b01      	cmp	r3, #1
 801eb22:	f040 8094 	bne.w	801ec4e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a6>
 801eb26:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
 801eb2a:	f8b4 00e8 	ldrh.w	r0, [r4, #232]	; 0xe8
 801eb2e:	f04f 0900 	mov.w	r9, #0
 801eb32:	33aa      	adds	r3, #170	; 0xaa
 801eb34:	42a8      	cmp	r0, r5
 801eb36:	f103 0308 	add.w	r3, r3, #8
 801eb3a:	dd0a      	ble.n	801eb52 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xaa>
 801eb3c:	f833 2c08 	ldrh.w	r2, [r3, #-8]
 801eb40:	3501      	adds	r5, #1
 801eb42:	f833 1c04 	ldrh.w	r1, [r3, #-4]
 801eb46:	440a      	add	r2, r1
 801eb48:	b212      	sxth	r2, r2
 801eb4a:	4591      	cmp	r9, r2
 801eb4c:	bfb8      	it	lt
 801eb4e:	4691      	movlt	r9, r2
 801eb50:	e7f0      	b.n	801eb34 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x8c>
 801eb52:	4b4e      	ldr	r3, [pc, #312]	; (801ec8c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e4>)
 801eb54:	f8df 813c 	ldr.w	r8, [pc, #316]	; 801ec94 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ec>
 801eb58:	881d      	ldrh	r5, [r3, #0]
 801eb5a:	2300      	movs	r3, #0
 801eb5c:	08ed      	lsrs	r5, r5, #3
 801eb5e:	f8ad 3004 	strh.w	r3, [sp, #4]
 801eb62:	f8ad 3006 	strh.w	r3, [sp, #6]
 801eb66:	2d01      	cmp	r5, #1
 801eb68:	f8ad 3008 	strh.w	r3, [sp, #8]
 801eb6c:	f8ad 300a 	strh.w	r3, [sp, #10]
 801eb70:	bfb8      	it	lt
 801eb72:	2501      	movlt	r5, #1
 801eb74:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801eb78:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801eb7c:	6830      	ldr	r0, [r6, #0]
 801eb7e:	4413      	add	r3, r2
 801eb80:	b21b      	sxth	r3, r3
 801eb82:	4599      	cmp	r9, r3
 801eb84:	6803      	ldr	r3, [r0, #0]
 801eb86:	dd45      	ble.n	801ec14 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x16c>
 801eb88:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801eb8c:	4798      	blx	r3
 801eb8e:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801eb92:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 801eb96:	4413      	add	r3, r2
 801eb98:	b21b      	sxth	r3, r3
 801eb9a:	18ea      	adds	r2, r5, r3
 801eb9c:	4290      	cmp	r0, r2
 801eb9e:	da6d      	bge.n	801ec7c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d4>
 801eba0:	4581      	cmp	r9, r0
 801eba2:	dd6b      	ble.n	801ec7c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d4>
 801eba4:	4298      	cmp	r0, r3
 801eba6:	da01      	bge.n	801ebac <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x104>
 801eba8:	2b00      	cmp	r3, #0
 801ebaa:	dc69      	bgt.n	801ec80 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1d8>
 801ebac:	6830      	ldr	r0, [r6, #0]
 801ebae:	2101      	movs	r1, #1
 801ebb0:	6803      	ldr	r3, [r0, #0]
 801ebb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ebb4:	4798      	blx	r3
 801ebb6:	e7dd      	b.n	801eb74 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xcc>
 801ebb8:	4548      	cmp	r0, r9
 801ebba:	bfa8      	it	ge
 801ebbc:	4648      	movge	r0, r9
 801ebbe:	f9b8 2000 	ldrsh.w	r2, [r8]
 801ebc2:	2100      	movs	r1, #0
 801ebc4:	1ac0      	subs	r0, r0, r3
 801ebc6:	f8b7 a000 	ldrh.w	sl, [r7]
 801ebca:	f8ad 1004 	strh.w	r1, [sp, #4]
 801ebce:	f8ad 3006 	strh.w	r3, [sp, #6]
 801ebd2:	f8ad 2008 	strh.w	r2, [sp, #8]
 801ebd6:	f8ad 000a 	strh.w	r0, [sp, #10]
 801ebda:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ebde:	459a      	cmp	sl, r3
 801ebe0:	dac8      	bge.n	801eb74 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0xcc>
 801ebe2:	eb04 02ca 	add.w	r2, r4, sl, lsl #3
 801ebe6:	ab03      	add	r3, sp, #12
 801ebe8:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801ebec:	6851      	ldr	r1, [r2, #4]
 801ebee:	c303      	stmia	r3!, {r0, r1}
 801ebf0:	a803      	add	r0, sp, #12
 801ebf2:	a901      	add	r1, sp, #4
 801ebf4:	f7ef fc84 	bl	800e500 <_ZN8touchgfx4RectaNERKS0_>
 801ebf8:	a803      	add	r0, sp, #12
 801ebfa:	f7ef fd89 	bl	800e710 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ebfe:	b920      	cbnz	r0, 801ec0a <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x162>
 801ec00:	6823      	ldr	r3, [r4, #0]
 801ec02:	a903      	add	r1, sp, #12
 801ec04:	4620      	mov	r0, r4
 801ec06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ec08:	4798      	blx	r3
 801ec0a:	f10a 0a01 	add.w	sl, sl, #1
 801ec0e:	fa1f fa8a 	uxth.w	sl, sl
 801ec12:	e7e2      	b.n	801ebda <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x132>
 801ec14:	69db      	ldr	r3, [r3, #28]
 801ec16:	4798      	blx	r3
 801ec18:	4b1d      	ldr	r3, [pc, #116]	; (801ec90 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1e8>)
 801ec1a:	781b      	ldrb	r3, [r3, #0]
 801ec1c:	2b00      	cmp	r3, #0
 801ec1e:	f43f af4d 	beq.w	801eabc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801ec22:	2300      	movs	r3, #0
 801ec24:	883d      	ldrh	r5, [r7, #0]
 801ec26:	34ea      	adds	r4, #234	; 0xea
 801ec28:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
 801ec2c:	f8bd 3054 	ldrh.w	r3, [sp, #84]	; 0x54
 801ec30:	429d      	cmp	r5, r3
 801ec32:	f6bf af43 	bge.w	801eabc <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x14>
 801ec36:	ab16      	add	r3, sp, #88	; 0x58
 801ec38:	4620      	mov	r0, r4
 801ec3a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801ec3e:	3501      	adds	r5, #1
 801ec40:	3b44      	subs	r3, #68	; 0x44
 801ec42:	b2ad      	uxth	r5, r5
 801ec44:	e893 0006 	ldmia.w	r3, {r1, r2}
 801ec48:	f7ff fe4c 	bl	801e8e4 <_ZN8touchgfx6VectorINS_4RectELt8EE3addES1_>
 801ec4c:	e7ee      	b.n	801ec2c <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x184>
 801ec4e:	f8b4 30e8 	ldrh.w	r3, [r4, #232]	; 0xe8
 801ec52:	429d      	cmp	r5, r3
 801ec54:	dae0      	bge.n	801ec18 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x170>
 801ec56:	eb04 02c5 	add.w	r2, r4, r5, lsl #3
 801ec5a:	ab03      	add	r3, sp, #12
 801ec5c:	f852 0fa8 	ldr.w	r0, [r2, #168]!
 801ec60:	6851      	ldr	r1, [r2, #4]
 801ec62:	c303      	stmia	r3!, {r0, r1}
 801ec64:	a803      	add	r0, sp, #12
 801ec66:	f7ef fd53 	bl	800e710 <_ZNK8touchgfx4Rect7isEmptyEv>
 801ec6a:	b920      	cbnz	r0, 801ec76 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1ce>
 801ec6c:	6823      	ldr	r3, [r4, #0]
 801ec6e:	a903      	add	r1, sp, #12
 801ec70:	4620      	mov	r0, r4
 801ec72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801ec74:	4798      	blx	r3
 801ec76:	3501      	adds	r5, #1
 801ec78:	b2ad      	uxth	r5, r5
 801ec7a:	e7e8      	b.n	801ec4e <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x1a6>
 801ec7c:	4298      	cmp	r0, r3
 801ec7e:	da9b      	bge.n	801ebb8 <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x110>
 801ec80:	4648      	mov	r0, r9
 801ec82:	e79c      	b.n	801ebbe <_ZN8touchgfx11Application19cacheDrawOperationsEb+0x116>
 801ec84:	200000a0 	.word	0x200000a0
 801ec88:	20009d34 	.word	0x20009d34
 801ec8c:	20009d2a 	.word	0x20009d2a
 801ec90:	20009d32 	.word	0x20009d32
 801ec94:	20009d28 	.word	0x20009d28

0801ec98 <_ZNK8touchgfx4Font8getGlyphEt>:
 801ec98:	b513      	push	{r0, r1, r4, lr}
 801ec9a:	2200      	movs	r2, #0
 801ec9c:	ab02      	add	r3, sp, #8
 801ec9e:	9201      	str	r2, [sp, #4]
 801eca0:	f803 2d05 	strb.w	r2, [r3, #-5]!
 801eca4:	6802      	ldr	r2, [r0, #0]
 801eca6:	6894      	ldr	r4, [r2, #8]
 801eca8:	aa01      	add	r2, sp, #4
 801ecaa:	47a0      	blx	r4
 801ecac:	b002      	add	sp, #8
 801ecae:	bd10      	pop	{r4, pc}

0801ecb0 <_ZNK8touchgfx4Font15getFallbackCharEv>:
 801ecb0:	8940      	ldrh	r0, [r0, #10]
 801ecb2:	4770      	bx	lr

0801ecb4 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
 801ecb4:	8980      	ldrh	r0, [r0, #12]
 801ecb6:	4770      	bx	lr

0801ecb8 <_ZNK8touchgfx4Font13getFontHeightEv>:
 801ecb8:	8880      	ldrh	r0, [r0, #4]
 801ecba:	4770      	bx	lr

0801ecbc <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801ecbc:	7983      	ldrb	r3, [r0, #6]
 801ecbe:	8880      	ldrh	r0, [r0, #4]
 801ecc0:	4418      	add	r0, r3
 801ecc2:	b280      	uxth	r0, r0
 801ecc4:	4770      	bx	lr

0801ecc6 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
 801ecc6:	79c0      	ldrb	r0, [r0, #7]
 801ecc8:	4770      	bx	lr

0801ecca <_ZNK8touchgfx4Font10getKerningEtPKNS_9GlyphNodeE>:
 801ecca:	2000      	movs	r0, #0
 801eccc:	4770      	bx	lr

0801ecce <_ZNK8touchgfx4Font12getCharWidthEt>:
 801ecce:	b508      	push	{r3, lr}
 801ecd0:	6803      	ldr	r3, [r0, #0]
 801ecd2:	68db      	ldr	r3, [r3, #12]
 801ecd4:	4798      	blx	r3
 801ecd6:	b140      	cbz	r0, 801ecea <_ZNK8touchgfx4Font12getCharWidthEt+0x1c>
 801ecd8:	f990 200d 	ldrsb.w	r2, [r0, #13]
 801ecdc:	7a83      	ldrb	r3, [r0, #10]
 801ecde:	2a00      	cmp	r2, #0
 801ece0:	bfb4      	ite	lt
 801ece2:	f44f 7080 	movlt.w	r0, #256	; 0x100
 801ece6:	2000      	movge	r0, #0
 801ece8:	4318      	orrs	r0, r3
 801ecea:	bd08      	pop	{r3, pc}

0801ecec <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
 801ecec:	b40e      	push	{r1, r2, r3}
 801ecee:	b533      	push	{r0, r1, r4, r5, lr}
 801ecf0:	ab05      	add	r3, sp, #20
 801ecf2:	f853 2b04 	ldr.w	r2, [r3], #4
 801ecf6:	9301      	str	r3, [sp, #4]
 801ecf8:	4b0a      	ldr	r3, [pc, #40]	; (801ed24 <_ZNK8touchgfx4Font14getStringWidthEPKtz+0x38>)
 801ecfa:	685c      	ldr	r4, [r3, #4]
 801ecfc:	f014 0f01 	tst.w	r4, #1
 801ed00:	ea4f 0464 	mov.w	r4, r4, asr #1
 801ed04:	bf1c      	itt	ne
 801ed06:	681b      	ldrne	r3, [r3, #0]
 801ed08:	5901      	ldrne	r1, [r0, r4]
 801ed0a:	4420      	add	r0, r4
 801ed0c:	bf0c      	ite	eq
 801ed0e:	681d      	ldreq	r5, [r3, #0]
 801ed10:	58cd      	ldrne	r5, [r1, r3]
 801ed12:	2100      	movs	r1, #0
 801ed14:	9b01      	ldr	r3, [sp, #4]
 801ed16:	47a8      	blx	r5
 801ed18:	b002      	add	sp, #8
 801ed1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ed1e:	b003      	add	sp, #12
 801ed20:	4770      	bx	lr
 801ed22:	bf00      	nop
 801ed24:	20000074 	.word	0x20000074

0801ed28 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:
 801ed28:	b40c      	push	{r2, r3}
 801ed2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ed2c:	ab06      	add	r3, sp, #24
 801ed2e:	f853 2b04 	ldr.w	r2, [r3], #4
 801ed32:	9301      	str	r3, [sp, #4]
 801ed34:	4b09      	ldr	r3, [pc, #36]	; (801ed5c <_ZNK8touchgfx4Font14getStringWidthEhPKtz+0x34>)
 801ed36:	685c      	ldr	r4, [r3, #4]
 801ed38:	f014 0f01 	tst.w	r4, #1
 801ed3c:	ea4f 0464 	mov.w	r4, r4, asr #1
 801ed40:	bf1c      	itt	ne
 801ed42:	681b      	ldrne	r3, [r3, #0]
 801ed44:	5905      	ldrne	r5, [r0, r4]
 801ed46:	4420      	add	r0, r4
 801ed48:	bf0c      	ite	eq
 801ed4a:	681d      	ldreq	r5, [r3, #0]
 801ed4c:	58ed      	ldrne	r5, [r5, r3]
 801ed4e:	9b01      	ldr	r3, [sp, #4]
 801ed50:	47a8      	blx	r5
 801ed52:	b003      	add	sp, #12
 801ed54:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ed58:	b002      	add	sp, #8
 801ed5a:	4770      	bx	lr
 801ed5c:	20000074 	.word	0x20000074

0801ed60 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801ed60:	b40e      	push	{r1, r2, r3}
 801ed62:	b510      	push	{r4, lr}
 801ed64:	b089      	sub	sp, #36	; 0x24
 801ed66:	ab0b      	add	r3, sp, #44	; 0x2c
 801ed68:	a802      	add	r0, sp, #8
 801ed6a:	f853 4b04 	ldr.w	r4, [r3], #4
 801ed6e:	9301      	str	r3, [sp, #4]
 801ed70:	f000 fe56 	bl	801fa20 <_ZN8touchgfx12TextProviderC1Ev>
 801ed74:	4621      	mov	r1, r4
 801ed76:	9a01      	ldr	r2, [sp, #4]
 801ed78:	a802      	add	r0, sp, #8
 801ed7a:	2401      	movs	r4, #1
 801ed7c:	f000 fe59 	bl	801fa32 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801ed80:	a802      	add	r0, sp, #8
 801ed82:	f000 fdfd 	bl	801f980 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ed86:	b138      	cbz	r0, 801ed98 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x38>
 801ed88:	280a      	cmp	r0, #10
 801ed8a:	a802      	add	r0, sp, #8
 801ed8c:	bf04      	itt	eq
 801ed8e:	3401      	addeq	r4, #1
 801ed90:	b224      	sxtheq	r4, r4
 801ed92:	f000 fdf5 	bl	801f980 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801ed96:	e7f6      	b.n	801ed86 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x26>
 801ed98:	b2a0      	uxth	r0, r4
 801ed9a:	b009      	add	sp, #36	; 0x24
 801ed9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801eda0:	b003      	add	sp, #12
 801eda2:	4770      	bx	lr

0801eda4 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 801eda4:	b40e      	push	{r1, r2, r3}
 801eda6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801eda8:	b088      	sub	sp, #32
 801edaa:	4604      	mov	r4, r0
 801edac:	2600      	movs	r6, #0
 801edae:	ab0d      	add	r3, sp, #52	; 0x34
 801edb0:	a802      	add	r0, sp, #8
 801edb2:	f853 5b04 	ldr.w	r5, [r3], #4
 801edb6:	9301      	str	r3, [sp, #4]
 801edb8:	f000 fe32 	bl	801fa20 <_ZN8touchgfx12TextProviderC1Ev>
 801edbc:	4629      	mov	r1, r5
 801edbe:	9a01      	ldr	r2, [sp, #4]
 801edc0:	a802      	add	r0, sp, #8
 801edc2:	4d1f      	ldr	r5, [pc, #124]	; (801ee40 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x9c>)
 801edc4:	f000 fe35 	bl	801fa32 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801edc8:	2100      	movs	r1, #0
 801edca:	a802      	add	r0, sp, #8
 801edcc:	f000 fde2 	bl	801f994 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801edd0:	b378      	cbz	r0, 801ee32 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 801edd2:	280a      	cmp	r0, #10
 801edd4:	d028      	beq.n	801ee28 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 801edd6:	6823      	ldr	r3, [r4, #0]
 801edd8:	4601      	mov	r1, r0
 801edda:	4620      	mov	r0, r4
 801eddc:	68db      	ldr	r3, [r3, #12]
 801edde:	4798      	blx	r3
 801ede0:	b310      	cbz	r0, 801ee28 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x84>
 801ede2:	7b41      	ldrb	r1, [r0, #13]
 801ede4:	f890 e008 	ldrb.w	lr, [r0, #8]
 801ede8:	f011 0f40 	tst.w	r1, #64	; 0x40
 801edec:	88a3      	ldrh	r3, [r4, #4]
 801edee:	79c0      	ldrb	r0, [r0, #7]
 801edf0:	bf14      	ite	ne
 801edf2:	462f      	movne	r7, r5
 801edf4:	2700      	moveq	r7, #0
 801edf6:	f011 0f20 	tst.w	r1, #32
 801edfa:	ea47 070e 	orr.w	r7, r7, lr
 801edfe:	bf14      	ite	ne
 801ee00:	f44f 7280 	movne.w	r2, #256	; 0x100
 801ee04:	2200      	moveq	r2, #0
 801ee06:	f011 0f10 	tst.w	r1, #16
 801ee0a:	ea42 0207 	orr.w	r2, r2, r7
 801ee0e:	eba3 0302 	sub.w	r3, r3, r2
 801ee12:	bf14      	ite	ne
 801ee14:	f44f 7280 	movne.w	r2, #256	; 0x100
 801ee18:	2200      	moveq	r2, #0
 801ee1a:	4302      	orrs	r2, r0
 801ee1c:	fa12 f383 	uxtah	r3, r2, r3
 801ee20:	b29b      	uxth	r3, r3
 801ee22:	42b3      	cmp	r3, r6
 801ee24:	bfc8      	it	gt
 801ee26:	b21e      	sxthgt	r6, r3
 801ee28:	2100      	movs	r1, #0
 801ee2a:	a802      	add	r0, sp, #8
 801ee2c:	f000 fdb2 	bl	801f994 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ee30:	e7ce      	b.n	801edd0 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x2c>
 801ee32:	b2b0      	uxth	r0, r6
 801ee34:	b008      	add	sp, #32
 801ee36:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801ee3a:	b003      	add	sp, #12
 801ee3c:	4770      	bx	lr
 801ee3e:	bf00      	nop
 801ee40:	fffffe00 	.word	0xfffffe00

0801ee44 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801ee44:	b40e      	push	{r1, r2, r3}
 801ee46:	b530      	push	{r4, r5, lr}
 801ee48:	b088      	sub	sp, #32
 801ee4a:	4605      	mov	r5, r0
 801ee4c:	ab0b      	add	r3, sp, #44	; 0x2c
 801ee4e:	a802      	add	r0, sp, #8
 801ee50:	f853 4b04 	ldr.w	r4, [r3], #4
 801ee54:	9301      	str	r3, [sp, #4]
 801ee56:	f000 fde3 	bl	801fa20 <_ZN8touchgfx12TextProviderC1Ev>
 801ee5a:	4621      	mov	r1, r4
 801ee5c:	9a01      	ldr	r2, [sp, #4]
 801ee5e:	a802      	add	r0, sp, #8
 801ee60:	24ff      	movs	r4, #255	; 0xff
 801ee62:	f000 fde6 	bl	801fa32 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801ee66:	2100      	movs	r1, #0
 801ee68:	a802      	add	r0, sp, #8
 801ee6a:	f000 fd93 	bl	801f994 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ee6e:	b1a0      	cbz	r0, 801ee9a <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x56>
 801ee70:	280a      	cmp	r0, #10
 801ee72:	d00d      	beq.n	801ee90 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801ee74:	682b      	ldr	r3, [r5, #0]
 801ee76:	4601      	mov	r1, r0
 801ee78:	4628      	mov	r0, r5
 801ee7a:	68db      	ldr	r3, [r3, #12]
 801ee7c:	4798      	blx	r3
 801ee7e:	b138      	cbz	r0, 801ee90 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 801ee80:	792b      	ldrb	r3, [r5, #4]
 801ee82:	7a02      	ldrb	r2, [r0, #8]
 801ee84:	1a9b      	subs	r3, r3, r2
 801ee86:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 801ee8a:	429c      	cmp	r4, r3
 801ee8c:	bfa8      	it	ge
 801ee8e:	461c      	movge	r4, r3
 801ee90:	2100      	movs	r1, #0
 801ee92:	a802      	add	r0, sp, #8
 801ee94:	f000 fd7e 	bl	801f994 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801ee98:	e7e9      	b.n	801ee6e <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x2a>
 801ee9a:	4620      	mov	r0, r4
 801ee9c:	b008      	add	sp, #32
 801ee9e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801eea2:	b003      	add	sp, #12
 801eea4:	4770      	bx	lr

0801eea6 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801eea6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eeaa:	f04f 0a00 	mov.w	sl, #0
 801eeae:	b087      	sub	sp, #28
 801eeb0:	4614      	mov	r4, r2
 801eeb2:	461d      	mov	r5, r3
 801eeb4:	4606      	mov	r6, r0
 801eeb6:	4657      	mov	r7, sl
 801eeb8:	4668      	mov	r0, sp
 801eeba:	46d1      	mov	r9, sl
 801eebc:	4688      	mov	r8, r1
 801eebe:	f000 fdaf 	bl	801fa20 <_ZN8touchgfx12TextProviderC1Ev>
 801eec2:	462a      	mov	r2, r5
 801eec4:	4621      	mov	r1, r4
 801eec6:	4668      	mov	r0, sp
 801eec8:	f000 fdb3 	bl	801fa32 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>
 801eecc:	4641      	mov	r1, r8
 801eece:	4668      	mov	r0, sp
 801eed0:	f000 fd60 	bl	801f994 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801eed4:	4605      	mov	r5, r0
 801eed6:	b108      	cbz	r0, 801eedc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x36>
 801eed8:	280a      	cmp	r0, #10
 801eeda:	d107      	bne.n	801eeec <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x46>
 801eedc:	45b9      	cmp	r9, r7
 801eede:	dd00      	ble.n	801eee2 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x3c>
 801eee0:	464f      	mov	r7, r9
 801eee2:	f04f 0900 	mov.w	r9, #0
 801eee6:	e01e      	b.n	801ef26 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x80>
 801eee8:	46aa      	mov	sl, r5
 801eeea:	e7ef      	b.n	801eecc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x26>
 801eeec:	6833      	ldr	r3, [r6, #0]
 801eeee:	4601      	mov	r1, r0
 801eef0:	4630      	mov	r0, r6
 801eef2:	68db      	ldr	r3, [r3, #12]
 801eef4:	4798      	blx	r3
 801eef6:	4602      	mov	r2, r0
 801eef8:	2800      	cmp	r0, #0
 801eefa:	d0f5      	beq.n	801eee8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x42>
 801eefc:	f990 300d 	ldrsb.w	r3, [r0, #13]
 801ef00:	4651      	mov	r1, sl
 801ef02:	f890 b00a 	ldrb.w	fp, [r0, #10]
 801ef06:	2b00      	cmp	r3, #0
 801ef08:	6833      	ldr	r3, [r6, #0]
 801ef0a:	8885      	ldrh	r5, [r0, #4]
 801ef0c:	4630      	mov	r0, r6
 801ef0e:	bfb4      	ite	lt
 801ef10:	f44f 7480 	movlt.w	r4, #256	; 0x100
 801ef14:	2400      	movge	r4, #0
 801ef16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ef18:	ea44 040b 	orr.w	r4, r4, fp
 801ef1c:	4798      	blx	r3
 801ef1e:	4404      	add	r4, r0
 801ef20:	444c      	add	r4, r9
 801ef22:	fa1f f984 	uxth.w	r9, r4
 801ef26:	2d00      	cmp	r5, #0
 801ef28:	d1de      	bne.n	801eee8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x42>
 801ef2a:	4638      	mov	r0, r7
 801ef2c:	b007      	add	sp, #28
 801ef2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ef32 <_ZNK8touchgfx8Drawable7getTypeEv>:
 801ef32:	2000      	movs	r0, #0
 801ef34:	4770      	bx	lr

0801ef36 <_ZNK8touchgfx8Drawable10invalidateEv>:
 801ef36:	b513      	push	{r0, r1, r4, lr}
 801ef38:	1d01      	adds	r1, r0, #4
 801ef3a:	4603      	mov	r3, r0
 801ef3c:	c903      	ldmia	r1, {r0, r1}
 801ef3e:	e88d 0003 	stmia.w	sp, {r0, r1}
 801ef42:	2100      	movs	r1, #0
 801ef44:	4618      	mov	r0, r3
 801ef46:	f8ad 1000 	strh.w	r1, [sp]
 801ef4a:	f8ad 1002 	strh.w	r1, [sp, #2]
 801ef4e:	6819      	ldr	r1, [r3, #0]
 801ef50:	690c      	ldr	r4, [r1, #16]
 801ef52:	4669      	mov	r1, sp
 801ef54:	47a0      	blx	r4
 801ef56:	b002      	add	sp, #8
 801ef58:	bd10      	pop	{r4, pc}

0801ef5a <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 801ef5a:	b538      	push	{r3, r4, r5, lr}
 801ef5c:	680b      	ldr	r3, [r1, #0]
 801ef5e:	460c      	mov	r4, r1
 801ef60:	4605      	mov	r5, r0
 801ef62:	68db      	ldr	r3, [r3, #12]
 801ef64:	4798      	blx	r3
 801ef66:	6823      	ldr	r3, [r4, #0]
 801ef68:	4620      	mov	r0, r4
 801ef6a:	4629      	mov	r1, r5
 801ef6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ef6e:	4798      	blx	r3
 801ef70:	4628      	mov	r0, r5
 801ef72:	bd38      	pop	{r3, r4, r5, pc}

0801ef74 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801ef74:	b410      	push	{r4}
 801ef76:	880a      	ldrh	r2, [r1, #0]
 801ef78:	8884      	ldrh	r4, [r0, #4]
 801ef7a:	4422      	add	r2, r4
 801ef7c:	800a      	strh	r2, [r1, #0]
 801ef7e:	884a      	ldrh	r2, [r1, #2]
 801ef80:	88c4      	ldrh	r4, [r0, #6]
 801ef82:	4422      	add	r2, r4
 801ef84:	804a      	strh	r2, [r1, #2]
 801ef86:	6940      	ldr	r0, [r0, #20]
 801ef88:	b120      	cbz	r0, 801ef94 <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 801ef8a:	6803      	ldr	r3, [r0, #0]
 801ef8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ef90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ef92:	4718      	bx	r3
 801ef94:	f85d 4b04 	ldr.w	r4, [sp], #4
 801ef98:	4770      	bx	lr

0801ef9a <_ZN8touchgfx8Drawable12moveRelativeEss>:
 801ef9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ef9c:	460b      	mov	r3, r1
 801ef9e:	b085      	sub	sp, #20
 801efa0:	4604      	mov	r4, r0
 801efa2:	b901      	cbnz	r1, 801efa6 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801efa4:	b1f2      	cbz	r2, 801efe4 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4a>
 801efa6:	1d27      	adds	r7, r4, #4
 801efa8:	ad02      	add	r5, sp, #8
 801efaa:	e897 0003 	ldmia.w	r7, {r0, r1}
 801efae:	e88d 0003 	stmia.w	sp, {r0, r1}
 801efb2:	88e1      	ldrh	r1, [r4, #6]
 801efb4:	4620      	mov	r0, r4
 801efb6:	440a      	add	r2, r1
 801efb8:	88a1      	ldrh	r1, [r4, #4]
 801efba:	4419      	add	r1, r3
 801efbc:	6823      	ldr	r3, [r4, #0]
 801efbe:	b212      	sxth	r2, r2
 801efc0:	b209      	sxth	r1, r1
 801efc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801efc4:	4798      	blx	r3
 801efc6:	e897 0003 	ldmia.w	r7, {r0, r1}
 801efca:	e885 0003 	stmia.w	r5, {r0, r1}
 801efce:	6960      	ldr	r0, [r4, #20]
 801efd0:	b150      	cbz	r0, 801efe8 <_ZN8touchgfx8Drawable12moveRelativeEss+0x4e>
 801efd2:	6803      	ldr	r3, [r0, #0]
 801efd4:	4669      	mov	r1, sp
 801efd6:	691b      	ldr	r3, [r3, #16]
 801efd8:	4798      	blx	r3
 801efda:	6960      	ldr	r0, [r4, #20]
 801efdc:	6803      	ldr	r3, [r0, #0]
 801efde:	691b      	ldr	r3, [r3, #16]
 801efe0:	4629      	mov	r1, r5
 801efe2:	4798      	blx	r3
 801efe4:	b005      	add	sp, #20
 801efe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801efe8:	f7ff fc00 	bl	801e7ec <_ZN8touchgfx11Application11getInstanceEv>
 801efec:	6803      	ldr	r3, [r0, #0]
 801efee:	4669      	mov	r1, sp
 801eff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801eff2:	4798      	blx	r3
 801eff4:	f7ff fbfa 	bl	801e7ec <_ZN8touchgfx11Application11getInstanceEv>
 801eff8:	6803      	ldr	r3, [r0, #0]
 801effa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801effc:	e7f0      	b.n	801efe0 <_ZN8touchgfx8Drawable12moveRelativeEss+0x46>

0801effe <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 801effe:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f000:	8882      	ldrh	r2, [r0, #4]
 801f002:	4605      	mov	r5, r0
 801f004:	880b      	ldrh	r3, [r1, #0]
 801f006:	460c      	mov	r4, r1
 801f008:	4413      	add	r3, r2
 801f00a:	800b      	strh	r3, [r1, #0]
 801f00c:	884b      	ldrh	r3, [r1, #2]
 801f00e:	88c2      	ldrh	r2, [r0, #6]
 801f010:	4413      	add	r3, r2
 801f012:	4602      	mov	r2, r0
 801f014:	804b      	strh	r3, [r1, #2]
 801f016:	466b      	mov	r3, sp
 801f018:	f852 0f04 	ldr.w	r0, [r2, #4]!
 801f01c:	6851      	ldr	r1, [r2, #4]
 801f01e:	c303      	stmia	r3!, {r0, r1}
 801f020:	4621      	mov	r1, r4
 801f022:	4668      	mov	r0, sp
 801f024:	f7ef fa6c 	bl	800e500 <_ZN8touchgfx4RectaNERKS0_>
 801f028:	466b      	mov	r3, sp
 801f02a:	cb03      	ldmia	r3!, {r0, r1}
 801f02c:	6020      	str	r0, [r4, #0]
 801f02e:	6061      	str	r1, [r4, #4]
 801f030:	6968      	ldr	r0, [r5, #20]
 801f032:	b128      	cbz	r0, 801f040 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x42>
 801f034:	6803      	ldr	r3, [r0, #0]
 801f036:	691b      	ldr	r3, [r3, #16]
 801f038:	4621      	mov	r1, r4
 801f03a:	4798      	blx	r3
 801f03c:	b003      	add	sp, #12
 801f03e:	bd30      	pop	{r4, r5, pc}
 801f040:	f7ff fbd4 	bl	801e7ec <_ZN8touchgfx11Application11getInstanceEv>
 801f044:	6803      	ldr	r3, [r0, #0]
 801f046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801f048:	e7f6      	b.n	801f038 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3a>

0801f04a <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 801f04a:	b570      	push	{r4, r5, r6, lr}
 801f04c:	8882      	ldrh	r2, [r0, #4]
 801f04e:	460c      	mov	r4, r1
 801f050:	880b      	ldrh	r3, [r1, #0]
 801f052:	4605      	mov	r5, r0
 801f054:	4413      	add	r3, r2
 801f056:	800b      	strh	r3, [r1, #0]
 801f058:	884b      	ldrh	r3, [r1, #2]
 801f05a:	88c2      	ldrh	r2, [r0, #6]
 801f05c:	4413      	add	r3, r2
 801f05e:	804b      	strh	r3, [r1, #2]
 801f060:	1d01      	adds	r1, r0, #4
 801f062:	4620      	mov	r0, r4
 801f064:	f7ef fa4c 	bl	800e500 <_ZN8touchgfx4RectaNERKS0_>
 801f068:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801f06c:	b163      	cbz	r3, 801f088 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801f06e:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f072:	b933      	cbnz	r3, 801f082 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x38>
 801f074:	bd70      	pop	{r4, r5, r6, pc}
 801f076:	6803      	ldr	r3, [r0, #0]
 801f078:	4621      	mov	r1, r4
 801f07a:	6a1b      	ldr	r3, [r3, #32]
 801f07c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f080:	4718      	bx	r3
 801f082:	6968      	ldr	r0, [r5, #20]
 801f084:	2800      	cmp	r0, #0
 801f086:	d1f6      	bne.n	801f076 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x2c>
 801f088:	bd70      	pop	{r4, r5, r6, pc}

0801f08a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 801f08a:	b510      	push	{r4, lr}
 801f08c:	2300      	movs	r3, #0
 801f08e:	4604      	mov	r4, r0
 801f090:	4608      	mov	r0, r1
 801f092:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 801f096:	8023      	strh	r3, [r4, #0]
 801f098:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801f09c:	8063      	strh	r3, [r4, #2]
 801f09e:	6803      	ldr	r3, [r0, #0]
 801f0a0:	80a1      	strh	r1, [r4, #4]
 801f0a2:	4621      	mov	r1, r4
 801f0a4:	80e2      	strh	r2, [r4, #6]
 801f0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f0a8:	4798      	blx	r3
 801f0aa:	4620      	mov	r0, r4
 801f0ac:	bd10      	pop	{r4, pc}
	...

0801f0b0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt>:
 801f0b0:	b510      	push	{r4, lr}
 801f0b2:	8083      	strh	r3, [r0, #4]
 801f0b4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 801f0b8:	6101      	str	r1, [r0, #16]
 801f0ba:	7183      	strb	r3, [r0, #6]
 801f0bc:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801f0c0:	8282      	strh	r2, [r0, #20]
 801f0c2:	71c3      	strb	r3, [r0, #7]
 801f0c4:	f89d 3010 	ldrb.w	r3, [sp, #16]
 801f0c8:	7203      	strb	r3, [r0, #8]
 801f0ca:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801f0ce:	7243      	strb	r3, [r0, #9]
 801f0d0:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801f0d4:	8143      	strh	r3, [r0, #10]
 801f0d6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
 801f0da:	8183      	strh	r3, [r0, #12]
 801f0dc:	4b01      	ldr	r3, [pc, #4]	; (801f0e4 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt+0x34>)
 801f0de:	6003      	str	r3, [r0, #0]
 801f0e0:	bd10      	pop	{r4, pc}
 801f0e2:	bf00      	nop
 801f0e4:	08025e2c 	.word	0x08025e2c

0801f0e8 <_ZNK8touchgfx9ConstFont4findEt>:
 801f0e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f0ea:	8a84      	ldrh	r4, [r0, #20]
 801f0ec:	2500      	movs	r5, #0
 801f0ee:	260e      	movs	r6, #14
 801f0f0:	3c01      	subs	r4, #1
 801f0f2:	42a5      	cmp	r5, r4
 801f0f4:	dc0c      	bgt.n	801f110 <_ZNK8touchgfx9ConstFont4findEt+0x28>
 801f0f6:	192a      	adds	r2, r5, r4
 801f0f8:	6903      	ldr	r3, [r0, #16]
 801f0fa:	1052      	asrs	r2, r2, #1
 801f0fc:	fb06 3302 	mla	r3, r6, r2, r3
 801f100:	889f      	ldrh	r7, [r3, #4]
 801f102:	42b9      	cmp	r1, r7
 801f104:	da01      	bge.n	801f10a <_ZNK8touchgfx9ConstFont4findEt+0x22>
 801f106:	1e54      	subs	r4, r2, #1
 801f108:	e7f3      	b.n	801f0f2 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801f10a:	dd02      	ble.n	801f112 <_ZNK8touchgfx9ConstFont4findEt+0x2a>
 801f10c:	1c55      	adds	r5, r2, #1
 801f10e:	e7f0      	b.n	801f0f2 <_ZNK8touchgfx9ConstFont4findEt+0xa>
 801f110:	2300      	movs	r3, #0
 801f112:	4618      	mov	r0, r3
 801f114:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f116 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801f116:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f118:	4605      	mov	r5, r0
 801f11a:	4617      	mov	r7, r2
 801f11c:	461e      	mov	r6, r3
 801f11e:	f7ff ffe3 	bl	801f0e8 <_ZNK8touchgfx9ConstFont4findEt>
 801f122:	b9e0      	cbnz	r0, 801f15e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x48>
 801f124:	b911      	cbnz	r1, 801f12c <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x16>
 801f126:	2400      	movs	r4, #0
 801f128:	4620      	mov	r0, r4
 801f12a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f12c:	290a      	cmp	r1, #10
 801f12e:	d0fa      	beq.n	801f126 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801f130:	682b      	ldr	r3, [r5, #0]
 801f132:	4628      	mov	r0, r5
 801f134:	691b      	ldr	r3, [r3, #16]
 801f136:	4798      	blx	r3
 801f138:	4601      	mov	r1, r0
 801f13a:	4628      	mov	r0, r5
 801f13c:	f7ff ffd4 	bl	801f0e8 <_ZNK8touchgfx9ConstFont4findEt>
 801f140:	4604      	mov	r4, r0
 801f142:	2800      	cmp	r0, #0
 801f144:	d0ef      	beq.n	801f126 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 801f146:	682b      	ldr	r3, [r5, #0]
 801f148:	4621      	mov	r1, r4
 801f14a:	4628      	mov	r0, r5
 801f14c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801f14e:	4798      	blx	r3
 801f150:	6038      	str	r0, [r7, #0]
 801f152:	682b      	ldr	r3, [r5, #0]
 801f154:	4628      	mov	r0, r5
 801f156:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801f158:	4798      	blx	r3
 801f15a:	7030      	strb	r0, [r6, #0]
 801f15c:	e7e4      	b.n	801f128 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x12>
 801f15e:	4604      	mov	r4, r0
 801f160:	e7f1      	b.n	801f146 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x30>

0801f162 <_ZN8touchgfx6memsetEPvhm>:
 801f162:	4402      	add	r2, r0
 801f164:	4290      	cmp	r0, r2
 801f166:	d002      	beq.n	801f16e <_ZN8touchgfx6memsetEPvhm+0xc>
 801f168:	f800 1b01 	strb.w	r1, [r0], #1
 801f16c:	e7fa      	b.n	801f164 <_ZN8touchgfx6memsetEPvhm+0x2>
 801f16e:	4770      	bx	lr

0801f170 <_ZN8touchgfx12GestureEvent12getEventTypeEv>:
 801f170:	2002      	movs	r0, #2
 801f172:	4770      	bx	lr

0801f174 <_ZN8touchgfx12GestureEventD1Ev>:
 801f174:	4770      	bx	lr

0801f176 <_ZN8touchgfx12GestureEventD0Ev>:
 801f176:	b510      	push	{r4, lr}
 801f178:	4604      	mov	r4, r0
 801f17a:	210c      	movs	r1, #12
 801f17c:	f003 f951 	bl	8022422 <_ZdlPvj>
 801f180:	4620      	mov	r0, r4
 801f182:	bd10      	pop	{r4, pc}

0801f184 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 801f184:	b530      	push	{r4, r5, lr}
 801f186:	460d      	mov	r5, r1
 801f188:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801f18a:	b087      	sub	sp, #28
 801f18c:	4604      	mov	r4, r0
 801f18e:	b301      	cbz	r1, 801f1d2 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801f190:	a801      	add	r0, sp, #4
 801f192:	f7ff ff7a 	bl	801f08a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f196:	892a      	ldrh	r2, [r5, #8]
 801f198:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801f19c:	7928      	ldrb	r0, [r5, #4]
 801f19e:	1ad2      	subs	r2, r2, r3
 801f1a0:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801f1a2:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801f1a6:	441a      	add	r2, r3
 801f1a8:	896b      	ldrh	r3, [r5, #10]
 801f1aa:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801f1ae:	f88d 0010 	strb.w	r0, [sp, #16]
 801f1b2:	1b5b      	subs	r3, r3, r5
 801f1b4:	8ee5      	ldrh	r5, [r4, #54]	; 0x36
 801f1b6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801f1b8:	442b      	add	r3, r5
 801f1ba:	4d07      	ldr	r5, [pc, #28]	; (801f1d8 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 801f1bc:	f8ad 1012 	strh.w	r1, [sp, #18]
 801f1c0:	a903      	add	r1, sp, #12
 801f1c2:	9503      	str	r5, [sp, #12]
 801f1c4:	f8ad 2014 	strh.w	r2, [sp, #20]
 801f1c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 801f1cc:	6803      	ldr	r3, [r0, #0]
 801f1ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801f1d0:	4798      	blx	r3
 801f1d2:	b007      	add	sp, #28
 801f1d4:	bd30      	pop	{r4, r5, pc}
 801f1d6:	bf00      	nop
 801f1d8:	08025e78 	.word	0x08025e78

0801f1dc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 801f1dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f1de:	460c      	mov	r4, r1
 801f1e0:	6b01      	ldr	r1, [r0, #48]	; 0x30
 801f1e2:	b089      	sub	sp, #36	; 0x24
 801f1e4:	4605      	mov	r5, r0
 801f1e6:	2900      	cmp	r1, #0
 801f1e8:	d053      	beq.n	801f292 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xb6>
 801f1ea:	4668      	mov	r0, sp
 801f1ec:	f7ff ff4d 	bl	801f08a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f1f0:	8eae      	ldrh	r6, [r5, #52]	; 0x34
 801f1f2:	8eef      	ldrh	r7, [r5, #54]	; 0x36
 801f1f4:	4668      	mov	r0, sp
 801f1f6:	8922      	ldrh	r2, [r4, #8]
 801f1f8:	88e1      	ldrh	r1, [r4, #6]
 801f1fa:	443a      	add	r2, r7
 801f1fc:	4431      	add	r1, r6
 801f1fe:	b212      	sxth	r2, r2
 801f200:	b209      	sxth	r1, r1
 801f202:	f7ef f907 	bl	800e414 <_ZNK8touchgfx4Rect9intersectEss>
 801f206:	b1c8      	cbz	r0, 801f23c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x60>
 801f208:	89a2      	ldrh	r2, [r4, #12]
 801f20a:	4668      	mov	r0, sp
 801f20c:	8961      	ldrh	r1, [r4, #10]
 801f20e:	443a      	add	r2, r7
 801f210:	4431      	add	r1, r6
 801f212:	b212      	sxth	r2, r2
 801f214:	b209      	sxth	r1, r1
 801f216:	f7ef f8fd 	bl	800e414 <_ZNK8touchgfx4Rect9intersectEss>
 801f21a:	b978      	cbnz	r0, 801f23c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x60>
 801f21c:	4b1e      	ldr	r3, [pc, #120]	; (801f298 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xbc>)
 801f21e:	a904      	add	r1, sp, #16
 801f220:	f8ad 0016 	strh.w	r0, [sp, #22]
 801f224:	9304      	str	r3, [sp, #16]
 801f226:	2302      	movs	r3, #2
 801f228:	f8ad 0018 	strh.w	r0, [sp, #24]
 801f22c:	f8ad 001a 	strh.w	r0, [sp, #26]
 801f230:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801f232:	f88d 3014 	strb.w	r3, [sp, #20]
 801f236:	6803      	ldr	r3, [r0, #0]
 801f238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f23a:	4798      	blx	r3
 801f23c:	6b29      	ldr	r1, [r5, #48]	; 0x30
 801f23e:	a802      	add	r0, sp, #8
 801f240:	f7ff ff23 	bl	801f08a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f244:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801f248:	88e0      	ldrh	r0, [r4, #6]
 801f24a:	8961      	ldrh	r1, [r4, #10]
 801f24c:	f8b5 e034 	ldrh.w	lr, [r5, #52]	; 0x34
 801f250:	1a80      	subs	r0, r0, r2
 801f252:	f8bd c00a 	ldrh.w	ip, [sp, #10]
 801f256:	1a89      	subs	r1, r1, r2
 801f258:	8923      	ldrh	r3, [r4, #8]
 801f25a:	4470      	add	r0, lr
 801f25c:	89a2      	ldrh	r2, [r4, #12]
 801f25e:	4471      	add	r1, lr
 801f260:	8eee      	ldrh	r6, [r5, #54]	; 0x36
 801f262:	eba3 030c 	sub.w	r3, r3, ip
 801f266:	eba2 020c 	sub.w	r2, r2, ip
 801f26a:	f8ad 0016 	strh.w	r0, [sp, #22]
 801f26e:	7927      	ldrb	r7, [r4, #4]
 801f270:	4433      	add	r3, r6
 801f272:	4432      	add	r2, r6
 801f274:	4c09      	ldr	r4, [pc, #36]	; (801f29c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xc0>)
 801f276:	6b28      	ldr	r0, [r5, #48]	; 0x30
 801f278:	f8ad 101a 	strh.w	r1, [sp, #26]
 801f27c:	a904      	add	r1, sp, #16
 801f27e:	9404      	str	r4, [sp, #16]
 801f280:	f88d 7014 	strb.w	r7, [sp, #20]
 801f284:	f8ad 3018 	strh.w	r3, [sp, #24]
 801f288:	f8ad 201c 	strh.w	r2, [sp, #28]
 801f28c:	6803      	ldr	r3, [r0, #0]
 801f28e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801f290:	4798      	blx	r3
 801f292:	b009      	add	sp, #36	; 0x24
 801f294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f296:	bf00      	nop
 801f298:	08024094 	.word	0x08024094
 801f29c:	08024080 	.word	0x08024080

0801f2a0 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 801f2a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f2a4:	6b02      	ldr	r2, [r0, #48]	; 0x30
 801f2a6:	b0a1      	sub	sp, #132	; 0x84
 801f2a8:	4604      	mov	r4, r0
 801f2aa:	460d      	mov	r5, r1
 801f2ac:	790b      	ldrb	r3, [r1, #4]
 801f2ae:	b16a      	cbz	r2, 801f2cc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x2c>
 801f2b0:	b963      	cbnz	r3, 801f2cc <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x2c>
 801f2b2:	b021      	add	sp, #132	; 0x84
 801f2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f2b8:	f104 0330 	add.w	r3, r4, #48	; 0x30
 801f2bc:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801f2c0:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801f2c4:	1d20      	adds	r0, r4, #4
 801f2c6:	f7ef fcf9 	bl	800ecbc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801f2ca:	e0a2      	b.n	801f412 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x172>
 801f2cc:	2b00      	cmp	r3, #0
 801f2ce:	f040 80a0 	bne.w	801f412 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x172>
 801f2d2:	4a66      	ldr	r2, [pc, #408]	; (801f46c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1cc>)
 801f2d4:	6812      	ldr	r2, [r2, #0]
 801f2d6:	f892 b045 	ldrb.w	fp, [r2, #69]	; 0x45
 801f2da:	86a3      	strh	r3, [r4, #52]	; 0x34
 801f2dc:	f1bb 0f03 	cmp.w	fp, #3
 801f2e0:	86e3      	strh	r3, [r4, #54]	; 0x36
 801f2e2:	dde9      	ble.n	801f2b8 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x18>
 801f2e4:	f1bb 0f0c 	cmp.w	fp, #12
 801f2e8:	6323      	str	r3, [r4, #48]	; 0x30
 801f2ea:	f04f 0303 	mov.w	r3, #3
 801f2ee:	f04f 0600 	mov.w	r6, #0
 801f2f2:	bfd8      	it	le
 801f2f4:	f10b 32ff 	addle.w	r2, fp, #4294967295
 801f2f8:	495d      	ldr	r1, [pc, #372]	; (801f470 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d0>)
 801f2fa:	f8ad 6028 	strh.w	r6, [sp, #40]	; 0x28
 801f2fe:	f04f 0a01 	mov.w	sl, #1
 801f302:	f8ad 602a 	strh.w	r6, [sp, #42]	; 0x2a
 801f306:	bfd8      	it	le
 801f308:	fb92 f3f3 	sdivle	r3, r2, r3
 801f30c:	9300      	str	r3, [sp, #0]
 801f30e:	4b59      	ldr	r3, [pc, #356]	; (801f474 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d4>)
 801f310:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f314:	4b58      	ldr	r3, [pc, #352]	; (801f478 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1d8>)
 801f316:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
 801f31a:	2248      	movs	r2, #72	; 0x48
 801f31c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801f320:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
 801f324:	ab0e      	add	r3, sp, #56	; 0x38
 801f326:	4618      	mov	r0, r3
 801f328:	f003 f908 	bl	802253c <memcpy>
 801f32c:	f04f 32ff 	mov.w	r2, #4294967295
 801f330:	f8cd b008 	str.w	fp, [sp, #8]
 801f334:	9206      	str	r2, [sp, #24]
 801f336:	9007      	str	r0, [sp, #28]
 801f338:	9a00      	ldr	r2, [sp, #0]
 801f33a:	9b02      	ldr	r3, [sp, #8]
 801f33c:	fb93 f3f2 	sdiv	r3, r3, r2
 801f340:	f10a 32ff 	add.w	r2, sl, #4294967295
 801f344:	b29b      	uxth	r3, r3
 801f346:	9201      	str	r2, [sp, #4]
 801f348:	9a07      	ldr	r2, [sp, #28]
 801f34a:	9303      	str	r3, [sp, #12]
 801f34c:	eb02 07ca 	add.w	r7, r2, sl, lsl #3
 801f350:	3f04      	subs	r7, #4
 801f352:	2300      	movs	r3, #0
 801f354:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801f358:	f8b5 8006 	ldrh.w	r8, [r5, #6]
 801f35c:	a80a      	add	r0, sp, #40	; 0x28
 801f35e:	9309      	str	r3, [sp, #36]	; 0x24
 801f360:	f857 3c04 	ldr.w	r3, [r7, #-4]
 801f364:	f8b5 9008 	ldrh.w	r9, [r5, #8]
 801f368:	fb13 f302 	smulbb	r3, r3, r2
 801f36c:	b29b      	uxth	r3, r3
 801f36e:	9304      	str	r3, [sp, #16]
 801f370:	683b      	ldr	r3, [r7, #0]
 801f372:	fb13 f302 	smulbb	r3, r3, r2
 801f376:	b29b      	uxth	r3, r3
 801f378:	9305      	str	r3, [sp, #20]
 801f37a:	9b04      	ldr	r3, [sp, #16]
 801f37c:	4498      	add	r8, r3
 801f37e:	9b05      	ldr	r3, [sp, #20]
 801f380:	4499      	add	r9, r3
 801f382:	fa0f f888 	sxth.w	r8, r8
 801f386:	fa0f f989 	sxth.w	r9, r9
 801f38a:	4641      	mov	r1, r8
 801f38c:	464a      	mov	r2, r9
 801f38e:	f7ef f841 	bl	800e414 <_ZNK8touchgfx4Rect9intersectEss>
 801f392:	b380      	cbz	r0, 801f3f6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801f394:	4641      	mov	r1, r8
 801f396:	ab09      	add	r3, sp, #36	; 0x24
 801f398:	464a      	mov	r2, r9
 801f39a:	1d20      	adds	r0, r4, #4
 801f39c:	f7ef fc8e 	bl	800ecbc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 801f3a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 801f3a2:	b341      	cbz	r1, 801f3f6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801f3a4:	42b1      	cmp	r1, r6
 801f3a6:	d026      	beq.n	801f3f6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801f3a8:	a80c      	add	r0, sp, #48	; 0x30
 801f3aa:	f7ff fe6e 	bl	801f08a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f3ae:	2002      	movs	r0, #2
 801f3b0:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 801f3b4:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 801f3b8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 801f3bc:	fb92 f2f0 	sdiv	r2, r2, r0
 801f3c0:	440a      	add	r2, r1
 801f3c2:	1a99      	subs	r1, r3, r2
 801f3c4:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 801f3c8:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 801f3cc:	fb93 f3f0 	sdiv	r3, r3, r0
 801f3d0:	f9bd 0032 	ldrsh.w	r0, [sp, #50]	; 0x32
 801f3d4:	4403      	add	r3, r0
 801f3d6:	1ad3      	subs	r3, r2, r3
 801f3d8:	9a06      	ldr	r2, [sp, #24]
 801f3da:	435b      	muls	r3, r3
 801f3dc:	fb01 3301 	mla	r3, r1, r1, r3
 801f3e0:	4293      	cmp	r3, r2
 801f3e2:	d208      	bcs.n	801f3f6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x156>
 801f3e4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801f3e8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801f3ea:	86a2      	strh	r2, [r4, #52]	; 0x34
 801f3ec:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801f3f0:	6326      	str	r6, [r4, #48]	; 0x30
 801f3f2:	86e2      	strh	r2, [r4, #54]	; 0x36
 801f3f4:	9306      	str	r3, [sp, #24]
 801f3f6:	9b01      	ldr	r3, [sp, #4]
 801f3f8:	3710      	adds	r7, #16
 801f3fa:	3302      	adds	r3, #2
 801f3fc:	2b08      	cmp	r3, #8
 801f3fe:	9301      	str	r3, [sp, #4]
 801f400:	dda7      	ble.n	801f352 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xb2>
 801f402:	9b02      	ldr	r3, [sp, #8]
 801f404:	f10a 0a01 	add.w	sl, sl, #1
 801f408:	445b      	add	r3, fp
 801f40a:	9302      	str	r3, [sp, #8]
 801f40c:	9b00      	ldr	r3, [sp, #0]
 801f40e:	4553      	cmp	r3, sl
 801f410:	da92      	bge.n	801f338 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x98>
 801f412:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801f414:	2900      	cmp	r1, #0
 801f416:	f43f af4c 	beq.w	801f2b2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801f41a:	a80c      	add	r0, sp, #48	; 0x30
 801f41c:	2600      	movs	r6, #0
 801f41e:	f7ff fe34 	bl	801f08a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f422:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
 801f426:	88ea      	ldrh	r2, [r5, #6]
 801f428:	f8bd 0032 	ldrh.w	r0, [sp, #50]	; 0x32
 801f42c:	1ad2      	subs	r2, r2, r3
 801f42e:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 801f430:	7929      	ldrb	r1, [r5, #4]
 801f432:	441a      	add	r2, r3
 801f434:	892b      	ldrh	r3, [r5, #8]
 801f436:	f88d 103c 	strb.w	r1, [sp, #60]	; 0x3c
 801f43a:	a90e      	add	r1, sp, #56	; 0x38
 801f43c:	1a1b      	subs	r3, r3, r0
 801f43e:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 801f440:	f8ad 203e 	strh.w	r2, [sp, #62]	; 0x3e
 801f444:	4403      	add	r3, r0
 801f446:	480d      	ldr	r0, [pc, #52]	; (801f47c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x1dc>)
 801f448:	f8ad 6042 	strh.w	r6, [sp, #66]	; 0x42
 801f44c:	900e      	str	r0, [sp, #56]	; 0x38
 801f44e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 801f450:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 801f454:	6803      	ldr	r3, [r0, #0]
 801f456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801f458:	4798      	blx	r3
 801f45a:	792b      	ldrb	r3, [r5, #4]
 801f45c:	2b00      	cmp	r3, #0
 801f45e:	f43f af28 	beq.w	801f2b2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801f462:	6326      	str	r6, [r4, #48]	; 0x30
 801f464:	86a6      	strh	r6, [r4, #52]	; 0x34
 801f466:	86e6      	strh	r6, [r4, #54]	; 0x36
 801f468:	e723      	b.n	801f2b2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x12>
 801f46a:	bf00      	nop
 801f46c:	20009d34 	.word	0x20009d34
 801f470:	08023ec8 	.word	0x08023ec8
 801f474:	20009d28 	.word	0x20009d28
 801f478:	20009d2a 	.word	0x20009d2a
 801f47c:	08024094 	.word	0x08024094

0801f480 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801f480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f482:	4604      	mov	r4, r0
 801f484:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 801f488:	3201      	adds	r2, #1
 801f48a:	d114      	bne.n	801f4b6 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x36>
 801f48c:	f9b0 100a 	ldrsh.w	r1, [r0, #10]
 801f490:	2200      	movs	r2, #0
 801f492:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801f496:	6803      	ldr	r3, [r0, #0]
 801f498:	f8ad 1006 	strh.w	r1, [sp, #6]
 801f49c:	4669      	mov	r1, sp
 801f49e:	f8ad 2000 	strh.w	r2, [sp]
 801f4a2:	f8ad 2002 	strh.w	r2, [sp, #2]
 801f4a6:	f8ad 5004 	strh.w	r5, [sp, #4]
 801f4aa:	6a1b      	ldr	r3, [r3, #32]
 801f4ac:	4798      	blx	r3
 801f4ae:	e89d 0003 	ldmia.w	sp, {r0, r1}
 801f4b2:	e884 0003 	stmia.w	r4, {r0, r1}
 801f4b6:	4620      	mov	r0, r4
 801f4b8:	b003      	add	sp, #12
 801f4ba:	bd30      	pop	{r4, r5, pc}

0801f4bc <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 801f4bc:	b513      	push	{r0, r1, r4, lr}
 801f4be:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801f4c2:	4604      	mov	r4, r0
 801f4c4:	3301      	adds	r3, #1
 801f4c6:	d109      	bne.n	801f4dc <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801f4c8:	4601      	mov	r1, r0
 801f4ca:	4668      	mov	r0, sp
 801f4cc:	f7ff fddd 	bl	801f08a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f4d0:	f8bd 3000 	ldrh.w	r3, [sp]
 801f4d4:	8423      	strh	r3, [r4, #32]
 801f4d6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801f4da:	8463      	strh	r3, [r4, #34]	; 0x22
 801f4dc:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801f4e0:	b002      	add	sp, #8
 801f4e2:	bd10      	pop	{r4, pc}

0801f4e4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801f4e4:	b513      	push	{r0, r1, r4, lr}
 801f4e6:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 801f4ea:	4604      	mov	r4, r0
 801f4ec:	3301      	adds	r3, #1
 801f4ee:	d109      	bne.n	801f504 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801f4f0:	4601      	mov	r1, r0
 801f4f2:	4668      	mov	r0, sp
 801f4f4:	f7ff fdc9 	bl	801f08a <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801f4f8:	f8bd 3000 	ldrh.w	r3, [sp]
 801f4fc:	8423      	strh	r3, [r4, #32]
 801f4fe:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801f502:	8463      	strh	r3, [r4, #34]	; 0x22
 801f504:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	; 0x22
 801f508:	b002      	add	sp, #8
 801f50a:	bd10      	pop	{r4, pc}

0801f50c <_ZN8touchgfx6ScreenC1Ev>:
 801f50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f50e:	4605      	mov	r5, r0
 801f510:	4b18      	ldr	r3, [pc, #96]	; (801f574 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 801f512:	2200      	movs	r2, #0
 801f514:	4918      	ldr	r1, [pc, #96]	; (801f578 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 801f516:	f845 3b04 	str.w	r3, [r5], #4
 801f51a:	2301      	movs	r3, #1
 801f51c:	8102      	strh	r2, [r0, #8]
 801f51e:	4604      	mov	r4, r0
 801f520:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
 801f524:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 801f528:	4b14      	ldr	r3, [pc, #80]	; (801f57c <_ZN8touchgfx6ScreenC1Ev+0x70>)
 801f52a:	8142      	strh	r2, [r0, #10]
 801f52c:	f9b3 7000 	ldrsh.w	r7, [r3]
 801f530:	4b13      	ldr	r3, [pc, #76]	; (801f580 <_ZN8touchgfx6ScreenC1Ev+0x74>)
 801f532:	8182      	strh	r2, [r0, #12]
 801f534:	81c2      	strh	r2, [r0, #14]
 801f536:	8202      	strh	r2, [r0, #16]
 801f538:	8242      	strh	r2, [r0, #18]
 801f53a:	8282      	strh	r2, [r0, #20]
 801f53c:	82c2      	strh	r2, [r0, #22]
 801f53e:	6182      	str	r2, [r0, #24]
 801f540:	61c2      	str	r2, [r0, #28]
 801f542:	6202      	str	r2, [r0, #32]
 801f544:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
 801f548:	62c2      	str	r2, [r0, #44]	; 0x2c
 801f54a:	6302      	str	r2, [r0, #48]	; 0x30
 801f54c:	8682      	strh	r2, [r0, #52]	; 0x34
 801f54e:	86c2      	strh	r2, [r0, #54]	; 0x36
 801f550:	f9b3 6000 	ldrsh.w	r6, [r3]
 801f554:	6041      	str	r1, [r0, #4]
 801f556:	4611      	mov	r1, r2
 801f558:	4628      	mov	r0, r5
 801f55a:	f7ef f982 	bl	800e862 <_ZN8touchgfx8Drawable5setXYEss>
 801f55e:	4639      	mov	r1, r7
 801f560:	4628      	mov	r0, r5
 801f562:	f7ef f99c 	bl	800e89e <_ZN8touchgfx8Drawable8setWidthEs>
 801f566:	4628      	mov	r0, r5
 801f568:	4631      	mov	r1, r6
 801f56a:	f7ef f9a7 	bl	800e8bc <_ZN8touchgfx8Drawable9setHeightEs>
 801f56e:	4620      	mov	r0, r4
 801f570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f572:	bf00      	nop
 801f574:	08025e8c 	.word	0x08025e8c
 801f578:	08023f30 	.word	0x08023f30
 801f57c:	20009d28 	.word	0x20009d28
 801f580:	20009d2a 	.word	0x20009d2a

0801f584 <_ZN8touchgfx6Screen4drawEv>:
 801f584:	4b0b      	ldr	r3, [pc, #44]	; (801f5b4 <_ZN8touchgfx6Screen4drawEv+0x30>)
 801f586:	b507      	push	{r0, r1, r2, lr}
 801f588:	f9b3 1000 	ldrsh.w	r1, [r3]
 801f58c:	4b0a      	ldr	r3, [pc, #40]	; (801f5b8 <_ZN8touchgfx6Screen4drawEv+0x34>)
 801f58e:	f8ad 1004 	strh.w	r1, [sp, #4]
 801f592:	4669      	mov	r1, sp
 801f594:	f9b3 2000 	ldrsh.w	r2, [r3]
 801f598:	2300      	movs	r3, #0
 801f59a:	f8ad 3000 	strh.w	r3, [sp]
 801f59e:	f8ad 3002 	strh.w	r3, [sp, #2]
 801f5a2:	6803      	ldr	r3, [r0, #0]
 801f5a4:	f8ad 2006 	strh.w	r2, [sp, #6]
 801f5a8:	689b      	ldr	r3, [r3, #8]
 801f5aa:	4798      	blx	r3
 801f5ac:	b003      	add	sp, #12
 801f5ae:	f85d fb04 	ldr.w	pc, [sp], #4
 801f5b2:	bf00      	nop
 801f5b4:	20009d28 	.word	0x20009d28
 801f5b8:	20009d2a 	.word	0x20009d2a

0801f5bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 801f5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5c0:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801f5c4:	b087      	sub	sp, #28
 801f5c6:	4681      	mov	r9, r0
 801f5c8:	460c      	mov	r4, r1
 801f5ca:	4615      	mov	r5, r2
 801f5cc:	b16b      	cbz	r3, 801f5ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801f5ce:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801f5d2:	b153      	cbz	r3, 801f5ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801f5d4:	4628      	mov	r0, r5
 801f5d6:	f7ff ff53 	bl	801f480 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801f5da:	4621      	mov	r1, r4
 801f5dc:	f7ee ff49 	bl	800e472 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801f5e0:	69eb      	ldr	r3, [r5, #28]
 801f5e2:	b928      	cbnz	r0, 801f5f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x34>
 801f5e4:	461d      	mov	r5, r3
 801f5e6:	2b00      	cmp	r3, #0
 801f5e8:	d1f4      	bne.n	801f5d4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x18>
 801f5ea:	b007      	add	sp, #28
 801f5ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f5f0:	ae02      	add	r6, sp, #8
 801f5f2:	2b00      	cmp	r3, #0
 801f5f4:	d04a      	beq.n	801f68c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>
 801f5f6:	682b      	ldr	r3, [r5, #0]
 801f5f8:	4629      	mov	r1, r5
 801f5fa:	4668      	mov	r0, sp
 801f5fc:	68db      	ldr	r3, [r3, #12]
 801f5fe:	4798      	blx	r3
 801f600:	4628      	mov	r0, r5
 801f602:	f7ff ff5b 	bl	801f4bc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801f606:	f8bd 7000 	ldrh.w	r7, [sp]
 801f60a:	4407      	add	r7, r0
 801f60c:	4628      	mov	r0, r5
 801f60e:	f7ff ff69 	bl	801f4e4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801f612:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801f616:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801f61a:	b23f      	sxth	r7, r7
 801f61c:	4418      	add	r0, r3
 801f61e:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801f622:	4621      	mov	r1, r4
 801f624:	f8ad 200c 	strh.w	r2, [sp, #12]
 801f628:	f8ad 000a 	strh.w	r0, [sp, #10]
 801f62c:	4630      	mov	r0, r6
 801f62e:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f632:	f8ad 7008 	strh.w	r7, [sp, #8]
 801f636:	f7ee ff63 	bl	800e500 <_ZN8touchgfx4RectaNERKS0_>
 801f63a:	4628      	mov	r0, r5
 801f63c:	f7ff ff20 	bl	801f480 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801f640:	ab04      	add	r3, sp, #16
 801f642:	4602      	mov	r2, r0
 801f644:	e896 0003 	ldmia.w	r6, {r0, r1}
 801f648:	e883 0003 	stmia.w	r3, {r0, r1}
 801f64c:	4611      	mov	r1, r2
 801f64e:	4618      	mov	r0, r3
 801f650:	f7ee ff56 	bl	800e500 <_ZN8touchgfx4RectaNERKS0_>
 801f654:	f9bd b010 	ldrsh.w	fp, [sp, #16]
 801f658:	f9b4 2000 	ldrsh.w	r2, [r4]
 801f65c:	f9bd a012 	ldrsh.w	sl, [sp, #18]
 801f660:	455a      	cmp	r2, fp
 801f662:	f9bd 8014 	ldrsh.w	r8, [sp, #20]
 801f666:	f9bd 7016 	ldrsh.w	r7, [sp, #22]
 801f66a:	f040 8096 	bne.w	801f79a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801f66e:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801f672:	4553      	cmp	r3, sl
 801f674:	f040 8091 	bne.w	801f79a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801f678:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801f67c:	4543      	cmp	r3, r8
 801f67e:	f040 808c 	bne.w	801f79a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801f682:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f686:	42bb      	cmp	r3, r7
 801f688:	f040 8087 	bne.w	801f79a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1de>
 801f68c:	4628      	mov	r0, r5
 801f68e:	f7ff fef7 	bl	801f480 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801f692:	6861      	ldr	r1, [r4, #4]
 801f694:	4602      	mov	r2, r0
 801f696:	4633      	mov	r3, r6
 801f698:	6820      	ldr	r0, [r4, #0]
 801f69a:	c303      	stmia	r3!, {r0, r1}
 801f69c:	4611      	mov	r1, r2
 801f69e:	4630      	mov	r0, r6
 801f6a0:	f7ee ff2e 	bl	800e500 <_ZN8touchgfx4RectaNERKS0_>
 801f6a4:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 801f6a8:	2b00      	cmp	r3, #0
 801f6aa:	d09e      	beq.n	801f5ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801f6ac:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 801f6b0:	2b00      	cmp	r3, #0
 801f6b2:	d09a      	beq.n	801f5ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801f6b4:	4628      	mov	r0, r5
 801f6b6:	f7ff ff01 	bl	801f4bc <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801f6ba:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801f6be:	1a18      	subs	r0, r3, r0
 801f6c0:	f8ad 0008 	strh.w	r0, [sp, #8]
 801f6c4:	4628      	mov	r0, r5
 801f6c6:	f7ff ff0d 	bl	801f4e4 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801f6ca:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801f6ce:	4631      	mov	r1, r6
 801f6d0:	1a18      	subs	r0, r3, r0
 801f6d2:	f8ad 000a 	strh.w	r0, [sp, #10]
 801f6d6:	4628      	mov	r0, r5
 801f6d8:	682b      	ldr	r3, [r5, #0]
 801f6da:	689b      	ldr	r3, [r3, #8]
 801f6dc:	4798      	blx	r3
 801f6de:	e784      	b.n	801f5ea <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x2e>
 801f6e0:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 801f6e4:	4553      	cmp	r3, sl
 801f6e6:	da10      	bge.n	801f70a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x14e>
 801f6e8:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801f6ec:	4648      	mov	r0, r9
 801f6ee:	f8ad 300a 	strh.w	r3, [sp, #10]
 801f6f2:	ebaa 0303 	sub.w	r3, sl, r3
 801f6f6:	f8ad 100c 	strh.w	r1, [sp, #12]
 801f6fa:	4631      	mov	r1, r6
 801f6fc:	f8ad 2008 	strh.w	r2, [sp, #8]
 801f700:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f704:	69ea      	ldr	r2, [r5, #28]
 801f706:	f7ff ff59 	bl	801f5bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801f70a:	f9b4 3000 	ldrsh.w	r3, [r4]
 801f70e:	455b      	cmp	r3, fp
 801f710:	da0e      	bge.n	801f730 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x174>
 801f712:	f8ad 3008 	strh.w	r3, [sp, #8]
 801f716:	ebab 0303 	sub.w	r3, fp, r3
 801f71a:	f8ad a00a 	strh.w	sl, [sp, #10]
 801f71e:	4631      	mov	r1, r6
 801f720:	f8ad 300c 	strh.w	r3, [sp, #12]
 801f724:	4648      	mov	r0, r9
 801f726:	f8ad 700e 	strh.w	r7, [sp, #14]
 801f72a:	69ea      	ldr	r2, [r5, #28]
 801f72c:	f7ff ff46 	bl	801f5bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801f730:	8822      	ldrh	r2, [r4, #0]
 801f732:	44d8      	add	r8, fp
 801f734:	88a3      	ldrh	r3, [r4, #4]
 801f736:	fa1f f888 	uxth.w	r8, r8
 801f73a:	4413      	add	r3, r2
 801f73c:	fa0f f288 	sxth.w	r2, r8
 801f740:	b29b      	uxth	r3, r3
 801f742:	b219      	sxth	r1, r3
 801f744:	4291      	cmp	r1, r2
 801f746:	dd0e      	ble.n	801f766 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801f748:	eba3 0308 	sub.w	r3, r3, r8
 801f74c:	f8ad 2008 	strh.w	r2, [sp, #8]
 801f750:	f8ad a00a 	strh.w	sl, [sp, #10]
 801f754:	4631      	mov	r1, r6
 801f756:	f8ad 300c 	strh.w	r3, [sp, #12]
 801f75a:	4648      	mov	r0, r9
 801f75c:	f8ad 700e 	strh.w	r7, [sp, #14]
 801f760:	69ea      	ldr	r2, [r5, #28]
 801f762:	f7ff ff2b 	bl	801f5bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801f766:	88e2      	ldrh	r2, [r4, #6]
 801f768:	4457      	add	r7, sl
 801f76a:	8863      	ldrh	r3, [r4, #2]
 801f76c:	b2bf      	uxth	r7, r7
 801f76e:	4413      	add	r3, r2
 801f770:	b23a      	sxth	r2, r7
 801f772:	b29b      	uxth	r3, r3
 801f774:	b219      	sxth	r1, r3
 801f776:	428a      	cmp	r2, r1
 801f778:	da88      	bge.n	801f68c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>
 801f77a:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801f77e:	1bdb      	subs	r3, r3, r7
 801f780:	f9b4 0000 	ldrsh.w	r0, [r4]
 801f784:	f8ad 100c 	strh.w	r1, [sp, #12]
 801f788:	4631      	mov	r1, r6
 801f78a:	f8ad 0008 	strh.w	r0, [sp, #8]
 801f78e:	f8ad 200a 	strh.w	r2, [sp, #10]
 801f792:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f796:	69ea      	ldr	r2, [r5, #28]
 801f798:	e006      	b.n	801f7a8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1ec>
 801f79a:	f1b8 0f00 	cmp.w	r8, #0
 801f79e:	d001      	beq.n	801f7a4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1e8>
 801f7a0:	2f00      	cmp	r7, #0
 801f7a2:	d19d      	bne.n	801f6e0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x124>
 801f7a4:	69ea      	ldr	r2, [r5, #28]
 801f7a6:	4621      	mov	r1, r4
 801f7a8:	4648      	mov	r0, r9
 801f7aa:	f7ff ff07 	bl	801f5bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801f7ae:	e76d      	b.n	801f68c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xd0>

0801f7b0 <_ZN8touchgfx6Screen9startSMOCERNS_4RectE>:
 801f7b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f7b2:	2300      	movs	r3, #0
 801f7b4:	aa02      	add	r2, sp, #8
 801f7b6:	4604      	mov	r4, r0
 801f7b8:	3004      	adds	r0, #4
 801f7ba:	f842 3d04 	str.w	r3, [r2, #-4]!
 801f7be:	460d      	mov	r5, r1
 801f7c0:	f7ef fb7d 	bl	800eebe <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801f7c4:	9a01      	ldr	r2, [sp, #4]
 801f7c6:	b11a      	cbz	r2, 801f7d0 <_ZN8touchgfx6Screen9startSMOCERNS_4RectE+0x20>
 801f7c8:	4629      	mov	r1, r5
 801f7ca:	4620      	mov	r0, r4
 801f7cc:	f7ff fef6 	bl	801f5bc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801f7d0:	b003      	add	sp, #12
 801f7d2:	bd30      	pop	{r4, r5, pc}

0801f7d4 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 801f7d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f7d6:	4602      	mov	r2, r0
 801f7d8:	4604      	mov	r4, r0
 801f7da:	460d      	mov	r5, r1
 801f7dc:	466b      	mov	r3, sp
 801f7de:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801f7e2:	6851      	ldr	r1, [r2, #4]
 801f7e4:	c303      	stmia	r3!, {r0, r1}
 801f7e6:	4629      	mov	r1, r5
 801f7e8:	4668      	mov	r0, sp
 801f7ea:	f7ee fe89 	bl	800e500 <_ZN8touchgfx4RectaNERKS0_>
 801f7ee:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
 801f7f2:	4669      	mov	r1, sp
 801f7f4:	b123      	cbz	r3, 801f800 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2c>
 801f7f6:	4620      	mov	r0, r4
 801f7f8:	f7ff ffda 	bl	801f7b0 <_ZN8touchgfx6Screen9startSMOCERNS_4RectE>
 801f7fc:	b003      	add	sp, #12
 801f7fe:	bd30      	pop	{r4, r5, pc}
 801f800:	1d20      	adds	r0, r4, #4
 801f802:	f7ef f9f0 	bl	800ebe6 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 801f806:	e7f9      	b.n	801f7fc <_ZN8touchgfx6Screen4drawERNS_4RectE+0x28>

0801f808 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 801f808:	460b      	mov	r3, r1
 801f80a:	680a      	ldr	r2, [r1, #0]
 801f80c:	1d01      	adds	r1, r0, #4
 801f80e:	6952      	ldr	r2, [r2, #20]
 801f810:	4618      	mov	r0, r3
 801f812:	4710      	bx	r2

0801f814 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>:
 801f814:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801f818:	b082      	sub	sp, #8
 801f81a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801f81e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801f822:	bfcc      	ite	gt
 801f824:	ee30 0a27 	vaddgt.f32	s0, s0, s15
 801f828:	ee30 0a67 	vsuble.f32	s0, s0, s15
 801f82c:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801f830:	edcd 7a01 	vstr	s15, [sp, #4]
 801f834:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
 801f838:	b002      	add	sp, #8
 801f83a:	4770      	bx	lr

0801f83c <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst>:
 801f83c:	b510      	push	{r4, lr}
 801f83e:	4298      	cmp	r0, r3
 801f840:	eb01 0402 	add.w	r4, r1, r2
 801f844:	b224      	sxth	r4, r4
 801f846:	da1f      	bge.n	801f888 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801f848:	b1f3      	cbz	r3, 801f888 <_ZN8touchgfx15EasingEquations12cubicEaseOutEtsst+0x4c>
 801f84a:	ee07 0a90 	vmov	s15, r0
 801f84e:	ee06 1a10 	vmov	s12, r1
 801f852:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801f856:	ee07 3a90 	vmov	s15, r3
 801f85a:	eeb8 0ac6 	vcvt.f32.s32	s0, s12
 801f85e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 801f862:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801f866:	ee06 2a90 	vmov	s13, r2
 801f86a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801f86e:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801f872:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801f876:	ee27 6aa7 	vmul.f32	s12, s15, s15
 801f87a:	eea7 7a86 	vfma.f32	s14, s15, s12
 801f87e:	eea6 0a87 	vfma.f32	s0, s13, s14
 801f882:	f7ff ffc7 	bl	801f814 <_ZN8touchgfx15EasingEquations16roundRespectSignEf>
 801f886:	4604      	mov	r4, r0
 801f888:	4620      	mov	r0, r4
 801f88a:	bd10      	pop	{r4, pc}

0801f88c <_ZNK8touchgfx17InternalFlashFont12getPixelDataEPKNS_9GlyphNodeE>:
 801f88c:	680b      	ldr	r3, [r1, #0]
 801f88e:	6980      	ldr	r0, [r0, #24]
 801f890:	4418      	add	r0, r3
 801f892:	4770      	bx	lr

0801f894 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE>:
 801f894:	b530      	push	{r4, r5, lr}
 801f896:	b19a      	cbz	r2, 801f8c0 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 801f898:	7b13      	ldrb	r3, [r2, #12]
 801f89a:	b18b      	cbz	r3, 801f8c0 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 801f89c:	7ad2      	ldrb	r2, [r2, #11]
 801f89e:	b294      	uxth	r4, r2
 801f8a0:	4413      	add	r3, r2
 801f8a2:	429c      	cmp	r4, r3
 801f8a4:	da0c      	bge.n	801f8c0 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x2c>
 801f8a6:	69c2      	ldr	r2, [r0, #28]
 801f8a8:	eb02 0584 	add.w	r5, r2, r4, lsl #2
 801f8ac:	f832 2024 	ldrh.w	r2, [r2, r4, lsl #2]
 801f8b0:	428a      	cmp	r2, r1
 801f8b2:	d102      	bne.n	801f8ba <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0x26>
 801f8b4:	f995 0002 	ldrsb.w	r0, [r5, #2]
 801f8b8:	bd30      	pop	{r4, r5, pc}
 801f8ba:	3401      	adds	r4, #1
 801f8bc:	b2a4      	uxth	r4, r4
 801f8be:	e7f0      	b.n	801f8a2 <_ZNK8touchgfx17InternalFlashFont10getKerningEtPKNS_9GlyphNodeE+0xe>
 801f8c0:	2000      	movs	r0, #0
 801f8c2:	bd30      	pop	{r4, r5, pc}

0801f8c4 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt>:
 801f8c4:	b530      	push	{r4, r5, lr}
 801f8c6:	b087      	sub	sp, #28
 801f8c8:	4604      	mov	r4, r0
 801f8ca:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 801f8ce:	9505      	str	r5, [sp, #20]
 801f8d0:	f8bd 5040 	ldrh.w	r5, [sp, #64]	; 0x40
 801f8d4:	9504      	str	r5, [sp, #16]
 801f8d6:	f89d 5034 	ldrb.w	r5, [sp, #52]	; 0x34
 801f8da:	9503      	str	r5, [sp, #12]
 801f8dc:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
 801f8e0:	9502      	str	r5, [sp, #8]
 801f8e2:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 801f8e6:	9501      	str	r5, [sp, #4]
 801f8e8:	f89d 5028 	ldrb.w	r5, [sp, #40]	; 0x28
 801f8ec:	9500      	str	r5, [sp, #0]
 801f8ee:	f7ff fbdf 	bl	801f0b0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEtthhhhtt>
 801f8f2:	4b04      	ldr	r3, [pc, #16]	; (801f904 <_ZN8touchgfx17InternalFlashFontC1EPKNS_9GlyphNodeEtthhhhPKhPKNS_11KerningNodeEtt+0x40>)
 801f8f4:	4620      	mov	r0, r4
 801f8f6:	6023      	str	r3, [r4, #0]
 801f8f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801f8fa:	61a3      	str	r3, [r4, #24]
 801f8fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801f8fe:	61e3      	str	r3, [r4, #28]
 801f900:	b007      	add	sp, #28
 801f902:	bd30      	pop	{r4, r5, pc}
 801f904:	08025ec0 	.word	0x08025ec0

0801f908 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801f908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f90a:	4604      	mov	r4, r0
 801f90c:	4d1b      	ldr	r5, [pc, #108]	; (801f97c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x74>)
 801f90e:	2700      	movs	r7, #0
 801f910:	2601      	movs	r6, #1
 801f912:	6863      	ldr	r3, [r4, #4]
 801f914:	b93b      	cbnz	r3, 801f926 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x1e>
 801f916:	6821      	ldr	r1, [r4, #0]
 801f918:	2900      	cmp	r1, #0
 801f91a:	d02c      	beq.n	801f976 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6e>
 801f91c:	6828      	ldr	r0, [r5, #0]
 801f91e:	6803      	ldr	r3, [r0, #0]
 801f920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f922:	4798      	blx	r3
 801f924:	6060      	str	r0, [r4, #4]
 801f926:	7c23      	ldrb	r3, [r4, #16]
 801f928:	b16b      	cbz	r3, 801f946 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x3e>
 801f92a:	68e3      	ldr	r3, [r4, #12]
 801f92c:	b12b      	cbz	r3, 801f93a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x32>
 801f92e:	881a      	ldrh	r2, [r3, #0]
 801f930:	b11a      	cbz	r2, 801f93a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x32>
 801f932:	1c9a      	adds	r2, r3, #2
 801f934:	60e2      	str	r2, [r4, #12]
 801f936:	8818      	ldrh	r0, [r3, #0]
 801f938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f93a:	6828      	ldr	r0, [r5, #0]
 801f93c:	7427      	strb	r7, [r4, #16]
 801f93e:	6803      	ldr	r3, [r0, #0]
 801f940:	6821      	ldr	r1, [r4, #0]
 801f942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801f944:	4798      	blx	r3
 801f946:	6863      	ldr	r3, [r4, #4]
 801f948:	881a      	ldrh	r2, [r3, #0]
 801f94a:	b1a2      	cbz	r2, 801f976 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6e>
 801f94c:	2a02      	cmp	r2, #2
 801f94e:	f103 0202 	add.w	r2, r3, #2
 801f952:	6062      	str	r2, [r4, #4]
 801f954:	d1ef      	bne.n	801f936 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x2e>
 801f956:	6828      	ldr	r0, [r5, #0]
 801f958:	6803      	ldr	r3, [r0, #0]
 801f95a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801f95c:	68a3      	ldr	r3, [r4, #8]
 801f95e:	1d19      	adds	r1, r3, #4
 801f960:	60a1      	str	r1, [r4, #8]
 801f962:	6819      	ldr	r1, [r3, #0]
 801f964:	4790      	blx	r2
 801f966:	60e0      	str	r0, [r4, #12]
 801f968:	2800      	cmp	r0, #0
 801f96a:	d0d2      	beq.n	801f912 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801f96c:	8803      	ldrh	r3, [r0, #0]
 801f96e:	2b00      	cmp	r3, #0
 801f970:	d0cf      	beq.n	801f912 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801f972:	7426      	strb	r6, [r4, #16]
 801f974:	e7cd      	b.n	801f912 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0xa>
 801f976:	2000      	movs	r0, #0
 801f978:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f97a:	bf00      	nop
 801f97c:	20009d34 	.word	0x20009d34

0801f980 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 801f980:	b538      	push	{r3, r4, r5, lr}
 801f982:	8a83      	ldrh	r3, [r0, #20]
 801f984:	4604      	mov	r4, r0
 801f986:	8a45      	ldrh	r5, [r0, #18]
 801f988:	8243      	strh	r3, [r0, #18]
 801f98a:	f7ff ffbd 	bl	801f908 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801f98e:	82a0      	strh	r0, [r4, #20]
 801f990:	4628      	mov	r0, r5
 801f992:	bd38      	pop	{r3, r4, r5, pc}

0801f994 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:
 801f994:	b570      	push	{r4, r5, r6, lr}
 801f996:	460e      	mov	r6, r1
 801f998:	4605      	mov	r5, r0
 801f99a:	f7ff fff1 	bl	801f980 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801f99e:	4a0d      	ldr	r2, [pc, #52]	; (801f9d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x40>)
 801f9a0:	4601      	mov	r1, r0
 801f9a2:	6814      	ldr	r4, [r2, #0]
 801f9a4:	4613      	mov	r3, r2
 801f9a6:	b914      	cbnz	r4, 801f9ae <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x1a>
 801f9a8:	6852      	ldr	r2, [r2, #4]
 801f9aa:	07d2      	lsls	r2, r2, #31
 801f9ac:	d510      	bpl.n	801f9d0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x3c>
 801f9ae:	6858      	ldr	r0, [r3, #4]
 801f9b0:	f105 0212 	add.w	r2, r5, #18
 801f9b4:	f010 0f01 	tst.w	r0, #1
 801f9b8:	ea4f 0060 	mov.w	r0, r0, asr #1
 801f9bc:	bf18      	it	ne
 801f9be:	582b      	ldrne	r3, [r5, r0]
 801f9c0:	4428      	add	r0, r5
 801f9c2:	bf18      	it	ne
 801f9c4:	591c      	ldrne	r4, [r3, r4]
 801f9c6:	4633      	mov	r3, r6
 801f9c8:	46a4      	mov	ip, r4
 801f9ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801f9ce:	4760      	bx	ip
 801f9d0:	bd70      	pop	{r4, r5, r6, pc}
 801f9d2:	bf00      	nop
 801f9d4:	20009c8c 	.word	0x20009c8c

0801f9d8 <_ZN8touchgfx12TextProvider18initializeInternalEv>:
 801f9d8:	2300      	movs	r3, #0
 801f9da:	b510      	push	{r4, lr}
 801f9dc:	4604      	mov	r4, r0
 801f9de:	6043      	str	r3, [r0, #4]
 801f9e0:	60c3      	str	r3, [r0, #12]
 801f9e2:	7403      	strb	r3, [r0, #16]
 801f9e4:	f7ff ff90 	bl	801f908 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801f9e8:	8260      	strh	r0, [r4, #18]
 801f9ea:	4620      	mov	r0, r4
 801f9ec:	f7ff ff8c 	bl	801f908 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 801f9f0:	4a0a      	ldr	r2, [pc, #40]	; (801fa1c <_ZN8touchgfx12TextProvider18initializeInternalEv+0x44>)
 801f9f2:	82a0      	strh	r0, [r4, #20]
 801f9f4:	6813      	ldr	r3, [r2, #0]
 801f9f6:	4611      	mov	r1, r2
 801f9f8:	b913      	cbnz	r3, 801fa00 <_ZN8touchgfx12TextProvider18initializeInternalEv+0x28>
 801f9fa:	6852      	ldr	r2, [r2, #4]
 801f9fc:	07d2      	lsls	r2, r2, #31
 801f9fe:	d50c      	bpl.n	801fa1a <_ZN8touchgfx12TextProvider18initializeInternalEv+0x42>
 801fa00:	6848      	ldr	r0, [r1, #4]
 801fa02:	f010 0f01 	tst.w	r0, #1
 801fa06:	ea4f 0060 	mov.w	r0, r0, asr #1
 801fa0a:	bf18      	it	ne
 801fa0c:	5822      	ldrne	r2, [r4, r0]
 801fa0e:	4420      	add	r0, r4
 801fa10:	bf18      	it	ne
 801fa12:	58d3      	ldrne	r3, [r2, r3]
 801fa14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801fa18:	4718      	bx	r3
 801fa1a:	bd10      	pop	{r4, pc}
 801fa1c:	20009c84 	.word	0x20009c84

0801fa20 <_ZN8touchgfx12TextProviderC1Ev>:
 801fa20:	2300      	movs	r3, #0
 801fa22:	b510      	push	{r4, lr}
 801fa24:	4604      	mov	r4, r0
 801fa26:	6003      	str	r3, [r0, #0]
 801fa28:	6043      	str	r3, [r0, #4]
 801fa2a:	f7ff ffd5 	bl	801f9d8 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801fa2e:	4620      	mov	r0, r4
 801fa30:	bd10      	pop	{r4, pc}

0801fa32 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_list>:
 801fa32:	6082      	str	r2, [r0, #8]
 801fa34:	6001      	str	r1, [r0, #0]
 801fa36:	f7ff bfcf 	b.w	801f9d8 <_ZN8touchgfx12TextProvider18initializeInternalEv>

0801fa3a <_ZN8touchgfx7Unicode6strlenEPKt>:
 801fa3a:	4602      	mov	r2, r0
 801fa3c:	b148      	cbz	r0, 801fa52 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 801fa3e:	2300      	movs	r3, #0
 801fa40:	b298      	uxth	r0, r3
 801fa42:	3301      	adds	r3, #1
 801fa44:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 801fa48:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 801fa4c:	2900      	cmp	r1, #0
 801fa4e:	d1f7      	bne.n	801fa40 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 801fa50:	4770      	bx	lr
 801fa52:	4770      	bx	lr

0801fa54 <_ZN8touchgfx7Unicode6strlenEPKc>:
 801fa54:	b140      	cbz	r0, 801fa68 <_ZN8touchgfx7Unicode6strlenEPKc+0x14>
 801fa56:	4602      	mov	r2, r0
 801fa58:	1a13      	subs	r3, r2, r0
 801fa5a:	f812 1b01 	ldrb.w	r1, [r2], #1
 801fa5e:	b29b      	uxth	r3, r3
 801fa60:	2900      	cmp	r1, #0
 801fa62:	d1f9      	bne.n	801fa58 <_ZN8touchgfx7Unicode6strlenEPKc+0x4>
 801fa64:	4618      	mov	r0, r3
 801fa66:	4770      	bx	lr
 801fa68:	4603      	mov	r3, r0
 801fa6a:	e7fb      	b.n	801fa64 <_ZN8touchgfx7Unicode6strlenEPKc+0x10>

0801fa6c <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 801fa6c:	b530      	push	{r4, r5, lr}
 801fa6e:	b169      	cbz	r1, 801fa8c <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x20>
 801fa70:	b168      	cbz	r0, 801fa8e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x22>
 801fa72:	1e85      	subs	r5, r0, #2
 801fa74:	460b      	mov	r3, r1
 801fa76:	1a58      	subs	r0, r3, r1
 801fa78:	b280      	uxth	r0, r0
 801fa7a:	4290      	cmp	r0, r2
 801fa7c:	da07      	bge.n	801fa8e <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x22>
 801fa7e:	f813 4b01 	ldrb.w	r4, [r3], #1
 801fa82:	f825 4f02 	strh.w	r4, [r5, #2]!
 801fa86:	2c00      	cmp	r4, #0
 801fa88:	d1f5      	bne.n	801fa76 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 801fa8a:	bd30      	pop	{r4, r5, pc}
 801fa8c:	4608      	mov	r0, r1
 801fa8e:	bd30      	pop	{r4, r5, pc}

0801fa90 <_ZN8touchgfx7Unicode4utoaEmPtti.part.0>:
 801fa90:	b5f0      	push	{r4, r5, r6, r7, lr}
 801fa92:	460f      	mov	r7, r1
 801fa94:	b08b      	sub	sp, #44	; 0x2c
 801fa96:	2100      	movs	r1, #0
 801fa98:	ad01      	add	r5, sp, #4
 801fa9a:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801fa9e:	211f      	movs	r1, #31
 801faa0:	fbb0 f6f3 	udiv	r6, r0, r3
 801faa4:	fb03 0416 	mls	r4, r3, r6, r0
 801faa8:	4630      	mov	r0, r6
 801faaa:	2c09      	cmp	r4, #9
 801faac:	bfd4      	ite	le
 801faae:	3430      	addle	r4, #48	; 0x30
 801fab0:	3457      	addgt	r4, #87	; 0x57
 801fab2:	b2e4      	uxtb	r4, r4
 801fab4:	554c      	strb	r4, [r1, r5]
 801fab6:	1e4c      	subs	r4, r1, #1
 801fab8:	b92e      	cbnz	r6, 801fac6 <_ZN8touchgfx7Unicode4utoaEmPtti.part.0+0x36>
 801faba:	4429      	add	r1, r5
 801fabc:	4638      	mov	r0, r7
 801fabe:	f7ff ffd5 	bl	801fa6c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801fac2:	b00b      	add	sp, #44	; 0x2c
 801fac4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fac6:	4621      	mov	r1, r4
 801fac8:	e7ea      	b.n	801faa0 <_ZN8touchgfx7Unicode4utoaEmPtti.part.0+0x10>

0801faca <_ZN8touchgfx7Unicode4itoaElPtti>:
 801faca:	b5f0      	push	{r4, r5, r6, r7, lr}
 801facc:	4606      	mov	r6, r0
 801face:	b08b      	sub	sp, #44	; 0x2c
 801fad0:	4608      	mov	r0, r1
 801fad2:	b341      	cbz	r1, 801fb26 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801fad4:	1e99      	subs	r1, r3, #2
 801fad6:	290e      	cmp	r1, #14
 801fad8:	d825      	bhi.n	801fb26 <_ZN8touchgfx7Unicode4itoaElPtti+0x5c>
 801fada:	2100      	movs	r1, #0
 801fadc:	4634      	mov	r4, r6
 801fade:	251f      	movs	r5, #31
 801fae0:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 801fae4:	1e69      	subs	r1, r5, #1
 801fae6:	f10d 0e04 	add.w	lr, sp, #4
 801faea:	fb94 f7f3 	sdiv	r7, r4, r3
 801faee:	fb03 4417 	mls	r4, r3, r7, r4
 801faf2:	448e      	add	lr, r1
 801faf4:	2c00      	cmp	r4, #0
 801faf6:	bfb8      	it	lt
 801faf8:	4264      	neglt	r4, r4
 801fafa:	2c09      	cmp	r4, #9
 801fafc:	bfd4      	ite	le
 801fafe:	3430      	addle	r4, #48	; 0x30
 801fb00:	3457      	addgt	r4, #87	; 0x57
 801fb02:	b2e4      	uxtb	r4, r4
 801fb04:	f88e 4001 	strb.w	r4, [lr, #1]
 801fb08:	463c      	mov	r4, r7
 801fb0a:	b977      	cbnz	r7, 801fb2a <_ZN8touchgfx7Unicode4itoaElPtti+0x60>
 801fb0c:	2e00      	cmp	r6, #0
 801fb0e:	da05      	bge.n	801fb1c <_ZN8touchgfx7Unicode4itoaElPtti+0x52>
 801fb10:	ab0a      	add	r3, sp, #40	; 0x28
 801fb12:	4419      	add	r1, r3
 801fb14:	232d      	movs	r3, #45	; 0x2d
 801fb16:	f801 3c24 	strb.w	r3, [r1, #-36]
 801fb1a:	1ea9      	subs	r1, r5, #2
 801fb1c:	3101      	adds	r1, #1
 801fb1e:	ab01      	add	r3, sp, #4
 801fb20:	4419      	add	r1, r3
 801fb22:	f7ff ffa3 	bl	801fa6c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 801fb26:	b00b      	add	sp, #44	; 0x2c
 801fb28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801fb2a:	460d      	mov	r5, r1
 801fb2c:	e7da      	b.n	801fae4 <_ZN8touchgfx7Unicode4itoaElPtti+0x1a>

0801fb2e <_ZN8touchgfx7Unicode4atoiEPKt>:
 801fb2e:	b510      	push	{r4, lr}
 801fb30:	b158      	cbz	r0, 801fb4a <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801fb32:	1e82      	subs	r2, r0, #2
 801fb34:	210a      	movs	r1, #10
 801fb36:	2000      	movs	r0, #0
 801fb38:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801fb3c:	3b30      	subs	r3, #48	; 0x30
 801fb3e:	b29c      	uxth	r4, r3
 801fb40:	2c09      	cmp	r4, #9
 801fb42:	d802      	bhi.n	801fb4a <_ZN8touchgfx7Unicode4atoiEPKt+0x1c>
 801fb44:	fb01 3000 	mla	r0, r1, r0, r3
 801fb48:	e7f6      	b.n	801fb38 <_ZN8touchgfx7Unicode4atoiEPKt+0xa>
 801fb4a:	bd10      	pop	{r4, pc}

0801fb4c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>:
 801fb4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fb50:	b085      	sub	sp, #20
 801fb52:	f8d0 8000 	ldr.w	r8, [r0]
 801fb56:	468a      	mov	sl, r1
 801fb58:	461c      	mov	r4, r3
 801fb5a:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
 801fb5e:	4681      	mov	r9, r0
 801fb60:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 801fb64:	4640      	mov	r0, r8
 801fb66:	9203      	str	r2, [sp, #12]
 801fb68:	9301      	str	r3, [sp, #4]
 801fb6a:	9102      	str	r1, [sp, #8]
 801fb6c:	f7ff ff65 	bl	801fa3a <_ZN8touchgfx7Unicode6strlenEPKt>
 801fb70:	9a03      	ldr	r2, [sp, #12]
 801fb72:	f1ba 0f00 	cmp.w	sl, #0
 801fb76:	bf0c      	ite	eq
 801fb78:	4603      	moveq	r3, r0
 801fb7a:	1c43      	addne	r3, r0, #1
 801fb7c:	f89d b038 	ldrb.w	fp, [sp, #56]	; 0x38
 801fb80:	8812      	ldrh	r2, [r2, #0]
 801fb82:	b29b      	uxth	r3, r3
 801fb84:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
 801fb86:	2a69      	cmp	r2, #105	; 0x69
 801fb88:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 801fb8a:	9f15      	ldr	r7, [sp, #84]	; 0x54
 801fb8c:	9902      	ldr	r1, [sp, #8]
 801fb8e:	d004      	beq.n	801fb9a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4e>
 801fb90:	d852      	bhi.n	801fc38 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xec>
 801fb92:	2a58      	cmp	r2, #88	; 0x58
 801fb94:	d001      	beq.n	801fb9a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4e>
 801fb96:	2a64      	cmp	r2, #100	; 0x64
 801fb98:	d159      	bne.n	801fc4e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x102>
 801fb9a:	b19c      	cbz	r4, 801fbc4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x78>
 801fb9c:	b956      	cbnz	r6, 801fbb4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x68>
 801fb9e:	2801      	cmp	r0, #1
 801fba0:	d108      	bne.n	801fbb4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x68>
 801fba2:	f8b8 2000 	ldrh.w	r2, [r8]
 801fba6:	2a30      	cmp	r2, #48	; 0x30
 801fba8:	bf02      	ittt	eq
 801fbaa:	f108 0202 	addeq.w	r2, r8, #2
 801fbae:	4630      	moveq	r0, r6
 801fbb0:	f8c9 2000 	streq.w	r2, [r9]
 801fbb4:	429e      	cmp	r6, r3
 801fbb6:	dd4c      	ble.n	801fc52 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x106>
 801fbb8:	b2b6      	uxth	r6, r6
 801fbba:	1af4      	subs	r4, r6, r3
 801fbbc:	4633      	mov	r3, r6
 801fbbe:	b2a4      	uxth	r4, r4
 801fbc0:	f04f 0b00 	mov.w	fp, #0
 801fbc4:	f8bd 6050 	ldrh.w	r6, [sp, #80]	; 0x50
 801fbc8:	9a01      	ldr	r2, [sp, #4]
 801fbca:	3e01      	subs	r6, #1
 801fbcc:	b162      	cbz	r2, 801fbe8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9c>
 801fbce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 801fbd0:	4293      	cmp	r3, r2
 801fbd2:	da09      	bge.n	801fbe8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9c>
 801fbd4:	1ad2      	subs	r2, r2, r3
 801fbd6:	b292      	uxth	r2, r2
 801fbd8:	b939      	cbnz	r1, 801fbea <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9e>
 801fbda:	f1bb 0f00 	cmp.w	fp, #0
 801fbde:	d050      	beq.n	801fc82 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x136>
 801fbe0:	2800      	cmp	r0, #0
 801fbe2:	d04e      	beq.n	801fc82 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x136>
 801fbe4:	4414      	add	r4, r2
 801fbe6:	b2a4      	uxth	r4, r4
 801fbe8:	2200      	movs	r2, #0
 801fbea:	682b      	ldr	r3, [r5, #0]
 801fbec:	42b3      	cmp	r3, r6
 801fbee:	da07      	bge.n	801fc00 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xb4>
 801fbf0:	f1ba 0f00 	cmp.w	sl, #0
 801fbf4:	d004      	beq.n	801fc00 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xb4>
 801fbf6:	f827 a013 	strh.w	sl, [r7, r3, lsl #1]
 801fbfa:	682b      	ldr	r3, [r5, #0]
 801fbfc:	3301      	adds	r3, #1
 801fbfe:	602b      	str	r3, [r5, #0]
 801fc00:	f04f 0e30 	mov.w	lr, #48	; 0x30
 801fc04:	b124      	cbz	r4, 801fc10 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xc4>
 801fc06:	6829      	ldr	r1, [r5, #0]
 801fc08:	3c01      	subs	r4, #1
 801fc0a:	428e      	cmp	r6, r1
 801fc0c:	b2a4      	uxth	r4, r4
 801fc0e:	dc22      	bgt.n	801fc56 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x10a>
 801fc10:	b140      	cbz	r0, 801fc24 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd8>
 801fc12:	f8d9 3000 	ldr.w	r3, [r9]
 801fc16:	8819      	ldrh	r1, [r3, #0]
 801fc18:	b121      	cbz	r1, 801fc24 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xd8>
 801fc1a:	6829      	ldr	r1, [r5, #0]
 801fc1c:	3801      	subs	r0, #1
 801fc1e:	428e      	cmp	r6, r1
 801fc20:	b280      	uxth	r0, r0
 801fc22:	dc1e      	bgt.n	801fc62 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x116>
 801fc24:	2020      	movs	r0, #32
 801fc26:	b122      	cbz	r2, 801fc32 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xe6>
 801fc28:	6829      	ldr	r1, [r5, #0]
 801fc2a:	3a01      	subs	r2, #1
 801fc2c:	428e      	cmp	r6, r1
 801fc2e:	b292      	uxth	r2, r2
 801fc30:	dc21      	bgt.n	801fc76 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x12a>
 801fc32:	b005      	add	sp, #20
 801fc34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fc38:	2a73      	cmp	r2, #115	; 0x73
 801fc3a:	d003      	beq.n	801fc44 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xf8>
 801fc3c:	2a78      	cmp	r2, #120	; 0x78
 801fc3e:	d0ac      	beq.n	801fb9a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4e>
 801fc40:	2a6f      	cmp	r2, #111	; 0x6f
 801fc42:	e7a9      	b.n	801fb98 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x4c>
 801fc44:	2c00      	cmp	r4, #0
 801fc46:	d0bd      	beq.n	801fbc4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x78>
 801fc48:	4286      	cmp	r6, r0
 801fc4a:	da00      	bge.n	801fc4e <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x102>
 801fc4c:	b2b0      	uxth	r0, r6
 801fc4e:	2400      	movs	r4, #0
 801fc50:	e7b8      	b.n	801fbc4 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x78>
 801fc52:	2400      	movs	r4, #0
 801fc54:	e7b4      	b.n	801fbc0 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x74>
 801fc56:	f827 e011 	strh.w	lr, [r7, r1, lsl #1]
 801fc5a:	682b      	ldr	r3, [r5, #0]
 801fc5c:	3301      	adds	r3, #1
 801fc5e:	602b      	str	r3, [r5, #0]
 801fc60:	e7d0      	b.n	801fc04 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xb8>
 801fc62:	1c9c      	adds	r4, r3, #2
 801fc64:	f8c9 4000 	str.w	r4, [r9]
 801fc68:	881b      	ldrh	r3, [r3, #0]
 801fc6a:	f827 3011 	strh.w	r3, [r7, r1, lsl #1]
 801fc6e:	682b      	ldr	r3, [r5, #0]
 801fc70:	3301      	adds	r3, #1
 801fc72:	602b      	str	r3, [r5, #0]
 801fc74:	e7cc      	b.n	801fc10 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xc4>
 801fc76:	f827 0011 	strh.w	r0, [r7, r1, lsl #1]
 801fc7a:	682b      	ldr	r3, [r5, #0]
 801fc7c:	3301      	adds	r3, #1
 801fc7e:	602b      	str	r3, [r5, #0]
 801fc80:	e7d1      	b.n	801fc26 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0xda>
 801fc82:	2a00      	cmp	r2, #0
 801fc84:	d0b1      	beq.n	801fbea <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9e>
 801fc86:	f04f 0e20 	mov.w	lr, #32
 801fc8a:	6829      	ldr	r1, [r5, #0]
 801fc8c:	3a01      	subs	r2, #1
 801fc8e:	42b1      	cmp	r1, r6
 801fc90:	b292      	uxth	r2, r2
 801fc92:	daa9      	bge.n	801fbe8 <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9c>
 801fc94:	f827 e011 	strh.w	lr, [r7, r1, lsl #1]
 801fc98:	682b      	ldr	r3, [r5, #0]
 801fc9a:	3301      	adds	r3, #1
 801fc9c:	602b      	str	r3, [r5, #0]
 801fc9e:	2a00      	cmp	r2, #0
 801fca0:	d1f3      	bne.n	801fc8a <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x13e>
 801fca2:	e7a2      	b.n	801fbea <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt+0x9e>

0801fca4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>:
 801fca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801fca8:	f8dd e018 	ldr.w	lr, [sp, #24]
 801fcac:	4604      	mov	r4, r0
 801fcae:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801fcb2:	2000      	movs	r0, #0
 801fcb4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 801fcb6:	f04f 0801 	mov.w	r8, #1
 801fcba:	9f08      	ldr	r7, [sp, #32]
 801fcbc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 801fcbe:	8008      	strh	r0, [r1, #0]
 801fcc0:	7010      	strb	r0, [r2, #0]
 801fcc2:	7018      	strb	r0, [r3, #0]
 801fcc4:	f88e 0000 	strb.w	r0, [lr]
 801fcc8:	f88c 0000 	strb.w	r0, [ip]
 801fccc:	7030      	strb	r0, [r6, #0]
 801fcce:	6820      	ldr	r0, [r4, #0]
 801fcd0:	8800      	ldrh	r0, [r0, #0]
 801fcd2:	b190      	cbz	r0, 801fcfa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x56>
 801fcd4:	282b      	cmp	r0, #43	; 0x2b
 801fcd6:	d001      	beq.n	801fcdc <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x38>
 801fcd8:	2820      	cmp	r0, #32
 801fcda:	d104      	bne.n	801fce6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x42>
 801fcdc:	8008      	strh	r0, [r1, #0]
 801fcde:	6820      	ldr	r0, [r4, #0]
 801fce0:	3002      	adds	r0, #2
 801fce2:	6020      	str	r0, [r4, #0]
 801fce4:	e7f3      	b.n	801fcce <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x2a>
 801fce6:	282d      	cmp	r0, #45	; 0x2d
 801fce8:	d102      	bne.n	801fcf0 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x4c>
 801fcea:	f882 8000 	strb.w	r8, [r2]
 801fcee:	e7f6      	b.n	801fcde <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3a>
 801fcf0:	2823      	cmp	r0, #35	; 0x23
 801fcf2:	d102      	bne.n	801fcfa <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x56>
 801fcf4:	f883 8000 	strb.w	r8, [r3]
 801fcf8:	e7f1      	b.n	801fcde <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x3a>
 801fcfa:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 801fcfe:	2b09      	cmp	r3, #9
 801fd00:	d901      	bls.n	801fd06 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x62>
 801fd02:	282a      	cmp	r0, #42	; 0x2a
 801fd04:	d114      	bne.n	801fd30 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x8c>
 801fd06:	2201      	movs	r2, #1
 801fd08:	f88c 2000 	strb.w	r2, [ip]
 801fd0c:	6823      	ldr	r3, [r4, #0]
 801fd0e:	8819      	ldrh	r1, [r3, #0]
 801fd10:	2930      	cmp	r1, #48	; 0x30
 801fd12:	bf02      	ittt	eq
 801fd14:	3302      	addeq	r3, #2
 801fd16:	6023      	streq	r3, [r4, #0]
 801fd18:	f88e 2000 	strbeq.w	r2, [lr]
 801fd1c:	6820      	ldr	r0, [r4, #0]
 801fd1e:	8803      	ldrh	r3, [r0, #0]
 801fd20:	2b2a      	cmp	r3, #42	; 0x2a
 801fd22:	d11e      	bne.n	801fd62 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xbe>
 801fd24:	f04f 33ff 	mov.w	r3, #4294967295
 801fd28:	603b      	str	r3, [r7, #0]
 801fd2a:	6823      	ldr	r3, [r4, #0]
 801fd2c:	3302      	adds	r3, #2
 801fd2e:	6023      	str	r3, [r4, #0]
 801fd30:	6823      	ldr	r3, [r4, #0]
 801fd32:	881b      	ldrh	r3, [r3, #0]
 801fd34:	2b2e      	cmp	r3, #46	; 0x2e
 801fd36:	d112      	bne.n	801fd5e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xba>
 801fd38:	2301      	movs	r3, #1
 801fd3a:	7033      	strb	r3, [r6, #0]
 801fd3c:	6823      	ldr	r3, [r4, #0]
 801fd3e:	1c98      	adds	r0, r3, #2
 801fd40:	6020      	str	r0, [r4, #0]
 801fd42:	885b      	ldrh	r3, [r3, #2]
 801fd44:	2b2a      	cmp	r3, #42	; 0x2a
 801fd46:	d118      	bne.n	801fd7a <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xd6>
 801fd48:	f04f 33ff 	mov.w	r3, #4294967295
 801fd4c:	602b      	str	r3, [r5, #0]
 801fd4e:	6823      	ldr	r3, [r4, #0]
 801fd50:	3302      	adds	r3, #2
 801fd52:	6023      	str	r3, [r4, #0]
 801fd54:	682b      	ldr	r3, [r5, #0]
 801fd56:	2b06      	cmp	r3, #6
 801fd58:	bfa8      	it	ge
 801fd5a:	2306      	movge	r3, #6
 801fd5c:	602b      	str	r3, [r5, #0]
 801fd5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fd62:	f7ff fee4 	bl	801fb2e <_ZN8touchgfx7Unicode4atoiEPKt>
 801fd66:	6038      	str	r0, [r7, #0]
 801fd68:	6822      	ldr	r2, [r4, #0]
 801fd6a:	8813      	ldrh	r3, [r2, #0]
 801fd6c:	3b30      	subs	r3, #48	; 0x30
 801fd6e:	b29b      	uxth	r3, r3
 801fd70:	2b09      	cmp	r3, #9
 801fd72:	d8dd      	bhi.n	801fd30 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0x8c>
 801fd74:	3202      	adds	r2, #2
 801fd76:	6022      	str	r2, [r4, #0]
 801fd78:	e7f6      	b.n	801fd68 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xc4>
 801fd7a:	f7ff fed8 	bl	801fb2e <_ZN8touchgfx7Unicode4atoiEPKt>
 801fd7e:	6028      	str	r0, [r5, #0]
 801fd80:	6822      	ldr	r2, [r4, #0]
 801fd82:	8813      	ldrh	r3, [r2, #0]
 801fd84:	3b30      	subs	r3, #48	; 0x30
 801fd86:	b29b      	uxth	r3, r3
 801fd88:	2b09      	cmp	r3, #9
 801fd8a:	d8e3      	bhi.n	801fd54 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xb0>
 801fd8c:	3202      	adds	r2, #2
 801fd8e:	6022      	str	r2, [r4, #0]
 801fd90:	e7f6      	b.n	801fd80 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_+0xdc>
	...

0801fd94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>:
 801fd94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fd98:	b0a3      	sub	sp, #140	; 0x8c
 801fd9a:	2500      	movs	r5, #0
 801fd9c:	4606      	mov	r6, r0
 801fd9e:	4689      	mov	r9, r1
 801fda0:	af11      	add	r7, sp, #68	; 0x44
 801fda2:	9209      	str	r2, [sp, #36]	; 0x24
 801fda4:	4629      	mov	r1, r5
 801fda6:	2242      	movs	r2, #66	; 0x42
 801fda8:	4638      	mov	r0, r7
 801fdaa:	461c      	mov	r4, r3
 801fdac:	950d      	str	r5, [sp, #52]	; 0x34
 801fdae:	f7ff f9d8 	bl	801f162 <_ZN8touchgfx6memsetEPvhm>
 801fdb2:	b116      	cbz	r6, 801fdba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26>
 801fdb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 801fdb6:	b921      	cbnz	r1, 801fdc2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x2e>
 801fdb8:	8031      	strh	r1, [r6, #0]
 801fdba:	4630      	mov	r0, r6
 801fdbc:	b023      	add	sp, #140	; 0x8c
 801fdbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801fdc2:	f8df a250 	ldr.w	sl, [pc, #592]	; 8020014 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x280>
 801fdc6:	f109 3bff 	add.w	fp, r9, #4294967295
 801fdca:	f8da 0000 	ldr.w	r0, [sl]
 801fdce:	6803      	ldr	r3, [r0, #0]
 801fdd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fdd2:	4798      	blx	r3
 801fdd4:	9009      	str	r0, [sp, #36]	; 0x24
 801fdd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fdd8:	881a      	ldrh	r2, [r3, #0]
 801fdda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fddc:	2a00      	cmp	r2, #0
 801fdde:	f000 80c2 	beq.w	801ff66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1d2>
 801fde2:	459b      	cmp	fp, r3
 801fde4:	f340 80bf 	ble.w	801ff66 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1d2>
 801fde8:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
 801fdec:	f8b8 2000 	ldrh.w	r2, [r8]
 801fdf0:	2a00      	cmp	r2, #0
 801fdf2:	d0f0      	beq.n	801fdd6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x42>
 801fdf4:	2a25      	cmp	r2, #37	; 0x25
 801fdf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801fdf8:	f000 80b9 	beq.w	801ff6e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1da>
 801fdfc:	459b      	cmp	fp, r3
 801fdfe:	f340 80b6 	ble.w	801ff6e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1da>
 801fe02:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801fe06:	f108 0202 	add.w	r2, r8, #2
 801fe0a:	3301      	adds	r3, #1
 801fe0c:	9209      	str	r2, [sp, #36]	; 0x24
 801fe0e:	930d      	str	r3, [sp, #52]	; 0x34
 801fe10:	e7ea      	b.n	801fde8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x54>
 801fe12:	3b63      	subs	r3, #99	; 0x63
 801fe14:	2b01      	cmp	r3, #1
 801fe16:	f200 80f2 	bhi.w	801fffe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26a>
 801fe1a:	9710      	str	r7, [sp, #64]	; 0x40
 801fe1c:	8813      	ldrh	r3, [r2, #0]
 801fe1e:	2b69      	cmp	r3, #105	; 0x69
 801fe20:	d068      	beq.n	801fef4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x160>
 801fe22:	d81c      	bhi.n	801fe5e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xca>
 801fe24:	2b63      	cmp	r3, #99	; 0x63
 801fe26:	d031      	beq.n	801fe8c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xf8>
 801fe28:	2b64      	cmp	r3, #100	; 0x64
 801fe2a:	d063      	beq.n	801fef4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x160>
 801fe2c:	2b58      	cmp	r3, #88	; 0x58
 801fe2e:	f000 8082 	beq.w	801ff36 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1a2>
 801fe32:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 801fe36:	46a0      	mov	r8, r4
 801fe38:	e02f      	b.n	801fe9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801fe3a:	2b73      	cmp	r3, #115	; 0x73
 801fe3c:	d0ed      	beq.n	801fe1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 801fe3e:	d803      	bhi.n	801fe48 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xb4>
 801fe40:	2b6f      	cmp	r3, #111	; 0x6f
 801fe42:	f040 80dc 	bne.w	801fffe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26a>
 801fe46:	e7e8      	b.n	801fe1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 801fe48:	2b75      	cmp	r3, #117	; 0x75
 801fe4a:	d0e6      	beq.n	801fe1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 801fe4c:	2b78      	cmp	r3, #120	; 0x78
 801fe4e:	e7f8      	b.n	801fe42 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xae>
 801fe50:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fe52:	f826 3012 	strh.w	r3, [r6, r2, lsl #1]
 801fe56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801fe58:	3302      	adds	r3, #2
 801fe5a:	9309      	str	r3, [sp, #36]	; 0x24
 801fe5c:	e7bb      	b.n	801fdd6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x42>
 801fe5e:	2b73      	cmp	r3, #115	; 0x73
 801fe60:	d037      	beq.n	801fed2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x13e>
 801fe62:	d808      	bhi.n	801fe76 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xe2>
 801fe64:	2b6f      	cmp	r3, #111	; 0x6f
 801fe66:	d1e4      	bne.n	801fe32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801fe68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fe6a:	f104 0804 	add.w	r8, r4, #4
 801fe6e:	2308      	movs	r3, #8
 801fe70:	eba9 0202 	sub.w	r2, r9, r2
 801fe74:	e059      	b.n	801ff2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x196>
 801fe76:	2b75      	cmp	r3, #117	; 0x75
 801fe78:	d051      	beq.n	801ff1e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x18a>
 801fe7a:	2b78      	cmp	r3, #120	; 0x78
 801fe7c:	d1d9      	bne.n	801fe32 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x9e>
 801fe7e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fe80:	f104 0804 	add.w	r8, r4, #4
 801fe84:	2310      	movs	r3, #16
 801fe86:	eba9 0202 	sub.w	r2, r9, r2
 801fe8a:	e04e      	b.n	801ff2a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x196>
 801fe8c:	7823      	ldrb	r3, [r4, #0]
 801fe8e:	f104 0804 	add.w	r8, r4, #4
 801fe92:	f8ad 5046 	strh.w	r5, [sp, #70]	; 0x46
 801fe96:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 801fe9a:	aa0d      	add	r2, sp, #52	; 0x34
 801fe9c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 801fea0:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 801fea4:	a810      	add	r0, sp, #64	; 0x40
 801fea6:	9205      	str	r2, [sp, #20]
 801fea8:	4644      	mov	r4, r8
 801feaa:	f89d 202d 	ldrb.w	r2, [sp, #45]	; 0x2d
 801feae:	9607      	str	r6, [sp, #28]
 801feb0:	9204      	str	r2, [sp, #16]
 801feb2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801feb4:	f8cd 9018 	str.w	r9, [sp, #24]
 801feb8:	9203      	str	r2, [sp, #12]
 801feba:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 801febe:	9202      	str	r2, [sp, #8]
 801fec0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801fec2:	9201      	str	r2, [sp, #4]
 801fec4:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
 801fec8:	9200      	str	r2, [sp, #0]
 801feca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801fecc:	f7ff fe3e 	bl	801fb4c <_ZN8touchgfx7Unicode13composeStringERPKttS2_bbibibRitPt>
 801fed0:	e7c1      	b.n	801fe56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xc2>
 801fed2:	f8da 0000 	ldr.w	r0, [sl]
 801fed6:	f104 0804 	add.w	r8, r4, #4
 801feda:	6821      	ldr	r1, [r4, #0]
 801fedc:	6803      	ldr	r3, [r0, #0]
 801fede:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801fee0:	4798      	blx	r3
 801fee2:	9010      	str	r0, [sp, #64]	; 0x40
 801fee4:	f8da 0000 	ldr.w	r0, [sl]
 801fee8:	9909      	ldr	r1, [sp, #36]	; 0x24
 801feea:	6803      	ldr	r3, [r0, #0]
 801feec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801feee:	4798      	blx	r3
 801fef0:	9009      	str	r0, [sp, #36]	; 0x24
 801fef2:	e7d2      	b.n	801fe9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801fef4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801fef6:	230a      	movs	r3, #10
 801fef8:	4639      	mov	r1, r7
 801fefa:	6820      	ldr	r0, [r4, #0]
 801fefc:	eba9 0202 	sub.w	r2, r9, r2
 801ff00:	f104 0804 	add.w	r8, r4, #4
 801ff04:	b292      	uxth	r2, r2
 801ff06:	f7ff fde0 	bl	801faca <_ZN8touchgfx7Unicode4itoaElPtti>
 801ff0a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
 801ff0e:	2b2d      	cmp	r3, #45	; 0x2d
 801ff10:	d1c3      	bne.n	801fe9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801ff12:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 801ff16:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801ff18:	3302      	adds	r3, #2
 801ff1a:	9310      	str	r3, [sp, #64]	; 0x40
 801ff1c:	e7bd      	b.n	801fe9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801ff1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ff20:	f104 0804 	add.w	r8, r4, #4
 801ff24:	230a      	movs	r3, #10
 801ff26:	eba9 0202 	sub.w	r2, r9, r2
 801ff2a:	b292      	uxth	r2, r2
 801ff2c:	4639      	mov	r1, r7
 801ff2e:	6820      	ldr	r0, [r4, #0]
 801ff30:	f7ff fdae 	bl	801fa90 <_ZN8touchgfx7Unicode4utoaEmPtti.part.0>
 801ff34:	e7b1      	b.n	801fe9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801ff36:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801ff38:	2310      	movs	r3, #16
 801ff3a:	4639      	mov	r1, r7
 801ff3c:	6820      	ldr	r0, [r4, #0]
 801ff3e:	eba9 0202 	sub.w	r2, r9, r2
 801ff42:	f104 0804 	add.w	r8, r4, #4
 801ff46:	b292      	uxth	r2, r2
 801ff48:	f7ff fda2 	bl	801fa90 <_ZN8touchgfx7Unicode4utoaEmPtti.part.0>
 801ff4c:	463a      	mov	r2, r7
 801ff4e:	8813      	ldrh	r3, [r2, #0]
 801ff50:	2b00      	cmp	r3, #0
 801ff52:	d0a2      	beq.n	801fe9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x106>
 801ff54:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
 801ff58:	3202      	adds	r2, #2
 801ff5a:	2919      	cmp	r1, #25
 801ff5c:	bf9c      	itt	ls
 801ff5e:	3b20      	subls	r3, #32
 801ff60:	f822 3c02 	strhls.w	r3, [r2, #-2]
 801ff64:	e7f3      	b.n	801ff4e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x1ba>
 801ff66:	2200      	movs	r2, #0
 801ff68:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 801ff6c:	e725      	b.n	801fdba <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x26>
 801ff6e:	459b      	cmp	fp, r3
 801ff70:	f77f af31 	ble.w	801fdd6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x42>
 801ff74:	f108 0302 	add.w	r3, r8, #2
 801ff78:	f10d 022d 	add.w	r2, sp, #45	; 0x2d
 801ff7c:	f10d 0132 	add.w	r1, sp, #50	; 0x32
 801ff80:	a809      	add	r0, sp, #36	; 0x24
 801ff82:	9309      	str	r3, [sp, #36]	; 0x24
 801ff84:	ab0f      	add	r3, sp, #60	; 0x3c
 801ff86:	f8ad 5032 	strh.w	r5, [sp, #50]	; 0x32
 801ff8a:	9304      	str	r3, [sp, #16]
 801ff8c:	f10d 0331 	add.w	r3, sp, #49	; 0x31
 801ff90:	f88d 502d 	strb.w	r5, [sp, #45]	; 0x2d
 801ff94:	9303      	str	r3, [sp, #12]
 801ff96:	ab0e      	add	r3, sp, #56	; 0x38
 801ff98:	f88d 502e 	strb.w	r5, [sp, #46]	; 0x2e
 801ff9c:	9302      	str	r3, [sp, #8]
 801ff9e:	ab0c      	add	r3, sp, #48	; 0x30
 801ffa0:	f88d 502f 	strb.w	r5, [sp, #47]	; 0x2f
 801ffa4:	9301      	str	r3, [sp, #4]
 801ffa6:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 801ffaa:	f88d 5030 	strb.w	r5, [sp, #48]	; 0x30
 801ffae:	9300      	str	r3, [sp, #0]
 801ffb0:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 801ffb4:	950e      	str	r5, [sp, #56]	; 0x38
 801ffb6:	f88d 5031 	strb.w	r5, [sp, #49]	; 0x31
 801ffba:	950f      	str	r5, [sp, #60]	; 0x3c
 801ffbc:	f7ff fe72 	bl	801fca4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRtRbS5_S5_S5_RiS5_S6_>
 801ffc0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801ffc2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801ffc4:	2b00      	cmp	r3, #0
 801ffc6:	bfbf      	itttt	lt
 801ffc8:	6823      	ldrlt	r3, [r4, #0]
 801ffca:	3404      	addlt	r4, #4
 801ffcc:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801ffd0:	930e      	strlt	r3, [sp, #56]	; 0x38
 801ffd2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801ffd4:	2b00      	cmp	r3, #0
 801ffd6:	bfbf      	itttt	lt
 801ffd8:	6823      	ldrlt	r3, [r4, #0]
 801ffda:	3404      	addlt	r4, #4
 801ffdc:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801ffe0:	930f      	strlt	r3, [sp, #60]	; 0x3c
 801ffe2:	8813      	ldrh	r3, [r2, #0]
 801ffe4:	2b69      	cmp	r3, #105	; 0x69
 801ffe6:	f43f af18 	beq.w	801fe1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 801ffea:	f63f af26 	bhi.w	801fe3a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xa6>
 801ffee:	2b58      	cmp	r3, #88	; 0x58
 801fff0:	f43f af13 	beq.w	801fe1a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x86>
 801fff4:	f63f af0d 	bhi.w	801fe12 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0x7e>
 801fff8:	2b25      	cmp	r3, #37	; 0x25
 801fffa:	f43f af29 	beq.w	801fe50 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xbc>
 801fffe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8020000:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
 8020004:	f8b8 2000 	ldrh.w	r2, [r8]
 8020008:	f826 2013 	strh.w	r2, [r6, r3, lsl #1]
 802000c:	3301      	adds	r3, #1
 802000e:	930d      	str	r3, [sp, #52]	; 0x34
 8020010:	e721      	b.n	801fe56 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list+0xc2>
 8020012:	bf00      	nop
 8020014:	20009d34 	.word	0x20009d34

08020018 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 8020018:	b5f0      	push	{r4, r5, r6, r7, lr}
 802001a:	4605      	mov	r5, r0
 802001c:	b0a1      	sub	sp, #132	; 0x84
 802001e:	4610      	mov	r0, r2
 8020020:	460e      	mov	r6, r1
 8020022:	4614      	mov	r4, r2
 8020024:	461f      	mov	r7, r3
 8020026:	f7ff fd15 	bl	801fa54 <_ZN8touchgfx7Unicode6strlenEPKc>
 802002a:	283f      	cmp	r0, #63	; 0x3f
 802002c:	dd06      	ble.n	802003c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x24>
 802002e:	4b0a      	ldr	r3, [pc, #40]	; (8020058 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x40>)
 8020030:	f240 11b9 	movw	r1, #441	; 0x1b9
 8020034:	4a09      	ldr	r2, [pc, #36]	; (802005c <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x44>)
 8020036:	480a      	ldr	r0, [pc, #40]	; (8020060 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list+0x48>)
 8020038:	f002 fa10 	bl	802245c <__assert_func>
 802003c:	4621      	mov	r1, r4
 802003e:	2240      	movs	r2, #64	; 0x40
 8020040:	4668      	mov	r0, sp
 8020042:	f7ff fd13 	bl	801fa6c <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8020046:	463b      	mov	r3, r7
 8020048:	466a      	mov	r2, sp
 802004a:	4631      	mov	r1, r6
 802004c:	4628      	mov	r0, r5
 802004e:	f7ff fea1 	bl	801fd94 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtSt9__va_list>
 8020052:	b021      	add	sp, #132	; 0x84
 8020054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020056:	bf00      	nop
 8020058:	08025f04 	.word	0x08025f04
 802005c:	08025f47 	.word	0x08025f47
 8020060:	08025f21 	.word	0x08025f21

08020064 <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 8020064:	b40c      	push	{r2, r3}
 8020066:	b507      	push	{r0, r1, r2, lr}
 8020068:	ab04      	add	r3, sp, #16
 802006a:	f853 2b04 	ldr.w	r2, [r3], #4
 802006e:	9301      	str	r3, [sp, #4]
 8020070:	f7ff ffd2 	bl	8020018 <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 8020074:	b003      	add	sp, #12
 8020076:	f85d eb04 	ldr.w	lr, [sp], #4
 802007a:	b002      	add	sp, #8
 802007c:	4770      	bx	lr
	...

08020080 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh>:
 8020080:	4b26      	ldr	r3, [pc, #152]	; (802011c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x9c>)
 8020082:	b570      	push	{r4, r5, r6, lr}
 8020084:	681b      	ldr	r3, [r3, #0]
 8020086:	4605      	mov	r5, r0
 8020088:	460c      	mov	r4, r1
 802008a:	4616      	mov	r6, r2
 802008c:	b92b      	cbnz	r3, 802009a <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x1a>
 802008e:	4b24      	ldr	r3, [pc, #144]	; (8020120 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa0>)
 8020090:	2116      	movs	r1, #22
 8020092:	4a24      	ldr	r2, [pc, #144]	; (8020124 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa4>)
 8020094:	4824      	ldr	r0, [pc, #144]	; (8020128 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa8>)
 8020096:	f002 f9e1 	bl	802245c <__assert_func>
 802009a:	6898      	ldr	r0, [r3, #8]
 802009c:	6803      	ldr	r3, [r0, #0]
 802009e:	6a1b      	ldr	r3, [r3, #32]
 80200a0:	4798      	blx	r3
 80200a2:	2810      	cmp	r0, #16
 80200a4:	d109      	bne.n	80200ba <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x3a>
 80200a6:	00e0      	lsls	r0, r4, #3
 80200a8:	022c      	lsls	r4, r5, #8
 80200aa:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80200ae:	f404 4478 	and.w	r4, r4, #63488	; 0xf800
 80200b2:	ea40 00d6 	orr.w	r0, r0, r6, lsr #3
 80200b6:	4320      	orrs	r0, r4
 80200b8:	bd70      	pop	{r4, r5, r6, pc}
 80200ba:	2818      	cmp	r0, #24
 80200bc:	d104      	bne.n	80200c8 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x48>
 80200be:	ea46 2004 	orr.w	r0, r6, r4, lsl #8
 80200c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80200c6:	bd70      	pop	{r4, r5, r6, pc}
 80200c8:	2804      	cmp	r0, #4
 80200ca:	f04f 01b6 	mov.w	r1, #182	; 0xb6
 80200ce:	d109      	bne.n	80200e4 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x64>
 80200d0:	fb14 f401 	smulbb	r4, r4, r1
 80200d4:	2036      	movs	r0, #54	; 0x36
 80200d6:	fb10 4405 	smlabb	r4, r0, r5, r4
 80200da:	2013      	movs	r0, #19
 80200dc:	fb10 4006 	smlabb	r0, r0, r6, r4
 80200e0:	1300      	asrs	r0, r0, #12
 80200e2:	bd70      	pop	{r4, r5, r6, pc}
 80200e4:	2802      	cmp	r0, #2
 80200e6:	d109      	bne.n	80200fc <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x7c>
 80200e8:	fb14 f401 	smulbb	r4, r4, r1
 80200ec:	2036      	movs	r0, #54	; 0x36
 80200ee:	fb10 4405 	smlabb	r4, r0, r5, r4
 80200f2:	2013      	movs	r0, #19
 80200f4:	fb10 4006 	smlabb	r0, r0, r6, r4
 80200f8:	1380      	asrs	r0, r0, #14
 80200fa:	bd70      	pop	{r4, r5, r6, pc}
 80200fc:	2801      	cmp	r0, #1
 80200fe:	d109      	bne.n	8020114 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x94>
 8020100:	fb14 f401 	smulbb	r4, r4, r1
 8020104:	2036      	movs	r0, #54	; 0x36
 8020106:	fb10 4405 	smlabb	r4, r0, r5, r4
 802010a:	2013      	movs	r0, #19
 802010c:	fb10 4006 	smlabb	r0, r0, r6, r4
 8020110:	13c0      	asrs	r0, r0, #15
 8020112:	bd70      	pop	{r4, r5, r6, pc}
 8020114:	4b05      	ldr	r3, [pc, #20]	; (802012c <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xac>)
 8020116:	212f      	movs	r1, #47	; 0x2f
 8020118:	4a02      	ldr	r2, [pc, #8]	; (8020124 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0xa4>)
 802011a:	e7bb      	b.n	8020094 <_ZN8touchgfx5Color20getColorFrom24BitRGBEhhh+0x14>
 802011c:	20009d34 	.word	0x20009d34
 8020120:	08025fcc 	.word	0x08025fcc
 8020124:	0802604f 	.word	0x0802604f
 8020128:	0802600f 	.word	0x0802600f
 802012c:	08026033 	.word	0x08026033

08020130 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8020130:	4b01      	ldr	r3, [pc, #4]	; (8020138 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8020132:	6018      	str	r0, [r3, #0]
 8020134:	4770      	bx	lr
 8020136:	bf00      	nop
 8020138:	20009da4 	.word	0x20009da4

0802013c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 802013c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020140:	4f24      	ldr	r7, [pc, #144]	; (80201d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8020142:	683b      	ldr	r3, [r7, #0]
 8020144:	2b00      	cmp	r3, #0
 8020146:	d042      	beq.n	80201ce <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 8020148:	4923      	ldr	r1, [pc, #140]	; (80201d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 802014a:	4d24      	ldr	r5, [pc, #144]	; (80201dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 802014c:	8808      	ldrh	r0, [r1, #0]
 802014e:	882a      	ldrh	r2, [r5, #0]
 8020150:	4e23      	ldr	r6, [pc, #140]	; (80201e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8020152:	4410      	add	r0, r2
 8020154:	ea4f 1e02 	mov.w	lr, r2, lsl #4
 8020158:	4c22      	ldr	r4, [pc, #136]	; (80201e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 802015a:	1c41      	adds	r1, r0, #1
 802015c:	ea4f 0880 	mov.w	r8, r0, lsl #2
 8020160:	f021 0101 	bic.w	r1, r1, #1
 8020164:	eb03 0208 	add.w	r2, r3, r8
 8020168:	0409      	lsls	r1, r1, #16
 802016a:	6032      	str	r2, [r6, #0]
 802016c:	0c09      	lsrs	r1, r1, #16
 802016e:	0049      	lsls	r1, r1, #1
 8020170:	eb08 0c01 	add.w	ip, r8, r1
 8020174:	eb03 020c 	add.w	r2, r3, ip
 8020178:	44f4      	add	ip, lr
 802017a:	6022      	str	r2, [r4, #0]
 802017c:	4463      	add	r3, ip
 802017e:	4a1a      	ldr	r2, [pc, #104]	; (80201e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8020180:	6013      	str	r3, [r2, #0]
 8020182:	2300      	movs	r3, #0
 8020184:	4a19      	ldr	r2, [pc, #100]	; (80201ec <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8020186:	8013      	strh	r3, [r2, #0]
 8020188:	4a19      	ldr	r2, [pc, #100]	; (80201f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 802018a:	6812      	ldr	r2, [r2, #0]
 802018c:	eba2 0208 	sub.w	r2, r2, r8
 8020190:	1a52      	subs	r2, r2, r1
 8020192:	4918      	ldr	r1, [pc, #96]	; (80201f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8020194:	eba2 020e 	sub.w	r2, r2, lr
 8020198:	469e      	mov	lr, r3
 802019a:	600a      	str	r2, [r1, #0]
 802019c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80201a0:	4a15      	ldr	r2, [pc, #84]	; (80201f8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xbc>)
 80201a2:	8013      	strh	r3, [r2, #0]
 80201a4:	4283      	cmp	r3, r0
 80201a6:	d007      	beq.n	80201b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x7c>
 80201a8:	683a      	ldr	r2, [r7, #0]
 80201aa:	f842 e023 	str.w	lr, [r2, r3, lsl #2]
 80201ae:	6832      	ldr	r2, [r6, #0]
 80201b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80201b4:	3301      	adds	r3, #1
 80201b6:	e7f5      	b.n	80201a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x68>
 80201b8:	2300      	movs	r3, #0
 80201ba:	882d      	ldrh	r5, [r5, #0]
 80201bc:	6820      	ldr	r0, [r4, #0]
 80201be:	4619      	mov	r1, r3
 80201c0:	42ab      	cmp	r3, r5
 80201c2:	d204      	bcs.n	80201ce <_ZN8touchgfx6Bitmap10clearCacheEv+0x92>
 80201c4:	eb00 1203 	add.w	r2, r0, r3, lsl #4
 80201c8:	3301      	adds	r3, #1
 80201ca:	7391      	strb	r1, [r2, #14]
 80201cc:	e7f8      	b.n	80201c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x84>
 80201ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80201d2:	bf00      	nop
 80201d4:	20009da8 	.word	0x20009da8
 80201d8:	20009dc4 	.word	0x20009dc4
 80201dc:	20009dc8 	.word	0x20009dc8
 80201e0:	20009dbc 	.word	0x20009dbc
 80201e4:	20009dac 	.word	0x20009dac
 80201e8:	20009db4 	.word	0x20009db4
 80201ec:	20009dc6 	.word	0x20009dc6
 80201f0:	20009db0 	.word	0x20009db0
 80201f4:	20009dc0 	.word	0x20009dc0
 80201f8:	20009db8 	.word	0x20009db8

080201fc <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80201fc:	4b0f      	ldr	r3, [pc, #60]	; (802023c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x40>)
 80201fe:	b510      	push	{r4, lr}
 8020200:	681b      	ldr	r3, [r3, #0]
 8020202:	b9d3      	cbnz	r3, 802023a <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x3e>
 8020204:	b1c9      	cbz	r1, 802023a <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x3e>
 8020206:	4b0e      	ldr	r3, [pc, #56]	; (8020240 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x44>)
 8020208:	2406      	movs	r4, #6
 802020a:	801a      	strh	r2, [r3, #0]
 802020c:	b292      	uxth	r2, r2
 802020e:	4b0d      	ldr	r3, [pc, #52]	; (8020244 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x48>)
 8020210:	881b      	ldrh	r3, [r3, #0]
 8020212:	4413      	add	r3, r2
 8020214:	0112      	lsls	r2, r2, #4
 8020216:	fb04 2203 	mla	r2, r4, r3, r2
 802021a:	4291      	cmp	r1, r2
 802021c:	d805      	bhi.n	802022a <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x2e>
 802021e:	4b0a      	ldr	r3, [pc, #40]	; (8020248 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x4c>)
 8020220:	2138      	movs	r1, #56	; 0x38
 8020222:	4a0a      	ldr	r2, [pc, #40]	; (802024c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x50>)
 8020224:	480a      	ldr	r0, [pc, #40]	; (8020250 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x54>)
 8020226:	f002 f919 	bl	802245c <__assert_func>
 802022a:	4b0a      	ldr	r3, [pc, #40]	; (8020254 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x58>)
 802022c:	6019      	str	r1, [r3, #0]
 802022e:	4b0a      	ldr	r3, [pc, #40]	; (8020258 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x5c>)
 8020230:	6018      	str	r0, [r3, #0]
 8020232:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020236:	f7ff bf81 	b.w	802013c <_ZN8touchgfx6Bitmap10clearCacheEv>
 802023a:	bd10      	pop	{r4, pc}
 802023c:	20009db4 	.word	0x20009db4
 8020240:	20009dc8 	.word	0x20009dc8
 8020244:	20009dc4 	.word	0x20009dc4
 8020248:	0802610f 	.word	0x0802610f
 802024c:	080261a4 	.word	0x080261a4
 8020250:	080260ea 	.word	0x080260ea
 8020254:	20009db0 	.word	0x20009db0
 8020258:	20009da8 	.word	0x20009da8

0802025c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 802025c:	b470      	push	{r4, r5, r6}
 802025e:	4c07      	ldr	r4, [pc, #28]	; (802027c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8020260:	4605      	mov	r5, r0
 8020262:	4610      	mov	r0, r2
 8020264:	9a03      	ldr	r2, [sp, #12]
 8020266:	6826      	ldr	r6, [r4, #0]
 8020268:	b936      	cbnz	r6, 8020278 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 802026a:	6025      	str	r5, [r4, #0]
 802026c:	4c04      	ldr	r4, [pc, #16]	; (8020280 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 802026e:	8021      	strh	r1, [r4, #0]
 8020270:	4619      	mov	r1, r3
 8020272:	bc70      	pop	{r4, r5, r6}
 8020274:	f7ff bfc2 	b.w	80201fc <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8020278:	bc70      	pop	{r4, r5, r6}
 802027a:	4770      	bx	lr
 802027c:	20009dcc 	.word	0x20009dcc
 8020280:	20009dc4 	.word	0x20009dc4

08020284 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8020284:	b508      	push	{r3, lr}
 8020286:	4b13      	ldr	r3, [pc, #76]	; (80202d4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8020288:	6819      	ldr	r1, [r3, #0]
 802028a:	b931      	cbnz	r1, 802029a <_ZNK8touchgfx6Bitmap8getWidthEv+0x16>
 802028c:	4b12      	ldr	r3, [pc, #72]	; (80202d8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 802028e:	f44f 710d 	mov.w	r1, #564	; 0x234
 8020292:	4a12      	ldr	r2, [pc, #72]	; (80202dc <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8020294:	4812      	ldr	r0, [pc, #72]	; (80202e0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8020296:	f002 f8e1 	bl	802245c <__assert_func>
 802029a:	4a12      	ldr	r2, [pc, #72]	; (80202e4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 802029c:	8803      	ldrh	r3, [r0, #0]
 802029e:	8812      	ldrh	r2, [r2, #0]
 80202a0:	4293      	cmp	r3, r2
 80202a2:	da04      	bge.n	80202ae <_ZNK8touchgfx6Bitmap8getWidthEv+0x2a>
 80202a4:	2214      	movs	r2, #20
 80202a6:	fb02 1303 	mla	r3, r2, r3, r1
 80202aa:	8918      	ldrh	r0, [r3, #8]
 80202ac:	bd08      	pop	{r3, pc}
 80202ae:	490e      	ldr	r1, [pc, #56]	; (80202e8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 80202b0:	8809      	ldrh	r1, [r1, #0]
 80202b2:	4411      	add	r1, r2
 80202b4:	428b      	cmp	r3, r1
 80202b6:	da05      	bge.n	80202c4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x40>
 80202b8:	1a9b      	subs	r3, r3, r2
 80202ba:	4a0c      	ldr	r2, [pc, #48]	; (80202ec <_ZNK8touchgfx6Bitmap8getWidthEv+0x68>)
 80202bc:	6812      	ldr	r2, [r2, #0]
 80202be:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80202c2:	e7f2      	b.n	80202aa <_ZNK8touchgfx6Bitmap8getWidthEv+0x26>
 80202c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80202c8:	4293      	cmp	r3, r2
 80202ca:	bf06      	itte	eq
 80202cc:	4b08      	ldreq	r3, [pc, #32]	; (80202f0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x6c>)
 80202ce:	8818      	ldrheq	r0, [r3, #0]
 80202d0:	2000      	movne	r0, #0
 80202d2:	bd08      	pop	{r3, pc}
 80202d4:	20009dcc 	.word	0x20009dcc
 80202d8:	08026168 	.word	0x08026168
 80202dc:	08026251 	.word	0x08026251
 80202e0:	080260ea 	.word	0x080260ea
 80202e4:	20009dc4 	.word	0x20009dc4
 80202e8:	20009dc8 	.word	0x20009dc8
 80202ec:	20009dac 	.word	0x20009dac
 80202f0:	20009d28 	.word	0x20009d28

080202f4 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80202f4:	b508      	push	{r3, lr}
 80202f6:	4b13      	ldr	r3, [pc, #76]	; (8020344 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 80202f8:	6819      	ldr	r1, [r3, #0]
 80202fa:	b931      	cbnz	r1, 802030a <_ZNK8touchgfx6Bitmap9getHeightEv+0x16>
 80202fc:	4b12      	ldr	r3, [pc, #72]	; (8020348 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80202fe:	f44f 7112 	mov.w	r1, #584	; 0x248
 8020302:	4a12      	ldr	r2, [pc, #72]	; (802034c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 8020304:	4812      	ldr	r0, [pc, #72]	; (8020350 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 8020306:	f002 f8a9 	bl	802245c <__assert_func>
 802030a:	4a12      	ldr	r2, [pc, #72]	; (8020354 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 802030c:	8803      	ldrh	r3, [r0, #0]
 802030e:	8812      	ldrh	r2, [r2, #0]
 8020310:	4293      	cmp	r3, r2
 8020312:	da04      	bge.n	802031e <_ZNK8touchgfx6Bitmap9getHeightEv+0x2a>
 8020314:	2214      	movs	r2, #20
 8020316:	fb02 1303 	mla	r3, r2, r3, r1
 802031a:	8958      	ldrh	r0, [r3, #10]
 802031c:	bd08      	pop	{r3, pc}
 802031e:	490e      	ldr	r1, [pc, #56]	; (8020358 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 8020320:	8809      	ldrh	r1, [r1, #0]
 8020322:	4411      	add	r1, r2
 8020324:	428b      	cmp	r3, r1
 8020326:	da05      	bge.n	8020334 <_ZNK8touchgfx6Bitmap9getHeightEv+0x40>
 8020328:	1a9b      	subs	r3, r3, r2
 802032a:	4a0c      	ldr	r2, [pc, #48]	; (802035c <_ZNK8touchgfx6Bitmap9getHeightEv+0x68>)
 802032c:	6812      	ldr	r2, [r2, #0]
 802032e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8020332:	e7f2      	b.n	802031a <_ZNK8touchgfx6Bitmap9getHeightEv+0x26>
 8020334:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8020338:	4293      	cmp	r3, r2
 802033a:	bf06      	itte	eq
 802033c:	4b08      	ldreq	r3, [pc, #32]	; (8020360 <_ZNK8touchgfx6Bitmap9getHeightEv+0x6c>)
 802033e:	8818      	ldrheq	r0, [r3, #0]
 8020340:	2000      	movne	r0, #0
 8020342:	bd08      	pop	{r3, pc}
 8020344:	20009dcc 	.word	0x20009dcc
 8020348:	08026168 	.word	0x08026168
 802034c:	0802627d 	.word	0x0802627d
 8020350:	080260ea 	.word	0x080260ea
 8020354:	20009dc4 	.word	0x20009dc4
 8020358:	20009dc8 	.word	0x20009dc8
 802035c:	20009dac 	.word	0x20009dac
 8020360:	20009d2a 	.word	0x20009d2a

08020364 <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 8020364:	4b22      	ldr	r3, [pc, #136]	; (80203f0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 8020366:	b510      	push	{r4, lr}
 8020368:	681c      	ldr	r4, [r3, #0]
 802036a:	b934      	cbnz	r4, 802037a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x16>
 802036c:	4b21      	ldr	r3, [pc, #132]	; (80203f4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 802036e:	f44f 7117 	mov.w	r1, #604	; 0x25c
 8020372:	4a21      	ldr	r2, [pc, #132]	; (80203f8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 8020374:	4821      	ldr	r0, [pc, #132]	; (80203fc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 8020376:	f002 f871 	bl	802245c <__assert_func>
 802037a:	4a21      	ldr	r2, [pc, #132]	; (8020400 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 802037c:	880b      	ldrh	r3, [r1, #0]
 802037e:	8812      	ldrh	r2, [r2, #0]
 8020380:	4293      	cmp	r3, r2
 8020382:	da10      	bge.n	80203a6 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x42>
 8020384:	2214      	movs	r2, #20
 8020386:	fb02 4303 	mla	r3, r2, r3, r4
 802038a:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 802038e:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 8020392:	f9b3 2010 	ldrsh.w	r2, [r3, #16]
 8020396:	8a5b      	ldrh	r3, [r3, #18]
 8020398:	8004      	strh	r4, [r0, #0]
 802039a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 802039e:	8041      	strh	r1, [r0, #2]
 80203a0:	8082      	strh	r2, [r0, #4]
 80203a2:	80c3      	strh	r3, [r0, #6]
 80203a4:	bd10      	pop	{r4, pc}
 80203a6:	4917      	ldr	r1, [pc, #92]	; (8020404 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 80203a8:	8809      	ldrh	r1, [r1, #0]
 80203aa:	4411      	add	r1, r2
 80203ac:	428b      	cmp	r3, r1
 80203ae:	da09      	bge.n	80203c4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 80203b0:	1a9b      	subs	r3, r3, r2
 80203b2:	4a15      	ldr	r2, [pc, #84]	; (8020408 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa4>)
 80203b4:	6812      	ldr	r2, [r2, #0]
 80203b6:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 80203ba:	681a      	ldr	r2, [r3, #0]
 80203bc:	6002      	str	r2, [r0, #0]
 80203be:	685a      	ldr	r2, [r3, #4]
 80203c0:	6042      	str	r2, [r0, #4]
 80203c2:	bd10      	pop	{r4, pc}
 80203c4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80203c8:	4293      	cmp	r3, r2
 80203ca:	d10b      	bne.n	80203e4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 80203cc:	4b0f      	ldr	r3, [pc, #60]	; (802040c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa8>)
 80203ce:	f9b3 1000 	ldrsh.w	r1, [r3]
 80203d2:	4b0f      	ldr	r3, [pc, #60]	; (8020410 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xac>)
 80203d4:	8081      	strh	r1, [r0, #4]
 80203d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80203da:	2300      	movs	r3, #0
 80203dc:	80c2      	strh	r2, [r0, #6]
 80203de:	8003      	strh	r3, [r0, #0]
 80203e0:	8043      	strh	r3, [r0, #2]
 80203e2:	bd10      	pop	{r4, pc}
 80203e4:	2300      	movs	r3, #0
 80203e6:	8003      	strh	r3, [r0, #0]
 80203e8:	8043      	strh	r3, [r0, #2]
 80203ea:	8083      	strh	r3, [r0, #4]
 80203ec:	e7d9      	b.n	80203a2 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x3e>
 80203ee:	bf00      	nop
 80203f0:	20009dcc 	.word	0x20009dcc
 80203f4:	08026168 	.word	0x08026168
 80203f8:	080261ea 	.word	0x080261ea
 80203fc:	080260ea 	.word	0x080260ea
 8020400:	20009dc4 	.word	0x20009dc4
 8020404:	20009dc8 	.word	0x20009dc8
 8020408:	20009dac 	.word	0x20009dac
 802040c:	20009d28 	.word	0x20009d28
 8020410:	20009d2a 	.word	0x20009d2a

08020414 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 8020414:	4b16      	ldr	r3, [pc, #88]	; (8020470 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>)
 8020416:	681b      	ldr	r3, [r3, #0]
 8020418:	b333      	cbz	r3, 8020468 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x54>
 802041a:	4a16      	ldr	r2, [pc, #88]	; (8020474 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 802041c:	8800      	ldrh	r0, [r0, #0]
 802041e:	8812      	ldrh	r2, [r2, #0]
 8020420:	4290      	cmp	r0, r2
 8020422:	da0f      	bge.n	8020444 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x30>
 8020424:	2214      	movs	r2, #20
 8020426:	fb02 3300 	mla	r3, r2, r0, r3
 802042a:	8a19      	ldrh	r1, [r3, #16]
 802042c:	891a      	ldrh	r2, [r3, #8]
 802042e:	4291      	cmp	r1, r2
 8020430:	db1c      	blt.n	802046c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8020432:	8a58      	ldrh	r0, [r3, #18]
 8020434:	f3c0 000c 	ubfx	r0, r0, #0, #13
 8020438:	895b      	ldrh	r3, [r3, #10]
 802043a:	4298      	cmp	r0, r3
 802043c:	bfac      	ite	ge
 802043e:	2000      	movge	r0, #0
 8020440:	2001      	movlt	r0, #1
 8020442:	4770      	bx	lr
 8020444:	4b0c      	ldr	r3, [pc, #48]	; (8020478 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 8020446:	881b      	ldrh	r3, [r3, #0]
 8020448:	4413      	add	r3, r2
 802044a:	4298      	cmp	r0, r3
 802044c:	da0c      	bge.n	8020468 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x54>
 802044e:	4b0b      	ldr	r3, [pc, #44]	; (802047c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 8020450:	1a80      	subs	r0, r0, r2
 8020452:	681b      	ldr	r3, [r3, #0]
 8020454:	eb03 1300 	add.w	r3, r3, r0, lsl #4
 8020458:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 802045c:	891a      	ldrh	r2, [r3, #8]
 802045e:	4291      	cmp	r1, r2
 8020460:	db04      	blt.n	802046c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 8020462:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 8020466:	e7e7      	b.n	8020438 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x24>
 8020468:	2000      	movs	r0, #0
 802046a:	4770      	bx	lr
 802046c:	2001      	movs	r0, #1
 802046e:	4770      	bx	lr
 8020470:	20009dcc 	.word	0x20009dcc
 8020474:	20009dc4 	.word	0x20009dc4
 8020478:	20009dc8 	.word	0x20009dc8
 802047c:	20009dac 	.word	0x20009dac

08020480 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8020480:	b508      	push	{r3, lr}
 8020482:	4b11      	ldr	r3, [pc, #68]	; (80204c8 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>)
 8020484:	6819      	ldr	r1, [r3, #0]
 8020486:	b931      	cbnz	r1, 8020496 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8020488:	4b10      	ldr	r3, [pc, #64]	; (80204cc <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 802048a:	f44f 7120 	mov.w	r1, #640	; 0x280
 802048e:	4a10      	ldr	r2, [pc, #64]	; (80204d0 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8020490:	4810      	ldr	r0, [pc, #64]	; (80204d4 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8020492:	f001 ffe3 	bl	802245c <__assert_func>
 8020496:	8803      	ldrh	r3, [r0, #0]
 8020498:	f64f 72ff 	movw	r2, #65535	; 0xffff
 802049c:	4293      	cmp	r3, r2
 802049e:	d011      	beq.n	80204c4 <_ZNK8touchgfx6Bitmap7getDataEv+0x44>
 80204a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80204a4:	4293      	cmp	r3, r2
 80204a6:	d103      	bne.n	80204b0 <_ZNK8touchgfx6Bitmap7getDataEv+0x30>
 80204a8:	4b0b      	ldr	r3, [pc, #44]	; (80204d8 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 80204aa:	681b      	ldr	r3, [r3, #0]
 80204ac:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80204ae:	bd08      	pop	{r3, pc}
 80204b0:	4a0a      	ldr	r2, [pc, #40]	; (80204dc <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 80204b2:	6812      	ldr	r2, [r2, #0]
 80204b4:	b112      	cbz	r2, 80204bc <_ZNK8touchgfx6Bitmap7getDataEv+0x3c>
 80204b6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80204ba:	b920      	cbnz	r0, 80204c6 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 80204bc:	2214      	movs	r2, #20
 80204be:	4353      	muls	r3, r2
 80204c0:	58c8      	ldr	r0, [r1, r3]
 80204c2:	bd08      	pop	{r3, pc}
 80204c4:	2000      	movs	r0, #0
 80204c6:	bd08      	pop	{r3, pc}
 80204c8:	20009dcc 	.word	0x20009dcc
 80204cc:	08026168 	.word	0x08026168
 80204d0:	08026220 	.word	0x08026220
 80204d4:	080260ea 	.word	0x080260ea
 80204d8:	20009d34 	.word	0x20009d34
 80204dc:	20009da8 	.word	0x20009da8

080204e0 <_ZNK8touchgfx6Bitmap12getAlphaDataEv>:
 80204e0:	8802      	ldrh	r2, [r0, #0]
 80204e2:	f64f 73fd 	movw	r3, #65533	; 0xfffd
 80204e6:	429a      	cmp	r2, r3
 80204e8:	dc19      	bgt.n	802051e <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x3e>
 80204ea:	4b0e      	ldr	r3, [pc, #56]	; (8020524 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x44>)
 80204ec:	881b      	ldrh	r3, [r3, #0]
 80204ee:	429a      	cmp	r2, r3
 80204f0:	da15      	bge.n	802051e <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x3e>
 80204f2:	4b0d      	ldr	r3, [pc, #52]	; (8020528 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x48>)
 80204f4:	6819      	ldr	r1, [r3, #0]
 80204f6:	2314      	movs	r3, #20
 80204f8:	fb03 1302 	mla	r3, r3, r2, r1
 80204fc:	6858      	ldr	r0, [r3, #4]
 80204fe:	b178      	cbz	r0, 8020520 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x40>
 8020500:	490a      	ldr	r1, [pc, #40]	; (802052c <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x4c>)
 8020502:	6809      	ldr	r1, [r1, #0]
 8020504:	b161      	cbz	r1, 8020520 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x40>
 8020506:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 802050a:	b14a      	cbz	r2, 8020520 <_ZNK8touchgfx6Bitmap12getAlphaDataEv+0x40>
 802050c:	8919      	ldrh	r1, [r3, #8]
 802050e:	8958      	ldrh	r0, [r3, #10]
 8020510:	4348      	muls	r0, r1
 8020512:	0040      	lsls	r0, r0, #1
 8020514:	3003      	adds	r0, #3
 8020516:	f020 0003 	bic.w	r0, r0, #3
 802051a:	4410      	add	r0, r2
 802051c:	4770      	bx	lr
 802051e:	2000      	movs	r0, #0
 8020520:	4770      	bx	lr
 8020522:	bf00      	nop
 8020524:	20009dc4 	.word	0x20009dc4
 8020528:	20009dcc 	.word	0x20009dcc
 802052c:	20009da8 	.word	0x20009da8

08020530 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 8020530:	b508      	push	{r3, lr}
 8020532:	4b1c      	ldr	r3, [pc, #112]	; (80205a4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x74>)
 8020534:	6819      	ldr	r1, [r3, #0]
 8020536:	8803      	ldrh	r3, [r0, #0]
 8020538:	b1a9      	cbz	r1, 8020566 <_ZNK8touchgfx6Bitmap9getFormatEv+0x36>
 802053a:	4a1b      	ldr	r2, [pc, #108]	; (80205a8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x78>)
 802053c:	8812      	ldrh	r2, [r2, #0]
 802053e:	4293      	cmp	r3, r2
 8020540:	da05      	bge.n	802054e <_ZNK8touchgfx6Bitmap9getFormatEv+0x1e>
 8020542:	2214      	movs	r2, #20
 8020544:	fb02 1303 	mla	r3, r2, r3, r1
 8020548:	7cd8      	ldrb	r0, [r3, #19]
 802054a:	0940      	lsrs	r0, r0, #5
 802054c:	bd08      	pop	{r3, pc}
 802054e:	4917      	ldr	r1, [pc, #92]	; (80205ac <_ZNK8touchgfx6Bitmap9getFormatEv+0x7c>)
 8020550:	8809      	ldrh	r1, [r1, #0]
 8020552:	4411      	add	r1, r2
 8020554:	428b      	cmp	r3, r1
 8020556:	da06      	bge.n	8020566 <_ZNK8touchgfx6Bitmap9getFormatEv+0x36>
 8020558:	1a9b      	subs	r3, r3, r2
 802055a:	4a15      	ldr	r2, [pc, #84]	; (80205b0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 802055c:	6812      	ldr	r2, [r2, #0]
 802055e:	eb02 1303 	add.w	r3, r2, r3, lsl #4
 8020562:	7b18      	ldrb	r0, [r3, #12]
 8020564:	bd08      	pop	{r3, pc}
 8020566:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 802056a:	4293      	cmp	r3, r2
 802056c:	d10c      	bne.n	8020588 <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 802056e:	4b11      	ldr	r3, [pc, #68]	; (80205b4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 8020570:	681b      	ldr	r3, [r3, #0]
 8020572:	6898      	ldr	r0, [r3, #8]
 8020574:	6803      	ldr	r3, [r0, #0]
 8020576:	6a1b      	ldr	r3, [r3, #32]
 8020578:	4798      	blx	r3
 802057a:	2804      	cmp	r0, #4
 802057c:	d00e      	beq.n	802059c <_ZNK8touchgfx6Bitmap9getFormatEv+0x6c>
 802057e:	d805      	bhi.n	802058c <_ZNK8touchgfx6Bitmap9getFormatEv+0x5c>
 8020580:	2801      	cmp	r0, #1
 8020582:	d00d      	beq.n	80205a0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x70>
 8020584:	2802      	cmp	r0, #2
 8020586:	d007      	beq.n	8020598 <_ZNK8touchgfx6Bitmap9getFormatEv+0x68>
 8020588:	2000      	movs	r0, #0
 802058a:	bd08      	pop	{r3, pc}
 802058c:	2810      	cmp	r0, #16
 802058e:	d0fb      	beq.n	8020588 <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 8020590:	2818      	cmp	r0, #24
 8020592:	d1f9      	bne.n	8020588 <_ZNK8touchgfx6Bitmap9getFormatEv+0x58>
 8020594:	2001      	movs	r0, #1
 8020596:	bd08      	pop	{r3, pc}
 8020598:	2005      	movs	r0, #5
 802059a:	bd08      	pop	{r3, pc}
 802059c:	2006      	movs	r0, #6
 802059e:	bd08      	pop	{r3, pc}
 80205a0:	2003      	movs	r0, #3
 80205a2:	bd08      	pop	{r3, pc}
 80205a4:	20009dcc 	.word	0x20009dcc
 80205a8:	20009dc4 	.word	0x20009dc4
 80205ac:	20009dc8 	.word	0x20009dc8
 80205b0:	20009dac 	.word	0x20009dac
 80205b4:	20009d34 	.word	0x20009d34

080205b8 <_ZNK8touchgfx8LCD16bpp8bitDepthEv>:
 80205b8:	2010      	movs	r0, #16
 80205ba:	4770      	bx	lr

080205bc <_ZN8touchgfx8LCD16bpp4initEv>:
 80205bc:	4770      	bx	lr
	...

080205c0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt>:
 80205c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80205c4:	b086      	sub	sp, #24
 80205c6:	6808      	ldr	r0, [r1, #0]
 80205c8:	6849      	ldr	r1, [r1, #4]
 80205ca:	4617      	mov	r7, r2
 80205cc:	ab04      	add	r3, sp, #16
 80205ce:	ac04      	add	r4, sp, #16
 80205d0:	c303      	stmia	r3!, {r0, r1}
 80205d2:	4620      	mov	r0, r4
 80205d4:	f7fd ffe0 	bl	801e598 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80205d8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80205dc:	429f      	cmp	r7, r3
 80205de:	d109      	bne.n	80205f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x34>
 80205e0:	4b33      	ldr	r3, [pc, #204]	; (80206b0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xf0>)
 80205e2:	781b      	ldrb	r3, [r3, #0]
 80205e4:	b933      	cbnz	r3, 80205f4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x34>
 80205e6:	4b33      	ldr	r3, [pc, #204]	; (80206b4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xf4>)
 80205e8:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
 80205ec:	4a32      	ldr	r2, [pc, #200]	; (80206b8 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xf8>)
 80205ee:	4833      	ldr	r0, [pc, #204]	; (80206bc <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xfc>)
 80205f0:	f001 ff34 	bl	802245c <__assert_func>
 80205f4:	4e32      	ldr	r6, [pc, #200]	; (80206c0 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x100>)
 80205f6:	6830      	ldr	r0, [r6, #0]
 80205f8:	46b0      	mov	r8, r6
 80205fa:	6803      	ldr	r3, [r0, #0]
 80205fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80205fe:	4798      	blx	r3
 8020600:	f010 0a01 	ands.w	sl, r0, #1
 8020604:	d020      	beq.n	8020648 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x88>
 8020606:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 802060a:	429f      	cmp	r7, r3
 802060c:	d108      	bne.n	8020620 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x60>
 802060e:	6830      	ldr	r0, [r6, #0]
 8020610:	6803      	ldr	r3, [r0, #0]
 8020612:	e894 0006 	ldmia.w	r4, {r1, r2}
 8020616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8020618:	4798      	blx	r3
 802061a:	b006      	add	sp, #24
 802061c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8020620:	ad06      	add	r5, sp, #24
 8020622:	f825 7d0c 	strh.w	r7, [r5, #-12]!
 8020626:	4628      	mov	r0, r5
 8020628:	f7ff ff2a 	bl	8020480 <_ZNK8touchgfx6Bitmap7getDataEv>
 802062c:	6836      	ldr	r6, [r6, #0]
 802062e:	4680      	mov	r8, r0
 8020630:	4628      	mov	r0, r5
 8020632:	6833      	ldr	r3, [r6, #0]
 8020634:	6d9f      	ldr	r7, [r3, #88]	; 0x58
 8020636:	f7ff fe25 	bl	8020284 <_ZNK8touchgfx6Bitmap8getWidthEv>
 802063a:	4643      	mov	r3, r8
 802063c:	9000      	str	r0, [sp, #0]
 802063e:	4630      	mov	r0, r6
 8020640:	e894 0006 	ldmia.w	r4, {r1, r2}
 8020644:	47b8      	blx	r7
 8020646:	e7e8      	b.n	802061a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x5a>
 8020648:	6830      	ldr	r0, [r6, #0]
 802064a:	ad06      	add	r5, sp, #24
 802064c:	4e1d      	ldr	r6, [pc, #116]	; (80206c4 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x104>)
 802064e:	6803      	ldr	r3, [r0, #0]
 8020650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8020652:	4798      	blx	r3
 8020654:	8834      	ldrh	r4, [r6, #0]
 8020656:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 802065a:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 802065e:	f825 7d0c 	strh.w	r7, [r5, #-12]!
 8020662:	4657      	mov	r7, sl
 8020664:	fb02 3404 	mla	r4, r2, r4, r3
 8020668:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 802066c:	4628      	mov	r0, r5
 802066e:	f7ff ff07 	bl	8020480 <_ZNK8touchgfx6Bitmap7getDataEv>
 8020672:	4681      	mov	r9, r0
 8020674:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8020678:	429f      	cmp	r7, r3
 802067a:	da14      	bge.n	80206a6 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xe6>
 802067c:	f8d8 0000 	ldr.w	r0, [r8]
 8020680:	4649      	mov	r1, r9
 8020682:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8020686:	3701      	adds	r7, #1
 8020688:	6802      	ldr	r2, [r0, #0]
 802068a:	005b      	lsls	r3, r3, #1
 802068c:	f8d2 a034 	ldr.w	sl, [r2, #52]	; 0x34
 8020690:	4622      	mov	r2, r4
 8020692:	47d0      	blx	sl
 8020694:	8833      	ldrh	r3, [r6, #0]
 8020696:	4628      	mov	r0, r5
 8020698:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802069c:	f7ff fdf2 	bl	8020284 <_ZNK8touchgfx6Bitmap8getWidthEv>
 80206a0:	eb09 0940 	add.w	r9, r9, r0, lsl #1
 80206a4:	e7e6      	b.n	8020674 <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0xb4>
 80206a6:	4628      	mov	r0, r5
 80206a8:	f7ff feea 	bl	8020480 <_ZNK8touchgfx6Bitmap7getDataEv>
 80206ac:	e7b5      	b.n	802061a <_ZN8touchgfx8LCD16bpp29copyFrameBufferRegionToMemoryERKNS_4RectEt+0x5a>
 80206ae:	bf00      	nop
 80206b0:	20009d33 	.word	0x20009d33
 80206b4:	080262ff 	.word	0x080262ff
 80206b8:	0802645c 	.word	0x0802645c
 80206bc:	0802633a 	.word	0x0802633a
 80206c0:	20009d34 	.word	0x20009d34
 80206c4:	20009d2e 	.word	0x20009d2e

080206c8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80206c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80206cc:	b08d      	sub	sp, #52	; 0x34
 80206ce:	4688      	mov	r8, r1
 80206d0:	4614      	mov	r4, r2
 80206d2:	f89d 7058 	ldrb.w	r7, [sp, #88]	; 0x58
 80206d6:	f89d 505c 	ldrb.w	r5, [sp, #92]	; 0x5c
 80206da:	2f00      	cmp	r7, #0
 80206dc:	d047      	beq.n	802076e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 80206de:	6810      	ldr	r0, [r2, #0]
 80206e0:	ae08      	add	r6, sp, #32
 80206e2:	6851      	ldr	r1, [r2, #4]
 80206e4:	c603      	stmia	r6!, {r0, r1}
 80206e6:	6818      	ldr	r0, [r3, #0]
 80206e8:	ae0a      	add	r6, sp, #40	; 0x28
 80206ea:	6859      	ldr	r1, [r3, #4]
 80206ec:	c603      	stmia	r6!, {r0, r1}
 80206ee:	a808      	add	r0, sp, #32
 80206f0:	f7fd ff52 	bl	801e598 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80206f4:	4621      	mov	r1, r4
 80206f6:	a80a      	add	r0, sp, #40	; 0x28
 80206f8:	f7fd ff36 	bl	801e568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80206fc:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8020700:	f9bd 302a 	ldrsh.w	r3, [sp, #42]	; 0x2a
 8020704:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8020708:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	; 0x2c
 802070c:	fb14 2103 	smlabb	r1, r4, r3, r2
 8020710:	eb08 0441 	add.w	r4, r8, r1, lsl #1
 8020714:	f8bd 1020 	ldrh.w	r1, [sp, #32]
 8020718:	f8df 8218 	ldr.w	r8, [pc, #536]	; 8020934 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x26c>
 802071c:	440a      	add	r2, r1
 802071e:	f8d8 0000 	ldr.w	r0, [r8]
 8020722:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 8020726:	f8bd 2022 	ldrh.w	r2, [sp, #34]	; 0x22
 802072a:	4413      	add	r3, r2
 802072c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 8020730:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	; 0x2e
 8020734:	9306      	str	r3, [sp, #24]
 8020736:	6803      	ldr	r3, [r0, #0]
 8020738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 802073a:	4798      	blx	r3
 802073c:	2fff      	cmp	r7, #255	; 0xff
 802073e:	d019      	beq.n	8020774 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xac>
 8020740:	f010 0f04 	tst.w	r0, #4
 8020744:	d01a      	beq.n	802077c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8020746:	f8d8 0000 	ldr.w	r0, [r8]
 802074a:	b2b6      	uxth	r6, r6
 802074c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
 8020750:	6801      	ldr	r1, [r0, #0]
 8020752:	9504      	str	r5, [sp, #16]
 8020754:	f8bd 5024 	ldrh.w	r5, [sp, #36]	; 0x24
 8020758:	9703      	str	r7, [sp, #12]
 802075a:	9502      	str	r5, [sp, #8]
 802075c:	f8bd 5018 	ldrh.w	r5, [sp, #24]
 8020760:	9600      	str	r6, [sp, #0]
 8020762:	9501      	str	r5, [sp, #4]
 8020764:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8020768:	6c0d      	ldr	r5, [r1, #64]	; 0x40
 802076a:	4621      	mov	r1, r4
 802076c:	47a8      	blx	r5
 802076e:	b00d      	add	sp, #52	; 0x34
 8020770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020774:	b915      	cbnz	r5, 802077c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb4>
 8020776:	f010 0f01 	tst.w	r0, #1
 802077a:	e7e3      	b.n	8020744 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x7c>
 802077c:	f8d8 0000 	ldr.w	r0, [r8]
 8020780:	6803      	ldr	r3, [r0, #0]
 8020782:	6a1b      	ldr	r3, [r3, #32]
 8020784:	4798      	blx	r3
 8020786:	4b69      	ldr	r3, [pc, #420]	; (802092c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x264>)
 8020788:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	; 0x2a
 802078c:	2fff      	cmp	r7, #255	; 0xff
 802078e:	881d      	ldrh	r5, [r3, #0]
 8020790:	4699      	mov	r9, r3
 8020792:	f9bd 2028 	ldrsh.w	r2, [sp, #40]	; 0x28
 8020796:	fb01 2505 	mla	r5, r1, r5, r2
 802079a:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 802079e:	f000 80a6 	beq.w	80208ee <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x226>
 80207a2:	ea44 0205 	orr.w	r2, r4, r5
 80207a6:	f5c7 7080 	rsb	r0, r7, #256	; 0x100
 80207aa:	f012 0f03 	tst.w	r2, #3
 80207ae:	d154      	bne.n	802085a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x192>
 80207b0:	07f2      	lsls	r2, r6, #31
 80207b2:	d452      	bmi.n	802085a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x192>
 80207b4:	f8bd e024 	ldrh.w	lr, [sp, #36]	; 0x24
 80207b8:	f01e 0e01 	ands.w	lr, lr, #1
 80207bc:	d14d      	bne.n	802085a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x192>
 80207be:	2202      	movs	r2, #2
 80207c0:	9307      	str	r3, [sp, #28]
 80207c2:	fb96 f8f2 	sdiv	r8, r6, r2
 80207c6:	4693      	mov	fp, r2
 80207c8:	f1c8 0800 	rsb	r8, r8, #0
 80207cc:	9b06      	ldr	r3, [sp, #24]
 80207ce:	459e      	cmp	lr, r3
 80207d0:	f280 80a5 	bge.w	802091e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x256>
 80207d4:	f04f 0900 	mov.w	r9, #0
 80207d8:	45b1      	cmp	r9, r6
 80207da:	da2e      	bge.n	802083a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x172>
 80207dc:	6829      	ldr	r1, [r5, #0]
 80207de:	f109 0902 	add.w	r9, r9, #2
 80207e2:	f854 2b04 	ldr.w	r2, [r4], #4
 80207e6:	0a0b      	lsrs	r3, r1, #8
 80207e8:	f001 1a1f 	and.w	sl, r1, #2031647	; 0x1f001f
 80207ec:	ea4f 2c12 	mov.w	ip, r2, lsr #8
 80207f0:	f003 13f8 	and.w	r3, r3, #16253176	; 0xf800f8
 80207f4:	fb00 fa0a 	mul.w	sl, r0, sl
 80207f8:	f00c 1cf8 	and.w	ip, ip, #16253176	; 0xf800f8
 80207fc:	0949      	lsrs	r1, r1, #5
 80207fe:	4343      	muls	r3, r0
 8020800:	f001 113f 	and.w	r1, r1, #4128831	; 0x3f003f
 8020804:	fb07 3c0c 	mla	ip, r7, ip, r3
 8020808:	f002 131f 	and.w	r3, r2, #2031647	; 0x1f001f
 802080c:	0952      	lsrs	r2, r2, #5
 802080e:	4341      	muls	r1, r0
 8020810:	fb07 a303 	mla	r3, r7, r3, sl
 8020814:	f00c 2cf8 	and.w	ip, ip, #4160813056	; 0xf800f800
 8020818:	f002 123f 	and.w	r2, r2, #4128831	; 0x3f003f
 802081c:	0a1b      	lsrs	r3, r3, #8
 802081e:	fb07 1202 	mla	r2, r7, r2, r1
 8020822:	f003 131f 	and.w	r3, r3, #2031647	; 0x1f001f
 8020826:	ea4c 0c03 	orr.w	ip, ip, r3
 802082a:	4b41      	ldr	r3, [pc, #260]	; (8020930 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x268>)
 802082c:	ea03 02d2 	and.w	r2, r3, r2, lsr #3
 8020830:	ea4c 0202 	orr.w	r2, ip, r2
 8020834:	f845 2b04 	str.w	r2, [r5], #4
 8020838:	e7ce      	b.n	80207d8 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x110>
 802083a:	9b07      	ldr	r3, [sp, #28]
 802083c:	f10e 0e01 	add.w	lr, lr, #1
 8020840:	881b      	ldrh	r3, [r3, #0]
 8020842:	eb08 0353 	add.w	r3, r8, r3, lsr #1
 8020846:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 802084a:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 802084e:	fb93 f3fb 	sdiv	r3, r3, fp
 8020852:	4443      	add	r3, r8
 8020854:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8020858:	e7b8      	b.n	80207cc <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x104>
 802085a:	ea26 73e6 	bic.w	r3, r6, r6, asr #31
 802085e:	f04f 0800 	mov.w	r8, #0
 8020862:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 8020938 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x270>
 8020866:	005b      	lsls	r3, r3, #1
 8020868:	9307      	str	r3, [sp, #28]
 802086a:	9b06      	ldr	r3, [sp, #24]
 802086c:	4598      	cmp	r8, r3
 802086e:	da56      	bge.n	802091e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x256>
 8020870:	46aa      	mov	sl, r5
 8020872:	f04f 0c00 	mov.w	ip, #0
 8020876:	45b4      	cmp	ip, r6
 8020878:	da29      	bge.n	80208ce <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x206>
 802087a:	f8ba 1000 	ldrh.w	r1, [sl]
 802087e:	f834 201c 	ldrh.w	r2, [r4, ip, lsl #1]
 8020882:	f10c 0c01 	add.w	ip, ip, #1
 8020886:	ea01 0309 	and.w	r3, r1, r9
 802088a:	f401 6bfc 	and.w	fp, r1, #2016	; 0x7e0
 802088e:	ea02 0e09 	and.w	lr, r2, r9
 8020892:	f001 011f 	and.w	r1, r1, #31
 8020896:	4343      	muls	r3, r0
 8020898:	fb00 fb0b 	mul.w	fp, r0, fp
 802089c:	fb07 3e0e 	mla	lr, r7, lr, r3
 80208a0:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 80208a4:	4341      	muls	r1, r0
 80208a6:	f002 021f 	and.w	r2, r2, #31
 80208aa:	fb07 b303 	mla	r3, r7, r3, fp
 80208ae:	ea09 2e2e 	and.w	lr, r9, lr, asr #8
 80208b2:	fb07 1202 	mla	r2, r7, r2, r1
 80208b6:	121b      	asrs	r3, r3, #8
 80208b8:	f3c2 2204 	ubfx	r2, r2, #8, #5
 80208bc:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80208c0:	ea4e 0e03 	orr.w	lr, lr, r3
 80208c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80208c8:	f82a eb02 	strh.w	lr, [sl], #2
 80208cc:	e7d3      	b.n	8020876 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1ae>
 80208ce:	4b17      	ldr	r3, [pc, #92]	; (802092c <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x264>)
 80208d0:	f108 0801 	add.w	r8, r8, #1
 80208d4:	9a07      	ldr	r2, [sp, #28]
 80208d6:	881b      	ldrh	r3, [r3, #0]
 80208d8:	1b9b      	subs	r3, r3, r6
 80208da:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80208de:	441d      	add	r5, r3
 80208e0:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 80208e4:	1b9b      	subs	r3, r3, r6
 80208e6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80208ea:	441c      	add	r4, r3
 80208ec:	e7bd      	b.n	802086a <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x1a2>
 80208ee:	ea4f 0a46 	mov.w	sl, r6, lsl #1
 80208f2:	2700      	movs	r7, #0
 80208f4:	9b06      	ldr	r3, [sp, #24]
 80208f6:	429f      	cmp	r7, r3
 80208f8:	da11      	bge.n	802091e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x256>
 80208fa:	f8d8 0000 	ldr.w	r0, [r8]
 80208fe:	4622      	mov	r2, r4
 8020900:	4629      	mov	r1, r5
 8020902:	3701      	adds	r7, #1
 8020904:	6803      	ldr	r3, [r0, #0]
 8020906:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8020908:	4653      	mov	r3, sl
 802090a:	47b0      	blx	r6
 802090c:	f8b9 3000 	ldrh.w	r3, [r9]
 8020910:	eb05 0543 	add.w	r5, r5, r3, lsl #1
 8020914:	f9bd 3024 	ldrsh.w	r3, [sp, #36]	; 0x24
 8020918:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 802091c:	e7ea      	b.n	80208f4 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x22c>
 802091e:	4b05      	ldr	r3, [pc, #20]	; (8020934 <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0x26c>)
 8020920:	6818      	ldr	r0, [r3, #0]
 8020922:	6803      	ldr	r3, [r0, #0]
 8020924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020926:	4798      	blx	r3
 8020928:	e721      	b.n	802076e <_ZN8touchgfx8LCD16bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa6>
 802092a:	bf00      	nop
 802092c:	20009d2e 	.word	0x20009d2e
 8020930:	07e007e0 	.word	0x07e007e0
 8020934:	20009d34 	.word	0x20009d34
 8020938:	fffff800 	.word	0xfffff800

0802093c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 802093c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020940:	4615      	mov	r5, r2
 8020942:	b08b      	sub	sp, #44	; 0x2c
 8020944:	4699      	mov	r9, r3
 8020946:	b13b      	cbz	r3, 8020958 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 8020948:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 802094c:	b123      	cbz	r3, 8020958 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 802094e:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8020952:	2b00      	cmp	r3, #0
 8020954:	f040 808c 	bne.w	8020a70 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x134>
 8020958:	b00b      	add	sp, #44	; 0x2c
 802095a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802095e:	f010 0f08 	tst.w	r0, #8
 8020962:	d011      	beq.n	8020988 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x4c>
 8020964:	6818      	ldr	r0, [r3, #0]
 8020966:	f8bd 4026 	ldrh.w	r4, [sp, #38]	; 0x26
 802096a:	6801      	ldr	r1, [r0, #0]
 802096c:	9401      	str	r4, [sp, #4]
 802096e:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8020972:	f8cd 9008 	str.w	r9, [sp, #8]
 8020976:	9400      	str	r4, [sp, #0]
 8020978:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 802097c:	6ccc      	ldr	r4, [r1, #76]	; 0x4c
 802097e:	4629      	mov	r1, r5
 8020980:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8020984:	47a0      	blx	r4
 8020986:	e7e7      	b.n	8020958 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 8020988:	6818      	ldr	r0, [r3, #0]
 802098a:	f9bd 4024 	ldrsh.w	r4, [sp, #36]	; 0x24
 802098e:	6803      	ldr	r3, [r0, #0]
 8020990:	f9bd 8026 	ldrsh.w	r8, [sp, #38]	; 0x26
 8020994:	ea4f 0a44 	mov.w	sl, r4, lsl #1
 8020998:	6a1b      	ldr	r3, [r3, #32]
 802099a:	4798      	blx	r3
 802099c:	4a3e      	ldr	r2, [pc, #248]	; (8020a98 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x15c>)
 802099e:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80209a2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80209a6:	8816      	ldrh	r6, [r2, #0]
 80209a8:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 80209ac:	fb06 1303 	mla	r3, r6, r3, r1
 80209b0:	4616      	mov	r6, r2
 80209b2:	ea24 71e4 	bic.w	r1, r4, r4, asr #31
 80209b6:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 80209ba:	d041      	beq.n	8020a40 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x104>
 80209bc:	f405 4e78 	and.w	lr, r5, #63488	; 0xf800
 80209c0:	f405 67fc 	and.w	r7, r5, #2016	; 0x7e0
 80209c4:	f005 051f 	and.w	r5, r5, #31
 80209c8:	f5c9 7680 	rsb	r6, r9, #256	; 0x100
 80209cc:	fb09 fe0e 	mul.w	lr, r9, lr
 80209d0:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 8020aa0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x164>
 80209d4:	fb09 f305 	mul.w	r3, r9, r5
 80209d8:	2500      	movs	r5, #0
 80209da:	fb09 f707 	mul.w	r7, r9, r7
 80209de:	9306      	str	r3, [sp, #24]
 80209e0:	004b      	lsls	r3, r1, #1
 80209e2:	9207      	str	r2, [sp, #28]
 80209e4:	9305      	str	r3, [sp, #20]
 80209e6:	4545      	cmp	r5, r8
 80209e8:	da3c      	bge.n	8020a64 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x128>
 80209ea:	4681      	mov	r9, r0
 80209ec:	f04f 0c00 	mov.w	ip, #0
 80209f0:	45a4      	cmp	ip, r4
 80209f2:	da1c      	bge.n	8020a2e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xf2>
 80209f4:	f8b9 2000 	ldrh.w	r2, [r9]
 80209f8:	f10c 0c01 	add.w	ip, ip, #1
 80209fc:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 8020a00:	ea02 010b 	and.w	r1, r2, fp
 8020a04:	fb06 7303 	mla	r3, r6, r3, r7
 8020a08:	fb06 e101 	mla	r1, r6, r1, lr
 8020a0c:	0a1b      	lsrs	r3, r3, #8
 8020a0e:	ea0b 2111 	and.w	r1, fp, r1, lsr #8
 8020a12:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8020a16:	430b      	orrs	r3, r1
 8020a18:	f002 011f 	and.w	r1, r2, #31
 8020a1c:	9a06      	ldr	r2, [sp, #24]
 8020a1e:	fb06 2101 	mla	r1, r6, r1, r2
 8020a22:	f3c1 2104 	ubfx	r1, r1, #8, #5
 8020a26:	430b      	orrs	r3, r1
 8020a28:	f829 3b02 	strh.w	r3, [r9], #2
 8020a2c:	e7e0      	b.n	80209f0 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xb4>
 8020a2e:	9b07      	ldr	r3, [sp, #28]
 8020a30:	3501      	adds	r5, #1
 8020a32:	9a05      	ldr	r2, [sp, #20]
 8020a34:	881b      	ldrh	r3, [r3, #0]
 8020a36:	ebca 0343 	rsb	r3, sl, r3, lsl #1
 8020a3a:	4413      	add	r3, r2
 8020a3c:	4418      	add	r0, r3
 8020a3e:	e7d2      	b.n	80209e6 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0xaa>
 8020a40:	0049      	lsls	r1, r1, #1
 8020a42:	2200      	movs	r2, #0
 8020a44:	4542      	cmp	r2, r8
 8020a46:	da0d      	bge.n	8020a64 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x128>
 8020a48:	2300      	movs	r3, #0
 8020a4a:	42a3      	cmp	r3, r4
 8020a4c:	da03      	bge.n	8020a56 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x11a>
 8020a4e:	f820 5013 	strh.w	r5, [r0, r3, lsl #1]
 8020a52:	3301      	adds	r3, #1
 8020a54:	e7f9      	b.n	8020a4a <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x10e>
 8020a56:	8833      	ldrh	r3, [r6, #0]
 8020a58:	3201      	adds	r2, #1
 8020a5a:	ebca 0343 	rsb	r3, sl, r3, lsl #1
 8020a5e:	440b      	add	r3, r1
 8020a60:	4418      	add	r0, r3
 8020a62:	e7ef      	b.n	8020a44 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x108>
 8020a64:	4b0d      	ldr	r3, [pc, #52]	; (8020a9c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x160>)
 8020a66:	6818      	ldr	r0, [r3, #0]
 8020a68:	6803      	ldr	r3, [r0, #0]
 8020a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8020a6c:	4798      	blx	r3
 8020a6e:	e773      	b.n	8020958 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x1c>
 8020a70:	6808      	ldr	r0, [r1, #0]
 8020a72:	ab08      	add	r3, sp, #32
 8020a74:	6849      	ldr	r1, [r1, #4]
 8020a76:	4c09      	ldr	r4, [pc, #36]	; (8020a9c <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x160>)
 8020a78:	c303      	stmia	r3!, {r0, r1}
 8020a7a:	a808      	add	r0, sp, #32
 8020a7c:	f7fd fd8c 	bl	801e598 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020a80:	6820      	ldr	r0, [r4, #0]
 8020a82:	6803      	ldr	r3, [r0, #0]
 8020a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8020a86:	4798      	blx	r3
 8020a88:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8020a8c:	4623      	mov	r3, r4
 8020a8e:	f47f af66 	bne.w	802095e <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x22>
 8020a92:	f010 0f02 	tst.w	r0, #2
 8020a96:	e764      	b.n	8020962 <_ZN8touchgfx8LCD16bpp8fillRectERKNS_4RectENS_9colortypeEh+0x26>
 8020a98:	20009d2e 	.word	0x20009d2e
 8020a9c:	20009d34 	.word	0x20009d34
 8020aa0:	fffff800 	.word	0xfffff800

08020aa4 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>:
 8020aa4:	ee07 0a90 	vmov	s15, r0
 8020aa8:	ee70 0ac0 	vsub.f32	s1, s1, s0
 8020aac:	ee71 1ac1 	vsub.f32	s3, s3, s2
 8020ab0:	eddf 6a08 	vldr	s13, [pc, #32]	; 8020ad4 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh+0x30>
 8020ab4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8020ab8:	eea0 0a82 	vfma.f32	s0, s1, s4
 8020abc:	eea1 1a82 	vfma.f32	s2, s3, s4
 8020ac0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8020ac4:	ee31 1a40 	vsub.f32	s2, s2, s0
 8020ac8:	eea2 0a81 	vfma.f32	s0, s5, s2
 8020acc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8020ad0:	4770      	bx	lr
 8020ad2:	bf00      	nop
 8020ad4:	437f0000 	.word	0x437f0000

08020ad8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8020ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020adc:	ed2d 8b0e 	vpush	{d8-d14}
 8020ae0:	b095      	sub	sp, #84	; 0x54
 8020ae2:	461e      	mov	r6, r3
 8020ae4:	2700      	movs	r7, #0
 8020ae6:	4690      	mov	r8, r2
 8020ae8:	f8bd 30c0 	ldrh.w	r3, [sp, #192]	; 0xc0
 8020aec:	a812      	add	r0, sp, #72	; 0x48
 8020aee:	468a      	mov	sl, r1
 8020af0:	9c2e      	ldr	r4, [sp, #184]	; 0xb8
 8020af2:	9311      	str	r3, [sp, #68]	; 0x44
 8020af4:	f89d 30c4 	ldrb.w	r3, [sp, #196]	; 0xc4
 8020af8:	f8dd 90bc 	ldr.w	r9, [sp, #188]	; 0xbc
 8020afc:	9301      	str	r3, [sp, #4]
 8020afe:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020b00:	f8ad 7048 	strh.w	r7, [sp, #72]	; 0x48
 8020b04:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 8020b08:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8020b0c:	f8ad 704a 	strh.w	r7, [sp, #74]	; 0x4a
 8020b10:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 8020b14:	f8ad 204c 	strh.w	r2, [sp, #76]	; 0x4c
 8020b18:	f7fd fd3e 	bl	801e598 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8020b1c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8020b1e:	6835      	ldr	r5, [r6, #0]
 8020b20:	6818      	ldr	r0, [r3, #0]
 8020b22:	f9b4 3000 	ldrsh.w	r3, [r4]
 8020b26:	f9b9 e000 	ldrsh.w	lr, [r9]
 8020b2a:	1b40      	subs	r0, r0, r5
 8020b2c:	18e9      	adds	r1, r5, r3
 8020b2e:	ebae 0c01 	sub.w	ip, lr, r1
 8020b32:	4560      	cmp	r0, ip
 8020b34:	f340 86a2 	ble.w	802187c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 8020b38:	f8b9 9004 	ldrh.w	r9, [r9, #4]
 8020b3c:	44f1      	add	r9, lr
 8020b3e:	fa0f f989 	sxth.w	r9, r9
 8020b42:	4549      	cmp	r1, r9
 8020b44:	f300 869a 	bgt.w	802187c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 8020b48:	f9b4 4002 	ldrsh.w	r4, [r4, #2]
 8020b4c:	eeb7 ca00 	vmov.f32	s24, #112	; 0x3f800000  1.0
 8020b50:	6972      	ldr	r2, [r6, #20]
 8020b52:	ed96 6a07 	vldr	s12, [r6, #28]
 8020b56:	4422      	add	r2, r4
 8020b58:	f8da 4004 	ldr.w	r4, [sl, #4]
 8020b5c:	ed98 ba09 	vldr	s22, [r8, #36]	; 0x24
 8020b60:	fb04 5402 	mla	r4, r4, r2, r5
 8020b64:	f8bd 20c8 	ldrh.w	r2, [sp, #200]	; 0xc8
 8020b68:	edd8 ba0b 	vldr	s23, [r8, #44]	; 0x2c
 8020b6c:	4282      	cmp	r2, r0
 8020b6e:	edd6 7a0a 	vldr	s15, [r6, #40]	; 0x28
 8020b72:	ed96 7a0d 	vldr	s14, [r6, #52]	; 0x34
 8020b76:	441c      	add	r4, r3
 8020b78:	bfa8      	it	ge
 8020b7a:	4602      	movge	r2, r0
 8020b7c:	f8da b000 	ldr.w	fp, [sl]
 8020b80:	458e      	cmp	lr, r1
 8020b82:	ee06 2a90 	vmov	s13, r2
 8020b86:	eb0b 0444 	add.w	r4, fp, r4, lsl #1
 8020b8a:	9208      	str	r2, [sp, #32]
 8020b8c:	eeb8 9ae6 	vcvt.f32.s32	s18, s13
 8020b90:	edd8 6a0d 	vldr	s13, [r8, #52]	; 0x34
 8020b94:	ee29 ba0b 	vmul.f32	s22, s18, s22
 8020b98:	ee69 ba2b 	vmul.f32	s23, s18, s23
 8020b9c:	ee29 9a26 	vmul.f32	s18, s18, s13
 8020ba0:	eecc 6a06 	vdiv.f32	s13, s24, s12
 8020ba4:	ee37 aaab 	vadd.f32	s20, s15, s23
 8020ba8:	ee77 aa09 	vadd.f32	s21, s14, s18
 8020bac:	ee76 9a0b 	vadd.f32	s19, s12, s22
 8020bb0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8020bb4:	ee27 7a26 	vmul.f32	s14, s14, s13
 8020bb8:	dc01      	bgt.n	8020bbe <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xe6>
 8020bba:	970a      	str	r7, [sp, #40]	; 0x28
 8020bbc:	e029      	b.n	8020c12 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x13a>
 8020bbe:	9a08      	ldr	r2, [sp, #32]
 8020bc0:	fb9c f1f2 	sdiv	r1, ip, r2
 8020bc4:	ee06 1a90 	vmov	s13, r1
 8020bc8:	434a      	muls	r2, r1
 8020bca:	2900      	cmp	r1, #0
 8020bcc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8020bd0:	ebac 0602 	sub.w	r6, ip, r2
 8020bd4:	960a      	str	r6, [sp, #40]	; 0x28
 8020bd6:	eeeb 9a26 	vfma.f32	s19, s22, s13
 8020bda:	eeab aaa6 	vfma.f32	s20, s23, s13
 8020bde:	eee9 aa26 	vfma.f32	s21, s18, s13
 8020be2:	dd12      	ble.n	8020c0a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x132>
 8020be4:	ee79 7acb 	vsub.f32	s15, s19, s22
 8020be8:	ee3a 7ac9 	vsub.f32	s14, s21, s18
 8020bec:	eef5 7a40 	vcmp.f32	s15, #0.0
 8020bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bf4:	bf14      	ite	ne
 8020bf6:	eecc 6a27 	vdivne.f32	s13, s24, s15
 8020bfa:	eef0 6a4c 	vmoveq.f32	s13, s24
 8020bfe:	ee7a 7a6b 	vsub.f32	s15, s20, s23
 8020c02:	ee27 7a26 	vmul.f32	s14, s14, s13
 8020c06:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8020c0a:	1a80      	subs	r0, r0, r2
 8020c0c:	eb04 0442 	add.w	r4, r4, r2, lsl #1
 8020c10:	4415      	add	r5, r2
 8020c12:	18ea      	adds	r2, r5, r3
 8020c14:	4402      	add	r2, r0
 8020c16:	4591      	cmp	r9, r2
 8020c18:	bfbc      	itt	lt
 8020c1a:	eba9 0003 	sublt.w	r0, r9, r3
 8020c1e:	1b40      	sublt	r0, r0, r5
 8020c20:	2800      	cmp	r0, #0
 8020c22:	f340 862b 	ble.w	802187c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 8020c26:	9b08      	ldr	r3, [sp, #32]
 8020c28:	9a08      	ldr	r2, [sp, #32]
 8020c2a:	fb90 f3f3 	sdiv	r3, r0, r3
 8020c2e:	9309      	str	r3, [sp, #36]	; 0x24
 8020c30:	fb02 0313 	mls	r3, r2, r3, r0
 8020c34:	930c      	str	r3, [sp, #48]	; 0x30
 8020c36:	b91b      	cbnz	r3, 8020c40 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x168>
 8020c38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020c3a:	920c      	str	r2, [sp, #48]	; 0x30
 8020c3c:	3b01      	subs	r3, #1
 8020c3e:	9309      	str	r3, [sp, #36]	; 0x24
 8020c40:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 8020c42:	eddf ca40 	vldr	s25, [pc, #256]	; 8020d44 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x26c>
 8020c46:	681b      	ldr	r3, [r3, #0]
 8020c48:	9304      	str	r3, [sp, #16]
 8020c4a:	9b01      	ldr	r3, [sp, #4]
 8020c4c:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8020c50:	9305      	str	r3, [sp, #20]
 8020c52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8020c54:	2b00      	cmp	r3, #0
 8020c56:	dc03      	bgt.n	8020c60 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x188>
 8020c58:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020c5a:	2b00      	cmp	r3, #0
 8020c5c:	f340 860e 	ble.w	802187c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 8020c60:	ee8c 8a29 	vdiv.f32	s16, s24, s19
 8020c64:	9b08      	ldr	r3, [sp, #32]
 8020c66:	9909      	ldr	r1, [sp, #36]	; 0x24
 8020c68:	eef0 6a67 	vmov.f32	s13, s15
 8020c6c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020c70:	ee16 ba90 	vmov	fp, s13
 8020c74:	eef0 6a47 	vmov.f32	s13, s14
 8020c78:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020c7c:	ee6a 8a08 	vmul.f32	s17, s20, s16
 8020c80:	ee2a 8a88 	vmul.f32	s16, s21, s16
 8020c84:	ee16 5a90 	vmov	r5, s13
 8020c88:	ee78 7ae7 	vsub.f32	s15, s17, s15
 8020c8c:	ee38 7a47 	vsub.f32	s14, s16, s14
 8020c90:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 8020c94:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8020c98:	ee17 2a90 	vmov	r2, s15
 8020c9c:	fb92 f3f3 	sdiv	r3, r2, r3
 8020ca0:	ee17 2a10 	vmov	r2, s14
 8020ca4:	9306      	str	r3, [sp, #24]
 8020ca6:	9b08      	ldr	r3, [sp, #32]
 8020ca8:	fb92 f3f3 	sdiv	r3, r2, r3
 8020cac:	9a08      	ldr	r2, [sp, #32]
 8020cae:	9307      	str	r3, [sp, #28]
 8020cb0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8020cb2:	2900      	cmp	r1, #0
 8020cb4:	bfc8      	it	gt
 8020cb6:	4613      	movgt	r3, r2
 8020cb8:	9302      	str	r3, [sp, #8]
 8020cba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8020cbc:	2b00      	cmp	r3, #0
 8020cbe:	dd0d      	ble.n	8020cdc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x204>
 8020cc0:	9a06      	ldr	r2, [sp, #24]
 8020cc2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8020cc6:	fb02 bb03 	mla	fp, r2, r3, fp
 8020cca:	9a07      	ldr	r2, [sp, #28]
 8020ccc:	fb02 5503 	mla	r5, r2, r3, r5
 8020cd0:	9b02      	ldr	r3, [sp, #8]
 8020cd2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8020cd4:	1a9b      	subs	r3, r3, r2
 8020cd6:	9302      	str	r3, [sp, #8]
 8020cd8:	2300      	movs	r3, #0
 8020cda:	930a      	str	r3, [sp, #40]	; 0x28
 8020cdc:	ea5f 432b 	movs.w	r3, fp, asr #16
 8020ce0:	d42e      	bmi.n	8020d40 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 8020ce2:	f9bd 004c 	ldrsh.w	r0, [sp, #76]	; 0x4c
 8020ce6:	4283      	cmp	r3, r0
 8020ce8:	da2a      	bge.n	8020d40 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 8020cea:	142b      	asrs	r3, r5, #16
 8020cec:	d428      	bmi.n	8020d40 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 8020cee:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 8020cf2:	428b      	cmp	r3, r1
 8020cf4:	da24      	bge.n	8020d40 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 8020cf6:	9b02      	ldr	r3, [sp, #8]
 8020cf8:	9a06      	ldr	r2, [sp, #24]
 8020cfa:	3b01      	subs	r3, #1
 8020cfc:	fb03 b202 	mla	r2, r3, r2, fp
 8020d00:	1412      	asrs	r2, r2, #16
 8020d02:	d41d      	bmi.n	8020d40 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 8020d04:	4282      	cmp	r2, r0
 8020d06:	da1b      	bge.n	8020d40 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 8020d08:	9a07      	ldr	r2, [sp, #28]
 8020d0a:	fb03 5302 	mla	r3, r3, r2, r5
 8020d0e:	141b      	asrs	r3, r3, #16
 8020d10:	d416      	bmi.n	8020d40 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x268>
 8020d12:	428b      	cmp	r3, r1
 8020d14:	bfb4      	ite	lt
 8020d16:	2300      	movlt	r3, #0
 8020d18:	2301      	movge	r3, #1
 8020d1a:	9303      	str	r3, [sp, #12]
 8020d1c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8020d1e:	2b0b      	cmp	r3, #11
 8020d20:	f200 82d7 	bhi.w	80212d2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7fa>
 8020d24:	e8df f013 	tbh	[pc, r3, lsl #1]
 8020d28:	03430531 	.word	0x03430531
 8020d2c:	02ca02e8 	.word	0x02ca02e8
 8020d30:	02d502d5 	.word	0x02d502d5
 8020d34:	02d502d5 	.word	0x02d502d5
 8020d38:	01c5026b 	.word	0x01c5026b
 8020d3c:	00100160 	.word	0x00100160
 8020d40:	2301      	movs	r3, #1
 8020d42:	e7ea      	b.n	8020d1a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x242>
 8020d44:	3d800000 	.word	0x3d800000
 8020d48:	f04f 0a00 	mov.w	sl, #0
 8020d4c:	9b02      	ldr	r3, [sp, #8]
 8020d4e:	4553      	cmp	r3, sl
 8020d50:	f340 82bb 	ble.w	80212ca <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 8020d54:	9a03      	ldr	r2, [sp, #12]
 8020d56:	ea4f 412b 	mov.w	r1, fp, asr #16
 8020d5a:	142b      	asrs	r3, r5, #16
 8020d5c:	b17a      	cbz	r2, 8020d7e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x2a6>
 8020d5e:	2900      	cmp	r1, #0
 8020d60:	f2c0 813b 	blt.w	8020fda <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 8020d64:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8020d68:	4291      	cmp	r1, r2
 8020d6a:	f280 8136 	bge.w	8020fda <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 8020d6e:	2b00      	cmp	r3, #0
 8020d70:	f2c0 8133 	blt.w	8020fda <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 8020d74:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 8020d78:	4293      	cmp	r3, r2
 8020d7a:	f280 812e 	bge.w	8020fda <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 8020d7e:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8020d82:	9804      	ldr	r0, [sp, #16]
 8020d84:	fb03 1102 	mla	r1, r3, r2, r1
 8020d88:	9b04      	ldr	r3, [sp, #16]
 8020d8a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8020d8e:	f850 7021 	ldr.w	r7, [r0, r1, lsl #2]
 8020d92:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020d96:	f007 16ff 	and.w	r6, r7, #16711935	; 0xff00ff
 8020d9a:	6859      	ldr	r1, [r3, #4]
 8020d9c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8020da0:	f000 18ff 	and.w	r8, r0, #16711935	; 0xff00ff
 8020da4:	685a      	ldr	r2, [r3, #4]
 8020da6:	0e3b      	lsrs	r3, r7, #24
 8020da8:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020dac:	ea4f 6e11 	mov.w	lr, r1, lsr #24
 8020db0:	435e      	muls	r6, r3
 8020db2:	f002 19ff 	and.w	r9, r2, #16711935	; 0xff00ff
 8020db6:	435f      	muls	r7, r3
 8020db8:	ee06 ea90 	vmov	s13, lr
 8020dbc:	0a36      	lsrs	r6, r6, #8
 8020dbe:	ee07 3a90 	vmov	s15, r3
 8020dc2:	0a3f      	lsrs	r7, r7, #8
 8020dc4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8020dc8:	f006 16ff 	and.w	r6, r6, #16711935	; 0xff00ff
 8020dcc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8020dd0:	f407 477f 	and.w	r7, r7, #65280	; 0xff00
 8020dd4:	433e      	orrs	r6, r7
 8020dd6:	f001 17ff 	and.w	r7, r1, #16711935	; 0xff00ff
 8020dda:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8020dde:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8020de2:	fb0e f707 	mul.w	r7, lr, r7
 8020de6:	fb0e f101 	mul.w	r1, lr, r1
 8020dea:	0a3f      	lsrs	r7, r7, #8
 8020dec:	960b      	str	r6, [sp, #44]	; 0x2c
 8020dee:	0a09      	lsrs	r1, r1, #8
 8020df0:	f007 17ff 	and.w	r7, r7, #16711935	; 0xff00ff
 8020df4:	f401 417f 	and.w	r1, r1, #65280	; 0xff00
 8020df8:	430f      	orrs	r7, r1
 8020dfa:	0e01      	lsrs	r1, r0, #24
 8020dfc:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020e00:	fb01 f808 	mul.w	r8, r1, r8
 8020e04:	ee07 1a10 	vmov	s14, r1
 8020e08:	4348      	muls	r0, r1
 8020e0a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020e0e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8020e12:	0a00      	lsrs	r0, r0, #8
 8020e14:	f008 18ff 	and.w	r8, r8, #16711935	; 0xff00ff
 8020e18:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8020e1c:	ea48 0800 	orr.w	r8, r8, r0
 8020e20:	0e10      	lsrs	r0, r2, #24
 8020e22:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020e26:	fb00 f909 	mul.w	r9, r0, r9
 8020e2a:	4342      	muls	r2, r0
 8020e2c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020e30:	0a12      	lsrs	r2, r2, #8
 8020e32:	f009 19ff 	and.w	r9, r9, #16711935	; 0xff00ff
 8020e36:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
 8020e3a:	ea49 0902 	orr.w	r9, r9, r2
 8020e3e:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8020e42:	ee0d 2a10 	vmov	s26, r2
 8020e46:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8020e4a:	ea4f 4319 	mov.w	r3, r9, lsr #16
 8020e4e:	eeb8 dacd 	vcvt.f32.s32	s26, s26
 8020e52:	ee0d 2a90 	vmov	s27, r2
 8020e56:	ee01 3a90 	vmov	s3, r3
 8020e5a:	ea4f 4318 	mov.w	r3, r8, lsr #16
 8020e5e:	eef8 daed 	vcvt.f32.s32	s27, s27
 8020e62:	ee2d da2c 	vmul.f32	s26, s26, s25
 8020e66:	ee01 3a10 	vmov	s2, r3
 8020e6a:	0c3b      	lsrs	r3, r7, #16
 8020e6c:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8020e70:	ee6d daac 	vmul.f32	s27, s27, s25
 8020e74:	eeed 7a26 	vfma.f32	s15, s26, s13
 8020e78:	ee06 0a90 	vmov	s13, r0
 8020e7c:	ee00 3a90 	vmov	s1, r3
 8020e80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020e82:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8020e86:	0c1b      	lsrs	r3, r3, #16
 8020e88:	eef0 2a6d 	vmov.f32	s5, s27
 8020e8c:	eeb0 2a4d 	vmov.f32	s4, s26
 8020e90:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8020e94:	ee00 3a10 	vmov	s0, r3
 8020e98:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8020e9c:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8020ea0:	eead 7a26 	vfma.f32	s14, s26, s13
 8020ea4:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8020ea8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8020eac:	eeed 7a87 	vfma.f32	s15, s27, s14
 8020eb0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8020eb4:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8020eb8:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8020ebc:	4630      	mov	r0, r6
 8020ebe:	f7ff fdf1 	bl	8020aa4 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 8020ec2:	f3c9 2307 	ubfx	r3, r9, #8, #8
 8020ec6:	eeb0 ea40 	vmov.f32	s28, s0
 8020eca:	4630      	mov	r0, r6
 8020ecc:	ee01 3a90 	vmov	s3, r3
 8020ed0:	f3c8 2307 	ubfx	r3, r8, #8, #8
 8020ed4:	eef0 2a6d 	vmov.f32	s5, s27
 8020ed8:	ee01 3a10 	vmov	s2, r3
 8020edc:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8020ee0:	eeb0 2a4d 	vmov.f32	s4, s26
 8020ee4:	ee00 3a90 	vmov	s1, r3
 8020ee8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8020eea:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8020eee:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8020ef2:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8020ef6:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8020efa:	ee00 3a10 	vmov	s0, r3
 8020efe:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8020f02:	f7ff fdcf 	bl	8020aa4 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 8020f06:	eef0 ea40 	vmov.f32	s29, s0
 8020f0a:	fa5f f389 	uxtb.w	r3, r9
 8020f0e:	4630      	mov	r0, r6
 8020f10:	eef0 2a6d 	vmov.f32	s5, s27
 8020f14:	ee01 3a90 	vmov	s3, r3
 8020f18:	fa5f f388 	uxtb.w	r3, r8
 8020f1c:	eeb0 2a4d 	vmov.f32	s4, s26
 8020f20:	ee01 3a10 	vmov	s2, r3
 8020f24:	b2fb      	uxtb	r3, r7
 8020f26:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8020f2a:	ee00 3a90 	vmov	s1, r3
 8020f2e:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 8020f32:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8020f36:	ee00 3a10 	vmov	s0, r3
 8020f3a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8020f3e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8020f42:	f7ff fdaf 	bl	8020aa4 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 8020f46:	2e00      	cmp	r6, #0
 8020f48:	d047      	beq.n	8020fda <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x502>
 8020f4a:	eefc 7aee 	vcvt.u32.f32	s15, s29
 8020f4e:	2eff      	cmp	r6, #255	; 0xff
 8020f50:	ee17 2a90 	vmov	r2, s15
 8020f54:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 8020f58:	f3c2 0285 	ubfx	r2, r2, #2, #6
 8020f5c:	ee17 3a90 	vmov	r3, s15
 8020f60:	eefc 7ace 	vcvt.u32.f32	s15, s28
 8020f64:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8020f68:	ea43 1242 	orr.w	r2, r3, r2, lsl #5
 8020f6c:	ee17 3a90 	vmov	r3, s15
 8020f70:	f3c3 03c4 	ubfx	r3, r3, #3, #5
 8020f74:	ea42 23c3 	orr.w	r3, r2, r3, lsl #11
 8020f78:	d102      	bne.n	8020f80 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x4a8>
 8020f7a:	9a01      	ldr	r2, [sp, #4]
 8020f7c:	2aff      	cmp	r2, #255	; 0xff
 8020f7e:	d02a      	beq.n	8020fd6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x4fe>
 8020f80:	f834 001a 	ldrh.w	r0, [r4, sl, lsl #1]
 8020f84:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8020f88:	f400 67fc 	and.w	r7, r0, #2016	; 0x7e0
 8020f8c:	fb12 fe06 	smulbb	lr, r2, r6
 8020f90:	f420 62ff 	bic.w	r2, r0, #2040	; 0x7f8
 8020f94:	f423 66ff 	bic.w	r6, r3, #2040	; 0x7f8
 8020f98:	f000 001f 	and.w	r0, r0, #31
 8020f9c:	f5ce 3180 	rsb	r1, lr, #65536	; 0x10000
 8020fa0:	f022 0207 	bic.w	r2, r2, #7
 8020fa4:	f026 0607 	bic.w	r6, r6, #7
 8020fa8:	434a      	muls	r2, r1
 8020faa:	434f      	muls	r7, r1
 8020fac:	fb0e 2606 	mla	r6, lr, r6, r2
 8020fb0:	4ad0      	ldr	r2, [pc, #832]	; (80212f4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 8020fb2:	4348      	muls	r0, r1
 8020fb4:	ea02 4616 	and.w	r6, r2, r6, lsr #16
 8020fb8:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 8020fbc:	f003 031f 	and.w	r3, r3, #31
 8020fc0:	fb0e 7202 	mla	r2, lr, r2, r7
 8020fc4:	fb0e 0303 	mla	r3, lr, r3, r0
 8020fc8:	0c12      	lsrs	r2, r2, #16
 8020fca:	f3c3 4304 	ubfx	r3, r3, #16, #5
 8020fce:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8020fd2:	4316      	orrs	r6, r2
 8020fd4:	4333      	orrs	r3, r6
 8020fd6:	f824 301a 	strh.w	r3, [r4, sl, lsl #1]
 8020fda:	9b06      	ldr	r3, [sp, #24]
 8020fdc:	f10a 0a01 	add.w	sl, sl, #1
 8020fe0:	449b      	add	fp, r3
 8020fe2:	9b07      	ldr	r3, [sp, #28]
 8020fe4:	441d      	add	r5, r3
 8020fe6:	e6b1      	b.n	8020d4c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x274>
 8020fe8:	2000      	movs	r0, #0
 8020fea:	9b02      	ldr	r3, [sp, #8]
 8020fec:	4283      	cmp	r3, r0
 8020fee:	f340 816c 	ble.w	80212ca <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 8020ff2:	9b03      	ldr	r3, [sp, #12]
 8020ff4:	ea4f 422b 	mov.w	r2, fp, asr #16
 8020ff8:	1429      	asrs	r1, r5, #16
 8020ffa:	b15b      	cbz	r3, 8021014 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x53c>
 8020ffc:	2a00      	cmp	r2, #0
 8020ffe:	db52      	blt.n	80210a6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 8021000:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8021004:	429a      	cmp	r2, r3
 8021006:	da4e      	bge.n	80210a6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 8021008:	2900      	cmp	r1, #0
 802100a:	db4c      	blt.n	80210a6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 802100c:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8021010:	4299      	cmp	r1, r3
 8021012:	da48      	bge.n	80210a6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 8021014:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8021018:	fb01 2303 	mla	r3, r1, r3, r2
 802101c:	9a04      	ldr	r2, [sp, #16]
 802101e:	f852 6023 	ldr.w	r6, [r2, r3, lsl #2]
 8021022:	0e31      	lsrs	r1, r6, #24
 8021024:	d03f      	beq.n	80210a6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ce>
 8021026:	0972      	lsrs	r2, r6, #5
 8021028:	4bb2      	ldr	r3, [pc, #712]	; (80212f4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 802102a:	29ff      	cmp	r1, #255	; 0xff
 802102c:	ea03 2316 	and.w	r3, r3, r6, lsr #8
 8021030:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021034:	f3c6 06c4 	ubfx	r6, r6, #3, #5
 8021038:	ea43 0302 	orr.w	r3, r3, r2
 802103c:	ea43 0306 	orr.w	r3, r3, r6
 8021040:	b29b      	uxth	r3, r3
 8021042:	d102      	bne.n	802104a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x572>
 8021044:	9a01      	ldr	r2, [sp, #4]
 8021046:	2aff      	cmp	r2, #255	; 0xff
 8021048:	d02b      	beq.n	80210a2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5ca>
 802104a:	f834 7010 	ldrh.w	r7, [r4, r0, lsl #1]
 802104e:	f423 6eff 	bic.w	lr, r3, #2040	; 0x7f8
 8021052:	9a01      	ldr	r2, [sp, #4]
 8021054:	f02e 0e07 	bic.w	lr, lr, #7
 8021058:	f407 6cfc 	and.w	ip, r7, #2016	; 0x7e0
 802105c:	4351      	muls	r1, r2
 802105e:	f427 62ff 	bic.w	r2, r7, #2040	; 0x7f8
 8021062:	f007 071f 	and.w	r7, r7, #31
 8021066:	f5c1 3680 	rsb	r6, r1, #65536	; 0x10000
 802106a:	f022 0207 	bic.w	r2, r2, #7
 802106e:	4372      	muls	r2, r6
 8021070:	fb06 fc0c 	mul.w	ip, r6, ip
 8021074:	fb01 2e0e 	mla	lr, r1, lr, r2
 8021078:	4a9e      	ldr	r2, [pc, #632]	; (80212f4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 802107a:	4377      	muls	r7, r6
 802107c:	ea02 4e1e 	and.w	lr, r2, lr, lsr #16
 8021080:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 8021084:	f003 031f 	and.w	r3, r3, #31
 8021088:	fb01 c202 	mla	r2, r1, r2, ip
 802108c:	fb01 7303 	mla	r3, r1, r3, r7
 8021090:	0c12      	lsrs	r2, r2, #16
 8021092:	f3c3 4304 	ubfx	r3, r3, #16, #5
 8021096:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 802109a:	ea4e 0e02 	orr.w	lr, lr, r2
 802109e:	ea4e 0303 	orr.w	r3, lr, r3
 80210a2:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
 80210a6:	9b06      	ldr	r3, [sp, #24]
 80210a8:	3001      	adds	r0, #1
 80210aa:	449b      	add	fp, r3
 80210ac:	9b07      	ldr	r3, [sp, #28]
 80210ae:	441d      	add	r5, r3
 80210b0:	e79b      	b.n	8020fea <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x512>
 80210b2:	f04f 0e00 	mov.w	lr, #0
 80210b6:	9b02      	ldr	r3, [sp, #8]
 80210b8:	4573      	cmp	r3, lr
 80210ba:	f340 8106 	ble.w	80212ca <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 80210be:	9903      	ldr	r1, [sp, #12]
 80210c0:	ea4f 422b 	mov.w	r2, fp, asr #16
 80210c4:	142b      	asrs	r3, r5, #16
 80210c6:	b179      	cbz	r1, 80210e8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x610>
 80210c8:	2a00      	cmp	r2, #0
 80210ca:	f2c0 8091 	blt.w	80211f0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 80210ce:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 80210d2:	428a      	cmp	r2, r1
 80210d4:	f280 808c 	bge.w	80211f0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 80210d8:	2b00      	cmp	r3, #0
 80210da:	f2c0 8089 	blt.w	80211f0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 80210de:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 80210e2:	428b      	cmp	r3, r1
 80210e4:	f280 8084 	bge.w	80211f0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x718>
 80210e8:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 80210ec:	f3cb 2a07 	ubfx	sl, fp, #8, #8
 80210f0:	9804      	ldr	r0, [sp, #16]
 80210f2:	fb03 2301 	mla	r3, r3, r1, r2
 80210f6:	9a04      	ldr	r2, [sp, #16]
 80210f8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80210fc:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 8021100:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8021104:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021108:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 802110c:	f3c5 2107 	ubfx	r1, r5, #8, #8
 8021110:	6850      	ldr	r0, [r2, #4]
 8021112:	fb01 f70a 	mul.w	r7, r1, sl
 8021116:	0a3f      	lsrs	r7, r7, #8
 8021118:	ebaa 0607 	sub.w	r6, sl, r7
 802111c:	eba1 0907 	sub.w	r9, r1, r7
 8021120:	f5ca 7a80 	rsb	sl, sl, #256	; 0x100
 8021124:	f5c1 7180 	rsb	r1, r1, #256	; 0x100
 8021128:	fb01 f10a 	mul.w	r1, r1, sl
 802112c:	f00c 1aff 	and.w	sl, ip, #16711935	; 0xff00ff
 8021130:	f40c 4c7f 	and.w	ip, ip, #65280	; 0xff00
 8021134:	0a0a      	lsrs	r2, r1, #8
 8021136:	f008 11ff 	and.w	r1, r8, #16711935	; 0xff00ff
 802113a:	f408 487f 	and.w	r8, r8, #65280	; 0xff00
 802113e:	4371      	muls	r1, r6
 8021140:	fb06 f808 	mul.w	r8, r6, r8
 8021144:	fb02 110a 	mla	r1, r2, sl, r1
 8021148:	f000 1aff 	and.w	sl, r0, #16711935	; 0xff00ff
 802114c:	fb02 8c0c 	mla	ip, r2, ip, r8
 8021150:	f400 407f 	and.w	r0, r0, #65280	; 0xff00
 8021154:	fb07 110a 	mla	r1, r7, sl, r1
 8021158:	f003 1aff 	and.w	sl, r3, #16711935	; 0xff00ff
 802115c:	fb07 cc00 	mla	ip, r7, r0, ip
 8021160:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8021164:	fb09 110a 	mla	r1, r9, sl, r1
 8021168:	fb09 cc03 	mla	ip, r9, r3, ip
 802116c:	4b61      	ldr	r3, [pc, #388]	; (80212f4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 802116e:	f001 21ff 	and.w	r1, r1, #4278255360	; 0xff00ff00
 8021172:	f40c 0a7f 	and.w	sl, ip, #16711680	; 0xff0000
 8021176:	ea41 0a0a 	orr.w	sl, r1, sl
 802117a:	ea4f 315a 	mov.w	r1, sl, lsr #13
 802117e:	ea03 431a 	and.w	r3, r3, sl, lsr #16
 8021182:	f3ca 2ac4 	ubfx	sl, sl, #11, #5
 8021186:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802118a:	4319      	orrs	r1, r3
 802118c:	9b01      	ldr	r3, [sp, #4]
 802118e:	2bff      	cmp	r3, #255	; 0xff
 8021190:	ea41 010a 	orr.w	r1, r1, sl
 8021194:	d02a      	beq.n	80211ec <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x714>
 8021196:	f834 201e 	ldrh.w	r2, [r4, lr, lsl #1]
 802119a:	f421 63ff 	bic.w	r3, r1, #2040	; 0x7f8
 802119e:	9e05      	ldr	r6, [sp, #20]
 80211a0:	f422 60ff 	bic.w	r0, r2, #2040	; 0x7f8
 80211a4:	f023 0307 	bic.w	r3, r3, #7
 80211a8:	9f05      	ldr	r7, [sp, #20]
 80211aa:	f020 0007 	bic.w	r0, r0, #7
 80211ae:	4370      	muls	r0, r6
 80211b0:	9e01      	ldr	r6, [sp, #4]
 80211b2:	fb06 0303 	mla	r3, r6, r3, r0
 80211b6:	484f      	ldr	r0, [pc, #316]	; (80212f4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 80211b8:	f402 66fc 	and.w	r6, r2, #2016	; 0x7e0
 80211bc:	f002 021f 	and.w	r2, r2, #31
 80211c0:	ea00 2313 	and.w	r3, r0, r3, lsr #8
 80211c4:	f401 60fc 	and.w	r0, r1, #2016	; 0x7e0
 80211c8:	437e      	muls	r6, r7
 80211ca:	9f01      	ldr	r7, [sp, #4]
 80211cc:	f001 011f 	and.w	r1, r1, #31
 80211d0:	fb07 6000 	mla	r0, r7, r0, r6
 80211d4:	0a00      	lsrs	r0, r0, #8
 80211d6:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 80211da:	4303      	orrs	r3, r0
 80211dc:	9805      	ldr	r0, [sp, #20]
 80211de:	4342      	muls	r2, r0
 80211e0:	b29b      	uxth	r3, r3
 80211e2:	fb07 2101 	mla	r1, r7, r1, r2
 80211e6:	f3c1 2104 	ubfx	r1, r1, #8, #5
 80211ea:	4319      	orrs	r1, r3
 80211ec:	f824 101e 	strh.w	r1, [r4, lr, lsl #1]
 80211f0:	9b06      	ldr	r3, [sp, #24]
 80211f2:	f10e 0e01 	add.w	lr, lr, #1
 80211f6:	449b      	add	fp, r3
 80211f8:	9b07      	ldr	r3, [sp, #28]
 80211fa:	441d      	add	r5, r3
 80211fc:	e75b      	b.n	80210b6 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x5de>
 80211fe:	2600      	movs	r6, #0
 8021200:	9b02      	ldr	r3, [sp, #8]
 8021202:	42b3      	cmp	r3, r6
 8021204:	dd61      	ble.n	80212ca <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 8021206:	9b03      	ldr	r3, [sp, #12]
 8021208:	ea4f 422b 	mov.w	r2, fp, asr #16
 802120c:	1429      	asrs	r1, r5, #16
 802120e:	b15b      	cbz	r3, 8021228 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x750>
 8021210:	2a00      	cmp	r2, #0
 8021212:	db4d      	blt.n	80212b0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 8021214:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 8021218:	429a      	cmp	r2, r3
 802121a:	da49      	bge.n	80212b0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 802121c:	2900      	cmp	r1, #0
 802121e:	db47      	blt.n	80212b0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 8021220:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 8021224:	4299      	cmp	r1, r3
 8021226:	da43      	bge.n	80212b0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d8>
 8021228:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 802122c:	fb01 2303 	mla	r3, r1, r3, r2
 8021230:	9a04      	ldr	r2, [sp, #16]
 8021232:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8021236:	4b2f      	ldr	r3, [pc, #188]	; (80212f4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 8021238:	094a      	lsrs	r2, r1, #5
 802123a:	ea03 2311 	and.w	r3, r3, r1, lsr #8
 802123e:	f3c1 01c4 	ubfx	r1, r1, #3, #5
 8021242:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021246:	4313      	orrs	r3, r2
 8021248:	9a01      	ldr	r2, [sp, #4]
 802124a:	430b      	orrs	r3, r1
 802124c:	2aff      	cmp	r2, #255	; 0xff
 802124e:	b29b      	uxth	r3, r3
 8021250:	d02c      	beq.n	80212ac <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7d4>
 8021252:	f834 1016 	ldrh.w	r1, [r4, r6, lsl #1]
 8021256:	f423 62ff 	bic.w	r2, r3, #2040	; 0x7f8
 802125a:	9f05      	ldr	r7, [sp, #20]
 802125c:	f421 60ff 	bic.w	r0, r1, #2040	; 0x7f8
 8021260:	f022 0207 	bic.w	r2, r2, #7
 8021264:	f020 0007 	bic.w	r0, r0, #7
 8021268:	4378      	muls	r0, r7
 802126a:	9f01      	ldr	r7, [sp, #4]
 802126c:	fb07 0202 	mla	r2, r7, r2, r0
 8021270:	4820      	ldr	r0, [pc, #128]	; (80212f4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x81c>)
 8021272:	f401 67fc 	and.w	r7, r1, #2016	; 0x7e0
 8021276:	f001 011f 	and.w	r1, r1, #31
 802127a:	ea00 2e12 	and.w	lr, r0, r2, lsr #8
 802127e:	9a05      	ldr	r2, [sp, #20]
 8021280:	f403 60fc 	and.w	r0, r3, #2016	; 0x7e0
 8021284:	f003 031f 	and.w	r3, r3, #31
 8021288:	4357      	muls	r7, r2
 802128a:	9a01      	ldr	r2, [sp, #4]
 802128c:	fb02 7000 	mla	r0, r2, r0, r7
 8021290:	0a00      	lsrs	r0, r0, #8
 8021292:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 8021296:	ea4e 0200 	orr.w	r2, lr, r0
 802129a:	9805      	ldr	r0, [sp, #20]
 802129c:	4341      	muls	r1, r0
 802129e:	9801      	ldr	r0, [sp, #4]
 80212a0:	b292      	uxth	r2, r2
 80212a2:	fb00 1303 	mla	r3, r0, r3, r1
 80212a6:	f3c3 2304 	ubfx	r3, r3, #8, #5
 80212aa:	4313      	orrs	r3, r2
 80212ac:	f824 3016 	strh.w	r3, [r4, r6, lsl #1]
 80212b0:	9b06      	ldr	r3, [sp, #24]
 80212b2:	3601      	adds	r6, #1
 80212b4:	449b      	add	fp, r3
 80212b6:	9b07      	ldr	r3, [sp, #28]
 80212b8:	441d      	add	r5, r3
 80212ba:	e7a1      	b.n	8021200 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x728>
 80212bc:	2300      	movs	r3, #0
 80212be:	930b      	str	r3, [sp, #44]	; 0x2c
 80212c0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80212c2:	9b02      	ldr	r3, [sp, #8]
 80212c4:	4293      	cmp	r3, r2
 80212c6:	f300 811b 	bgt.w	8021500 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa28>
 80212ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80212ce:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 80212d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80212d4:	ee79 9a8b 	vadd.f32	s19, s19, s22
 80212d8:	ee3a aa2b 	vadd.f32	s20, s20, s23
 80212dc:	2b00      	cmp	r3, #0
 80212de:	ee7a aa89 	vadd.f32	s21, s21, s18
 80212e2:	f340 82cb 	ble.w	802187c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xda4>
 80212e6:	3b01      	subs	r3, #1
 80212e8:	eeb0 7a48 	vmov.f32	s14, s16
 80212ec:	eef0 7a68 	vmov.f32	s15, s17
 80212f0:	9309      	str	r3, [sp, #36]	; 0x24
 80212f2:	e4ae      	b.n	8020c52 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x17a>
 80212f4:	fffff800 	.word	0xfffff800
 80212f8:	2000      	movs	r0, #0
 80212fa:	9b02      	ldr	r3, [sp, #8]
 80212fc:	4283      	cmp	r3, r0
 80212fe:	dde4      	ble.n	80212ca <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 8021300:	9a03      	ldr	r2, [sp, #12]
 8021302:	ea4f 432b 	mov.w	r3, fp, asr #16
 8021306:	1429      	asrs	r1, r5, #16
 8021308:	b15a      	cbz	r2, 8021322 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x84a>
 802130a:	2b00      	cmp	r3, #0
 802130c:	db49      	blt.n	80213a2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 802130e:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8021312:	4293      	cmp	r3, r2
 8021314:	da45      	bge.n	80213a2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 8021316:	2900      	cmp	r1, #0
 8021318:	db43      	blt.n	80213a2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 802131a:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 802131e:	4291      	cmp	r1, r2
 8021320:	da3f      	bge.n	80213a2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 8021322:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8021326:	fb01 3202 	mla	r2, r1, r2, r3
 802132a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 802132c:	685b      	ldr	r3, [r3, #4]
 802132e:	5c99      	ldrb	r1, [r3, r2]
 8021330:	b3b9      	cbz	r1, 80213a2 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8ca>
 8021332:	9b04      	ldr	r3, [sp, #16]
 8021334:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8021338:	9a01      	ldr	r2, [sp, #4]
 802133a:	2aff      	cmp	r2, #255	; 0xff
 802133c:	d101      	bne.n	8021342 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x86a>
 802133e:	29ff      	cmp	r1, #255	; 0xff
 8021340:	d02d      	beq.n	802139e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8c6>
 8021342:	f834 7010 	ldrh.w	r7, [r4, r0, lsl #1]
 8021346:	f423 6eff 	bic.w	lr, r3, #2040	; 0x7f8
 802134a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 802134e:	f02e 0e07 	bic.w	lr, lr, #7
 8021352:	f407 6cfc 	and.w	ip, r7, #2016	; 0x7e0
 8021356:	fb12 f101 	smulbb	r1, r2, r1
 802135a:	f427 62ff 	bic.w	r2, r7, #2040	; 0x7f8
 802135e:	f007 071f 	and.w	r7, r7, #31
 8021362:	f5c1 3680 	rsb	r6, r1, #65536	; 0x10000
 8021366:	f022 0207 	bic.w	r2, r2, #7
 802136a:	4372      	muls	r2, r6
 802136c:	fb06 fc0c 	mul.w	ip, r6, ip
 8021370:	fb01 2e0e 	mla	lr, r1, lr, r2
 8021374:	4a61      	ldr	r2, [pc, #388]	; (80214fc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa24>)
 8021376:	4377      	muls	r7, r6
 8021378:	ea02 4e1e 	and.w	lr, r2, lr, lsr #16
 802137c:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 8021380:	f003 031f 	and.w	r3, r3, #31
 8021384:	fb01 c202 	mla	r2, r1, r2, ip
 8021388:	fb01 7303 	mla	r3, r1, r3, r7
 802138c:	0c12      	lsrs	r2, r2, #16
 802138e:	f3c3 4304 	ubfx	r3, r3, #16, #5
 8021392:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021396:	ea4e 0e02 	orr.w	lr, lr, r2
 802139a:	ea4e 0303 	orr.w	r3, lr, r3
 802139e:	f824 3010 	strh.w	r3, [r4, r0, lsl #1]
 80213a2:	9b06      	ldr	r3, [sp, #24]
 80213a4:	3001      	adds	r0, #1
 80213a6:	449b      	add	fp, r3
 80213a8:	9b07      	ldr	r3, [sp, #28]
 80213aa:	441d      	add	r5, r3
 80213ac:	e7a5      	b.n	80212fa <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x822>
 80213ae:	2300      	movs	r3, #0
 80213b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80213b2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80213b4:	9b02      	ldr	r3, [sp, #8]
 80213b6:	4293      	cmp	r3, r2
 80213b8:	dd87      	ble.n	80212ca <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 80213ba:	9b03      	ldr	r3, [sp, #12]
 80213bc:	ea4f 422b 	mov.w	r2, fp, asr #16
 80213c0:	1429      	asrs	r1, r5, #16
 80213c2:	b17b      	cbz	r3, 80213e4 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x90c>
 80213c4:	2a00      	cmp	r2, #0
 80213c6:	f2c0 8092 	blt.w	80214ee <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 80213ca:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 80213ce:	429a      	cmp	r2, r3
 80213d0:	f280 808d 	bge.w	80214ee <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 80213d4:	2900      	cmp	r1, #0
 80213d6:	f2c0 808a 	blt.w	80214ee <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 80213da:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 80213de:	4299      	cmp	r1, r3
 80213e0:	f280 8085 	bge.w	80214ee <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa16>
 80213e4:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 80213e8:	f3c5 3603 	ubfx	r6, r5, #12, #4
 80213ec:	9804      	ldr	r0, [sp, #16]
 80213ee:	fb01 2103 	mla	r1, r1, r3, r2
 80213f2:	9a04      	ldr	r2, [sp, #16]
 80213f4:	f830 9011 	ldrh.w	r9, [r0, r1, lsl #1]
 80213f8:	eb02 0741 	add.w	r7, r2, r1, lsl #1
 80213fc:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8021400:	ea4f 4e09 	mov.w	lr, r9, lsl #16
 8021404:	8879      	ldrh	r1, [r7, #2]
 8021406:	f429 69fc 	bic.w	r9, r9, #2016	; 0x7e0
 802140a:	f837 c013 	ldrh.w	ip, [r7, r3, lsl #1]
 802140e:	f00e 6efc 	and.w	lr, lr, #132120576	; 0x7e00000
 8021412:	eb07 0743 	add.w	r7, r7, r3, lsl #1
 8021416:	fb06 f302 	mul.w	r3, r6, r2
 802141a:	ea4e 0e09 	orr.w	lr, lr, r9
 802141e:	ea4f 4901 	mov.w	r9, r1, lsl #16
 8021422:	10db      	asrs	r3, r3, #3
 8021424:	f8b7 8002 	ldrh.w	r8, [r7, #2]
 8021428:	f009 69fc 	and.w	r9, r9, #132120576	; 0x7e00000
 802142c:	f1c6 0710 	rsb	r7, r6, #16
 8021430:	f421 61fc 	bic.w	r1, r1, #2016	; 0x7e0
 8021434:	ea4f 4a08 	mov.w	sl, r8, lsl #16
 8021438:	1abf      	subs	r7, r7, r2
 802143a:	ebc3 0242 	rsb	r2, r3, r2, lsl #1
 802143e:	ea49 0101 	orr.w	r1, r9, r1
 8021442:	f00a 6afc 	and.w	sl, sl, #132120576	; 0x7e00000
 8021446:	eb03 0747 	add.w	r7, r3, r7, lsl #1
 802144a:	f428 68fc 	bic.w	r8, r8, #2016	; 0x7e0
 802144e:	4351      	muls	r1, r2
 8021450:	9a01      	ldr	r2, [sp, #4]
 8021452:	ea4a 0808 	orr.w	r8, sl, r8
 8021456:	fb0e 1107 	mla	r1, lr, r7, r1
 802145a:	2aff      	cmp	r2, #255	; 0xff
 802145c:	fb03 1108 	mla	r1, r3, r8, r1
 8021460:	ea4f 480c 	mov.w	r8, ip, lsl #16
 8021464:	f42c 6cfc 	bic.w	ip, ip, #2016	; 0x7e0
 8021468:	ebc3 0346 	rsb	r3, r3, r6, lsl #1
 802146c:	f008 68fc 	and.w	r8, r8, #132120576	; 0x7e00000
 8021470:	ea48 0c0c 	orr.w	ip, r8, ip
 8021474:	fb03 110c 	mla	r1, r3, ip, r1
 8021478:	ea4f 5951 	mov.w	r9, r1, lsr #21
 802147c:	ea4f 1351 	mov.w	r3, r1, lsr #5
 8021480:	f409 69fc 	and.w	r9, r9, #2016	; 0x7e0
 8021484:	f423 63fc 	bic.w	r3, r3, #2016	; 0x7e0
 8021488:	ea49 0303 	orr.w	r3, r9, r3
 802148c:	b29b      	uxth	r3, r3
 802148e:	d02b      	beq.n	80214e8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa10>
 8021490:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021492:	f423 66ff 	bic.w	r6, r3, #2040	; 0x7f8
 8021496:	9805      	ldr	r0, [sp, #20]
 8021498:	f834 1012 	ldrh.w	r1, [r4, r2, lsl #1]
 802149c:	f026 0607 	bic.w	r6, r6, #7
 80214a0:	f421 62ff 	bic.w	r2, r1, #2040	; 0x7f8
 80214a4:	f401 67fc 	and.w	r7, r1, #2016	; 0x7e0
 80214a8:	f001 011f 	and.w	r1, r1, #31
 80214ac:	f022 0207 	bic.w	r2, r2, #7
 80214b0:	4342      	muls	r2, r0
 80214b2:	9801      	ldr	r0, [sp, #4]
 80214b4:	fb00 2606 	mla	r6, r0, r6, r2
 80214b8:	4a10      	ldr	r2, [pc, #64]	; (80214fc <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa24>)
 80214ba:	9805      	ldr	r0, [sp, #20]
 80214bc:	ea02 2616 	and.w	r6, r2, r6, lsr #8
 80214c0:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 80214c4:	4347      	muls	r7, r0
 80214c6:	9801      	ldr	r0, [sp, #4]
 80214c8:	f003 031f 	and.w	r3, r3, #31
 80214cc:	fb00 7202 	mla	r2, r0, r2, r7
 80214d0:	0a12      	lsrs	r2, r2, #8
 80214d2:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 80214d6:	4316      	orrs	r6, r2
 80214d8:	9a05      	ldr	r2, [sp, #20]
 80214da:	4351      	muls	r1, r2
 80214dc:	fb00 1303 	mla	r3, r0, r3, r1
 80214e0:	f3c3 2304 	ubfx	r3, r3, #8, #5
 80214e4:	4333      	orrs	r3, r6
 80214e6:	b29b      	uxth	r3, r3
 80214e8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80214ea:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 80214ee:	9b06      	ldr	r3, [sp, #24]
 80214f0:	449b      	add	fp, r3
 80214f2:	9b07      	ldr	r3, [sp, #28]
 80214f4:	441d      	add	r5, r3
 80214f6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80214f8:	3301      	adds	r3, #1
 80214fa:	e759      	b.n	80213b0 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x8d8>
 80214fc:	fffff800 	.word	0xfffff800
 8021500:	9903      	ldr	r1, [sp, #12]
 8021502:	ea4f 432b 	mov.w	r3, fp, asr #16
 8021506:	142a      	asrs	r2, r5, #16
 8021508:	b179      	cbz	r1, 802152a <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xa52>
 802150a:	2b00      	cmp	r3, #0
 802150c:	f2c0 8136 	blt.w	802177c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 8021510:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 8021514:	428b      	cmp	r3, r1
 8021516:	f280 8131 	bge.w	802177c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 802151a:	2a00      	cmp	r2, #0
 802151c:	f2c0 812e 	blt.w	802177c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 8021520:	f9bd 104e 	ldrsh.w	r1, [sp, #78]	; 0x4e
 8021524:	428a      	cmp	r2, r1
 8021526:	f280 8129 	bge.w	802177c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 802152a:	f9bd 104c 	ldrsh.w	r1, [sp, #76]	; 0x4c
 802152e:	fb02 3301 	mla	r3, r2, r1, r3
 8021532:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 8021534:	6850      	ldr	r0, [r2, #4]
 8021536:	18c2      	adds	r2, r0, r3
 8021538:	5cc0      	ldrb	r0, [r0, r3]
 802153a:	900d      	str	r0, [sp, #52]	; 0x34
 802153c:	7850      	ldrb	r0, [r2, #1]
 802153e:	eddd 7a0d 	vldr	s15, [sp, #52]	; 0x34
 8021542:	900e      	str	r0, [sp, #56]	; 0x38
 8021544:	5c50      	ldrb	r0, [r2, r1]
 8021546:	440a      	add	r2, r1
 8021548:	eddd 6a0e 	vldr	s13, [sp, #56]	; 0x38
 802154c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8021550:	7852      	ldrb	r2, [r2, #1]
 8021552:	ee07 0a10 	vmov	s14, r0
 8021556:	eef8 6a66 	vcvt.f32.u32	s13, s13
 802155a:	900f      	str	r0, [sp, #60]	; 0x3c
 802155c:	9210      	str	r2, [sp, #64]	; 0x40
 802155e:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8021562:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8021566:	ee0d 2a10 	vmov	s26, r2
 802156a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 802156e:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8021572:	eeb8 dacd 	vcvt.f32.s32	s26, s26
 8021576:	ee0d 2a90 	vmov	s27, r2
 802157a:	ee2d da2c 	vmul.f32	s26, s26, s25
 802157e:	eef8 daed 	vcvt.f32.s32	s27, s27
 8021582:	eeed 7a26 	vfma.f32	s15, s26, s13
 8021586:	eddd 6a10 	vldr	s13, [sp, #64]	; 0x40
 802158a:	ee6d daac 	vmul.f32	s27, s27, s25
 802158e:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8021592:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8021596:	eead 7a26 	vfma.f32	s14, s26, s13
 802159a:	ee37 7a67 	vsub.f32	s14, s14, s15
 802159e:	eeed 7a87 	vfma.f32	s15, s27, s14
 80215a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80215a6:	ee17 6a90 	vmov	r6, s15
 80215aa:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
 80215ae:	f000 80e5 	beq.w	802177c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xca4>
 80215b2:	9a04      	ldr	r2, [sp, #16]
 80215b4:	eef0 2a6d 	vmov.f32	s5, s27
 80215b8:	eeb0 2a4d 	vmov.f32	s4, s26
 80215bc:	eb02 0043 	add.w	r0, r2, r3, lsl #1
 80215c0:	f832 7013 	ldrh.w	r7, [r2, r3, lsl #1]
 80215c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80215c6:	f830 9011 	ldrh.w	r9, [r0, r1, lsl #1]
 80215ca:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80215ce:	f8b0 8002 	ldrh.w	r8, [r0, #2]
 80215d2:	f8b1 a002 	ldrh.w	sl, [r1, #2]
 80215d6:	f00a 001f 	and.w	r0, sl, #31
 80215da:	4358      	muls	r0, r3
 80215dc:	1203      	asrs	r3, r0, #8
 80215de:	f009 001f 	and.w	r0, r9, #31
 80215e2:	ee01 3a90 	vmov	s3, r3
 80215e6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80215e8:	4358      	muls	r0, r3
 80215ea:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80215ee:	1203      	asrs	r3, r0, #8
 80215f0:	f008 001f 	and.w	r0, r8, #31
 80215f4:	ee01 3a10 	vmov	s2, r3
 80215f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80215fa:	4358      	muls	r0, r3
 80215fc:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 8021600:	1203      	asrs	r3, r0, #8
 8021602:	f007 001f 	and.w	r0, r7, #31
 8021606:	ee00 3a90 	vmov	s1, r3
 802160a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 802160c:	4358      	muls	r0, r3
 802160e:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8021612:	1203      	asrs	r3, r0, #8
 8021614:	4630      	mov	r0, r6
 8021616:	ee00 3a10 	vmov	s0, r3
 802161a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 802161e:	f7ff fa41 	bl	8020aa4 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 8021622:	f3ca 1045 	ubfx	r0, sl, #5, #6
 8021626:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021628:	eeb0 ea40 	vmov.f32	s28, s0
 802162c:	eef0 2a6d 	vmov.f32	s5, s27
 8021630:	4358      	muls	r0, r3
 8021632:	eeb0 2a4d 	vmov.f32	s4, s26
 8021636:	1203      	asrs	r3, r0, #8
 8021638:	f3c9 1045 	ubfx	r0, r9, #5, #6
 802163c:	ee01 3a90 	vmov	s3, r3
 8021640:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8021642:	4358      	muls	r0, r3
 8021644:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8021648:	1203      	asrs	r3, r0, #8
 802164a:	f3c8 1045 	ubfx	r0, r8, #5, #6
 802164e:	ee01 3a10 	vmov	s2, r3
 8021652:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8021654:	4358      	muls	r0, r3
 8021656:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 802165a:	1203      	asrs	r3, r0, #8
 802165c:	f3c7 1045 	ubfx	r0, r7, #5, #6
 8021660:	0aff      	lsrs	r7, r7, #11
 8021662:	ee00 3a90 	vmov	s1, r3
 8021666:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8021668:	4358      	muls	r0, r3
 802166a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 802166e:	1203      	asrs	r3, r0, #8
 8021670:	4630      	mov	r0, r6
 8021672:	ee00 3a10 	vmov	s0, r3
 8021676:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 802167a:	f7ff fa13 	bl	8020aa4 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 802167e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8021680:	ea4f 21da 	mov.w	r1, sl, lsr #11
 8021684:	eef0 ea40 	vmov.f32	s29, s0
 8021688:	ea4f 22d9 	mov.w	r2, r9, lsr #11
 802168c:	4630      	mov	r0, r6
 802168e:	fb03 fa01 	mul.w	sl, r3, r1
 8021692:	eef0 2a6d 	vmov.f32	s5, s27
 8021696:	eeb0 2a4d 	vmov.f32	s4, s26
 802169a:	ea4f 232a 	mov.w	r3, sl, asr #8
 802169e:	ee01 3a90 	vmov	s3, r3
 80216a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80216a4:	fb03 f902 	mul.w	r9, r3, r2
 80216a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80216aa:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80216ae:	ea4f 2329 	mov.w	r3, r9, asr #8
 80216b2:	ee01 3a10 	vmov	s2, r3
 80216b6:	ea4f 23d8 	mov.w	r3, r8, lsr #11
 80216ba:	fb02 f803 	mul.w	r8, r2, r3
 80216be:	eeb8 1ac1 	vcvt.f32.s32	s2, s2
 80216c2:	ea4f 2328 	mov.w	r3, r8, asr #8
 80216c6:	ee00 3a90 	vmov	s1, r3
 80216ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80216cc:	437b      	muls	r3, r7
 80216ce:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80216d2:	121b      	asrs	r3, r3, #8
 80216d4:	ee00 3a10 	vmov	s0, r3
 80216d8:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80216dc:	f7ff f9e2 	bl	8020aa4 <_ZN8touchgfx26LCD16bilinearInterpolate2DEffffffh>
 80216e0:	eefc 7aee 	vcvt.u32.f32	s15, s29
 80216e4:	2eff      	cmp	r6, #255	; 0xff
 80216e6:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 80216ea:	eefc 7ac0 	vcvt.u32.f32	s15, s0
 80216ee:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 80216f2:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 80216f6:	eefc 7ace 	vcvt.u32.f32	s15, s28
 80216fa:	f89d 3034 	ldrb.w	r3, [sp, #52]	; 0x34
 80216fe:	ea4f 23c3 	mov.w	r3, r3, lsl #11
 8021702:	edcd 7a0d 	vstr	s15, [sp, #52]	; 0x34
 8021706:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 802170a:	f89d 2034 	ldrb.w	r2, [sp, #52]	; 0x34
 802170e:	ea43 0302 	orr.w	r3, r3, r2
 8021712:	b29b      	uxth	r3, r3
 8021714:	d102      	bne.n	802171c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc44>
 8021716:	9a01      	ldr	r2, [sp, #4]
 8021718:	2aff      	cmp	r2, #255	; 0xff
 802171a:	d02c      	beq.n	8021776 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc9e>
 802171c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 802171e:	f423 67ff 	bic.w	r7, r3, #2040	; 0x7f8
 8021722:	f834 0012 	ldrh.w	r0, [r4, r2, lsl #1]
 8021726:	f027 0707 	bic.w	r7, r7, #7
 802172a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 802172e:	f400 6efc 	and.w	lr, r0, #2016	; 0x7e0
 8021732:	fb12 f606 	smulbb	r6, r2, r6
 8021736:	f420 62ff 	bic.w	r2, r0, #2040	; 0x7f8
 802173a:	f000 001f 	and.w	r0, r0, #31
 802173e:	f5c6 3180 	rsb	r1, r6, #65536	; 0x10000
 8021742:	f022 0207 	bic.w	r2, r2, #7
 8021746:	434a      	muls	r2, r1
 8021748:	fb01 fe0e 	mul.w	lr, r1, lr
 802174c:	fb06 2707 	mla	r7, r6, r7, r2
 8021750:	4a4d      	ldr	r2, [pc, #308]	; (8021888 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xdb0>)
 8021752:	4348      	muls	r0, r1
 8021754:	ea02 4717 	and.w	r7, r2, r7, lsr #16
 8021758:	f403 62fc 	and.w	r2, r3, #2016	; 0x7e0
 802175c:	f003 031f 	and.w	r3, r3, #31
 8021760:	fb06 e202 	mla	r2, r6, r2, lr
 8021764:	fb06 0303 	mla	r3, r6, r3, r0
 8021768:	0c12      	lsrs	r2, r2, #16
 802176a:	f3c3 4304 	ubfx	r3, r3, #16, #5
 802176e:	f402 62fc 	and.w	r2, r2, #2016	; 0x7e0
 8021772:	4317      	orrs	r7, r2
 8021774:	433b      	orrs	r3, r7
 8021776:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8021778:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
 802177c:	9b06      	ldr	r3, [sp, #24]
 802177e:	449b      	add	fp, r3
 8021780:	9b07      	ldr	r3, [sp, #28]
 8021782:	441d      	add	r5, r3
 8021784:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8021786:	3301      	adds	r3, #1
 8021788:	e599      	b.n	80212be <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7e6>
 802178a:	9b01      	ldr	r3, [sp, #4]
 802178c:	2bff      	cmp	r3, #255	; 0xff
 802178e:	d105      	bne.n	802179c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcc4>
 8021790:	2300      	movs	r3, #0
 8021792:	9a02      	ldr	r2, [sp, #8]
 8021794:	429a      	cmp	r2, r3
 8021796:	dc51      	bgt.n	802183c <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd64>
 8021798:	4613      	mov	r3, r2
 802179a:	e596      	b.n	80212ca <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 802179c:	2000      	movs	r0, #0
 802179e:	9b02      	ldr	r3, [sp, #8]
 80217a0:	4283      	cmp	r3, r0
 80217a2:	f77f ad92 	ble.w	80212ca <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x7f2>
 80217a6:	9b03      	ldr	r3, [sp, #12]
 80217a8:	ea4f 422b 	mov.w	r2, fp, asr #16
 80217ac:	1429      	asrs	r1, r5, #16
 80217ae:	b15b      	cbz	r3, 80217c8 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcf0>
 80217b0:	2a00      	cmp	r2, #0
 80217b2:	db3d      	blt.n	8021830 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 80217b4:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 80217b8:	429a      	cmp	r2, r3
 80217ba:	da39      	bge.n	8021830 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 80217bc:	2900      	cmp	r1, #0
 80217be:	db37      	blt.n	8021830 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 80217c0:	f9bd 304e 	ldrsh.w	r3, [sp, #78]	; 0x4e
 80217c4:	4299      	cmp	r1, r3
 80217c6:	da33      	bge.n	8021830 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd58>
 80217c8:	f9bd 304c 	ldrsh.w	r3, [sp, #76]	; 0x4c
 80217cc:	9f05      	ldr	r7, [sp, #20]
 80217ce:	fb01 2303 	mla	r3, r1, r3, r2
 80217d2:	f834 1010 	ldrh.w	r1, [r4, r0, lsl #1]
 80217d6:	9a04      	ldr	r2, [sp, #16]
 80217d8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 80217dc:	f421 63ff 	bic.w	r3, r1, #2040	; 0x7f8
 80217e0:	f422 66ff 	bic.w	r6, r2, #2040	; 0x7f8
 80217e4:	f023 0307 	bic.w	r3, r3, #7
 80217e8:	f402 6efc 	and.w	lr, r2, #2016	; 0x7e0
 80217ec:	f002 021f 	and.w	r2, r2, #31
 80217f0:	437b      	muls	r3, r7
 80217f2:	f026 0607 	bic.w	r6, r6, #7
 80217f6:	9f01      	ldr	r7, [sp, #4]
 80217f8:	fb07 3606 	mla	r6, r7, r6, r3
 80217fc:	4b22      	ldr	r3, [pc, #136]	; (8021888 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xdb0>)
 80217fe:	f401 67fc 	and.w	r7, r1, #2016	; 0x7e0
 8021802:	f001 011f 	and.w	r1, r1, #31
 8021806:	ea03 2616 	and.w	r6, r3, r6, lsr #8
 802180a:	9b05      	ldr	r3, [sp, #20]
 802180c:	435f      	muls	r7, r3
 802180e:	9b01      	ldr	r3, [sp, #4]
 8021810:	fb03 730e 	mla	r3, r3, lr, r7
 8021814:	0a1b      	lsrs	r3, r3, #8
 8021816:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 802181a:	431e      	orrs	r6, r3
 802181c:	9b05      	ldr	r3, [sp, #20]
 802181e:	4359      	muls	r1, r3
 8021820:	9b01      	ldr	r3, [sp, #4]
 8021822:	fb03 1202 	mla	r2, r3, r2, r1
 8021826:	f3c2 2204 	ubfx	r2, r2, #8, #5
 802182a:	4316      	orrs	r6, r2
 802182c:	f824 6010 	strh.w	r6, [r4, r0, lsl #1]
 8021830:	9b06      	ldr	r3, [sp, #24]
 8021832:	3001      	adds	r0, #1
 8021834:	449b      	add	fp, r3
 8021836:	9b07      	ldr	r3, [sp, #28]
 8021838:	441d      	add	r5, r3
 802183a:	e7b0      	b.n	802179e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcc6>
 802183c:	9a03      	ldr	r2, [sp, #12]
 802183e:	ea4f 412b 	mov.w	r1, fp, asr #16
 8021842:	1428      	asrs	r0, r5, #16
 8021844:	b15a      	cbz	r2, 802185e <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd86>
 8021846:	2900      	cmp	r1, #0
 8021848:	db12      	blt.n	8021870 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 802184a:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 802184e:	4291      	cmp	r1, r2
 8021850:	da0e      	bge.n	8021870 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 8021852:	2800      	cmp	r0, #0
 8021854:	db0c      	blt.n	8021870 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 8021856:	f9bd 204e 	ldrsh.w	r2, [sp, #78]	; 0x4e
 802185a:	4290      	cmp	r0, r2
 802185c:	da08      	bge.n	8021870 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd98>
 802185e:	f9bd 204c 	ldrsh.w	r2, [sp, #76]	; 0x4c
 8021862:	fb00 1202 	mla	r2, r0, r2, r1
 8021866:	9904      	ldr	r1, [sp, #16]
 8021868:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 802186c:	f824 2013 	strh.w	r2, [r4, r3, lsl #1]
 8021870:	9a06      	ldr	r2, [sp, #24]
 8021872:	3301      	adds	r3, #1
 8021874:	4493      	add	fp, r2
 8021876:	9a07      	ldr	r2, [sp, #28]
 8021878:	4415      	add	r5, r2
 802187a:	e78a      	b.n	8021792 <_ZN8touchgfx8LCD16bpp22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xcba>
 802187c:	b015      	add	sp, #84	; 0x54
 802187e:	ecbd 8b0e 	vpop	{d8-d14}
 8021882:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021886:	bf00      	nop
 8021888:	fffff800 	.word	0xfffff800

0802188c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 802188c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021890:	b08f      	sub	sp, #60	; 0x3c
 8021892:	460c      	mov	r4, r1
 8021894:	4680      	mov	r8, r0
 8021896:	4699      	mov	r9, r3
 8021898:	6808      	ldr	r0, [r1, #0]
 802189a:	ab0a      	add	r3, sp, #40	; 0x28
 802189c:	6849      	ldr	r1, [r1, #4]
 802189e:	c303      	stmia	r3!, {r0, r1}
 80218a0:	6810      	ldr	r0, [r2, #0]
 80218a2:	ab0c      	add	r3, sp, #48	; 0x30
 80218a4:	6851      	ldr	r1, [r2, #4]
 80218a6:	c303      	stmia	r3!, {r0, r1}
 80218a8:	a80a      	add	r0, sp, #40	; 0x28
 80218aa:	f7fc fe75 	bl	801e598 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80218ae:	4621      	mov	r1, r4
 80218b0:	a80c      	add	r0, sp, #48	; 0x30
 80218b2:	4c58      	ldr	r4, [pc, #352]	; (8021a14 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 80218b4:	f7fc fe58 	bl	801e568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80218b8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
 80218bc:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	; 0x32
 80218c0:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
 80218c4:	6820      	ldr	r0, [r4, #0]
 80218c6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80218ca:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	; 0x34
 80218ce:	eb08 0881 	add.w	r8, r8, r1, lsl #2
 80218d2:	f8bd 1028 	ldrh.w	r1, [sp, #40]	; 0x28
 80218d6:	440a      	add	r2, r1
 80218d8:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 80218dc:	f8bd 202a 	ldrh.w	r2, [sp, #42]	; 0x2a
 80218e0:	4413      	add	r3, r2
 80218e2:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
 80218e6:	f9bd 3036 	ldrsh.w	r3, [sp, #54]	; 0x36
 80218ea:	9305      	str	r3, [sp, #20]
 80218ec:	6803      	ldr	r3, [r0, #0]
 80218ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80218f0:	4798      	blx	r3
 80218f2:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 80218f6:	d118      	bne.n	802192a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9e>
 80218f8:	f010 0f20 	tst.w	r0, #32
 80218fc:	6820      	ldr	r0, [r4, #0]
 80218fe:	d017      	beq.n	8021930 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa4>
 8021900:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8021904:	b2bf      	uxth	r7, r7
 8021906:	6801      	ldr	r1, [r0, #0]
 8021908:	9402      	str	r4, [sp, #8]
 802190a:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 802190e:	f8cd 900c 	str.w	r9, [sp, #12]
 8021912:	9401      	str	r4, [sp, #4]
 8021914:	9700      	str	r7, [sp, #0]
 8021916:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
 802191a:	6c4c      	ldr	r4, [r1, #68]	; 0x44
 802191c:	4641      	mov	r1, r8
 802191e:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
 8021922:	47a0      	blx	r4
 8021924:	b00f      	add	sp, #60	; 0x3c
 8021926:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802192a:	f010 0f40 	tst.w	r0, #64	; 0x40
 802192e:	e7e5      	b.n	80218fc <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x70>
 8021930:	6803      	ldr	r3, [r0, #0]
 8021932:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8021a1c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x190>
 8021936:	6a1b      	ldr	r3, [r3, #32]
 8021938:	4798      	blx	r3
 802193a:	4a37      	ldr	r2, [pc, #220]	; (8021a18 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 802193c:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	; 0x30
 8021940:	f04f 0c00 	mov.w	ip, #0
 8021944:	8813      	ldrh	r3, [r2, #0]
 8021946:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	; 0x32
 802194a:	9209      	str	r2, [sp, #36]	; 0x24
 802194c:	fb04 1303 	mla	r3, r4, r3, r1
 8021950:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8021954:	ea27 73e7 	bic.w	r3, r7, r7, asr #31
 8021958:	0099      	lsls	r1, r3, #2
 802195a:	005b      	lsls	r3, r3, #1
 802195c:	9108      	str	r1, [sp, #32]
 802195e:	9307      	str	r3, [sp, #28]
 8021960:	9b05      	ldr	r3, [sp, #20]
 8021962:	459c      	cmp	ip, r3
 8021964:	da4f      	bge.n	8021a06 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17a>
 8021966:	4686      	mov	lr, r0
 8021968:	2300      	movs	r3, #0
 802196a:	42bb      	cmp	r3, r7
 802196c:	da3a      	bge.n	80219e4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x158>
 802196e:	f858 5023 	ldr.w	r5, [r8, r3, lsl #2]
 8021972:	0e2e      	lsrs	r6, r5, #24
 8021974:	d012      	beq.n	802199c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8021976:	ea0a 2415 	and.w	r4, sl, r5, lsr #8
 802197a:	f3c5 02c4 	ubfx	r2, r5, #3, #5
 802197e:	0969      	lsrs	r1, r5, #5
 8021980:	2eff      	cmp	r6, #255	; 0xff
 8021982:	b2a4      	uxth	r4, r4
 8021984:	9206      	str	r2, [sp, #24]
 8021986:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 802198a:	d10b      	bne.n	80219a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x118>
 802198c:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
 8021990:	d108      	bne.n	80219a4 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x118>
 8021992:	430c      	orrs	r4, r1
 8021994:	4322      	orrs	r2, r4
 8021996:	4614      	mov	r4, r2
 8021998:	f8ae 4000 	strh.w	r4, [lr]
 802199c:	f10e 0e02 	add.w	lr, lr, #2
 80219a0:	3301      	adds	r3, #1
 80219a2:	e7e2      	b.n	802196a <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xde>
 80219a4:	fb06 f609 	mul.w	r6, r6, r9
 80219a8:	f8be 5000 	ldrh.w	r5, [lr]
 80219ac:	f5c6 3b80 	rsb	fp, r6, #65536	; 0x10000
 80219b0:	ea05 020a 	and.w	r2, r5, sl
 80219b4:	4374      	muls	r4, r6
 80219b6:	4371      	muls	r1, r6
 80219b8:	fb0b 4402 	mla	r4, fp, r2, r4
 80219bc:	f405 62fc 	and.w	r2, r5, #2016	; 0x7e0
 80219c0:	f005 051f 	and.w	r5, r5, #31
 80219c4:	fb0b 1102 	mla	r1, fp, r2, r1
 80219c8:	9a06      	ldr	r2, [sp, #24]
 80219ca:	ea0a 4414 	and.w	r4, sl, r4, lsr #16
 80219ce:	0c09      	lsrs	r1, r1, #16
 80219d0:	4356      	muls	r6, r2
 80219d2:	f401 61fc 	and.w	r1, r1, #2016	; 0x7e0
 80219d6:	fb0b 6505 	mla	r5, fp, r5, r6
 80219da:	430c      	orrs	r4, r1
 80219dc:	f3c5 4504 	ubfx	r5, r5, #16, #5
 80219e0:	432c      	orrs	r4, r5
 80219e2:	e7d9      	b.n	8021998 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10c>
 80219e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80219e6:	f10c 0c01 	add.w	ip, ip, #1
 80219ea:	9a07      	ldr	r2, [sp, #28]
 80219ec:	881b      	ldrh	r3, [r3, #0]
 80219ee:	1bdb      	subs	r3, r3, r7
 80219f0:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 80219f4:	9a08      	ldr	r2, [sp, #32]
 80219f6:	4418      	add	r0, r3
 80219f8:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	; 0x2c
 80219fc:	1bdb      	subs	r3, r3, r7
 80219fe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8021a02:	4498      	add	r8, r3
 8021a04:	e7ac      	b.n	8021960 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xd4>
 8021a06:	4b03      	ldr	r3, [pc, #12]	; (8021a14 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 8021a08:	6818      	ldr	r0, [r3, #0]
 8021a0a:	6803      	ldr	r3, [r0, #0]
 8021a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021a0e:	4798      	blx	r3
 8021a10:	e788      	b.n	8021924 <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x98>
 8021a12:	bf00      	nop
 8021a14:	20009d34 	.word	0x20009d34
 8021a18:	20009d2e 	.word	0x20009d2e
 8021a1c:	fffff800 	.word	0xfffff800

08021a20 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8021a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021a24:	9d06      	ldr	r5, [sp, #24]
 8021a26:	461c      	mov	r4, r3
 8021a28:	460e      	mov	r6, r1
 8021a2a:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8021a2e:	f89d 7020 	ldrb.w	r7, [sp, #32]
 8021a32:	b142      	cbz	r2, 8021a46 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8021a34:	2a02      	cmp	r2, #2
 8021a36:	d010      	beq.n	8021a5a <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x3a>
 8021a38:	4b0b      	ldr	r3, [pc, #44]	; (8021a68 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x48>)
 8021a3a:	f240 11b9 	movw	r1, #441	; 0x1b9
 8021a3e:	4a0b      	ldr	r2, [pc, #44]	; (8021a6c <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x4c>)
 8021a40:	480b      	ldr	r0, [pc, #44]	; (8021a70 <_ZN8touchgfx8LCD16bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x50>)
 8021a42:	f000 fd0b 	bl	802245c <__assert_func>
 8021a46:	6802      	ldr	r2, [r0, #0]
 8021a48:	9306      	str	r3, [sp, #24]
 8021a4a:	462b      	mov	r3, r5
 8021a4c:	9707      	str	r7, [sp, #28]
 8021a4e:	6916      	ldr	r6, [r2, #16]
 8021a50:	4622      	mov	r2, r4
 8021a52:	46b4      	mov	ip, r6
 8021a54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021a58:	4760      	bx	ip
 8021a5a:	462a      	mov	r2, r5
 8021a5c:	4621      	mov	r1, r4
 8021a5e:	4630      	mov	r0, r6
 8021a60:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021a64:	f7ff bf12 	b.w	802188c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021a68:	0802636c 	.word	0x0802636c
 8021a6c:	080264cb 	.word	0x080264cb
 8021a70:	0802633a 	.word	0x0802633a

08021a74 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>:
 8021a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021a78:	b08b      	sub	sp, #44	; 0x2c
 8021a7a:	460e      	mov	r6, r1
 8021a7c:	4604      	mov	r4, r0
 8021a7e:	6851      	ldr	r1, [r2, #4]
 8021a80:	6810      	ldr	r0, [r2, #0]
 8021a82:	ad06      	add	r5, sp, #24
 8021a84:	4617      	mov	r7, r2
 8021a86:	f89d b050 	ldrb.w	fp, [sp, #80]	; 0x50
 8021a8a:	c503      	stmia	r5!, {r0, r1}
 8021a8c:	6818      	ldr	r0, [r3, #0]
 8021a8e:	ad08      	add	r5, sp, #32
 8021a90:	6859      	ldr	r1, [r3, #4]
 8021a92:	c503      	stmia	r5!, {r0, r1}
 8021a94:	a806      	add	r0, sp, #24
 8021a96:	f7fc fd7f 	bl	801e598 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8021a9a:	4639      	mov	r1, r7
 8021a9c:	a808      	add	r0, sp, #32
 8021a9e:	f7fc fd63 	bl	801e568 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8021aa2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8021aa6:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	; 0x22
 8021aaa:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8021aae:	f9bd 5024 	ldrsh.w	r5, [sp, #36]	; 0x24
 8021ab2:	fb11 2103 	smlabb	r1, r1, r3, r2
 8021ab6:	eb04 0441 	add.w	r4, r4, r1, lsl #1
 8021aba:	1871      	adds	r1, r6, r1
 8021abc:	9101      	str	r1, [sp, #4]
 8021abe:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8021ac2:	440a      	add	r2, r1
 8021ac4:	f8ad 2020 	strh.w	r2, [sp, #32]
 8021ac8:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8021acc:	4413      	add	r3, r2
 8021ace:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8021ad2:	f9bd 3026 	ldrsh.w	r3, [sp, #38]	; 0x26
 8021ad6:	9302      	str	r3, [sp, #8]
 8021ad8:	4b64      	ldr	r3, [pc, #400]	; (8021c6c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1f8>)
 8021ada:	6818      	ldr	r0, [r3, #0]
 8021adc:	6803      	ldr	r3, [r0, #0]
 8021ade:	6a1b      	ldr	r3, [r3, #32]
 8021ae0:	4798      	blx	r3
 8021ae2:	4b63      	ldr	r3, [pc, #396]	; (8021c70 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1fc>)
 8021ae4:	f9bd 6022 	ldrsh.w	r6, [sp, #34]	; 0x22
 8021ae8:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
 8021aec:	881a      	ldrh	r2, [r3, #0]
 8021aee:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 8021af2:	fb06 1202 	mla	r2, r6, r2, r1
 8021af6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
 8021afa:	ea25 72e5 	bic.w	r2, r5, r5, asr #31
 8021afe:	b212      	sxth	r2, r2
 8021b00:	9204      	str	r2, [sp, #16]
 8021b02:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8021b06:	9203      	str	r2, [sp, #12]
 8021b08:	d051      	beq.n	8021bae <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x13a>
 8021b0a:	f04f 0800 	mov.w	r8, #0
 8021b0e:	f8df 9164 	ldr.w	r9, [pc, #356]	; 8021c74 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x200>
 8021b12:	9305      	str	r3, [sp, #20]
 8021b14:	9b02      	ldr	r3, [sp, #8]
 8021b16:	4598      	cmp	r8, r3
 8021b18:	f280 809f 	bge.w	8021c5a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1e6>
 8021b1c:	2100      	movs	r1, #0
 8021b1e:	42a9      	cmp	r1, r5
 8021b20:	da30      	bge.n	8021b84 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x110>
 8021b22:	9b01      	ldr	r3, [sp, #4]
 8021b24:	5c5e      	ldrb	r6, [r3, r1]
 8021b26:	b35e      	cbz	r6, 8021b80 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x10c>
 8021b28:	f830 e011 	ldrh.w	lr, [r0, r1, lsl #1]
 8021b2c:	fb1b f606 	smulbb	r6, fp, r6
 8021b30:	f834 2011 	ldrh.w	r2, [r4, r1, lsl #1]
 8021b34:	f5c6 3780 	rsb	r7, r6, #65536	; 0x10000
 8021b38:	ea0e 0309 	and.w	r3, lr, r9
 8021b3c:	ea02 0c09 	and.w	ip, r2, r9
 8021b40:	f40e 6afc 	and.w	sl, lr, #2016	; 0x7e0
 8021b44:	437b      	muls	r3, r7
 8021b46:	f00e 0e1f 	and.w	lr, lr, #31
 8021b4a:	fb07 fa0a 	mul.w	sl, r7, sl
 8021b4e:	fb06 3c0c 	mla	ip, r6, ip, r3
 8021b52:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 8021b56:	fb07 fe0e 	mul.w	lr, r7, lr
 8021b5a:	f002 021f 	and.w	r2, r2, #31
 8021b5e:	fb06 a303 	mla	r3, r6, r3, sl
 8021b62:	ea09 4c1c 	and.w	ip, r9, ip, lsr #16
 8021b66:	fb06 ee02 	mla	lr, r6, r2, lr
 8021b6a:	0c1b      	lsrs	r3, r3, #16
 8021b6c:	f3ce 4e04 	ubfx	lr, lr, #16, #5
 8021b70:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021b74:	ea4c 0c03 	orr.w	ip, ip, r3
 8021b78:	ea4c 0c0e 	orr.w	ip, ip, lr
 8021b7c:	f820 c011 	strh.w	ip, [r0, r1, lsl #1]
 8021b80:	3101      	adds	r1, #1
 8021b82:	e7cc      	b.n	8021b1e <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xaa>
 8021b84:	9b05      	ldr	r3, [sp, #20]
 8021b86:	f108 0801 	add.w	r8, r8, #1
 8021b8a:	9a03      	ldr	r2, [sp, #12]
 8021b8c:	881b      	ldrh	r3, [r3, #0]
 8021b8e:	1b5b      	subs	r3, r3, r5
 8021b90:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021b94:	4418      	add	r0, r3
 8021b96:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8021b9a:	1b5b      	subs	r3, r3, r5
 8021b9c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8021ba0:	4414      	add	r4, r2
 8021ba2:	9a04      	ldr	r2, [sp, #16]
 8021ba4:	4413      	add	r3, r2
 8021ba6:	9a01      	ldr	r2, [sp, #4]
 8021ba8:	441a      	add	r2, r3
 8021baa:	9201      	str	r2, [sp, #4]
 8021bac:	e7b2      	b.n	8021b14 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0xa0>
 8021bae:	f04f 0900 	mov.w	r9, #0
 8021bb2:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 8021c74 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x200>
 8021bb6:	9305      	str	r3, [sp, #20]
 8021bb8:	9b02      	ldr	r3, [sp, #8]
 8021bba:	4599      	cmp	r9, r3
 8021bbc:	da4d      	bge.n	8021c5a <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1e6>
 8021bbe:	4607      	mov	r7, r0
 8021bc0:	2600      	movs	r6, #0
 8021bc2:	42ae      	cmp	r6, r5
 8021bc4:	da34      	bge.n	8021c30 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1bc>
 8021bc6:	9b01      	ldr	r3, [sp, #4]
 8021bc8:	5d99      	ldrb	r1, [r3, r6]
 8021bca:	b121      	cbz	r1, 8021bd6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x162>
 8021bcc:	29ff      	cmp	r1, #255	; 0xff
 8021bce:	f834 2016 	ldrh.w	r2, [r4, r6, lsl #1]
 8021bd2:	d103      	bne.n	8021bdc <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x168>
 8021bd4:	803a      	strh	r2, [r7, #0]
 8021bd6:	3702      	adds	r7, #2
 8021bd8:	3601      	adds	r6, #1
 8021bda:	e7f2      	b.n	8021bc2 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x14e>
 8021bdc:	f8b7 c000 	ldrh.w	ip, [r7]
 8021be0:	f5c1 7e80 	rsb	lr, r1, #256	; 0x100
 8021be4:	ea02 080a 	and.w	r8, r2, sl
 8021be8:	ea0c 030a 	and.w	r3, ip, sl
 8021bec:	f40c 6bfc 	and.w	fp, ip, #2016	; 0x7e0
 8021bf0:	f00c 0c1f 	and.w	ip, ip, #31
 8021bf4:	fb0e f303 	mul.w	r3, lr, r3
 8021bf8:	fb0e fb0b 	mul.w	fp, lr, fp
 8021bfc:	fb01 3808 	mla	r8, r1, r8, r3
 8021c00:	f402 63fc 	and.w	r3, r2, #2016	; 0x7e0
 8021c04:	fb0e fc0c 	mul.w	ip, lr, ip
 8021c08:	f002 021f 	and.w	r2, r2, #31
 8021c0c:	fb01 b303 	mla	r3, r1, r3, fp
 8021c10:	ea0a 2818 	and.w	r8, sl, r8, lsr #8
 8021c14:	fb01 cc02 	mla	ip, r1, r2, ip
 8021c18:	0a1b      	lsrs	r3, r3, #8
 8021c1a:	f3cc 2c04 	ubfx	ip, ip, #8, #5
 8021c1e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8021c22:	ea48 0803 	orr.w	r8, r8, r3
 8021c26:	ea48 080c 	orr.w	r8, r8, ip
 8021c2a:	f8a7 8000 	strh.w	r8, [r7]
 8021c2e:	e7d2      	b.n	8021bd6 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x162>
 8021c30:	9b05      	ldr	r3, [sp, #20]
 8021c32:	f109 0901 	add.w	r9, r9, #1
 8021c36:	9a03      	ldr	r2, [sp, #12]
 8021c38:	881b      	ldrh	r3, [r3, #0]
 8021c3a:	1b5b      	subs	r3, r3, r5
 8021c3c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8021c40:	4418      	add	r0, r3
 8021c42:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8021c46:	1b5b      	subs	r3, r3, r5
 8021c48:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8021c4c:	4414      	add	r4, r2
 8021c4e:	9a04      	ldr	r2, [sp, #16]
 8021c50:	4413      	add	r3, r2
 8021c52:	9a01      	ldr	r2, [sp, #4]
 8021c54:	441a      	add	r2, r3
 8021c56:	9201      	str	r2, [sp, #4]
 8021c58:	e7ae      	b.n	8021bb8 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x144>
 8021c5a:	4b04      	ldr	r3, [pc, #16]	; (8021c6c <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h+0x1f8>)
 8021c5c:	6818      	ldr	r0, [r3, #0]
 8021c5e:	6803      	ldr	r3, [r0, #0]
 8021c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8021c62:	4798      	blx	r3
 8021c64:	b00b      	add	sp, #44	; 0x2c
 8021c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c6a:	bf00      	nop
 8021c6c:	20009d34 	.word	0x20009d34
 8021c70:	20009d2e 	.word	0x20009d2e
 8021c74:	fffff800 	.word	0xfffff800

08021c78 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 8021c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c7c:	b089      	sub	sp, #36	; 0x24
 8021c7e:	4682      	mov	sl, r0
 8021c80:	4689      	mov	r9, r1
 8021c82:	4690      	mov	r8, r2
 8021c84:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
 8021c88:	461f      	mov	r7, r3
 8021c8a:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8021c8c:	b365      	cbz	r5, 8021ce8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 8021c8e:	4608      	mov	r0, r1
 8021c90:	f7fe faf8 	bl	8020284 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8021c94:	4606      	mov	r6, r0
 8021c96:	4648      	mov	r0, r9
 8021c98:	f7fe fb2c 	bl	80202f4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8021c9c:	f8ad 000e 	strh.w	r0, [sp, #14]
 8021ca0:	4648      	mov	r0, r9
 8021ca2:	f8ad 8008 	strh.w	r8, [sp, #8]
 8021ca6:	f8ad 700a 	strh.w	r7, [sp, #10]
 8021caa:	f8ad 600c 	strh.w	r6, [sp, #12]
 8021cae:	f7fe fc3f 	bl	8020530 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021cb2:	2801      	cmp	r0, #1
 8021cb4:	d105      	bne.n	8021cc2 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x4a>
 8021cb6:	4b64      	ldr	r3, [pc, #400]	; (8021e48 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1d0>)
 8021cb8:	2160      	movs	r1, #96	; 0x60
 8021cba:	4a64      	ldr	r2, [pc, #400]	; (8021e4c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1d4>)
 8021cbc:	4864      	ldr	r0, [pc, #400]	; (8021e50 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1d8>)
 8021cbe:	f000 fbcd 	bl	802245c <__assert_func>
 8021cc2:	4648      	mov	r0, r9
 8021cc4:	f7fe fbdc 	bl	8020480 <_ZNK8touchgfx6Bitmap7getDataEv>
 8021cc8:	4606      	mov	r6, r0
 8021cca:	4648      	mov	r0, r9
 8021ccc:	f7fe fc08 	bl	80204e0 <_ZNK8touchgfx6Bitmap12getAlphaDataEv>
 8021cd0:	4680      	mov	r8, r0
 8021cd2:	4648      	mov	r0, r9
 8021cd4:	f7fe fc2c 	bl	8020530 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8021cd8:	2802      	cmp	r0, #2
 8021cda:	d108      	bne.n	8021cee <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x76>
 8021cdc:	462b      	mov	r3, r5
 8021cde:	4622      	mov	r2, r4
 8021ce0:	a902      	add	r1, sp, #8
 8021ce2:	4630      	mov	r0, r6
 8021ce4:	f7ff fdd2 	bl	802188c <_ZN8touchgfx8LCD16bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8021ce8:	b009      	add	sp, #36	; 0x24
 8021cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021cee:	4648      	mov	r0, r9
 8021cf0:	f7fe fb90 	bl	8020414 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 8021cf4:	b950      	cbnz	r0, 8021d0c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x94>
 8021cf6:	f8da 3000 	ldr.w	r3, [sl]
 8021cfa:	aa02      	add	r2, sp, #8
 8021cfc:	9001      	str	r0, [sp, #4]
 8021cfe:	4631      	mov	r1, r6
 8021d00:	9500      	str	r5, [sp, #0]
 8021d02:	4650      	mov	r0, sl
 8021d04:	691d      	ldr	r5, [r3, #16]
 8021d06:	4623      	mov	r3, r4
 8021d08:	47a8      	blx	r5
 8021d0a:	e7ed      	b.n	8021ce8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 8021d0c:	af06      	add	r7, sp, #24
 8021d0e:	4649      	mov	r1, r9
 8021d10:	f10d 0910 	add.w	r9, sp, #16
 8021d14:	4638      	mov	r0, r7
 8021d16:	f7fe fb25 	bl	8020364 <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8021d1a:	e897 0003 	ldmia.w	r7, {r0, r1}
 8021d1e:	e889 0003 	stmia.w	r9, {r0, r1}
 8021d22:	4621      	mov	r1, r4
 8021d24:	4648      	mov	r0, r9
 8021d26:	f7ec fbeb 	bl	800e500 <_ZN8touchgfx4RectaNERKS0_>
 8021d2a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8021d2e:	b113      	cbz	r3, 8021d36 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xbe>
 8021d30:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8021d34:	b913      	cbnz	r3, 8021d3c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>
 8021d36:	9500      	str	r5, [sp, #0]
 8021d38:	4623      	mov	r3, r4
 8021d3a:	e07f      	b.n	8021e3c <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x1c4>
 8021d3c:	f8da 3000 	ldr.w	r3, [sl]
 8021d40:	2200      	movs	r2, #0
 8021d42:	9500      	str	r5, [sp, #0]
 8021d44:	4631      	mov	r1, r6
 8021d46:	9201      	str	r2, [sp, #4]
 8021d48:	4650      	mov	r0, sl
 8021d4a:	f8d3 b010 	ldr.w	fp, [r3, #16]
 8021d4e:	aa02      	add	r2, sp, #8
 8021d50:	464b      	mov	r3, r9
 8021d52:	47d8      	blx	fp
 8021d54:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 8021d58:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8021d5c:	4293      	cmp	r3, r2
 8021d5e:	dd13      	ble.n	8021d88 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x110>
 8021d60:	f9b4 0000 	ldrsh.w	r0, [r4]
 8021d64:	1a9b      	subs	r3, r3, r2
 8021d66:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8021d6a:	f8ad 0018 	strh.w	r0, [sp, #24]
 8021d6e:	4630      	mov	r0, r6
 8021d70:	f8ad 201a 	strh.w	r2, [sp, #26]
 8021d74:	aa02      	add	r2, sp, #8
 8021d76:	f8ad 101c 	strh.w	r1, [sp, #28]
 8021d7a:	4641      	mov	r1, r8
 8021d7c:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021d80:	463b      	mov	r3, r7
 8021d82:	9500      	str	r5, [sp, #0]
 8021d84:	f7ff fe76 	bl	8021a74 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021d88:	f9bd 3010 	ldrsh.w	r3, [sp, #16]
 8021d8c:	f9b4 2000 	ldrsh.w	r2, [r4]
 8021d90:	4293      	cmp	r3, r2
 8021d92:	dd13      	ble.n	8021dbc <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x144>
 8021d94:	1a9b      	subs	r3, r3, r2
 8021d96:	f9bd 0012 	ldrsh.w	r0, [sp, #18]
 8021d9a:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 8021d9e:	f8ad 2018 	strh.w	r2, [sp, #24]
 8021da2:	aa02      	add	r2, sp, #8
 8021da4:	f8ad 001a 	strh.w	r0, [sp, #26]
 8021da8:	4630      	mov	r0, r6
 8021daa:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021dae:	463b      	mov	r3, r7
 8021db0:	f8ad 101e 	strh.w	r1, [sp, #30]
 8021db4:	4641      	mov	r1, r8
 8021db6:	9500      	str	r5, [sp, #0]
 8021db8:	f7ff fe5c 	bl	8021a74 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021dbc:	88a2      	ldrh	r2, [r4, #4]
 8021dbe:	8823      	ldrh	r3, [r4, #0]
 8021dc0:	f8bd 1014 	ldrh.w	r1, [sp, #20]
 8021dc4:	4413      	add	r3, r2
 8021dc6:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8021dca:	440a      	add	r2, r1
 8021dcc:	b29b      	uxth	r3, r3
 8021dce:	b292      	uxth	r2, r2
 8021dd0:	b218      	sxth	r0, r3
 8021dd2:	b211      	sxth	r1, r2
 8021dd4:	4288      	cmp	r0, r1
 8021dd6:	dd13      	ble.n	8021e00 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x188>
 8021dd8:	1a9b      	subs	r3, r3, r2
 8021dda:	f9bd 0016 	ldrsh.w	r0, [sp, #22]
 8021dde:	f9bd e012 	ldrsh.w	lr, [sp, #18]
 8021de2:	aa02      	add	r2, sp, #8
 8021de4:	f8ad 1018 	strh.w	r1, [sp, #24]
 8021de8:	4641      	mov	r1, r8
 8021dea:	f8ad 301c 	strh.w	r3, [sp, #28]
 8021dee:	463b      	mov	r3, r7
 8021df0:	f8ad 001e 	strh.w	r0, [sp, #30]
 8021df4:	4630      	mov	r0, r6
 8021df6:	9500      	str	r5, [sp, #0]
 8021df8:	f8ad e01a 	strh.w	lr, [sp, #26]
 8021dfc:	f7ff fe3a 	bl	8021a74 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021e00:	88e2      	ldrh	r2, [r4, #6]
 8021e02:	8863      	ldrh	r3, [r4, #2]
 8021e04:	f8bd 1016 	ldrh.w	r1, [sp, #22]
 8021e08:	4413      	add	r3, r2
 8021e0a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 8021e0e:	440a      	add	r2, r1
 8021e10:	b29b      	uxth	r3, r3
 8021e12:	b292      	uxth	r2, r2
 8021e14:	b218      	sxth	r0, r3
 8021e16:	b211      	sxth	r1, r2
 8021e18:	4288      	cmp	r0, r1
 8021e1a:	f77f af65 	ble.w	8021ce8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 8021e1e:	1a9b      	subs	r3, r3, r2
 8021e20:	f9b4 e000 	ldrsh.w	lr, [r4]
 8021e24:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8021e28:	f8ad 301e 	strh.w	r3, [sp, #30]
 8021e2c:	463b      	mov	r3, r7
 8021e2e:	f8ad e018 	strh.w	lr, [sp, #24]
 8021e32:	f8ad 101a 	strh.w	r1, [sp, #26]
 8021e36:	f8ad 001c 	strh.w	r0, [sp, #28]
 8021e3a:	9500      	str	r5, [sp, #0]
 8021e3c:	aa02      	add	r2, sp, #8
 8021e3e:	4641      	mov	r1, r8
 8021e40:	4630      	mov	r0, r6
 8021e42:	f7ff fe17 	bl	8021a74 <_ZN8touchgfx8LCD16bpp21blitCopyAlphaPerPixelEPKtPKhRKNS_4RectES7_h>
 8021e46:	e74f      	b.n	8021ce8 <_ZN8touchgfx8LCD16bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x70>
 8021e48:	080262aa 	.word	0x080262aa
 8021e4c:	080263d8 	.word	0x080263d8
 8021e50:	0802633a 	.word	0x0802633a

08021e54 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>:
 8021e54:	b138      	cbz	r0, 8021e66 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x12>
 8021e56:	2902      	cmp	r1, #2
 8021e58:	d00b      	beq.n	8021e72 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x1e>
 8021e5a:	2903      	cmp	r1, #3
 8021e5c:	d00c      	beq.n	8021e78 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8021e5e:	2901      	cmp	r1, #1
 8021e60:	d10d      	bne.n	8021e7e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x2a>
 8021e62:	2001      	movs	r0, #1
 8021e64:	4770      	bx	lr
 8021e66:	2902      	cmp	r1, #2
 8021e68:	d006      	beq.n	8021e78 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x24>
 8021e6a:	2903      	cmp	r1, #3
 8021e6c:	d007      	beq.n	8021e7e <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x2a>
 8021e6e:	2901      	cmp	r1, #1
 8021e70:	d1f7      	bne.n	8021e62 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0xe>
 8021e72:	4b05      	ldr	r3, [pc, #20]	; (8021e88 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8021e74:	8818      	ldrh	r0, [r3, #0]
 8021e76:	4770      	bx	lr
 8021e78:	f04f 30ff 	mov.w	r0, #4294967295
 8021e7c:	4770      	bx	lr
 8021e7e:	4b02      	ldr	r3, [pc, #8]	; (8021e88 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE+0x34>)
 8021e80:	8818      	ldrh	r0, [r3, #0]
 8021e82:	4240      	negs	r0, r0
 8021e84:	4770      	bx	lr
 8021e86:	bf00      	nop
 8021e88:	20009d2e 	.word	0x20009d2e

08021e8c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>:
 8021e8c:	b140      	cbz	r0, 8021ea0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x14>
 8021e8e:	2902      	cmp	r1, #2
 8021e90:	d00c      	beq.n	8021eac <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x20>
 8021e92:	2903      	cmp	r1, #3
 8021e94:	d00d      	beq.n	8021eb2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8021e96:	2901      	cmp	r1, #1
 8021e98:	d10f      	bne.n	8021eba <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x2e>
 8021e9a:	4b09      	ldr	r3, [pc, #36]	; (8021ec0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x34>)
 8021e9c:	8818      	ldrh	r0, [r3, #0]
 8021e9e:	4770      	bx	lr
 8021ea0:	2902      	cmp	r1, #2
 8021ea2:	d006      	beq.n	8021eb2 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x26>
 8021ea4:	2903      	cmp	r1, #3
 8021ea6:	d008      	beq.n	8021eba <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x2e>
 8021ea8:	2901      	cmp	r1, #1
 8021eaa:	d1f6      	bne.n	8021e9a <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0xe>
 8021eac:	f04f 30ff 	mov.w	r0, #4294967295
 8021eb0:	4770      	bx	lr
 8021eb2:	4b03      	ldr	r3, [pc, #12]	; (8021ec0 <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE+0x34>)
 8021eb4:	8818      	ldrh	r0, [r3, #0]
 8021eb6:	4240      	negs	r0, r0
 8021eb8:	4770      	bx	lr
 8021eba:	2001      	movs	r0, #1
 8021ebc:	4770      	bx	lr
 8021ebe:	bf00      	nop
 8021ec0:	20009d2e 	.word	0x20009d2e

08021ec4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE>:
 8021ec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ec8:	b097      	sub	sp, #92	; 0x5c
 8021eca:	f8dd 9094 	ldr.w	r9, [sp, #148]	; 0x94
 8021ece:	910d      	str	r1, [sp, #52]	; 0x34
 8021ed0:	a912      	add	r1, sp, #72	; 0x48
 8021ed2:	f899 000d 	ldrb.w	r0, [r9, #13]
 8021ed6:	f9bd 8080 	ldrsh.w	r8, [sp, #128]	; 0x80
 8021eda:	f010 0f08 	tst.w	r0, #8
 8021ede:	f8bd 4088 	ldrh.w	r4, [sp, #136]	; 0x88
 8021ee2:	f89d 50a0 	ldrb.w	r5, [sp, #160]	; 0xa0
 8021ee6:	f89d a0a8 	ldrb.w	sl, [sp, #168]	; 0xa8
 8021eea:	e881 000c 	stmia.w	r1, {r2, r3}
 8021eee:	f89d 20a4 	ldrb.w	r2, [sp, #164]	; 0xa4
 8021ef2:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	; 0x84
 8021ef6:	920b      	str	r2, [sp, #44]	; 0x2c
 8021ef8:	bf0c      	ite	eq
 8021efa:	2200      	moveq	r2, #0
 8021efc:	f44f 7280 	movne.w	r2, #256	; 0x100
 8021f00:	f899 1006 	ldrb.w	r1, [r9, #6]
 8021f04:	f010 0f10 	tst.w	r0, #16
 8021f08:	9307      	str	r3, [sp, #28]
 8021f0a:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 8021f0e:	bf0c      	ite	eq
 8021f10:	2000      	moveq	r0, #0
 8021f12:	f44f 7080 	movne.w	r0, #256	; 0x100
 8021f16:	430a      	orrs	r2, r1
 8021f18:	9308      	str	r3, [sp, #32]
 8021f1a:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8021f1c:	920a      	str	r2, [sp, #40]	; 0x28
 8021f1e:	f000 813b 	beq.w	8022198 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2d4>
 8021f22:	f899 2007 	ldrb.w	r2, [r9, #7]
 8021f26:	4302      	orrs	r2, r0
 8021f28:	9209      	str	r2, [sp, #36]	; 0x24
 8021f2a:	f000 8135 	beq.w	8022198 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2d4>
 8021f2e:	f999 1009 	ldrsb.w	r1, [r9, #9]
 8021f32:	2c00      	cmp	r4, #0
 8021f34:	f000 80db 	beq.w	80220ee <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x22a>
 8021f38:	1a61      	subs	r1, r4, r1
 8021f3a:	b28c      	uxth	r4, r1
 8021f3c:	0422      	lsls	r2, r4, #16
 8021f3e:	d504      	bpl.n	8021f4a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x86>
 8021f40:	eba8 0404 	sub.w	r4, r8, r4
 8021f44:	fa0f f884 	sxth.w	r8, r4
 8021f48:	2400      	movs	r4, #0
 8021f4a:	f9b3 0000 	ldrsh.w	r0, [r3]
 8021f4e:	88df      	ldrh	r7, [r3, #6]
 8021f50:	4580      	cmp	r8, r0
 8021f52:	b282      	uxth	r2, r0
 8021f54:	f8b3 e002 	ldrh.w	lr, [r3, #2]
 8021f58:	bfb8      	it	lt
 8021f5a:	18a1      	addlt	r1, r4, r2
 8021f5c:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
 8021f60:	44be      	add	lr, r7
 8021f62:	f8bd 7024 	ldrh.w	r7, [sp, #36]	; 0x24
 8021f66:	bfbc      	itt	lt
 8021f68:	eba1 0108 	sublt.w	r1, r1, r8
 8021f6c:	4680      	movlt	r8, r0
 8021f6e:	a812      	add	r0, sp, #72	; 0x48
 8021f70:	bfb8      	it	lt
 8021f72:	b28c      	uxthlt	r4, r1
 8021f74:	8899      	ldrh	r1, [r3, #4]
 8021f76:	fa0f f38e 	sxth.w	r3, lr
 8021f7a:	440a      	add	r2, r1
 8021f7c:	4641      	mov	r1, r8
 8021f7e:	930e      	str	r3, [sp, #56]	; 0x38
 8021f80:	4bb1      	ldr	r3, [pc, #708]	; (8022248 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8021f82:	b212      	sxth	r2, r2
 8021f84:	f893 b000 	ldrb.w	fp, [r3]
 8021f88:	920f      	str	r2, [sp, #60]	; 0x3c
 8021f8a:	f10b 3eff 	add.w	lr, fp, #4294967295
 8021f8e:	9a07      	ldr	r2, [sp, #28]
 8021f90:	f1de 0300 	rsbs	r3, lr, #0
 8021f94:	eb43 030e 	adc.w	r3, r3, lr
 8021f98:	930c      	str	r3, [sp, #48]	; 0x30
 8021f9a:	4653      	mov	r3, sl
 8021f9c:	f7fc f9ee 	bl	801e37c <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8021fa0:	4641      	mov	r1, r8
 8021fa2:	f8ad 0054 	strh.w	r0, [sp, #84]	; 0x54
 8021fa6:	4653      	mov	r3, sl
 8021fa8:	9a07      	ldr	r2, [sp, #28]
 8021faa:	a812      	add	r0, sp, #72	; 0x48
 8021fac:	f7fc fa01 	bl	801e3b2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8021fb0:	a916      	add	r1, sp, #88	; 0x58
 8021fb2:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8021fb6:	a815      	add	r0, sp, #84	; 0x54
 8021fb8:	f7fc fabc 	bl	801e534 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8021fbc:	f1ba 0f00 	cmp.w	sl, #0
 8021fc0:	f040 8099 	bne.w	80220f6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x232>
 8021fc4:	f1bb 0f01 	cmp.w	fp, #1
 8021fc8:	f040 809d 	bne.w	8022106 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x242>
 8021fcc:	4a9f      	ldr	r2, [pc, #636]	; (802224c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8021fce:	2d04      	cmp	r5, #4
 8021fd0:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	; 0x56
 8021fd4:	8811      	ldrh	r1, [r2, #0]
 8021fd6:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	; 0x54
 8021fda:	fb01 2303 	mla	r3, r1, r3, r2
 8021fde:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8021fe0:	eb02 0b43 	add.w	fp, r2, r3, lsl #1
 8021fe4:	f04f 03ff 	mov.w	r3, #255	; 0xff
 8021fe8:	fa43 f305 	asr.w	r3, r3, r5
 8021fec:	b2db      	uxtb	r3, r3
 8021fee:	930d      	str	r3, [sp, #52]	; 0x34
 8021ff0:	ea6f 0303 	mvn.w	r3, r3
 8021ff4:	b2db      	uxtb	r3, r3
 8021ff6:	9310      	str	r3, [sp, #64]	; 0x40
 8021ff8:	f1c5 0308 	rsb	r3, r5, #8
 8021ffc:	b2db      	uxtb	r3, r3
 8021ffe:	9309      	str	r3, [sp, #36]	; 0x24
 8022000:	d104      	bne.n	802200c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x148>
 8022002:	f899 300d 	ldrb.w	r3, [r9, #13]
 8022006:	07da      	lsls	r2, r3, #31
 8022008:	f100 8118 	bmi.w	802223c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x378>
 802200c:	b91c      	cbnz	r4, 8022016 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x152>
 802200e:	9b08      	ldr	r3, [sp, #32]
 8022010:	2b00      	cmp	r3, #0
 8022012:	f000 80c4 	beq.w	802219e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2da>
 8022016:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 802201a:	9909      	ldr	r1, [sp, #36]	; 0x24
 802201c:	fb16 4303 	smlabb	r3, r6, r3, r4
 8022020:	fb13 f305 	smulbb	r3, r3, r5
 8022024:	b29b      	uxth	r3, r3
 8022026:	f003 0207 	and.w	r2, r3, #7
 802202a:	1a8a      	subs	r2, r1, r2
 802202c:	9926      	ldr	r1, [sp, #152]	; 0x98
 802202e:	eb01 03d3 	add.w	r3, r1, r3, lsr #3
 8022032:	b2d2      	uxtb	r2, r2
 8022034:	9326      	str	r3, [sp, #152]	; 0x98
 8022036:	9b08      	ldr	r3, [sp, #32]
 8022038:	1aff      	subs	r7, r7, r3
 802203a:	b2bf      	uxth	r7, r7
 802203c:	4651      	mov	r1, sl
 802203e:	980c      	ldr	r0, [sp, #48]	; 0x30
 8022040:	f7ff ff08 	bl	8021e54 <_ZN8touchgfx8LCD16bpp9nextPixelEbNS_12TextRotationE>
 8022044:	4651      	mov	r1, sl
 8022046:	4681      	mov	r9, r0
 8022048:	980c      	ldr	r0, [sp, #48]	; 0x30
 802204a:	f7ff ff1f 	bl	8021e8c <_ZN8touchgfx8LCD16bpp8nextLineEbNS_12TextRotationE>
 802204e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8022050:	9907      	ldr	r1, [sp, #28]
 8022052:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8022056:	eba3 0e01 	sub.w	lr, r3, r1
 802205a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 802205c:	eba8 0104 	sub.w	r1, r8, r4
 8022060:	1a59      	subs	r1, r3, r1
 8022062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8022064:	4299      	cmp	r1, r3
 8022066:	bfd4      	ite	le
 8022068:	ebc4 0101 	rsble	r1, r4, r1
 802206c:	ebc4 0103 	rsbgt	r1, r4, r3
 8022070:	4577      	cmp	r7, lr
 8022072:	fb09 0011 	mls	r0, r9, r1, r0
 8022076:	eba6 0301 	sub.w	r3, r6, r1
 802207a:	bfa8      	it	ge
 802207c:	4677      	movge	r7, lr
 802207e:	0040      	lsls	r0, r0, #1
 8022080:	436b      	muls	r3, r5
 8022082:	9008      	str	r0, [sp, #32]
 8022084:	ea21 70e1 	bic.w	r0, r1, r1, asr #31
 8022088:	fb0a f000 	mul.w	r0, sl, r0
 802208c:	9007      	str	r0, [sp, #28]
 802208e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8022090:	f400 4078 	and.w	r0, r0, #63488	; 0xf800
 8022094:	900e      	str	r0, [sp, #56]	; 0x38
 8022096:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8022098:	f400 60fc 	and.w	r0, r0, #2016	; 0x7e0
 802209c:	900f      	str	r0, [sp, #60]	; 0x3c
 802209e:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80220a0:	f000 001f 	and.w	r0, r0, #31
 80220a4:	9011      	str	r0, [sp, #68]	; 0x44
 80220a6:	2f00      	cmp	r7, #0
 80220a8:	dd76      	ble.n	8022198 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2d4>
 80220aa:	f8bd 009c 	ldrh.w	r0, [sp, #156]	; 0x9c
 80220ae:	4689      	mov	r9, r1
 80220b0:	46d8      	mov	r8, fp
 80220b2:	900c      	str	r0, [sp, #48]	; 0x30
 80220b4:	f1b9 0f00 	cmp.w	r9, #0
 80220b8:	f340 80a6 	ble.w	8022208 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x344>
 80220bc:	9826      	ldr	r0, [sp, #152]	; 0x98
 80220be:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80220c0:	7800      	ldrb	r0, [r0, #0]
 80220c2:	4090      	lsls	r0, r2
 80220c4:	4020      	ands	r0, r4
 80220c6:	d009      	beq.n	80220dc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x218>
 80220c8:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80220ca:	4320      	orrs	r0, r4
 80220cc:	28ff      	cmp	r0, #255	; 0xff
 80220ce:	d168      	bne.n	80221a2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 80220d0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 80220d2:	2cff      	cmp	r4, #255	; 0xff
 80220d4:	d165      	bne.n	80221a2 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x2de>
 80220d6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80220d8:	f8a8 4000 	strh.w	r4, [r8]
 80220dc:	2a00      	cmp	r2, #0
 80220de:	f000 808e 	beq.w	80221fe <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x33a>
 80220e2:	1b52      	subs	r2, r2, r5
 80220e4:	b2d2      	uxtb	r2, r2
 80220e6:	44d0      	add	r8, sl
 80220e8:	f109 39ff 	add.w	r9, r9, #4294967295
 80220ec:	e7e2      	b.n	80220b4 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x1f0>
 80220ee:	4488      	add	r8, r1
 80220f0:	fa0f f888 	sxth.w	r8, r8
 80220f4:	e729      	b.n	8021f4a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x86>
 80220f6:	f1ba 0f01 	cmp.w	sl, #1
 80220fa:	f47f af67 	bne.w	8021fcc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 80220fe:	f1bb 0f01 	cmp.w	fp, #1
 8022102:	f47f af63 	bne.w	8021fcc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 8022106:	f8df b14c 	ldr.w	fp, [pc, #332]	; 8022254 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x390>
 802210a:	f8db 0000 	ldr.w	r0, [fp]
 802210e:	6803      	ldr	r3, [r0, #0]
 8022110:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8022112:	4798      	blx	r3
 8022114:	f010 0380 	ands.w	r3, r0, #128	; 0x80
 8022118:	465a      	mov	r2, fp
 802211a:	d006      	beq.n	802212a <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x266>
 802211c:	2d04      	cmp	r5, #4
 802211e:	bf0a      	itet	eq
 8022120:	f899 300d 	ldrbeq.w	r3, [r9, #13]
 8022124:	2300      	movne	r3, #0
 8022126:	f003 0301 	andeq.w	r3, r3, #1
 802212a:	05c0      	lsls	r0, r0, #23
 802212c:	f140 8081 	bpl.w	8022232 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x36e>
 8022130:	2d08      	cmp	r5, #8
 8022132:	d17e      	bne.n	8022232 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x36e>
 8022134:	2b00      	cmp	r3, #0
 8022136:	bf0c      	ite	eq
 8022138:	f44f 7180 	moveq.w	r1, #256	; 0x100
 802213c:	2180      	movne	r1, #128	; 0x80
 802213e:	2c00      	cmp	r4, #0
 8022140:	f47f af44 	bne.w	8021fcc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 8022144:	9b08      	ldr	r3, [sp, #32]
 8022146:	2b00      	cmp	r3, #0
 8022148:	f47f af40 	bne.w	8021fcc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 802214c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 802214e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8022150:	4443      	add	r3, r8
 8022152:	4298      	cmp	r0, r3
 8022154:	f6ff af3a 	blt.w	8021fcc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 8022158:	9807      	ldr	r0, [sp, #28]
 802215a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802215c:	4403      	add	r3, r0
 802215e:	980e      	ldr	r0, [sp, #56]	; 0x38
 8022160:	4298      	cmp	r0, r3
 8022162:	f6ff af33 	blt.w	8021fcc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 8022166:	2d08      	cmp	r5, #8
 8022168:	6810      	ldr	r0, [r2, #0]
 802216a:	f8bd 3056 	ldrh.w	r3, [sp, #86]	; 0x56
 802216e:	bf18      	it	ne
 8022170:	3601      	addne	r6, #1
 8022172:	6804      	ldr	r4, [r0, #0]
 8022174:	9105      	str	r1, [sp, #20]
 8022176:	bf18      	it	ne
 8022178:	f026 0601 	bicne.w	r6, r6, #1
 802217c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 802217e:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8022182:	bf18      	it	ne
 8022184:	b2b6      	uxthne	r6, r6
 8022186:	9104      	str	r1, [sp, #16]
 8022188:	9927      	ldr	r1, [sp, #156]	; 0x9c
 802218a:	9602      	str	r6, [sp, #8]
 802218c:	9103      	str	r1, [sp, #12]
 802218e:	9926      	ldr	r1, [sp, #152]	; 0x98
 8022190:	e88d 00c0 	stmia.w	sp, {r6, r7}
 8022194:	6ca4      	ldr	r4, [r4, #72]	; 0x48
 8022196:	47a0      	blx	r4
 8022198:	b017      	add	sp, #92	; 0x5c
 802219a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802219e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80221a0:	e74c      	b.n	802203c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x178>
 80221a2:	f8b8 c000 	ldrh.w	ip, [r8]
 80221a6:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 80221aa:	f42c 66ff 	bic.w	r6, ip, #2040	; 0x7f8
 80221ae:	fb10 f004 	smulbb	r0, r0, r4
 80221b2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 80221b4:	f026 0607 	bic.w	r6, r6, #7
 80221b8:	f5c0 3e80 	rsb	lr, r0, #65536	; 0x10000
 80221bc:	fb0e f606 	mul.w	r6, lr, r6
 80221c0:	fb00 6604 	mla	r6, r0, r4, r6
 80221c4:	4c22      	ldr	r4, [pc, #136]	; (8022250 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x38c>)
 80221c6:	ea04 4416 	and.w	r4, r4, r6, lsr #16
 80221ca:	940a      	str	r4, [sp, #40]	; 0x28
 80221cc:	f40c 64fc 	and.w	r4, ip, #2016	; 0x7e0
 80221d0:	f00c 0c1f 	and.w	ip, ip, #31
 80221d4:	fb0e f404 	mul.w	r4, lr, r4
 80221d8:	fb0e fc0c 	mul.w	ip, lr, ip
 80221dc:	4626      	mov	r6, r4
 80221de:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 80221e0:	fb00 6404 	mla	r4, r0, r4, r6
 80221e4:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80221e6:	0c24      	lsrs	r4, r4, #16
 80221e8:	f404 64fc 	and.w	r4, r4, #2016	; 0x7e0
 80221ec:	4334      	orrs	r4, r6
 80221ee:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80221f0:	fb00 cc06 	mla	ip, r0, r6, ip
 80221f4:	f3cc 4c04 	ubfx	ip, ip, #16, #5
 80221f8:	ea44 040c 	orr.w	r4, r4, ip
 80221fc:	e76c      	b.n	80220d8 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x214>
 80221fe:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8022200:	3201      	adds	r2, #1
 8022202:	9226      	str	r2, [sp, #152]	; 0x98
 8022204:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022206:	e76e      	b.n	80220e6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x222>
 8022208:	b16b      	cbz	r3, 8022226 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x362>
 802220a:	4293      	cmp	r3, r2
 802220c:	dd08      	ble.n	8022220 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x35c>
 802220e:	1b58      	subs	r0, r3, r5
 8022210:	2408      	movs	r4, #8
 8022212:	1a80      	subs	r0, r0, r2
 8022214:	fb90 f0f4 	sdiv	r0, r0, r4
 8022218:	9c26      	ldr	r4, [sp, #152]	; 0x98
 802221a:	3001      	adds	r0, #1
 802221c:	4404      	add	r4, r0
 802221e:	9426      	str	r4, [sp, #152]	; 0x98
 8022220:	1ad2      	subs	r2, r2, r3
 8022222:	f002 0207 	and.w	r2, r2, #7
 8022226:	9807      	ldr	r0, [sp, #28]
 8022228:	3f01      	subs	r7, #1
 802222a:	9c08      	ldr	r4, [sp, #32]
 802222c:	4420      	add	r0, r4
 802222e:	4483      	add	fp, r0
 8022230:	e739      	b.n	80220a6 <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 8022232:	2b00      	cmp	r3, #0
 8022234:	f43f aeca 	beq.w	8021fcc <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x108>
 8022238:	2180      	movs	r1, #128	; 0x80
 802223a:	e780      	b.n	802213e <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x27a>
 802223c:	07f3      	lsls	r3, r6, #31
 802223e:	f57f aee5 	bpl.w	802200c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x148>
 8022242:	3601      	adds	r6, #1
 8022244:	b2b6      	uxth	r6, r6
 8022246:	e6e1      	b.n	802200c <_ZN8touchgfx8LCD16bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhNS_9colortypeEhhNS_12TextRotationE+0x148>
 8022248:	20009d2c 	.word	0x20009d2c
 802224c:	20009d2e 	.word	0x20009d2e
 8022250:	fffff800 	.word	0xfffff800
 8022254:	20009d34 	.word	0x20009d34

08022258 <CRC_Lock>:
 8022258:	4a13      	ldr	r2, [pc, #76]	; (80222a8 <CRC_Lock+0x50>)
 802225a:	6813      	ldr	r3, [r2, #0]
 802225c:	f023 0301 	bic.w	r3, r3, #1
 8022260:	6013      	str	r3, [r2, #0]
 8022262:	4b12      	ldr	r3, [pc, #72]	; (80222ac <CRC_Lock+0x54>)
 8022264:	681b      	ldr	r3, [r3, #0]
 8022266:	b9a3      	cbnz	r3, 8022292 <CRC_Lock+0x3a>
 8022268:	4b11      	ldr	r3, [pc, #68]	; (80222b0 <CRC_Lock+0x58>)
 802226a:	681b      	ldr	r3, [r3, #0]
 802226c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8022270:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8022274:	d10d      	bne.n	8022292 <CRC_Lock+0x3a>
 8022276:	4b0f      	ldr	r3, [pc, #60]	; (80222b4 <CRC_Lock+0x5c>)
 8022278:	2201      	movs	r2, #1
 802227a:	601a      	str	r2, [r3, #0]
 802227c:	681a      	ldr	r2, [r3, #0]
 802227e:	2a00      	cmp	r2, #0
 8022280:	d1fc      	bne.n	802227c <CRC_Lock+0x24>
 8022282:	4b0d      	ldr	r3, [pc, #52]	; (80222b8 <CRC_Lock+0x60>)
 8022284:	6018      	str	r0, [r3, #0]
 8022286:	6818      	ldr	r0, [r3, #0]
 8022288:	4288      	cmp	r0, r1
 802228a:	bf14      	ite	ne
 802228c:	2000      	movne	r0, #0
 802228e:	2001      	moveq	r0, #1
 8022290:	4770      	bx	lr
 8022292:	4b0a      	ldr	r3, [pc, #40]	; (80222bc <CRC_Lock+0x64>)
 8022294:	2201      	movs	r2, #1
 8022296:	601a      	str	r2, [r3, #0]
 8022298:	681a      	ldr	r2, [r3, #0]
 802229a:	2a00      	cmp	r2, #0
 802229c:	d1fc      	bne.n	8022298 <CRC_Lock+0x40>
 802229e:	4b08      	ldr	r3, [pc, #32]	; (80222c0 <CRC_Lock+0x68>)
 80222a0:	6018      	str	r0, [r3, #0]
 80222a2:	6818      	ldr	r0, [r3, #0]
 80222a4:	4281      	cmp	r1, r0
 80222a6:	e7f0      	b.n	802228a <CRC_Lock+0x32>
 80222a8:	e0002000 	.word	0xe0002000
 80222ac:	e0042000 	.word	0xe0042000
 80222b0:	5c001000 	.word	0x5c001000
 80222b4:	58024c08 	.word	0x58024c08
 80222b8:	58024c00 	.word	0x58024c00
 80222bc:	40023008 	.word	0x40023008
 80222c0:	40023000 	.word	0x40023000

080222c4 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 80222c4:	6101      	str	r1, [r0, #16]
 80222c6:	4770      	bx	lr

080222c8 <_ZN8touchgfx8Gestures4tickEv>:
 80222c8:	7b83      	ldrb	r3, [r0, #14]
 80222ca:	b14b      	cbz	r3, 80222e0 <_ZN8touchgfx8Gestures4tickEv+0x18>
 80222cc:	8903      	ldrh	r3, [r0, #8]
 80222ce:	3301      	adds	r3, #1
 80222d0:	b29b      	uxth	r3, r3
 80222d2:	2b07      	cmp	r3, #7
 80222d4:	8103      	strh	r3, [r0, #8]
 80222d6:	bf81      	itttt	hi
 80222d8:	2300      	movhi	r3, #0
 80222da:	8143      	strhhi	r3, [r0, #10]
 80222dc:	8183      	strhhi	r3, [r0, #12]
 80222de:	7383      	strbhi	r3, [r0, #14]
 80222e0:	4770      	bx	lr
	...

080222e4 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 80222e4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80222e8:	4604      	mov	r4, r0
 80222ea:	4698      	mov	r8, r3
 80222ec:	8880      	ldrh	r0, [r0, #4]
 80222ee:	4617      	mov	r7, r2
 80222f0:	4b1d      	ldr	r3, [pc, #116]	; (8022368 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x84>)
 80222f2:	460e      	mov	r6, r1
 80222f4:	f8ad 0006 	strh.w	r0, [sp, #6]
 80222f8:	eba8 0000 	sub.w	r0, r8, r0
 80222fc:	9300      	str	r3, [sp, #0]
 80222fe:	2300      	movs	r3, #0
 8022300:	b280      	uxth	r0, r0
 8022302:	8aa2      	ldrh	r2, [r4, #20]
 8022304:	f88d 3004 	strb.w	r3, [sp, #4]
 8022308:	b203      	sxth	r3, r0
 802230a:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
 802230e:	88e1      	ldrh	r1, [r4, #6]
 8022310:	2b00      	cmp	r3, #0
 8022312:	f8ad 800a 	strh.w	r8, [sp, #10]
 8022316:	f8ad 1008 	strh.w	r1, [sp, #8]
 802231a:	bfb8      	it	lt
 802231c:	4240      	neglt	r0, r0
 802231e:	f8ad 500c 	strh.w	r5, [sp, #12]
 8022322:	bfb8      	it	lt
 8022324:	b203      	sxthlt	r3, r0
 8022326:	4293      	cmp	r3, r2
 8022328:	dc0c      	bgt.n	8022344 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x60>
 802232a:	1a69      	subs	r1, r5, r1
 802232c:	b289      	uxth	r1, r1
 802232e:	b20b      	sxth	r3, r1
 8022330:	2b00      	cmp	r3, #0
 8022332:	bfbc      	itt	lt
 8022334:	4249      	neglt	r1, r1
 8022336:	b20b      	sxthlt	r3, r1
 8022338:	429a      	cmp	r2, r3
 802233a:	db03      	blt.n	8022344 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x60>
 802233c:	2000      	movs	r0, #0
 802233e:	b004      	add	sp, #16
 8022340:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022344:	6920      	ldr	r0, [r4, #16]
 8022346:	4669      	mov	r1, sp
 8022348:	eba8 0606 	sub.w	r6, r8, r6
 802234c:	1bef      	subs	r7, r5, r7
 802234e:	6803      	ldr	r3, [r0, #0]
 8022350:	685b      	ldr	r3, [r3, #4]
 8022352:	4798      	blx	r3
 8022354:	2300      	movs	r3, #0
 8022356:	2001      	movs	r0, #1
 8022358:	8166      	strh	r6, [r4, #10]
 802235a:	8123      	strh	r3, [r4, #8]
 802235c:	81a7      	strh	r7, [r4, #12]
 802235e:	f8a4 8004 	strh.w	r8, [r4, #4]
 8022362:	80e5      	strh	r5, [r4, #6]
 8022364:	73a0      	strb	r0, [r4, #14]
 8022366:	e7ea      	b.n	802233e <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x5a>
 8022368:	08024080 	.word	0x08024080

0802236c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 802236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802236e:	461e      	mov	r6, r3
 8022370:	1e4b      	subs	r3, r1, #1
 8022372:	b085      	sub	sp, #20
 8022374:	4604      	mov	r4, r0
 8022376:	2b01      	cmp	r3, #1
 8022378:	460d      	mov	r5, r1
 802237a:	4617      	mov	r7, r2
 802237c:	d845      	bhi.n	802240a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x9e>
 802237e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8022382:	1cd3      	adds	r3, r2, #3
 8022384:	b29b      	uxth	r3, r3
 8022386:	2b06      	cmp	r3, #6
 8022388:	d913      	bls.n	80223b2 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x46>
 802238a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 802238e:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8022392:	4820      	ldr	r0, [pc, #128]	; (8022414 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa8>)
 8022394:	f8ad 100c 	strh.w	r1, [sp, #12]
 8022398:	a901      	add	r1, sp, #4
 802239a:	9001      	str	r0, [sp, #4]
 802239c:	2000      	movs	r0, #0
 802239e:	f8ad 200a 	strh.w	r2, [sp, #10]
 80223a2:	f88d 0008 	strb.w	r0, [sp, #8]
 80223a6:	6920      	ldr	r0, [r4, #16]
 80223a8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80223ac:	6803      	ldr	r3, [r0, #0]
 80223ae:	689b      	ldr	r3, [r3, #8]
 80223b0:	4798      	blx	r3
 80223b2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80223b6:	1cd3      	adds	r3, r2, #3
 80223b8:	b29b      	uxth	r3, r3
 80223ba:	2b06      	cmp	r3, #6
 80223bc:	d913      	bls.n	80223e6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 80223be:	4815      	ldr	r0, [pc, #84]	; (8022414 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xa8>)
 80223c0:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80223c4:	9001      	str	r0, [sp, #4]
 80223c6:	2001      	movs	r0, #1
 80223c8:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80223cc:	f88d 0008 	strb.w	r0, [sp, #8]
 80223d0:	6920      	ldr	r0, [r4, #16]
 80223d2:	f8ad 100c 	strh.w	r1, [sp, #12]
 80223d6:	a901      	add	r1, sp, #4
 80223d8:	f8ad 200a 	strh.w	r2, [sp, #10]
 80223dc:	f8ad 300e 	strh.w	r3, [sp, #14]
 80223e0:	6803      	ldr	r3, [r0, #0]
 80223e2:	689b      	ldr	r3, [r3, #8]
 80223e4:	4798      	blx	r3
 80223e6:	4b0c      	ldr	r3, [pc, #48]	; (8022418 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xac>)
 80223e8:	a901      	add	r1, sp, #4
 80223ea:	6920      	ldr	r0, [r4, #16]
 80223ec:	9301      	str	r3, [sp, #4]
 80223ee:	2300      	movs	r3, #0
 80223f0:	f88d 5008 	strb.w	r5, [sp, #8]
 80223f4:	f8ad 700a 	strh.w	r7, [sp, #10]
 80223f8:	f8ad 600c 	strh.w	r6, [sp, #12]
 80223fc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8022400:	6803      	ldr	r3, [r0, #0]
 8022402:	681b      	ldr	r3, [r3, #0]
 8022404:	4798      	blx	r3
 8022406:	b005      	add	sp, #20
 8022408:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802240a:	2900      	cmp	r1, #0
 802240c:	d1eb      	bne.n	80223e6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 802240e:	80a2      	strh	r2, [r4, #4]
 8022410:	80c6      	strh	r6, [r0, #6]
 8022412:	e7e8      	b.n	80223e6 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x7a>
 8022414:	08025e78 	.word	0x08025e78
 8022418:	08024094 	.word	0x08024094

0802241c <__cxa_pure_virtual>:
 802241c:	b508      	push	{r3, lr}
 802241e:	f000 f811 	bl	8022444 <_ZSt9terminatev>

08022422 <_ZdlPvj>:
 8022422:	f000 b800 	b.w	8022426 <_ZdlPv>

08022426 <_ZdlPv>:
 8022426:	f000 b881 	b.w	802252c <free>

0802242a <_ZN10__cxxabiv111__terminateEPFvvE>:
 802242a:	b508      	push	{r3, lr}
 802242c:	4780      	blx	r0
 802242e:	f000 f80e 	bl	802244e <abort>
	...

08022434 <_ZSt13get_terminatev>:
 8022434:	4b02      	ldr	r3, [pc, #8]	; (8022440 <_ZSt13get_terminatev+0xc>)
 8022436:	6818      	ldr	r0, [r3, #0]
 8022438:	f3bf 8f5b 	dmb	ish
 802243c:	4770      	bx	lr
 802243e:	bf00      	nop
 8022440:	200000a4 	.word	0x200000a4

08022444 <_ZSt9terminatev>:
 8022444:	b508      	push	{r3, lr}
 8022446:	f7ff fff5 	bl	8022434 <_ZSt13get_terminatev>
 802244a:	f7ff ffee 	bl	802242a <_ZN10__cxxabiv111__terminateEPFvvE>

0802244e <abort>:
 802244e:	b508      	push	{r3, lr}
 8022450:	2006      	movs	r0, #6
 8022452:	f000 fc2f 	bl	8022cb4 <raise>
 8022456:	2001      	movs	r0, #1
 8022458:	f7f7 f902 	bl	8019660 <_exit>

0802245c <__assert_func>:
 802245c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802245e:	461c      	mov	r4, r3
 8022460:	4b09      	ldr	r3, [pc, #36]	; (8022488 <__assert_func+0x2c>)
 8022462:	681b      	ldr	r3, [r3, #0]
 8022464:	4605      	mov	r5, r0
 8022466:	68d8      	ldr	r0, [r3, #12]
 8022468:	b152      	cbz	r2, 8022480 <__assert_func+0x24>
 802246a:	4b08      	ldr	r3, [pc, #32]	; (802248c <__assert_func+0x30>)
 802246c:	9100      	str	r1, [sp, #0]
 802246e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8022472:	4907      	ldr	r1, [pc, #28]	; (8022490 <__assert_func+0x34>)
 8022474:	462b      	mov	r3, r5
 8022476:	4622      	mov	r2, r4
 8022478:	f000 f81a 	bl	80224b0 <fiprintf>
 802247c:	f7ff ffe7 	bl	802244e <abort>
 8022480:	4b04      	ldr	r3, [pc, #16]	; (8022494 <__assert_func+0x38>)
 8022482:	461a      	mov	r2, r3
 8022484:	e7f2      	b.n	802246c <__assert_func+0x10>
 8022486:	bf00      	nop
 8022488:	200000a8 	.word	0x200000a8
 802248c:	08026562 	.word	0x08026562
 8022490:	0802656f 	.word	0x0802656f
 8022494:	0802659d 	.word	0x0802659d

08022498 <atexit>:
 8022498:	2300      	movs	r3, #0
 802249a:	4601      	mov	r1, r0
 802249c:	461a      	mov	r2, r3
 802249e:	4618      	mov	r0, r3
 80224a0:	f000 bce4 	b.w	8022e6c <__register_exitproc>

080224a4 <__errno>:
 80224a4:	4b01      	ldr	r3, [pc, #4]	; (80224ac <__errno+0x8>)
 80224a6:	6818      	ldr	r0, [r3, #0]
 80224a8:	4770      	bx	lr
 80224aa:	bf00      	nop
 80224ac:	200000a8 	.word	0x200000a8

080224b0 <fiprintf>:
 80224b0:	b40e      	push	{r1, r2, r3}
 80224b2:	b503      	push	{r0, r1, lr}
 80224b4:	4601      	mov	r1, r0
 80224b6:	ab03      	add	r3, sp, #12
 80224b8:	4805      	ldr	r0, [pc, #20]	; (80224d0 <fiprintf+0x20>)
 80224ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80224be:	6800      	ldr	r0, [r0, #0]
 80224c0:	9301      	str	r3, [sp, #4]
 80224c2:	f000 f921 	bl	8022708 <_vfiprintf_r>
 80224c6:	b002      	add	sp, #8
 80224c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80224cc:	b003      	add	sp, #12
 80224ce:	4770      	bx	lr
 80224d0:	200000a8 	.word	0x200000a8

080224d4 <__libc_init_array>:
 80224d4:	b570      	push	{r4, r5, r6, lr}
 80224d6:	4e0d      	ldr	r6, [pc, #52]	; (802250c <__libc_init_array+0x38>)
 80224d8:	4c0d      	ldr	r4, [pc, #52]	; (8022510 <__libc_init_array+0x3c>)
 80224da:	1ba4      	subs	r4, r4, r6
 80224dc:	10a4      	asrs	r4, r4, #2
 80224de:	2500      	movs	r5, #0
 80224e0:	42a5      	cmp	r5, r4
 80224e2:	d109      	bne.n	80224f8 <__libc_init_array+0x24>
 80224e4:	4e0b      	ldr	r6, [pc, #44]	; (8022514 <__libc_init_array+0x40>)
 80224e6:	4c0c      	ldr	r4, [pc, #48]	; (8022518 <__libc_init_array+0x44>)
 80224e8:	f000 ffb0 	bl	802344c <_init>
 80224ec:	1ba4      	subs	r4, r4, r6
 80224ee:	10a4      	asrs	r4, r4, #2
 80224f0:	2500      	movs	r5, #0
 80224f2:	42a5      	cmp	r5, r4
 80224f4:	d105      	bne.n	8022502 <__libc_init_array+0x2e>
 80224f6:	bd70      	pop	{r4, r5, r6, pc}
 80224f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80224fc:	4798      	blx	r3
 80224fe:	3501      	adds	r5, #1
 8022500:	e7ee      	b.n	80224e0 <__libc_init_array+0xc>
 8022502:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8022506:	4798      	blx	r3
 8022508:	3501      	adds	r5, #1
 802250a:	e7f2      	b.n	80224f2 <__libc_init_array+0x1e>
 802250c:	08042500 	.word	0x08042500
 8022510:	08042500 	.word	0x08042500
 8022514:	08042500 	.word	0x08042500
 8022518:	08042510 	.word	0x08042510

0802251c <malloc>:
 802251c:	4b02      	ldr	r3, [pc, #8]	; (8022528 <malloc+0xc>)
 802251e:	4601      	mov	r1, r0
 8022520:	6818      	ldr	r0, [r3, #0]
 8022522:	f000 b86d 	b.w	8022600 <_malloc_r>
 8022526:	bf00      	nop
 8022528:	200000a8 	.word	0x200000a8

0802252c <free>:
 802252c:	4b02      	ldr	r3, [pc, #8]	; (8022538 <free+0xc>)
 802252e:	4601      	mov	r1, r0
 8022530:	6818      	ldr	r0, [r3, #0]
 8022532:	f000 b817 	b.w	8022564 <_free_r>
 8022536:	bf00      	nop
 8022538:	200000a8 	.word	0x200000a8

0802253c <memcpy>:
 802253c:	b510      	push	{r4, lr}
 802253e:	1e43      	subs	r3, r0, #1
 8022540:	440a      	add	r2, r1
 8022542:	4291      	cmp	r1, r2
 8022544:	d100      	bne.n	8022548 <memcpy+0xc>
 8022546:	bd10      	pop	{r4, pc}
 8022548:	f811 4b01 	ldrb.w	r4, [r1], #1
 802254c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8022550:	e7f7      	b.n	8022542 <memcpy+0x6>

08022552 <memset>:
 8022552:	4402      	add	r2, r0
 8022554:	4603      	mov	r3, r0
 8022556:	4293      	cmp	r3, r2
 8022558:	d100      	bne.n	802255c <memset+0xa>
 802255a:	4770      	bx	lr
 802255c:	f803 1b01 	strb.w	r1, [r3], #1
 8022560:	e7f9      	b.n	8022556 <memset+0x4>
	...

08022564 <_free_r>:
 8022564:	b538      	push	{r3, r4, r5, lr}
 8022566:	4605      	mov	r5, r0
 8022568:	2900      	cmp	r1, #0
 802256a:	d045      	beq.n	80225f8 <_free_r+0x94>
 802256c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022570:	1f0c      	subs	r4, r1, #4
 8022572:	2b00      	cmp	r3, #0
 8022574:	bfb8      	it	lt
 8022576:	18e4      	addlt	r4, r4, r3
 8022578:	f000 feba 	bl	80232f0 <__malloc_lock>
 802257c:	4a1f      	ldr	r2, [pc, #124]	; (80225fc <_free_r+0x98>)
 802257e:	6813      	ldr	r3, [r2, #0]
 8022580:	4610      	mov	r0, r2
 8022582:	b933      	cbnz	r3, 8022592 <_free_r+0x2e>
 8022584:	6063      	str	r3, [r4, #4]
 8022586:	6014      	str	r4, [r2, #0]
 8022588:	4628      	mov	r0, r5
 802258a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802258e:	f000 beb0 	b.w	80232f2 <__malloc_unlock>
 8022592:	42a3      	cmp	r3, r4
 8022594:	d90c      	bls.n	80225b0 <_free_r+0x4c>
 8022596:	6821      	ldr	r1, [r4, #0]
 8022598:	1862      	adds	r2, r4, r1
 802259a:	4293      	cmp	r3, r2
 802259c:	bf04      	itt	eq
 802259e:	681a      	ldreq	r2, [r3, #0]
 80225a0:	685b      	ldreq	r3, [r3, #4]
 80225a2:	6063      	str	r3, [r4, #4]
 80225a4:	bf04      	itt	eq
 80225a6:	1852      	addeq	r2, r2, r1
 80225a8:	6022      	streq	r2, [r4, #0]
 80225aa:	6004      	str	r4, [r0, #0]
 80225ac:	e7ec      	b.n	8022588 <_free_r+0x24>
 80225ae:	4613      	mov	r3, r2
 80225b0:	685a      	ldr	r2, [r3, #4]
 80225b2:	b10a      	cbz	r2, 80225b8 <_free_r+0x54>
 80225b4:	42a2      	cmp	r2, r4
 80225b6:	d9fa      	bls.n	80225ae <_free_r+0x4a>
 80225b8:	6819      	ldr	r1, [r3, #0]
 80225ba:	1858      	adds	r0, r3, r1
 80225bc:	42a0      	cmp	r0, r4
 80225be:	d10b      	bne.n	80225d8 <_free_r+0x74>
 80225c0:	6820      	ldr	r0, [r4, #0]
 80225c2:	4401      	add	r1, r0
 80225c4:	1858      	adds	r0, r3, r1
 80225c6:	4282      	cmp	r2, r0
 80225c8:	6019      	str	r1, [r3, #0]
 80225ca:	d1dd      	bne.n	8022588 <_free_r+0x24>
 80225cc:	6810      	ldr	r0, [r2, #0]
 80225ce:	6852      	ldr	r2, [r2, #4]
 80225d0:	605a      	str	r2, [r3, #4]
 80225d2:	4401      	add	r1, r0
 80225d4:	6019      	str	r1, [r3, #0]
 80225d6:	e7d7      	b.n	8022588 <_free_r+0x24>
 80225d8:	d902      	bls.n	80225e0 <_free_r+0x7c>
 80225da:	230c      	movs	r3, #12
 80225dc:	602b      	str	r3, [r5, #0]
 80225de:	e7d3      	b.n	8022588 <_free_r+0x24>
 80225e0:	6820      	ldr	r0, [r4, #0]
 80225e2:	1821      	adds	r1, r4, r0
 80225e4:	428a      	cmp	r2, r1
 80225e6:	bf04      	itt	eq
 80225e8:	6811      	ldreq	r1, [r2, #0]
 80225ea:	6852      	ldreq	r2, [r2, #4]
 80225ec:	6062      	str	r2, [r4, #4]
 80225ee:	bf04      	itt	eq
 80225f0:	1809      	addeq	r1, r1, r0
 80225f2:	6021      	streq	r1, [r4, #0]
 80225f4:	605c      	str	r4, [r3, #4]
 80225f6:	e7c7      	b.n	8022588 <_free_r+0x24>
 80225f8:	bd38      	pop	{r3, r4, r5, pc}
 80225fa:	bf00      	nop
 80225fc:	20009dd0 	.word	0x20009dd0

08022600 <_malloc_r>:
 8022600:	b570      	push	{r4, r5, r6, lr}
 8022602:	1ccd      	adds	r5, r1, #3
 8022604:	f025 0503 	bic.w	r5, r5, #3
 8022608:	3508      	adds	r5, #8
 802260a:	2d0c      	cmp	r5, #12
 802260c:	bf38      	it	cc
 802260e:	250c      	movcc	r5, #12
 8022610:	2d00      	cmp	r5, #0
 8022612:	4606      	mov	r6, r0
 8022614:	db01      	blt.n	802261a <_malloc_r+0x1a>
 8022616:	42a9      	cmp	r1, r5
 8022618:	d903      	bls.n	8022622 <_malloc_r+0x22>
 802261a:	230c      	movs	r3, #12
 802261c:	6033      	str	r3, [r6, #0]
 802261e:	2000      	movs	r0, #0
 8022620:	bd70      	pop	{r4, r5, r6, pc}
 8022622:	f000 fe65 	bl	80232f0 <__malloc_lock>
 8022626:	4a21      	ldr	r2, [pc, #132]	; (80226ac <_malloc_r+0xac>)
 8022628:	6814      	ldr	r4, [r2, #0]
 802262a:	4621      	mov	r1, r4
 802262c:	b991      	cbnz	r1, 8022654 <_malloc_r+0x54>
 802262e:	4c20      	ldr	r4, [pc, #128]	; (80226b0 <_malloc_r+0xb0>)
 8022630:	6823      	ldr	r3, [r4, #0]
 8022632:	b91b      	cbnz	r3, 802263c <_malloc_r+0x3c>
 8022634:	4630      	mov	r0, r6
 8022636:	f000 fb05 	bl	8022c44 <_sbrk_r>
 802263a:	6020      	str	r0, [r4, #0]
 802263c:	4629      	mov	r1, r5
 802263e:	4630      	mov	r0, r6
 8022640:	f000 fb00 	bl	8022c44 <_sbrk_r>
 8022644:	1c43      	adds	r3, r0, #1
 8022646:	d124      	bne.n	8022692 <_malloc_r+0x92>
 8022648:	230c      	movs	r3, #12
 802264a:	6033      	str	r3, [r6, #0]
 802264c:	4630      	mov	r0, r6
 802264e:	f000 fe50 	bl	80232f2 <__malloc_unlock>
 8022652:	e7e4      	b.n	802261e <_malloc_r+0x1e>
 8022654:	680b      	ldr	r3, [r1, #0]
 8022656:	1b5b      	subs	r3, r3, r5
 8022658:	d418      	bmi.n	802268c <_malloc_r+0x8c>
 802265a:	2b0b      	cmp	r3, #11
 802265c:	d90f      	bls.n	802267e <_malloc_r+0x7e>
 802265e:	600b      	str	r3, [r1, #0]
 8022660:	50cd      	str	r5, [r1, r3]
 8022662:	18cc      	adds	r4, r1, r3
 8022664:	4630      	mov	r0, r6
 8022666:	f000 fe44 	bl	80232f2 <__malloc_unlock>
 802266a:	f104 000b 	add.w	r0, r4, #11
 802266e:	1d23      	adds	r3, r4, #4
 8022670:	f020 0007 	bic.w	r0, r0, #7
 8022674:	1ac3      	subs	r3, r0, r3
 8022676:	d0d3      	beq.n	8022620 <_malloc_r+0x20>
 8022678:	425a      	negs	r2, r3
 802267a:	50e2      	str	r2, [r4, r3]
 802267c:	e7d0      	b.n	8022620 <_malloc_r+0x20>
 802267e:	428c      	cmp	r4, r1
 8022680:	684b      	ldr	r3, [r1, #4]
 8022682:	bf16      	itet	ne
 8022684:	6063      	strne	r3, [r4, #4]
 8022686:	6013      	streq	r3, [r2, #0]
 8022688:	460c      	movne	r4, r1
 802268a:	e7eb      	b.n	8022664 <_malloc_r+0x64>
 802268c:	460c      	mov	r4, r1
 802268e:	6849      	ldr	r1, [r1, #4]
 8022690:	e7cc      	b.n	802262c <_malloc_r+0x2c>
 8022692:	1cc4      	adds	r4, r0, #3
 8022694:	f024 0403 	bic.w	r4, r4, #3
 8022698:	42a0      	cmp	r0, r4
 802269a:	d005      	beq.n	80226a8 <_malloc_r+0xa8>
 802269c:	1a21      	subs	r1, r4, r0
 802269e:	4630      	mov	r0, r6
 80226a0:	f000 fad0 	bl	8022c44 <_sbrk_r>
 80226a4:	3001      	adds	r0, #1
 80226a6:	d0cf      	beq.n	8022648 <_malloc_r+0x48>
 80226a8:	6025      	str	r5, [r4, #0]
 80226aa:	e7db      	b.n	8022664 <_malloc_r+0x64>
 80226ac:	20009dd0 	.word	0x20009dd0
 80226b0:	20009dd4 	.word	0x20009dd4

080226b4 <__sfputc_r>:
 80226b4:	6893      	ldr	r3, [r2, #8]
 80226b6:	3b01      	subs	r3, #1
 80226b8:	2b00      	cmp	r3, #0
 80226ba:	b410      	push	{r4}
 80226bc:	6093      	str	r3, [r2, #8]
 80226be:	da08      	bge.n	80226d2 <__sfputc_r+0x1e>
 80226c0:	6994      	ldr	r4, [r2, #24]
 80226c2:	42a3      	cmp	r3, r4
 80226c4:	db01      	blt.n	80226ca <__sfputc_r+0x16>
 80226c6:	290a      	cmp	r1, #10
 80226c8:	d103      	bne.n	80226d2 <__sfputc_r+0x1e>
 80226ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 80226ce:	f000 bb0d 	b.w	8022cec <__swbuf_r>
 80226d2:	6813      	ldr	r3, [r2, #0]
 80226d4:	1c58      	adds	r0, r3, #1
 80226d6:	6010      	str	r0, [r2, #0]
 80226d8:	7019      	strb	r1, [r3, #0]
 80226da:	4608      	mov	r0, r1
 80226dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80226e0:	4770      	bx	lr

080226e2 <__sfputs_r>:
 80226e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80226e4:	4606      	mov	r6, r0
 80226e6:	460f      	mov	r7, r1
 80226e8:	4614      	mov	r4, r2
 80226ea:	18d5      	adds	r5, r2, r3
 80226ec:	42ac      	cmp	r4, r5
 80226ee:	d101      	bne.n	80226f4 <__sfputs_r+0x12>
 80226f0:	2000      	movs	r0, #0
 80226f2:	e007      	b.n	8022704 <__sfputs_r+0x22>
 80226f4:	463a      	mov	r2, r7
 80226f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80226fa:	4630      	mov	r0, r6
 80226fc:	f7ff ffda 	bl	80226b4 <__sfputc_r>
 8022700:	1c43      	adds	r3, r0, #1
 8022702:	d1f3      	bne.n	80226ec <__sfputs_r+0xa>
 8022704:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022708 <_vfiprintf_r>:
 8022708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802270c:	460c      	mov	r4, r1
 802270e:	b09d      	sub	sp, #116	; 0x74
 8022710:	4617      	mov	r7, r2
 8022712:	461d      	mov	r5, r3
 8022714:	4606      	mov	r6, r0
 8022716:	b118      	cbz	r0, 8022720 <_vfiprintf_r+0x18>
 8022718:	6983      	ldr	r3, [r0, #24]
 802271a:	b90b      	cbnz	r3, 8022720 <_vfiprintf_r+0x18>
 802271c:	f000 fcfa 	bl	8023114 <__sinit>
 8022720:	4b7c      	ldr	r3, [pc, #496]	; (8022914 <_vfiprintf_r+0x20c>)
 8022722:	429c      	cmp	r4, r3
 8022724:	d158      	bne.n	80227d8 <_vfiprintf_r+0xd0>
 8022726:	6874      	ldr	r4, [r6, #4]
 8022728:	89a3      	ldrh	r3, [r4, #12]
 802272a:	0718      	lsls	r0, r3, #28
 802272c:	d55e      	bpl.n	80227ec <_vfiprintf_r+0xe4>
 802272e:	6923      	ldr	r3, [r4, #16]
 8022730:	2b00      	cmp	r3, #0
 8022732:	d05b      	beq.n	80227ec <_vfiprintf_r+0xe4>
 8022734:	2300      	movs	r3, #0
 8022736:	9309      	str	r3, [sp, #36]	; 0x24
 8022738:	2320      	movs	r3, #32
 802273a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 802273e:	2330      	movs	r3, #48	; 0x30
 8022740:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022744:	9503      	str	r5, [sp, #12]
 8022746:	f04f 0b01 	mov.w	fp, #1
 802274a:	46b8      	mov	r8, r7
 802274c:	4645      	mov	r5, r8
 802274e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8022752:	b10b      	cbz	r3, 8022758 <_vfiprintf_r+0x50>
 8022754:	2b25      	cmp	r3, #37	; 0x25
 8022756:	d154      	bne.n	8022802 <_vfiprintf_r+0xfa>
 8022758:	ebb8 0a07 	subs.w	sl, r8, r7
 802275c:	d00b      	beq.n	8022776 <_vfiprintf_r+0x6e>
 802275e:	4653      	mov	r3, sl
 8022760:	463a      	mov	r2, r7
 8022762:	4621      	mov	r1, r4
 8022764:	4630      	mov	r0, r6
 8022766:	f7ff ffbc 	bl	80226e2 <__sfputs_r>
 802276a:	3001      	adds	r0, #1
 802276c:	f000 80c2 	beq.w	80228f4 <_vfiprintf_r+0x1ec>
 8022770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022772:	4453      	add	r3, sl
 8022774:	9309      	str	r3, [sp, #36]	; 0x24
 8022776:	f898 3000 	ldrb.w	r3, [r8]
 802277a:	2b00      	cmp	r3, #0
 802277c:	f000 80ba 	beq.w	80228f4 <_vfiprintf_r+0x1ec>
 8022780:	2300      	movs	r3, #0
 8022782:	f04f 32ff 	mov.w	r2, #4294967295
 8022786:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802278a:	9304      	str	r3, [sp, #16]
 802278c:	9307      	str	r3, [sp, #28]
 802278e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022792:	931a      	str	r3, [sp, #104]	; 0x68
 8022794:	46a8      	mov	r8, r5
 8022796:	2205      	movs	r2, #5
 8022798:	f818 1b01 	ldrb.w	r1, [r8], #1
 802279c:	485e      	ldr	r0, [pc, #376]	; (8022918 <_vfiprintf_r+0x210>)
 802279e:	f7dd fd37 	bl	8000210 <memchr>
 80227a2:	9b04      	ldr	r3, [sp, #16]
 80227a4:	bb78      	cbnz	r0, 8022806 <_vfiprintf_r+0xfe>
 80227a6:	06d9      	lsls	r1, r3, #27
 80227a8:	bf44      	itt	mi
 80227aa:	2220      	movmi	r2, #32
 80227ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80227b0:	071a      	lsls	r2, r3, #28
 80227b2:	bf44      	itt	mi
 80227b4:	222b      	movmi	r2, #43	; 0x2b
 80227b6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80227ba:	782a      	ldrb	r2, [r5, #0]
 80227bc:	2a2a      	cmp	r2, #42	; 0x2a
 80227be:	d02a      	beq.n	8022816 <_vfiprintf_r+0x10e>
 80227c0:	9a07      	ldr	r2, [sp, #28]
 80227c2:	46a8      	mov	r8, r5
 80227c4:	2000      	movs	r0, #0
 80227c6:	250a      	movs	r5, #10
 80227c8:	4641      	mov	r1, r8
 80227ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80227ce:	3b30      	subs	r3, #48	; 0x30
 80227d0:	2b09      	cmp	r3, #9
 80227d2:	d969      	bls.n	80228a8 <_vfiprintf_r+0x1a0>
 80227d4:	b360      	cbz	r0, 8022830 <_vfiprintf_r+0x128>
 80227d6:	e024      	b.n	8022822 <_vfiprintf_r+0x11a>
 80227d8:	4b50      	ldr	r3, [pc, #320]	; (802291c <_vfiprintf_r+0x214>)
 80227da:	429c      	cmp	r4, r3
 80227dc:	d101      	bne.n	80227e2 <_vfiprintf_r+0xda>
 80227de:	68b4      	ldr	r4, [r6, #8]
 80227e0:	e7a2      	b.n	8022728 <_vfiprintf_r+0x20>
 80227e2:	4b4f      	ldr	r3, [pc, #316]	; (8022920 <_vfiprintf_r+0x218>)
 80227e4:	429c      	cmp	r4, r3
 80227e6:	bf08      	it	eq
 80227e8:	68f4      	ldreq	r4, [r6, #12]
 80227ea:	e79d      	b.n	8022728 <_vfiprintf_r+0x20>
 80227ec:	4621      	mov	r1, r4
 80227ee:	4630      	mov	r0, r6
 80227f0:	f000 face 	bl	8022d90 <__swsetup_r>
 80227f4:	2800      	cmp	r0, #0
 80227f6:	d09d      	beq.n	8022734 <_vfiprintf_r+0x2c>
 80227f8:	f04f 30ff 	mov.w	r0, #4294967295
 80227fc:	b01d      	add	sp, #116	; 0x74
 80227fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022802:	46a8      	mov	r8, r5
 8022804:	e7a2      	b.n	802274c <_vfiprintf_r+0x44>
 8022806:	4a44      	ldr	r2, [pc, #272]	; (8022918 <_vfiprintf_r+0x210>)
 8022808:	1a80      	subs	r0, r0, r2
 802280a:	fa0b f000 	lsl.w	r0, fp, r0
 802280e:	4318      	orrs	r0, r3
 8022810:	9004      	str	r0, [sp, #16]
 8022812:	4645      	mov	r5, r8
 8022814:	e7be      	b.n	8022794 <_vfiprintf_r+0x8c>
 8022816:	9a03      	ldr	r2, [sp, #12]
 8022818:	1d11      	adds	r1, r2, #4
 802281a:	6812      	ldr	r2, [r2, #0]
 802281c:	9103      	str	r1, [sp, #12]
 802281e:	2a00      	cmp	r2, #0
 8022820:	db01      	blt.n	8022826 <_vfiprintf_r+0x11e>
 8022822:	9207      	str	r2, [sp, #28]
 8022824:	e004      	b.n	8022830 <_vfiprintf_r+0x128>
 8022826:	4252      	negs	r2, r2
 8022828:	f043 0302 	orr.w	r3, r3, #2
 802282c:	9207      	str	r2, [sp, #28]
 802282e:	9304      	str	r3, [sp, #16]
 8022830:	f898 3000 	ldrb.w	r3, [r8]
 8022834:	2b2e      	cmp	r3, #46	; 0x2e
 8022836:	d10e      	bne.n	8022856 <_vfiprintf_r+0x14e>
 8022838:	f898 3001 	ldrb.w	r3, [r8, #1]
 802283c:	2b2a      	cmp	r3, #42	; 0x2a
 802283e:	d138      	bne.n	80228b2 <_vfiprintf_r+0x1aa>
 8022840:	9b03      	ldr	r3, [sp, #12]
 8022842:	1d1a      	adds	r2, r3, #4
 8022844:	681b      	ldr	r3, [r3, #0]
 8022846:	9203      	str	r2, [sp, #12]
 8022848:	2b00      	cmp	r3, #0
 802284a:	bfb8      	it	lt
 802284c:	f04f 33ff 	movlt.w	r3, #4294967295
 8022850:	f108 0802 	add.w	r8, r8, #2
 8022854:	9305      	str	r3, [sp, #20]
 8022856:	4d33      	ldr	r5, [pc, #204]	; (8022924 <_vfiprintf_r+0x21c>)
 8022858:	f898 1000 	ldrb.w	r1, [r8]
 802285c:	2203      	movs	r2, #3
 802285e:	4628      	mov	r0, r5
 8022860:	f7dd fcd6 	bl	8000210 <memchr>
 8022864:	b140      	cbz	r0, 8022878 <_vfiprintf_r+0x170>
 8022866:	2340      	movs	r3, #64	; 0x40
 8022868:	1b40      	subs	r0, r0, r5
 802286a:	fa03 f000 	lsl.w	r0, r3, r0
 802286e:	9b04      	ldr	r3, [sp, #16]
 8022870:	4303      	orrs	r3, r0
 8022872:	f108 0801 	add.w	r8, r8, #1
 8022876:	9304      	str	r3, [sp, #16]
 8022878:	f898 1000 	ldrb.w	r1, [r8]
 802287c:	482a      	ldr	r0, [pc, #168]	; (8022928 <_vfiprintf_r+0x220>)
 802287e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022882:	2206      	movs	r2, #6
 8022884:	f108 0701 	add.w	r7, r8, #1
 8022888:	f7dd fcc2 	bl	8000210 <memchr>
 802288c:	2800      	cmp	r0, #0
 802288e:	d037      	beq.n	8022900 <_vfiprintf_r+0x1f8>
 8022890:	4b26      	ldr	r3, [pc, #152]	; (802292c <_vfiprintf_r+0x224>)
 8022892:	bb1b      	cbnz	r3, 80228dc <_vfiprintf_r+0x1d4>
 8022894:	9b03      	ldr	r3, [sp, #12]
 8022896:	3307      	adds	r3, #7
 8022898:	f023 0307 	bic.w	r3, r3, #7
 802289c:	3308      	adds	r3, #8
 802289e:	9303      	str	r3, [sp, #12]
 80228a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80228a2:	444b      	add	r3, r9
 80228a4:	9309      	str	r3, [sp, #36]	; 0x24
 80228a6:	e750      	b.n	802274a <_vfiprintf_r+0x42>
 80228a8:	fb05 3202 	mla	r2, r5, r2, r3
 80228ac:	2001      	movs	r0, #1
 80228ae:	4688      	mov	r8, r1
 80228b0:	e78a      	b.n	80227c8 <_vfiprintf_r+0xc0>
 80228b2:	2300      	movs	r3, #0
 80228b4:	f108 0801 	add.w	r8, r8, #1
 80228b8:	9305      	str	r3, [sp, #20]
 80228ba:	4619      	mov	r1, r3
 80228bc:	250a      	movs	r5, #10
 80228be:	4640      	mov	r0, r8
 80228c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80228c4:	3a30      	subs	r2, #48	; 0x30
 80228c6:	2a09      	cmp	r2, #9
 80228c8:	d903      	bls.n	80228d2 <_vfiprintf_r+0x1ca>
 80228ca:	2b00      	cmp	r3, #0
 80228cc:	d0c3      	beq.n	8022856 <_vfiprintf_r+0x14e>
 80228ce:	9105      	str	r1, [sp, #20]
 80228d0:	e7c1      	b.n	8022856 <_vfiprintf_r+0x14e>
 80228d2:	fb05 2101 	mla	r1, r5, r1, r2
 80228d6:	2301      	movs	r3, #1
 80228d8:	4680      	mov	r8, r0
 80228da:	e7f0      	b.n	80228be <_vfiprintf_r+0x1b6>
 80228dc:	ab03      	add	r3, sp, #12
 80228de:	9300      	str	r3, [sp, #0]
 80228e0:	4622      	mov	r2, r4
 80228e2:	4b13      	ldr	r3, [pc, #76]	; (8022930 <_vfiprintf_r+0x228>)
 80228e4:	a904      	add	r1, sp, #16
 80228e6:	4630      	mov	r0, r6
 80228e8:	f3af 8000 	nop.w
 80228ec:	f1b0 3fff 	cmp.w	r0, #4294967295
 80228f0:	4681      	mov	r9, r0
 80228f2:	d1d5      	bne.n	80228a0 <_vfiprintf_r+0x198>
 80228f4:	89a3      	ldrh	r3, [r4, #12]
 80228f6:	065b      	lsls	r3, r3, #25
 80228f8:	f53f af7e 	bmi.w	80227f8 <_vfiprintf_r+0xf0>
 80228fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80228fe:	e77d      	b.n	80227fc <_vfiprintf_r+0xf4>
 8022900:	ab03      	add	r3, sp, #12
 8022902:	9300      	str	r3, [sp, #0]
 8022904:	4622      	mov	r2, r4
 8022906:	4b0a      	ldr	r3, [pc, #40]	; (8022930 <_vfiprintf_r+0x228>)
 8022908:	a904      	add	r1, sp, #16
 802290a:	4630      	mov	r0, r6
 802290c:	f000 f888 	bl	8022a20 <_printf_i>
 8022910:	e7ec      	b.n	80228ec <_vfiprintf_r+0x1e4>
 8022912:	bf00      	nop
 8022914:	080265f8 	.word	0x080265f8
 8022918:	080265a4 	.word	0x080265a4
 802291c:	08026618 	.word	0x08026618
 8022920:	080265d8 	.word	0x080265d8
 8022924:	080265aa 	.word	0x080265aa
 8022928:	080265ae 	.word	0x080265ae
 802292c:	00000000 	.word	0x00000000
 8022930:	080226e3 	.word	0x080226e3

08022934 <_printf_common>:
 8022934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022938:	4691      	mov	r9, r2
 802293a:	461f      	mov	r7, r3
 802293c:	688a      	ldr	r2, [r1, #8]
 802293e:	690b      	ldr	r3, [r1, #16]
 8022940:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8022944:	4293      	cmp	r3, r2
 8022946:	bfb8      	it	lt
 8022948:	4613      	movlt	r3, r2
 802294a:	f8c9 3000 	str.w	r3, [r9]
 802294e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8022952:	4606      	mov	r6, r0
 8022954:	460c      	mov	r4, r1
 8022956:	b112      	cbz	r2, 802295e <_printf_common+0x2a>
 8022958:	3301      	adds	r3, #1
 802295a:	f8c9 3000 	str.w	r3, [r9]
 802295e:	6823      	ldr	r3, [r4, #0]
 8022960:	0699      	lsls	r1, r3, #26
 8022962:	bf42      	ittt	mi
 8022964:	f8d9 3000 	ldrmi.w	r3, [r9]
 8022968:	3302      	addmi	r3, #2
 802296a:	f8c9 3000 	strmi.w	r3, [r9]
 802296e:	6825      	ldr	r5, [r4, #0]
 8022970:	f015 0506 	ands.w	r5, r5, #6
 8022974:	d107      	bne.n	8022986 <_printf_common+0x52>
 8022976:	f104 0a19 	add.w	sl, r4, #25
 802297a:	68e3      	ldr	r3, [r4, #12]
 802297c:	f8d9 2000 	ldr.w	r2, [r9]
 8022980:	1a9b      	subs	r3, r3, r2
 8022982:	42ab      	cmp	r3, r5
 8022984:	dc28      	bgt.n	80229d8 <_printf_common+0xa4>
 8022986:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 802298a:	6822      	ldr	r2, [r4, #0]
 802298c:	3300      	adds	r3, #0
 802298e:	bf18      	it	ne
 8022990:	2301      	movne	r3, #1
 8022992:	0692      	lsls	r2, r2, #26
 8022994:	d42d      	bmi.n	80229f2 <_printf_common+0xbe>
 8022996:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802299a:	4639      	mov	r1, r7
 802299c:	4630      	mov	r0, r6
 802299e:	47c0      	blx	r8
 80229a0:	3001      	adds	r0, #1
 80229a2:	d020      	beq.n	80229e6 <_printf_common+0xb2>
 80229a4:	6823      	ldr	r3, [r4, #0]
 80229a6:	68e5      	ldr	r5, [r4, #12]
 80229a8:	f8d9 2000 	ldr.w	r2, [r9]
 80229ac:	f003 0306 	and.w	r3, r3, #6
 80229b0:	2b04      	cmp	r3, #4
 80229b2:	bf08      	it	eq
 80229b4:	1aad      	subeq	r5, r5, r2
 80229b6:	68a3      	ldr	r3, [r4, #8]
 80229b8:	6922      	ldr	r2, [r4, #16]
 80229ba:	bf0c      	ite	eq
 80229bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80229c0:	2500      	movne	r5, #0
 80229c2:	4293      	cmp	r3, r2
 80229c4:	bfc4      	itt	gt
 80229c6:	1a9b      	subgt	r3, r3, r2
 80229c8:	18ed      	addgt	r5, r5, r3
 80229ca:	f04f 0900 	mov.w	r9, #0
 80229ce:	341a      	adds	r4, #26
 80229d0:	454d      	cmp	r5, r9
 80229d2:	d11a      	bne.n	8022a0a <_printf_common+0xd6>
 80229d4:	2000      	movs	r0, #0
 80229d6:	e008      	b.n	80229ea <_printf_common+0xb6>
 80229d8:	2301      	movs	r3, #1
 80229da:	4652      	mov	r2, sl
 80229dc:	4639      	mov	r1, r7
 80229de:	4630      	mov	r0, r6
 80229e0:	47c0      	blx	r8
 80229e2:	3001      	adds	r0, #1
 80229e4:	d103      	bne.n	80229ee <_printf_common+0xba>
 80229e6:	f04f 30ff 	mov.w	r0, #4294967295
 80229ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80229ee:	3501      	adds	r5, #1
 80229f0:	e7c3      	b.n	802297a <_printf_common+0x46>
 80229f2:	18e1      	adds	r1, r4, r3
 80229f4:	1c5a      	adds	r2, r3, #1
 80229f6:	2030      	movs	r0, #48	; 0x30
 80229f8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80229fc:	4422      	add	r2, r4
 80229fe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8022a02:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8022a06:	3302      	adds	r3, #2
 8022a08:	e7c5      	b.n	8022996 <_printf_common+0x62>
 8022a0a:	2301      	movs	r3, #1
 8022a0c:	4622      	mov	r2, r4
 8022a0e:	4639      	mov	r1, r7
 8022a10:	4630      	mov	r0, r6
 8022a12:	47c0      	blx	r8
 8022a14:	3001      	adds	r0, #1
 8022a16:	d0e6      	beq.n	80229e6 <_printf_common+0xb2>
 8022a18:	f109 0901 	add.w	r9, r9, #1
 8022a1c:	e7d8      	b.n	80229d0 <_printf_common+0x9c>
	...

08022a20 <_printf_i>:
 8022a20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8022a24:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8022a28:	460c      	mov	r4, r1
 8022a2a:	7e09      	ldrb	r1, [r1, #24]
 8022a2c:	b085      	sub	sp, #20
 8022a2e:	296e      	cmp	r1, #110	; 0x6e
 8022a30:	4617      	mov	r7, r2
 8022a32:	4606      	mov	r6, r0
 8022a34:	4698      	mov	r8, r3
 8022a36:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8022a38:	f000 80b3 	beq.w	8022ba2 <_printf_i+0x182>
 8022a3c:	d822      	bhi.n	8022a84 <_printf_i+0x64>
 8022a3e:	2963      	cmp	r1, #99	; 0x63
 8022a40:	d036      	beq.n	8022ab0 <_printf_i+0x90>
 8022a42:	d80a      	bhi.n	8022a5a <_printf_i+0x3a>
 8022a44:	2900      	cmp	r1, #0
 8022a46:	f000 80b9 	beq.w	8022bbc <_printf_i+0x19c>
 8022a4a:	2958      	cmp	r1, #88	; 0x58
 8022a4c:	f000 8083 	beq.w	8022b56 <_printf_i+0x136>
 8022a50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022a54:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8022a58:	e032      	b.n	8022ac0 <_printf_i+0xa0>
 8022a5a:	2964      	cmp	r1, #100	; 0x64
 8022a5c:	d001      	beq.n	8022a62 <_printf_i+0x42>
 8022a5e:	2969      	cmp	r1, #105	; 0x69
 8022a60:	d1f6      	bne.n	8022a50 <_printf_i+0x30>
 8022a62:	6820      	ldr	r0, [r4, #0]
 8022a64:	6813      	ldr	r3, [r2, #0]
 8022a66:	0605      	lsls	r5, r0, #24
 8022a68:	f103 0104 	add.w	r1, r3, #4
 8022a6c:	d52a      	bpl.n	8022ac4 <_printf_i+0xa4>
 8022a6e:	681b      	ldr	r3, [r3, #0]
 8022a70:	6011      	str	r1, [r2, #0]
 8022a72:	2b00      	cmp	r3, #0
 8022a74:	da03      	bge.n	8022a7e <_printf_i+0x5e>
 8022a76:	222d      	movs	r2, #45	; 0x2d
 8022a78:	425b      	negs	r3, r3
 8022a7a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8022a7e:	486f      	ldr	r0, [pc, #444]	; (8022c3c <_printf_i+0x21c>)
 8022a80:	220a      	movs	r2, #10
 8022a82:	e039      	b.n	8022af8 <_printf_i+0xd8>
 8022a84:	2973      	cmp	r1, #115	; 0x73
 8022a86:	f000 809d 	beq.w	8022bc4 <_printf_i+0x1a4>
 8022a8a:	d808      	bhi.n	8022a9e <_printf_i+0x7e>
 8022a8c:	296f      	cmp	r1, #111	; 0x6f
 8022a8e:	d020      	beq.n	8022ad2 <_printf_i+0xb2>
 8022a90:	2970      	cmp	r1, #112	; 0x70
 8022a92:	d1dd      	bne.n	8022a50 <_printf_i+0x30>
 8022a94:	6823      	ldr	r3, [r4, #0]
 8022a96:	f043 0320 	orr.w	r3, r3, #32
 8022a9a:	6023      	str	r3, [r4, #0]
 8022a9c:	e003      	b.n	8022aa6 <_printf_i+0x86>
 8022a9e:	2975      	cmp	r1, #117	; 0x75
 8022aa0:	d017      	beq.n	8022ad2 <_printf_i+0xb2>
 8022aa2:	2978      	cmp	r1, #120	; 0x78
 8022aa4:	d1d4      	bne.n	8022a50 <_printf_i+0x30>
 8022aa6:	2378      	movs	r3, #120	; 0x78
 8022aa8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8022aac:	4864      	ldr	r0, [pc, #400]	; (8022c40 <_printf_i+0x220>)
 8022aae:	e055      	b.n	8022b5c <_printf_i+0x13c>
 8022ab0:	6813      	ldr	r3, [r2, #0]
 8022ab2:	1d19      	adds	r1, r3, #4
 8022ab4:	681b      	ldr	r3, [r3, #0]
 8022ab6:	6011      	str	r1, [r2, #0]
 8022ab8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022abc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022ac0:	2301      	movs	r3, #1
 8022ac2:	e08c      	b.n	8022bde <_printf_i+0x1be>
 8022ac4:	681b      	ldr	r3, [r3, #0]
 8022ac6:	6011      	str	r1, [r2, #0]
 8022ac8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8022acc:	bf18      	it	ne
 8022ace:	b21b      	sxthne	r3, r3
 8022ad0:	e7cf      	b.n	8022a72 <_printf_i+0x52>
 8022ad2:	6813      	ldr	r3, [r2, #0]
 8022ad4:	6825      	ldr	r5, [r4, #0]
 8022ad6:	1d18      	adds	r0, r3, #4
 8022ad8:	6010      	str	r0, [r2, #0]
 8022ada:	0628      	lsls	r0, r5, #24
 8022adc:	d501      	bpl.n	8022ae2 <_printf_i+0xc2>
 8022ade:	681b      	ldr	r3, [r3, #0]
 8022ae0:	e002      	b.n	8022ae8 <_printf_i+0xc8>
 8022ae2:	0668      	lsls	r0, r5, #25
 8022ae4:	d5fb      	bpl.n	8022ade <_printf_i+0xbe>
 8022ae6:	881b      	ldrh	r3, [r3, #0]
 8022ae8:	4854      	ldr	r0, [pc, #336]	; (8022c3c <_printf_i+0x21c>)
 8022aea:	296f      	cmp	r1, #111	; 0x6f
 8022aec:	bf14      	ite	ne
 8022aee:	220a      	movne	r2, #10
 8022af0:	2208      	moveq	r2, #8
 8022af2:	2100      	movs	r1, #0
 8022af4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8022af8:	6865      	ldr	r5, [r4, #4]
 8022afa:	60a5      	str	r5, [r4, #8]
 8022afc:	2d00      	cmp	r5, #0
 8022afe:	f2c0 8095 	blt.w	8022c2c <_printf_i+0x20c>
 8022b02:	6821      	ldr	r1, [r4, #0]
 8022b04:	f021 0104 	bic.w	r1, r1, #4
 8022b08:	6021      	str	r1, [r4, #0]
 8022b0a:	2b00      	cmp	r3, #0
 8022b0c:	d13d      	bne.n	8022b8a <_printf_i+0x16a>
 8022b0e:	2d00      	cmp	r5, #0
 8022b10:	f040 808e 	bne.w	8022c30 <_printf_i+0x210>
 8022b14:	4665      	mov	r5, ip
 8022b16:	2a08      	cmp	r2, #8
 8022b18:	d10b      	bne.n	8022b32 <_printf_i+0x112>
 8022b1a:	6823      	ldr	r3, [r4, #0]
 8022b1c:	07db      	lsls	r3, r3, #31
 8022b1e:	d508      	bpl.n	8022b32 <_printf_i+0x112>
 8022b20:	6923      	ldr	r3, [r4, #16]
 8022b22:	6862      	ldr	r2, [r4, #4]
 8022b24:	429a      	cmp	r2, r3
 8022b26:	bfde      	ittt	le
 8022b28:	2330      	movle	r3, #48	; 0x30
 8022b2a:	f805 3c01 	strble.w	r3, [r5, #-1]
 8022b2e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8022b32:	ebac 0305 	sub.w	r3, ip, r5
 8022b36:	6123      	str	r3, [r4, #16]
 8022b38:	f8cd 8000 	str.w	r8, [sp]
 8022b3c:	463b      	mov	r3, r7
 8022b3e:	aa03      	add	r2, sp, #12
 8022b40:	4621      	mov	r1, r4
 8022b42:	4630      	mov	r0, r6
 8022b44:	f7ff fef6 	bl	8022934 <_printf_common>
 8022b48:	3001      	adds	r0, #1
 8022b4a:	d14d      	bne.n	8022be8 <_printf_i+0x1c8>
 8022b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8022b50:	b005      	add	sp, #20
 8022b52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022b56:	4839      	ldr	r0, [pc, #228]	; (8022c3c <_printf_i+0x21c>)
 8022b58:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8022b5c:	6813      	ldr	r3, [r2, #0]
 8022b5e:	6821      	ldr	r1, [r4, #0]
 8022b60:	1d1d      	adds	r5, r3, #4
 8022b62:	681b      	ldr	r3, [r3, #0]
 8022b64:	6015      	str	r5, [r2, #0]
 8022b66:	060a      	lsls	r2, r1, #24
 8022b68:	d50b      	bpl.n	8022b82 <_printf_i+0x162>
 8022b6a:	07ca      	lsls	r2, r1, #31
 8022b6c:	bf44      	itt	mi
 8022b6e:	f041 0120 	orrmi.w	r1, r1, #32
 8022b72:	6021      	strmi	r1, [r4, #0]
 8022b74:	b91b      	cbnz	r3, 8022b7e <_printf_i+0x15e>
 8022b76:	6822      	ldr	r2, [r4, #0]
 8022b78:	f022 0220 	bic.w	r2, r2, #32
 8022b7c:	6022      	str	r2, [r4, #0]
 8022b7e:	2210      	movs	r2, #16
 8022b80:	e7b7      	b.n	8022af2 <_printf_i+0xd2>
 8022b82:	064d      	lsls	r5, r1, #25
 8022b84:	bf48      	it	mi
 8022b86:	b29b      	uxthmi	r3, r3
 8022b88:	e7ef      	b.n	8022b6a <_printf_i+0x14a>
 8022b8a:	4665      	mov	r5, ip
 8022b8c:	fbb3 f1f2 	udiv	r1, r3, r2
 8022b90:	fb02 3311 	mls	r3, r2, r1, r3
 8022b94:	5cc3      	ldrb	r3, [r0, r3]
 8022b96:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8022b9a:	460b      	mov	r3, r1
 8022b9c:	2900      	cmp	r1, #0
 8022b9e:	d1f5      	bne.n	8022b8c <_printf_i+0x16c>
 8022ba0:	e7b9      	b.n	8022b16 <_printf_i+0xf6>
 8022ba2:	6813      	ldr	r3, [r2, #0]
 8022ba4:	6825      	ldr	r5, [r4, #0]
 8022ba6:	6961      	ldr	r1, [r4, #20]
 8022ba8:	1d18      	adds	r0, r3, #4
 8022baa:	6010      	str	r0, [r2, #0]
 8022bac:	0628      	lsls	r0, r5, #24
 8022bae:	681b      	ldr	r3, [r3, #0]
 8022bb0:	d501      	bpl.n	8022bb6 <_printf_i+0x196>
 8022bb2:	6019      	str	r1, [r3, #0]
 8022bb4:	e002      	b.n	8022bbc <_printf_i+0x19c>
 8022bb6:	066a      	lsls	r2, r5, #25
 8022bb8:	d5fb      	bpl.n	8022bb2 <_printf_i+0x192>
 8022bba:	8019      	strh	r1, [r3, #0]
 8022bbc:	2300      	movs	r3, #0
 8022bbe:	6123      	str	r3, [r4, #16]
 8022bc0:	4665      	mov	r5, ip
 8022bc2:	e7b9      	b.n	8022b38 <_printf_i+0x118>
 8022bc4:	6813      	ldr	r3, [r2, #0]
 8022bc6:	1d19      	adds	r1, r3, #4
 8022bc8:	6011      	str	r1, [r2, #0]
 8022bca:	681d      	ldr	r5, [r3, #0]
 8022bcc:	6862      	ldr	r2, [r4, #4]
 8022bce:	2100      	movs	r1, #0
 8022bd0:	4628      	mov	r0, r5
 8022bd2:	f7dd fb1d 	bl	8000210 <memchr>
 8022bd6:	b108      	cbz	r0, 8022bdc <_printf_i+0x1bc>
 8022bd8:	1b40      	subs	r0, r0, r5
 8022bda:	6060      	str	r0, [r4, #4]
 8022bdc:	6863      	ldr	r3, [r4, #4]
 8022bde:	6123      	str	r3, [r4, #16]
 8022be0:	2300      	movs	r3, #0
 8022be2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8022be6:	e7a7      	b.n	8022b38 <_printf_i+0x118>
 8022be8:	6923      	ldr	r3, [r4, #16]
 8022bea:	462a      	mov	r2, r5
 8022bec:	4639      	mov	r1, r7
 8022bee:	4630      	mov	r0, r6
 8022bf0:	47c0      	blx	r8
 8022bf2:	3001      	adds	r0, #1
 8022bf4:	d0aa      	beq.n	8022b4c <_printf_i+0x12c>
 8022bf6:	6823      	ldr	r3, [r4, #0]
 8022bf8:	079b      	lsls	r3, r3, #30
 8022bfa:	d413      	bmi.n	8022c24 <_printf_i+0x204>
 8022bfc:	68e0      	ldr	r0, [r4, #12]
 8022bfe:	9b03      	ldr	r3, [sp, #12]
 8022c00:	4298      	cmp	r0, r3
 8022c02:	bfb8      	it	lt
 8022c04:	4618      	movlt	r0, r3
 8022c06:	e7a3      	b.n	8022b50 <_printf_i+0x130>
 8022c08:	2301      	movs	r3, #1
 8022c0a:	464a      	mov	r2, r9
 8022c0c:	4639      	mov	r1, r7
 8022c0e:	4630      	mov	r0, r6
 8022c10:	47c0      	blx	r8
 8022c12:	3001      	adds	r0, #1
 8022c14:	d09a      	beq.n	8022b4c <_printf_i+0x12c>
 8022c16:	3501      	adds	r5, #1
 8022c18:	68e3      	ldr	r3, [r4, #12]
 8022c1a:	9a03      	ldr	r2, [sp, #12]
 8022c1c:	1a9b      	subs	r3, r3, r2
 8022c1e:	42ab      	cmp	r3, r5
 8022c20:	dcf2      	bgt.n	8022c08 <_printf_i+0x1e8>
 8022c22:	e7eb      	b.n	8022bfc <_printf_i+0x1dc>
 8022c24:	2500      	movs	r5, #0
 8022c26:	f104 0919 	add.w	r9, r4, #25
 8022c2a:	e7f5      	b.n	8022c18 <_printf_i+0x1f8>
 8022c2c:	2b00      	cmp	r3, #0
 8022c2e:	d1ac      	bne.n	8022b8a <_printf_i+0x16a>
 8022c30:	7803      	ldrb	r3, [r0, #0]
 8022c32:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8022c36:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8022c3a:	e76c      	b.n	8022b16 <_printf_i+0xf6>
 8022c3c:	080265b5 	.word	0x080265b5
 8022c40:	080265c6 	.word	0x080265c6

08022c44 <_sbrk_r>:
 8022c44:	b538      	push	{r3, r4, r5, lr}
 8022c46:	4c06      	ldr	r4, [pc, #24]	; (8022c60 <_sbrk_r+0x1c>)
 8022c48:	2300      	movs	r3, #0
 8022c4a:	4605      	mov	r5, r0
 8022c4c:	4608      	mov	r0, r1
 8022c4e:	6023      	str	r3, [r4, #0]
 8022c50:	f7f6 fd7e 	bl	8019750 <_sbrk>
 8022c54:	1c43      	adds	r3, r0, #1
 8022c56:	d102      	bne.n	8022c5e <_sbrk_r+0x1a>
 8022c58:	6823      	ldr	r3, [r4, #0]
 8022c5a:	b103      	cbz	r3, 8022c5e <_sbrk_r+0x1a>
 8022c5c:	602b      	str	r3, [r5, #0]
 8022c5e:	bd38      	pop	{r3, r4, r5, pc}
 8022c60:	2000a9b4 	.word	0x2000a9b4

08022c64 <_raise_r>:
 8022c64:	291f      	cmp	r1, #31
 8022c66:	b538      	push	{r3, r4, r5, lr}
 8022c68:	4604      	mov	r4, r0
 8022c6a:	460d      	mov	r5, r1
 8022c6c:	d904      	bls.n	8022c78 <_raise_r+0x14>
 8022c6e:	2316      	movs	r3, #22
 8022c70:	6003      	str	r3, [r0, #0]
 8022c72:	f04f 30ff 	mov.w	r0, #4294967295
 8022c76:	bd38      	pop	{r3, r4, r5, pc}
 8022c78:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8022c7a:	b112      	cbz	r2, 8022c82 <_raise_r+0x1e>
 8022c7c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022c80:	b94b      	cbnz	r3, 8022c96 <_raise_r+0x32>
 8022c82:	4620      	mov	r0, r4
 8022c84:	f000 f830 	bl	8022ce8 <_getpid_r>
 8022c88:	462a      	mov	r2, r5
 8022c8a:	4601      	mov	r1, r0
 8022c8c:	4620      	mov	r0, r4
 8022c8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022c92:	f000 b817 	b.w	8022cc4 <_kill_r>
 8022c96:	2b01      	cmp	r3, #1
 8022c98:	d00a      	beq.n	8022cb0 <_raise_r+0x4c>
 8022c9a:	1c59      	adds	r1, r3, #1
 8022c9c:	d103      	bne.n	8022ca6 <_raise_r+0x42>
 8022c9e:	2316      	movs	r3, #22
 8022ca0:	6003      	str	r3, [r0, #0]
 8022ca2:	2001      	movs	r0, #1
 8022ca4:	e7e7      	b.n	8022c76 <_raise_r+0x12>
 8022ca6:	2400      	movs	r4, #0
 8022ca8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8022cac:	4628      	mov	r0, r5
 8022cae:	4798      	blx	r3
 8022cb0:	2000      	movs	r0, #0
 8022cb2:	e7e0      	b.n	8022c76 <_raise_r+0x12>

08022cb4 <raise>:
 8022cb4:	4b02      	ldr	r3, [pc, #8]	; (8022cc0 <raise+0xc>)
 8022cb6:	4601      	mov	r1, r0
 8022cb8:	6818      	ldr	r0, [r3, #0]
 8022cba:	f7ff bfd3 	b.w	8022c64 <_raise_r>
 8022cbe:	bf00      	nop
 8022cc0:	200000a8 	.word	0x200000a8

08022cc4 <_kill_r>:
 8022cc4:	b538      	push	{r3, r4, r5, lr}
 8022cc6:	4c07      	ldr	r4, [pc, #28]	; (8022ce4 <_kill_r+0x20>)
 8022cc8:	2300      	movs	r3, #0
 8022cca:	4605      	mov	r5, r0
 8022ccc:	4608      	mov	r0, r1
 8022cce:	4611      	mov	r1, r2
 8022cd0:	6023      	str	r3, [r4, #0]
 8022cd2:	f7f6 fcb5 	bl	8019640 <_kill>
 8022cd6:	1c43      	adds	r3, r0, #1
 8022cd8:	d102      	bne.n	8022ce0 <_kill_r+0x1c>
 8022cda:	6823      	ldr	r3, [r4, #0]
 8022cdc:	b103      	cbz	r3, 8022ce0 <_kill_r+0x1c>
 8022cde:	602b      	str	r3, [r5, #0]
 8022ce0:	bd38      	pop	{r3, r4, r5, pc}
 8022ce2:	bf00      	nop
 8022ce4:	2000a9b4 	.word	0x2000a9b4

08022ce8 <_getpid_r>:
 8022ce8:	f7f6 bca2 	b.w	8019630 <_getpid>

08022cec <__swbuf_r>:
 8022cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022cee:	460e      	mov	r6, r1
 8022cf0:	4614      	mov	r4, r2
 8022cf2:	4605      	mov	r5, r0
 8022cf4:	b118      	cbz	r0, 8022cfe <__swbuf_r+0x12>
 8022cf6:	6983      	ldr	r3, [r0, #24]
 8022cf8:	b90b      	cbnz	r3, 8022cfe <__swbuf_r+0x12>
 8022cfa:	f000 fa0b 	bl	8023114 <__sinit>
 8022cfe:	4b21      	ldr	r3, [pc, #132]	; (8022d84 <__swbuf_r+0x98>)
 8022d00:	429c      	cmp	r4, r3
 8022d02:	d12a      	bne.n	8022d5a <__swbuf_r+0x6e>
 8022d04:	686c      	ldr	r4, [r5, #4]
 8022d06:	69a3      	ldr	r3, [r4, #24]
 8022d08:	60a3      	str	r3, [r4, #8]
 8022d0a:	89a3      	ldrh	r3, [r4, #12]
 8022d0c:	071a      	lsls	r2, r3, #28
 8022d0e:	d52e      	bpl.n	8022d6e <__swbuf_r+0x82>
 8022d10:	6923      	ldr	r3, [r4, #16]
 8022d12:	b363      	cbz	r3, 8022d6e <__swbuf_r+0x82>
 8022d14:	6923      	ldr	r3, [r4, #16]
 8022d16:	6820      	ldr	r0, [r4, #0]
 8022d18:	1ac0      	subs	r0, r0, r3
 8022d1a:	6963      	ldr	r3, [r4, #20]
 8022d1c:	b2f6      	uxtb	r6, r6
 8022d1e:	4283      	cmp	r3, r0
 8022d20:	4637      	mov	r7, r6
 8022d22:	dc04      	bgt.n	8022d2e <__swbuf_r+0x42>
 8022d24:	4621      	mov	r1, r4
 8022d26:	4628      	mov	r0, r5
 8022d28:	f000 f98a 	bl	8023040 <_fflush_r>
 8022d2c:	bb28      	cbnz	r0, 8022d7a <__swbuf_r+0x8e>
 8022d2e:	68a3      	ldr	r3, [r4, #8]
 8022d30:	3b01      	subs	r3, #1
 8022d32:	60a3      	str	r3, [r4, #8]
 8022d34:	6823      	ldr	r3, [r4, #0]
 8022d36:	1c5a      	adds	r2, r3, #1
 8022d38:	6022      	str	r2, [r4, #0]
 8022d3a:	701e      	strb	r6, [r3, #0]
 8022d3c:	6963      	ldr	r3, [r4, #20]
 8022d3e:	3001      	adds	r0, #1
 8022d40:	4283      	cmp	r3, r0
 8022d42:	d004      	beq.n	8022d4e <__swbuf_r+0x62>
 8022d44:	89a3      	ldrh	r3, [r4, #12]
 8022d46:	07db      	lsls	r3, r3, #31
 8022d48:	d519      	bpl.n	8022d7e <__swbuf_r+0x92>
 8022d4a:	2e0a      	cmp	r6, #10
 8022d4c:	d117      	bne.n	8022d7e <__swbuf_r+0x92>
 8022d4e:	4621      	mov	r1, r4
 8022d50:	4628      	mov	r0, r5
 8022d52:	f000 f975 	bl	8023040 <_fflush_r>
 8022d56:	b190      	cbz	r0, 8022d7e <__swbuf_r+0x92>
 8022d58:	e00f      	b.n	8022d7a <__swbuf_r+0x8e>
 8022d5a:	4b0b      	ldr	r3, [pc, #44]	; (8022d88 <__swbuf_r+0x9c>)
 8022d5c:	429c      	cmp	r4, r3
 8022d5e:	d101      	bne.n	8022d64 <__swbuf_r+0x78>
 8022d60:	68ac      	ldr	r4, [r5, #8]
 8022d62:	e7d0      	b.n	8022d06 <__swbuf_r+0x1a>
 8022d64:	4b09      	ldr	r3, [pc, #36]	; (8022d8c <__swbuf_r+0xa0>)
 8022d66:	429c      	cmp	r4, r3
 8022d68:	bf08      	it	eq
 8022d6a:	68ec      	ldreq	r4, [r5, #12]
 8022d6c:	e7cb      	b.n	8022d06 <__swbuf_r+0x1a>
 8022d6e:	4621      	mov	r1, r4
 8022d70:	4628      	mov	r0, r5
 8022d72:	f000 f80d 	bl	8022d90 <__swsetup_r>
 8022d76:	2800      	cmp	r0, #0
 8022d78:	d0cc      	beq.n	8022d14 <__swbuf_r+0x28>
 8022d7a:	f04f 37ff 	mov.w	r7, #4294967295
 8022d7e:	4638      	mov	r0, r7
 8022d80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022d82:	bf00      	nop
 8022d84:	080265f8 	.word	0x080265f8
 8022d88:	08026618 	.word	0x08026618
 8022d8c:	080265d8 	.word	0x080265d8

08022d90 <__swsetup_r>:
 8022d90:	4b32      	ldr	r3, [pc, #200]	; (8022e5c <__swsetup_r+0xcc>)
 8022d92:	b570      	push	{r4, r5, r6, lr}
 8022d94:	681d      	ldr	r5, [r3, #0]
 8022d96:	4606      	mov	r6, r0
 8022d98:	460c      	mov	r4, r1
 8022d9a:	b125      	cbz	r5, 8022da6 <__swsetup_r+0x16>
 8022d9c:	69ab      	ldr	r3, [r5, #24]
 8022d9e:	b913      	cbnz	r3, 8022da6 <__swsetup_r+0x16>
 8022da0:	4628      	mov	r0, r5
 8022da2:	f000 f9b7 	bl	8023114 <__sinit>
 8022da6:	4b2e      	ldr	r3, [pc, #184]	; (8022e60 <__swsetup_r+0xd0>)
 8022da8:	429c      	cmp	r4, r3
 8022daa:	d10f      	bne.n	8022dcc <__swsetup_r+0x3c>
 8022dac:	686c      	ldr	r4, [r5, #4]
 8022dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022db2:	b29a      	uxth	r2, r3
 8022db4:	0715      	lsls	r5, r2, #28
 8022db6:	d42c      	bmi.n	8022e12 <__swsetup_r+0x82>
 8022db8:	06d0      	lsls	r0, r2, #27
 8022dba:	d411      	bmi.n	8022de0 <__swsetup_r+0x50>
 8022dbc:	2209      	movs	r2, #9
 8022dbe:	6032      	str	r2, [r6, #0]
 8022dc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022dc4:	81a3      	strh	r3, [r4, #12]
 8022dc6:	f04f 30ff 	mov.w	r0, #4294967295
 8022dca:	e03e      	b.n	8022e4a <__swsetup_r+0xba>
 8022dcc:	4b25      	ldr	r3, [pc, #148]	; (8022e64 <__swsetup_r+0xd4>)
 8022dce:	429c      	cmp	r4, r3
 8022dd0:	d101      	bne.n	8022dd6 <__swsetup_r+0x46>
 8022dd2:	68ac      	ldr	r4, [r5, #8]
 8022dd4:	e7eb      	b.n	8022dae <__swsetup_r+0x1e>
 8022dd6:	4b24      	ldr	r3, [pc, #144]	; (8022e68 <__swsetup_r+0xd8>)
 8022dd8:	429c      	cmp	r4, r3
 8022dda:	bf08      	it	eq
 8022ddc:	68ec      	ldreq	r4, [r5, #12]
 8022dde:	e7e6      	b.n	8022dae <__swsetup_r+0x1e>
 8022de0:	0751      	lsls	r1, r2, #29
 8022de2:	d512      	bpl.n	8022e0a <__swsetup_r+0x7a>
 8022de4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022de6:	b141      	cbz	r1, 8022dfa <__swsetup_r+0x6a>
 8022de8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022dec:	4299      	cmp	r1, r3
 8022dee:	d002      	beq.n	8022df6 <__swsetup_r+0x66>
 8022df0:	4630      	mov	r0, r6
 8022df2:	f7ff fbb7 	bl	8022564 <_free_r>
 8022df6:	2300      	movs	r3, #0
 8022df8:	6363      	str	r3, [r4, #52]	; 0x34
 8022dfa:	89a3      	ldrh	r3, [r4, #12]
 8022dfc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022e00:	81a3      	strh	r3, [r4, #12]
 8022e02:	2300      	movs	r3, #0
 8022e04:	6063      	str	r3, [r4, #4]
 8022e06:	6923      	ldr	r3, [r4, #16]
 8022e08:	6023      	str	r3, [r4, #0]
 8022e0a:	89a3      	ldrh	r3, [r4, #12]
 8022e0c:	f043 0308 	orr.w	r3, r3, #8
 8022e10:	81a3      	strh	r3, [r4, #12]
 8022e12:	6923      	ldr	r3, [r4, #16]
 8022e14:	b94b      	cbnz	r3, 8022e2a <__swsetup_r+0x9a>
 8022e16:	89a3      	ldrh	r3, [r4, #12]
 8022e18:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022e1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022e20:	d003      	beq.n	8022e2a <__swsetup_r+0x9a>
 8022e22:	4621      	mov	r1, r4
 8022e24:	4630      	mov	r0, r6
 8022e26:	f000 fa23 	bl	8023270 <__smakebuf_r>
 8022e2a:	89a2      	ldrh	r2, [r4, #12]
 8022e2c:	f012 0301 	ands.w	r3, r2, #1
 8022e30:	d00c      	beq.n	8022e4c <__swsetup_r+0xbc>
 8022e32:	2300      	movs	r3, #0
 8022e34:	60a3      	str	r3, [r4, #8]
 8022e36:	6963      	ldr	r3, [r4, #20]
 8022e38:	425b      	negs	r3, r3
 8022e3a:	61a3      	str	r3, [r4, #24]
 8022e3c:	6923      	ldr	r3, [r4, #16]
 8022e3e:	b953      	cbnz	r3, 8022e56 <__swsetup_r+0xc6>
 8022e40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022e44:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8022e48:	d1ba      	bne.n	8022dc0 <__swsetup_r+0x30>
 8022e4a:	bd70      	pop	{r4, r5, r6, pc}
 8022e4c:	0792      	lsls	r2, r2, #30
 8022e4e:	bf58      	it	pl
 8022e50:	6963      	ldrpl	r3, [r4, #20]
 8022e52:	60a3      	str	r3, [r4, #8]
 8022e54:	e7f2      	b.n	8022e3c <__swsetup_r+0xac>
 8022e56:	2000      	movs	r0, #0
 8022e58:	e7f7      	b.n	8022e4a <__swsetup_r+0xba>
 8022e5a:	bf00      	nop
 8022e5c:	200000a8 	.word	0x200000a8
 8022e60:	080265f8 	.word	0x080265f8
 8022e64:	08026618 	.word	0x08026618
 8022e68:	080265d8 	.word	0x080265d8

08022e6c <__register_exitproc>:
 8022e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022e70:	4d2c      	ldr	r5, [pc, #176]	; (8022f24 <__register_exitproc+0xb8>)
 8022e72:	682c      	ldr	r4, [r5, #0]
 8022e74:	4607      	mov	r7, r0
 8022e76:	460e      	mov	r6, r1
 8022e78:	4691      	mov	r9, r2
 8022e7a:	4698      	mov	r8, r3
 8022e7c:	b934      	cbnz	r4, 8022e8c <__register_exitproc+0x20>
 8022e7e:	4b2a      	ldr	r3, [pc, #168]	; (8022f28 <__register_exitproc+0xbc>)
 8022e80:	4c2a      	ldr	r4, [pc, #168]	; (8022f2c <__register_exitproc+0xc0>)
 8022e82:	602c      	str	r4, [r5, #0]
 8022e84:	b113      	cbz	r3, 8022e8c <__register_exitproc+0x20>
 8022e86:	681b      	ldr	r3, [r3, #0]
 8022e88:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8022e8c:	6863      	ldr	r3, [r4, #4]
 8022e8e:	2b1f      	cmp	r3, #31
 8022e90:	dd3d      	ble.n	8022f0e <__register_exitproc+0xa2>
 8022e92:	4b27      	ldr	r3, [pc, #156]	; (8022f30 <__register_exitproc+0xc4>)
 8022e94:	b91b      	cbnz	r3, 8022e9e <__register_exitproc+0x32>
 8022e96:	f04f 30ff 	mov.w	r0, #4294967295
 8022e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022e9e:	208c      	movs	r0, #140	; 0x8c
 8022ea0:	f7ff fb3c 	bl	802251c <malloc>
 8022ea4:	4604      	mov	r4, r0
 8022ea6:	2800      	cmp	r0, #0
 8022ea8:	d0f5      	beq.n	8022e96 <__register_exitproc+0x2a>
 8022eaa:	2300      	movs	r3, #0
 8022eac:	682a      	ldr	r2, [r5, #0]
 8022eae:	6002      	str	r2, [r0, #0]
 8022eb0:	6043      	str	r3, [r0, #4]
 8022eb2:	6028      	str	r0, [r5, #0]
 8022eb4:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 8022eb8:	b30f      	cbz	r7, 8022efe <__register_exitproc+0x92>
 8022eba:	f44f 7084 	mov.w	r0, #264	; 0x108
 8022ebe:	f7ff fb2d 	bl	802251c <malloc>
 8022ec2:	2800      	cmp	r0, #0
 8022ec4:	d0e7      	beq.n	8022e96 <__register_exitproc+0x2a>
 8022ec6:	2300      	movs	r3, #0
 8022ec8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 8022ecc:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 8022ed0:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8022ed4:	6862      	ldr	r2, [r4, #4]
 8022ed6:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 8022eda:	2301      	movs	r3, #1
 8022edc:	4093      	lsls	r3, r2
 8022ede:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8022ee2:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 8022ee6:	431a      	orrs	r2, r3
 8022ee8:	2f02      	cmp	r7, #2
 8022eea:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 8022eee:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 8022ef2:	bf02      	ittt	eq
 8022ef4:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 8022ef8:	4313      	orreq	r3, r2
 8022efa:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8022efe:	6863      	ldr	r3, [r4, #4]
 8022f00:	1c5a      	adds	r2, r3, #1
 8022f02:	3302      	adds	r3, #2
 8022f04:	6062      	str	r2, [r4, #4]
 8022f06:	2000      	movs	r0, #0
 8022f08:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8022f0c:	e7c5      	b.n	8022e9a <__register_exitproc+0x2e>
 8022f0e:	2f00      	cmp	r7, #0
 8022f10:	d0f5      	beq.n	8022efe <__register_exitproc+0x92>
 8022f12:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8022f16:	2800      	cmp	r0, #0
 8022f18:	d1dc      	bne.n	8022ed4 <__register_exitproc+0x68>
 8022f1a:	4b05      	ldr	r3, [pc, #20]	; (8022f30 <__register_exitproc+0xc4>)
 8022f1c:	2b00      	cmp	r3, #0
 8022f1e:	d0ba      	beq.n	8022e96 <__register_exitproc+0x2a>
 8022f20:	e7cb      	b.n	8022eba <__register_exitproc+0x4e>
 8022f22:	bf00      	nop
 8022f24:	20009e64 	.word	0x20009e64
 8022f28:	00000000 	.word	0x00000000
 8022f2c:	20009dd8 	.word	0x20009dd8
 8022f30:	0802251d 	.word	0x0802251d

08022f34 <__sflush_r>:
 8022f34:	898a      	ldrh	r2, [r1, #12]
 8022f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022f3a:	4605      	mov	r5, r0
 8022f3c:	0710      	lsls	r0, r2, #28
 8022f3e:	460c      	mov	r4, r1
 8022f40:	d458      	bmi.n	8022ff4 <__sflush_r+0xc0>
 8022f42:	684b      	ldr	r3, [r1, #4]
 8022f44:	2b00      	cmp	r3, #0
 8022f46:	dc05      	bgt.n	8022f54 <__sflush_r+0x20>
 8022f48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022f4a:	2b00      	cmp	r3, #0
 8022f4c:	dc02      	bgt.n	8022f54 <__sflush_r+0x20>
 8022f4e:	2000      	movs	r0, #0
 8022f50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022f54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022f56:	2e00      	cmp	r6, #0
 8022f58:	d0f9      	beq.n	8022f4e <__sflush_r+0x1a>
 8022f5a:	2300      	movs	r3, #0
 8022f5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022f60:	682f      	ldr	r7, [r5, #0]
 8022f62:	6a21      	ldr	r1, [r4, #32]
 8022f64:	602b      	str	r3, [r5, #0]
 8022f66:	d032      	beq.n	8022fce <__sflush_r+0x9a>
 8022f68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022f6a:	89a3      	ldrh	r3, [r4, #12]
 8022f6c:	075a      	lsls	r2, r3, #29
 8022f6e:	d505      	bpl.n	8022f7c <__sflush_r+0x48>
 8022f70:	6863      	ldr	r3, [r4, #4]
 8022f72:	1ac0      	subs	r0, r0, r3
 8022f74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022f76:	b10b      	cbz	r3, 8022f7c <__sflush_r+0x48>
 8022f78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022f7a:	1ac0      	subs	r0, r0, r3
 8022f7c:	2300      	movs	r3, #0
 8022f7e:	4602      	mov	r2, r0
 8022f80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022f82:	6a21      	ldr	r1, [r4, #32]
 8022f84:	4628      	mov	r0, r5
 8022f86:	47b0      	blx	r6
 8022f88:	1c43      	adds	r3, r0, #1
 8022f8a:	89a3      	ldrh	r3, [r4, #12]
 8022f8c:	d106      	bne.n	8022f9c <__sflush_r+0x68>
 8022f8e:	6829      	ldr	r1, [r5, #0]
 8022f90:	291d      	cmp	r1, #29
 8022f92:	d848      	bhi.n	8023026 <__sflush_r+0xf2>
 8022f94:	4a29      	ldr	r2, [pc, #164]	; (802303c <__sflush_r+0x108>)
 8022f96:	40ca      	lsrs	r2, r1
 8022f98:	07d6      	lsls	r6, r2, #31
 8022f9a:	d544      	bpl.n	8023026 <__sflush_r+0xf2>
 8022f9c:	2200      	movs	r2, #0
 8022f9e:	6062      	str	r2, [r4, #4]
 8022fa0:	04d9      	lsls	r1, r3, #19
 8022fa2:	6922      	ldr	r2, [r4, #16]
 8022fa4:	6022      	str	r2, [r4, #0]
 8022fa6:	d504      	bpl.n	8022fb2 <__sflush_r+0x7e>
 8022fa8:	1c42      	adds	r2, r0, #1
 8022faa:	d101      	bne.n	8022fb0 <__sflush_r+0x7c>
 8022fac:	682b      	ldr	r3, [r5, #0]
 8022fae:	b903      	cbnz	r3, 8022fb2 <__sflush_r+0x7e>
 8022fb0:	6560      	str	r0, [r4, #84]	; 0x54
 8022fb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022fb4:	602f      	str	r7, [r5, #0]
 8022fb6:	2900      	cmp	r1, #0
 8022fb8:	d0c9      	beq.n	8022f4e <__sflush_r+0x1a>
 8022fba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022fbe:	4299      	cmp	r1, r3
 8022fc0:	d002      	beq.n	8022fc8 <__sflush_r+0x94>
 8022fc2:	4628      	mov	r0, r5
 8022fc4:	f7ff face 	bl	8022564 <_free_r>
 8022fc8:	2000      	movs	r0, #0
 8022fca:	6360      	str	r0, [r4, #52]	; 0x34
 8022fcc:	e7c0      	b.n	8022f50 <__sflush_r+0x1c>
 8022fce:	2301      	movs	r3, #1
 8022fd0:	4628      	mov	r0, r5
 8022fd2:	47b0      	blx	r6
 8022fd4:	1c41      	adds	r1, r0, #1
 8022fd6:	d1c8      	bne.n	8022f6a <__sflush_r+0x36>
 8022fd8:	682b      	ldr	r3, [r5, #0]
 8022fda:	2b00      	cmp	r3, #0
 8022fdc:	d0c5      	beq.n	8022f6a <__sflush_r+0x36>
 8022fde:	2b1d      	cmp	r3, #29
 8022fe0:	d001      	beq.n	8022fe6 <__sflush_r+0xb2>
 8022fe2:	2b16      	cmp	r3, #22
 8022fe4:	d101      	bne.n	8022fea <__sflush_r+0xb6>
 8022fe6:	602f      	str	r7, [r5, #0]
 8022fe8:	e7b1      	b.n	8022f4e <__sflush_r+0x1a>
 8022fea:	89a3      	ldrh	r3, [r4, #12]
 8022fec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022ff0:	81a3      	strh	r3, [r4, #12]
 8022ff2:	e7ad      	b.n	8022f50 <__sflush_r+0x1c>
 8022ff4:	690f      	ldr	r7, [r1, #16]
 8022ff6:	2f00      	cmp	r7, #0
 8022ff8:	d0a9      	beq.n	8022f4e <__sflush_r+0x1a>
 8022ffa:	0793      	lsls	r3, r2, #30
 8022ffc:	680e      	ldr	r6, [r1, #0]
 8022ffe:	bf08      	it	eq
 8023000:	694b      	ldreq	r3, [r1, #20]
 8023002:	600f      	str	r7, [r1, #0]
 8023004:	bf18      	it	ne
 8023006:	2300      	movne	r3, #0
 8023008:	eba6 0807 	sub.w	r8, r6, r7
 802300c:	608b      	str	r3, [r1, #8]
 802300e:	f1b8 0f00 	cmp.w	r8, #0
 8023012:	dd9c      	ble.n	8022f4e <__sflush_r+0x1a>
 8023014:	4643      	mov	r3, r8
 8023016:	463a      	mov	r2, r7
 8023018:	6a21      	ldr	r1, [r4, #32]
 802301a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 802301c:	4628      	mov	r0, r5
 802301e:	47b0      	blx	r6
 8023020:	2800      	cmp	r0, #0
 8023022:	dc06      	bgt.n	8023032 <__sflush_r+0xfe>
 8023024:	89a3      	ldrh	r3, [r4, #12]
 8023026:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802302a:	81a3      	strh	r3, [r4, #12]
 802302c:	f04f 30ff 	mov.w	r0, #4294967295
 8023030:	e78e      	b.n	8022f50 <__sflush_r+0x1c>
 8023032:	4407      	add	r7, r0
 8023034:	eba8 0800 	sub.w	r8, r8, r0
 8023038:	e7e9      	b.n	802300e <__sflush_r+0xda>
 802303a:	bf00      	nop
 802303c:	20400001 	.word	0x20400001

08023040 <_fflush_r>:
 8023040:	b538      	push	{r3, r4, r5, lr}
 8023042:	690b      	ldr	r3, [r1, #16]
 8023044:	4605      	mov	r5, r0
 8023046:	460c      	mov	r4, r1
 8023048:	b1db      	cbz	r3, 8023082 <_fflush_r+0x42>
 802304a:	b118      	cbz	r0, 8023054 <_fflush_r+0x14>
 802304c:	6983      	ldr	r3, [r0, #24]
 802304e:	b90b      	cbnz	r3, 8023054 <_fflush_r+0x14>
 8023050:	f000 f860 	bl	8023114 <__sinit>
 8023054:	4b0c      	ldr	r3, [pc, #48]	; (8023088 <_fflush_r+0x48>)
 8023056:	429c      	cmp	r4, r3
 8023058:	d109      	bne.n	802306e <_fflush_r+0x2e>
 802305a:	686c      	ldr	r4, [r5, #4]
 802305c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8023060:	b17b      	cbz	r3, 8023082 <_fflush_r+0x42>
 8023062:	4621      	mov	r1, r4
 8023064:	4628      	mov	r0, r5
 8023066:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802306a:	f7ff bf63 	b.w	8022f34 <__sflush_r>
 802306e:	4b07      	ldr	r3, [pc, #28]	; (802308c <_fflush_r+0x4c>)
 8023070:	429c      	cmp	r4, r3
 8023072:	d101      	bne.n	8023078 <_fflush_r+0x38>
 8023074:	68ac      	ldr	r4, [r5, #8]
 8023076:	e7f1      	b.n	802305c <_fflush_r+0x1c>
 8023078:	4b05      	ldr	r3, [pc, #20]	; (8023090 <_fflush_r+0x50>)
 802307a:	429c      	cmp	r4, r3
 802307c:	bf08      	it	eq
 802307e:	68ec      	ldreq	r4, [r5, #12]
 8023080:	e7ec      	b.n	802305c <_fflush_r+0x1c>
 8023082:	2000      	movs	r0, #0
 8023084:	bd38      	pop	{r3, r4, r5, pc}
 8023086:	bf00      	nop
 8023088:	080265f8 	.word	0x080265f8
 802308c:	08026618 	.word	0x08026618
 8023090:	080265d8 	.word	0x080265d8

08023094 <std>:
 8023094:	2300      	movs	r3, #0
 8023096:	b510      	push	{r4, lr}
 8023098:	4604      	mov	r4, r0
 802309a:	e9c0 3300 	strd	r3, r3, [r0]
 802309e:	6083      	str	r3, [r0, #8]
 80230a0:	8181      	strh	r1, [r0, #12]
 80230a2:	6643      	str	r3, [r0, #100]	; 0x64
 80230a4:	81c2      	strh	r2, [r0, #14]
 80230a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80230aa:	6183      	str	r3, [r0, #24]
 80230ac:	4619      	mov	r1, r3
 80230ae:	2208      	movs	r2, #8
 80230b0:	305c      	adds	r0, #92	; 0x5c
 80230b2:	f7ff fa4e 	bl	8022552 <memset>
 80230b6:	4b05      	ldr	r3, [pc, #20]	; (80230cc <std+0x38>)
 80230b8:	6263      	str	r3, [r4, #36]	; 0x24
 80230ba:	4b05      	ldr	r3, [pc, #20]	; (80230d0 <std+0x3c>)
 80230bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80230be:	4b05      	ldr	r3, [pc, #20]	; (80230d4 <std+0x40>)
 80230c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80230c2:	4b05      	ldr	r3, [pc, #20]	; (80230d8 <std+0x44>)
 80230c4:	6224      	str	r4, [r4, #32]
 80230c6:	6323      	str	r3, [r4, #48]	; 0x30
 80230c8:	bd10      	pop	{r4, pc}
 80230ca:	bf00      	nop
 80230cc:	080232f5 	.word	0x080232f5
 80230d0:	08023317 	.word	0x08023317
 80230d4:	0802334f 	.word	0x0802334f
 80230d8:	08023373 	.word	0x08023373

080230dc <_cleanup_r>:
 80230dc:	4901      	ldr	r1, [pc, #4]	; (80230e4 <_cleanup_r+0x8>)
 80230de:	f000 b885 	b.w	80231ec <_fwalk_reent>
 80230e2:	bf00      	nop
 80230e4:	08023041 	.word	0x08023041

080230e8 <__sfmoreglue>:
 80230e8:	b570      	push	{r4, r5, r6, lr}
 80230ea:	1e4a      	subs	r2, r1, #1
 80230ec:	2568      	movs	r5, #104	; 0x68
 80230ee:	4355      	muls	r5, r2
 80230f0:	460e      	mov	r6, r1
 80230f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80230f6:	f7ff fa83 	bl	8022600 <_malloc_r>
 80230fa:	4604      	mov	r4, r0
 80230fc:	b140      	cbz	r0, 8023110 <__sfmoreglue+0x28>
 80230fe:	2100      	movs	r1, #0
 8023100:	e9c0 1600 	strd	r1, r6, [r0]
 8023104:	300c      	adds	r0, #12
 8023106:	60a0      	str	r0, [r4, #8]
 8023108:	f105 0268 	add.w	r2, r5, #104	; 0x68
 802310c:	f7ff fa21 	bl	8022552 <memset>
 8023110:	4620      	mov	r0, r4
 8023112:	bd70      	pop	{r4, r5, r6, pc}

08023114 <__sinit>:
 8023114:	6983      	ldr	r3, [r0, #24]
 8023116:	b510      	push	{r4, lr}
 8023118:	4604      	mov	r4, r0
 802311a:	bb33      	cbnz	r3, 802316a <__sinit+0x56>
 802311c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8023120:	6503      	str	r3, [r0, #80]	; 0x50
 8023122:	4b12      	ldr	r3, [pc, #72]	; (802316c <__sinit+0x58>)
 8023124:	4a12      	ldr	r2, [pc, #72]	; (8023170 <__sinit+0x5c>)
 8023126:	681b      	ldr	r3, [r3, #0]
 8023128:	6282      	str	r2, [r0, #40]	; 0x28
 802312a:	4298      	cmp	r0, r3
 802312c:	bf04      	itt	eq
 802312e:	2301      	moveq	r3, #1
 8023130:	6183      	streq	r3, [r0, #24]
 8023132:	f000 f81f 	bl	8023174 <__sfp>
 8023136:	6060      	str	r0, [r4, #4]
 8023138:	4620      	mov	r0, r4
 802313a:	f000 f81b 	bl	8023174 <__sfp>
 802313e:	60a0      	str	r0, [r4, #8]
 8023140:	4620      	mov	r0, r4
 8023142:	f000 f817 	bl	8023174 <__sfp>
 8023146:	2200      	movs	r2, #0
 8023148:	60e0      	str	r0, [r4, #12]
 802314a:	2104      	movs	r1, #4
 802314c:	6860      	ldr	r0, [r4, #4]
 802314e:	f7ff ffa1 	bl	8023094 <std>
 8023152:	2201      	movs	r2, #1
 8023154:	2109      	movs	r1, #9
 8023156:	68a0      	ldr	r0, [r4, #8]
 8023158:	f7ff ff9c 	bl	8023094 <std>
 802315c:	2202      	movs	r2, #2
 802315e:	2112      	movs	r1, #18
 8023160:	68e0      	ldr	r0, [r4, #12]
 8023162:	f7ff ff97 	bl	8023094 <std>
 8023166:	2301      	movs	r3, #1
 8023168:	61a3      	str	r3, [r4, #24]
 802316a:	bd10      	pop	{r4, pc}
 802316c:	080265a0 	.word	0x080265a0
 8023170:	080230dd 	.word	0x080230dd

08023174 <__sfp>:
 8023174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023176:	4b1b      	ldr	r3, [pc, #108]	; (80231e4 <__sfp+0x70>)
 8023178:	681e      	ldr	r6, [r3, #0]
 802317a:	69b3      	ldr	r3, [r6, #24]
 802317c:	4607      	mov	r7, r0
 802317e:	b913      	cbnz	r3, 8023186 <__sfp+0x12>
 8023180:	4630      	mov	r0, r6
 8023182:	f7ff ffc7 	bl	8023114 <__sinit>
 8023186:	3648      	adds	r6, #72	; 0x48
 8023188:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 802318c:	3b01      	subs	r3, #1
 802318e:	d503      	bpl.n	8023198 <__sfp+0x24>
 8023190:	6833      	ldr	r3, [r6, #0]
 8023192:	b133      	cbz	r3, 80231a2 <__sfp+0x2e>
 8023194:	6836      	ldr	r6, [r6, #0]
 8023196:	e7f7      	b.n	8023188 <__sfp+0x14>
 8023198:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 802319c:	b16d      	cbz	r5, 80231ba <__sfp+0x46>
 802319e:	3468      	adds	r4, #104	; 0x68
 80231a0:	e7f4      	b.n	802318c <__sfp+0x18>
 80231a2:	2104      	movs	r1, #4
 80231a4:	4638      	mov	r0, r7
 80231a6:	f7ff ff9f 	bl	80230e8 <__sfmoreglue>
 80231aa:	6030      	str	r0, [r6, #0]
 80231ac:	2800      	cmp	r0, #0
 80231ae:	d1f1      	bne.n	8023194 <__sfp+0x20>
 80231b0:	230c      	movs	r3, #12
 80231b2:	603b      	str	r3, [r7, #0]
 80231b4:	4604      	mov	r4, r0
 80231b6:	4620      	mov	r0, r4
 80231b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80231ba:	4b0b      	ldr	r3, [pc, #44]	; (80231e8 <__sfp+0x74>)
 80231bc:	6665      	str	r5, [r4, #100]	; 0x64
 80231be:	e9c4 5500 	strd	r5, r5, [r4]
 80231c2:	60a5      	str	r5, [r4, #8]
 80231c4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80231c8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80231cc:	2208      	movs	r2, #8
 80231ce:	4629      	mov	r1, r5
 80231d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80231d4:	f7ff f9bd 	bl	8022552 <memset>
 80231d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80231dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80231e0:	e7e9      	b.n	80231b6 <__sfp+0x42>
 80231e2:	bf00      	nop
 80231e4:	080265a0 	.word	0x080265a0
 80231e8:	ffff0001 	.word	0xffff0001

080231ec <_fwalk_reent>:
 80231ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80231f0:	4680      	mov	r8, r0
 80231f2:	4689      	mov	r9, r1
 80231f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80231f8:	2600      	movs	r6, #0
 80231fa:	b914      	cbnz	r4, 8023202 <_fwalk_reent+0x16>
 80231fc:	4630      	mov	r0, r6
 80231fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023202:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8023206:	3f01      	subs	r7, #1
 8023208:	d501      	bpl.n	802320e <_fwalk_reent+0x22>
 802320a:	6824      	ldr	r4, [r4, #0]
 802320c:	e7f5      	b.n	80231fa <_fwalk_reent+0xe>
 802320e:	89ab      	ldrh	r3, [r5, #12]
 8023210:	2b01      	cmp	r3, #1
 8023212:	d907      	bls.n	8023224 <_fwalk_reent+0x38>
 8023214:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023218:	3301      	adds	r3, #1
 802321a:	d003      	beq.n	8023224 <_fwalk_reent+0x38>
 802321c:	4629      	mov	r1, r5
 802321e:	4640      	mov	r0, r8
 8023220:	47c8      	blx	r9
 8023222:	4306      	orrs	r6, r0
 8023224:	3568      	adds	r5, #104	; 0x68
 8023226:	e7ee      	b.n	8023206 <_fwalk_reent+0x1a>

08023228 <__swhatbuf_r>:
 8023228:	b570      	push	{r4, r5, r6, lr}
 802322a:	460e      	mov	r6, r1
 802322c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023230:	2900      	cmp	r1, #0
 8023232:	b096      	sub	sp, #88	; 0x58
 8023234:	4614      	mov	r4, r2
 8023236:	461d      	mov	r5, r3
 8023238:	da07      	bge.n	802324a <__swhatbuf_r+0x22>
 802323a:	2300      	movs	r3, #0
 802323c:	602b      	str	r3, [r5, #0]
 802323e:	89b3      	ldrh	r3, [r6, #12]
 8023240:	061a      	lsls	r2, r3, #24
 8023242:	d410      	bmi.n	8023266 <__swhatbuf_r+0x3e>
 8023244:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8023248:	e00e      	b.n	8023268 <__swhatbuf_r+0x40>
 802324a:	466a      	mov	r2, sp
 802324c:	f000 f8b8 	bl	80233c0 <_fstat_r>
 8023250:	2800      	cmp	r0, #0
 8023252:	dbf2      	blt.n	802323a <__swhatbuf_r+0x12>
 8023254:	9a01      	ldr	r2, [sp, #4]
 8023256:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 802325a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 802325e:	425a      	negs	r2, r3
 8023260:	415a      	adcs	r2, r3
 8023262:	602a      	str	r2, [r5, #0]
 8023264:	e7ee      	b.n	8023244 <__swhatbuf_r+0x1c>
 8023266:	2340      	movs	r3, #64	; 0x40
 8023268:	2000      	movs	r0, #0
 802326a:	6023      	str	r3, [r4, #0]
 802326c:	b016      	add	sp, #88	; 0x58
 802326e:	bd70      	pop	{r4, r5, r6, pc}

08023270 <__smakebuf_r>:
 8023270:	898b      	ldrh	r3, [r1, #12]
 8023272:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8023274:	079d      	lsls	r5, r3, #30
 8023276:	4606      	mov	r6, r0
 8023278:	460c      	mov	r4, r1
 802327a:	d507      	bpl.n	802328c <__smakebuf_r+0x1c>
 802327c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023280:	6023      	str	r3, [r4, #0]
 8023282:	6123      	str	r3, [r4, #16]
 8023284:	2301      	movs	r3, #1
 8023286:	6163      	str	r3, [r4, #20]
 8023288:	b002      	add	sp, #8
 802328a:	bd70      	pop	{r4, r5, r6, pc}
 802328c:	ab01      	add	r3, sp, #4
 802328e:	466a      	mov	r2, sp
 8023290:	f7ff ffca 	bl	8023228 <__swhatbuf_r>
 8023294:	9900      	ldr	r1, [sp, #0]
 8023296:	4605      	mov	r5, r0
 8023298:	4630      	mov	r0, r6
 802329a:	f7ff f9b1 	bl	8022600 <_malloc_r>
 802329e:	b948      	cbnz	r0, 80232b4 <__smakebuf_r+0x44>
 80232a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80232a4:	059a      	lsls	r2, r3, #22
 80232a6:	d4ef      	bmi.n	8023288 <__smakebuf_r+0x18>
 80232a8:	f023 0303 	bic.w	r3, r3, #3
 80232ac:	f043 0302 	orr.w	r3, r3, #2
 80232b0:	81a3      	strh	r3, [r4, #12]
 80232b2:	e7e3      	b.n	802327c <__smakebuf_r+0xc>
 80232b4:	4b0d      	ldr	r3, [pc, #52]	; (80232ec <__smakebuf_r+0x7c>)
 80232b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80232b8:	89a3      	ldrh	r3, [r4, #12]
 80232ba:	6020      	str	r0, [r4, #0]
 80232bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80232c0:	81a3      	strh	r3, [r4, #12]
 80232c2:	9b00      	ldr	r3, [sp, #0]
 80232c4:	6163      	str	r3, [r4, #20]
 80232c6:	9b01      	ldr	r3, [sp, #4]
 80232c8:	6120      	str	r0, [r4, #16]
 80232ca:	b15b      	cbz	r3, 80232e4 <__smakebuf_r+0x74>
 80232cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80232d0:	4630      	mov	r0, r6
 80232d2:	f000 f887 	bl	80233e4 <_isatty_r>
 80232d6:	b128      	cbz	r0, 80232e4 <__smakebuf_r+0x74>
 80232d8:	89a3      	ldrh	r3, [r4, #12]
 80232da:	f023 0303 	bic.w	r3, r3, #3
 80232de:	f043 0301 	orr.w	r3, r3, #1
 80232e2:	81a3      	strh	r3, [r4, #12]
 80232e4:	89a3      	ldrh	r3, [r4, #12]
 80232e6:	431d      	orrs	r5, r3
 80232e8:	81a5      	strh	r5, [r4, #12]
 80232ea:	e7cd      	b.n	8023288 <__smakebuf_r+0x18>
 80232ec:	080230dd 	.word	0x080230dd

080232f0 <__malloc_lock>:
 80232f0:	4770      	bx	lr

080232f2 <__malloc_unlock>:
 80232f2:	4770      	bx	lr

080232f4 <__sread>:
 80232f4:	b510      	push	{r4, lr}
 80232f6:	460c      	mov	r4, r1
 80232f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80232fc:	f000 f894 	bl	8023428 <_read_r>
 8023300:	2800      	cmp	r0, #0
 8023302:	bfab      	itete	ge
 8023304:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023306:	89a3      	ldrhlt	r3, [r4, #12]
 8023308:	181b      	addge	r3, r3, r0
 802330a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 802330e:	bfac      	ite	ge
 8023310:	6563      	strge	r3, [r4, #84]	; 0x54
 8023312:	81a3      	strhlt	r3, [r4, #12]
 8023314:	bd10      	pop	{r4, pc}

08023316 <__swrite>:
 8023316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802331a:	461f      	mov	r7, r3
 802331c:	898b      	ldrh	r3, [r1, #12]
 802331e:	05db      	lsls	r3, r3, #23
 8023320:	4605      	mov	r5, r0
 8023322:	460c      	mov	r4, r1
 8023324:	4616      	mov	r6, r2
 8023326:	d505      	bpl.n	8023334 <__swrite+0x1e>
 8023328:	2302      	movs	r3, #2
 802332a:	2200      	movs	r2, #0
 802332c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023330:	f000 f868 	bl	8023404 <_lseek_r>
 8023334:	89a3      	ldrh	r3, [r4, #12]
 8023336:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802333a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 802333e:	81a3      	strh	r3, [r4, #12]
 8023340:	4632      	mov	r2, r6
 8023342:	463b      	mov	r3, r7
 8023344:	4628      	mov	r0, r5
 8023346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802334a:	f000 b817 	b.w	802337c <_write_r>

0802334e <__sseek>:
 802334e:	b510      	push	{r4, lr}
 8023350:	460c      	mov	r4, r1
 8023352:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023356:	f000 f855 	bl	8023404 <_lseek_r>
 802335a:	1c43      	adds	r3, r0, #1
 802335c:	89a3      	ldrh	r3, [r4, #12]
 802335e:	bf15      	itete	ne
 8023360:	6560      	strne	r0, [r4, #84]	; 0x54
 8023362:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8023366:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802336a:	81a3      	strheq	r3, [r4, #12]
 802336c:	bf18      	it	ne
 802336e:	81a3      	strhne	r3, [r4, #12]
 8023370:	bd10      	pop	{r4, pc}

08023372 <__sclose>:
 8023372:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023376:	f000 b813 	b.w	80233a0 <_close_r>
	...

0802337c <_write_r>:
 802337c:	b538      	push	{r3, r4, r5, lr}
 802337e:	4c07      	ldr	r4, [pc, #28]	; (802339c <_write_r+0x20>)
 8023380:	4605      	mov	r5, r0
 8023382:	4608      	mov	r0, r1
 8023384:	4611      	mov	r1, r2
 8023386:	2200      	movs	r2, #0
 8023388:	6022      	str	r2, [r4, #0]
 802338a:	461a      	mov	r2, r3
 802338c:	f7f6 f98f 	bl	80196ae <_write>
 8023390:	1c43      	adds	r3, r0, #1
 8023392:	d102      	bne.n	802339a <_write_r+0x1e>
 8023394:	6823      	ldr	r3, [r4, #0]
 8023396:	b103      	cbz	r3, 802339a <_write_r+0x1e>
 8023398:	602b      	str	r3, [r5, #0]
 802339a:	bd38      	pop	{r3, r4, r5, pc}
 802339c:	2000a9b4 	.word	0x2000a9b4

080233a0 <_close_r>:
 80233a0:	b538      	push	{r3, r4, r5, lr}
 80233a2:	4c06      	ldr	r4, [pc, #24]	; (80233bc <_close_r+0x1c>)
 80233a4:	2300      	movs	r3, #0
 80233a6:	4605      	mov	r5, r0
 80233a8:	4608      	mov	r0, r1
 80233aa:	6023      	str	r3, [r4, #0]
 80233ac:	f7f6 f99b 	bl	80196e6 <_close>
 80233b0:	1c43      	adds	r3, r0, #1
 80233b2:	d102      	bne.n	80233ba <_close_r+0x1a>
 80233b4:	6823      	ldr	r3, [r4, #0]
 80233b6:	b103      	cbz	r3, 80233ba <_close_r+0x1a>
 80233b8:	602b      	str	r3, [r5, #0]
 80233ba:	bd38      	pop	{r3, r4, r5, pc}
 80233bc:	2000a9b4 	.word	0x2000a9b4

080233c0 <_fstat_r>:
 80233c0:	b538      	push	{r3, r4, r5, lr}
 80233c2:	4c07      	ldr	r4, [pc, #28]	; (80233e0 <_fstat_r+0x20>)
 80233c4:	2300      	movs	r3, #0
 80233c6:	4605      	mov	r5, r0
 80233c8:	4608      	mov	r0, r1
 80233ca:	4611      	mov	r1, r2
 80233cc:	6023      	str	r3, [r4, #0]
 80233ce:	f7f6 f996 	bl	80196fe <_fstat>
 80233d2:	1c43      	adds	r3, r0, #1
 80233d4:	d102      	bne.n	80233dc <_fstat_r+0x1c>
 80233d6:	6823      	ldr	r3, [r4, #0]
 80233d8:	b103      	cbz	r3, 80233dc <_fstat_r+0x1c>
 80233da:	602b      	str	r3, [r5, #0]
 80233dc:	bd38      	pop	{r3, r4, r5, pc}
 80233de:	bf00      	nop
 80233e0:	2000a9b4 	.word	0x2000a9b4

080233e4 <_isatty_r>:
 80233e4:	b538      	push	{r3, r4, r5, lr}
 80233e6:	4c06      	ldr	r4, [pc, #24]	; (8023400 <_isatty_r+0x1c>)
 80233e8:	2300      	movs	r3, #0
 80233ea:	4605      	mov	r5, r0
 80233ec:	4608      	mov	r0, r1
 80233ee:	6023      	str	r3, [r4, #0]
 80233f0:	f7f6 f995 	bl	801971e <_isatty>
 80233f4:	1c43      	adds	r3, r0, #1
 80233f6:	d102      	bne.n	80233fe <_isatty_r+0x1a>
 80233f8:	6823      	ldr	r3, [r4, #0]
 80233fa:	b103      	cbz	r3, 80233fe <_isatty_r+0x1a>
 80233fc:	602b      	str	r3, [r5, #0]
 80233fe:	bd38      	pop	{r3, r4, r5, pc}
 8023400:	2000a9b4 	.word	0x2000a9b4

08023404 <_lseek_r>:
 8023404:	b538      	push	{r3, r4, r5, lr}
 8023406:	4c07      	ldr	r4, [pc, #28]	; (8023424 <_lseek_r+0x20>)
 8023408:	4605      	mov	r5, r0
 802340a:	4608      	mov	r0, r1
 802340c:	4611      	mov	r1, r2
 802340e:	2200      	movs	r2, #0
 8023410:	6022      	str	r2, [r4, #0]
 8023412:	461a      	mov	r2, r3
 8023414:	f7f6 f98e 	bl	8019734 <_lseek>
 8023418:	1c43      	adds	r3, r0, #1
 802341a:	d102      	bne.n	8023422 <_lseek_r+0x1e>
 802341c:	6823      	ldr	r3, [r4, #0]
 802341e:	b103      	cbz	r3, 8023422 <_lseek_r+0x1e>
 8023420:	602b      	str	r3, [r5, #0]
 8023422:	bd38      	pop	{r3, r4, r5, pc}
 8023424:	2000a9b4 	.word	0x2000a9b4

08023428 <_read_r>:
 8023428:	b538      	push	{r3, r4, r5, lr}
 802342a:	4c07      	ldr	r4, [pc, #28]	; (8023448 <_read_r+0x20>)
 802342c:	4605      	mov	r5, r0
 802342e:	4608      	mov	r0, r1
 8023430:	4611      	mov	r1, r2
 8023432:	2200      	movs	r2, #0
 8023434:	6022      	str	r2, [r4, #0]
 8023436:	461a      	mov	r2, r3
 8023438:	f7f6 f91c 	bl	8019674 <_read>
 802343c:	1c43      	adds	r3, r0, #1
 802343e:	d102      	bne.n	8023446 <_read_r+0x1e>
 8023440:	6823      	ldr	r3, [r4, #0]
 8023442:	b103      	cbz	r3, 8023446 <_read_r+0x1e>
 8023444:	602b      	str	r3, [r5, #0]
 8023446:	bd38      	pop	{r3, r4, r5, pc}
 8023448:	2000a9b4 	.word	0x2000a9b4

0802344c <_init>:
 802344c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802344e:	bf00      	nop
 8023450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023452:	bc08      	pop	{r3}
 8023454:	469e      	mov	lr, r3
 8023456:	4770      	bx	lr

08023458 <_fini>:
 8023458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802345a:	bf00      	nop
 802345c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802345e:	bc08      	pop	{r3}
 8023460:	469e      	mov	lr, r3
 8023462:	4770      	bx	lr
